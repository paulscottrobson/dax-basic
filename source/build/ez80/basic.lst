    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b6 ; gosub
   64 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b7 ; return
   65 00:0000 -  -  -  -  #define KWD_GOTO                            	$00b8 ; goto
   66 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b9 ; local
   67 00:0000 -  -  -  -  #define KWD_DIM                             	$00ba ; dim
   68 00:0000 -  -  -  -  #define KWD_REM                             	$00bb ; rem
   69 00:0000 -  -  -  -  #define KWD_LET                             	$00bc ; let
   70 00:0000 -  -  -  -  #define KWD_VDU                             	$00bd ; vdu
   71 00:0000 -  -  -  -  #define KWD_PRINT                           	$00be ; print
   72 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bf ; load
   73 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c0 ; save
   74 00:0000 -  -  -  -  #define KWD_LIST                            	$00c1 ; list
   75 00:0000 -  -  -  -  #define KWD_NEW                             	$00c2 ; new
   76 00:0000 -  -  -  -  #define KWD_RUN                             	$00c3 ; run
   77 00:0000 -  -  -  -  #define KWD_READ                            	$00c4 ; read
   78 00:0000 -  -  -  -  #define KWD_DATA                            	$00c5 ; data
   79 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c6 ; restore
   80 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c7 ; assert
   81 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c8 ; clear
   82 00:0000 -  -  -  -  #define KWD_END                             	$00c9 ; end
   83 00:0000 -  -  -  -  #define KWD_STOP                            	$00ca ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD D6 0D 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 AB 2D 00 		ld 		hl,EndTestInstance
   46 00:000C CD 0E 08 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 60 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 DD 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD D8 0D 00 		call 	SYSPrintChar
   56 00:0020 CD D7 0D 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 9A 
              02 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 9A 
              02 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  		
   78 00:005C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  
   81 00:0060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:0060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:0066 -  -  -  -  
   84 00:0066 -  -  -  -  AConvert: 									; used for address conversions.
   85 00:0066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006C -  -  -  -  		
   87 00:006C -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:006C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:007C -  -  -  -  
   90 00:007C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:007C 00 00 -  -  		.dw 	0
   92 00:007E -  -  -  -  
   93 00:007E -  -  -  -  ; ***************************************************************************************
   94 00:007E -  -  -  -  ;
   95 00:007E -  -  -  -  ;									Variable Information
   96 00:007E -  -  -  -  ;
   97 00:007E -  -  -  -  ; ***************************************************************************************
   98 00:007E -  -  -  -  
   99 00:007E -  -  -  -  VarNameStart: 								; first byte of name
  100 00:007E 00 00 00 00 		.dw 	0,0
  101 00:0082 -  -  -  -  VarHash: 									; name hash value
  102 00:0082 00 00 -  -  		.dw 	0		
  103 00:0084 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:0084 00 00 00 00 		.dw 	0,0
  105 00:0088 -  -  -  -  		
  106 00:0088 -  -  -  -  ; ***************************************************************************************
  107 00:0088 -  -  -  -  ;
  108 00:0088 -  -  -  -  ;										  Buffers
  109 00:0088 -  -  -  -  ;
  110 00:0088 -  -  -  -  ; ***************************************************************************************
  111 00:0088 -  -  -  -  
  112 00:0088 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:0088 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:0098 -  -  -  -  
  115 00:0098 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:0098 00 00 -  -  		.dw 	0
  117 00:009A -  -  -  -  
  118 00:009A -  -  -  -  ConvertBuffer: 								; general usage
  119 00:009A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:00DA -  -  -  -  
  121 00:00DA -  -  -  -  ; ***************************************************************************************
  122 00:00DA -  -  -  -  ;
  123 00:00DA -  -  -  -  ;									Changes and Updates
  124 00:00DA -  -  -  -  ;
  125 00:00DA -  -  -  -  ; ***************************************************************************************
  126 00:00DA -  -  -  -  ;
  127 00:00DA -  -  -  -  ;		Date			Notes
  128 00:00DA -  -  -  -  ;		==== 			=====
  129 00:00DA -  -  -  -  ;
  130 00:00DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00DA -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00DA -  -  -  -  ; ***************************************************************************************
    2 00:00DA -  -  -  -  ; ***************************************************************************************
    3 00:00DA -  -  -  -  ;
    4 00:00DA -  -  -  -  ;		Name : 		assert.asm
    5 00:00DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DA -  -  -  -  ;		Reviewed :	No
    8 00:00DA -  -  -  -  ;		Purpose :	Assert command
    9 00:00DA -  -  -  -  ;
   10 00:00DA -  -  -  -  ; ***************************************************************************************
   11 00:00DA -  -  -  -  ; ***************************************************************************************
   12 00:00DA -  -  -  -  
   13 00:00DA -  -  -  -  ; ***************************************************************************************
   14 00:00DA -  -  -  -  ;
   15 00:00DA -  -  -  -  ;									ASSERT command
   16 00:00DA -  -  -  -  ;
   17 00:00DA -  -  -  -  ; ***************************************************************************************
   18 00:00DA -  -  -  -  
   19 00:00DA -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00DA CD CD 04 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00DE 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00E4 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00E5 3E 01 C3 9A 
              02 00 -  -  		ERR_ASSERT
   24 00:00EB -  -  -  -  
   25 00:00EB -  -  -  -  ; ***************************************************************************************
   26 00:00EB -  -  -  -  ;
   27 00:00EB -  -  -  -  ;									Changes and Updates
   28 00:00EB -  -  -  -  ;
   29 00:00EB -  -  -  -  ; ***************************************************************************************
   30 00:00EB -  -  -  -  ;
   31 00:00EB -  -  -  -  ;		Date			Notes
   32 00:00EB -  -  -  -  ;		==== 			=====
   33 00:00EB -  -  -  -  ;
   34 00:00EB -  -  -  -  ; ***************************************************************************************
   35 00:00EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:00EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00EB -  -  -  -  ; ***************************************************************************************
    2 00:00EB -  -  -  -  ; ***************************************************************************************
    3 00:00EB -  -  -  -  ;
    4 00:00EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00EB -  -  -  -  ;		Reviewed :	No
    8 00:00EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00EB -  -  -  -  ;
   10 00:00EB -  -  -  -  ; ***************************************************************************************
   11 00:00EB -  -  -  -  ; ***************************************************************************************
   12 00:00EB -  -  -  -  
   13 00:00EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00EB -  -  -  -  BadCmd_To: 			;; [to]
   18 00:00EB C3 04 03 00 		jp 		SyntaxError
   19 00:00EF -  -  -  -  
   20 00:00EF -  -  -  -  ; ***************************************************************************************
   21 00:00EF -  -  -  -  ;
   22 00:00EF -  -  -  -  ;									Changes and Updates
   23 00:00EF -  -  -  -  ;
   24 00:00EF -  -  -  -  ; ***************************************************************************************
   25 00:00EF -  -  -  -  ;
   26 00:00EF -  -  -  -  ;		Date			Notes
   27 00:00EF -  -  -  -  ;		==== 			=====
   28 00:00EF -  -  -  -  ;
   29 00:00EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00EF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00EF -  -  -  -  ; ***************************************************************************************
    2 00:00EF -  -  -  -  ; ***************************************************************************************
    3 00:00EF -  -  -  -  ;
    4 00:00EF -  -  -  -  ;		Name : 		colon.asm
    5 00:00EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00EF -  -  -  -  ;		Reviewed :	No
    8 00:00EF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00EF -  -  -  -  ;
   10 00:00EF -  -  -  -  ; ***************************************************************************************
   11 00:00EF -  -  -  -  ; ***************************************************************************************
   12 00:00EF -  -  -  -  
   13 00:00EF -  -  -  -  ; ***************************************************************************************
   14 00:00EF -  -  -  -  ;
   15 00:00EF -  -  -  -  ;								Colon command, this is ignored.
   16 00:00EF -  -  -  -  ;
   17 00:00EF -  -  -  -  ; ***************************************************************************************
   18 00:00EF -  -  -  -  
   19 00:00EF -  -  -  -  Command_Colon: 	;; [:]
   20 00:00EF C9 -  -  -  		ret
   21 00:00F0 -  -  -  -  
   22 00:00F0 -  -  -  -  ; ***************************************************************************************
   23 00:00F0 -  -  -  -  ;
   24 00:00F0 -  -  -  -  ;									Changes and Updates
   25 00:00F0 -  -  -  -  ;
   26 00:00F0 -  -  -  -  ; ***************************************************************************************
   27 00:00F0 -  -  -  -  ;
   28 00:00F0 -  -  -  -  ;		Date			Notes
   29 00:00F0 -  -  -  -  ;		==== 			=====
   30 00:00F0 -  -  -  -  ;
   31 00:00F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F0 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F0 -  -  -  -  ; ***************************************************************************************
    2 00:00F0 -  -  -  -  ; ***************************************************************************************
    3 00:00F0 -  -  -  -  ;
    4 00:00F0 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F0 -  -  -  -  ;		Reviewed :	No
    8 00:00F0 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F0 -  -  -  -  ;
   10 00:00F0 -  -  -  -  ; ***************************************************************************************
   11 00:00F0 -  -  -  -  ; ***************************************************************************************
   12 00:00F0 -  -  -  -  
   13 00:00F0 -  -  -  -  ; ***************************************************************************************
   14 00:00F0 -  -  -  -  ;
   15 00:00F0 -  -  -  -  ;		DIM command
   16 00:00F0 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 00:00F0 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 00:00F0 -  -  -  -  ;								(can be comma chained)
   19 00:00F0 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 00:00F0 -  -  -  -  ;
   21 00:00F0 -  -  -  -  ; ***************************************************************************************
   22 00:00F0 -  -  -  -  
   23 00:00F0 -  -  -  -  Command_DIM: 	;; [dim]
   24 00:00F0 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   25 00:00F8 -  -  -  -  
   26 00:00F8 -  -  -  -  ; ***************************************************************************************
   27 00:00F8 -  -  -  -  ;
   28 00:00F8 -  -  -  -  ;									Changes and Updates
   29 00:00F8 -  -  -  -  ;
   30 00:00F8 -  -  -  -  ; ***************************************************************************************
   31 00:00F8 -  -  -  -  ;
   32 00:00F8 -  -  -  -  ;		Date			Notes
   33 00:00F8 -  -  -  -  ;		==== 			=====
   34 00:00F8 -  -  -  -  ;
   35 00:00F8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:00F8 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00F8 -  -  -  -  ; ***************************************************************************************
    2 00:00F8 -  -  -  -  ; ***************************************************************************************
    3 00:00F8 -  -  -  -  ;
    4 00:00F8 -  -  -  -  ;		Name : 		end.asm
    5 00:00F8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F8 -  -  -  -  ;		Reviewed :	No
    8 00:00F8 -  -  -  -  ;		Purpose :	End command
    9 00:00F8 -  -  -  -  ;
   10 00:00F8 -  -  -  -  ; ***************************************************************************************
   11 00:00F8 -  -  -  -  ; ***************************************************************************************
   12 00:00F8 -  -  -  -  
   13 00:00F8 -  -  -  -  ; ***************************************************************************************
   14 00:00F8 -  -  -  -  ;
   15 00:00F8 -  -  -  -  ;										END command
   16 00:00F8 -  -  -  -  ;
   17 00:00F8 -  -  -  -  ; ***************************************************************************************
   18 00:00F8 -  -  -  -  
   19 00:00F8 -  -  -  -  Command_END: 	;; [end]
   20 00:00F8 3E 00 C3 9A 
              02 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00FE -  -  -  -  
   22 00:00FE -  -  -  -  ; ***************************************************************************************
   23 00:00FE -  -  -  -  ;
   24 00:00FE -  -  -  -  ;									Changes and Updates
   25 00:00FE -  -  -  -  ;
   26 00:00FE -  -  -  -  ; ***************************************************************************************
   27 00:00FE -  -  -  -  ;
   28 00:00FE -  -  -  -  ;		Date			Notes
   29 00:00FE -  -  -  -  ;		==== 			=====
   30 00:00FE -  -  -  -  ;
   31 00:00FE -  -  -  -  ; ***************************************************************************************
   32 00:00FE -  -  -  -  		
Listing for file "_build.asm"
   18 00:00FE -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00FE -  -  -  -  ; ***************************************************************************************
    2 00:00FE -  -  -  -  ; ***************************************************************************************
    3 00:00FE -  -  -  -  ;
    4 00:00FE -  -  -  -  ;		Name : 		endofline.asm
    5 00:00FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00FE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00FE -  -  -  -  ;		Reviewed :	None
    8 00:00FE -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00FE -  -  -  -  ;
   10 00:00FE -  -  -  -  ; ***************************************************************************************
   11 00:00FE -  -  -  -  ; ***************************************************************************************
   12 00:00FE -  -  -  -  
   13 00:00FE -  -  -  -  ; ***************************************************************************************
   14 00:00FE -  -  -  -  ;
   15 00:00FE -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00FE -  -  -  -  ;
   17 00:00FE -  -  -  -  ; ***************************************************************************************
   18 00:00FE -  -  -  -  
   19 00:00FE -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00FE DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:0103 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:0107 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:010A DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:010C -  -  -  -  		;
   25 00:010C ED 7B 5C 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:0111 C3 F0 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:0115 -  -  -  -  
   28 00:0115 -  -  -  -  ; ***************************************************************************************
   29 00:0115 -  -  -  -  ;
   30 00:0115 -  -  -  -  ;									Changes and Updates
   31 00:0115 -  -  -  -  ;
   32 00:0115 -  -  -  -  ; ***************************************************************************************
   33 00:0115 -  -  -  -  ;
   34 00:0115 -  -  -  -  ;		Date			Notes
   35 00:0115 -  -  -  -  ;		==== 			=====
   36 00:0115 -  -  -  -  ;
   37 00:0115 -  -  -  -  ; ***************************************************************************************
   38 00:0115 -  -  -  -  		
Listing for file "_build.asm"
   19 00:0115 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:0115 -  -  -  -  ; ***************************************************************************************
    2 00:0115 -  -  -  -  ; ***************************************************************************************
    3 00:0115 -  -  -  -  ;
    4 00:0115 -  -  -  -  ;		Name : 		let.asm
    5 00:0115 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0115 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0115 -  -  -  -  ;		Reviewed :	No
    8 00:0115 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:0115 -  -  -  -  ;
   10 00:0115 -  -  -  -  ; ***************************************************************************************
   11 00:0115 -  -  -  -  ; ***************************************************************************************
   12 00:0115 -  -  -  -  
   13 00:0115 -  -  -  -  ; ***************************************************************************************
   14 00:0115 -  -  -  -  ;
   15 00:0115 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:0115 -  -  -  -  ;
   17 00:0115 -  -  -  -  ; ***************************************************************************************
   18 00:0115 -  -  -  -  
   19 00:0115 -  -  -  -  Command_LET: 	;; [let]
   20 00:0115 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:0118 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:011A 28 2F -  -  		jr 		z,_CLString
   23 00:011C FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:011E 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:0120 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:0122 32 7C 00 00 		ld 		(AllowAutoCreate),a
   27 00:0126 -  -  -  -  _CLNoAuto:
   28 00:0126 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:0128 CD 4F 04 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:012C CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:012E CA 04 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:0132 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:0133 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:0134 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:0135 32 7C 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:0139 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:013B CD 8E 02 00 		call 	CheckNextA
   38 00:013F -  -  -  -  
   39 00:013F CD C5 04 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:0143 -  -  -  -  
   41 00:0143 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:0144 43 -  -  -  		ld 		b,e 						
   43 00:0145 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:0146 -  -  -  -  		;
   45 00:0146 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:0146 -  -  -  -  		;
   47 00:0146 CD 53 01 00 		call 	WriteHLToDE
   48 00:014A C9 -  -  -  		ret
   49 00:014B -  -  -  -  		;
   50 00:014B -  -  -  -  		; 		String assignment code.
   51 00:014B -  -  -  -  		;
   52 00:014B -  -  -  -  _CLString:
   53 00:014B F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:0153 -  -  -  -  
   55 00:0153 -  -  -  -  ; ***************************************************************************************
   56 00:0153 -  -  -  -  ;
   57 00:0153 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:0153 -  -  -  -  ;
   59 00:0153 -  -  -  -  ; ***************************************************************************************
   60 00:0153 -  -  -  -  
   61 00:0153 -  -  -  -  WriteHLToDE:
   62 00:0153 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:0155 C2 F8 02 00 		jp 		nz,TypeMismatch
   64 00:0159 -  -  -  -  		;
   65 00:0159 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:0159 -  -  -  -  		;		
   67 00:0159 -  -  -  -  _WHDWriteNumber:
   68 00:0159 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:015A D9 -  -  -  		exx
   70 00:015B EB -  -  -  		ex 		de,hl
   71 00:015C D9 -  -  -  		exx
   72 00:015D -  -  -  -  
   73 00:015D 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:015E 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:015F 72 -  -  -  		ld 		(hl),d
   76 00:0160 23 -  -  -  		inc 	hl
   77 00:0161 E5 -  -  -  		push 	hl
   78 00:0162 D9 -  -  -  		exx
   79 00:0163 E1 -  -  -  		pop 	hl
   80 00:0164 73 -  -  -  		ld 		(hl),e
   81 00:0165 23 -  -  -  		inc 	hl
   82 00:0166 72 -  -  -  		ld 		(hl),d
   83 00:0167 D9 -  -  -  		exx
   84 00:0168 -  -  -  -  
   85 00:0168 C9 -  -  -  		ret
   86 00:0169 -  -  -  -  
   87 00:0169 -  -  -  -  ; ***************************************************************************************
   88 00:0169 -  -  -  -  ;
   89 00:0169 -  -  -  -  ;									Changes and Updates
   90 00:0169 -  -  -  -  ;
   91 00:0169 -  -  -  -  ; ***************************************************************************************
   92 00:0169 -  -  -  -  ;
   93 00:0169 -  -  -  -  ;		Date			Notes
   94 00:0169 -  -  -  -  ;		==== 			=====
   95 00:0169 -  -  -  -  ;
   96 00:0169 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:0169 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0169 -  -  -  -  ; ***************************************************************************************
    2 00:0169 -  -  -  -  ; ***************************************************************************************
    3 00:0169 -  -  -  -  ;
    4 00:0169 -  -  -  -  ;		Name : 		print.asm
    5 00:0169 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0169 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0169 -  -  -  -  ;		Reviewed :	No
    8 00:0169 -  -  -  -  ;		Purpose :	Print command
    9 00:0169 -  -  -  -  ;
   10 00:0169 -  -  -  -  ; ***************************************************************************************
   11 00:0169 -  -  -  -  ; ***************************************************************************************
   12 00:0169 -  -  -  -  
   13 00:0169 -  -  -  -  ; ***************************************************************************************
   14 00:0169 -  -  -  -  ;
   15 00:0169 -  -  -  -  ;										PRINT command
   16 00:0169 -  -  -  -  ;
   17 00:0169 -  -  -  -  ; ***************************************************************************************
   18 00:0169 -  -  -  -  
   19 00:0169 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0169 -  -  -  -  		;
   21 00:0169 -  -  -  -  		;		Main loop
   22 00:0169 -  -  -  -  		;
   23 00:0169 -  -  -  -  _CPRLoop:
   24 00:0169 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:016C FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:016E 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:0170 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:0172 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:0174 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:0176 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:0178 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:017A 28 2C -  -  		jr 		z,_CPRTab
   33 00:017C FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:017E 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:0180 -  -  -  -  		;
   36 00:0180 CD C5 04 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:0184 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:0186 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:0188 -  -  -  -  		;
   40 00:0188 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:018A -  -  -  -  _CPRPrintNumber:
   42 00:018A F5 -  -  -  		push 	af 							; print leading space
   43 00:018B 3E 20 -  -  		ld 		a,' '
   44 00:018D CD D8 0D 00 		call 	SYSPrintChar
   45 00:0191 F1 -  -  -  		pop 	af
   46 00:0192 01 9A 00 00 		ld  	bc,ConvertBuffer
   47 00:0196 C5 -  -  -  		push 	bc
   48 00:0197 CD 89 0D 00 		call 	Int32ToString 				; convert to string
   49 00:019B E1 -  -  -  		pop 	hl
   50 00:019C -  -  -  -  		;
   51 00:019C -  -  -  -  		; 		Print text at HL.
   52 00:019C -  -  -  -  		;
   53 00:019C -  -  -  -  _CPRPrintHL:
   54 00:019C CD 2D 08 00 		call 	PrintStringAtHL 			; print string out
   55 00:01A0 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:01A2 -  -  -  -  		;
   57 00:01A2 -  -  -  -  		; 		New line (')
   58 00:01A2 -  -  -  -  		;
   59 00:01A2 -  -  -  -  _CPRNewLine:
   60 00:01A2 CD D9 0D 00 		call 	SYSPrintCRLF
   61 00:01A6 18 06 -  -  		jr 		_CPRCheckNext
   62 00:01A8 -  -  -  -  		;
   63 00:01A8 -  -  -  -  		; 		Tab command (,)
   64 00:01A8 -  -  -  -  		;
   65 00:01A8 -  -  -  -  _CPRTab:
   66 00:01A8 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:01AA CD D8 0D 00 		call 	SYSPrintChar
   68 00:01AE -  -  -  -  		;
   69 00:01AE -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:01AE -  -  -  -  		;
   71 00:01AE -  -  -  -  _CPRCheckNext:
   72 00:01AE DD 23 -  -  		inc 	ix 							; consume current
   73 00:01B0 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:01B3 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:01B5 C8 -  -  -  		ret 	z
   76 00:01B6 FE A7 -  -  		cp 		KWD_COLON
   77 00:01B8 C8 -  -  -  		ret 	z
   78 00:01B9 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:01BB -  -  -  -  		;
   80 00:01BB -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:01BB -  -  -  -  		;
   82 00:01BB -  -  -  -  _CPRExitNL:
   83 00:01BB CD D9 0D 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:01BF C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:01C0 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:01C0 -  -  -  -  ; ***************************************************************************************
    2 00:01C0 -  -  -  -  ; ***************************************************************************************
    3 00:01C0 -  -  -  -  ;
    4 00:01C0 -  -  -  -  ;		Name : 		rem.asm
    5 00:01C0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01C0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01C0 -  -  -  -  ;		Reviewed :	No
    8 00:01C0 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:01C0 -  -  -  -  ;
   10 00:01C0 -  -  -  -  ; ***************************************************************************************
   11 00:01C0 -  -  -  -  ; ***************************************************************************************
   12 00:01C0 -  -  -  -  
   13 00:01C0 -  -  -  -  ; ***************************************************************************************
   14 00:01C0 -  -  -  -  ;
   15 00:01C0 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:01C0 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:01C0 -  -  -  -  ;
   18 00:01C0 -  -  -  -  ; ***************************************************************************************
   19 00:01C0 -  -  -  -  
   20 00:01C0 -  -  -  -  Command_REM: 	;; [rem]
   21 00:01C0 -  -  -  -  Command_REM2: 	;; [']
   22 00:01C0 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:01C3 DD 23 -  -  		inc 	ix
   24 00:01C5 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:01C7 C8 -  -  -  		ret 	z
   26 00:01C8 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:01CA C8 -  -  -  		ret 	z
   28 00:01CB FE 3F -  -  		cp 		STRING_MARKER
   29 00:01CD C2 04 03 00 		jp 		nz,SyntaxError
   30 00:01D1 -  -  -  -  		;		
   31 00:01D1 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:01D5 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:01D8 13 -  -  -  		inc 	de 
   34 00:01D9 13 -  -  -  		inc 	de
   35 00:01DA DD 19 -  -  		add 	ix,de 						; skip string
   36 00:01DC C9 -  -  -  		ret
   37 00:01DD -  -  -  -  
   38 00:01DD -  -  -  -  ; ***************************************************************************************
   39 00:01DD -  -  -  -  ;
   40 00:01DD -  -  -  -  ;									Changes and Updates
   41 00:01DD -  -  -  -  ;
   42 00:01DD -  -  -  -  ; ***************************************************************************************
   43 00:01DD -  -  -  -  ;
   44 00:01DD -  -  -  -  ;		Date			Notes
   45 00:01DD -  -  -  -  ;		==== 			=====
   46 00:01DD -  -  -  -  ;
   47 00:01DD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:01DD -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:01DD -  -  -  -  ; ***************************************************************************************
    2 00:01DD -  -  -  -  ; ***************************************************************************************
    3 00:01DD -  -  -  -  ;
    4 00:01DD -  -  -  -  ;		Name : 		run.asm
    5 00:01DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01DD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01DD -  -  -  -  ;		Reviewed :	No
    8 00:01DD -  -  -  -  ;		Purpose :	Run command
    9 00:01DD -  -  -  -  ;
   10 00:01DD -  -  -  -  ; ***************************************************************************************
   11 00:01DD -  -  -  -  ; ***************************************************************************************
   12 00:01DD -  -  -  -  
   13 00:01DD -  -  -  -  ; ***************************************************************************************
   14 00:01DD -  -  -  -  ;
   15 00:01DD -  -  -  -  ;										RUN command
   16 00:01DD -  -  -  -  ;
   17 00:01DD -  -  -  -  ; ***************************************************************************************
   18 00:01DD -  -  -  -  
   19 00:01DD -  -  -  -  Command_RUN: 	;; [run]
   20 00:01DD CD BF 07 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:01E1 -  -  -  -  
   22 00:01E1 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:01E6 ED 73 5C 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:01EB AF -  -  -  		xor 	a
   25 00:01EC 32 7C 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:01F0 -  -  -  -  		;
   27 00:01F0 -  -  -  -  		; 		New line at IX.
   28 00:01F0 -  -  -  -  		;
   29 00:01F0 -  -  -  -  CRNewLine:
   30 00:01F0 DD 22 58 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:01F5 -  -  -  -  		;
   32 00:01F5 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:01F8 B7 -  -  -  		or 		a
   34 00:01F9 CA F8 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:01FD -  -  -  -  		;
   36 00:01FD DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:01FF DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:0201 DD 23 -  -  		inc 	ix
   39 00:0203 -  -  -  -  		;
   40 00:0203 -  -  -  -  		; 		New command at IX
   41 00:0203 -  -  -  -  		;
   42 00:0203 -  -  -  -  _CRNewCommand:	
   43 00:0203 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:0206 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:0207 F2 42 02 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:020B -  -  -  -  		;
   47 00:020B FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:020D 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:020F FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:0211 D2 32 02 00 		jp 		nc,_CRAlternateLets
   51 00:0215 -  -  -  -  		;
   52 00:0215 -  -  -  -  _CRDoCommand:		
   53 00:0215 E6 7F 21 00 
              00 00 6F 29 
              29 11 9E 0A 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:022A DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:022C CD 60 00 00 		call 	JumpCode 					; call the routine.
   56 00:0230 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:0232 -  -  -  -  		;
   58 00:0232 -  -  -  -  		; 		Do CALL (HL)
   59 00:0232 -  -  -  -  		;
   60 00:0232 -  -  -  -  		;
   61 00:0232 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:0232 -  -  -  -  		;		
   63 00:0232 -  -  -  -  _CRAlternateLets:		
   64 00:0232 FE 83 -  -  		cp 		KWD_PLING
   65 00:0234 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:0236 FE 84 -  -  		cp 		KWD_QMARK
   67 00:0238 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:023A FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:023C 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:023E C3 04 03 00 		jp 		SyntaxError
   71 00:0242 -  -  -  -  		;
   72 00:0242 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0242 -  -  -  -  		;
   74 00:0242 -  -  -  -  _CRAssignmentHandler:		
   75 00:0242 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:0244 D2 04 03 00 		jp 		nc,SyntaxError
   77 00:0248 -  -  -  -  _CRAssignmentLet:		
   78 00:0248 CD 15 01 00 		call	Command_LET 				; do LET.
   79 00:024C C3 03 02 00 		jp 		_CRNewCommand
   80 00:0250 -  -  -  -  
   81 00:0250 -  -  -  -  ; ***************************************************************************************
   82 00:0250 -  -  -  -  ;
   83 00:0250 -  -  -  -  ;									Changes and Updates
   84 00:0250 -  -  -  -  ;
   85 00:0250 -  -  -  -  ; ***************************************************************************************
   86 00:0250 -  -  -  -  ;
   87 00:0250 -  -  -  -  ;		Date			Notes
   88 00:0250 -  -  -  -  ;		==== 			=====
   89 00:0250 -  -  -  -  ;
   90 00:0250 -  -  -  -  ; ***************************************************************************************
   91 00:0250 -  -  -  -  		
Listing for file "_build.asm"
   23 00:0250 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0250 -  -  -  -  ; ***************************************************************************************
    2 00:0250 -  -  -  -  ; ***************************************************************************************
    3 00:0250 -  -  -  -  ;
    4 00:0250 -  -  -  -  ;		Name : 		stop.asm
    5 00:0250 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0250 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0250 -  -  -  -  ;		Reviewed :	No
    8 00:0250 -  -  -  -  ;		Purpose :	Stop command
    9 00:0250 -  -  -  -  ;
   10 00:0250 -  -  -  -  ; ***************************************************************************************
   11 00:0250 -  -  -  -  ; ***************************************************************************************
   12 00:0250 -  -  -  -  
   13 00:0250 -  -  -  -  ; ***************************************************************************************
   14 00:0250 -  -  -  -  ;
   15 00:0250 -  -  -  -  ;										STOP command
   16 00:0250 -  -  -  -  ;
   17 00:0250 -  -  -  -  ; ***************************************************************************************
   18 00:0250 -  -  -  -  
   19 00:0250 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0250 3E 0C C3 9A 
              02 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0256 -  -  -  -  
   22 00:0256 -  -  -  -  ; ***************************************************************************************
   23 00:0256 -  -  -  -  ;
   24 00:0256 -  -  -  -  ;									Changes and Updates
   25 00:0256 -  -  -  -  ;
   26 00:0256 -  -  -  -  ; ***************************************************************************************
   27 00:0256 -  -  -  -  ;
   28 00:0256 -  -  -  -  ;		Date			Notes
   29 00:0256 -  -  -  -  ;		==== 			=====
   30 00:0256 -  -  -  -  ;
   31 00:0256 -  -  -  -  ; ***************************************************************************************
   32 00:0256 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0256 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0256 -  -  -  -  ; ***************************************************************************************
    2 00:0256 -  -  -  -  ; ***************************************************************************************
    3 00:0256 -  -  -  -  ;
    4 00:0256 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0256 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0256 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0256 -  -  -  -  ;		Reviewed :	No
    8 00:0256 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0256 -  -  -  -  ;
   10 00:0256 -  -  -  -  ; ***************************************************************************************
   11 00:0256 -  -  -  -  ; ***************************************************************************************
   12 00:0256 -  -  -  -  
   13 00:0256 -  -  -  -  ; ***************************************************************************************
   14 00:0256 -  -  -  -  ;
   15 00:0256 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0256 -  -  -  -  ;
   17 00:0256 -  -  -  -  ; ***************************************************************************************
   18 00:0256 -  -  -  -  
   19 00:0256 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0256             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0256             		inc 	ix
   22 00:0256             		cp 		ch 							; exit if matches
   23 00:0256             		ret 	z
   24 00:0256             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0256             		jp 		ErrorHandler
   26 00:0256             #endmacro
   27 00:0256 -  -  -  -  
   28 00:0256 -  -  -  -  CheckLeftBracket:
   29 00:0256 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 9A 
              02 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:0264 -  -  -  -  
   31 00:0264 -  -  -  -  CheckRightBracket:
   32 00:0264 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 9A 
              02 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0272 -  -  -  -  
   34 00:0272 -  -  -  -  CheckDollar:
   35 00:0272 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 9A 
              02 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0280 -  -  -  -  		
   37 00:0280 -  -  -  -  CheckComma:
   38 00:0280 DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 9A 
              02 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:028E -  -  -  -  
   40 00:028E -  -  -  -  ; ***************************************************************************************
   41 00:028E -  -  -  -  ;
   42 00:028E -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:028E -  -  -  -  ;
   44 00:028E -  -  -  -  ; ***************************************************************************************
   45 00:028E -  -  -  -  
   46 00:028E -  -  -  -  CheckNextA:
   47 00:028E DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0291 DD 23 -  -  		inc 	ix 							; skip character
   49 00:0293 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:0294 3E 0D C3 9A 
              02 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:029A -  -  -  -  		
   52 00:029A -  -  -  -  ; ***************************************************************************************
   53 00:029A -  -  -  -  ;
   54 00:029A -  -  -  -  ;									Changes and Updates
   55 00:029A -  -  -  -  ;
   56 00:029A -  -  -  -  ; ***************************************************************************************
   57 00:029A -  -  -  -  ;
   58 00:029A -  -  -  -  ;		Date			Notes
   59 00:029A -  -  -  -  ;		==== 			=====
   60 00:029A -  -  -  -  ;
   61 00:029A -  -  -  -  ; ***************************************************************************************
   62 00:029A -  -  -  -  		
Listing for file "_build.asm"
   25 00:029A -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:029A -  -  -  -  ; ***************************************************************************************
    2 00:029A -  -  -  -  ; ***************************************************************************************
    3 00:029A -  -  -  -  ;
    4 00:029A -  -  -  -  ;		Name : 		errors.asm
    5 00:029A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:029A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:029A -  -  -  -  ;		Reviewed :	No
    8 00:029A -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:029A -  -  -  -  ;
   10 00:029A -  -  -  -  ; ***************************************************************************************
   11 00:029A -  -  -  -  ; ***************************************************************************************
   12 00:029A -  -  -  -  
   13 00:029A -  -  -  -  ; ***************************************************************************************
   14 00:029A -  -  -  -  ;
   15 00:029A -  -  -  -  ;								Error handler, message A 
   16 00:029A -  -  -  -  ;
   17 00:029A -  -  -  -  ; ***************************************************************************************
   18 00:029A -  -  -  -  
   19 00:029A -  -  -  -  ErrorHandler:
   20 00:029A F5 -  -  -  		push 	af 						; save error ID
   21 00:029B -  -  -  -  
   22 00:029B 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:029F 6F -  -  -  		ld 		l,a
   24 00:02A0 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:02A1 29 -  -  -  		add 	hl,hl 		
   26 00:02A2 11 71 09 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:02A6 19 -  -  -  		add 	hl,de
   28 00:02A7 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:02A9 CD 2D 08 00 		call 	PrintStringAtHL
   30 00:02AD -  -  -  -  		;
   31 00:02AD F1 -  -  -  		pop 	af 						; restore error ID
   32 00:02AE B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:02AF 28 2F -  -  		jr 		z,_EHExit
   34 00:02B1 -  -  -  -  		;
   35 00:02B1 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:02B6 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:02B9 B7 -  -  -  		or 		a
   38 00:02BA 28 24 -  -  		jr 		z,_EHExit
   39 00:02BC -  -  -  -  
   40 00:02BC 21 E8 02 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:02C0 CD 2D 08 00 		call 	PrintStringAtHL 
   42 00:02C4 -  -  -  -  		
   43 00:02C4 D9 -  -  -  		exx								; HL'HL = line number
   44 00:02C5 21 00 00 00 		ld 		hl,$0000 		
   45 00:02C9 D9 -  -  -  		exx 
   46 00:02CA DD 6E 01 -  		ld 		l,(ix+1)
   47 00:02CD DD 66 02 -  		ld 		h,(ix+2)
   48 00:02D0 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:02D2 01 9A 00 00 		ld 		bc,ConvertBuffer
   50 00:02D6 CD 89 0D 00 		call 	Int32ToString
   51 00:02DA C5 -  -  -  		push 	bc
   52 00:02DB E1 -  -  -  		pop 	hl
   53 00:02DC CD 2D 08 00 		call 	PrintStringAtHL			; print error line number.
   54 00:02E0 -  -  -  -  _EHExit:		
   55 00:02E0 CD D9 0D 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:02E4 C3 1A 00 00 		jp 		WarmStart
   57 00:02E8 -  -  -  -  
   58 00:02E8 -  -  -  -  _EHAtText:
   59 00:02E8 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:02F2 -  -  -  -  
   61 00:02F2 -  -  -  -  NotImplemented:
   62 00:02F2 3E 04 C3 9A 
              02 00 -  -  		ERR_DISABLED
   63 00:02F8 -  -  -  -  TypeMismatch:
   64 00:02F8 3E 02 C3 9A 
              02 00 -  -  		ERR_BADTYPE
   65 00:02FE -  -  -  -  BadValue:
   66 00:02FE 3E 03 C3 9A 
              02 00 -  -  		ERR_BADVALUE
   67 00:0304 -  -  -  -  SyntaxError:
   68 00:0304 3E 0D C3 9A 
              02 00 -  -  		ERR_SYNTAX
   69 00:030A -  -  -  -  						
   70 00:030A -  -  -  -  ; ***************************************************************************************
   71 00:030A -  -  -  -  ;
   72 00:030A -  -  -  -  ;									Changes and Updates
   73 00:030A -  -  -  -  ;
   74 00:030A -  -  -  -  ; ***************************************************************************************
   75 00:030A -  -  -  -  ;
   76 00:030A -  -  -  -  ;		Date			Notes
   77 00:030A -  -  -  -  ;		==== 			=====
   78 00:030A -  -  -  -  ;
   79 00:030A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:030A -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:030A -  -  -  -  ; ***************************************************************************************
    2 00:030A -  -  -  -  ; ***************************************************************************************
    3 00:030A -  -  -  -  ;
    4 00:030A -  -  -  -  ;		Name : 		basicmath.asm
    5 00:030A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:030A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:030A -  -  -  -  ;		Reviewed :	No
    8 00:030A -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:030A -  -  -  -  ;
   10 00:030A -  -  -  -  ; ***************************************************************************************
   11 00:030A -  -  -  -  ; ***************************************************************************************
   12 00:030A -  -  -  -  
   13 00:030A -  -  -  -  ; ***************************************************************************************
   14 00:030A -  -  -  -  ;
   15 00:030A -  -  -  -  ; 									Addition
   16 00:030A -  -  -  -  ;
   17 00:030A -  -  -  -  ; ***************************************************************************************
   18 00:030A -  -  -  -  
   19 00:030A -  -  -  -  ALUAdd: 		;; [+]
   20 00:030A CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 08 
              0D 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:0318 -  -  -  -  
   22 00:0318 -  -  -  -  ; ***************************************************************************************
   23 00:0318 -  -  -  -  ;
   24 00:0318 -  -  -  -  ; 									Subtraction
   25 00:0318 -  -  -  -  ;
   26 00:0318 -  -  -  -  ; ***************************************************************************************
   27 00:0318 -  -  -  -  
   28 00:0318 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:0318 CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 10 
              0D 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:0326 -  -  -  -  
   31 00:0326 -  -  -  -  ; ***************************************************************************************
   32 00:0326 -  -  -  -  ;
   33 00:0326 -  -  -  -  ; 									  Multiply
   34 00:0326 -  -  -  -  ;
   35 00:0326 -  -  -  -  ; ***************************************************************************************
   36 00:0326 -  -  -  -  
   37 00:0326 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:0326 CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 CF 
              0C 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0334 -  -  -  -  
   40 00:0334 -  -  -  -  ; ***************************************************************************************
   41 00:0334 -  -  -  -  ;
   42 00:0334 -  -  -  -  ; 									  Divide
   43 00:0334 -  -  -  -  ;
   44 00:0334 -  -  -  -  ; ***************************************************************************************
   45 00:0334 -  -  -  -  
   46 00:0334 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0334 -  -  -  -  ALUDivide2:	;; [div]
   48 00:0334 CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 CF 
              0B 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0342 -  -  -  -  
   50 00:0342 -  -  -  -  ; ***************************************************************************************
   51 00:0342 -  -  -  -  ;
   52 00:0342 -  -  -  -  ; 									  Modulus
   53 00:0342 -  -  -  -  ;
   54 00:0342 -  -  -  -  ; ***************************************************************************************
   55 00:0342 -  -  -  -  
   56 00:0342 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0342 CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 D2 
              0B 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0350 -  -  -  -  
   59 00:0350 -  -  -  -  ; ***************************************************************************************
   60 00:0350 -  -  -  -  ;
   61 00:0350 -  -  -  -  ; 									  Logical
   62 00:0350 -  -  -  -  ;
   63 00:0350 -  -  -  -  ; ***************************************************************************************
   64 00:0350 -  -  -  -  
   65 00:0350 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0350 CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 1A 
              0D 00 -  -  		IntegerDispatch(Int32And)
   67 00:035E -  -  -  -  
   68 00:035E -  -  -  -  ALUOr: 			;; [or]
   69 00:035E CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 27 
              0D 00 -  -  		IntegerDispatch(Int32Or)
   70 00:036C -  -  -  -  
   71 00:036C -  -  -  -  ALUXor: 		;; [eor]
   72 00:036C CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 34 
              0D 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:037A -  -  -  -  
   74 00:037A -  -  -  -  ; ***************************************************************************************
   75 00:037A -  -  -  -  ;
   76 00:037A -  -  -  -  ;									Changes and Updates
   77 00:037A -  -  -  -  ;
   78 00:037A -  -  -  -  ; ***************************************************************************************
   79 00:037A -  -  -  -  ;
   80 00:037A -  -  -  -  ;		Date			Notes
   81 00:037A -  -  -  -  ;		==== 			=====
   82 00:037A -  -  -  -  ;
   83 00:037A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:037A -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:037A -  -  -  -  ; ***************************************************************************************
    2 00:037A -  -  -  -  ; ***************************************************************************************
    3 00:037A -  -  -  -  ;
    4 00:037A -  -  -  -  ;		Name : 		binrefs.asm
    5 00:037A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:037A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:037A -  -  -  -  ;		Reviewed :	No
    8 00:037A -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:037A -  -  -  -  ;
   10 00:037A -  -  -  -  ; ***************************************************************************************
   11 00:037A -  -  -  -  ; ***************************************************************************************
   12 00:037A -  -  -  -  
   13 00:037A -  -  -  -  ; ***************************************************************************************
   14 00:037A -  -  -  -  ;
   15 00:037A -  -  -  -  ; 									<l> <op> <r>
   16 00:037A -  -  -  -  ;
   17 00:037A -  -  -  -  ; ***************************************************************************************
   18 00:037A -  -  -  -  
   19 00:037A -  -  -  -  ALULongReference:			;; [!]
   20 00:037A CD 8A 03 00 		call 	BRGetAddress 				; calculate address
   21 00:037E 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0380 CB F9 -  -  		set 	CIsReference,c
   23 00:0382 C9 -  -  -  		ret
   24 00:0383 -  -  -  -  
   25 00:0383 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0383 CD 7A 03 00 		call 	ALULongReference
   27 00:0387 CB F1 -  -  		set 	CIsByteReference,c
   28 00:0389 C9 -  -  -  		ret
   29 00:038A -  -  -  -  
   30 00:038A -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:038A CD 27 04 00 
              78 B1 C2 F8 
              02 00 C3 98 
              03 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0398 -  -  -  -  _BRGAMain:		
   33 00:0398 CD 08 0D 00 		call 	Int32Add 					; address in HL'HL
   34 00:039C CD 2D 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:03A0 C9 -  -  -  		ret
   36 00:03A1 -  -  -  -  
   37 00:03A1 -  -  -  -  ; ***************************************************************************************
   38 00:03A1 -  -  -  -  ;
   39 00:03A1 -  -  -  -  ;									Changes and Updates
   40 00:03A1 -  -  -  -  ;
   41 00:03A1 -  -  -  -  ; ***************************************************************************************
   42 00:03A1 -  -  -  -  ;
   43 00:03A1 -  -  -  -  ;		Date			Notes
   44 00:03A1 -  -  -  -  ;		==== 			=====
   45 00:03A1 -  -  -  -  ;
   46 00:03A1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:03A1 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:03A1 -  -  -  -  ; ***************************************************************************************
    2 00:03A1 -  -  -  -  ; ***************************************************************************************
    3 00:03A1 -  -  -  -  ;
    4 00:03A1 -  -  -  -  ;		Name : 		compare.asm
    5 00:03A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03A1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03A1 -  -  -  -  ;		Reviewed :	No
    8 00:03A1 -  -  -  -  ;		Purpose :	Comparison code
    9 00:03A1 -  -  -  -  ;
   10 00:03A1 -  -  -  -  ; ***************************************************************************************
   11 00:03A1 -  -  -  -  ; ***************************************************************************************
   12 00:03A1 -  -  -  -  
   13 00:03A1 -  -  -  -  #macro compare_equals(n)
   14 00:03A1             		call 	CompareBaseCode
   15 00:03A1             		cp 		n
   16 00:03A1             		jr 		z,UnaryInt32True
   17 00:03A1             		jr 		UnaryInt32False
   18 00:03A1             #endmacro
   19 00:03A1 -  -  -  -  
   20 00:03A1 -  -  -  -  #macro compare_not_equals(n)
   21 00:03A1             		call 	CompareBaseCode
   22 00:03A1             		cp 		n
   23 00:03A1             		jr 		nz,UnaryInt32True
   24 00:03A1             		jr 		UnaryInt32False
   25 00:03A1             #endmacro
   26 00:03A1 -  -  -  -  
   27 00:03A1 -  -  -  -  ; ***************************************************************************************
   28 00:03A1 -  -  -  -  ;
   29 00:03A1 -  -  -  -  ; 								Return True/False
   30 00:03A1 -  -  -  -  ;
   31 00:03A1 -  -  -  -  ; ***************************************************************************************
   32 00:03A1 -  -  -  -  
   33 00:03A1 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:03A1 3E FF -  -  		ld 		a,255
   35 00:03A3 18 01 -  -  		jr 		_Int32Logical
   36 00:03A5 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:03A5 AF -  -  -  		xor 	a
   38 00:03A6 -  -  -  -  _Int32Logical:
   39 00:03A6 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:03A7 67 -  -  -  		ld 		h,a
   41 00:03A8 D9 -  -  -  		exx
   42 00:03A9 6F -  -  -  		ld 		l,a
   43 00:03AA 67 -  -  -  		ld 		h,a
   44 00:03AB D9 -  -  -  		exx
   45 00:03AC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:03AE C9 -  -  -  		ret
   47 00:03AF -  -  -  -  
   48 00:03AF -  -  -  -  ; ***************************************************************************************
   49 00:03AF -  -  -  -  ;
   50 00:03AF -  -  -  -  ; 										> = < (compare == value)
   51 00:03AF -  -  -  -  ;
   52 00:03AF -  -  -  -  ; ***************************************************************************************
   53 00:03AF -  -  -  -  
   54 00:03AF -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:03AF CD EB 03 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:03B9 -  -  -  -  
   57 00:03B9 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:03B9 CD EB 03 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:03C3 -  -  -  -  
   60 00:03C3 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:03C3 CD EB 03 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:03CD -  -  -  -  
   63 00:03CD -  -  -  -  ; ***************************************************************************************
   64 00:03CD -  -  -  -  ;
   65 00:03CD -  -  -  -  ; 										> = < (compare <> value)
   66 00:03CD -  -  -  -  ;
   67 00:03CD -  -  -  -  ; ***************************************************************************************
   68 00:03CD -  -  -  -  
   69 00:03CD -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:03CD CD EB 03 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:03D7 -  -  -  -  
   72 00:03D7 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:03D7 CD EB 03 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:03E1 -  -  -  -  
   75 00:03E1 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:03E1 CD EB 03 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:03EB -  -  -  -  
   78 00:03EB -  -  -  -  ; ***************************************************************************************
   79 00:03EB -  -  -  -  ;
   80 00:03EB -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:03EB -  -  -  -  ;
   82 00:03EB -  -  -  -  ; ***************************************************************************************
   83 00:03EB -  -  -  -  
   84 00:03EB -  -  -  -  CompareBaseCode:
   85 00:03EB CD 27 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:03EF -  -  -  -  
   87 00:03EF 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:03F0 A1 -  -  -  		and 	c
   89 00:03F1 CB 47 -  -  		bit 	CIsString,a 
   90 00:03F3 C2 05 04 00 		jp 		nz,StringCompare
   91 00:03F7 -  -  -  -  
   92 00:03F7 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:03F8 B1 -  -  -  		or 		c
   94 00:03F9 CB 47 -  -  		bit 	CIsString,a 
   95 00:03FB CA 48 0D 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:03FF -  -  -  -  
   97 00:03FF 3E 02 C3 9A 
              02 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:0405 -  -  -  -  ;
   99 00:0405 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:0405 -  -  -  -  ;
  101 00:0405 -  -  -  -  StringCompare:
  102 00:0405 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:0406 BE -  -  -  		cp 		(hl)
  104 00:0407 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0409 20 08 -  -  		jr 		nz,_SCLess
  106 00:040B 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:040C 23 -  -  -  		inc 	hl
  108 00:040D FE 20 -  -  		cp 		' '
  109 00:040F 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0411 AF -  -  -  		xor 	a 							; return 0.
  111 00:0412 C9 -  -  -  		ret
  112 00:0413 -  -  -  -  
  113 00:0413 -  -  -  -  _SCLess:
  114 00:0413 3E FF -  -  		ld 		a,$FF
  115 00:0415 C9 -  -  -  		ret
  116 00:0416 -  -  -  -  _SCGreater:
  117 00:0416 3E 01 -  -  		ld 		a,1
  118 00:0418 C9 -  -  -  		ret
  119 00:0419 -  -  -  -  
  120 00:0419 3E 0E C3 9A 
              02 00 -  -  		ERR_TODO()
  121 00:041F -  -  -  -  
  122 00:041F -  -  -  -  ; ***************************************************************************************
  123 00:041F -  -  -  -  ;
  124 00:041F -  -  -  -  ;									Changes and Updates
  125 00:041F -  -  -  -  ;
  126 00:041F -  -  -  -  ; ***************************************************************************************
  127 00:041F -  -  -  -  ;
  128 00:041F -  -  -  -  ;		Date			Notes
  129 00:041F -  -  -  -  ;		==== 			=====
  130 00:041F -  -  -  -  ;
  131 00:041F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:041F -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:041F -  -  -  -  ; ***************************************************************************************
    2 00:041F -  -  -  -  ; ***************************************************************************************
    3 00:041F -  -  -  -  ;
    4 00:041F -  -  -  -  ;		Name : 		utility.asm
    5 00:041F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:041F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:041F -  -  -  -  ;		Reviewed :	No
    8 00:041F -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:041F -  -  -  -  ;
   10 00:041F -  -  -  -  ; ***************************************************************************************
   11 00:041F -  -  -  -  ; ***************************************************************************************
   12 00:041F -  -  -  -  
   13 00:041F -  -  -  -  ; ***************************************************************************************
   14 00:041F -  -  -  -  ;
   15 00:041F -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:041F -  -  -  -  ;
   17 00:041F -  -  -  -  ; ***************************************************************************************
   18 00:041F -  -  -  -  
   19 00:041F -  -  -  -  SwapHLDE:
   20 00:041F EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0420 D9 -  -  -  			exx
   22 00:0421 EB -  -  -  			ex 		de,hl
   23 00:0422 D9 -  -  -  			exx
   24 00:0423 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:0424 41 -  -  -  			ld 		b,c
   26 00:0425 4F -  -  -  			ld 		c,a
   27 00:0426 C9 -  -  -  			ret
   28 00:0427 -  -  -  -  
   29 00:0427 -  -  -  -  ; ***************************************************************************************
   30 00:0427 -  -  -  -  ;
   31 00:0427 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:0427 -  -  -  -  ;
   33 00:0427 -  -  -  -  ; ***************************************************************************************
   34 00:0427 -  -  -  -  
   35 00:0427 -  -  -  -  DereferenceBoth:
   36 00:0427 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:0429 C4 00 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:042D CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:042F C8 -  -  -  			ret 	z
   40 00:0430 CD 1F 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:0434 CD 00 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:0438 CD 1F 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:043C C9 -  -  -  			ret
   44 00:043D -  -  -  -  
   45 00:043D -  -  -  -  ; ***************************************************************************************
   46 00:043D -  -  -  -  ;
   47 00:043D -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:043D -  -  -  -  ;
   49 00:043D -  -  -  -  ; ***************************************************************************************
   50 00:043D -  -  -  -  
   51 00:043D -  -  -  -  NegateHLHL:	
   52 00:043D CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:043F C2 F8 02 00 			jp 		nz,TypeMismatch
   54 00:0443 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0445 C4 00 05 00 			call 	nz,Dereference 			; if required.
   56 00:0449 CD 72 0D 00 			call 	Int32Negate
   57 00:044D C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:044E -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:044E -  -  -  -  ; ***************************************************************************************
    2 00:044E -  -  -  -  ; ***************************************************************************************
    3 00:044E -  -  -  -  ;
    4 00:044E -  -  -  -  ;		Name : 		expression.asm
    5 00:044E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:044E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:044E -  -  -  -  ;		Reviewed :	None
    8 00:044E -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:044E -  -  -  -  ;
   10 00:044E -  -  -  -  ; ***************************************************************************************
   11 00:044E -  -  -  -  ; ***************************************************************************************
   12 00:044E -  -  -  -  
   13 00:044E -  -  -  -  ; ***************************************************************************************
   14 00:044E -  -  -  -  ;
   15 00:044E -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:044E -  -  -  -  ;
   17 00:044E -  -  -  -  ; ***************************************************************************************
   18 00:044E -  -  -  -  
   19 00:044E -  -  -  -  EvaluateAtPrecedence0:
   20 00:044E AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:044F -  -  -  -  EvaluateAtPrecedence:
   22 00:044F F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0450 -  -  -  -  		;
   24 00:0450 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0450 -  -  -  -  		;
   26 00:0450 CD 5C 05 00 		call 	EvaluateTerm 				; get term
   27 00:0454 -  -  -  -  		;
   28 00:0454 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0454 -  -  -  -  		;
   30 00:0454 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0455 -  -  -  -  _EAPLoop:
   32 00:0455 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:0458 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:045A D8 -  -  -  		ret 	c
   35 00:045B FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:045D D0 -  -  -  		ret 	nc
   37 00:045E -  -  -  -  		;
   38 00:045E -  -  -  -  		; 		Get the precedence.
   39 00:045E -  -  -  -  		;
   40 00:045E E5 -  -  -  		push 	hl 							; want to use HL
   41 00:045F D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0461 21 60 09 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:0465 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:0466 6F -  -  -  		ld 		l,a
   45 00:0467 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:0468 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:0469 -  -  -  -  		;
   48 00:0469 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:0469 -  -  -  -  		;
   50 00:0469 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:046A BB -  -  -  		cp 		e
   52 00:046B D0 -  -  -  		ret 	nc
   53 00:046C -  -  -  -  
   54 00:046C -  -  -  -  		;
   55 00:046C -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:046C -  -  -  -  		;
   57 00:046C D5 -  -  -  		push 	de 							; save precedence information.
   58 00:046D -  -  -  -  		;
   59 00:046D DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0470 F5 -  -  -  		push 	af
   61 00:0471 -  -  -  -  		;
   62 00:0471 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0472 D9 -  -  -  		exx 								; save HL'
   64 00:0473 E5 -  -  -  		push 	hl
   65 00:0474 D9 -  -  -  		exx 								
   66 00:0475 E5 -  -  -  		push 	hl 							; save HL
   67 00:0476 -  -  -  -  		;
   68 00:0476 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:0478 -  -  -  -  		;
   70 00:0478 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:0478 -  -  -  -  		;
   72 00:0478 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:0479 CD 4F 04 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:047D -  -  -  -  		;
   75 00:047D -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:047D -  -  -  -  		;
   77 00:047D 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:047E -  -  -  -  
   79 00:047E EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:047F E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0480 D9 -  -  -  		exx
   82 00:0481 EB -  -  -  		ex 		de,hl
   83 00:0482 E1 -  -  -  		pop 	hl
   84 00:0483 D9 -  -  -  		exx
   85 00:0484 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:0485 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:0486 -  -  -  -  		;
   88 00:0486 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:0486 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:0486 -  -  -  -  		;
   91 00:0486 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:0487 -  -  -  -  		;
   93 00:0487 -  -  -  -  		; 		Call the binary operator in A.
   94 00:0487 -  -  -  -  		;
   95 00:0487 D5 -  -  -  		push 	de
   96 00:0488 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0489 E6 7F 21 00 
              00 00 6F 29 
              29 11 9E 0A 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:049E E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:049F D1 -  -  -  		pop 	de 							; restore DE
  100 00:04A0 CD 60 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:04A4 -  -  -  -  		;
  102 00:04A4 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:04A5 -  -  -  -  		;
  104 00:04A5 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:04A7 -  -  -  -  
  106 00:04A7 -  -  -  -  ; ***************************************************************************************
  107 00:04A7 -  -  -  -  ;
  108 00:04A7 -  -  -  -  ;									Changes and Updates
  109 00:04A7 -  -  -  -  ;
  110 00:04A7 -  -  -  -  ; ***************************************************************************************
  111 00:04A7 -  -  -  -  ;
  112 00:04A7 -  -  -  -  ;		Date			Notes
  113 00:04A7 -  -  -  -  ;		==== 			=====
  114 00:04A7 -  -  -  -  ;
  115 00:04A7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:04A7 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:04A7 -  -  -  -  ; ***************************************************************************************
    2 00:04A7 -  -  -  -  ; ***************************************************************************************
    3 00:04A7 -  -  -  -  ;
    4 00:04A7 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:04A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04A7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04A7 -  -  -  -  ;		Reviewed :	No
    8 00:04A7 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:04A7 -  -  -  -  ;
   10 00:04A7 -  -  -  -  ; ***************************************************************************************
   11 00:04A7 -  -  -  -  ; ***************************************************************************************
   12 00:04A7 -  -  -  -  
   13 00:04A7 -  -  -  -  ; ***************************************************************************************
   14 00:04A7 -  -  -  -  ;
   15 00:04A7 -  -  -  -  ; 								Evaluate an integer term
   16 00:04A7 -  -  -  -  ;
   17 00:04A7 -  -  -  -  ; ***************************************************************************************
   18 00:04A7 -  -  -  -  
   19 00:04A7 -  -  -  -  EvaluateIntegerTerm:
   20 00:04A7 CD 5C 05 00 		call 	EvaluateTerm
   21 00:04AB CD 00 05 00 		call 	DeReference
   22 00:04AF CB 41 -  -  		bit 	CIsString,c
   23 00:04B1 C8 -  -  -  		ret 	z
   24 00:04B2 C3 F8 02 00 		jp 		TypeMismatch
   25 00:04B6 -  -  -  -  
   26 00:04B6 -  -  -  -  ; ***************************************************************************************
   27 00:04B6 -  -  -  -  ;
   28 00:04B6 -  -  -  -  ; 								Evaluate a string term
   29 00:04B6 -  -  -  -  ;
   30 00:04B6 -  -  -  -  ; ***************************************************************************************
   31 00:04B6 -  -  -  -  
   32 00:04B6 -  -  -  -  EvaluateStringTerm:
   33 00:04B6 CD 5C 05 00 		call 	EvaluateTerm
   34 00:04BA CD 00 05 00 		call 	DeReference
   35 00:04BE CB 41 -  -  		bit 	CIsString,c
   36 00:04C0 C0 -  -  -  		ret 	nz
   37 00:04C1 C3 F8 02 00 		jp 		TypeMismatch
   38 00:04C5 -  -  -  -  
   39 00:04C5 -  -  -  -  ; ***************************************************************************************
   40 00:04C5 -  -  -  -  ;
   41 00:04C5 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:04C5 -  -  -  -  ;
   43 00:04C5 -  -  -  -  ; ***************************************************************************************
   44 00:04C5 -  -  -  -  
   45 00:04C5 -  -  -  -  EvaluateValue:
   46 00:04C5 CD 4E 04 00 		call 	EvaluateAtPrecedence0
   47 00:04C9 C3 00 05 00 		jp 		Dereference
   48 00:04CD -  -  -  -  
   49 00:04CD -  -  -  -  ; ***************************************************************************************
   50 00:04CD -  -  -  -  ;
   51 00:04CD -  -  -  -  ; 									Evaluate a number
   52 00:04CD -  -  -  -  ;
   53 00:04CD -  -  -  -  ; ***************************************************************************************
   54 00:04CD -  -  -  -  
   55 00:04CD -  -  -  -  EvaluateInteger:
   56 00:04CD CD C5 04 00 		call 	EvaluateValue
   57 00:04D1 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:04D3 C8 -  -  -  		ret 	z
   59 00:04D4 C3 F8 02 00 		jp 		TypeMismatch
   60 00:04D8 -  -  -  -  
   61 00:04D8 -  -  -  -  ; ***************************************************************************************
   62 00:04D8 -  -  -  -  ;
   63 00:04D8 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:04D8 -  -  -  -  ;
   65 00:04D8 -  -  -  -  ; ***************************************************************************************
   66 00:04D8 -  -  -  -  
   67 00:04D8 -  -  -  -  Evaluate8BitInteger:
   68 00:04D8 CD CD 04 00 		call 	EvaluateInteger
   69 00:04DC D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:04DD 7C -  -  -  		ld 		a,h
   71 00:04DE B5 -  -  -  		or 		l
   72 00:04DF D9 -  -  -  		exx 	
   73 00:04E0 B4 -  -  -  		or 		h
   74 00:04E1 C2 FE 02 00 		jp 		nz,BadValue
   75 00:04E5 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:04E6 C9 -  -  -  		ret
   77 00:04E7 -  -  -  -  		
   78 00:04E7 -  -  -  -  ; ***************************************************************************************
   79 00:04E7 -  -  -  -  ;
   80 00:04E7 -  -  -  -  ; 									Evaluate a string
   81 00:04E7 -  -  -  -  ;
   82 00:04E7 -  -  -  -  ; ***************************************************************************************
   83 00:04E7 -  -  -  -  
   84 00:04E7 -  -  -  -  EvaluateStringOnly:
   85 00:04E7 CD C5 04 00 		call 	EvaluateValue
   86 00:04EB CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:04ED CA F8 02 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:04F1 C9 -  -  -  		ret
   89 00:04F2 -  -  -  -  
   90 00:04F2 -  -  -  -  ; ***************************************************************************************
   91 00:04F2 -  -  -  -  ;
   92 00:04F2 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:04F2 -  -  -  -  ;
   94 00:04F2 -  -  -  -  ; ***************************************************************************************
   95 00:04F2 -  -  -  -  
   96 00:04F2 -  -  -  -  Return8BitConstant:
   97 00:04F2 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:04F6 6F -  -  -  		ld 		l,a
   99 00:04F7 -  -  -  -  Return16BitConstant:
  100 00:04F7 D9 -  -  -  		exx 								; clear HL'
  101 00:04F8 21 00 00 00 		ld 		hl,0
  102 00:04FC D9 -  -  -  		exx
  103 00:04FD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:04FF C9 -  -  -  		ret
  105 00:0500 -  -  -  -  
  106 00:0500 -  -  -  -  ; ***************************************************************************************
  107 00:0500 -  -  -  -  ;
  108 00:0500 -  -  -  -  ;									Changes and Updates
  109 00:0500 -  -  -  -  ;
  110 00:0500 -  -  -  -  ; ***************************************************************************************
  111 00:0500 -  -  -  -  ;
  112 00:0500 -  -  -  -  ;		Date			Notes
  113 00:0500 -  -  -  -  ;		==== 			=====
  114 00:0500 -  -  -  -  ;
  115 00:0500 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:0500 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0500 -  -  -  -  ; ***************************************************************************************
    2 00:0500 -  -  -  -  ; ***************************************************************************************
    3 00:0500 -  -  -  -  ;
    4 00:0500 -  -  -  -  ;		Name : 		reference.asm
    5 00:0500 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0500 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0500 -  -  -  -  ;		Reviewed :	No
    8 00:0500 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0500 -  -  -  -  ;
   10 00:0500 -  -  -  -  ; ***************************************************************************************
   11 00:0500 -  -  -  -  ; ***************************************************************************************
   12 00:0500 -  -  -  -  
   13 00:0500 -  -  -  -  ; ***************************************************************************************
   14 00:0500 -  -  -  -  ;
   15 00:0500 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0500 -  -  -  -  ;
   17 00:0500 -  -  -  -  ; ***************************************************************************************
   18 00:0500 -  -  -  -  
   19 00:0500 -  -  -  -  Dereference:
   20 00:0500 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:0502 C8 -  -  -  		ret 	z
   22 00:0503 -  -  -  -  
   23 00:0503 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:0505 -  -  -  -  		
   25 00:0505 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0507 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0509 -  -  -  -  
   28 00:0509 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:050B 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:050D -  -  -  -  
   31 00:050D E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:050E ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0510 D9 -  -  -  		exx
   34 00:0511 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:0512 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:0513 23 -  -  -  		inc  	hl
   37 00:0514 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:0516 D9 -  -  -  		exx 								; fix back
   39 00:0517 C9 -  -  -  		ret
   40 00:0518 -  -  -  -  
   41 00:0518 -  -  -  -  _DeRefByte:		
   42 00:0518 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0519 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:051D 6F -  -  -  		ld	 	l,a
   45 00:051E D9 -  -  -  		exx
   46 00:051F 21 00 00 00 		ld 		hl,$0000
   47 00:0523 D9 -  -  -  		exx
   48 00:0524 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:0526 C9 -  -  -  		ret
   50 00:0527 -  -  -  -  
   51 00:0527 -  -  -  -  _DRInternal:
   52 00:0527 3E 04 C3 9A 
              02 00 -  -  		ERR_DISABLED
   53 00:052D -  -  -  -  
   54 00:052D -  -  -  -  ; ***************************************************************************************
   55 00:052D -  -  -  -  ;
   56 00:052D -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:052D -  -  -  -  ;
   58 00:052D -  -  -  -  ; ***************************************************************************************
   59 00:052D -  -  -  -  
   60 00:052D -  -  -  -  DRConvertHLHLToAddress:
   61 00:052D -  -  -  -  		#ifdef EZ80
   62 00:052D 22 66 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0531 D9 -  -  -  		exx
   64 00:0532 22 68 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:0536 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:053A D9 -  -  -  		exx
   67 00:053B 2A 66 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:053F -  -  -  -  		#endif
   69 00:053F C9 -  -  -  		ret
   70 00:0540 -  -  -  -  
   71 00:0540 -  -  -  -  ; ***************************************************************************************
   72 00:0540 -  -  -  -  ;
   73 00:0540 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0540 -  -  -  -  ;
   75 00:0540 -  -  -  -  ; ***************************************************************************************
   76 00:0540 -  -  -  -  
   77 00:0540 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0540 -  -  -  -  		#ifdef EZ80
   79 00:0540 22 66 00 00 		ld 		(AConvert),hl
   80 00:0544 21 00 00 00 		ld 		hl,$0000
   81 00:0548 22 69 00 00 		ld 		(AConvert+3),hl
   82 00:054C D9 -  -  -  		exx
   83 00:054D 2A 68 00 00 		ld 		hl,(AConvert+2)
   84 00:0551 D9 -  -  -  		exx
   85 00:0552 AF -  -  -  		xor 	a
   86 00:0553 32 68 00 00 		ld 		(AConvert+2),a
   87 00:0557 2A 66 00 00 		ld 		hl,(AConvert)
   88 00:055B -  -  -  -  		#endif
   89 00:055B C9 -  -  -  		ret
   90 00:055C -  -  -  -  
   91 00:055C -  -  -  -  ; ***************************************************************************************
   92 00:055C -  -  -  -  ;
   93 00:055C -  -  -  -  ;									Changes and Updates
   94 00:055C -  -  -  -  ;
   95 00:055C -  -  -  -  ; ***************************************************************************************
   96 00:055C -  -  -  -  ;
   97 00:055C -  -  -  -  ;		Date			Notes
   98 00:055C -  -  -  -  ;		==== 			=====
   99 00:055C -  -  -  -  ;
  100 00:055C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:055C -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:055C -  -  -  -  ; ***************************************************************************************
    2 00:055C -  -  -  -  ; ***************************************************************************************
    3 00:055C -  -  -  -  ;
    4 00:055C -  -  -  -  ;		Name : 		term.asm
    5 00:055C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:055C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:055C -  -  -  -  ;		Reviewed :	No
    8 00:055C -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:055C -  -  -  -  ;
   10 00:055C -  -  -  -  ; ***************************************************************************************
   11 00:055C -  -  -  -  ; ***************************************************************************************
   12 00:055C -  -  -  -  
   13 00:055C -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:055C             		add_hlhl_16
   15 00:055C             		exx
   16 00:055C             		adc_hlhl_16
   17 00:055C             		exx
   18 00:055C             #endmacro
   19 00:055C -  -  -  -  
   20 00:055C -  -  -  -  ; ***************************************************************************************
   21 00:055C -  -  -  -  ;
   22 00:055C -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:055C -  -  -  -  ;
   24 00:055C -  -  -  -  ; ***************************************************************************************
   25 00:055C -  -  -  -  ;
   26 00:055C -  -  -  -  ; 		Terms can be:
   27 00:055C -  -  -  -  ;
   28 00:055C -  -  -  -  ;			<integer> 			42 						not negative
   29 00:055C -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:055C -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:055C -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:055C -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:055C -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:055C -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:055C -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:055C -  -  -  -  ; 														reference of some sort.
   37 00:055C -  -  -  -  ;
   38 00:055C -  -  -  -  ; ***************************************************************************************
   39 00:055C -  -  -  -  
   40 00:055C -  -  -  -  EvaluateTerm:		
   41 00:055C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:055E D9 -  -  -  		exx
   43 00:055F 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:0563 D9 -  -  -  		exx
   45 00:0564 21 00 00 00 		ld 		hl,$0000		
   46 00:0568 -  -  -  -  		;
   47 00:0568 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:056B FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:056D 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:056F DA 27 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0573 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:0575 C2 CB 05 00 		jp 		nz,_ETFoundKeyword 
   53 00:0579 -  -  -  -  		;
   54 00:0579 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:0579 -  -  -  -  		;
   56 00:0579 -  -  -  -  _ETIntegerConstant:
   57 00:0579 -  -  -  -  		;
   58 00:0579 -  -  -  -  _ETIntegerLoop:		
   59 00:0579 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:057C E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:057E B5 -  -  -  		or 		l 							; or into L
   62 00:057F 6F -  -  -  		ld 		l,a
   63 00:0580 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0582 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:0585 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:0587 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0589 D8 -  -  -  		ret 	c
   68 00:058A -  -  -  -  
   69 00:058A 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0591 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0598 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:059F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:05A6 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:05AD 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:05B4 -  -  -  -  
   76 00:05B4 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:05B6 -  -  -  -  		;
   78 00:05B6 -  -  -  -  		; 		Found the $3F string marker.
   79 00:05B6 -  -  -  -  		;
   80 00:05B6 -  -  -  -  _ETStringMarker:		
   81 00:05B6 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:05B8 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:05BA DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:05BC E1 -  -  -  		pop 	hl
   85 00:05BD 11 00 00 00 		ld 		de,$0000
   86 00:05C1 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:05C4 DD 19 -  -  		add 	ix,de
   88 00:05C6 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:05C8 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:05CA C9 -  -  -  		ret
   91 00:05CB -  -  -  -  		;
   92 00:05CB -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:05CB -  -  -  -  		;
   94 00:05CB -  -  -  -  _ETFoundKeyword:
   95 00:05CB DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:05CD FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:05CF 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:05D1 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:05D3 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:05D5 -  -  -  -  		;
  101 00:05D5 -  -  -  -  		;		Unary group 0
  102 00:05D5 -  -  -  -  		;
  103 00:05D5 E6 7F 21 00 
              00 00 6F 29 
              29 11 9E 0A 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:05EA C3 60 00 00 		jp 		JumpCode 					; and go there.
  105 00:05EE -  -  -  -  
  106 00:05EE -  -  -  -  _ETNotUnaryFunction0:	
  107 00:05EE FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:05F0 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:05F2 -  -  -  -  		;
  110 00:05F2 -  -  -  -  		; 		- term
  111 00:05F2 -  -  -  -  		;
  112 00:05F2 CD A7 04 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:05F6 CD 3D 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:05FA C9 -  -  -  		ret
  115 00:05FB -  -  -  -  		;
  116 00:05FB -  -  -  -  		;		! ? indirection check
  117 00:05FB -  -  -  -  		;
  118 00:05FB -  -  -  -  _ETCheckIndirection:	
  119 00:05FB FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:05FD 28 06 -  -  		jr 		z,_ETIndirection
  121 00:05FF FE 83 -  -  		cp 		KWD_PLING
  122 00:0601 C2 04 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:0605 -  -  -  -  		;
  124 00:0605 -  -  -  -  		; 		! ? indirection
  125 00:0605 -  -  -  -  		;
  126 00:0605 -  -  -  -  _ETIndirection:
  127 00:0605 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:0606 CD 5C 05 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:060A CD 00 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:060E CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0610 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:0612 CD 2D 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:0616 F1 -  -  -  		pop 	af 							; get type back
  134 00:0617 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:0619 CB F9 -  -  		set 	CIsReference,c
  136 00:061B FE 83 -  -  		cp 		KWD_PLING
  137 00:061D C8 -  -  -  		ret 	z
  138 00:061E CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0620 C9 -  -  -  		ret
  140 00:0621 -  -  -  -  _ETStringIndirect:
  141 00:0621 3E 02 C3 9A 
              02 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:0627 -  -  -  -  		;
  143 00:0627 -  -  -  -  		; 		Found an identifier.
  144 00:0627 -  -  -  -  		;
  145 00:0627 -  -  -  -  _ETVariable:
  146 00:0627 CD 7B 08 00 		call 	FindVariable 				; find the variable.
  147 00:062B D0 -  -  -  		ret 	nc 							; return if found.
  148 00:062C 3E 0F C3 9A 
              02 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:0632 -  -  -  -  		
  150 00:0632 -  -  -  -  ; ***************************************************************************************
  151 00:0632 -  -  -  -  ;
  152 00:0632 -  -  -  -  ;									Changes and Updates
  153 00:0632 -  -  -  -  ;
  154 00:0632 -  -  -  -  ; ***************************************************************************************
  155 00:0632 -  -  -  -  ;
  156 00:0632 -  -  -  -  ;		Date			Notes
  157 00:0632 -  -  -  -  ;		==== 			=====
  158 00:0632 -  -  -  -  ;
  159 00:0632 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:0632 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0632 -  -  -  -  ; ***************************************************************************************
    2 00:0632 -  -  -  -  ; ***************************************************************************************
    3 00:0632 -  -  -  -  ;
    4 00:0632 -  -  -  -  ;		Name : 		abs.asm
    5 00:0632 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0632 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0632 -  -  -  -  ;		Reviewed :	No
    8 00:0632 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0632 -  -  -  -  ;
   10 00:0632 -  -  -  -  ; ***************************************************************************************
   11 00:0632 -  -  -  -  ; ***************************************************************************************
   12 00:0632 -  -  -  -  
   13 00:0632 -  -  -  -  ; ***************************************************************************************
   14 00:0632 -  -  -  -  ;
   15 00:0632 -  -  -  -  ;								abs( unary function
   16 00:0632 -  -  -  -  ;
   17 00:0632 -  -  -  -  ; ***************************************************************************************
   18 00:0632 -  -  -  -  
   19 00:0632 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0632 CD A7 04 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:0636 D9 -  -  -  		exx 								; test MSB
   22 00:0637 CB 7C -  -  		bit 	7,h
   23 00:0639 D9 -  -  -  		exx
   24 00:063A C4 3D 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:063E C9 -  -  -  		ret
   26 00:063F -  -  -  -  
   27 00:063F -  -  -  -  ; ***************************************************************************************
   28 00:063F -  -  -  -  ;
   29 00:063F -  -  -  -  ;									Changes and Updates
   30 00:063F -  -  -  -  ;
   31 00:063F -  -  -  -  ; ***************************************************************************************
   32 00:063F -  -  -  -  ;
   33 00:063F -  -  -  -  ;		Date			Notes
   34 00:063F -  -  -  -  ;		==== 			=====
   35 00:063F -  -  -  -  ;
   36 00:063F -  -  -  -  ; ***************************************************************************************
   37 00:063F -  -  -  -  		
Listing for file "_build.asm"
   35 00:063F -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:063F -  -  -  -  ; ***************************************************************************************
    2 00:063F -  -  -  -  ; ***************************************************************************************
    3 00:063F -  -  -  -  ;
    4 00:063F -  -  -  -  ;		Name : 		asc.asm
    5 00:063F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:063F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:063F -  -  -  -  ;		Reviewed :	No
    8 00:063F -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:063F -  -  -  -  ;
   10 00:063F -  -  -  -  ; ***************************************************************************************
   11 00:063F -  -  -  -  ; ***************************************************************************************
   12 00:063F -  -  -  -  
   13 00:063F -  -  -  -  ; ***************************************************************************************
   14 00:063F -  -  -  -  ;
   15 00:063F -  -  -  -  ;								Asc unary function
   16 00:063F -  -  -  -  ;
   17 00:063F -  -  -  -  ; ***************************************************************************************
   18 00:063F -  -  -  -  
   19 00:063F -  -  -  -  Unary_Asc:	;; [asc]
   20 00:063F CD B6 04 00 		call	EvaluateStringTerm			; Get string
   21 00:0643 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0644 C3 F2 04 00 		jp 		Return8BitConstant
   23 00:0648 -  -  -  -  
   24 00:0648 -  -  -  -  ; ***************************************************************************************
   25 00:0648 -  -  -  -  ;
   26 00:0648 -  -  -  -  ;									Changes and Updates
   27 00:0648 -  -  -  -  ;
   28 00:0648 -  -  -  -  ; ***************************************************************************************
   29 00:0648 -  -  -  -  ;
   30 00:0648 -  -  -  -  ;		Date			Notes
   31 00:0648 -  -  -  -  ;		==== 			=====
   32 00:0648 -  -  -  -  ;
   33 00:0648 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0648 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:0648 -  -  -  -  ; ***************************************************************************************
    2 00:0648 -  -  -  -  ; ***************************************************************************************
    3 00:0648 -  -  -  -  ;
    4 00:0648 -  -  -  -  ;		Name : 		chr.asm
    5 00:0648 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0648 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0648 -  -  -  -  ;		Reviewed :	No
    8 00:0648 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:0648 -  -  -  -  ;
   10 00:0648 -  -  -  -  ; ***************************************************************************************
   11 00:0648 -  -  -  -  ; ***************************************************************************************
   12 00:0648 -  -  -  -  
   13 00:0648 -  -  -  -  ; ***************************************************************************************
   14 00:0648 -  -  -  -  ;
   15 00:0648 -  -  -  -  ;								Chr$() unary function
   16 00:0648 -  -  -  -  ;
   17 00:0648 -  -  -  -  ; ***************************************************************************************
   18 00:0648 -  -  -  -  
   19 00:0648 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:0648 CD 72 02 00 		call 	CheckDollar
   21 00:064C CD A7 04 00 		call 	EvaluateIntegerTerm
   22 00:0650 7D -  -  -  		ld 		a,l 						; get character
   23 00:0651 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0653 21 99 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:0657 36 0D -  -  		ld 		(hl),13
   26 00:0659 2B -  -  -  		dec 	hl
   27 00:065A 77 -  -  -  		ld 		(hl),a
   28 00:065B C9 -  -  -  		ret
   29 00:065C -  -  -  -  
   30 00:065C -  -  -  -  ; ***************************************************************************************
   31 00:065C -  -  -  -  ;
   32 00:065C -  -  -  -  ;									Changes and Updates
   33 00:065C -  -  -  -  ;
   34 00:065C -  -  -  -  ; ***************************************************************************************
   35 00:065C -  -  -  -  ;
   36 00:065C -  -  -  -  ;		Date			Notes
   37 00:065C -  -  -  -  ;		==== 			=====
   38 00:065C -  -  -  -  ;
   39 00:065C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:065C -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:065C -  -  -  -  ; ***************************************************************************************
    2 00:065C -  -  -  -  ; ***************************************************************************************
    3 00:065C -  -  -  -  ;
    4 00:065C -  -  -  -  ;		Name : 		len.asm
    5 00:065C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:065C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:065C -  -  -  -  ;		Reviewed :	None
    8 00:065C -  -  -  -  ;		Purpose :	String Length
    9 00:065C -  -  -  -  ;
   10 00:065C -  -  -  -  ; ***************************************************************************************
   11 00:065C -  -  -  -  ; ***************************************************************************************
   12 00:065C -  -  -  -  
   13 00:065C -  -  -  -  ; ***************************************************************************************
   14 00:065C -  -  -  -  ;
   15 00:065C -  -  -  -  ;								Len unary function
   16 00:065C -  -  -  -  ;
   17 00:065C -  -  -  -  ; ***************************************************************************************
   18 00:065C -  -  -  -  
   19 00:065C -  -  -  -  Unary_Len:	;; [len]
   20 00:065C CD B6 04 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0660 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0661 CD A5 03 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:0665 -  -  -  -  _ULCount:
   24 00:0665 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:0666 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:0668 D8 -  -  -  		ret 	c
   27 00:0669 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:066A 13 -  -  -  		inc 	de
   29 00:066B 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:066D -  -  -  -  
   31 00:066D -  -  -  -  ; ***************************************************************************************
   32 00:066D -  -  -  -  ;
   33 00:066D -  -  -  -  ;									Changes and Updates
   34 00:066D -  -  -  -  ;
   35 00:066D -  -  -  -  ; ***************************************************************************************
   36 00:066D -  -  -  -  ;
   37 00:066D -  -  -  -  ;		Date			Notes
   38 00:066D -  -  -  -  ;		==== 			=====
   39 00:066D -  -  -  -  ;
   40 00:066D -  -  -  -  ; ***************************************************************************************
   41 00:066D -  -  -  -  		
Listing for file "_build.asm"
   38 00:066D -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:066D -  -  -  -  ; ***************************************************************************************
    2 00:066D -  -  -  -  ; ***************************************************************************************
    3 00:066D -  -  -  -  ;
    4 00:066D -  -  -  -  ;		Name : 		makestring.asm
    5 00:066D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:066D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:066D -  -  -  -  ;		Reviewed :	No
    8 00:066D -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:066D -  -  -  -  ;
   10 00:066D -  -  -  -  ; ***************************************************************************************
   11 00:066D -  -  -  -  ; ***************************************************************************************
   12 00:066D -  -  -  -  
   13 00:066D -  -  -  -  ; ***************************************************************************************
   14 00:066D -  -  -  -  ;
   15 00:066D -  -  -  -  ;								Str$() unary function
   16 00:066D -  -  -  -  ;
   17 00:066D -  -  -  -  ; ***************************************************************************************
   18 00:066D -  -  -  -  
   19 00:066D -  -  -  -  Unary_MkStr:	;; [$]
   20 00:066D CD A7 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0671 CD 2D 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:0675 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:0677 C9 -  -  -  		ret
   24 00:0678 -  -  -  -  
   25 00:0678 -  -  -  -  ; ***************************************************************************************
   26 00:0678 -  -  -  -  ;
   27 00:0678 -  -  -  -  ;									Changes and Updates
   28 00:0678 -  -  -  -  ;
   29 00:0678 -  -  -  -  ; ***************************************************************************************
   30 00:0678 -  -  -  -  ;
   31 00:0678 -  -  -  -  ;		Date			Notes
   32 00:0678 -  -  -  -  ;		==== 			=====
   33 00:0678 -  -  -  -  ;
   34 00:0678 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0678 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:0678 -  -  -  -  ; ***************************************************************************************
    2 00:0678 -  -  -  -  ; ***************************************************************************************
    3 00:0678 -  -  -  -  ;
    4 00:0678 -  -  -  -  ;		Name : 		not.asm
    5 00:0678 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0678 -  -  -  -  ;		Date : 		5th June 2023
    7 00:0678 -  -  -  -  ;		Reviewed :	No
    8 00:0678 -  -  -  -  ;		Purpose :	Logical not
    9 00:0678 -  -  -  -  ;
   10 00:0678 -  -  -  -  ; ***************************************************************************************
   11 00:0678 -  -  -  -  ; ***************************************************************************************
   12 00:0678 -  -  -  -  
   13 00:0678 -  -  -  -  ; ***************************************************************************************
   14 00:0678 -  -  -  -  ;
   15 00:0678 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:0678 -  -  -  -  ;
   17 00:0678 -  -  -  -  ; ***************************************************************************************
   18 00:0678 -  -  -  -  
   19 00:0678 -  -  -  -  Unary_Not:		;; [not]
   20 00:0678 CD A7 04 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:067C CD 85 06 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0680 CD 85 06 00 		call 	__UNSwap		
   23 00:0684 C9 -  -  -  		ret
   24 00:0685 -  -  -  -  
   25 00:0685 -  -  -  -  __UNSwap:
   26 00:0685 7C -  -  -  		ld 		a,h
   27 00:0686 2F -  -  -  		cpl
   28 00:0687 67 -  -  -  		ld 		h,a
   29 00:0688 7D -  -  -  		ld 		a,l
   30 00:0689 2F -  -  -  		cpl 	
   31 00:068A 6F -  -  -  		ld 		l,a
   32 00:068B D9 -  -  -  		exx
   33 00:068C C9 -  -  -  		ret
   34 00:068D -  -  -  -  
   35 00:068D -  -  -  -  ; ***************************************************************************************
   36 00:068D -  -  -  -  ;
   37 00:068D -  -  -  -  ;									Changes and Updates
   38 00:068D -  -  -  -  ;
   39 00:068D -  -  -  -  ; ***************************************************************************************
   40 00:068D -  -  -  -  ;
   41 00:068D -  -  -  -  ;		Date			Notes
   42 00:068D -  -  -  -  ;		==== 			=====
   43 00:068D -  -  -  -  ;
   44 00:068D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:068D -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:068D -  -  -  -  ; ***************************************************************************************
    2 00:068D -  -  -  -  ; ***************************************************************************************
    3 00:068D -  -  -  -  ;
    4 00:068D -  -  -  -  ;		Name : 		page.asm
    5 00:068D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:068D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:068D -  -  -  -  ;		Reviewed :	No
    8 00:068D -  -  -  -  ;		Purpose :	Various constants.
    9 00:068D -  -  -  -  ;
   10 00:068D -  -  -  -  ; ***************************************************************************************
   11 00:068D -  -  -  -  ; ***************************************************************************************
   12 00:068D -  -  -  -  
   13 00:068D -  -  -  -  ; ***************************************************************************************
   14 00:068D -  -  -  -  ;
   15 00:068D -  -  -  -  ;							page unary function (no bracket)
   16 00:068D -  -  -  -  ;
   17 00:068D -  -  -  -  ; ***************************************************************************************
   18 00:068D -  -  -  -  
   19 00:068D -  -  -  -  Unary_Page:	;; [page]
   20 00:068D 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0691 D9 -  -  -  			exx
   22 00:0692 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:0696 D9 -  -  -  			exx
   24 00:0697 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0699 C9 -  -  -  			ret
   26 00:069A -  -  -  -  
   27 00:069A -  -  -  -  ; ***************************************************************************************
   28 00:069A -  -  -  -  ;
   29 00:069A -  -  -  -  ;									Changes and Updates
   30 00:069A -  -  -  -  ;
   31 00:069A -  -  -  -  ; ***************************************************************************************
   32 00:069A -  -  -  -  ;
   33 00:069A -  -  -  -  ;		Date			Notes
   34 00:069A -  -  -  -  ;		==== 			=====
   35 00:069A -  -  -  -  ;
   36 00:069A -  -  -  -  ; ***************************************************************************************
   37 00:069A -  -  -  -  			
Listing for file "_build.asm"
   41 00:069A -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:069A -  -  -  -  ; ***************************************************************************************
    2 00:069A -  -  -  -  ; ***************************************************************************************
    3 00:069A -  -  -  -  ;
    4 00:069A -  -  -  -  ;		Name : 		random.asm
    5 00:069A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:069A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:069A -  -  -  -  ;		Reviewed :	No
    8 00:069A -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:069A -  -  -  -  ;
   10 00:069A -  -  -  -  ; ***************************************************************************************
   11 00:069A -  -  -  -  ; ***************************************************************************************
   12 00:069A -  -  -  -  
   13 00:069A -  -  -  -  ; ***************************************************************************************
   14 00:069A -  -  -  -  ;
   15 00:069A -  -  -  -  ;								Random unary function
   16 00:069A -  -  -  -  ;
   17 00:069A -  -  -  -  ; ***************************************************************************************
   18 00:069A -  -  -  -  
   19 00:069A -  -  -  -  Unary_Random:	;; [rnd]
   20 00:069A F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:06A2 CD A7 04 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:06A6 D9 -  -  -  		exx 								; is it -ve
   23 00:06A7 CB 7C -  -  		bit 	7,h
   24 00:06A9 D9 -  -  -  		exx
   25 00:06AA 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:06AC 22 6C 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:06B0 D9 -  -  -  		exx
   28 00:06B1 22 70 00 00 		ld 		(RandomSeed+4),hl
   29 00:06B5 D9 -  -  -  		exx
   30 00:06B6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:06B8 C9 -  -  -  		ret
   32 00:06B9 -  -  -  -  _URDontSeed:		
   33 00:06B9 -  -  -  -  
   34 00:06B9 CD 41 0D 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:06BD 28 1C -  -  		jr 		z,_URFail
   36 00:06BF E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:06C0 D9 -  -  -  		exx
   38 00:06C1 E5 -  -  -  		push 	hl
   39 00:06C2 D9 -  -  -  		exx
   40 00:06C3 -  -  -  -  		;
   41 00:06C3 CD EC 06 00 		call 	URandomHL 					; get random HL'HL
   42 00:06C7 D9 -  -  -  		exx
   43 00:06C8 CD EC 06 00 		call 	URandomHL
   44 00:06CC CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:06CE D9 -  -  -  		exx
   46 00:06CF -  -  -  -  		;
   47 00:06CF D9 -  -  -  		exx 								; restore range.
   48 00:06D0 D1 -  -  -  		pop 	de
   49 00:06D1 D9 -  -  -  		exx
   50 00:06D2 D1 -  -  -  		pop 	de
   51 00:06D3 -  -  -  -  		;
   52 00:06D3 CD D2 0B 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:06D7 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:06D8 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:06DA C9 -  -  -  		ret
   56 00:06DB -  -  -  -  _URFail:
   57 00:06DB 3E 03 C3 9A 
              02 00 -  -  		ERR_BADVALUE
   58 00:06E1 -  -  -  -  ; ***************************************************************************************
   59 00:06E1 -  -  -  -  ;
   60 00:06E1 -  -  -  -  ; 									Push RNG off zero
   61 00:06E1 -  -  -  -  ;
   62 00:06E1 -  -  -  -  ; ***************************************************************************************
   63 00:06E1 -  -  -  -  
   64 00:06E1 -  -  -  -  UnaryRandomInitialise:
   65 00:06E1 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:06E3 -  -  -  -  _URILoop:
   67 00:06E3 C5 -  -  -  		push 	bc
   68 00:06E4 CD EC 06 00 		call 	URandomHL
   69 00:06E8 C1 -  -  -  		pop 	bc
   70 00:06E9 10 F8 -  -  		djnz 	_URILoop
   71 00:06EB C9 -  -  -  		ret
   72 00:06EC -  -  -  -  
   73 00:06EC -  -  -  -  ; ***************************************************************************************
   74 00:06EC -  -  -  -  ;
   75 00:06EC -  -  -  -  ;							16 bit random number generator
   76 00:06EC -  -  -  -  ;
   77 00:06EC -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:06EC -  -  -  -  ;		Actual author unspecified.
   79 00:06EC -  -  -  -  ;
   80 00:06EC -  -  -  -  ; ***************************************************************************************
   81 00:06EC -  -  -  -  
   82 00:06EC -  -  -  -  URandomHL:
   83 00:06EC 2A 6C 00 00 	    ld 		hl,(RandomSeed)
   84 00:06F0 ED 5B 70 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:06F5 44 -  -  -  	    ld 		b,h
   86 00:06F6 4D -  -  -  	    ld 		c,l
   87 00:06F7 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:06FC 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0701 2C -  -  -  	    inc 	l
   90 00:0702 09 -  -  -  	    add 	hl,bc
   91 00:0703 22 6C 00 00 	    ld 		(RandomSeed),hl
   92 00:0707 2A 70 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:070B ED 5A -  -  	    adc 	hl,de
   94 00:070D 22 70 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0711 EB -  -  -  	    ex 		de,hl
   96 00:0712 2A 74 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:0716 ED 4B 78 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:071B 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0720 ED 43 78 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:0725 9F -  -  -  	    sbc 	a,a
  101 00:0726 E6 C5 -  -  	    and 	%11000101
  102 00:0728 AD -  -  -  	    xor 	l
  103 00:0729 6F -  -  -  	    ld 		l,a
  104 00:072A 22 74 00 00 	    ld 		(RandomSeed+8),hl
  105 00:072E EB -  -  -  	    ex 		de,hl
  106 00:072F 09 -  -  -  	    add 	hl,bc
  107 00:0730 C9 -  -  -  	    ret		
  108 00:0731 -  -  -  -  
  109 00:0731 -  -  -  -  ; ***************************************************************************************
  110 00:0731 -  -  -  -  ;
  111 00:0731 -  -  -  -  ;									Changes and Updates
  112 00:0731 -  -  -  -  ;
  113 00:0731 -  -  -  -  ; ***************************************************************************************
  114 00:0731 -  -  -  -  ;
  115 00:0731 -  -  -  -  ;		Date			Notes
  116 00:0731 -  -  -  -  ;		==== 			=====
  117 00:0731 -  -  -  -  ;
  118 00:0731 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:0731 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0731 -  -  -  -  ; ***************************************************************************************
    2 00:0731 -  -  -  -  ; ***************************************************************************************
    3 00:0731 -  -  -  -  ;
    4 00:0731 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0731 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0731 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0731 -  -  -  -  ;		Reviewed :	No
    8 00:0731 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0731 -  -  -  -  ;
   10 00:0731 -  -  -  -  ; ***************************************************************************************
   11 00:0731 -  -  -  -  ; ***************************************************************************************
   12 00:0731 -  -  -  -  
   13 00:0731 -  -  -  -  ; ***************************************************************************************
   14 00:0731 -  -  -  -  ;
   15 00:0731 -  -  -  -  ;								sgn unary function
   16 00:0731 -  -  -  -  ;
   17 00:0731 -  -  -  -  ; ***************************************************************************************
   18 00:0731 -  -  -  -  
   19 00:0731 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0731 CD A7 04 00 		call	EvaluateIntegerTerm 		; get value
   21 00:0735 CD 41 0D 00 		call 	Int32Zero 					; integer sgn() code
   22 00:0739 CA A5 03 00 		jp 		z,UnaryInt32False
   23 00:073D D9 -  -  -  		exx
   24 00:073E CB 7C -  -  		bit 	7,h
   25 00:0740 D9 -  -  -  		exx
   26 00:0741 C2 A1 03 00 		jp 		nz,UnaryInt32True
   27 00:0745 3E 01 -  -  		ld 		a,1
   28 00:0747 C3 F2 04 00 		jp 		Return8BitConstant
   29 00:074B -  -  -  -  
   30 00:074B -  -  -  -  ; ***************************************************************************************
   31 00:074B -  -  -  -  ;
   32 00:074B -  -  -  -  ;									Changes and Updates
   33 00:074B -  -  -  -  ;
   34 00:074B -  -  -  -  ; ***************************************************************************************
   35 00:074B -  -  -  -  ;
   36 00:074B -  -  -  -  ;		Date			Notes
   37 00:074B -  -  -  -  ;		==== 			=====
   38 00:074B -  -  -  -  ;
   39 00:074B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:074B -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:074B -  -  -  -  ; ***************************************************************************************
    2 00:074B -  -  -  -  ; ***************************************************************************************
    3 00:074B -  -  -  -  ;
    4 00:074B -  -  -  -  ;		Name : 		simple.asm
    5 00:074B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:074B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:074B -  -  -  -  ;		Reviewed :	No
    8 00:074B -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:074B -  -  -  -  ;
   10 00:074B -  -  -  -  ; ***************************************************************************************
   11 00:074B -  -  -  -  ; ***************************************************************************************
   12 00:074B -  -  -  -  
   13 00:074B -  -  -  -  ; ***************************************************************************************
   14 00:074B -  -  -  -  ;
   15 00:074B -  -  -  -  ;								( unary function (think about it)
   16 00:074B -  -  -  -  ;
   17 00:074B -  -  -  -  ; ***************************************************************************************
   18 00:074B -  -  -  -  
   19 00:074B -  -  -  -  Unary_Brackets:	;; [(]
   20 00:074B CD 4E 04 00 		call 	EvaluateAtPrecedence0
   21 00:074F C3 64 02 00 		jp  	CheckRightBracket
   22 00:0753 -  -  -  -  
   23 00:0753 -  -  -  -  ; ***************************************************************************************
   24 00:0753 -  -  -  -  ;
   25 00:0753 -  -  -  -  ;									Handle &x
   26 00:0753 -  -  -  -  ;
   27 00:0753 -  -  -  -  ; ***************************************************************************************
   28 00:0753 -  -  -  -  
   29 00:0753 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0753 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0756 E6 C0 -  -  		and 		$C0
   32 00:0758 FE 40 -  -  		cp 			$40
   33 00:075A C2 04 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:075E C3 5C 05 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0762 -  -  -  -  
   36 00:0762 -  -  -  -  ; ***************************************************************************************
   37 00:0762 -  -  -  -  ;
   38 00:0762 -  -  -  -  ;									Changes and Updates
   39 00:0762 -  -  -  -  ;
   40 00:0762 -  -  -  -  ; ***************************************************************************************
   41 00:0762 -  -  -  -  ;
   42 00:0762 -  -  -  -  ;		Date			Notes
   43 00:0762 -  -  -  -  ;		==== 			=====
   44 00:0762 -  -  -  -  ;
   45 00:0762 -  -  -  -  ; ***************************************************************************************
   46 00:0762 -  -  -  -  		
Listing for file "_build.asm"
   44 00:0762 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0762 -  -  -  -  ; ***************************************************************************************
    2 00:0762 -  -  -  -  ; ***************************************************************************************
    3 00:0762 -  -  -  -  ;
    4 00:0762 -  -  -  -  ;		Name : 		str.asm
    5 00:0762 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0762 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0762 -  -  -  -  ;		Reviewed :	No
    8 00:0762 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0762 -  -  -  -  ;
   10 00:0762 -  -  -  -  ; ***************************************************************************************
   11 00:0762 -  -  -  -  ; ***************************************************************************************
   12 00:0762 -  -  -  -  
   13 00:0762 -  -  -  -  ; ***************************************************************************************
   14 00:0762 -  -  -  -  ;
   15 00:0762 -  -  -  -  ;								Str$() unary function
   16 00:0762 -  -  -  -  ;
   17 00:0762 -  -  -  -  ; ***************************************************************************************
   18 00:0762 -  -  -  -  
   19 00:0762 -  -  -  -  Unary_Str:	;; [str]
   20 00:0762 CD 72 02 00 		call 	CheckDollar
   21 00:0766 CD A7 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:076A 01 88 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:076E 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:0770 CD 89 0D 00 		call 	Int32ToString 				
   25 00:0774 21 88 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:0778 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:077A C9 -  -  -  		ret
   28 00:077B -  -  -  -  
   29 00:077B -  -  -  -  ; ***************************************************************************************
   30 00:077B -  -  -  -  ;
   31 00:077B -  -  -  -  ;									Changes and Updates
   32 00:077B -  -  -  -  ;
   33 00:077B -  -  -  -  ; ***************************************************************************************
   34 00:077B -  -  -  -  ;
   35 00:077B -  -  -  -  ;		Date			Notes
   36 00:077B -  -  -  -  ;		==== 			=====
   37 00:077B -  -  -  -  ;
   38 00:077B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:077B -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:077B -  -  -  -  ; ***************************************************************************************
    2 00:077B -  -  -  -  ; ***************************************************************************************
    3 00:077B -  -  -  -  ;
    4 00:077B -  -  -  -  ;		Name : 		time.asm
    5 00:077B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:077B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:077B -  -  -  -  ;		Reviewed :	No
    8 00:077B -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:077B -  -  -  -  ;
   10 00:077B -  -  -  -  ; ***************************************************************************************
   11 00:077B -  -  -  -  ; ***************************************************************************************
   12 00:077B -  -  -  -  
   13 00:077B -  -  -  -  ; ***************************************************************************************
   14 00:077B -  -  -  -  ;
   15 00:077B -  -  -  -  ;							Get system time in ms
   16 00:077B -  -  -  -  ;
   17 00:077B -  -  -  -  ; ***************************************************************************************
   18 00:077B -  -  -  -  
   19 00:077B -  -  -  -  Unary_Time:	;; [time]
   20 00:077B CD DA 0D 00 			call 	SYSGetTimer
   21 00:077F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0781 C9 -  -  -  			ret
   23 00:0782 -  -  -  -  
   24 00:0782 -  -  -  -  ; ***************************************************************************************
   25 00:0782 -  -  -  -  ;
   26 00:0782 -  -  -  -  ;									Changes and Updates
   27 00:0782 -  -  -  -  ;
   28 00:0782 -  -  -  -  ; ***************************************************************************************
   29 00:0782 -  -  -  -  ;
   30 00:0782 -  -  -  -  ;		Date			Notes
   31 00:0782 -  -  -  -  ;		==== 			=====
   32 00:0782 -  -  -  -  ;
   33 00:0782 -  -  -  -  ; ***************************************************************************************
   34 00:0782 -  -  -  -  			
Listing for file "_build.asm"
   46 00:0782 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0782 -  -  -  -  ; ***************************************************************************************
    2 00:0782 -  -  -  -  ; ***************************************************************************************
    3 00:0782 -  -  -  -  ;
    4 00:0782 -  -  -  -  ;		Name : 		top.asm
    5 00:0782 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0782 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0782 -  -  -  -  ;		Reviewed :	No
    8 00:0782 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0782 -  -  -  -  ;
   10 00:0782 -  -  -  -  ; ***************************************************************************************
   11 00:0782 -  -  -  -  ; ***************************************************************************************
   12 00:0782 -  -  -  -  
   13 00:0782 -  -  -  -  ; ***************************************************************************************
   14 00:0782 -  -  -  -  ;
   15 00:0782 -  -  -  -  ;							page unary function (no bracket)
   16 00:0782 -  -  -  -  ;
   17 00:0782 -  -  -  -  ; ***************************************************************************************
   18 00:0782 -  -  -  -  
   19 00:0782 -  -  -  -  Unary_Top:	;; [top]
   20 00:0782 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:0786 D9 -  -  -  			exx
   22 00:0787 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:078B D9 -  -  -  			exx
   24 00:078C 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:078E C9 -  -  -  			ret
   26 00:078F -  -  -  -  
   27 00:078F -  -  -  -  ; ***************************************************************************************
   28 00:078F -  -  -  -  ;
   29 00:078F -  -  -  -  ;									Changes and Updates
   30 00:078F -  -  -  -  ;
   31 00:078F -  -  -  -  ; ***************************************************************************************
   32 00:078F -  -  -  -  ;
   33 00:078F -  -  -  -  ;		Date			Notes
   34 00:078F -  -  -  -  ;		==== 			=====
   35 00:078F -  -  -  -  ;
   36 00:078F -  -  -  -  ; ***************************************************************************************
   37 00:078F -  -  -  -  			
Listing for file "_build.asm"
   47 00:078F -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:078F -  -  -  -  ; ***************************************************************************************
    2 00:078F -  -  -  -  ; ***************************************************************************************
    3 00:078F -  -  -  -  ;
    4 00:078F -  -  -  -  ;		Name : 		val.asm
    5 00:078F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:078F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:078F -  -  -  -  ;		Reviewed :	No
    8 00:078F -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:078F -  -  -  -  ;
   10 00:078F -  -  -  -  ; ***************************************************************************************
   11 00:078F -  -  -  -  ; ***************************************************************************************
   12 00:078F -  -  -  -  
   13 00:078F -  -  -  -  ; ***************************************************************************************
   14 00:078F -  -  -  -  ;
   15 00:078F -  -  -  -  ;								val( unary function
   16 00:078F -  -  -  -  ;
   17 00:078F -  -  -  -  ; ***************************************************************************************
   18 00:078F -  -  -  -  
   19 00:078F -  -  -  -  Unary_Val:	;; [val]
   20 00:078F CD B6 04 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0793 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:0794 C1 -  -  -  		pop 	bc
   23 00:0795 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0797 CD 67 0C 00 		call 	Int32FromString 			; get the integer part.
   25 00:079B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:079D C8 -  -  -  		ret		z 							; okay
   27 00:079E 3E 03 C3 9A 
              02 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:07A4 -  -  -  -  
   29 00:07A4 -  -  -  -  ; ***************************************************************************************
   30 00:07A4 -  -  -  -  ;
   31 00:07A4 -  -  -  -  ;									Changes and Updates
   32 00:07A4 -  -  -  -  ;
   33 00:07A4 -  -  -  -  ; ***************************************************************************************
   34 00:07A4 -  -  -  -  ;
   35 00:07A4 -  -  -  -  ;		Date			Notes
   36 00:07A4 -  -  -  -  ;		==== 			=====
   37 00:07A4 -  -  -  -  ;
   38 00:07A4 -  -  -  -  ; ***************************************************************************************
   39 00:07A4 -  -  -  -  		
Listing for file "_build.asm"
   48 00:07A4 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:07A4 -  -  -  -  ; ***************************************************************************************
    2 00:07A4 -  -  -  -  ; ***************************************************************************************
    3 00:07A4 -  -  -  -  ;
    4 00:07A4 -  -  -  -  ;		Name : 		allocate.asm
    5 00:07A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07A4 -  -  -  -  ;		Date : 		4th June 2022
    7 00:07A4 -  -  -  -  ;		Reviewed :	No
    8 00:07A4 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:07A4 -  -  -  -  ;
   10 00:07A4 -  -  -  -  ; ***************************************************************************************
   11 00:07A4 -  -  -  -  ; ***************************************************************************************
   12 00:07A4 -  -  -  -  
   13 00:07A4 -  -  -  -  ; ***************************************************************************************
   14 00:07A4 -  -  -  -  ;
   15 00:07A4 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:07A4 -  -  -  -  ;
   17 00:07A4 -  -  -  -  ; ***************************************************************************************
   18 00:07A4 -  -  -  -  
   19 00:07A4 -  -  -  -  AllocateBytes:
   20 00:07A4 ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:07A9 D5 -  -  -  		push 	de 							; save on stack
   22 00:07AA 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:07AB 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   24 00:07AF EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:07B0 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:07B4 AF -  -  -  		xor 	a
   27 00:07B5 ED 52 -  -  		sbc 	hl,de
   28 00:07B7 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:07B8 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:07B9 3E 06 C3 9A 
              02 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:07BF -  -  -  -  
   32 00:07BF -  -  -  -  ; ***************************************************************************************
   33 00:07BF -  -  -  -  ;
   34 00:07BF -  -  -  -  ;									Changes and Updates
   35 00:07BF -  -  -  -  ;
   36 00:07BF -  -  -  -  ; ***************************************************************************************
   37 00:07BF -  -  -  -  ;
   38 00:07BF -  -  -  -  ;		Date			Notes
   39 00:07BF -  -  -  -  ;		==== 			=====
   40 00:07BF -  -  -  -  ;
   41 00:07BF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:07BF -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:07BF -  -  -  -  ; ***************************************************************************************
    2 00:07BF -  -  -  -  ; ***************************************************************************************
    3 00:07BF -  -  -  -  ;
    4 00:07BF -  -  -  -  ;		Name : 		clear.asm
    5 00:07BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07BF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07BF -  -  -  -  ;		Reviewed :	No
    8 00:07BF -  -  -  -  ;		Purpose :	Clear command.
    9 00:07BF -  -  -  -  ;
   10 00:07BF -  -  -  -  ; ***************************************************************************************
   11 00:07BF -  -  -  -  ; ***************************************************************************************
   12 00:07BF -  -  -  -  
   13 00:07BF -  -  -  -  ; ***************************************************************************************
   14 00:07BF -  -  -  -  ;
   15 00:07BF -  -  -  -  ;										CLEAR command
   16 00:07BF -  -  -  -  ;
   17 00:07BF -  -  -  -  ; ***************************************************************************************
   18 00:07BF -  -  -  -  
   19 00:07BF -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:07BF -  -  -  -  		;
   21 00:07BF -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:07BF -  -  -  -  		;
   23 00:07BF 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:07C3 -  -  -  -  _CCFindLow:
   25 00:07C3 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:07C7 5E -  -  -  		ld 		e,(hl)		
   27 00:07C8 19 -  -  -  		add 	hl,de
   28 00:07C9 7B -  -  -  		ld 		a,e
   29 00:07CA B7 -  -  -  		or 		a
   30 00:07CB 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:07CD 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:07CE 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:07D2 23 -  -  -  		inc 	hl 							; one for luck
   34 00:07D3 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:07D7 -  -  -  -  		;
   36 00:07D7 -  -  -  -  		; 	 		Reset the language stack
   37 00:07D7 -  -  -  -  		;
   38 00:07D7 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:07DB -  -  -  -  		;
   40 00:07DB 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:07DD 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:07E1 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:07E5 19 -  -  -  		add 	hl,de
   44 00:07E6 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:07E8 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:07EC -  -  -  -  		;
   47 00:07EC 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:07F0 19 -  -  -  		add 	hl,de
   49 00:07F1 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:07F5 -  -  -  -  		;
   51 00:07F5 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:07F5 -  -  -  -  		;
   53 00:07F5 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:07F9 -  -  -  -  _CCFClearHT:
   55 00:07F9 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:07FA 36 00 -  -  		ld 		(hl),0
   57 00:07FC 1B -  -  -  		dec 	de
   58 00:07FD 7A -  -  -  		ld 		a,d
   59 00:07FE B3 -  -  -  		or 		e
   60 00:07FF 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:0801 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   62 00:0805 -  -  -  -  		;
   63 00:0805 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:0805 -  -  -  -  		;
   65 00:0805 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:0809 -  -  -  -  		;
   67 00:0809 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:0809 -  -  -  -  		;
   69 00:0809 CD E1 06 00 		call 	UnaryRandomInitialise
   70 00:080D C9 -  -  -  		ret
   71 00:080E -  -  -  -  
   72 00:080E -  -  -  -  ; ***************************************************************************************
   73 00:080E -  -  -  -  ;
   74 00:080E -  -  -  -  ;									Changes and Updates
   75 00:080E -  -  -  -  ;
   76 00:080E -  -  -  -  ; ***************************************************************************************
   77 00:080E -  -  -  -  ;
   78 00:080E -  -  -  -  ;		Date			Notes
   79 00:080E -  -  -  -  ;		==== 			=====
   80 00:080E -  -  -  -  ;
   81 00:080E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:080E -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:080E -  -  -  -  ; ***************************************************************************************
    2 00:080E -  -  -  -  ; ***************************************************************************************
    3 00:080E -  -  -  -  ;
    4 00:080E -  -  -  -  ;		Name : 		instance.asm
    5 00:080E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:080E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:080E -  -  -  -  ;		Reviewed :	No
    8 00:080E -  -  -  -  ;		Purpose :	Instance handling
    9 00:080E -  -  -  -  ;
   10 00:080E -  -  -  -  ; ***************************************************************************************
   11 00:080E -  -  -  -  ; ***************************************************************************************
   12 00:080E -  -  -  -  
   13 00:080E -  -  -  -  ; ***************************************************************************************
   14 00:080E -  -  -  -  ;
   15 00:080E -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:080E -  -  -  -  ;
   17 00:080E -  -  -  -  ; ***************************************************************************************
   18 00:080E -  -  -  -  
   19 00:080E -  -  -  -  SetCurrentInstance:
   20 00:080E ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0813 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0817 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:081C -  -  -  -  
   24 00:081C C9 -  -  -  		ret
   25 00:081D -  -  -  -  
   26 00:081D -  -  -  -  
   27 00:081D -  -  -  -  ; ***************************************************************************************
   28 00:081D -  -  -  -  ;
   29 00:081D -  -  -  -  ;									Changes and Updates
   30 00:081D -  -  -  -  ;
   31 00:081D -  -  -  -  ; ***************************************************************************************
   32 00:081D -  -  -  -  ;
   33 00:081D -  -  -  -  ;		Date			Notes
   34 00:081D -  -  -  -  ;		==== 			=====
   35 00:081D -  -  -  -  ;
   36 00:081D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:081D -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:081D -  -  -  -  ; ***************************************************************************************
    2 00:081D -  -  -  -  ; ***************************************************************************************
    3 00:081D -  -  -  -  ;
    4 00:081D -  -  -  -  ;		Name : 		new.asm
    5 00:081D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:081D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:081D -  -  -  -  ;		Reviewed :	No
    8 00:081D -  -  -  -  ;		Purpose :	New command.
    9 00:081D -  -  -  -  ;
   10 00:081D -  -  -  -  ; ***************************************************************************************
   11 00:081D -  -  -  -  ; ***************************************************************************************
   12 00:081D -  -  -  -  
   13 00:081D -  -  -  -  ; ***************************************************************************************
   14 00:081D -  -  -  -  ;
   15 00:081D -  -  -  -  ;										NEW command
   16 00:081D -  -  -  -  ;
   17 00:081D -  -  -  -  ; ***************************************************************************************
   18 00:081D -  -  -  -  
   19 00:081D -  -  -  -  Command_NEW: 	;; [new]
   20 00:081D 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0821 36 00 -  -  		ld 		(hl),0
   22 00:0823 CD BF 07 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0827 3E 00 C3 9A 
              02 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:082D -  -  -  -  
   25 00:082D -  -  -  -  ; ***************************************************************************************
   26 00:082D -  -  -  -  ;
   27 00:082D -  -  -  -  ;									Changes and Updates
   28 00:082D -  -  -  -  ;
   29 00:082D -  -  -  -  ; ***************************************************************************************
   30 00:082D -  -  -  -  ;
   31 00:082D -  -  -  -  ;		Date			Notes
   32 00:082D -  -  -  -  ;		==== 			=====
   33 00:082D -  -  -  -  ;
   34 00:082D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:082D -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:082D -  -  -  -  ; ***************************************************************************************
    2 00:082D -  -  -  -  ; ***************************************************************************************
    3 00:082D -  -  -  -  ;
    4 00:082D -  -  -  -  ;		Name : 		utility.asm
    5 00:082D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:082D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:082D -  -  -  -  ;		Reviewed :	No
    8 00:082D -  -  -  -  ;		Purpose :	Utility routines
    9 00:082D -  -  -  -  ;
   10 00:082D -  -  -  -  ; ***************************************************************************************
   11 00:082D -  -  -  -  ; ***************************************************************************************
   12 00:082D -  -  -  -  
   13 00:082D -  -  -  -  ; ***************************************************************************************
   14 00:082D -  -  -  -  ;
   15 00:082D -  -  -  -  ;							Print ASCII string at HL
   16 00:082D -  -  -  -  ;
   17 00:082D -  -  -  -  ; ***************************************************************************************
   18 00:082D -  -  -  -  
   19 00:082D -  -  -  -  PrintStringAtHL:
   20 00:082D 7E -  -  -  		ld 		a,(hl)
   21 00:082E FE 20 -  -  		cp 		$20		
   22 00:0830 D8 -  -  -  		ret 	c
   23 00:0831 CD D8 0D 00 		call 	SYSPrintChar
   24 00:0835 23 -  -  -  		inc 	hl
   25 00:0836 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0838 -  -  -  -  
   27 00:0838 -  -  -  -  ; ***************************************************************************************
   28 00:0838 -  -  -  -  ;
   29 00:0838 -  -  -  -  ;									Changes and Updates
   30 00:0838 -  -  -  -  ;
   31 00:0838 -  -  -  -  ; ***************************************************************************************
   32 00:0838 -  -  -  -  ;
   33 00:0838 -  -  -  -  ;		Date			Notes
   34 00:0838 -  -  -  -  ;		==== 			=====
   35 00:0838 -  -  -  -  ;
   36 00:0838 -  -  -  -  ; ***************************************************************************************
   37 00:0838 -  -  -  -  		
Listing for file "_build.asm"
   53 00:0838 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0838 -  -  -  -  ; ***************************************************************************************
    2 00:0838 -  -  -  -  ; ***************************************************************************************
    3 00:0838 -  -  -  -  ;
    4 00:0838 -  -  -  -  ;		Name : 		create.asm
    5 00:0838 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0838 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0838 -  -  -  -  ;		Reviewed :	No
    8 00:0838 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0838 -  -  -  -  ;
   10 00:0838 -  -  -  -  ; ***************************************************************************************
   11 00:0838 -  -  -  -  ; ***************************************************************************************
   12 00:0838 -  -  -  -  
   13 00:0838 -  -  -  -  ; ***************************************************************************************
   14 00:0838 -  -  -  -  ;
   15 00:0838 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0838 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0838 -  -  -  -  ;
   18 00:0838 -  -  -  -  ; ***************************************************************************************
   19 00:0838 -  -  -  -  
   20 00:0838 -  -  -  -  VariableCreate:		
   21 00:0838 -  -  -  -  		;
   22 00:0838 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:0838 -  -  -  -  		;
   24 00:0838 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:083C 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:083D E5 -  -  -  		push 	hl 							; save count.
   27 00:083E CD A4 07 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0842 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0843 -  -  -  -  		;
   30 00:0843 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0843 -  -  -  -  		;
   32 00:0843 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0844 -  -  -  -  _VCClear:
   34 00:0844 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0846 23 -  -  -  		inc 	hl
   36 00:0847 0B -  -  -  		dec 	bc
   37 00:0848 78 -  -  -  		ld		a,b
   38 00:0849 B1 -  -  -  		or 		c
   39 00:084A 20 F8 -  -  		jr 		nz,_VCClear
   40 00:084C E1 -  -  -  		pop 	hl							; restore start address
   41 00:084D -  -  -  -  		;
   42 00:084D -  -  -  -  		;		Now start to create the data.
   43 00:084D -  -  -  -  		;
   44 00:084D E5 -  -  -  		push 	hl 							; save start
   45 00:084E -  -  -  -  		;
   46 00:084E -  -  -  -  		;		Write hash to +0
   47 00:084E -  -  -  -  		;
   48 00:084E 3A 82 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0852 77 -  -  -  		ld 		(hl),a
   50 00:0853 23 -  -  -  		inc 	hl
   51 00:0854 -  -  -  -  		;
   52 00:0854 -  -  -  -  		;		Write list head to +1
   53 00:0854 -  -  -  -  		;
   54 00:0854 E5 -  -  -  		push 	hl 							; save write position
   55 00:0855 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0859 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:085B EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:085C E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:085D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0863 -  -  -  -  		;
   61 00:0863 -  -  -  -  		;		Write variable name to +5
   62 00:0863 -  -  -  -  		;
   63 00:0863 ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:0868 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:086E -  -  -  -  		;
   66 00:086E D1 -  -  -  		pop 	de 							; get the start address back
   67 00:086F 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0873 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:0879 -  -  -  -  		;
   70 00:0879 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:087A C9 -  -  -  		ret
   72 00:087B -  -  -  -  
   73 00:087B -  -  -  -  ; ***************************************************************************************
   74 00:087B -  -  -  -  ;
   75 00:087B -  -  -  -  ;									Changes and Updates
   76 00:087B -  -  -  -  ;
   77 00:087B -  -  -  -  ; ***************************************************************************************
   78 00:087B -  -  -  -  ;
   79 00:087B -  -  -  -  ;		Date			Notes
   80 00:087B -  -  -  -  ;		==== 			=====
   81 00:087B -  -  -  -  ;
   82 00:087B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:087B -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:087B -  -  -  -  ; ***************************************************************************************
    2 00:087B -  -  -  -  ; ***************************************************************************************
    3 00:087B -  -  -  -  ;
    4 00:087B -  -  -  -  ;		Name : 		find.asm
    5 00:087B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:087B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:087B -  -  -  -  ;		Reviewed :	No
    8 00:087B -  -  -  -  ;		Purpose :	Find a variable.
    9 00:087B -  -  -  -  ;
   10 00:087B -  -  -  -  ; ***************************************************************************************
   11 00:087B -  -  -  -  ; ***************************************************************************************
   12 00:087B -  -  -  -  
   13 00:087B -  -  -  -  ; ***************************************************************************************
   14 00:087B -  -  -  -  ;
   15 00:087B -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:087B -  -  -  -  ; 		variable information at (IX)
   17 00:087B -  -  -  -  ;
   18 00:087B -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:087B -  -  -  -  ;		Don't autocreate arrays.
   20 00:087B -  -  -  -  ;
   21 00:087B -  -  -  -  ; ***************************************************************************************
   22 00:087B -  -  -  -  
   23 00:087B -  -  -  -  FindVariable:
   24 00:087B DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:087E FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0880 D2 04 03 00 		jp 		nc,SyntaxError 		
   27 00:0884 -  -  -  -  
   28 00:0884 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0887 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0889 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:088B FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:088D 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:088F -  -  -  -  		;
   34 00:088F -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:088F -  -  -  -  		;
   36 00:088F 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0893 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0896 87 -  -  -  		add 	a,a 						; x4
   39 00:0897 87 -  -  -  		add 	a,a
   40 00:0898 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0899 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:089A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:089C CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:089E DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:08A0 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:08A1 C9 -  -  -  		ret
   47 00:08A2 -  -  -  -  		;
   48 00:08A2 -  -  -  -  		;		Not a standard simple variable.
   49 00:08A2 -  -  -  -  		;
   50 00:08A2 -  -  -  -  _FVNotSimple:
   51 00:08A2 CD D6 08 00 		call 	VariableInformation 		; get information about the variable.
   52 00:08A6 CD 12 09 00 		call 	VariableSearchList 			; search the linked list
   53 00:08AA 38 0B -  -  		jr 		c,_FVNotFound  				
   54 00:08AC -  -  -  -  		;
   55 00:08AC -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:08AC -  -  -  -  		;
   57 00:08AC -  -  -  -  _FVExitReference:		
   58 00:08AC 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:08B0 19 -  -  -  		add 	hl,de 
   60 00:08B1 -  -  -  -  		;
   61 00:08B1 -  -  -  -  		; 		TODO: Array check code.
   62 00:08B1 -  -  -  -  		;
   63 00:08B1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:08B3 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:08B5 AF -  -  -  		xor 	a 							; clear carry and return
   66 00:08B6 C9 -  -  -  		ret
   67 00:08B7 -  -  -  -  		;
   68 00:08B7 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:08B7 -  -  -  -  		;
   70 00:08B7 -  -  -  -  _FVNotFound:		
   71 00:08B7 3A 7C 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:08BB B7 -  -  -  		or 		a
   73 00:08BC 28 11 -  -  		jr 		z,_FVFail
   74 00:08BE DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:08C1 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:08C3 28 0A -  -  		jr 		z,_FVFail
   77 00:08C5 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 00:08C9 CD 38 08 00 		call 	VariableCreate 				; create a new variable.
   79 00:08CD 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:08CF -  -  -  -  
   81 00:08CF -  -  -  -  _FVFail:
   82 00:08CF DD 2A 7E 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:08D4 37 -  -  -  		scf
   84 00:08D5 C9 -  -  -  		ret
   85 00:08D6 -  -  -  -  
   86 00:08D6 -  -  -  -  ; ***************************************************************************************
   87 00:08D6 -  -  -  -  ;
   88 00:08D6 -  -  -  -  ;									Changes and Updates
   89 00:08D6 -  -  -  -  ;
   90 00:08D6 -  -  -  -  ; ***************************************************************************************
   91 00:08D6 -  -  -  -  ;
   92 00:08D6 -  -  -  -  ;		Date			Notes
   93 00:08D6 -  -  -  -  ;		==== 			=====
   94 00:08D6 -  -  -  -  ;
   95 00:08D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:08D6 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:08D6 -  -  -  -  ; ***************************************************************************************
    2 00:08D6 -  -  -  -  ; ***************************************************************************************
    3 00:08D6 -  -  -  -  ;
    4 00:08D6 -  -  -  -  ;		Name : 		info.asm
    5 00:08D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08D6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:08D6 -  -  -  -  ;		Reviewed :	No
    8 00:08D6 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:08D6 -  -  -  -  ;
   10 00:08D6 -  -  -  -  ; ***************************************************************************************
   11 00:08D6 -  -  -  -  ; ***************************************************************************************
   12 00:08D6 -  -  -  -  
   13 00:08D6 -  -  -  -  ; ***************************************************************************************
   14 00:08D6 -  -  -  -  ;
   15 00:08D6 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:08D6 -  -  -  -  ; 		after the identifier.
   17 00:08D6 -  -  -  -  ;
   18 00:08D6 -  -  -  -  ; ***************************************************************************************
   19 00:08D6 -  -  -  -  
   20 00:08D6 -  -  -  -  VariableInformation:
   21 00:08D6 DD 22 7E 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:08DB -  -  -  -  		;
   23 00:08DB -  -  -  -  		; 		Calculate hash, find end.
   24 00:08DB -  -  -  -  		;
   25 00:08DB 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:08DD -  -  -  -  _VICalculateHash:
   27 00:08DD DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:08E0 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:08E2 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:08E4 80 -  -  -  		add 	a,b 						; add to hash
   31 00:08E5 07 -  -  -  		rlca
   32 00:08E6 07 -  -  -  		rlca
   33 00:08E7 80 -  -  -  		add 	a,b
   34 00:08E8 47 -  -  -  		ld 		b,a 						; update hash
   35 00:08E9 DD 23 -  -  		inc 	ix 							; next character
   36 00:08EB 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:08ED -  -  -  -  		;
   38 00:08ED -  -  -  -  _VIHashDone:
   39 00:08ED 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:08EE -  -  -  -  		;
   41 00:08EE -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:08EE -  -  -  -  		;
   43 00:08EE 32 82 00 00 		ld 		(VarHash),a
   44 00:08F2 -  -  -  -  		;
   45 00:08F2 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:08F2 -  -  -  -  		;		
   47 00:08F2 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:08F4 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:08F8 6F -  -  -  		ld 		l,a
   50 00:08F9 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:08FA 29 -  -  -  		add 	hl,hl
   52 00:08FB -  -  -  -  		;
   53 00:08FB ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0900 19 -  -  -  		add 	hl,de
   55 00:0901 -  -  -  -  		;
   56 00:0901 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0904 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0906 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0908 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:090C 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:090D -  -  -  -  _VINotArray:
   62 00:090D 22 84 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0911 C9 -  -  -  		ret
   64 00:0912 -  -  -  -  
   65 00:0912 -  -  -  -  ; ***************************************************************************************
   66 00:0912 -  -  -  -  ;
   67 00:0912 -  -  -  -  ;									Changes and Updates
   68 00:0912 -  -  -  -  ;
   69 00:0912 -  -  -  -  ; ***************************************************************************************
   70 00:0912 -  -  -  -  ;
   71 00:0912 -  -  -  -  ;		Date			Notes
   72 00:0912 -  -  -  -  ;		==== 			=====
   73 00:0912 -  -  -  -  ;
   74 00:0912 -  -  -  -  ; ***************************************************************************************
   75 00:0912 -  -  -  -  
Listing for file "_build.asm"
   56 00:0912 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0912 -  -  -  -  ; ***************************************************************************************
    2 00:0912 -  -  -  -  ; ***************************************************************************************
    3 00:0912 -  -  -  -  ;
    4 00:0912 -  -  -  -  ;		Name : 		search.asm
    5 00:0912 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0912 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0912 -  -  -  -  ;		Reviewed :	No
    8 00:0912 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0912 -  -  -  -  ;
   10 00:0912 -  -  -  -  ; ***************************************************************************************
   11 00:0912 -  -  -  -  ; ***************************************************************************************
   12 00:0912 -  -  -  -  
   13 00:0912 -  -  -  -  ; ***************************************************************************************
   14 00:0912 -  -  -  -  ;
   15 00:0912 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0912 -  -  -  -  ;		CS if failed.
   17 00:0912 -  -  -  -  ;
   18 00:0912 -  -  -  -  ; ***************************************************************************************
   19 00:0912 -  -  -  -  
   20 00:0912 -  -  -  -  VariableSearchList:
   21 00:0912 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0916 -  -  -  -  		;
   23 00:0916 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0916 -  -  -  -  		;		the address of the hash record
   25 00:0916 -  -  -  -  		;
   26 00:0916 -  -  -  -  _VSLLoop:
   27 00:0916 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0918 -  -  -  -  		;
   29 00:0918 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0919 AF -  -  -  		xor 	a
   31 00:091A ED 6A -  -  		adc 	hl,hl
   32 00:091C E1 -  -  -  		pop 	hl
   33 00:091D 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:091F 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0920 C8 -  -  -  		ret 	z
   36 00:0921 -  -  -  -  _VSLRecord:
   37 00:0921 -  -  -  -  		;
   38 00:0921 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0921 -  -  -  -  		;
   40 00:0921 3A 82 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0925 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0926 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0927 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0929 -  -  -  -  		;
   45 00:0929 -  -  -  -  		;		Now check the name
   46 00:0929 -  -  -  -  		;
   47 00:0929 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:092A 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:092B 23 -  -  -  		inc 	hl
   50 00:092C 23 -  -  -  		inc 	hl
   51 00:092D 23 -  -  -  		inc 	hl
   52 00:092E ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0930 ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0935 -  -  -  -  		;
   55 00:0935 -  -  -  -  		;		Check individual characters
   56 00:0935 -  -  -  -  		;
   57 00:0935 -  -  -  -  _VSLCharacter:
   58 00:0935 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0936 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0938 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:093A BE -  -  -  		cp 		(hl) 						; compare them
   62 00:093B 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:093C 13 -  -  -  		inc 	de
   64 00:093D 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:093F -  -  -  -  		;
   66 00:093F -  -  -  -  _VSLFailed:
   67 00:093F E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0940 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0942 -  -  -  -  		;
   70 00:0942 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0942 -  -  -  -  		;		
   72 00:0942 -  -  -  -  _VSLEndIdentifier:
   73 00:0942 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0943 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0945 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0947 -  -  -  -  		;
   77 00:0947 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0948 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0949 AF -  -  -  		xor 	a 							; clear carry
   80 00:094A C9 -  -  -  		ret
   81 00:094B -  -  -  -  
   82 00:094B -  -  -  -  ; ***************************************************************************************
   83 00:094B -  -  -  -  ;
   84 00:094B -  -  -  -  ;									Changes and Updates
   85 00:094B -  -  -  -  ;
   86 00:094B -  -  -  -  ; ***************************************************************************************
   87 00:094B -  -  -  -  ;
   88 00:094B -  -  -  -  ;		Date			Notes
   89 00:094B -  -  -  -  ;		==== 			=====
   90 00:094B -  -  -  -  ;
   91 00:094B -  -  -  -  ; ***************************************************************************************
   92 00:094B -  -  -  -  		
Listing for file "_build.asm"
   57 00:094B -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:094B -  -  -  -  ;
    2 00:094B -  -  -  -  ;	This file is automatically generated.
    3 00:094B -  -  -  -  ;
    4 00:094B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:0960 -  -  -  -  PrecedenceTable:
    6 00:0960 06 -  -  -  	.db	6	; $0083 !
    7 00:0961 06 -  -  -  	.db	6	; $0084 ?
    8 00:0962 05 -  -  -  	.db	5	; $0085 *
    9 00:0963 05 -  -  -  	.db	5	; $0086 /
   10 00:0964 05 -  -  -  	.db	5	; $0087 mod
   11 00:0965 05 -  -  -  	.db	5	; $0088 div
   12 00:0966 04 -  -  -  	.db	4	; $0089 +
   13 00:0967 04 -  -  -  	.db	4	; $008a -
   14 00:0968 03 -  -  -  	.db	3	; $008b >=
   15 00:0969 03 -  -  -  	.db	3	; $008c <=
   16 00:096A 03 -  -  -  	.db	3	; $008d >
   17 00:096B 03 -  -  -  	.db	3	; $008e <
   18 00:096C 03 -  -  -  	.db	3	; $008f =
   19 00:096D 03 -  -  -  	.db	3	; $0090 <>
   20 00:096E 02 -  -  -  	.db	2	; $0091 and
   21 00:096F 01 -  -  -  	.db	1	; $0092 or
   22 00:0970 01 -  -  -  	.db	1	; $0093 eor
   23 00:0971 -  -  -  -  
Listing for file "_build.asm"
   58 00:0971 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0971 -  -  -  -  ;
    2 00:0971 -  -  -  -  ;	This is automatically generated.
    3 00:0971 -  -  -  -  ;
    4 00:0971 -  -  -  -  ErrorIDTable:
    5 00:0971 B1 09 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0975 B7 09 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0979 C8 09 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:097D D6 09 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0981 E0 09 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0985 FA 09 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0989 0B 0A 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:098D 19 0A 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0991 27 0A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:0995 31 0A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:0999 46 0A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:099D 5C 0A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:09A1 6A 0A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:09A5 6F 0A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:09A9 7C 0A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:09AD 8D 0A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:09B1 -  -  -  -  
   22 00:09B1 -  -  -  -  ErrText_warmstart:
   23 00:09B1 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:09B7 -  -  -  -  ErrText_assert:
   25 00:09B7 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:09C8 -  -  -  -  ErrText_badtype:
   27 00:09C8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:09D6 -  -  -  -  ErrText_badvalue:
   29 00:09D6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:09E0 -  -  -  -  ErrText_disabled:
   31 00:09E0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:09FA -  -  -  -  ErrText_divzero:
   33 00:09FA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:0A0B -  -  -  -  ErrText_memory:
   35 00:0A0B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:0A19 -  -  -  -  ErrText_nocomma:
   37 00:0A19 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:0A27 -  -  -  -  ErrText_nodollar:
   39 00:0A27 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:0A31 -  -  -  -  ErrText_nolbracket:
   41 00:0A31 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:0A46 -  -  -  -  ErrText_norbracket:
   43 00:0A46 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:0A5C -  -  -  -  ErrText_notref:
   45 00:0A5C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:0A6A -  -  -  -  ErrText_stop:
   47 00:0A6A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:0A6F -  -  -  -  ErrText_syntax:
   49 00:0A6F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:0A7C -  -  -  -  ErrText_todo:
   51 00:0A7C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:0A8D -  -  -  -  ErrText_unknownvar:
   53 00:0A8D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:0A9E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0A9E -  -  -  -  ;
    2 00:0A9E -  -  -  -  ;	Vectors for set 0
    3 00:0A9E -  -  -  -  ;
    4 00:0A9E -  -  -  -  VectorsSet0:
    5 00:0A9E FE 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0AA2 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0AA6 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0AAA 7A 03 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0AAE 83 03 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0AB2 26 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0AB6 34 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0ABA 42 03 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0ABE 34 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0AC2 0A 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0AC6 18 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0ACA E1 03 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0ACE D7 03 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0AD2 C3 03 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0AD6 B9 03 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0ADA AF 03 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0ADE CD 03 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0AE2 50 03 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0AE6 5E 03 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0AEA 6C 03 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0AEE 53 07 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0AF2 4B 07 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0AF6 6D 06 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0AFA 9A 06 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0AFE 5C 06 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0B02 32 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0B06 31 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0B0A 62 07 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0B0E 48 06 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0B12 3F 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0B16 78 06 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0B1A 8D 06 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0B1E 7B 07 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0B22 82 07 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0B26 8F 07 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0B2A A1 03 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0B2E A5 03 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0B32 EB 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0B36 EB 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0B3A EF 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0B3E EB 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0B42 C0 01 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0B46 24 00 00 00 	addr(Unimplemented)              ; $00aa repeat
   48 00:0B4A 24 00 00 00 	addr(Unimplemented)              ; $00ab until
   49 00:0B4E 24 00 00 00 	addr(Unimplemented)              ; $00ac if
   50 00:0B52 EB 00 00 00 	addr(BadCmd_Then)                ; $00ad then
   51 00:0B56 24 00 00 00 	addr(Unimplemented)              ; $00ae else
   52 00:0B5A 24 00 00 00 	addr(Unimplemented)              ; $00af for
   53 00:0B5E EB 00 00 00 	addr(BadCmd_To)                  ; $00b0 to
   54 00:0B62 24 00 00 00 	addr(Unimplemented)              ; $00b1 step
   55 00:0B66 24 00 00 00 	addr(Unimplemented)              ; $00b2 next
   56 00:0B6A 24 00 00 00 	addr(Unimplemented)              ; $00b3 def
   57 00:0B6E 24 00 00 00 	addr(Unimplemented)              ; $00b4 proc
   58 00:0B72 24 00 00 00 	addr(Unimplemented)              ; $00b5 endproc
   59 00:0B76 24 00 00 00 	addr(Unimplemented)              ; $00b6 gosub
   60 00:0B7A 24 00 00 00 	addr(Unimplemented)              ; $00b7 return
   61 00:0B7E 24 00 00 00 	addr(Unimplemented)              ; $00b8 goto
   62 00:0B82 24 00 00 00 	addr(Unimplemented)              ; $00b9 local
   63 00:0B86 F0 00 00 00 	addr(Command_DIM)                ; $00ba dim
   64 00:0B8A C0 01 00 00 	addr(Command_REM)                ; $00bb rem
   65 00:0B8E 15 01 00 00 	addr(Command_LET)                ; $00bc let
   66 00:0B92 24 00 00 00 	addr(Unimplemented)              ; $00bd vdu
   67 00:0B96 69 01 00 00 	addr(Command_PRINT)              ; $00be print
   68 00:0B9A 24 00 00 00 	addr(Unimplemented)              ; $00bf load
   69 00:0B9E 24 00 00 00 	addr(Unimplemented)              ; $00c0 save
   70 00:0BA2 24 00 00 00 	addr(Unimplemented)              ; $00c1 list
   71 00:0BA6 1D 08 00 00 	addr(Command_NEW)                ; $00c2 new
   72 00:0BAA DD 01 00 00 	addr(Command_RUN)                ; $00c3 run
   73 00:0BAE 24 00 00 00 	addr(Unimplemented)              ; $00c4 read
   74 00:0BB2 24 00 00 00 	addr(Unimplemented)              ; $00c5 data
   75 00:0BB6 24 00 00 00 	addr(Unimplemented)              ; $00c6 restore
   76 00:0BBA DA 00 00 00 	addr(Command_ASSERT)             ; $00c7 assert
   77 00:0BBE BF 07 00 00 	addr(Command_CLEAR)              ; $00c8 clear
   78 00:0BC2 F8 00 00 00 	addr(Command_END)                ; $00c9 end
   79 00:0BC6 50 02 00 00 	addr(Command_STOP)               ; $00ca stop
   80 00:0BCA -  -  -  -  ;
   81 00:0BCA -  -  -  -  ;	Vectors for set 1
   82 00:0BCA -  -  -  -  ;
   83 00:0BCA -  -  -  -  VectorsSet1:
   84 00:0BCA -  -  -  -  ;
   85 00:0BCA -  -  -  -  ;	Vectors for set 2
   86 00:0BCA -  -  -  -  ;
   87 00:0BCA -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:0BCA -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0BCA -  -  -  -  ; ***************************************************************************************
    2 00:0BCA -  -  -  -  ; ***************************************************************************************
    3 00:0BCA -  -  -  -  ;
    4 00:0BCA -  -  -  -  ;		Name : 		idivide.asm
    5 00:0BCA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BCA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BCA -  -  -  -  ;		Reviewed :	No
    8 00:0BCA -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0BCA -  -  -  -  ;
   10 00:0BCA -  -  -  -  ; ***************************************************************************************
   11 00:0BCA -  -  -  -  ; ***************************************************************************************
   12 00:0BCA -  -  -  -  
   13 00:0BCA -  -  -  -  ; ***************************************************************************************
   14 00:0BCA -  -  -  -  ;
   15 00:0BCA -  -  -  -  ;								Unsigned integer divide
   16 00:0BCA -  -  -  -  ;
   17 00:0BCA -  -  -  -  ; ***************************************************************************************
   18 00:0BCA -  -  -  -  
   19 00:0BCA -  -  -  -  Int32UDivide:
   20 00:0BCA 37 -  -  -  		scf
   21 00:0BCB C3 0F 0C 00 		jp 		_I32UnsignedDivide		
   22 00:0BCF -  -  -  -  
   23 00:0BCF -  -  -  -  ; ***************************************************************************************
   24 00:0BCF -  -  -  -  ;
   25 00:0BCF -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0BCF -  -  -  -  ;
   27 00:0BCF -  -  -  -  ; ***************************************************************************************
   28 00:0BCF -  -  -  -  
   29 00:0BCF -  -  -  -  Int32SDivide:
   30 00:0BCF 37 -  -  -  		scf
   31 00:0BD0 18 01 -  -  		jr 		_I32SDivide
   32 00:0BD2 -  -  -  -  Int32Modulus:
   33 00:0BD2 AF -  -  -  		xor 	a
   34 00:0BD3 -  -  -  -  _I32SDivide:
   35 00:0BD3 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0BD4 F5 -  -  -  		push 	af
   37 00:0BD5 08 -  -  -  		ex 		af,af'
   38 00:0BD6 -  -  -  -  
   39 00:0BD6 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0BD7 D9 -  -  -  		exx
   41 00:0BD8 D5 -  -  -  		push 	de
   42 00:0BD9 D9 -  -  -  		exx
   43 00:0BDA -  -  -  -  
   44 00:0BDA F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0BDB AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0BDC CD FC 0B 00 		call 	_I32CheckHLSignSwap
   47 00:0BE0 CD FC 0B 00 		call 	_I32CheckHLSignSwap
   48 00:0BE4 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0BE5 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0BE6 F5 -  -  -  		push 	af
   51 00:0BE7 CD 0F 0C 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0BEB F1 -  -  -  		pop 	af 							; get function back
   53 00:0BEC 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0BEE 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0BEF CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0BF1 C4 72 0D 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0BF5 -  -  -  -  _I32SDExit:
   58 00:0BF5 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0BF6 D1 -  -  -  		pop 	de
   60 00:0BF7 D9 -  -  -  		exx
   61 00:0BF8 D1 -  -  -  		pop 	de
   62 00:0BF9 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0BFA 08 -  -  -  		ex 		af,af'
   64 00:0BFB C9 -  -  -  		ret
   65 00:0BFC -  -  -  -  
   66 00:0BFC -  -  -  -  
   67 00:0BFC -  -  -  -  _I32CheckHLSignSwap:
   68 00:0BFC D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0BFD CB 7C -  -  		bit 	7,h
   70 00:0BFF D9 -  -  -  		exx
   71 00:0C00 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0C02 -  -  -  -  		;
   73 00:0C02 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0C04 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0C05 CD 72 0D 00 		call 	Int32Negate 				
   76 00:0C09 F1 -  -  -  		pop 	af
   77 00:0C0A -  -  -  -  _I32CHSPositive:
   78 00:0C0A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0C0B EB -  -  -  		ex 		de,hl
   80 00:0C0C D9 -  -  -  		exx		
   81 00:0C0D EB -  -  -  		ex 		de,hl
   82 00:0C0E C9 -  -  -  		ret
   83 00:0C0F -  -  -  -  
   84 00:0C0F -  -  -  -  ; ***************************************************************************************
   85 00:0C0F -  -  -  -  ;
   86 00:0C0F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0C0F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0C0F -  -  -  -  ;
   89 00:0C0F -  -  -  -  ; ***************************************************************************************
   90 00:0C0F -  -  -  -  
   91 00:0C0F -  -  -  -  _I32UnsignedDivide:
   92 00:0C0F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0C10 D5 -  -  -  		push 	de
   94 00:0C11 D9 -  -  -  		exx
   95 00:0C12 C5 -  -  -  		push 	bc
   96 00:0C13 D5 -  -  -  		push 	de 							
   97 00:0C14 D9 -  -  -  		exx
   98 00:0C15 -  -  -  -  
   99 00:0C15 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0C16 -  -  -  -  
  101 00:0C16 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0C17 B3 -  -  -  		or 		e
  103 00:0C18 D9 -  -  -  		exx
  104 00:0C19 B2 -  -  -  		or 		d
  105 00:0C1A B3 -  -  -  		or 		e
  106 00:0C1B D9 -  -  -  		exx
  107 00:0C1C CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0C20 -  -  -  -  
  109 00:0C20 -  -  -  -  
  110 00:0C20 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0C21 4D -  -  -  		ld		c,l
  112 00:0C22 21 00 00 00 		ld 		hl,$0000
  113 00:0C26 D9 -  -  -  		exx
  114 00:0C27 44 -  -  -  		ld 		b,h
  115 00:0C28 4D -  -  -  		ld		c,l
  116 00:0C29 21 00 00 00 		ld 		hl,$0000
  117 00:0C2D D9 -  -  -  		exx
  118 00:0C2E -  -  -  -  
  119 00:0C2E 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0C30 -  -  -  -  _I32DivideLoop:
  121 00:0C30 F5 -  -  -  		push 	af
  122 00:0C31 -  -  -  -  
  123 00:0C31 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0C33 CB 10 -  -  		rl 		b
  125 00:0C35 D9 -  -  -  		exx
  126 00:0C36 CB 11 -  -  		rl 		c
  127 00:0C38 CB 10 -  -  		rl 		b
  128 00:0C3A D9 -  -  -  		exx
  129 00:0C3B CB 15 -  -  		rl 		l
  130 00:0C3D CB 14 -  -  		rl 		h
  131 00:0C3F D9 -  -  -  		exx
  132 00:0C40 CB 15 -  -  		rl 		l
  133 00:0C42 CB 14 -  -  		rl 		h
  134 00:0C44 D9 -  -  -  		exx
  135 00:0C45 -  -  -  -  
  136 00:0C45 CD 10 0D 00 		call 	Int32Subtract 				; A = A - M
  137 00:0C49 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0C4B -  -  -  -  
  139 00:0C4B 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0C4C 18 04 -  -  		jr 		_I32Next
  141 00:0C4E -  -  -  -  
  142 00:0C4E -  -  -  -  _I32Borrow:
  143 00:0C4E CD 08 0D 00 		call 	Int32Add 					; A = A + M
  144 00:0C52 -  -  -  -  _I32Next:
  145 00:0C52 F1 -  -  -  		pop 	af
  146 00:0C53 3D -  -  -  		dec 	a
  147 00:0C54 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0C56 -  -  -  -  
  149 00:0C56 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0C57 -  -  -  -  
  151 00:0C57 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0C58 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0C5A -  -  -  -  
  154 00:0C5A 60 -  -  -  		ld  	h,b
  155 00:0C5B 69 -  -  -  		ld 		l,c
  156 00:0C5C D9 -  -  -  		exx
  157 00:0C5D 60 -  -  -  		ld  	h,b
  158 00:0C5E 69 -  -  -  		ld 		l,c
  159 00:0C5F D9 -  -  -  		exx
  160 00:0C60 -  -  -  -  _I32Modulus1:		
  161 00:0C60 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0C61 D1 -  -  -  		pop 	de
  163 00:0C62 C1 -  -  -  		pop 	bc
  164 00:0C63 D9 -  -  -  		exx
  165 00:0C64 D1 -  -  -  		pop 	de
  166 00:0C65 C1 -  -  -  		pop 	bc
  167 00:0C66 C9 -  -  -  		ret
  168 00:0C67 -  -  -  -  
  169 00:0C67 -  -  -  -  ; ***************************************************************************************
  170 00:0C67 -  -  -  -  ;
  171 00:0C67 -  -  -  -  ;									Changes and Updates
  172 00:0C67 -  -  -  -  ;
  173 00:0C67 -  -  -  -  ; ***************************************************************************************
  174 00:0C67 -  -  -  -  ;
  175 00:0C67 -  -  -  -  ;		Date			Notes
  176 00:0C67 -  -  -  -  ;		==== 			=====
  177 00:0C67 -  -  -  -  ;
  178 00:0C67 -  -  -  -  ; ***************************************************************************************
  179 00:0C67 -  -  -  -  		
Listing for file "_build.asm"
   61 00:0C67 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0C67 -  -  -  -  ; ***************************************************************************************
    2 00:0C67 -  -  -  -  ; ***************************************************************************************
    3 00:0C67 -  -  -  -  ;
    4 00:0C67 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0C67 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C67 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C67 -  -  -  -  ;		Reviewed :	No
    8 00:0C67 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0C67 -  -  -  -  ;
   10 00:0C67 -  -  -  -  ; ***************************************************************************************
   11 00:0C67 -  -  -  -  ; ***************************************************************************************
   12 00:0C67 -  -  -  -  
   13 00:0C67 -  -  -  -  ; ***************************************************************************************
   14 00:0C67 -  -  -  -  ;
   15 00:0C67 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0C67 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0C67 -  -  -  -  ;
   18 00:0C67 -  -  -  -  ; ***************************************************************************************
   19 00:0C67 -  -  -  -  
   20 00:0C67 -  -  -  -  Int32FromString:
   21 00:0C67 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0C68 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0C69 D5 -  -  -  		push 	de
   24 00:0C6A D9 -  -  -  		exx
   25 00:0C6B D5 -  -  -  		push 	de
   26 00:0C6C -  -  -  -  
   27 00:0C6C 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0C70 11 00 00 00 		ld 		de,$0000
   29 00:0C74 D9 -  -  -  		exx
   30 00:0C75 21 00 00 00 		ld 		hl,$0000
   31 00:0C79 11 00 00 00 		ld 		de,$0000
   32 00:0C7D D9 -  -  -  		exx
   33 00:0C7E -  -  -  -  
   34 00:0C7E 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0C7F CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0C81 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0C83 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0C85 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0C86 -  -  -  -  		;
   40 00:0C86 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0C87 F5 -  -  -  		push 	af
   42 00:0C88 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0C8A 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0C8B 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0C8D 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0C8E 18 01 -  -  		jr 		_I32FSMain
   47 00:0C90 -  -  -  -  _I32FSNotSigned:		
   48 00:0C90 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0C91 -  -  -  -  		;
   50 00:0C91 -  -  -  -  		; 		Main conversion loop.
   51 00:0C91 -  -  -  -  		; 		
   52 00:0C91 -  -  -  -  _I32FSMain:		
   53 00:0C91 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0C92 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0C94 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0C96 D6 20 -  -  		sub 	32
   57 00:0C98 -  -  -  -  _I32FSNotLower:
   58 00:0C98 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0C9A 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0C9C FE 3A -  -  		cp 		'9'+1
   61 00:0C9E 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0CA0 FE 41 -  -  		cp 		'A'
   63 00:0CA2 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0CA4 FE 47 -  -  		cp 		'F'+1
   65 00:0CA6 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0CA8 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0CAA -  -  -  -  _I32FSOkay:
   68 00:0CAA D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0CAC BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0CAD 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0CAF 03 -  -  -  		inc 	bc 							; consume character
   72 00:0CB0 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0CB1 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0CB2 CD CF 0C 00 		call 	Int32Multiply 				; result *= base
   75 00:0CB6 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0CB7 5F -  -  -  		ld 		e,a
   77 00:0CB8 CD 08 0D 00 		call 	Int32Add 					; and add it.
   78 00:0CBC D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0CBD 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0CBF -  -  -  -  
   81 00:0CBF -  -  -  -  _I32FSExit:
   82 00:0CBF F1 -  -  -  		pop 	af 							; get sign back
   83 00:0CC0 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0CC2 CC 72 0D 00 		call 	z,Int32Negate
   85 00:0CC6 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0CC7 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0CC8 D9 -  -  -  		exx
   88 00:0CC9 D1 -  -  -  		pop 	de
   89 00:0CCA D9 -  -  -  		exx
   90 00:0CCB C1 -  -  -  		pop 	bc
   91 00:0CCC FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0CCE C9 -  -  -  		ret				
   93 00:0CCF -  -  -  -  
   94 00:0CCF -  -  -  -  ; ***************************************************************************************
   95 00:0CCF -  -  -  -  ;
   96 00:0CCF -  -  -  -  ;									Changes and Updates
   97 00:0CCF -  -  -  -  ;
   98 00:0CCF -  -  -  -  ; ***************************************************************************************
   99 00:0CCF -  -  -  -  ;
  100 00:0CCF -  -  -  -  ;		Date			Notes
  101 00:0CCF -  -  -  -  ;		==== 			=====
  102 00:0CCF -  -  -  -  ;
  103 00:0CCF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0CCF -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0CCF -  -  -  -  ; ***************************************************************************************
    2 00:0CCF -  -  -  -  ; ***************************************************************************************
    3 00:0CCF -  -  -  -  ;
    4 00:0CCF -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0CCF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CCF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CCF -  -  -  -  ;		Reviewed :	No
    8 00:0CCF -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0CCF -  -  -  -  ;
   10 00:0CCF -  -  -  -  ; ***************************************************************************************
   11 00:0CCF -  -  -  -  ; ***************************************************************************************
   12 00:0CCF -  -  -  -  
   13 00:0CCF -  -  -  -  Int32Multiply:
   14 00:0CCF C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0CD0 D5 -  -  -  		push 	de
   16 00:0CD1 44 -  -  -  		ld 		b,h
   17 00:0CD2 4D -  -  -  		ld 		c,l
   18 00:0CD3 21 00 00 00 		ld 		hl,$0000
   19 00:0CD7 -  -  -  -  
   20 00:0CD7 D9 -  -  -  		exx
   21 00:0CD8 C5 -  -  -  		push 	bc
   22 00:0CD9 D5 -  -  -  		push 	de
   23 00:0CDA 44 -  -  -  		ld 		b,h
   24 00:0CDB 4D -  -  -  		ld 		c,l
   25 00:0CDC 21 00 00 00 		ld 		hl,$0000		
   26 00:0CE0 D9 -  -  -  		exx
   27 00:0CE1 -  -  -  -  
   28 00:0CE1 -  -  -  -  _I32MultiplyLoop:
   29 00:0CE1 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0CE3 C4 08 0D 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0CE7 -  -  -  -  		;
   32 00:0CE7 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0CE8 CB 38 -  -  		srl 	b
   34 00:0CEA CB 19 -  -  		rr 		c
   35 00:0CEC D9 -  -  -  		exx
   36 00:0CED CB 18 -  -  		rr 		b
   37 00:0CEF CB 19 -  -  		rr 		c
   38 00:0CF1 -  -  -  -  		;
   39 00:0CF1 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0CF3 CB 12 -  -  		rl 		d
   41 00:0CF5 D9 -  -  -  		exx
   42 00:0CF6 CB 13 -  -  		rl 		e
   43 00:0CF8 CB 12 -  -  		rl 		d
   44 00:0CFA -  -  -  -  
   45 00:0CFA 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0CFB B1 -  -  -  		or 		c
   47 00:0CFC D9 -  -  -  		exx
   48 00:0CFD B0 -  -  -  		or 		b
   49 00:0CFE B1 -  -  -  		or 		c
   50 00:0CFF 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0D01 -  -  -  -  
   52 00:0D01 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0D02 D1 -  -  -  		pop 	de
   54 00:0D03 C1 -  -  -  		pop 	bc
   55 00:0D04 D9 -  -  -  		exx
   56 00:0D05 D1 -  -  -  		pop 	de
   57 00:0D06 C1 -  -  -  		pop 	bc
   58 00:0D07 C9 -  -  -  		ret
   59 00:0D08 -  -  -  -  
   60 00:0D08 -  -  -  -  ; ***************************************************************************************
   61 00:0D08 -  -  -  -  ;
   62 00:0D08 -  -  -  -  ;									Changes and Updates
   63 00:0D08 -  -  -  -  ;
   64 00:0D08 -  -  -  -  ; ***************************************************************************************
   65 00:0D08 -  -  -  -  ;
   66 00:0D08 -  -  -  -  ;		Date			Notes
   67 00:0D08 -  -  -  -  ;		==== 			=====
   68 00:0D08 -  -  -  -  ;
   69 00:0D08 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0D08 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0D08 -  -  -  -  ; ***************************************************************************************
    2 00:0D08 -  -  -  -  ; ***************************************************************************************
    3 00:0D08 -  -  -  -  ;
    4 00:0D08 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0D08 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D08 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D08 -  -  -  -  ;		Reviewed :	No
    8 00:0D08 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0D08 -  -  -  -  ;
   10 00:0D08 -  -  -  -  ; ***************************************************************************************
   11 00:0D08 -  -  -  -  ; ***************************************************************************************
   12 00:0D08 -  -  -  -  
   13 00:0D08 -  -  -  -  ; ***************************************************************************************
   14 00:0D08 -  -  -  -  ;
   15 00:0D08 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0D08 -  -  -  -  ;
   17 00:0D08 -  -  -  -  ; ***************************************************************************************
   18 00:0D08 -  -  -  -  
   19 00:0D08 -  -  -  -  Int32Add:
   20 00:0D08 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0D0A D9 -  -  -  		exx
   22 00:0D0B 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0D0E D9 -  -  -  		exx
   24 00:0D0F C9 -  -  -  		ret
   25 00:0D10 -  -  -  -  
   26 00:0D10 -  -  -  -  ; ***************************************************************************************
   27 00:0D10 -  -  -  -  ;
   28 00:0D10 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0D10 -  -  -  -  ;
   30 00:0D10 -  -  -  -  ; ***************************************************************************************
   31 00:0D10 -  -  -  -  
   32 00:0D10 -  -  -  -  Int32Subtract:
   33 00:0D10 AF -  -  -  		xor 	a 							; clear carry
   34 00:0D11 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0D14 D9 -  -  -  		exx
   36 00:0D15 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0D18 D9 -  -  -  		exx
   38 00:0D19 C9 -  -  -  		ret
   39 00:0D1A -  -  -  -  
   40 00:0D1A -  -  -  -  ; ***************************************************************************************
   41 00:0D1A -  -  -  -  ;
   42 00:0D1A -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0D1A -  -  -  -  ;
   44 00:0D1A -  -  -  -  ; ***************************************************************************************
   45 00:0D1A -  -  -  -  
   46 00:0D1A -  -  -  -  Int32And:
   47 00:0D1A D9 -  -  -  		exx
   48 00:0D1B CD 20 0D 00 		call 	_I32AndHLDE
   49 00:0D1F D9 -  -  -  		exx
   50 00:0D20 -  -  -  -  _I32AndHLDE:		
   51 00:0D20 7C -  -  -  		ld 		a,h
   52 00:0D21 A2 -  -  -  		and 	d
   53 00:0D22 67 -  -  -  		ld 		h,a
   54 00:0D23 7D -  -  -  		ld 		a,l
   55 00:0D24 A3 -  -  -  		and 	e
   56 00:0D25 6F -  -  -  		ld 		l,a
   57 00:0D26 C9 -  -  -  		ret
   58 00:0D27 -  -  -  -  
   59 00:0D27 -  -  -  -  ; ***************************************************************************************
   60 00:0D27 -  -  -  -  ;
   61 00:0D27 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0D27 -  -  -  -  ;
   63 00:0D27 -  -  -  -  ; ***************************************************************************************
   64 00:0D27 -  -  -  -  
   65 00:0D27 -  -  -  -  Int32Or:
   66 00:0D27 D9 -  -  -  		exx
   67 00:0D28 CD 2D 0D 00 		call 	_I32OrHLDE
   68 00:0D2C D9 -  -  -  		exx
   69 00:0D2D -  -  -  -  _I32OrHLDE:		
   70 00:0D2D 7C -  -  -  		ld 		a,h
   71 00:0D2E B2 -  -  -  		or 		d
   72 00:0D2F 67 -  -  -  		ld 		h,a
   73 00:0D30 7D -  -  -  		ld 		a,l
   74 00:0D31 B3 -  -  -  		or 		e
   75 00:0D32 6F -  -  -  		ld 		l,a
   76 00:0D33 C9 -  -  -  		ret
   77 00:0D34 -  -  -  -  
   78 00:0D34 -  -  -  -  ; ***************************************************************************************
   79 00:0D34 -  -  -  -  ;
   80 00:0D34 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0D34 -  -  -  -  ;
   82 00:0D34 -  -  -  -  ; ***************************************************************************************
   83 00:0D34 -  -  -  -  
   84 00:0D34 -  -  -  -  Int32Xor:
   85 00:0D34 D9 -  -  -  		exx
   86 00:0D35 CD 3A 0D 00 		call 	_I32XorHLDE
   87 00:0D39 D9 -  -  -  		exx
   88 00:0D3A -  -  -  -  _I32XorHLDE:		
   89 00:0D3A 7C -  -  -  		ld 		a,h
   90 00:0D3B AA -  -  -  		xor 	d
   91 00:0D3C 67 -  -  -  		ld 		h,a
   92 00:0D3D 7D -  -  -  		ld 		a,l
   93 00:0D3E AB -  -  -  		xor 	e
   94 00:0D3F 6F -  -  -  		ld 		l,a
   95 00:0D40 C9 -  -  -  		ret
   96 00:0D41 -  -  -  -  
   97 00:0D41 -  -  -  -  ; ***************************************************************************************
   98 00:0D41 -  -  -  -  ;
   99 00:0D41 -  -  -  -  ;								 Check if HL'HL zero
  100 00:0D41 -  -  -  -  ;
  101 00:0D41 -  -  -  -  ; ***************************************************************************************
  102 00:0D41 -  -  -  -  
  103 00:0D41 -  -  -  -  Int32Zero:
  104 00:0D41 D9 -  -  -  		exx
  105 00:0D42 7D -  -  -  		ld 		a,l
  106 00:0D43 B4 -  -  -  		or 		h
  107 00:0D44 D9 -  -  -  		exx
  108 00:0D45 B5 -  -  -  		or 		l
  109 00:0D46 B4 -  -  -  		or 		h
  110 00:0D47 C9 -  -  -  		ret
  111 00:0D48 -  -  -  -  
  112 00:0D48 -  -  -  -  ; ***************************************************************************************
  113 00:0D48 -  -  -  -  ;
  114 00:0D48 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0D48 -  -  -  -  ;
  116 00:0D48 -  -  -  -  ; ***************************************************************************************
  117 00:0D48 -  -  -  -  
  118 00:0D48 -  -  -  -  Int32Compare:
  119 00:0D48 E5 -  -  -  		push 	hl 							; save HL
  120 00:0D49 AF -  -  -  		xor 	a 							; clear carry
  121 00:0D4A 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0D4D D9 -  -  -  		exx
  123 00:0D4E E5 -  -  -  		push 	hl 							; save HL'
  124 00:0D4F 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0D52 -  -  -  -  		;
  126 00:0D52 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0D53 E2 5B 0D 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0D57 78 -  -  -  		ld 		a,b
  129 00:0D58 EE 80 -  -  		xor 	$80
  130 00:0D5A 47 -  -  -  		ld 		b,a
  131 00:0D5B -  -  -  -  _I32CNoOverflow:
  132 00:0D5B 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0D5C B5 -  -  -  		or 		l
  134 00:0D5D D9 -  -  -  		exx 
  135 00:0D5E B4 -  -  -  		or 		h
  136 00:0D5F B5 -  -  -  		or 		l
  137 00:0D60 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0D62 -  -  -  -  		;
  139 00:0D62 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0D63 CB 78 -  -  		bit 	7,b
  141 00:0D65 D9 -  -  -  		exx
  142 00:0D66 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0D68 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0D6A 3E FF -  -  		ld 		a,$FF
  145 00:0D6C -  -  -  -  _I32NotPos:
  146 00:0D6C D9 -  -  -  		exx
  147 00:0D6D E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0D6E D9 -  -  -  		exx
  149 00:0D6F E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0D70 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0D71 C9 -  -  -  		ret
  152 00:0D72 -  -  -  -  
  153 00:0D72 -  -  -  -  ; ***************************************************************************************
  154 00:0D72 -  -  -  -  ;
  155 00:0D72 -  -  -  -  ;										Negate HL'HL
  156 00:0D72 -  -  -  -  ;
  157 00:0D72 -  -  -  -  ; ***************************************************************************************
  158 00:0D72 -  -  -  -  
  159 00:0D72 -  -  -  -  Int32Negate:
  160 00:0D72 AF -  -  -  		xor 	a
  161 00:0D73 CD 7E 0D 00 		call 	_I32NSubtract
  162 00:0D77 D9 -  -  -  		exx
  163 00:0D78 CD 7E 0D 00 		call 	_I32NSubtract
  164 00:0D7C D9 -  -  -  		exx
  165 00:0D7D C9 -  -  -  		ret
  166 00:0D7E -  -  -  -  _I32NSubtract:
  167 00:0D7E D5 -  -  -  		push 	de
  168 00:0D7F EB -  -  -  		ex 		de,hl
  169 00:0D80 21 00 00 00 		ld 		hl,$0000
  170 00:0D84 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0D87 D1 -  -  -  		pop 	de
  172 00:0D88 C9 -  -  -  		ret
  173 00:0D89 -  -  -  -  		
  174 00:0D89 -  -  -  -  ; ***************************************************************************************
  175 00:0D89 -  -  -  -  ;
  176 00:0D89 -  -  -  -  ;									Changes and Updates
  177 00:0D89 -  -  -  -  ;
  178 00:0D89 -  -  -  -  ; ***************************************************************************************
  179 00:0D89 -  -  -  -  ;
  180 00:0D89 -  -  -  -  ;		Date			Notes
  181 00:0D89 -  -  -  -  ;		==== 			=====
  182 00:0D89 -  -  -  -  ;
  183 00:0D89 -  -  -  -  ; ***************************************************************************************
  184 00:0D89 -  -  -  -  		
Listing for file "_build.asm"
   64 00:0D89 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0D89 -  -  -  -  ; ***************************************************************************************
    2 00:0D89 -  -  -  -  ; ***************************************************************************************
    3 00:0D89 -  -  -  -  ;
    4 00:0D89 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0D89 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D89 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D89 -  -  -  -  ;		Reviewed :	No
    8 00:0D89 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0D89 -  -  -  -  ;
   10 00:0D89 -  -  -  -  ; ***************************************************************************************
   11 00:0D89 -  -  -  -  ;
   12 00:0D89 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0D89 -  -  -  -  ;
   14 00:0D89 -  -  -  -  ; ***************************************************************************************
   15 00:0D89 -  -  -  -  
   16 00:0D89 -  -  -  -  Int32ToString:
   17 00:0D89 C5 -  -  -  		push 	bc 							; save string start
   18 00:0D8A D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0D8B E5 -  -  -  		push 	hl
   20 00:0D8C 11 00 00 00 		ld	 	de,$0000
   21 00:0D90 D9 -  -  -  		exx
   22 00:0D91 D5 -  -  -  		push 	de
   23 00:0D92 E5 -  -  -  		push 	hl
   24 00:0D93 11 00 00 00 		ld 		de,$000
   25 00:0D97 D9 -  -  -  		exx
   26 00:0D98 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0D99 -  -  -  -  		;
   28 00:0D99 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0D9B 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0D9D ED 44 -  -  		neg 								; negate base and put in E
   31 00:0D9F 5F -  -  -  		ld 		e,a
   32 00:0DA0 -  -  -  -  		;
   33 00:0DA0 D9 -  -  -  		exx 								; is it -ve ?
   34 00:0DA1 CB 7C -  -  		bit 	7,h
   35 00:0DA3 D9 -  -  -  		exx
   36 00:0DA4 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0DA6 -  -  -  -  		;
   38 00:0DA6 CD 72 0D 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0DAA -  -  -  -  		;
   40 00:0DAA 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0DAC 02 -  -  -  		ld 		(bc),a
   42 00:0DAD 03 -  -  -  		inc 	bc
   43 00:0DAE -  -  -  -  _I32TSNotNegative:	
   44 00:0DAE CD BD 0D 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0DB2 -  -  -  -  _I32TSExit:
   46 00:0DB2 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0DB4 02 -  -  -  		ld 		(bc),a 
   48 00:0DB5 -  -  -  -  
   49 00:0DB5 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0DB6 E1 -  -  -  		pop 	hl
   51 00:0DB7 D1 -  -  -  		pop 	de
   52 00:0DB8 D9 -  -  -  		exx
   53 00:0DB9 E1 -  -  -  		pop 	hl
   54 00:0DBA D1 -  -  -  		pop 	de
   55 00:0DBB C1 -  -  -  		pop 	bc
   56 00:0DBC C9 -  -  -  		ret
   57 00:0DBD -  -  -  -  
   58 00:0DBD -  -  -  -  _I32RecursiveConvert:
   59 00:0DBD CD CA 0B 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0DC1 F5 -  -  -  		push 	af 							; save remainder
   61 00:0DC2 CD 41 0D 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0DC6 C4 BD 0D 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0DCA F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0DCB FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0DCD 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0DCF C6 07 -  -  		add 	a,7
   67 00:0DD1 -  -  -  -  _I32NotHex:
   68 00:0DD1 C6 30 -  -  		add 	a,48
   69 00:0DD3 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0DD4 03 -  -  -  		inc 	bc
   71 00:0DD5 C9 -  -  -  		ret		
   72 00:0DD6 -  -  -  -  
   73 00:0DD6 -  -  -  -  ; ***************************************************************************************
   74 00:0DD6 -  -  -  -  ;
   75 00:0DD6 -  -  -  -  ;									Changes and Updates
   76 00:0DD6 -  -  -  -  ;
   77 00:0DD6 -  -  -  -  ; ***************************************************************************************
   78 00:0DD6 -  -  -  -  ;
   79 00:0DD6 -  -  -  -  ;		Date			Notes
   80 00:0DD6 -  -  -  -  ;		==== 			=====
   81 00:0DD6 -  -  -  -  ;
   82 00:0DD6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0DD6 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0DD6 -  -  -  -  ; ***************************************************************************************
    2 00:0DD6 -  -  -  -  ; ***************************************************************************************
    3 00:0DD6 -  -  -  -  ;
    4 00:0DD6 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0DD6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DD6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DD6 -  -  -  -  ;		Reviewed :	No
    8 00:0DD6 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0DD6 -  -  -  -  ;
   10 00:0DD6 -  -  -  -  ; ***************************************************************************************
   11 00:0DD6 -  -  -  -  ; ***************************************************************************************
   12 00:0DD6 -  -  -  -  
   13 00:0DD6 -  -  -  -  #ifdef AQUARIUS
   14 00:0DD6             
   15 00:0DD6             ; ***************************************************************************************
   16 00:0DD6             ;
   17 00:0DD6             ;								Initialise system stuff
   18 00:0DD6             ;
   19 00:0DD6             ; ***************************************************************************************
   20 00:0DD6             
   21 00:0DD6             SYSInitialise:
   22 00:0DD6             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0DD6             	call 	SYSPrintChar
   24 00:0DD6             	ret
   25 00:0DD6             
   26 00:0DD6             ; ***************************************************************************************
   27 00:0DD6             ;
   28 00:0DD6             ;								Terminate system stuff
   29 00:0DD6             ;
   30 00:0DD6             ; ***************************************************************************************
   31 00:0DD6             
   32 00:0DD6             SYSTerminate:
   33 00:0DD6             	jr 		SYSTerminate
   34 00:0DD6             
   35 00:0DD6             ; ***************************************************************************************
   36 00:0DD6             ;
   37 00:0DD6             ;								Print A character
   38 00:0DD6             ;
   39 00:0DD6             ; ***************************************************************************************
   40 00:0DD6             
   41 00:0DD6             SYSPrintChar:
   42 00:0DD6             	push 	af 									; we stack everything including alt registers
   43 00:0DD6             	push 	bc
   44 00:0DD6             	push 	de
   45 00:0DD6             	push 	hl
   46 00:0DD6             	push 	ix
   47 00:0DD6             	push 	iy
   48 00:0DD6             	exx
   49 00:0DD6             	push 	bc
   50 00:0DD6             	push 	de
   51 00:0DD6             	push 	hl
   52 00:0DD6             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0DD6             	pop 	hl
   54 00:0DD6             	pop 	de
   55 00:0DD6             	pop 	bc
   56 00:0DD6             	exx
   57 00:0DD6             	pop 	iy
   58 00:0DD6             	pop 	ix
   59 00:0DD6             	pop 	hl
   60 00:0DD6             	pop 	de
   61 00:0DD6             	pop 	bc
   62 00:0DD6             	pop 	af
   63 00:0DD6             	ret		
   64 00:0DD6             
   65 00:0DD6             ; ***************************************************************************************
   66 00:0DD6             ;
   67 00:0DD6             ;									Print Newline
   68 00:0DD6             ;
   69 00:0DD6             ; ***************************************************************************************
   70 00:0DD6             
   71 00:0DD6             SYSPrintCRLF:
   72 00:0DD6             	push 	af
   73 00:0DD6             	ld 		a,13
   74 00:0DD6             	call 	SYSPrintChar
   75 00:0DD6             	ld 		a,10
   76 00:0DD6             	call 	SYSPrintChar
   77 00:0DD6             	pop 	af
   78 00:0DD6             	ret
   79 00:0DD6             
   80 00:0DD6             ; ***************************************************************************************
   81 00:0DD6             ;
   82 00:0DD6             ;									Get time into HL'HL
   83 00:0DD6             ;
   84 00:0DD6             ; ***************************************************************************************
   85 00:0DD6             
   86 00:0DD6             SYSGetTimer:
   87 00:0DD6              	in 		a,($00)
   88 00:0DD6              	ld 		l,a
   89 00:0DD6              	in 		a,($01)
   90 00:0DD6              	ld 		h,a
   91 00:0DD6              	exx
   92 00:0DD6              	in 		a,($02)
   93 00:0DD6              	ld 		l,a
   94 00:0DD6              	in 		a,($03)
   95 00:0DD6              	ld 		h,a
   96 00:0DD6              	exx
   97 00:0DD6             	ret 	
   98 00:0DD6             	
   99 00:0DD6             #endif
  100 00:0DD6 -  -  -  -  
  101 00:0DD6 -  -  -  -  ; ***************************************************************************************
  102 00:0DD6 -  -  -  -  ;
  103 00:0DD6 -  -  -  -  ;									Changes and Updates
  104 00:0DD6 -  -  -  -  ;
  105 00:0DD6 -  -  -  -  ; ***************************************************************************************
  106 00:0DD6 -  -  -  -  ;
  107 00:0DD6 -  -  -  -  ;		Date			Notes
  108 00:0DD6 -  -  -  -  ;		==== 			=====
  109 00:0DD6 -  -  -  -  ;
  110 00:0DD6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0DD6 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0DD6 -  -  -  -  ; ***************************************************************************************
    2 00:0DD6 -  -  -  -  ; ***************************************************************************************
    3 00:0DD6 -  -  -  -  ;
    4 00:0DD6 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0DD6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DD6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DD6 -  -  -  -  ;		Reviewed :	No
    8 00:0DD6 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0DD6 -  -  -  -  ;
   10 00:0DD6 -  -  -  -  ; ***************************************************************************************
   11 00:0DD6 -  -  -  -  ; ***************************************************************************************
   12 00:0DD6 -  -  -  -  
   13 00:0DD6 -  -  -  -  #ifdef CLEANEZ80
   14 00:0DD6 -  -  -  -  
   15 00:0DD6 -  -  -  -  ; ***************************************************************************************
   16 00:0DD6 -  -  -  -  ;
   17 00:0DD6 -  -  -  -  ;								Initialise system stuff
   18 00:0DD6 -  -  -  -  ;
   19 00:0DD6 -  -  -  -  ; ***************************************************************************************
   20 00:0DD6 -  -  -  -  
   21 00:0DD6 -  -  -  -  SYSInitialise:
   22 00:0DD6 C9 -  -  -  	ret
   23 00:0DD7 -  -  -  -  
   24 00:0DD7 -  -  -  -  ; ***************************************************************************************
   25 00:0DD7 -  -  -  -  ;
   26 00:0DD7 -  -  -  -  ;								Terminate system stuff
   27 00:0DD7 -  -  -  -  ;
   28 00:0DD7 -  -  -  -  ; ***************************************************************************************
   29 00:0DD7 -  -  -  -  
   30 00:0DD7 -  -  -  -  SYSTerminate:
   31 00:0DD7 C9 -  -  -  	ret
   32 00:0DD8 -  -  -  -  
   33 00:0DD8 -  -  -  -  ; ***************************************************************************************
   34 00:0DD8 -  -  -  -  ;
   35 00:0DD8 -  -  -  -  ;								Print A character
   36 00:0DD8 -  -  -  -  ;
   37 00:0DD8 -  -  -  -  ; ***************************************************************************************
   38 00:0DD8 -  -  -  -  
   39 00:0DD8 -  -  -  -  SYSPrintChar:
   40 00:0DD8 C9 -  -  -  	ret		
   41 00:0DD9 -  -  -  -  
   42 00:0DD9 -  -  -  -  ; ***************************************************************************************
   43 00:0DD9 -  -  -  -  ;
   44 00:0DD9 -  -  -  -  ;									Print Newline
   45 00:0DD9 -  -  -  -  ;
   46 00:0DD9 -  -  -  -  ; ***************************************************************************************
   47 00:0DD9 -  -  -  -  
   48 00:0DD9 -  -  -  -  SYSPrintCRLF:
   49 00:0DD9 C9 -  -  -  	ret
   50 00:0DDA -  -  -  -  
   51 00:0DDA -  -  -  -  ; ***************************************************************************************
   52 00:0DDA -  -  -  -  ;
   53 00:0DDA -  -  -  -  ;									Get time into HL'HL
   54 00:0DDA -  -  -  -  ;
   55 00:0DDA -  -  -  -  ; ***************************************************************************************
   56 00:0DDA -  -  -  -  
   57 00:0DDA -  -  -  -  SYSGetTimer:
   58 00:0DDA C9 -  -  -  	ret
   59 00:0DDB -  -  -  -  
   60 00:0DDB -  -  -  -  #endif
   61 00:0DDB -  -  -  -  
   62 00:0DDB -  -  -  -  ; ***************************************************************************************
   63 00:0DDB -  -  -  -  ;
   64 00:0DDB -  -  -  -  ;									Changes and Updates
   65 00:0DDB -  -  -  -  ;
   66 00:0DDB -  -  -  -  ; ***************************************************************************************
   67 00:0DDB -  -  -  -  ;
   68 00:0DDB -  -  -  -  ;		Date			Notes
   69 00:0DDB -  -  -  -  ;		==== 			=====
   70 00:0DDB -  -  -  -  ;
   71 00:0DDB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0DDB -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0DDB -  -  -  -  ; ***************************************************************************************
    2 00:0DDB -  -  -  -  ; ***************************************************************************************
    3 00:0DDB -  -  -  -  ;
    4 00:0DDB -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0DDB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DDB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DDB -  -  -  -  ;		Reviewed :	No
    8 00:0DDB -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0DDB -  -  -  -  ;
   10 00:0DDB -  -  -  -  ; ***************************************************************************************
   11 00:0DDB -  -  -  -  ; ***************************************************************************************
   12 00:0DDB -  -  -  -  
   13 00:0DDB -  -  -  -  #ifdef TI84
   14 00:0DDB             
   15 00:0DDB             ; ***************************************************************************************
   16 00:0DDB             ;
   17 00:0DDB             ;								Initialise system stuff
   18 00:0DDB             ;
   19 00:0DDB             ; ***************************************************************************************
   20 00:0DDB             
   21 00:0DDB             SYSInitialise:
   22 00:0DDB             	di
   23 00:0DDB             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0DDB             	ld 		(_IYTemp84),iy
   25 00:0DDB             	ret
   26 00:0DDB             
   27 00:0DDB             ; ***************************************************************************************
   28 00:0DDB             ;
   29 00:0DDB             ;								Terminate system stuff
   30 00:0DDB             ;
   31 00:0DDB             ; ***************************************************************************************
   32 00:0DDB             
   33 00:0DDB             SYSTerminate:
   34 00:0DDB             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0DDB             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0DDB             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0DDB             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0DDB             	ei
   39 00:0DDB             	ret 										; and exit.
   40 00:0DDB             
   41 00:0DDB             _StackTemp84:									; temp var for TI84 only.
   42 00:0DDB             	.dw 	0,0
   43 00:0DDB             _IYTemp84:
   44 00:0DDB             	.dw 	0,0		
   45 00:0DDB             
   46 00:0DDB             ; ***************************************************************************************
   47 00:0DDB             ;
   48 00:0DDB             ;								Print A character
   49 00:0DDB             ;
   50 00:0DDB             ; ***************************************************************************************
   51 00:0DDB             
   52 00:0DDB             SYSPrintChar:
   53 00:0DDB             	push 	af 									; we stack everything including alt registers
   54 00:0DDB             	push 	bc
   55 00:0DDB             	push 	de
   56 00:0DDB             	push 	hl
   57 00:0DDB             	push 	ix
   58 00:0DDB             	push 	iy
   59 00:0DDB             	exx
   60 00:0DDB             	push 	bc
   61 00:0DDB             	push 	de
   62 00:0DDB             	push 	hl
   63 00:0DDB             
   64 00:0DDB             	ld 		iy,(_IYTemp84)
   65 00:0DDB             	call 	_PutC 								; print A as character
   66 00:0DDB             	di
   67 00:0DDB             	ld 		(_IYTemp84),iy
   68 00:0DDB             
   69 00:0DDB             	pop 	hl
   70 00:0DDB             	pop 	de
   71 00:0DDB             	pop 	bc
   72 00:0DDB             	exx
   73 00:0DDB             	pop 	iy
   74 00:0DDB             	pop 	ix
   75 00:0DDB             	pop 	hl
   76 00:0DDB             	pop 	de
   77 00:0DDB             	pop 	bc
   78 00:0DDB             	pop 	af
   79 00:0DDB             	ret		
   80 00:0DDB             
   81 00:0DDB             ; ***************************************************************************************
   82 00:0DDB             ;
   83 00:0DDB             ;									Print Newline
   84 00:0DDB             ;
   85 00:0DDB             ; ***************************************************************************************
   86 00:0DDB             
   87 00:0DDB             SYSPrintCRLF:
   88 00:0DDB             	push 	af 									; we stack everything including alt registers
   89 00:0DDB             	push 	bc
   90 00:0DDB             	push 	de
   91 00:0DDB             	push 	hl
   92 00:0DDB             	push 	ix
   93 00:0DDB             	push 	iy
   94 00:0DDB             	exx
   95 00:0DDB             	push 	bc
   96 00:0DDB             	push 	de
   97 00:0DDB             	push 	hl
   98 00:0DDB             
   99 00:0DDB             	ld 		iy,(_IYTemp84)
  100 00:0DDB             	call 	_newline
  101 00:0DDB             	di
  102 00:0DDB             	ld 		(_IYTemp84),iy
  103 00:0DDB             
  104 00:0DDB             	pop 	hl
  105 00:0DDB             	pop 	de
  106 00:0DDB             	pop 	bc
  107 00:0DDB             	exx
  108 00:0DDB             	pop 	iy
  109 00:0DDB             	pop 	ix
  110 00:0DDB             	pop 	hl
  111 00:0DDB             	pop 	de
  112 00:0DDB             	pop 	bc
  113 00:0DDB             	pop 	af
  114 00:0DDB             	ret
  115 00:0DDB             
  116 00:0DDB             ; ***************************************************************************************
  117 00:0DDB             ;
  118 00:0DDB             ;									Get time into HL'HL
  119 00:0DDB             ;
  120 00:0DDB             ; ***************************************************************************************
  121 00:0DDB             
  122 00:0DDB             SYSGetTimer:
  123 00:0DDB             	ld 		hl,$1234
  124 00:0DDB             	exx
  125 00:0DDB             	ld 		hl,$5678
  126 00:0DDB             	exx
  127 00:0DDB             	ret
  128 00:0DDB             
  129 00:0DDB             #endif
  130 00:0DDB -  -  -  -  
  131 00:0DDB -  -  -  -  ; ***************************************************************************************
  132 00:0DDB -  -  -  -  ;
  133 00:0DDB -  -  -  -  ;									Changes and Updates
  134 00:0DDB -  -  -  -  ;
  135 00:0DDB -  -  -  -  ; ***************************************************************************************
  136 00:0DDB -  -  -  -  ;
  137 00:0DDB -  -  -  -  ;		Date			Notes
  138 00:0DDB -  -  -  -  ;		==== 			=====
  139 00:0DDB -  -  -  -  ;
  140 00:0DDB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0DDB -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0DDB -  -  -  -  ; ***************************************************************************************
    2 00:0DDB -  -  -  -  ; ***************************************************************************************
    3 00:0DDB -  -  -  -  ;
    4 00:0DDB -  -  -  -  ;		Name : 		basic.asm
    5 00:0DDB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DDB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DDB -  -  -  -  ;		Reviewed :	No
    8 00:0DDB -  -  -  -  ;		Purpose :	Main program.
    9 00:0DDB -  -  -  -  ;
   10 00:0DDB -  -  -  -  ; ***************************************************************************************
   11 00:0DDB -  -  -  -  ; ***************************************************************************************
   12 00:0DDB -  -  -  -  
   13 00:0DDB 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 22 01 00 BB 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 13 02 
              00 BB 3F 0B 
              53 65 65 64 
              20 3D 20 32 
              36 32 34 0D 
              80 09 03 00 
              02 8F 8A 59 
              72 80 0B 04 
              00 03 1D 8F 
              8A 4D 60 62 
              80 0C 05 00 
              00 1B 21 8F 
              8A 53 6F 6F 
              80 0F 06 00 
              19 00 03 11 
              1B 0D 8F 8A 
              48 73 52 80 
              0E 07 00 00 
              21 1A 0A 03 
              8F 8A 58 53 
              6A 80 0A 08 
              00 13 8F 8A 
              52 63 46 80 
              0B 09 00 0F 
              14 20 8F 57 
              7C 4B 80 0C 
              0A 00 00 02 
              19 01 8F 41 
              7F 64 80 0F 
              0B 00 0E 18 
              18 21 00 0D 
              8F 8A 50 4B 
              49 80 0E 0C 
              00 05 10 12 
              10 24 8F 8A 
              4C 7E 6C 80 
              0B 0D 00 10 
              17 8F 8A 55 
              40 61 80 0E 
              0E 00 13 25 
              0F 22 1F 8F 
              8A 4F 42 70 
              80 0A 0F 00 
              0C 8F 8A 42 
              62 60 80 0E 
              10 00 12 07 
              18 22 08 25 
              8F 51 5C 41 
              80 0A 11 00 
              0E 1B 8F 4A 
              55 70 80 0B 
              12 00 0B 18 
              25 8F 54 4E 
              72 80 09 13 
              00 07 8F 4C 
              46 52 80 0F 
              14 00 01 18 
              22 25 0E 06 
              8F 8A 42 77 
              74 80 0D 15 
              00 0C 00 0C 
              1F 8F 8A 58 
              56 6C 80 0A 
              16 00 00 8F 
              8A 54 65 6B 
              80 0E 17 00 
              0E 0B 02 18 
              08 8F 8A 4C 
              67 40 80 0C 
              18 00 14 05 
              09 8F 8A 4B 
              6F 66 80 0A 
              19 00 0E 8F 
              8A 43 68 48 
              80 0B 1A 00 
              02 23 8F 8A 
              48 7E 4E 80 
              0E 1B 00 06 
              23 1F 10 1A 
              11 8F 4F 5D 
              59 80 0A 1C 
              00 0E 01 8F 
              55 40 58 80 
              0D 1D 00 0B 
              20 25 10 8F 
              8A 41 76 76 
              80 0D 1E 00 
              13 1B 00 1B 
              1F 8F 46 4D 
              62 80 0F 1F 
              00 17 13 01 
              02 17 12 8F 
              8A 51 43 7E 
              80 0C 20 00 
              13 0E 0D 8F 
              8A 4E 74 42 
              80 0F 21 00 
              06 06 21 06 
              1C 11 8F 8A 
              46 64 47 80 
              09 22 00 03 
              8F 51 4B 76 
              80 0E 23 00 
              05 19 15 1B 
              14 06 8F 4A 
              71 5B 80 0A 
              24 00 18 8F 
              8A 4A 53 49 
              80 0C 25 00 
              08 21 0A 03 
              8F 57 46 57 
              80 0D 26 00 
              0C 0F 02 05 
              0F 8F 43 67 
              71 80 09 27 
              00 06 8F 52 
              4A 5B 80 09 
              28 00 05 8F 
              51 6B 44 80 
              0E 29 00 0C 
              21 05 16 22 
              22 8F 54 63 
              4A 80 0C 2A 
              00 0B 11 10 
              8F 8A 4F 60 
              5E 80 0A 2B 
              00 07 8F 8A 
              56 61 54 80 
              0C 2C 00 14 
              05 09 8F 8A 
              41 47 5A 80 
              0D 2D 00 0C 
              00 0C 1F 8F 
              8A 56 77 64 
              80 0B 2E 00 
              0B 18 25 8F 
              42 67 78 80 
              09 2F 00 13 
              8F 42 7E 43 
              80 0F 30 00 
              12 07 18 22 
              08 25 8F 8A 
              56 78 74 80 
              0E 31 00 13 
              1B 00 1B 1F 
              8F 8A 46 6A 
              7C 80 0E 32 
              00 06 23 1F 
              10 1A 11 8F 
              46 6F 52 80 
              09 33 00 0C 
              8F 8A 5C 6B 
              80 0A 34 00 
              06 8F 8A 43 
              7D 60 80 0D 
              35 00 08 21 
              0A 03 8F 8A 
              51 6E 72 80 
              0B 36 00 10 
              17 8F 8A 54 
              71 75 80 0B 
              37 00 03 1D 
              8F 8A 47 63 
              41 80 0E 38 
              00 05 19 15 
              1B 14 06 8F 
              52 58 77 80 
              0A 39 00 18 
              8F 8A 4A 76 
              59 80 0E 3A 
              00 06 06 21 
              06 1C 11 8F 
              4C 6B 44 80 
              0D 3B 00 00 
              21 1A 0A 03 
              8F 4B 5D 4A 
              80 0A 3C 00 
              0E 8F 8A 55 
              74 77 80 0C 
              3D 00 14 05 
              09 8F 8A 45 
              55 43 80 0C 
              3E 00 14 05 
              09 8F 8A 41 
              64 74 80 0E 
              3F 00 0E 18 
              18 21 00 0D 
              8F 56 7D 40 
              80 0B 40 00 
              00 1B 21 8F 
              46 59 6E 80 
              0E 41 00 13 
              1B 00 1B 1F 
              8F 8A 54 50 
              50 80 0C 42 
              00 00 02 19 
              01 8F 53 47 
              47 80 0A 43 
              00 03 8F 8A 
              50 60 6A 80 
              0F 44 00 19 
              00 03 11 1B 
              0D 8F 8A 41 
              4C 5D 80 09 
              45 00 05 8F 
              8A 58 55 80 
              0E 46 00 13 
              25 0F 22 1F 
              8F 8A 49 78 
              5B 80 0B 47 
              00 10 17 8F 
              8A 48 76 67 
              80 0D 48 00 
              0B 20 25 10 
              8F 8A 51 6D 
              58 80 0E 49 
              00 06 06 21 
              06 1C 11 8F 
              47 40 75 80 
              0B 4A 00 13 
              0E 0D 8F 51 
              7B 6F 80 0A 
              4B 00 03 1D 
              8F 8A 48 65 
              80 0E 4C 00 
              0C 21 05 16 
              22 22 8F 48 
              6C 69 80 0B 
              4D 00 03 1D 
              8F 8A 43 60 
              7F 80 0E 4E 
              00 0E 0B 02 
              18 08 8F 8A 
              4F 76 56 80 
              0E 4F 00 13 
              25 0F 22 1F 
              8F 8A 45 5D 
              5C 80 0A 50 
              00 18 8F 8A 
              4B 53 7F 80 
              09 51 00 05 
              8F 41 7E 49 
              80 0B 52 00 
              03 1D 8F 8A 
              49 78 77 80 
              0F 53 00 06 
              06 21 06 1C 
              11 8F 8A 52 
              4B 64 80 0D 
              54 00 00 02 
              19 01 8F 8A 
              47 66 61 80 
              0A 55 00 18 
              8F 8A 44 52 
              6F 80 0B 56 
              00 0F 14 20 
              8F 42 7C 6C 
              80 0E 57 00 
              0E 18 18 21 
              00 0D 8F 8A 
              5D 64 80 0D 
              58 00 08 21 
              0A 03 8F 8A 
              46 6B 7F 80 
              0B 59 00 03 
              1D 8F 8A 42 
              6D 7E 80 0F 
              5A 00 19 00 
              03 11 1B 0D 
              8F 8A 46 44 
              6E 80 09 5B 
              00 03 8F 46 
              5A 5A 80 0A 
              5C 00 02 23 
              8F 49 60 71 
              80 0B 5D 00 
              10 17 8F 8A 
              56 7B 64 80 
              0F 5E 00 0E 
              18 18 21 00 
              0D 8F 8A 46 
              6D 48 80 0F 
              5F 00 05 19 
              15 1B 14 06 
              8F 8A 4A 68 
              52 80 0F 60 
              00 0E 18 18 
              21 00 0D 8F 
              8A 4F 5B 42 
              80 0C 61 00 
              0C 00 0C 1F 
              8F 49 5A 56 
              80 0D 62 00 
              0C 00 0C 1F 
              8F 8A 50 4E 
              60 80 0D 63 
              00 05 10 12 
              10 24 8F 4D 
              4F 7A 80 0E 
              64 00 06 06 
              21 06 1C 11 
              8F 51 41 6E 
              80 0D 65 00 
              05 10 12 10 
              24 8F 57 6B 
              6B 80 0F 66 
              00 0E 18 18 
              21 00 0D 8F 
              8A 42 46 62 
              80 0E 67 00 
              01 18 22 25 
              0E 06 8F 43 
              46 62 80 0A 
              68 00 03 1D 
              8F 57 58 66 
              80 0D 69 00 
              0B 20 25 10 
              8F 8A 45 4F 
              40 80 0A 6A 
              00 13 8F 8A 
              50 5C 41 80 
              0D 6B 00 00 
              21 1A 0A 03 
              8F 45 48 5E 
              80 0A 6C 00 
              00 8F 8A 57 
              68 48 80 0F 
              6D 00 12 07 
              18 22 08 25 
              8F 8A 43 62 
              63 80 0F 6E 
              00 17 13 01 
              02 17 12 8F 
              8A 57 42 48 
              80 0E 6F 00 
              19 00 03 11 
              1B 0D 8F 56 
              4B 53 80 0E 
              70 00 0E 18 
              18 21 00 0D 
              8F 4C 62 7E 
              80 0C 71 00 
              0C 00 0C 1F 
              8F 4E 58 5F 
              80 09 72 00 
              13 8F 52 4B 
              77 80 0F 73 
              00 19 00 03 
              11 1B 0D 8F 
              8A 4F 5E 6F 
              80 0E 74 00 
              05 19 15 1B 
              14 06 8F 57 
              71 47 80 0C 
              75 00 00 1B 
              21 8F 8A 46 
              40 7C 80 0A 
              76 00 0E 8F 
              8A 57 77 50 
              80 0A 77 00 
              05 8F 8A 51 
              6C 65 80 0E 
              78 00 13 1B 
              00 1B 1F 8F 
              8A 52 6D 69 
              80 0F 79 00 
              17 13 01 02 
              17 12 8F 8A 
              58 55 4A 80 
              0F 7A 00 19 
              00 03 11 1B 
              0D 8F 8A 47 
              7F 62 80 0A 
              7B 00 0C 8F 
              8A 49 4D 40 
              80 0E 7C 00 
              0E 18 18 21 
              00 0D 8F 4F 
              4E 60 80 0A 
              7D 00 06 8F 
              8A 46 47 44 
              80 09 7E 00 
              0E 8F 54 7B 
              40 80 0A 7F 
              00 10 17 8F 
              48 5C 4A 80 
              0A 80 00 18 
              8F 8A 4A 51 
              75 80 0A 81 
              00 0C 8F 8A 
              4E 77 41 80 
              0F 82 00 01 
              18 22 25 0E 
              06 8F 8A 47 
              76 6C 80 0D 
              83 00 0E 0B 
              02 18 08 8F 
              4C 7F 69 80 
              09 84 00 03 
              8F 50 52 4D 
              80 0D 85 00 
              13 25 0F 22 
              1F 8F 4E 60 
              56 80 09 86 
              00 0C 8F 55 
              49 75 80 0E 
              87 00 05 19 
              15 1B 14 06 
              8F 4B 42 5C 
              80 09 88 00 
              13 8F 4E 40 
              79 80 0B 89 
              00 02 23 8F 
              8A 52 46 63 
              80 0A 8A 00 
              06 8F 8A 48 
              4D 6A 80 0E 
              8B 00 19 00 
              03 11 1B 0D 
              8F 52 4D 68 
              80 0E 8C 00 
              13 1B 00 1B 
              1F 8F 8A 4A 
              7E 68 80 0C 
              8D 00 00 02 
              19 01 8F 49 
              4A 6C 80 0A 
              8E 00 02 8F 
              8A 50 68 49 
              80 0A 8F 00 
              0E 8F 8A 58 
              4F 4C 80 0E 
              90 00 13 25 
              0F 22 1F 8F 
              8A 52 7B 7F 
              80 0A 91 00 
              07 8F 8A 42 
              72 5E 80 0E 
              92 00 13 1B 
              00 1B 1F 8F 
              8A 42 5A 44 
              80 0E 93 00 
              06 23 1F 10 
              1A 11 8F 50 
              5A 64 80 0B 
              94 00 03 1D 
              8F 8A 52 7A 
              58 80 0E 95 
              00 01 18 22 
              25 0E 06 8F 
              4B 5F 69 80 
              0F 96 00 06 
              06 21 06 1C 
              11 8F 8A 4B 
              64 44 80 0E 
              97 00 05 10 
              12 10 24 8F 
              8A 43 62 55 
              80 0E 98 00 
              00 21 1A 0A 
              03 8F 8A 42 
              5F 64 80 0A 
              99 00 0C 8F 
              8A 57 68 75 
              80 0D 9A 00 
              0E 0B 02 18 
              08 8F 4D 4A 
              64 80 0D 9B 
              00 08 21 0A 
              03 8F 8A 56 
              67 68 80 0A 
              9C 00 18 8F 
              8A 43 5A 4F 
              80 08 9D 00 
              13 8F 7B 4A 
              80 0B 9E 00 
              13 0E 0D 8F 
              50 62 74 80 
              0D 9F 00 0B 
              20 25 10 8F 
              8A 50 75 6D 
              80 0B A0 00 
              00 1B 21 8F 
              52 6A 64 80 
              0B A1 00 02 
              23 8F 8A 41 
              6D 55 80 0D 
              A2 00 00 21 
              1A 0A 03 8F 
              53 49 6E 80 
              0C A3 00 08 
              21 0A 03 8F 
              51 6F 69 80 
              0E A4 00 0E 
              0B 02 18 08 
              8F 8A 4A 7C 
              73 80 0B A5 
              00 0B 18 25 
              8F 57 53 70 
              80 0E A6 00 
              13 1B 00 1B 
              1F 8F 8A 55 
              78 6F 80 0A 
              A7 00 0E 8F 
              8A 50 7D 4C 
              80 09 A8 00 
              02 8F 4A 59 
              56 80 0B A9 
              00 0F 14 20 
              8F 47 79 52 
              80 0B AA 00 
              0F 14 20 8F 
              54 62 47 80 
              0D AB 00 05 
              10 12 10 24 
              8F 44 52 68 
              80 0D AC 00 
              0E 0B 02 18 
              08 8F 43 71 
              56 80 0C AD 
              00 0B 18 25 
              8F 8A 51 41 
              41 80 0C AE 
              00 0F 14 20 
              8F 8A 42 72 
              44 80 0B AF 
              00 0B 18 25 
              8F 55 50 66 
              80 09 B0 00 
              0E 8F 4C 7B 
              7E 80 0F B1 
              00 06 06 21 
              06 1C 11 8F 
              8A 43 6B 58 
              80 0D B2 00 
              0B 20 25 10 
              8F 8A 46 40 
              66 80 0F B3 
              00 17 13 01 
              02 17 12 8F 
              8A 4B 51 4D 
              80 0E B4 00 
              0E 0B 02 18 
              08 8F 8A 51 
              5D 71 80 0B 
              B5 00 0F 14 
              20 8F 4F 5C 
              72 80 09 B6 
              00 0E 8F 56 
              64 57 80 0D 
              B7 00 13 25 
              0F 22 1F 8F 
              4C 7F 73 80 
              0A B8 00 0E 
              8F 8A 41 4F 
              7C 80 0F B9 
              00 19 00 03 
              11 1B 0D 8F 
              8A 4A 7A 58 
              80 0D BA 00 
              13 1B 00 1B 
              1F 8F 55 47 
              52 80 0C BB 
              00 13 0E 0D 
              8F 8A 56 6A 
              44 80 0D BC 
              00 00 21 1A 
              0A 03 8F 44 
              6E 6C 80 09 
              BD 00 0E 8F 
              4A 75 49 80 
              0C BE 00 0B 
              20 25 10 8F 
              52 6A 7E 80 
              0A BF 00 18 
              8F 8A 47 6B 
              74 80 0A C0 
              00 03 8F 8A 
              54 7D 4C 80 
              0E C1 00 13 
              25 0F 22 1F 
              8F 8A 52 4E 
              75 80 0C C2 
              00 08 21 0A 
              03 8F 44 5F 
              40 80 09 C3 
              00 03 8F 42 
              66 59 80 0A 
              C4 00 0E 01 
              8F 49 70 75 
              80 0D C5 00 
              0B 20 25 10 
              8F 8A 56 7E 
              7F 80 0E C6 
              00 12 07 18 
              22 08 25 8F 
              41 51 49 80 
              0D C7 00 00 
              02 19 01 8F 
              8A 52 4A 7E 
              80 09 C8 00 
              06 8F 58 41 
              6E 80 0B C9 
              00 03 1D 8F 
              8A 52 6A 63 
              80 0B CA 00 
              03 1D 8F 8A 
              45 4C 50 80 
              0E CB 00 0E 
              0B 02 18 08 
              8F 8A 47 7A 
              6A 80 0D CC 
              00 0B 20 25 
              10 8F 8A 41 
              79 5A 80 0E 
              CD 00 0C 21 
              05 16 22 22 
              8F 42 72 41 
              80 0F CE 00 
              06 23 1F 10 
              1A 11 8F 8A 
              4D 4D 54 80 
              0D CF 00 13 
              25 0F 22 1F 
              8F 52 5E 59 
              80 0B D0 00 
              0B 11 10 8F 
              54 7C 4B 80 
              0F D1 00 12 
              07 18 22 08 
              25 8F 8A 53 
              41 4C 80 0D 
              D2 00 0E 0B 
              02 18 08 8F 
              46 67 6D 80 
              09 D3 00 03 
              8F 4F 7D 66 
              80 0B D4 00 
              0E 1B 8F 8A 
              51 72 60 80 
              0D D5 00 13 
              25 0F 22 1F 
              8F 51 64 72 
              80 0E D6 00 
              06 06 21 06 
              1C 11 8F 52 
              5E 73 80 0E 
              D7 00 0E 18 
              18 21 00 0D 
              8F 49 46 43 
              80 0A D8 00 
              05 8F 8A 50 
              56 7C 80 09 
              D9 00 05 8F 
              44 41 6A 80 
              0D DA 00 05 
              19 15 1B 14 
              06 8F 48 6C 
              80 0F DB 00 
              0E 18 18 21 
              00 0D 8F 8A 
              57 48 61 80 
              0E DC 00 13 
              25 0F 22 1F 
              8F 8A 56 55 
              61 80 0D DD 
              00 08 21 0A 
              03 8F 8A 55 
              40 67 80 0A 
              DE 00 02 8F 
              8A 54 68 7B 
              80 0D DF 00 
              05 19 15 1B 
              14 06 8F 57 
              7F 80 0F E0 
              00 0C 21 05 
              16 22 22 8F 
              8A 54 59 58 
              80 0A E1 00 
              0E 01 8F 42 
              75 78 80 0B 
              E2 00 0E 01 
              8F 8A 45 4B 
              69 80 0C E3 
              00 0B 20 25 
              10 8F 4D 50 
              46 80 0A E4 
              00 00 8F 8A 
              54 5B 64 80 
              0D E5 00 08 
              21 0A 03 8F 
              8A 4B 7D 63 
              80 0C E6 00 
              00 1B 21 8F 
              8A 49 77 6C 
              80 0F E7 00 
              06 06 21 06 
              1C 11 8F 8A 
              4F 57 40 80 
              0A E8 00 03 
              1D 8F 4D 41 
              4A 80 09 E9 
              00 13 8F 4B 
              55 76 80 0F 
              EA 00 19 00 
              03 11 1B 0D 
              8F 8A 51 59 
              70 80 0A EB 
              00 18 8F 8A 
              4D 61 6E 80 
              0E EC 00 0E 
              0B 02 18 08 
              8F 8A 51 5D 
              57 80 0B ED 
              00 0B 18 25 
              8F 45 48 64 
              80 0D EE 00 
              13 25 0F 22 
              1F 8F 42 5A 
              45 80 0E EF 
              00 00 21 1A 
              0A 03 8F 8A 
              49 42 60 80 
              0A F0 00 02 
              23 8F 4F 69 
              4F 80 0C F1 
              00 00 02 19 
              01 8F 50 44 
              69 80 0E F2 
              00 05 19 15 
              1B 14 06 8F 
              54 6B 40 80 
              0B F3 00 C7 
              02 8F 8A 54 
              68 7B 80 0B 
              F4 00 C7 03 
              1D 8F 4D 41 
              4A 80 0D F5 
              00 C7 00 1B 
              21 8F 8A 49 
              77 6C 80 10 
              F6 00 C7 19 
              00 03 11 1B 
              0D 8F 8A 51 
              59 70 80 0F 
              F7 00 C7 00 
              21 1A 0A 03 
              8F 8A 49 42 
              60 80 0A F8 
              00 C7 13 8F 
              4B 55 76 80 
              0C F9 00 C7 
              0F 14 20 8F 
              4F 5C 72 80 
              0D FA 00 C7 
              00 02 19 01 
              8F 50 44 69 
              80 10 FB 00 
              C7 0E 18 18 
              21 00 0D 8F 
              8A 57 48 61 
              80 0E FC 00 
              C7 05 10 12 
              10 24 8F 44 
              52 68 80 0B 
              FD 00 C7 10 
              17 8F 48 5C 
              4A 80 0E FE 
              00 C7 13 25 
              0F 22 1F 8F 
              42 5A 45 80 
              0B FF 00 C7 
              0C 8F 8A 57 
              68 75 80 10 
              00 01 C7 12 
              07 18 22 08 
              25 8F 8A 53 
              41 4C 80 0C 
              01 01 C7 0E 
              1B 8F 8A 51 
              72 60 80 0C 
              02 01 C7 0B 
              18 25 8F 45 
              48 64 80 0B 
              03 01 C7 07 
              8F 8A 42 72 
              5E 80 0F 04 
              01 C7 01 18 
              22 25 0E 06 
              8F 4B 5F 69 
              80 0D 05 01 
              C7 0C 00 0C 
              1F 8F 4E 58 
              5F 80 0B 06 
              01 C7 00 8F 
              8A 54 5B 64 
              80 0F 07 01 
              C7 0E 0B 02 
              18 08 8F 8A 
              51 5D 57 80 
              0D 08 01 C7 
              14 05 09 8F 
              8A 41 64 74 
              80 0A 09 01 
              C7 0E 8F 4A 
              75 49 80 0B 
              0A 01 C7 02 
              23 8F 4F 69 
              4F 80 10 0B 
              01 C7 06 23 
              1F 10 1A 11 
              8F 8A 4D 4D 
              54 80 0C 0C 
              01 C7 0E 01 
              8F 8A 45 4B 
              69 80 0D 0D 
              01 C7 0B 20 
              25 10 8F 4D 
              50 46 80 0E 
              0E 01 C7 13 
              1B 00 1B 1F 
              8F 55 47 52 
              80 10 0F 01 
              C7 17 13 01 
              02 17 12 8F 
              8A 4B 51 4D 
              80 0D 10 01 
              C7 13 0E 0D 
              8F 8A 56 6A 
              44 80 10 11 
              01 C7 06 06 
              21 06 1C 11 
              8F 8A 4F 57 
              40 80 0A 12 
              01 C7 03 8F 
              4F 7D 66 80 
              0F 13 01 C7 
              05 19 15 1B 
              14 06 8F 54 
              6B 40 80 0B 
              14 01 C7 18 
              8F 8A 4D 61 
              6E 80 0E 15 
              01 C7 08 21 
              0A 03 8F 8A 
              4B 7D 63 80 
              0E 16 01 C7 
              0C 0F 02 05 
              0F 8F 43 67 
              71 80 0A 17 
              01 C7 06 8F 
              58 41 6E 80 
              0A 18 01 C7 
              05 8F 44 41 
              6A 80 10 19 
              01 C7 0C 21 
              05 16 22 22 
              8F 8A 54 59 
              58 80 0C 1A 
              01 C7 0B 11 
              10 8F 54 7C 
              4B 80 14 1B 
              01 BE 3F 0C 
              4F 6B 20 53 
              65 65 64 20 
              32 36 32 34 
              0D 80 00 -  	.db	$22,$01,$00,$bb,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$02,$00,$bb,$3f,$0b,$53,$65,$65,$64,$20,$3d,$20,$32,$36,$32,$34,$0d,$80,$09,$03,$00,$02,$8f,$8a,$59,$72,$80,$0b,$04,$00,$03,$1d,$8f,$8a,$4d,$60,$62,$80,$0c,$05,$00,$00,$1b,$21,$8f,$8a,$53,$6f,$6f,$80,$0f,$06,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$48,$73,$52,$80,$0e,$07,$00,$00,$21,$1a,$0a,$03,$8f,$8a,$58,$53,$6a,$80,$0a,$08,$00,$13,$8f,$8a,$52,$63,$46,$80,$0b,$09,$00,$0f,$14,$20,$8f,$57,$7c,$4b,$80,$0c,$0a,$00,$00,$02,$19,$01,$8f,$41,$7f,$64,$80,$0f,$0b,$00,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$50,$4b,$49,$80,$0e,$0c,$00,$05,$10,$12,$10,$24,$8f,$8a,$4c,$7e,$6c,$80,$0b,$0d,$00,$10,$17,$8f,$8a,$55,$40,$61,$80,$0e,$0e,$00,$13,$25,$0f,$22,$1f,$8f,$8a,$4f,$42,$70,$80,$0a,$0f,$00,$0c,$8f,$8a,$42,$62,$60,$80,$0e,$10,$00,$12,$07,$18,$22,$08,$25,$8f,$51,$5c,$41,$80,$0a,$11,$00,$0e,$1b,$8f,$4a,$55,$70,$80,$0b,$12,$00,$0b,$18,$25,$8f,$54,$4e,$72,$80,$09,$13,$00,$07,$8f,$4c,$46,$52,$80,$0f,$14,$00,$01,$18,$22,$25,$0e,$06,$8f,$8a,$42,$77,$74,$80,$0d,$15,$00,$0c,$00,$0c,$1f,$8f,$8a,$58,$56,$6c,$80,$0a,$16,$00,$00,$8f,$8a,$54,$65,$6b,$80,$0e,$17,$00,$0e,$0b,$02,$18,$08,$8f,$8a,$4c,$67,$40,$80,$0c,$18,$00,$14,$05,$09,$8f,$8a,$4b,$6f,$66,$80,$0a,$19,$00,$0e,$8f,$8a,$43,$68,$48,$80,$0b,$1a,$00,$02,$23,$8f,$8a,$48,$7e,$4e,$80,$0e,$1b,$00,$06,$23,$1f,$10,$1a,$11,$8f,$4f,$5d,$59,$80,$0a,$1c,$00,$0e,$01,$8f,$55,$40,$58,$80,$0d,$1d,$00,$0b,$20,$25,$10,$8f,$8a,$41,$76,$76,$80,$0d,$1e,$00,$13,$1b,$00,$1b,$1f,$8f,$46,$4d,$62,$80,$0f,$1f,$00,$17,$13,$01,$02,$17,$12,$8f,$8a,$51,$43,$7e,$80,$0c,$20,$00,$13,$0e,$0d,$8f,$8a,$4e,$74,$42,$80,$0f,$21,$00,$06,$06,$21,$06,$1c,$11,$8f,$8a,$46,$64,$47,$80,$09,$22,$00,$03,$8f,$51,$4b,$76,$80,$0e,$23,$00,$05,$19,$15,$1b,$14,$06,$8f,$4a,$71,$5b,$80,$0a,$24,$00,$18,$8f,$8a,$4a,$53,$49,$80,$0c,$25,$00,$08,$21,$0a,$03,$8f,$57,$46,$57,$80,$0d,$26,$00,$0c,$0f,$02,$05,$0f,$8f,$43,$67,$71,$80,$09,$27,$00,$06,$8f,$52,$4a,$5b,$80,$09,$28,$00,$05,$8f,$51,$6b,$44,$80,$0e,$29,$00,$0c,$21,$05,$16,$22,$22,$8f,$54,$63,$4a,$80,$0c,$2a,$00,$0b,$11,$10,$8f,$8a,$4f,$60,$5e,$80,$0a,$2b,$00,$07,$8f,$8a,$56,$61,$54,$80,$0c,$2c,$00,$14,$05,$09,$8f,$8a,$41,$47,$5a,$80,$0d,$2d,$00,$0c,$00,$0c,$1f,$8f,$8a,$56,$77,$64,$80,$0b,$2e,$00,$0b,$18,$25,$8f,$42,$67,$78,$80,$09,$2f,$00,$13,$8f,$42,$7e,$43,$80,$0f,$30,$00,$12,$07,$18,$22,$08,$25,$8f,$8a,$56,$78,$74,$80,$0e,$31,$00,$13,$1b,$00,$1b,$1f,$8f,$8a,$46,$6a,$7c,$80,$0e,$32,$00,$06,$23,$1f,$10,$1a,$11,$8f,$46,$6f,$52,$80,$09,$33,$00,$0c,$8f,$8a,$5c,$6b,$80,$0a,$34,$00,$06,$8f,$8a,$43,$7d,$60,$80,$0d,$35,$00,$08,$21,$0a,$03,$8f,$8a,$51,$6e,$72,$80,$0b,$36,$00,$10,$17,$8f,$8a,$54,$71,$75,$80,$0b,$37,$00,$03,$1d,$8f,$8a,$47,$63,$41,$80,$0e,$38,$00,$05,$19,$15,$1b,$14,$06,$8f,$52,$58,$77,$80,$0a,$39,$00,$18,$8f,$8a,$4a,$76,$59,$80,$0e,$3a,$00,$06,$06,$21,$06,$1c,$11,$8f,$4c,$6b,$44,$80,$0d,$3b,$00,$00,$21,$1a,$0a,$03,$8f,$4b,$5d,$4a,$80,$0a,$3c,$00,$0e,$8f,$8a,$55,$74,$77,$80,$0c,$3d,$00,$14,$05,$09,$8f,$8a,$45,$55,$43,$80,$0c,$3e,$00,$14,$05,$09,$8f,$8a,$41,$64,$74,$80,$0e,$3f,$00,$0e,$18,$18,$21,$00,$0d,$8f,$56,$7d,$40,$80,$0b,$40,$00,$00,$1b,$21,$8f,$46,$59,$6e,$80,$0e,$41,$00,$13,$1b,$00,$1b,$1f,$8f,$8a,$54,$50,$50,$80,$0c,$42,$00,$00,$02,$19,$01,$8f,$53,$47,$47,$80,$0a,$43,$00,$03,$8f,$8a,$50,$60,$6a,$80,$0f,$44,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$41,$4c,$5d,$80,$09,$45,$00,$05,$8f,$8a,$58,$55,$80,$0e,$46,$00,$13,$25,$0f,$22,$1f,$8f,$8a,$49,$78,$5b,$80,$0b,$47,$00,$10,$17,$8f,$8a,$48,$76,$67,$80,$0d,$48,$00,$0b,$20,$25,$10,$8f,$8a,$51,$6d,$58,$80,$0e,$49,$00,$06,$06,$21,$06,$1c,$11,$8f,$47,$40,$75,$80,$0b,$4a,$00,$13,$0e,$0d,$8f,$51,$7b,$6f,$80,$0a,$4b,$00,$03,$1d,$8f,$8a,$48,$65,$80,$0e,$4c,$00,$0c,$21,$05,$16,$22,$22,$8f,$48,$6c,$69,$80,$0b,$4d,$00,$03,$1d,$8f,$8a,$43,$60,$7f,$80,$0e,$4e,$00,$0e,$0b,$02,$18,$08,$8f,$8a,$4f,$76,$56,$80,$0e,$4f,$00,$13,$25,$0f,$22,$1f,$8f,$8a,$45,$5d,$5c,$80,$0a,$50,$00,$18,$8f,$8a,$4b,$53,$7f,$80,$09,$51,$00,$05,$8f,$41,$7e,$49,$80,$0b,$52,$00,$03,$1d,$8f,$8a,$49,$78,$77,$80,$0f,$53,$00,$06,$06,$21,$06,$1c,$11,$8f,$8a,$52,$4b,$64,$80,$0d,$54,$00,$00,$02,$19,$01,$8f,$8a,$47,$66,$61,$80,$0a,$55,$00,$18,$8f,$8a,$44,$52,$6f,$80,$0b,$56,$00,$0f,$14,$20,$8f,$42,$7c,$6c,$80,$0e,$57,$00,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$5d,$64,$80,$0d,$58,$00,$08,$21,$0a,$03,$8f,$8a,$46,$6b,$7f,$80,$0b,$59,$00,$03,$1d,$8f,$8a,$42,$6d,$7e,$80,$0f,$5a,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$46,$44,$6e,$80,$09,$5b,$00,$03,$8f,$46,$5a,$5a,$80,$0a,$5c,$00,$02,$23,$8f,$49,$60,$71,$80,$0b,$5d,$00,$10,$17,$8f,$8a,$56,$7b,$64,$80,$0f,$5e,$00,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$46,$6d,$48,$80,$0f,$5f,$00,$05,$19,$15,$1b,$14,$06,$8f,$8a,$4a,$68,$52,$80,$0f,$60,$00,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$4f,$5b,$42,$80,$0c,$61,$00,$0c,$00,$0c,$1f,$8f,$49,$5a,$56,$80,$0d,$62,$00,$0c,$00,$0c,$1f,$8f,$8a,$50,$4e,$60,$80,$0d,$63,$00,$05,$10,$12,$10,$24,$8f,$4d,$4f,$7a,$80,$0e,$64,$00,$06,$06,$21,$06,$1c,$11,$8f,$51,$41,$6e,$80,$0d,$65,$00,$05,$10,$12,$10,$24,$8f,$57,$6b,$6b,$80,$0f,$66,$00,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$42,$46,$62,$80,$0e,$67,$00,$01,$18,$22,$25,$0e,$06,$8f,$43,$46,$62,$80,$0a,$68,$00,$03,$1d,$8f,$57,$58,$66,$80,$0d,$69,$00,$0b,$20,$25,$10,$8f,$8a,$45,$4f,$40,$80,$0a,$6a,$00,$13,$8f,$8a,$50,$5c,$41,$80,$0d,$6b,$00,$00,$21,$1a,$0a,$03,$8f,$45,$48,$5e,$80,$0a,$6c,$00,$00,$8f,$8a,$57,$68,$48,$80,$0f,$6d,$00,$12,$07,$18,$22,$08,$25,$8f,$8a,$43,$62,$63,$80,$0f,$6e,$00,$17,$13,$01,$02,$17,$12,$8f,$8a,$57,$42,$48,$80,$0e,$6f,$00,$19,$00,$03,$11,$1b,$0d,$8f,$56,$4b,$53,$80,$0e,$70,$00,$0e,$18,$18,$21,$00,$0d,$8f,$4c,$62,$7e,$80,$0c,$71,$00,$0c,$00,$0c,$1f,$8f,$4e,$58,$5f,$80,$09,$72,$00,$13,$8f,$52,$4b,$77,$80,$0f,$73,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$4f,$5e,$6f,$80,$0e,$74,$00,$05,$19,$15,$1b,$14,$06,$8f,$57,$71,$47,$80,$0c,$75,$00,$00,$1b,$21,$8f,$8a,$46,$40,$7c,$80,$0a,$76,$00,$0e,$8f,$8a,$57,$77,$50,$80,$0a,$77,$00,$05,$8f,$8a,$51,$6c,$65,$80,$0e,$78,$00,$13,$1b,$00,$1b,$1f,$8f,$8a,$52,$6d,$69,$80,$0f,$79,$00,$17,$13,$01,$02,$17,$12,$8f,$8a,$58,$55,$4a,$80,$0f,$7a,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$47,$7f,$62,$80,$0a,$7b,$00,$0c,$8f,$8a,$49,$4d,$40,$80,$0e,$7c,$00,$0e,$18,$18,$21,$00,$0d,$8f,$4f,$4e,$60,$80,$0a,$7d,$00,$06,$8f,$8a,$46,$47,$44,$80,$09,$7e,$00,$0e,$8f,$54,$7b,$40,$80,$0a,$7f,$00,$10,$17,$8f,$48,$5c,$4a,$80,$0a,$80,$00,$18,$8f,$8a,$4a,$51,$75,$80,$0a,$81,$00,$0c,$8f,$8a,$4e,$77,$41,$80,$0f,$82,$00,$01,$18,$22,$25,$0e,$06,$8f,$8a,$47,$76,$6c,$80,$0d,$83,$00,$0e,$0b,$02,$18,$08,$8f,$4c,$7f,$69,$80,$09,$84,$00,$03,$8f,$50,$52,$4d,$80,$0d,$85,$00,$13,$25,$0f,$22,$1f,$8f,$4e,$60,$56,$80,$09,$86,$00,$0c,$8f,$55,$49,$75,$80,$0e,$87,$00,$05,$19,$15,$1b,$14,$06,$8f,$4b,$42,$5c,$80,$09,$88,$00,$13,$8f,$4e,$40,$79,$80,$0b,$89,$00,$02,$23,$8f,$8a,$52,$46,$63,$80,$0a,$8a,$00,$06,$8f,$8a,$48,$4d,$6a,$80,$0e,$8b,$00,$19,$00,$03,$11,$1b,$0d,$8f,$52,$4d,$68,$80,$0e,$8c,$00,$13,$1b,$00,$1b,$1f,$8f,$8a,$4a,$7e,$68,$80,$0c,$8d,$00,$00,$02,$19,$01,$8f,$49,$4a,$6c,$80,$0a,$8e,$00,$02,$8f,$8a,$50,$68,$49,$80,$0a,$8f,$00,$0e,$8f,$8a,$58,$4f,$4c,$80,$0e,$90,$00,$13,$25,$0f,$22,$1f,$8f,$8a,$52,$7b,$7f,$80,$0a,$91,$00,$07,$8f,$8a,$42,$72,$5e,$80,$0e,$92,$00,$13,$1b,$00,$1b,$1f,$8f,$8a,$42,$5a,$44,$80,$0e,$93,$00,$06,$23,$1f,$10,$1a,$11,$8f,$50,$5a,$64,$80,$0b,$94,$00,$03,$1d,$8f,$8a,$52,$7a,$58,$80,$0e,$95,$00,$01,$18,$22,$25,$0e,$06,$8f,$4b,$5f,$69,$80,$0f,$96,$00,$06,$06,$21,$06,$1c,$11,$8f,$8a,$4b,$64,$44,$80,$0e,$97,$00,$05,$10,$12,$10,$24,$8f,$8a,$43,$62,$55,$80,$0e,$98,$00,$00,$21,$1a,$0a,$03,$8f,$8a,$42,$5f,$64,$80,$0a,$99,$00,$0c,$8f,$8a,$57,$68,$75,$80,$0d,$9a,$00,$0e,$0b,$02,$18,$08,$8f,$4d,$4a,$64,$80,$0d,$9b,$00,$08,$21,$0a,$03,$8f,$8a,$56,$67,$68,$80,$0a,$9c,$00,$18,$8f,$8a,$43,$5a,$4f,$80,$08,$9d,$00,$13,$8f,$7b,$4a,$80,$0b,$9e,$00,$13,$0e,$0d,$8f,$50,$62,$74,$80,$0d,$9f,$00,$0b,$20,$25,$10,$8f,$8a,$50,$75,$6d,$80,$0b,$a0,$00,$00,$1b,$21,$8f,$52,$6a,$64,$80,$0b,$a1,$00,$02,$23,$8f,$8a,$41,$6d,$55,$80,$0d,$a2,$00,$00,$21,$1a,$0a,$03,$8f,$53,$49,$6e,$80,$0c,$a3,$00,$08,$21,$0a,$03,$8f,$51,$6f,$69,$80,$0e,$a4,$00,$0e,$0b,$02,$18,$08,$8f,$8a,$4a,$7c,$73,$80,$0b,$a5,$00,$0b,$18,$25,$8f,$57,$53,$70,$80,$0e,$a6,$00,$13,$1b,$00,$1b,$1f,$8f,$8a,$55,$78,$6f,$80,$0a,$a7,$00,$0e,$8f,$8a,$50,$7d,$4c,$80,$09,$a8,$00,$02,$8f,$4a,$59,$56,$80,$0b,$a9,$00,$0f,$14,$20,$8f,$47,$79,$52,$80,$0b,$aa,$00,$0f,$14,$20,$8f,$54,$62,$47,$80,$0d,$ab,$00,$05,$10,$12,$10,$24,$8f,$44,$52,$68,$80,$0d,$ac,$00,$0e,$0b,$02,$18,$08,$8f,$43,$71,$56,$80,$0c,$ad,$00,$0b,$18,$25,$8f,$8a,$51,$41,$41,$80,$0c,$ae,$00,$0f,$14,$20,$8f,$8a,$42,$72,$44,$80,$0b,$af,$00,$0b,$18,$25,$8f,$55,$50,$66,$80,$09,$b0,$00,$0e,$8f,$4c,$7b,$7e,$80,$0f,$b1,$00,$06,$06,$21,$06,$1c,$11,$8f,$8a,$43,$6b,$58,$80,$0d,$b2,$00,$0b,$20,$25,$10,$8f,$8a,$46,$40,$66,$80,$0f,$b3,$00,$17,$13,$01,$02,$17,$12,$8f,$8a,$4b,$51,$4d,$80,$0e,$b4,$00,$0e,$0b,$02,$18,$08,$8f,$8a,$51,$5d,$71,$80,$0b,$b5,$00,$0f,$14,$20,$8f,$4f,$5c,$72,$80,$09,$b6,$00,$0e,$8f,$56,$64,$57,$80,$0d,$b7,$00,$13,$25,$0f,$22,$1f,$8f,$4c,$7f,$73,$80,$0a,$b8,$00,$0e,$8f,$8a,$41,$4f,$7c,$80,$0f,$b9,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$4a,$7a,$58,$80,$0d,$ba,$00,$13,$1b,$00,$1b,$1f,$8f,$55,$47,$52,$80,$0c,$bb,$00,$13,$0e,$0d,$8f,$8a,$56,$6a,$44,$80,$0d,$bc,$00,$00,$21,$1a,$0a,$03,$8f,$44,$6e,$6c,$80,$09,$bd,$00,$0e,$8f,$4a,$75,$49,$80,$0c,$be,$00,$0b,$20,$25,$10,$8f,$52,$6a,$7e,$80,$0a,$bf,$00,$18,$8f,$8a,$47,$6b,$74,$80,$0a,$c0,$00,$03,$8f,$8a,$54,$7d,$4c,$80,$0e,$c1,$00,$13,$25,$0f,$22,$1f,$8f,$8a,$52,$4e,$75,$80,$0c,$c2,$00,$08,$21,$0a,$03,$8f,$44,$5f,$40,$80,$09,$c3,$00,$03,$8f,$42,$66,$59,$80,$0a,$c4,$00,$0e,$01,$8f,$49,$70,$75,$80,$0d,$c5,$00,$0b,$20,$25,$10,$8f,$8a,$56,$7e,$7f,$80,$0e,$c6,$00,$12,$07,$18,$22,$08,$25,$8f,$41,$51,$49,$80,$0d,$c7,$00,$00,$02,$19,$01,$8f,$8a,$52,$4a,$7e,$80,$09,$c8,$00,$06,$8f,$58,$41,$6e,$80,$0b,$c9,$00,$03,$1d,$8f,$8a,$52,$6a,$63,$80,$0b,$ca,$00,$03,$1d,$8f,$8a,$45,$4c,$50,$80,$0e,$cb,$00,$0e,$0b,$02,$18,$08,$8f,$8a,$47,$7a,$6a,$80,$0d,$cc,$00,$0b,$20,$25,$10,$8f,$8a,$41,$79,$5a,$80,$0e,$cd,$00,$0c,$21,$05,$16,$22,$22,$8f,$42,$72,$41,$80,$0f,$ce,$00,$06,$23,$1f,$10,$1a,$11,$8f,$8a,$4d,$4d,$54,$80,$0d,$cf,$00,$13,$25,$0f,$22,$1f,$8f,$52,$5e,$59,$80,$0b,$d0,$00,$0b,$11,$10,$8f,$54,$7c,$4b,$80,$0f,$d1,$00,$12,$07,$18,$22,$08,$25,$8f,$8a,$53,$41,$4c,$80,$0d,$d2,$00,$0e,$0b,$02,$18,$08,$8f,$46,$67,$6d,$80,$09,$d3,$00,$03,$8f,$4f,$7d,$66,$80,$0b,$d4,$00,$0e,$1b,$8f,$8a,$51,$72,$60,$80,$0d,$d5,$00,$13,$25,$0f,$22,$1f,$8f,$51,$64,$72,$80,$0e,$d6,$00,$06,$06,$21,$06,$1c,$11,$8f,$52,$5e,$73,$80,$0e,$d7,$00,$0e,$18,$18,$21,$00,$0d,$8f,$49,$46,$43,$80,$0a,$d8,$00,$05,$8f,$8a,$50,$56,$7c,$80,$09,$d9,$00,$05,$8f,$44,$41,$6a,$80,$0d,$da,$00,$05,$19,$15,$1b,$14,$06,$8f,$48,$6c,$80,$0f,$db,$00,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$57,$48,$61,$80,$0e,$dc,$00,$13,$25,$0f,$22,$1f,$8f,$8a,$56,$55,$61,$80,$0d,$dd,$00,$08,$21,$0a,$03,$8f,$8a,$55,$40,$67,$80,$0a,$de,$00,$02,$8f,$8a,$54,$68,$7b,$80,$0d,$df,$00,$05,$19,$15,$1b,$14,$06,$8f,$57,$7f,$80,$0f,$e0,$00,$0c,$21,$05,$16,$22,$22,$8f,$8a,$54,$59,$58,$80,$0a,$e1,$00,$0e,$01,$8f,$42,$75,$78,$80,$0b,$e2,$00,$0e,$01,$8f,$8a,$45,$4b,$69,$80,$0c,$e3,$00,$0b,$20,$25,$10,$8f,$4d,$50,$46,$80,$0a,$e4,$00,$00,$8f,$8a,$54,$5b,$64,$80,$0d,$e5,$00,$08,$21,$0a,$03,$8f,$8a,$4b,$7d,$63,$80,$0c,$e6,$00,$00,$1b,$21,$8f,$8a,$49,$77,$6c,$80,$0f,$e7,$00,$06,$06,$21,$06,$1c,$11,$8f,$8a,$4f,$57,$40,$80,$0a,$e8,$00,$03,$1d,$8f,$4d,$41,$4a,$80,$09,$e9,$00,$13,$8f,$4b,$55,$76,$80,$0f,$ea,$00,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$51,$59,$70,$80,$0a,$eb,$00,$18,$8f,$8a,$4d,$61,$6e,$80,$0e,$ec,$00,$0e,$0b,$02,$18,$08,$8f,$8a,$51,$5d,$57,$80,$0b,$ed,$00,$0b,$18,$25,$8f,$45,$48,$64,$80,$0d,$ee,$00,$13,$25,$0f,$22,$1f,$8f,$42,$5a,$45,$80,$0e,$ef,$00,$00,$21,$1a,$0a,$03,$8f,$8a,$49,$42,$60,$80,$0a,$f0,$00,$02,$23,$8f,$4f,$69,$4f,$80,$0c,$f1,$00,$00,$02,$19,$01,$8f,$50,$44,$69,$80,$0e,$f2,$00,$05,$19,$15,$1b,$14,$06,$8f,$54,$6b,$40,$80,$0b,$f3,$00,$c7,$02,$8f,$8a,$54,$68,$7b,$80,$0b,$f4,$00,$c7,$03,$1d,$8f,$4d,$41,$4a,$80,$0d,$f5,$00,$c7,$00,$1b,$21,$8f,$8a,$49,$77,$6c,$80,$10,$f6,$00,$c7,$19,$00,$03,$11,$1b,$0d,$8f,$8a,$51,$59,$70,$80,$0f,$f7,$00,$c7,$00,$21,$1a,$0a,$03,$8f,$8a,$49,$42,$60,$80,$0a,$f8,$00,$c7,$13,$8f,$4b,$55,$76,$80,$0c,$f9,$00,$c7,$0f,$14,$20,$8f,$4f,$5c,$72,$80,$0d,$fa,$00,$c7,$00,$02,$19,$01,$8f,$50,$44,$69,$80,$10,$fb,$00,$c7,$0e,$18,$18,$21,$00,$0d,$8f,$8a,$57,$48,$61,$80,$0e,$fc,$00,$c7,$05,$10,$12,$10,$24,$8f,$44,$52,$68,$80,$0b,$fd,$00,$c7,$10,$17,$8f,$48,$5c,$4a,$80,$0e,$fe,$00,$c7,$13,$25,$0f,$22,$1f,$8f,$42,$5a,$45,$80,$0b,$ff,$00,$c7,$0c,$8f,$8a,$57,$68,$75,$80,$10,$00,$01,$c7,$12,$07,$18,$22,$08,$25,$8f,$8a,$53,$41,$4c,$80,$0c,$01,$01,$c7,$0e,$1b,$8f,$8a,$51,$72,$60,$80,$0c,$02,$01,$c7,$0b,$18,$25,$8f,$45,$48,$64,$80,$0b,$03,$01,$c7,$07,$8f,$8a,$42,$72,$5e,$80,$0f,$04,$01,$c7,$01,$18,$22,$25,$0e,$06,$8f,$4b,$5f,$69,$80,$0d,$05,$01,$c7,$0c,$00,$0c,$1f,$8f,$4e,$58,$5f,$80,$0b,$06,$01,$c7,$00,$8f,$8a,$54,$5b,$64,$80,$0f,$07,$01,$c7,$0e,$0b,$02,$18,$08,$8f,$8a,$51,$5d,$57,$80,$0d,$08,$01,$c7,$14,$05,$09,$8f,$8a,$41,$64,$74,$80,$0a,$09,$01,$c7,$0e,$8f,$4a,$75,$49,$80,$0b,$0a,$01,$c7,$02,$23,$8f,$4f,$69,$4f,$80,$10,$0b,$01,$c7,$06,$23,$1f,$10,$1a,$11,$8f,$8a,$4d,$4d,$54,$80,$0c,$0c,$01,$c7,$0e,$01,$8f,$8a,$45,$4b,$69,$80,$0d,$0d,$01,$c7,$0b,$20,$25,$10,$8f,$4d,$50,$46,$80,$0e,$0e,$01,$c7,$13,$1b,$00,$1b,$1f,$8f,$55,$47,$52,$80,$10,$0f,$01,$c7,$17,$13,$01,$02,$17,$12,$8f,$8a,$4b,$51,$4d,$80,$0d,$10,$01,$c7,$13,$0e,$0d,$8f,$8a,$56,$6a,$44,$80,$10,$11,$01,$c7,$06,$06,$21,$06,$1c,$11,$8f,$8a,$4f,$57,$40,$80,$0a,$12,$01,$c7,$03,$8f,$4f,$7d,$66,$80,$0f,$13,$01,$c7,$05,$19,$15,$1b,$14,$06,$8f,$54,$6b,$40,$80,$0b,$14,$01,$c7,$18,$8f,$8a,$4d,$61,$6e,$80,$0e,$15,$01,$c7,$08,$21,$0a,$03,$8f,$8a,$4b,$7d,$63,$80,$0e,$16,$01,$c7,$0c,$0f,$02,$05,$0f,$8f,$43,$67,$71,$80,$0a,$17,$01,$c7,$06,$8f,$58,$41,$6e,$80,$0a,$18,$01,$c7,$05,$8f,$44,$41,$6a,$80,$10,$19,$01,$c7,$0c,$21,$05,$16,$22,$22,$8f,$8a,$54,$59,$58,$80,$0c,$1a,$01,$c7,$0b,$11,$10,$8f,$54,$7c,$4b,$80,$14,$1b,$01,$be,$3f,$0c,$4f,$6b,$20,$53,$65,$65,$64,$20,$32,$36,$32,$34,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1DAB 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2DAB -  -  -  -  EndTestInstance:
   18 00:2DAB -  -  -  -  		
   19 00:2DAB -  -  -  -  ; ***************************************************************************************
   20 00:2DAB -  -  -  -  ;
   21 00:2DAB -  -  -  -  ;									Changes and Updates
   22 00:2DAB -  -  -  -  ;
   23 00:2DAB -  -  -  -  ; ***************************************************************************************
   24 00:2DAB -  -  -  -  ;
   25 00:2DAB -  -  -  -  ;		Date			Notes
   26 00:2DAB -  -  -  -  ;		==== 			=====
   27 00:2DAB -  -  -  -  ;
   28 00:2DAB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:2DAB -  -  -  -  FinalAddress:
