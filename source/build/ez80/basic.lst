    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD AA 0E 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 2D 20 00 		ld 		hl,EndTestInstance
   46 00:000C CD 06 08 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 60 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 D5 01 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD AC 0E 00 		call 	SYSPrintChar
   56 00:0020 CD AB 0E 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 04 C3 92 
              02 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 05 C3 92 
              02 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  
   24 00:0030 -  -  -  -  ; ***************************************************************************************
   25 00:0030 -  -  -  -  ;
   26 00:0030 -  -  -  -  ;								Defines the current instance
   27 00:0030 -  -  -  -  ;
   28 00:0030 -  -  -  -  ; ***************************************************************************************
   29 00:0030 -  -  -  -  
   30 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 00:0030 00 00 00 00 		.dw 	0,0
   32 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 00:0034 00 00 00 00 		.dw 	0,0		
   34 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 00:0038 00 00 00 00 		.dw 	0,0 							
   36 00:003C -  -  -  -  
   37 00:003C -  -  -  -  ; ***************************************************************************************
   38 00:003C -  -  -  -  ;
   39 00:003C -  -  -  -  ;								Allocatable memory, working down.
   40 00:003C -  -  -  -  ;
   41 00:003C -  -  -  -  ; ***************************************************************************************
   42 00:003C -  -  -  -  
   43 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 00:003C 00 00 00 00 		.dw 	0,0
   45 00:0040 -  -  -  -  
   46 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 00:0040 00 00 00 00 		.dw 	0,0		
   48 00:0044 -  -  -  -  
   49 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 00:0044 00 00 00 00 		.dw 	0,0
   51 00:0048 -  -  -  -  
   52 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   53 00:0048 00 00 00 00 		.dw 	0,0
   54 00:004C -  -  -  -  
   55 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   56 00:004C 00 00 00 00 		.dw 	0,0		
   57 00:0050 -  -  -  -  
   58 00:0050 -  -  -  -  ;
   59 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   60 00:0050 -  -  -  -  ;
   61 00:0050 -  -  -  -  
   62 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   63 00:0050 00 00 00 00 		.dw 	0,0
   64 00:0054 -  -  -  -  		
   65 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   66 00:0054 00 00 00 00 		.dw 	0,0
   67 00:0058 -  -  -  -  
   68 00:0058 -  -  -  -  ; ***************************************************************************************
   69 00:0058 -  -  -  -  ;
   70 00:0058 -  -  -  -  ;										Run variables
   71 00:0058 -  -  -  -  ;
   72 00:0058 -  -  -  -  ; ***************************************************************************************
   73 00:0058 -  -  -  -  
   74 00:0058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   75 00:0058 00 00 00 00 		.dw 	0,0
   76 00:005C -  -  -  -  		
   77 00:005C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   78 00:005C 00 00 00 00 		.dw 	0,0
   79 00:0060 -  -  -  -  
   80 00:0060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   81 00:0060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   82 00:0066 -  -  -  -  
   83 00:0066 -  -  -  -  AConvert: 									; used for address conversions.
   84 00:0066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   85 00:006C -  -  -  -  		
   86 00:006C -  -  -  -  RandomSeed: 								; random number seeds.
   87 00:006C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   88 00:007C -  -  -  -  
   89 00:007C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   90 00:007C 00 00 -  -  		.dw 	0
   91 00:007E -  -  -  -  
   92 00:007E -  -  -  -  ; ***************************************************************************************
   93 00:007E -  -  -  -  ;
   94 00:007E -  -  -  -  ;									Variable Information
   95 00:007E -  -  -  -  ;
   96 00:007E -  -  -  -  ; ***************************************************************************************
   97 00:007E -  -  -  -  
   98 00:007E -  -  -  -  VarNameStart: 								; first byte of name
   99 00:007E 00 00 00 00 		.dw 	0,0
  100 00:0082 -  -  -  -  VarHash: 									; name hash value
  101 00:0082 00 00 -  -  		.dw 	0		
  102 00:0084 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  103 00:0084 00 00 00 00 		.dw 	0,0
  104 00:0088 -  -  -  -  		
  105 00:0088 -  -  -  -  ; ***************************************************************************************
  106 00:0088 -  -  -  -  ;
  107 00:0088 -  -  -  -  ;										  Buffers
  108 00:0088 -  -  -  -  ;
  109 00:0088 -  -  -  -  ; ***************************************************************************************
  110 00:0088 -  -  -  -  
  111 00:0088 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  112 00:0088 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  113 00:0098 -  -  -  -  
  114 00:0098 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  115 00:0098 00 00 -  -  		.dw 	0
  116 00:009A -  -  -  -  
  117 00:009A -  -  -  -  ConvertBuffer: 								; general usage
  118 00:009A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  119 00:00DA -  -  -  -  
  120 00:00DA -  -  -  -  ; ***************************************************************************************
  121 00:00DA -  -  -  -  ;
  122 00:00DA -  -  -  -  ;									Changes and Updates
  123 00:00DA -  -  -  -  ;
  124 00:00DA -  -  -  -  ; ***************************************************************************************
  125 00:00DA -  -  -  -  ;
  126 00:00DA -  -  -  -  ;		Date			Notes
  127 00:00DA -  -  -  -  ;		==== 			=====
  128 00:00DA -  -  -  -  ;
  129 00:00DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00DA -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00DA -  -  -  -  ; ***************************************************************************************
    2 00:00DA -  -  -  -  ; ***************************************************************************************
    3 00:00DA -  -  -  -  ;
    4 00:00DA -  -  -  -  ;		Name : 		assert.asm
    5 00:00DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DA -  -  -  -  ;		Reviewed :	No
    8 00:00DA -  -  -  -  ;		Purpose :	Assert command
    9 00:00DA -  -  -  -  ;
   10 00:00DA -  -  -  -  ; ***************************************************************************************
   11 00:00DA -  -  -  -  ; ***************************************************************************************
   12 00:00DA -  -  -  -  
   13 00:00DA -  -  -  -  ; ***************************************************************************************
   14 00:00DA -  -  -  -  ;
   15 00:00DA -  -  -  -  ;									ASSERT command
   16 00:00DA -  -  -  -  ;
   17 00:00DA -  -  -  -  ; ***************************************************************************************
   18 00:00DA -  -  -  -  
   19 00:00DA -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00DA CD C5 04 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00DE 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00E4 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00E5 3E 01 C3 92 
              02 00 -  -  		ERR_ASSERT
   24 00:00EB -  -  -  -  
   25 00:00EB -  -  -  -  ; ***************************************************************************************
   26 00:00EB -  -  -  -  ;
   27 00:00EB -  -  -  -  ;									Changes and Updates
   28 00:00EB -  -  -  -  ;
   29 00:00EB -  -  -  -  ; ***************************************************************************************
   30 00:00EB -  -  -  -  ;
   31 00:00EB -  -  -  -  ;		Date			Notes
   32 00:00EB -  -  -  -  ;		==== 			=====
   33 00:00EB -  -  -  -  ;
   34 00:00EB -  -  -  -  ; ***************************************************************************************
   35 00:00EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:00EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00EB -  -  -  -  ; ***************************************************************************************
    2 00:00EB -  -  -  -  ; ***************************************************************************************
    3 00:00EB -  -  -  -  ;
    4 00:00EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00EB -  -  -  -  ;		Reviewed :	No
    8 00:00EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00EB -  -  -  -  ;
   10 00:00EB -  -  -  -  ; ***************************************************************************************
   11 00:00EB -  -  -  -  ; ***************************************************************************************
   12 00:00EB -  -  -  -  
   13 00:00EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00EB -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 00:00EB -  -  -  -  BadCmd_To: 			;; [to]
   19 00:00EB C3 FC 02 00 		jp 		SyntaxError
   20 00:00EF -  -  -  -  
   21 00:00EF -  -  -  -  ; ***************************************************************************************
   22 00:00EF -  -  -  -  ;
   23 00:00EF -  -  -  -  ;									Changes and Updates
   24 00:00EF -  -  -  -  ;
   25 00:00EF -  -  -  -  ; ***************************************************************************************
   26 00:00EF -  -  -  -  ;
   27 00:00EF -  -  -  -  ;		Date			Notes
   28 00:00EF -  -  -  -  ;		==== 			=====
   29 00:00EF -  -  -  -  ;
   30 00:00EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00EF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00EF -  -  -  -  ; ***************************************************************************************
    2 00:00EF -  -  -  -  ; ***************************************************************************************
    3 00:00EF -  -  -  -  ;
    4 00:00EF -  -  -  -  ;		Name : 		colon.asm
    5 00:00EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00EF -  -  -  -  ;		Reviewed :	No
    8 00:00EF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00EF -  -  -  -  ;
   10 00:00EF -  -  -  -  ; ***************************************************************************************
   11 00:00EF -  -  -  -  ; ***************************************************************************************
   12 00:00EF -  -  -  -  
   13 00:00EF -  -  -  -  ; ***************************************************************************************
   14 00:00EF -  -  -  -  ;
   15 00:00EF -  -  -  -  ;								Colon command, this is ignored.
   16 00:00EF -  -  -  -  ;
   17 00:00EF -  -  -  -  ; ***************************************************************************************
   18 00:00EF -  -  -  -  
   19 00:00EF -  -  -  -  Command_Colon: 	;; [:]
   20 00:00EF C9 -  -  -  		ret
   21 00:00F0 -  -  -  -  
   22 00:00F0 -  -  -  -  ; ***************************************************************************************
   23 00:00F0 -  -  -  -  ;
   24 00:00F0 -  -  -  -  ;									Changes and Updates
   25 00:00F0 -  -  -  -  ;
   26 00:00F0 -  -  -  -  ; ***************************************************************************************
   27 00:00F0 -  -  -  -  ;
   28 00:00F0 -  -  -  -  ;		Date			Notes
   29 00:00F0 -  -  -  -  ;		==== 			=====
   30 00:00F0 -  -  -  -  ;
   31 00:00F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F0 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:00F0 -  -  -  -  ; ***************************************************************************************
    2 00:00F0 -  -  -  -  ; ***************************************************************************************
    3 00:00F0 -  -  -  -  ;
    4 00:00F0 -  -  -  -  ;		Name : 		end.asm
    5 00:00F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F0 -  -  -  -  ;		Reviewed :	No
    8 00:00F0 -  -  -  -  ;		Purpose :	End command
    9 00:00F0 -  -  -  -  ;
   10 00:00F0 -  -  -  -  ; ***************************************************************************************
   11 00:00F0 -  -  -  -  ; ***************************************************************************************
   12 00:00F0 -  -  -  -  
   13 00:00F0 -  -  -  -  ; ***************************************************************************************
   14 00:00F0 -  -  -  -  ;
   15 00:00F0 -  -  -  -  ;										END command
   16 00:00F0 -  -  -  -  ;
   17 00:00F0 -  -  -  -  ; ***************************************************************************************
   18 00:00F0 -  -  -  -  
   19 00:00F0 -  -  -  -  Command_END: 	;; [end]
   20 00:00F0 3E 00 C3 92 
              02 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:00F6 -  -  -  -  
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  ;
   24 00:00F6 -  -  -  -  ;									Changes and Updates
   25 00:00F6 -  -  -  -  ;
   26 00:00F6 -  -  -  -  ; ***************************************************************************************
   27 00:00F6 -  -  -  -  ;
   28 00:00F6 -  -  -  -  ;		Date			Notes
   29 00:00F6 -  -  -  -  ;		==== 			=====
   30 00:00F6 -  -  -  -  ;
   31 00:00F6 -  -  -  -  ; ***************************************************************************************
   32 00:00F6 -  -  -  -  		
Listing for file "_build.asm"
   17 00:00F6 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:00F6 -  -  -  -  ; ***************************************************************************************
    2 00:00F6 -  -  -  -  ; ***************************************************************************************
    3 00:00F6 -  -  -  -  ;
    4 00:00F6 -  -  -  -  ;		Name : 		endofline.asm
    5 00:00F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F6 -  -  -  -  ;		Reviewed :	None
    8 00:00F6 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:00F6 -  -  -  -  ;
   10 00:00F6 -  -  -  -  ; ***************************************************************************************
   11 00:00F6 -  -  -  -  ; ***************************************************************************************
   12 00:00F6 -  -  -  -  
   13 00:00F6 -  -  -  -  ; ***************************************************************************************
   14 00:00F6 -  -  -  -  ;
   15 00:00F6 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:00F6 -  -  -  -  ;
   17 00:00F6 -  -  -  -  ; ***************************************************************************************
   18 00:00F6 -  -  -  -  
   19 00:00F6 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:00F6 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:00FB 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:00FF DD 5E 00 -  		ld 		e,(ix+0)
   23 00:0102 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:0104 -  -  -  -  		;
   25 00:0104 ED 7B 5C 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:0109 C3 E8 01 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:010D -  -  -  -  
   28 00:010D -  -  -  -  ; ***************************************************************************************
   29 00:010D -  -  -  -  ;
   30 00:010D -  -  -  -  ;									Changes and Updates
   31 00:010D -  -  -  -  ;
   32 00:010D -  -  -  -  ; ***************************************************************************************
   33 00:010D -  -  -  -  ;
   34 00:010D -  -  -  -  ;		Date			Notes
   35 00:010D -  -  -  -  ;		==== 			=====
   36 00:010D -  -  -  -  ;
   37 00:010D -  -  -  -  ; ***************************************************************************************
   38 00:010D -  -  -  -  		
Listing for file "_build.asm"
   18 00:010D -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:010D -  -  -  -  ; ***************************************************************************************
    2 00:010D -  -  -  -  ; ***************************************************************************************
    3 00:010D -  -  -  -  ;
    4 00:010D -  -  -  -  ;		Name : 		let.asm
    5 00:010D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:010D -  -  -  -  ;		Date : 		4th June 2022
    7 00:010D -  -  -  -  ;		Reviewed :	No
    8 00:010D -  -  -  -  ;		Purpose :	Assignment statement
    9 00:010D -  -  -  -  ;
   10 00:010D -  -  -  -  ; ***************************************************************************************
   11 00:010D -  -  -  -  ; ***************************************************************************************
   12 00:010D -  -  -  -  
   13 00:010D -  -  -  -  ; ***************************************************************************************
   14 00:010D -  -  -  -  ;
   15 00:010D -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:010D -  -  -  -  ;
   17 00:010D -  -  -  -  ; ***************************************************************************************
   18 00:010D -  -  -  -  
   19 00:010D -  -  -  -  Command_LET: 	;; [let]
   20 00:010D DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:0110 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:0112 28 2F -  -  		jr 		z,_CLString
   23 00:0114 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:0116 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:0118 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:011A 32 7C 00 00 		ld 		(AllowAutoCreate),a
   27 00:011E -  -  -  -  _CLNoAuto:
   28 00:011E 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:0120 CD 47 04 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:0124 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:0126 CA FC 02 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:012A E5 -  -  -  		push 	hl 							; save address on stack
   33 00:012B C5 -  -  -  		push 	bc 							; save type on stack
   34 00:012C AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:012D 32 7C 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:0131 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:0133 CD 86 02 00 		call 	CheckNextA
   38 00:0137 -  -  -  -  
   39 00:0137 CD BD 04 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:013B -  -  -  -  
   41 00:013B D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:013C 43 -  -  -  		ld 		b,e 						
   43 00:013D D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:013E -  -  -  -  		;
   45 00:013E -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:013E -  -  -  -  		;
   47 00:013E CD 4B 01 00 		call 	WriteHLToDE
   48 00:0142 C9 -  -  -  		ret
   49 00:0143 -  -  -  -  		;
   50 00:0143 -  -  -  -  		; 		String assignment code.
   51 00:0143 -  -  -  -  		;
   52 00:0143 -  -  -  -  _CLString:
   53 00:0143 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:014B -  -  -  -  
   55 00:014B -  -  -  -  ; ***************************************************************************************
   56 00:014B -  -  -  -  ;
   57 00:014B -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:014B -  -  -  -  ;
   59 00:014B -  -  -  -  ; ***************************************************************************************
   60 00:014B -  -  -  -  
   61 00:014B -  -  -  -  WriteHLToDE:
   62 00:014B CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:014D C2 F0 02 00 		jp 		nz,TypeMismatch
   64 00:0151 -  -  -  -  		;
   65 00:0151 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:0151 -  -  -  -  		;		
   67 00:0151 -  -  -  -  _WHDWriteNumber:
   68 00:0151 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:0152 D9 -  -  -  		exx
   70 00:0153 EB -  -  -  		ex 		de,hl
   71 00:0154 D9 -  -  -  		exx
   72 00:0155 -  -  -  -  
   73 00:0155 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:0156 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:0157 72 -  -  -  		ld 		(hl),d
   76 00:0158 23 -  -  -  		inc 	hl
   77 00:0159 E5 -  -  -  		push 	hl
   78 00:015A D9 -  -  -  		exx
   79 00:015B E1 -  -  -  		pop 	hl
   80 00:015C 73 -  -  -  		ld 		(hl),e
   81 00:015D 23 -  -  -  		inc 	hl
   82 00:015E 72 -  -  -  		ld 		(hl),d
   83 00:015F D9 -  -  -  		exx
   84 00:0160 -  -  -  -  
   85 00:0160 C9 -  -  -  		ret
   86 00:0161 -  -  -  -  
   87 00:0161 -  -  -  -  ; ***************************************************************************************
   88 00:0161 -  -  -  -  ;
   89 00:0161 -  -  -  -  ;									Changes and Updates
   90 00:0161 -  -  -  -  ;
   91 00:0161 -  -  -  -  ; ***************************************************************************************
   92 00:0161 -  -  -  -  ;
   93 00:0161 -  -  -  -  ;		Date			Notes
   94 00:0161 -  -  -  -  ;		==== 			=====
   95 00:0161 -  -  -  -  ;
   96 00:0161 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 00:0161 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0161 -  -  -  -  ; ***************************************************************************************
    2 00:0161 -  -  -  -  ; ***************************************************************************************
    3 00:0161 -  -  -  -  ;
    4 00:0161 -  -  -  -  ;		Name : 		print.asm
    5 00:0161 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0161 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0161 -  -  -  -  ;		Reviewed :	No
    8 00:0161 -  -  -  -  ;		Purpose :	Print command
    9 00:0161 -  -  -  -  ;
   10 00:0161 -  -  -  -  ; ***************************************************************************************
   11 00:0161 -  -  -  -  ; ***************************************************************************************
   12 00:0161 -  -  -  -  
   13 00:0161 -  -  -  -  ; ***************************************************************************************
   14 00:0161 -  -  -  -  ;
   15 00:0161 -  -  -  -  ;										PRINT command
   16 00:0161 -  -  -  -  ;
   17 00:0161 -  -  -  -  ; ***************************************************************************************
   18 00:0161 -  -  -  -  
   19 00:0161 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0161 -  -  -  -  		;
   21 00:0161 -  -  -  -  		;		Main loop
   22 00:0161 -  -  -  -  		;
   23 00:0161 -  -  -  -  _CPRLoop:
   24 00:0161 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:0164 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:0166 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:0168 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:016A 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:016C FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:016E 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:0170 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:0172 28 2C -  -  		jr 		z,_CPRTab
   33 00:0174 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:0176 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:0178 -  -  -  -  		;
   36 00:0178 CD BD 04 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:017C CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:017E 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:0180 -  -  -  -  		;
   40 00:0180 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:0182 -  -  -  -  _CPRPrintNumber:
   42 00:0182 F5 -  -  -  		push 	af 							; print leading space
   43 00:0183 3E 20 -  -  		ld 		a,' '
   44 00:0185 CD AC 0E 00 		call 	SYSPrintChar
   45 00:0189 F1 -  -  -  		pop 	af
   46 00:018A 01 9A 00 00 		ld  	bc,ConvertBuffer
   47 00:018E C5 -  -  -  		push 	bc
   48 00:018F CD 5D 0E 00 		call 	Int32ToString 				; convert to string
   49 00:0193 E1 -  -  -  		pop 	hl
   50 00:0194 -  -  -  -  		;
   51 00:0194 -  -  -  -  		; 		Print text at HL.
   52 00:0194 -  -  -  -  		;
   53 00:0194 -  -  -  -  _CPRPrintHL:
   54 00:0194 CD 25 08 00 		call 	PrintStringAtHL 			; print string out
   55 00:0198 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:019A -  -  -  -  		;
   57 00:019A -  -  -  -  		; 		New line (')
   58 00:019A -  -  -  -  		;
   59 00:019A -  -  -  -  _CPRNewLine:
   60 00:019A CD AD 0E 00 		call 	SYSPrintCRLF
   61 00:019E 18 06 -  -  		jr 		_CPRCheckNext
   62 00:01A0 -  -  -  -  		;
   63 00:01A0 -  -  -  -  		; 		Tab command (,)
   64 00:01A0 -  -  -  -  		;
   65 00:01A0 -  -  -  -  _CPRTab:
   66 00:01A0 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:01A2 CD AC 0E 00 		call 	SYSPrintChar
   68 00:01A6 -  -  -  -  		;
   69 00:01A6 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:01A6 -  -  -  -  		;
   71 00:01A6 -  -  -  -  _CPRCheckNext:
   72 00:01A6 DD 23 -  -  		inc 	ix 							; consume current
   73 00:01A8 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:01AB FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:01AD C8 -  -  -  		ret 	z
   76 00:01AE FE A7 -  -  		cp 		KWD_COLON
   77 00:01B0 C8 -  -  -  		ret 	z
   78 00:01B1 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:01B3 -  -  -  -  		;
   80 00:01B3 -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:01B3 -  -  -  -  		;
   82 00:01B3 -  -  -  -  _CPRExitNL:
   83 00:01B3 CD AD 0E 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:01B7 C9 -  -  -  		ret
Listing for file "_build.asm"
   20 00:01B8 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:01B8 -  -  -  -  ; ***************************************************************************************
    2 00:01B8 -  -  -  -  ; ***************************************************************************************
    3 00:01B8 -  -  -  -  ;
    4 00:01B8 -  -  -  -  ;		Name : 		rem.asm
    5 00:01B8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01B8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01B8 -  -  -  -  ;		Reviewed :	No
    8 00:01B8 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:01B8 -  -  -  -  ;
   10 00:01B8 -  -  -  -  ; ***************************************************************************************
   11 00:01B8 -  -  -  -  ; ***************************************************************************************
   12 00:01B8 -  -  -  -  
   13 00:01B8 -  -  -  -  ; ***************************************************************************************
   14 00:01B8 -  -  -  -  ;
   15 00:01B8 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:01B8 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:01B8 -  -  -  -  ;
   18 00:01B8 -  -  -  -  ; ***************************************************************************************
   19 00:01B8 -  -  -  -  
   20 00:01B8 -  -  -  -  Command_REM: 	;; [rem]
   21 00:01B8 -  -  -  -  Command_REM2: 	;; [']
   22 00:01B8 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:01BB DD 23 -  -  		inc 	ix
   24 00:01BD FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:01BF C8 -  -  -  		ret 	z
   26 00:01C0 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:01C2 C8 -  -  -  		ret 	z
   28 00:01C3 FE 3F -  -  		cp 		STRING_MARKER
   29 00:01C5 C2 FC 02 00 		jp 		nz,SyntaxError
   30 00:01C9 -  -  -  -  		;		
   31 00:01C9 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:01CD DD 5E 00 -  		ld 		e,(ix+0)
   33 00:01D0 13 -  -  -  		inc 	de 
   34 00:01D1 13 -  -  -  		inc 	de
   35 00:01D2 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:01D4 C9 -  -  -  		ret
   37 00:01D5 -  -  -  -  
   38 00:01D5 -  -  -  -  ; ***************************************************************************************
   39 00:01D5 -  -  -  -  ;
   40 00:01D5 -  -  -  -  ;									Changes and Updates
   41 00:01D5 -  -  -  -  ;
   42 00:01D5 -  -  -  -  ; ***************************************************************************************
   43 00:01D5 -  -  -  -  ;
   44 00:01D5 -  -  -  -  ;		Date			Notes
   45 00:01D5 -  -  -  -  ;		==== 			=====
   46 00:01D5 -  -  -  -  ;
   47 00:01D5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:01D5 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:01D5 -  -  -  -  ; ***************************************************************************************
    2 00:01D5 -  -  -  -  ; ***************************************************************************************
    3 00:01D5 -  -  -  -  ;
    4 00:01D5 -  -  -  -  ;		Name : 		run.asm
    5 00:01D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01D5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01D5 -  -  -  -  ;		Reviewed :	No
    8 00:01D5 -  -  -  -  ;		Purpose :	Run command
    9 00:01D5 -  -  -  -  ;
   10 00:01D5 -  -  -  -  ; ***************************************************************************************
   11 00:01D5 -  -  -  -  ; ***************************************************************************************
   12 00:01D5 -  -  -  -  
   13 00:01D5 -  -  -  -  ; ***************************************************************************************
   14 00:01D5 -  -  -  -  ;
   15 00:01D5 -  -  -  -  ;										RUN command
   16 00:01D5 -  -  -  -  ;
   17 00:01D5 -  -  -  -  ; ***************************************************************************************
   18 00:01D5 -  -  -  -  
   19 00:01D5 -  -  -  -  Command_RUN: 	;; [run]
   20 00:01D5 CD B7 07 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:01D9 -  -  -  -  
   22 00:01D9 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:01DE ED 73 5C 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:01E3 AF -  -  -  		xor 	a
   25 00:01E4 32 7C 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:01E8 -  -  -  -  		;
   27 00:01E8 -  -  -  -  		; 		New line at IX.
   28 00:01E8 -  -  -  -  		;
   29 00:01E8 -  -  -  -  CRNewLine:
   30 00:01E8 DD 22 58 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:01ED -  -  -  -  		;
   32 00:01ED DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:01F0 B7 -  -  -  		or 		a
   34 00:01F1 CA F0 00 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:01F5 -  -  -  -  		;
   36 00:01F5 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:01F7 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:01F9 DD 23 -  -  		inc 	ix
   39 00:01FB -  -  -  -  		;
   40 00:01FB -  -  -  -  		; 		New command at IX
   41 00:01FB -  -  -  -  		;
   42 00:01FB -  -  -  -  _CRNewCommand:	
   43 00:01FB DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:01FE B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:01FF F2 3A 02 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:0203 -  -  -  -  		;
   47 00:0203 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:0205 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:0207 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:0209 D2 2A 02 00 		jp 		nc,_CRAlternateLets
   51 00:020D -  -  -  -  		;
   52 00:020D -  -  -  -  _CRDoCommand:		
   53 00:020D E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:0222 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:0224 CD 60 00 00 		call 	JumpCode 					; call the routine.
   56 00:0228 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:022A -  -  -  -  		;
   58 00:022A -  -  -  -  		; 		Do CALL (HL)
   59 00:022A -  -  -  -  		;
   60 00:022A -  -  -  -  		;
   61 00:022A -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:022A -  -  -  -  		;		
   63 00:022A -  -  -  -  _CRAlternateLets:		
   64 00:022A FE 83 -  -  		cp 		KWD_PLING
   65 00:022C 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:022E FE 84 -  -  		cp 		KWD_QMARK
   67 00:0230 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:0232 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:0234 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:0236 C3 FC 02 00 		jp 		SyntaxError
   71 00:023A -  -  -  -  		;
   72 00:023A -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:023A -  -  -  -  		;
   74 00:023A -  -  -  -  _CRAssignmentHandler:		
   75 00:023A FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:023C D2 FC 02 00 		jp 		nc,SyntaxError
   77 00:0240 -  -  -  -  _CRAssignmentLet:		
   78 00:0240 CD 0D 01 00 		call	Command_LET 				; do LET.
   79 00:0244 C3 FB 01 00 		jp 		_CRNewCommand
   80 00:0248 -  -  -  -  
   81 00:0248 -  -  -  -  ; ***************************************************************************************
   82 00:0248 -  -  -  -  ;
   83 00:0248 -  -  -  -  ;									Changes and Updates
   84 00:0248 -  -  -  -  ;
   85 00:0248 -  -  -  -  ; ***************************************************************************************
   86 00:0248 -  -  -  -  ;
   87 00:0248 -  -  -  -  ;		Date			Notes
   88 00:0248 -  -  -  -  ;		==== 			=====
   89 00:0248 -  -  -  -  ;
   90 00:0248 -  -  -  -  ; ***************************************************************************************
   91 00:0248 -  -  -  -  		
Listing for file "_build.asm"
   22 00:0248 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0248 -  -  -  -  ; ***************************************************************************************
    2 00:0248 -  -  -  -  ; ***************************************************************************************
    3 00:0248 -  -  -  -  ;
    4 00:0248 -  -  -  -  ;		Name : 		stop.asm
    5 00:0248 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0248 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0248 -  -  -  -  ;		Reviewed :	No
    8 00:0248 -  -  -  -  ;		Purpose :	Stop command
    9 00:0248 -  -  -  -  ;
   10 00:0248 -  -  -  -  ; ***************************************************************************************
   11 00:0248 -  -  -  -  ; ***************************************************************************************
   12 00:0248 -  -  -  -  
   13 00:0248 -  -  -  -  ; ***************************************************************************************
   14 00:0248 -  -  -  -  ;
   15 00:0248 -  -  -  -  ;										STOP command
   16 00:0248 -  -  -  -  ;
   17 00:0248 -  -  -  -  ; ***************************************************************************************
   18 00:0248 -  -  -  -  
   19 00:0248 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0248 3E 0C C3 92 
              02 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:024E -  -  -  -  
   22 00:024E -  -  -  -  ; ***************************************************************************************
   23 00:024E -  -  -  -  ;
   24 00:024E -  -  -  -  ;									Changes and Updates
   25 00:024E -  -  -  -  ;
   26 00:024E -  -  -  -  ; ***************************************************************************************
   27 00:024E -  -  -  -  ;
   28 00:024E -  -  -  -  ;		Date			Notes
   29 00:024E -  -  -  -  ;		==== 			=====
   30 00:024E -  -  -  -  ;
   31 00:024E -  -  -  -  ; ***************************************************************************************
   32 00:024E -  -  -  -  		
Listing for file "_build.asm"
   23 00:024E -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:024E -  -  -  -  ; ***************************************************************************************
    2 00:024E -  -  -  -  ; ***************************************************************************************
    3 00:024E -  -  -  -  ;
    4 00:024E -  -  -  -  ;		Name : 		charcheck.asm
    5 00:024E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:024E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:024E -  -  -  -  ;		Reviewed :	No
    8 00:024E -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:024E -  -  -  -  ;
   10 00:024E -  -  -  -  ; ***************************************************************************************
   11 00:024E -  -  -  -  ; ***************************************************************************************
   12 00:024E -  -  -  -  
   13 00:024E -  -  -  -  ; ***************************************************************************************
   14 00:024E -  -  -  -  ;
   15 00:024E -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:024E -  -  -  -  ;
   17 00:024E -  -  -  -  ; ***************************************************************************************
   18 00:024E -  -  -  -  
   19 00:024E -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:024E             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:024E             		inc 	ix
   22 00:024E             		cp 		ch 							; exit if matches
   23 00:024E             		ret 	z
   24 00:024E             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:024E             		jp 		ErrorHandler
   26 00:024E             #endmacro
   27 00:024E -  -  -  -  
   28 00:024E -  -  -  -  CheckLeftBracket:
   29 00:024E DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 92 
              02 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:025C -  -  -  -  
   31 00:025C -  -  -  -  CheckRightBracket:
   32 00:025C DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 92 
              02 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:026A -  -  -  -  
   34 00:026A -  -  -  -  CheckDollar:
   35 00:026A DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 92 
              02 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0278 -  -  -  -  		
   37 00:0278 -  -  -  -  CheckComma:
   38 00:0278 DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 92 
              02 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0286 -  -  -  -  
   40 00:0286 -  -  -  -  ; ***************************************************************************************
   41 00:0286 -  -  -  -  ;
   42 00:0286 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0286 -  -  -  -  ;
   44 00:0286 -  -  -  -  ; ***************************************************************************************
   45 00:0286 -  -  -  -  
   46 00:0286 -  -  -  -  CheckNextA:
   47 00:0286 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0289 DD 23 -  -  		inc 	ix 							; skip character
   49 00:028B C8 -  -  -  		ret 	z 							; yes, okay
   50 00:028C 3E 0D C3 92 
              02 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0292 -  -  -  -  		
   52 00:0292 -  -  -  -  ; ***************************************************************************************
   53 00:0292 -  -  -  -  ;
   54 00:0292 -  -  -  -  ;									Changes and Updates
   55 00:0292 -  -  -  -  ;
   56 00:0292 -  -  -  -  ; ***************************************************************************************
   57 00:0292 -  -  -  -  ;
   58 00:0292 -  -  -  -  ;		Date			Notes
   59 00:0292 -  -  -  -  ;		==== 			=====
   60 00:0292 -  -  -  -  ;
   61 00:0292 -  -  -  -  ; ***************************************************************************************
   62 00:0292 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0292 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0292 -  -  -  -  ; ***************************************************************************************
    2 00:0292 -  -  -  -  ; ***************************************************************************************
    3 00:0292 -  -  -  -  ;
    4 00:0292 -  -  -  -  ;		Name : 		errors.asm
    5 00:0292 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0292 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0292 -  -  -  -  ;		Reviewed :	No
    8 00:0292 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0292 -  -  -  -  ;
   10 00:0292 -  -  -  -  ; ***************************************************************************************
   11 00:0292 -  -  -  -  ; ***************************************************************************************
   12 00:0292 -  -  -  -  
   13 00:0292 -  -  -  -  ; ***************************************************************************************
   14 00:0292 -  -  -  -  ;
   15 00:0292 -  -  -  -  ;								Error handler, message A 
   16 00:0292 -  -  -  -  ;
   17 00:0292 -  -  -  -  ; ***************************************************************************************
   18 00:0292 -  -  -  -  
   19 00:0292 -  -  -  -  ErrorHandler:
   20 00:0292 F5 -  -  -  		push 	af 						; save error ID
   21 00:0293 -  -  -  -  
   22 00:0293 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0297 6F -  -  -  		ld 		l,a
   24 00:0298 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0299 29 -  -  -  		add 	hl,hl 		
   26 00:029A 11 51 0A 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:029E 19 -  -  -  		add 	hl,de
   28 00:029F ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:02A1 CD 25 08 00 		call 	PrintStringAtHL
   30 00:02A5 -  -  -  -  		;
   31 00:02A5 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:02A6 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:02A7 28 2F -  -  		jr 		z,_EHExit
   34 00:02A9 -  -  -  -  		;
   35 00:02A9 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:02AE DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:02B1 B7 -  -  -  		or 		a
   38 00:02B2 28 24 -  -  		jr 		z,_EHExit
   39 00:02B4 -  -  -  -  
   40 00:02B4 21 E0 02 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:02B8 CD 25 08 00 		call 	PrintStringAtHL 
   42 00:02BC -  -  -  -  		
   43 00:02BC D9 -  -  -  		exx								; HL'HL = line number
   44 00:02BD 21 00 00 00 		ld 		hl,$0000 		
   45 00:02C1 D9 -  -  -  		exx 
   46 00:02C2 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:02C5 DD 66 02 -  		ld 		h,(ix+2)
   48 00:02C8 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:02CA 01 9A 00 00 		ld 		bc,ConvertBuffer
   50 00:02CE CD 5D 0E 00 		call 	Int32ToString
   51 00:02D2 C5 -  -  -  		push 	bc
   52 00:02D3 E1 -  -  -  		pop 	hl
   53 00:02D4 CD 25 08 00 		call 	PrintStringAtHL			; print error line number.
   54 00:02D8 -  -  -  -  _EHExit:		
   55 00:02D8 CD AD 0E 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:02DC C3 1A 00 00 		jp 		WarmStart
   57 00:02E0 -  -  -  -  
   58 00:02E0 -  -  -  -  _EHAtText:
   59 00:02E0 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:02EA -  -  -  -  
   61 00:02EA -  -  -  -  NotImplemented:
   62 00:02EA 3E 04 C3 92 
              02 00 -  -  		ERR_DISABLED
   63 00:02F0 -  -  -  -  TypeMismatch:
   64 00:02F0 3E 02 C3 92 
              02 00 -  -  		ERR_BADTYPE
   65 00:02F6 -  -  -  -  BadValue:
   66 00:02F6 3E 03 C3 92 
              02 00 -  -  		ERR_BADVALUE
   67 00:02FC -  -  -  -  SyntaxError:
   68 00:02FC 3E 0D C3 92 
              02 00 -  -  		ERR_SYNTAX
   69 00:0302 -  -  -  -  						
   70 00:0302 -  -  -  -  ; ***************************************************************************************
   71 00:0302 -  -  -  -  ;
   72 00:0302 -  -  -  -  ;									Changes and Updates
   73 00:0302 -  -  -  -  ;
   74 00:0302 -  -  -  -  ; ***************************************************************************************
   75 00:0302 -  -  -  -  ;
   76 00:0302 -  -  -  -  ;		Date			Notes
   77 00:0302 -  -  -  -  ;		==== 			=====
   78 00:0302 -  -  -  -  ;
   79 00:0302 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 00:0302 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:0302 -  -  -  -  ; ***************************************************************************************
    2 00:0302 -  -  -  -  ; ***************************************************************************************
    3 00:0302 -  -  -  -  ;
    4 00:0302 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:0302 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0302 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0302 -  -  -  -  ;		Reviewed :	No
    8 00:0302 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:0302 -  -  -  -  ;
   10 00:0302 -  -  -  -  ; ***************************************************************************************
   11 00:0302 -  -  -  -  ; ***************************************************************************************
   12 00:0302 -  -  -  -  
   13 00:0302 -  -  -  -  ; ***************************************************************************************
   14 00:0302 -  -  -  -  ;
   15 00:0302 -  -  -  -  ; 									Addition
   16 00:0302 -  -  -  -  ;
   17 00:0302 -  -  -  -  ; ***************************************************************************************
   18 00:0302 -  -  -  -  
   19 00:0302 -  -  -  -  ALUAdd: 		;; [+]
   20 00:0302 CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 DC 
              0D 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:0310 -  -  -  -  
   22 00:0310 -  -  -  -  ; ***************************************************************************************
   23 00:0310 -  -  -  -  ;
   24 00:0310 -  -  -  -  ; 									Subtraction
   25 00:0310 -  -  -  -  ;
   26 00:0310 -  -  -  -  ; ***************************************************************************************
   27 00:0310 -  -  -  -  
   28 00:0310 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:0310 CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 E4 
              0D 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:031E -  -  -  -  
   31 00:031E -  -  -  -  ; ***************************************************************************************
   32 00:031E -  -  -  -  ;
   33 00:031E -  -  -  -  ; 									  Multiply
   34 00:031E -  -  -  -  ;
   35 00:031E -  -  -  -  ; ***************************************************************************************
   36 00:031E -  -  -  -  
   37 00:031E -  -  -  -  ALUMultiply: 	;; [*]
   38 00:031E CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 A3 
              0D 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:032C -  -  -  -  
   40 00:032C -  -  -  -  ; ***************************************************************************************
   41 00:032C -  -  -  -  ;
   42 00:032C -  -  -  -  ; 									  Divide
   43 00:032C -  -  -  -  ;
   44 00:032C -  -  -  -  ; ***************************************************************************************
   45 00:032C -  -  -  -  
   46 00:032C -  -  -  -  ALUDivide: 	;; [/]
   47 00:032C -  -  -  -  ALUDivide2:	;; [div]
   48 00:032C CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 A3 
              0C 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:033A -  -  -  -  
   50 00:033A -  -  -  -  ; ***************************************************************************************
   51 00:033A -  -  -  -  ;
   52 00:033A -  -  -  -  ; 									  Modulus
   53 00:033A -  -  -  -  ;
   54 00:033A -  -  -  -  ; ***************************************************************************************
   55 00:033A -  -  -  -  
   56 00:033A -  -  -  -  ALUModulus: 	;; [mod]
   57 00:033A CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 A6 
              0C 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0348 -  -  -  -  
   59 00:0348 -  -  -  -  ; ***************************************************************************************
   60 00:0348 -  -  -  -  ;
   61 00:0348 -  -  -  -  ; 									  Logical
   62 00:0348 -  -  -  -  ;
   63 00:0348 -  -  -  -  ; ***************************************************************************************
   64 00:0348 -  -  -  -  
   65 00:0348 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0348 CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 EE 
              0D 00 -  -  		IntegerDispatch(Int32And)
   67 00:0356 -  -  -  -  
   68 00:0356 -  -  -  -  ALUOr: 			;; [or]
   69 00:0356 CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 FB 
              0D 00 -  -  		IntegerDispatch(Int32Or)
   70 00:0364 -  -  -  -  
   71 00:0364 -  -  -  -  ALUXor: 		;; [eor]
   72 00:0364 CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 08 
              0E 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:0372 -  -  -  -  
   74 00:0372 -  -  -  -  ; ***************************************************************************************
   75 00:0372 -  -  -  -  ;
   76 00:0372 -  -  -  -  ;									Changes and Updates
   77 00:0372 -  -  -  -  ;
   78 00:0372 -  -  -  -  ; ***************************************************************************************
   79 00:0372 -  -  -  -  ;
   80 00:0372 -  -  -  -  ;		Date			Notes
   81 00:0372 -  -  -  -  ;		==== 			=====
   82 00:0372 -  -  -  -  ;
   83 00:0372 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:0372 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:0372 -  -  -  -  ; ***************************************************************************************
    2 00:0372 -  -  -  -  ; ***************************************************************************************
    3 00:0372 -  -  -  -  ;
    4 00:0372 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:0372 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0372 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0372 -  -  -  -  ;		Reviewed :	No
    8 00:0372 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:0372 -  -  -  -  ;
   10 00:0372 -  -  -  -  ; ***************************************************************************************
   11 00:0372 -  -  -  -  ; ***************************************************************************************
   12 00:0372 -  -  -  -  
   13 00:0372 -  -  -  -  ; ***************************************************************************************
   14 00:0372 -  -  -  -  ;
   15 00:0372 -  -  -  -  ; 									<l> <op> <r>
   16 00:0372 -  -  -  -  ;
   17 00:0372 -  -  -  -  ; ***************************************************************************************
   18 00:0372 -  -  -  -  
   19 00:0372 -  -  -  -  ALULongReference:			;; [!]
   20 00:0372 CD 82 03 00 		call 	BRGetAddress 				; calculate address
   21 00:0376 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0378 CB F9 -  -  		set 	CIsReference,c
   23 00:037A C9 -  -  -  		ret
   24 00:037B -  -  -  -  
   25 00:037B -  -  -  -  ALUByteReference: 			;; [?]
   26 00:037B CD 72 03 00 		call 	ALULongReference
   27 00:037F CB F1 -  -  		set 	CIsByteReference,c
   28 00:0381 C9 -  -  -  		ret
   29 00:0382 -  -  -  -  
   30 00:0382 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0382 CD 1F 04 00 
              78 B1 C2 F0 
              02 00 C3 90 
              03 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0390 -  -  -  -  _BRGAMain:		
   33 00:0390 CD DC 0D 00 		call 	Int32Add 					; address in HL'HL
   34 00:0394 CD 25 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0398 C9 -  -  -  		ret
   36 00:0399 -  -  -  -  
   37 00:0399 -  -  -  -  ; ***************************************************************************************
   38 00:0399 -  -  -  -  ;
   39 00:0399 -  -  -  -  ;									Changes and Updates
   40 00:0399 -  -  -  -  ;
   41 00:0399 -  -  -  -  ; ***************************************************************************************
   42 00:0399 -  -  -  -  ;
   43 00:0399 -  -  -  -  ;		Date			Notes
   44 00:0399 -  -  -  -  ;		==== 			=====
   45 00:0399 -  -  -  -  ;
   46 00:0399 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:0399 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0399 -  -  -  -  ; ***************************************************************************************
    2 00:0399 -  -  -  -  ; ***************************************************************************************
    3 00:0399 -  -  -  -  ;
    4 00:0399 -  -  -  -  ;		Name : 		compare.asm
    5 00:0399 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0399 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0399 -  -  -  -  ;		Reviewed :	No
    8 00:0399 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0399 -  -  -  -  ;
   10 00:0399 -  -  -  -  ; ***************************************************************************************
   11 00:0399 -  -  -  -  ; ***************************************************************************************
   12 00:0399 -  -  -  -  
   13 00:0399 -  -  -  -  #macro compare_equals(n)
   14 00:0399             		call 	CompareBaseCode
   15 00:0399             		cp 		n
   16 00:0399             		jr 		z,UnaryInt32True
   17 00:0399             		jr 		UnaryInt32False
   18 00:0399             #endmacro
   19 00:0399 -  -  -  -  
   20 00:0399 -  -  -  -  #macro compare_not_equals(n)
   21 00:0399             		call 	CompareBaseCode
   22 00:0399             		cp 		n
   23 00:0399             		jr 		nz,UnaryInt32True
   24 00:0399             		jr 		UnaryInt32False
   25 00:0399             #endmacro
   26 00:0399 -  -  -  -  
   27 00:0399 -  -  -  -  ; ***************************************************************************************
   28 00:0399 -  -  -  -  ;
   29 00:0399 -  -  -  -  ; 								Return True/False
   30 00:0399 -  -  -  -  ;
   31 00:0399 -  -  -  -  ; ***************************************************************************************
   32 00:0399 -  -  -  -  
   33 00:0399 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0399 3E FF -  -  		ld 		a,255
   35 00:039B 18 01 -  -  		jr 		_Int32Logical
   36 00:039D -  -  -  -  UnaryInt32False: ;; [false]
   37 00:039D AF -  -  -  		xor 	a
   38 00:039E -  -  -  -  _Int32Logical:
   39 00:039E 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:039F 67 -  -  -  		ld 		h,a
   41 00:03A0 D9 -  -  -  		exx
   42 00:03A1 6F -  -  -  		ld 		l,a
   43 00:03A2 67 -  -  -  		ld 		h,a
   44 00:03A3 D9 -  -  -  		exx
   45 00:03A4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:03A6 C9 -  -  -  		ret
   47 00:03A7 -  -  -  -  
   48 00:03A7 -  -  -  -  ; ***************************************************************************************
   49 00:03A7 -  -  -  -  ;
   50 00:03A7 -  -  -  -  ; 										> = < (compare == value)
   51 00:03A7 -  -  -  -  ;
   52 00:03A7 -  -  -  -  ; ***************************************************************************************
   53 00:03A7 -  -  -  -  
   54 00:03A7 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:03A7 CD E3 03 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:03B1 -  -  -  -  
   57 00:03B1 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:03B1 CD E3 03 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:03BB -  -  -  -  
   60 00:03BB -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:03BB CD E3 03 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:03C5 -  -  -  -  
   63 00:03C5 -  -  -  -  ; ***************************************************************************************
   64 00:03C5 -  -  -  -  ;
   65 00:03C5 -  -  -  -  ; 										> = < (compare <> value)
   66 00:03C5 -  -  -  -  ;
   67 00:03C5 -  -  -  -  ; ***************************************************************************************
   68 00:03C5 -  -  -  -  
   69 00:03C5 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:03C5 CD E3 03 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:03CF -  -  -  -  
   72 00:03CF -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:03CF CD E3 03 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:03D9 -  -  -  -  
   75 00:03D9 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:03D9 CD E3 03 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:03E3 -  -  -  -  
   78 00:03E3 -  -  -  -  ; ***************************************************************************************
   79 00:03E3 -  -  -  -  ;
   80 00:03E3 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:03E3 -  -  -  -  ;
   82 00:03E3 -  -  -  -  ; ***************************************************************************************
   83 00:03E3 -  -  -  -  
   84 00:03E3 -  -  -  -  CompareBaseCode:
   85 00:03E3 CD 1F 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:03E7 -  -  -  -  
   87 00:03E7 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:03E8 A1 -  -  -  		and 	c
   89 00:03E9 CB 47 -  -  		bit 	CIsString,a 
   90 00:03EB C2 FD 03 00 		jp 		nz,StringCompare
   91 00:03EF -  -  -  -  
   92 00:03EF 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:03F0 B1 -  -  -  		or 		c
   94 00:03F1 CB 47 -  -  		bit 	CIsString,a 
   95 00:03F3 CA 1C 0E 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:03F7 -  -  -  -  
   97 00:03F7 3E 02 C3 92 
              02 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:03FD -  -  -  -  ;
   99 00:03FD -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:03FD -  -  -  -  ;
  101 00:03FD -  -  -  -  StringCompare:
  102 00:03FD 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:03FE BE -  -  -  		cp 		(hl)
  104 00:03FF 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0401 20 08 -  -  		jr 		nz,_SCLess
  106 00:0403 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:0404 23 -  -  -  		inc 	hl
  108 00:0405 FE 20 -  -  		cp 		' '
  109 00:0407 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0409 AF -  -  -  		xor 	a 							; return 0.
  111 00:040A C9 -  -  -  		ret
  112 00:040B -  -  -  -  
  113 00:040B -  -  -  -  _SCLess:
  114 00:040B 3E FF -  -  		ld 		a,$FF
  115 00:040D C9 -  -  -  		ret
  116 00:040E -  -  -  -  _SCGreater:
  117 00:040E 3E 01 -  -  		ld 		a,1
  118 00:0410 C9 -  -  -  		ret
  119 00:0411 -  -  -  -  
  120 00:0411 3E 0E C3 92 
              02 00 -  -  		ERR_TODO()
  121 00:0417 -  -  -  -  
  122 00:0417 -  -  -  -  ; ***************************************************************************************
  123 00:0417 -  -  -  -  ;
  124 00:0417 -  -  -  -  ;									Changes and Updates
  125 00:0417 -  -  -  -  ;
  126 00:0417 -  -  -  -  ; ***************************************************************************************
  127 00:0417 -  -  -  -  ;
  128 00:0417 -  -  -  -  ;		Date			Notes
  129 00:0417 -  -  -  -  ;		==== 			=====
  130 00:0417 -  -  -  -  ;
  131 00:0417 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:0417 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0417 -  -  -  -  ; ***************************************************************************************
    2 00:0417 -  -  -  -  ; ***************************************************************************************
    3 00:0417 -  -  -  -  ;
    4 00:0417 -  -  -  -  ;		Name : 		utility.asm
    5 00:0417 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0417 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0417 -  -  -  -  ;		Reviewed :	No
    8 00:0417 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0417 -  -  -  -  ;
   10 00:0417 -  -  -  -  ; ***************************************************************************************
   11 00:0417 -  -  -  -  ; ***************************************************************************************
   12 00:0417 -  -  -  -  
   13 00:0417 -  -  -  -  ; ***************************************************************************************
   14 00:0417 -  -  -  -  ;
   15 00:0417 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0417 -  -  -  -  ;
   17 00:0417 -  -  -  -  ; ***************************************************************************************
   18 00:0417 -  -  -  -  
   19 00:0417 -  -  -  -  SwapHLDE:
   20 00:0417 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0418 D9 -  -  -  			exx
   22 00:0419 EB -  -  -  			ex 		de,hl
   23 00:041A D9 -  -  -  			exx
   24 00:041B 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:041C 41 -  -  -  			ld 		b,c
   26 00:041D 4F -  -  -  			ld 		c,a
   27 00:041E C9 -  -  -  			ret
   28 00:041F -  -  -  -  
   29 00:041F -  -  -  -  ; ***************************************************************************************
   30 00:041F -  -  -  -  ;
   31 00:041F -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:041F -  -  -  -  ;
   33 00:041F -  -  -  -  ; ***************************************************************************************
   34 00:041F -  -  -  -  
   35 00:041F -  -  -  -  DereferenceBoth:
   36 00:041F CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:0421 C4 F8 04 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0425 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0427 C8 -  -  -  			ret 	z
   40 00:0428 CD 17 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:042C CD F8 04 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:0430 CD 17 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:0434 C9 -  -  -  			ret
   44 00:0435 -  -  -  -  
   45 00:0435 -  -  -  -  ; ***************************************************************************************
   46 00:0435 -  -  -  -  ;
   47 00:0435 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:0435 -  -  -  -  ;
   49 00:0435 -  -  -  -  ; ***************************************************************************************
   50 00:0435 -  -  -  -  
   51 00:0435 -  -  -  -  NegateHLHL:	
   52 00:0435 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0437 C2 F0 02 00 			jp 		nz,TypeMismatch
   54 00:043B CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:043D C4 F8 04 00 			call 	nz,Dereference 			; if required.
   56 00:0441 CD 46 0E 00 			call 	Int32Negate
   57 00:0445 C9 -  -  -  			ret
Listing for file "_build.asm"
   29 00:0446 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0446 -  -  -  -  ; ***************************************************************************************
    2 00:0446 -  -  -  -  ; ***************************************************************************************
    3 00:0446 -  -  -  -  ;
    4 00:0446 -  -  -  -  ;		Name : 		expression.asm
    5 00:0446 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0446 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0446 -  -  -  -  ;		Reviewed :	None
    8 00:0446 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0446 -  -  -  -  ;
   10 00:0446 -  -  -  -  ; ***************************************************************************************
   11 00:0446 -  -  -  -  ; ***************************************************************************************
   12 00:0446 -  -  -  -  
   13 00:0446 -  -  -  -  ; ***************************************************************************************
   14 00:0446 -  -  -  -  ;
   15 00:0446 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0446 -  -  -  -  ;
   17 00:0446 -  -  -  -  ; ***************************************************************************************
   18 00:0446 -  -  -  -  
   19 00:0446 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0446 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0447 -  -  -  -  EvaluateAtPrecedence:
   22 00:0447 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0448 -  -  -  -  		;
   24 00:0448 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0448 -  -  -  -  		;
   26 00:0448 CD 54 05 00 		call 	EvaluateTerm 				; get term
   27 00:044C -  -  -  -  		;
   28 00:044C -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:044C -  -  -  -  		;
   30 00:044C D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:044D -  -  -  -  _EAPLoop:
   32 00:044D DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:0450 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:0452 D8 -  -  -  		ret 	c
   35 00:0453 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:0455 D0 -  -  -  		ret 	nc
   37 00:0456 -  -  -  -  		;
   38 00:0456 -  -  -  -  		; 		Get the precedence.
   39 00:0456 -  -  -  -  		;
   40 00:0456 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0457 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0459 21 40 0A 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:045D B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:045E 6F -  -  -  		ld 		l,a
   45 00:045F 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:0460 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:0461 -  -  -  -  		;
   48 00:0461 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:0461 -  -  -  -  		;
   50 00:0461 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:0462 BB -  -  -  		cp 		e
   52 00:0463 D0 -  -  -  		ret 	nc
   53 00:0464 -  -  -  -  
   54 00:0464 -  -  -  -  		;
   55 00:0464 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:0464 -  -  -  -  		;
   57 00:0464 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0465 -  -  -  -  		;
   59 00:0465 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0468 F5 -  -  -  		push 	af
   61 00:0469 -  -  -  -  		;
   62 00:0469 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:046A D9 -  -  -  		exx 								; save HL'
   64 00:046B E5 -  -  -  		push 	hl
   65 00:046C D9 -  -  -  		exx 								
   66 00:046D E5 -  -  -  		push 	hl 							; save HL
   67 00:046E -  -  -  -  		;
   68 00:046E DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:0470 -  -  -  -  		;
   70 00:0470 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:0470 -  -  -  -  		;
   72 00:0470 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:0471 CD 47 04 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0475 -  -  -  -  		;
   75 00:0475 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0475 -  -  -  -  		;
   77 00:0475 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0476 -  -  -  -  
   79 00:0476 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0477 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0478 D9 -  -  -  		exx
   82 00:0479 EB -  -  -  		ex 		de,hl
   83 00:047A E1 -  -  -  		pop 	hl
   84 00:047B D9 -  -  -  		exx
   85 00:047C C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:047D 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:047E -  -  -  -  		;
   88 00:047E -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:047E -  -  -  -  		; 		is in B (type) DE'DE
   90 00:047E -  -  -  -  		;
   91 00:047E F1 -  -  -  		pop 	af 							; get operator in A
   92 00:047F -  -  -  -  		;
   93 00:047F -  -  -  -  		; 		Call the binary operator in A.
   94 00:047F -  -  -  -  		;
   95 00:047F D5 -  -  -  		push 	de
   96 00:0480 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0481 E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0496 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0497 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0498 CD 60 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:049C -  -  -  -  		;
  102 00:049C D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:049D -  -  -  -  		;
  104 00:049D 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:049F -  -  -  -  
  106 00:049F -  -  -  -  ; ***************************************************************************************
  107 00:049F -  -  -  -  ;
  108 00:049F -  -  -  -  ;									Changes and Updates
  109 00:049F -  -  -  -  ;
  110 00:049F -  -  -  -  ; ***************************************************************************************
  111 00:049F -  -  -  -  ;
  112 00:049F -  -  -  -  ;		Date			Notes
  113 00:049F -  -  -  -  ;		==== 			=====
  114 00:049F -  -  -  -  ;
  115 00:049F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:049F -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:049F -  -  -  -  ; ***************************************************************************************
    2 00:049F -  -  -  -  ; ***************************************************************************************
    3 00:049F -  -  -  -  ;
    4 00:049F -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:049F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:049F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:049F -  -  -  -  ;		Reviewed :	No
    8 00:049F -  -  -  -  ;		Purpose :	Expression support functions
    9 00:049F -  -  -  -  ;
   10 00:049F -  -  -  -  ; ***************************************************************************************
   11 00:049F -  -  -  -  ; ***************************************************************************************
   12 00:049F -  -  -  -  
   13 00:049F -  -  -  -  ; ***************************************************************************************
   14 00:049F -  -  -  -  ;
   15 00:049F -  -  -  -  ; 								Evaluate an integer term
   16 00:049F -  -  -  -  ;
   17 00:049F -  -  -  -  ; ***************************************************************************************
   18 00:049F -  -  -  -  
   19 00:049F -  -  -  -  EvaluateIntegerTerm:
   20 00:049F CD 54 05 00 		call 	EvaluateTerm
   21 00:04A3 CD F8 04 00 		call 	DeReference
   22 00:04A7 CB 41 -  -  		bit 	CIsString,c
   23 00:04A9 C8 -  -  -  		ret 	z
   24 00:04AA C3 F0 02 00 		jp 		TypeMismatch
   25 00:04AE -  -  -  -  
   26 00:04AE -  -  -  -  ; ***************************************************************************************
   27 00:04AE -  -  -  -  ;
   28 00:04AE -  -  -  -  ; 								Evaluate a string term
   29 00:04AE -  -  -  -  ;
   30 00:04AE -  -  -  -  ; ***************************************************************************************
   31 00:04AE -  -  -  -  
   32 00:04AE -  -  -  -  EvaluateStringTerm:
   33 00:04AE CD 54 05 00 		call 	EvaluateTerm
   34 00:04B2 CD F8 04 00 		call 	DeReference
   35 00:04B6 CB 41 -  -  		bit 	CIsString,c
   36 00:04B8 C0 -  -  -  		ret 	nz
   37 00:04B9 C3 F0 02 00 		jp 		TypeMismatch
   38 00:04BD -  -  -  -  
   39 00:04BD -  -  -  -  ; ***************************************************************************************
   40 00:04BD -  -  -  -  ;
   41 00:04BD -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:04BD -  -  -  -  ;
   43 00:04BD -  -  -  -  ; ***************************************************************************************
   44 00:04BD -  -  -  -  
   45 00:04BD -  -  -  -  EvaluateValue:
   46 00:04BD CD 46 04 00 		call 	EvaluateAtPrecedence0
   47 00:04C1 C3 F8 04 00 		jp 		Dereference
   48 00:04C5 -  -  -  -  
   49 00:04C5 -  -  -  -  ; ***************************************************************************************
   50 00:04C5 -  -  -  -  ;
   51 00:04C5 -  -  -  -  ; 									Evaluate a number
   52 00:04C5 -  -  -  -  ;
   53 00:04C5 -  -  -  -  ; ***************************************************************************************
   54 00:04C5 -  -  -  -  
   55 00:04C5 -  -  -  -  EvaluateInteger:
   56 00:04C5 CD BD 04 00 		call 	EvaluateValue
   57 00:04C9 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:04CB C8 -  -  -  		ret 	z
   59 00:04CC C3 F0 02 00 		jp 		TypeMismatch
   60 00:04D0 -  -  -  -  
   61 00:04D0 -  -  -  -  ; ***************************************************************************************
   62 00:04D0 -  -  -  -  ;
   63 00:04D0 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:04D0 -  -  -  -  ;
   65 00:04D0 -  -  -  -  ; ***************************************************************************************
   66 00:04D0 -  -  -  -  
   67 00:04D0 -  -  -  -  Evaluate8BitInteger:
   68 00:04D0 CD C5 04 00 		call 	EvaluateInteger
   69 00:04D4 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:04D5 7C -  -  -  		ld 		a,h
   71 00:04D6 B5 -  -  -  		or 		l
   72 00:04D7 D9 -  -  -  		exx 	
   73 00:04D8 B4 -  -  -  		or 		h
   74 00:04D9 C2 F6 02 00 		jp 		nz,BadValue
   75 00:04DD 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:04DE C9 -  -  -  		ret
   77 00:04DF -  -  -  -  		
   78 00:04DF -  -  -  -  ; ***************************************************************************************
   79 00:04DF -  -  -  -  ;
   80 00:04DF -  -  -  -  ; 									Evaluate a string
   81 00:04DF -  -  -  -  ;
   82 00:04DF -  -  -  -  ; ***************************************************************************************
   83 00:04DF -  -  -  -  
   84 00:04DF -  -  -  -  EvaluateStringOnly:
   85 00:04DF CD BD 04 00 		call 	EvaluateValue
   86 00:04E3 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:04E5 CA F0 02 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:04E9 C9 -  -  -  		ret
   89 00:04EA -  -  -  -  
   90 00:04EA -  -  -  -  ; ***************************************************************************************
   91 00:04EA -  -  -  -  ;
   92 00:04EA -  -  -  -  ; 								Return 8/16 bit constant
   93 00:04EA -  -  -  -  ;
   94 00:04EA -  -  -  -  ; ***************************************************************************************
   95 00:04EA -  -  -  -  
   96 00:04EA -  -  -  -  Return8BitConstant:
   97 00:04EA 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:04EE 6F -  -  -  		ld 		l,a
   99 00:04EF -  -  -  -  Return16BitConstant:
  100 00:04EF D9 -  -  -  		exx 								; clear HL'
  101 00:04F0 21 00 00 00 		ld 		hl,0
  102 00:04F4 D9 -  -  -  		exx
  103 00:04F5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:04F7 C9 -  -  -  		ret
  105 00:04F8 -  -  -  -  
  106 00:04F8 -  -  -  -  ; ***************************************************************************************
  107 00:04F8 -  -  -  -  ;
  108 00:04F8 -  -  -  -  ;									Changes and Updates
  109 00:04F8 -  -  -  -  ;
  110 00:04F8 -  -  -  -  ; ***************************************************************************************
  111 00:04F8 -  -  -  -  ;
  112 00:04F8 -  -  -  -  ;		Date			Notes
  113 00:04F8 -  -  -  -  ;		==== 			=====
  114 00:04F8 -  -  -  -  ;
  115 00:04F8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:04F8 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:04F8 -  -  -  -  ; ***************************************************************************************
    2 00:04F8 -  -  -  -  ; ***************************************************************************************
    3 00:04F8 -  -  -  -  ;
    4 00:04F8 -  -  -  -  ;		Name : 		reference.asm
    5 00:04F8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04F8 -  -  -  -  ;		Date : 		1st May 2022
    7 00:04F8 -  -  -  -  ;		Reviewed :	No
    8 00:04F8 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:04F8 -  -  -  -  ;
   10 00:04F8 -  -  -  -  ; ***************************************************************************************
   11 00:04F8 -  -  -  -  ; ***************************************************************************************
   12 00:04F8 -  -  -  -  
   13 00:04F8 -  -  -  -  ; ***************************************************************************************
   14 00:04F8 -  -  -  -  ;
   15 00:04F8 -  -  -  -  ; 									Dereference HL'HL C
   16 00:04F8 -  -  -  -  ;
   17 00:04F8 -  -  -  -  ; ***************************************************************************************
   18 00:04F8 -  -  -  -  
   19 00:04F8 -  -  -  -  Dereference:
   20 00:04F8 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:04FA C8 -  -  -  		ret 	z
   22 00:04FB -  -  -  -  
   23 00:04FB CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:04FD -  -  -  -  		
   25 00:04FD CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:04FF 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0501 -  -  -  -  
   28 00:0501 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:0503 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:0505 -  -  -  -  
   31 00:0505 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0506 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0508 D9 -  -  -  		exx
   34 00:0509 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:050A 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:050B 23 -  -  -  		inc  	hl
   37 00:050C ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:050E D9 -  -  -  		exx 								; fix back
   39 00:050F C9 -  -  -  		ret
   40 00:0510 -  -  -  -  
   41 00:0510 -  -  -  -  _DeRefByte:		
   42 00:0510 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0511 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:0515 6F -  -  -  		ld	 	l,a
   45 00:0516 D9 -  -  -  		exx
   46 00:0517 21 00 00 00 		ld 		hl,$0000
   47 00:051B D9 -  -  -  		exx
   48 00:051C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:051E C9 -  -  -  		ret
   50 00:051F -  -  -  -  
   51 00:051F -  -  -  -  _DRInternal:
   52 00:051F 3E 04 C3 92 
              02 00 -  -  		ERR_DISABLED
   53 00:0525 -  -  -  -  
   54 00:0525 -  -  -  -  ; ***************************************************************************************
   55 00:0525 -  -  -  -  ;
   56 00:0525 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:0525 -  -  -  -  ;
   58 00:0525 -  -  -  -  ; ***************************************************************************************
   59 00:0525 -  -  -  -  
   60 00:0525 -  -  -  -  DRConvertHLHLToAddress:
   61 00:0525 -  -  -  -  		#ifdef EZ80
   62 00:0525 22 66 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0529 D9 -  -  -  		exx
   64 00:052A 22 68 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:052E 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:0532 D9 -  -  -  		exx
   67 00:0533 2A 66 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0537 -  -  -  -  		#endif
   69 00:0537 C9 -  -  -  		ret
   70 00:0538 -  -  -  -  
   71 00:0538 -  -  -  -  ; ***************************************************************************************
   72 00:0538 -  -  -  -  ;
   73 00:0538 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0538 -  -  -  -  ;
   75 00:0538 -  -  -  -  ; ***************************************************************************************
   76 00:0538 -  -  -  -  
   77 00:0538 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0538 -  -  -  -  		#ifdef EZ80
   79 00:0538 22 66 00 00 		ld 		(AConvert),hl
   80 00:053C 21 00 00 00 		ld 		hl,$0000
   81 00:0540 22 69 00 00 		ld 		(AConvert+3),hl
   82 00:0544 D9 -  -  -  		exx
   83 00:0545 2A 68 00 00 		ld 		hl,(AConvert+2)
   84 00:0549 D9 -  -  -  		exx
   85 00:054A AF -  -  -  		xor 	a
   86 00:054B 32 68 00 00 		ld 		(AConvert+2),a
   87 00:054F 2A 66 00 00 		ld 		hl,(AConvert)
   88 00:0553 -  -  -  -  		#endif
   89 00:0553 C9 -  -  -  		ret
   90 00:0554 -  -  -  -  
   91 00:0554 -  -  -  -  ; ***************************************************************************************
   92 00:0554 -  -  -  -  ;
   93 00:0554 -  -  -  -  ;									Changes and Updates
   94 00:0554 -  -  -  -  ;
   95 00:0554 -  -  -  -  ; ***************************************************************************************
   96 00:0554 -  -  -  -  ;
   97 00:0554 -  -  -  -  ;		Date			Notes
   98 00:0554 -  -  -  -  ;		==== 			=====
   99 00:0554 -  -  -  -  ;
  100 00:0554 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:0554 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:0554 -  -  -  -  ; ***************************************************************************************
    2 00:0554 -  -  -  -  ; ***************************************************************************************
    3 00:0554 -  -  -  -  ;
    4 00:0554 -  -  -  -  ;		Name : 		term.asm
    5 00:0554 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0554 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0554 -  -  -  -  ;		Reviewed :	No
    8 00:0554 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:0554 -  -  -  -  ;
   10 00:0554 -  -  -  -  ; ***************************************************************************************
   11 00:0554 -  -  -  -  ; ***************************************************************************************
   12 00:0554 -  -  -  -  
   13 00:0554 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:0554             		add_hlhl_16
   15 00:0554             		exx
   16 00:0554             		adc_hlhl_16
   17 00:0554             		exx
   18 00:0554             #endmacro
   19 00:0554 -  -  -  -  
   20 00:0554 -  -  -  -  ; ***************************************************************************************
   21 00:0554 -  -  -  -  ;
   22 00:0554 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:0554 -  -  -  -  ;
   24 00:0554 -  -  -  -  ; ***************************************************************************************
   25 00:0554 -  -  -  -  ;
   26 00:0554 -  -  -  -  ; 		Terms can be:
   27 00:0554 -  -  -  -  ;
   28 00:0554 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:0554 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:0554 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:0554 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:0554 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:0554 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:0554 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:0554 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:0554 -  -  -  -  ; 														reference of some sort.
   37 00:0554 -  -  -  -  ;
   38 00:0554 -  -  -  -  ; ***************************************************************************************
   39 00:0554 -  -  -  -  
   40 00:0554 -  -  -  -  EvaluateTerm:		
   41 00:0554 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0556 D9 -  -  -  		exx
   43 00:0557 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:055B D9 -  -  -  		exx
   45 00:055C 21 00 00 00 		ld 		hl,$0000		
   46 00:0560 -  -  -  -  		;
   47 00:0560 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:0563 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0565 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0567 DA 1F 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:056B CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:056D C2 C3 05 00 		jp 		nz,_ETFoundKeyword 
   53 00:0571 -  -  -  -  		;
   54 00:0571 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:0571 -  -  -  -  		;
   56 00:0571 -  -  -  -  _ETIntegerConstant:
   57 00:0571 -  -  -  -  		;
   58 00:0571 -  -  -  -  _ETIntegerLoop:		
   59 00:0571 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0574 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0576 B5 -  -  -  		or 		l 							; or into L
   62 00:0577 6F -  -  -  		ld 		l,a
   63 00:0578 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:057A DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:057D C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:057F FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0581 D8 -  -  -  		ret 	c
   68 00:0582 -  -  -  -  
   69 00:0582 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0589 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0590 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0597 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:059E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:05A5 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:05AC -  -  -  -  
   76 00:05AC 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:05AE -  -  -  -  		;
   78 00:05AE -  -  -  -  		; 		Found the $3F string marker.
   79 00:05AE -  -  -  -  		;
   80 00:05AE -  -  -  -  _ETStringMarker:		
   81 00:05AE DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:05B0 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:05B2 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:05B4 E1 -  -  -  		pop 	hl
   85 00:05B5 11 00 00 00 		ld 		de,$0000
   86 00:05B9 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:05BC DD 19 -  -  		add 	ix,de
   88 00:05BE DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:05C0 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:05C2 C9 -  -  -  		ret
   91 00:05C3 -  -  -  -  		;
   92 00:05C3 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:05C3 -  -  -  -  		;
   94 00:05C3 -  -  -  -  _ETFoundKeyword:
   95 00:05C3 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:05C5 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:05C7 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:05C9 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:05CB 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:05CD -  -  -  -  		;
  101 00:05CD -  -  -  -  		;		Unary group 0
  102 00:05CD -  -  -  -  		;
  103 00:05CD E6 7F 21 00 
              00 00 6F 29 
              29 11 7E 0B 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:05E2 C3 60 00 00 		jp 		JumpCode 					; and go there.
  105 00:05E6 -  -  -  -  
  106 00:05E6 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:05E6 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:05E8 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:05EA -  -  -  -  		;
  110 00:05EA -  -  -  -  		; 		- term
  111 00:05EA -  -  -  -  		;
  112 00:05EA CD 9F 04 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:05EE CD 35 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:05F2 C9 -  -  -  		ret
  115 00:05F3 -  -  -  -  		;
  116 00:05F3 -  -  -  -  		;		! ? indirection check
  117 00:05F3 -  -  -  -  		;
  118 00:05F3 -  -  -  -  _ETCheckIndirection:	
  119 00:05F3 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:05F5 28 06 -  -  		jr 		z,_ETIndirection
  121 00:05F7 FE 83 -  -  		cp 		KWD_PLING
  122 00:05F9 C2 FC 02 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:05FD -  -  -  -  		;
  124 00:05FD -  -  -  -  		; 		! ? indirection
  125 00:05FD -  -  -  -  		;
  126 00:05FD -  -  -  -  _ETIndirection:
  127 00:05FD F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:05FE CD 54 05 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:0602 CD F8 04 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0606 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0608 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:060A CD 25 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:060E F1 -  -  -  		pop 	af 							; get type back
  134 00:060F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:0611 CB F9 -  -  		set 	CIsReference,c
  136 00:0613 FE 83 -  -  		cp 		KWD_PLING
  137 00:0615 C8 -  -  -  		ret 	z
  138 00:0616 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0618 C9 -  -  -  		ret
  140 00:0619 -  -  -  -  _ETStringIndirect:
  141 00:0619 3E 02 C3 92 
              02 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:061F -  -  -  -  		;
  143 00:061F -  -  -  -  		; 		Found an identifier.
  144 00:061F -  -  -  -  		;
  145 00:061F -  -  -  -  _ETVariable:
  146 00:061F CD 83 08 00 		call 	FindVariable 				; find the variable.
  147 00:0623 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:0624 3E 0F C3 92 
              02 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:062A -  -  -  -  		
  150 00:062A -  -  -  -  ; ***************************************************************************************
  151 00:062A -  -  -  -  ;
  152 00:062A -  -  -  -  ;									Changes and Updates
  153 00:062A -  -  -  -  ;
  154 00:062A -  -  -  -  ; ***************************************************************************************
  155 00:062A -  -  -  -  ;
  156 00:062A -  -  -  -  ;		Date			Notes
  157 00:062A -  -  -  -  ;		==== 			=====
  158 00:062A -  -  -  -  ;
  159 00:062A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:062A -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:062A -  -  -  -  ; ***************************************************************************************
    2 00:062A -  -  -  -  ; ***************************************************************************************
    3 00:062A -  -  -  -  ;
    4 00:062A -  -  -  -  ;		Name : 		abs.asm
    5 00:062A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:062A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:062A -  -  -  -  ;		Reviewed :	No
    8 00:062A -  -  -  -  ;		Purpose :	Absolute value 
    9 00:062A -  -  -  -  ;
   10 00:062A -  -  -  -  ; ***************************************************************************************
   11 00:062A -  -  -  -  ; ***************************************************************************************
   12 00:062A -  -  -  -  
   13 00:062A -  -  -  -  ; ***************************************************************************************
   14 00:062A -  -  -  -  ;
   15 00:062A -  -  -  -  ;								abs( unary function
   16 00:062A -  -  -  -  ;
   17 00:062A -  -  -  -  ; ***************************************************************************************
   18 00:062A -  -  -  -  
   19 00:062A -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:062A CD 9F 04 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:062E D9 -  -  -  		exx 								; test MSB
   22 00:062F CB 7C -  -  		bit 	7,h
   23 00:0631 D9 -  -  -  		exx
   24 00:0632 C4 35 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0636 C9 -  -  -  		ret
   26 00:0637 -  -  -  -  
   27 00:0637 -  -  -  -  ; ***************************************************************************************
   28 00:0637 -  -  -  -  ;
   29 00:0637 -  -  -  -  ;									Changes and Updates
   30 00:0637 -  -  -  -  ;
   31 00:0637 -  -  -  -  ; ***************************************************************************************
   32 00:0637 -  -  -  -  ;
   33 00:0637 -  -  -  -  ;		Date			Notes
   34 00:0637 -  -  -  -  ;		==== 			=====
   35 00:0637 -  -  -  -  ;
   36 00:0637 -  -  -  -  ; ***************************************************************************************
   37 00:0637 -  -  -  -  		
Listing for file "_build.asm"
   34 00:0637 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0637 -  -  -  -  ; ***************************************************************************************
    2 00:0637 -  -  -  -  ; ***************************************************************************************
    3 00:0637 -  -  -  -  ;
    4 00:0637 -  -  -  -  ;		Name : 		asc.asm
    5 00:0637 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0637 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0637 -  -  -  -  ;		Reviewed :	No
    8 00:0637 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0637 -  -  -  -  ;
   10 00:0637 -  -  -  -  ; ***************************************************************************************
   11 00:0637 -  -  -  -  ; ***************************************************************************************
   12 00:0637 -  -  -  -  
   13 00:0637 -  -  -  -  ; ***************************************************************************************
   14 00:0637 -  -  -  -  ;
   15 00:0637 -  -  -  -  ;								Asc unary function
   16 00:0637 -  -  -  -  ;
   17 00:0637 -  -  -  -  ; ***************************************************************************************
   18 00:0637 -  -  -  -  
   19 00:0637 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0637 CD AE 04 00 		call	EvaluateStringTerm			; Get string
   21 00:063B 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:063C C3 EA 04 00 		jp 		Return8BitConstant
   23 00:0640 -  -  -  -  
   24 00:0640 -  -  -  -  ; ***************************************************************************************
   25 00:0640 -  -  -  -  ;
   26 00:0640 -  -  -  -  ;									Changes and Updates
   27 00:0640 -  -  -  -  ;
   28 00:0640 -  -  -  -  ; ***************************************************************************************
   29 00:0640 -  -  -  -  ;
   30 00:0640 -  -  -  -  ;		Date			Notes
   31 00:0640 -  -  -  -  ;		==== 			=====
   32 00:0640 -  -  -  -  ;
   33 00:0640 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:0640 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:0640 -  -  -  -  ; ***************************************************************************************
    2 00:0640 -  -  -  -  ; ***************************************************************************************
    3 00:0640 -  -  -  -  ;
    4 00:0640 -  -  -  -  ;		Name : 		chr.asm
    5 00:0640 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0640 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0640 -  -  -  -  ;		Reviewed :	No
    8 00:0640 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:0640 -  -  -  -  ;
   10 00:0640 -  -  -  -  ; ***************************************************************************************
   11 00:0640 -  -  -  -  ; ***************************************************************************************
   12 00:0640 -  -  -  -  
   13 00:0640 -  -  -  -  ; ***************************************************************************************
   14 00:0640 -  -  -  -  ;
   15 00:0640 -  -  -  -  ;								Chr$() unary function
   16 00:0640 -  -  -  -  ;
   17 00:0640 -  -  -  -  ; ***************************************************************************************
   18 00:0640 -  -  -  -  
   19 00:0640 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:0640 CD 6A 02 00 		call 	CheckDollar
   21 00:0644 CD 9F 04 00 		call 	EvaluateIntegerTerm
   22 00:0648 7D -  -  -  		ld 		a,l 						; get character
   23 00:0649 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:064B 21 99 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:064F 36 0D -  -  		ld 		(hl),13
   26 00:0651 2B -  -  -  		dec 	hl
   27 00:0652 77 -  -  -  		ld 		(hl),a
   28 00:0653 C9 -  -  -  		ret
   29 00:0654 -  -  -  -  
   30 00:0654 -  -  -  -  ; ***************************************************************************************
   31 00:0654 -  -  -  -  ;
   32 00:0654 -  -  -  -  ;									Changes and Updates
   33 00:0654 -  -  -  -  ;
   34 00:0654 -  -  -  -  ; ***************************************************************************************
   35 00:0654 -  -  -  -  ;
   36 00:0654 -  -  -  -  ;		Date			Notes
   37 00:0654 -  -  -  -  ;		==== 			=====
   38 00:0654 -  -  -  -  ;
   39 00:0654 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0654 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:0654 -  -  -  -  ; ***************************************************************************************
    2 00:0654 -  -  -  -  ; ***************************************************************************************
    3 00:0654 -  -  -  -  ;
    4 00:0654 -  -  -  -  ;		Name : 		len.asm
    5 00:0654 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0654 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0654 -  -  -  -  ;		Reviewed :	None
    8 00:0654 -  -  -  -  ;		Purpose :	String Length
    9 00:0654 -  -  -  -  ;
   10 00:0654 -  -  -  -  ; ***************************************************************************************
   11 00:0654 -  -  -  -  ; ***************************************************************************************
   12 00:0654 -  -  -  -  
   13 00:0654 -  -  -  -  ; ***************************************************************************************
   14 00:0654 -  -  -  -  ;
   15 00:0654 -  -  -  -  ;								Len unary function
   16 00:0654 -  -  -  -  ;
   17 00:0654 -  -  -  -  ; ***************************************************************************************
   18 00:0654 -  -  -  -  
   19 00:0654 -  -  -  -  Unary_Len:	;; [len]
   20 00:0654 CD AE 04 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0658 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0659 CD 9D 03 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:065D -  -  -  -  _ULCount:
   24 00:065D 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:065E FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:0660 D8 -  -  -  		ret 	c
   27 00:0661 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:0662 13 -  -  -  		inc 	de
   29 00:0663 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:0665 -  -  -  -  
   31 00:0665 -  -  -  -  ; ***************************************************************************************
   32 00:0665 -  -  -  -  ;
   33 00:0665 -  -  -  -  ;									Changes and Updates
   34 00:0665 -  -  -  -  ;
   35 00:0665 -  -  -  -  ; ***************************************************************************************
   36 00:0665 -  -  -  -  ;
   37 00:0665 -  -  -  -  ;		Date			Notes
   38 00:0665 -  -  -  -  ;		==== 			=====
   39 00:0665 -  -  -  -  ;
   40 00:0665 -  -  -  -  ; ***************************************************************************************
   41 00:0665 -  -  -  -  		
Listing for file "_build.asm"
   37 00:0665 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:0665 -  -  -  -  ; ***************************************************************************************
    2 00:0665 -  -  -  -  ; ***************************************************************************************
    3 00:0665 -  -  -  -  ;
    4 00:0665 -  -  -  -  ;		Name : 		makestring.asm
    5 00:0665 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0665 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0665 -  -  -  -  ;		Reviewed :	No
    8 00:0665 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:0665 -  -  -  -  ;
   10 00:0665 -  -  -  -  ; ***************************************************************************************
   11 00:0665 -  -  -  -  ; ***************************************************************************************
   12 00:0665 -  -  -  -  
   13 00:0665 -  -  -  -  ; ***************************************************************************************
   14 00:0665 -  -  -  -  ;
   15 00:0665 -  -  -  -  ;								Str$() unary function
   16 00:0665 -  -  -  -  ;
   17 00:0665 -  -  -  -  ; ***************************************************************************************
   18 00:0665 -  -  -  -  
   19 00:0665 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:0665 CD 9F 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0669 CD 25 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:066D 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:066F C9 -  -  -  		ret
   24 00:0670 -  -  -  -  
   25 00:0670 -  -  -  -  ; ***************************************************************************************
   26 00:0670 -  -  -  -  ;
   27 00:0670 -  -  -  -  ;									Changes and Updates
   28 00:0670 -  -  -  -  ;
   29 00:0670 -  -  -  -  ; ***************************************************************************************
   30 00:0670 -  -  -  -  ;
   31 00:0670 -  -  -  -  ;		Date			Notes
   32 00:0670 -  -  -  -  ;		==== 			=====
   33 00:0670 -  -  -  -  ;
   34 00:0670 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:0670 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:0670 -  -  -  -  ; ***************************************************************************************
    2 00:0670 -  -  -  -  ; ***************************************************************************************
    3 00:0670 -  -  -  -  ;
    4 00:0670 -  -  -  -  ;		Name : 		not.asm
    5 00:0670 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0670 -  -  -  -  ;		Date : 		5th June 2023
    7 00:0670 -  -  -  -  ;		Reviewed :	No
    8 00:0670 -  -  -  -  ;		Purpose :	Logical not
    9 00:0670 -  -  -  -  ;
   10 00:0670 -  -  -  -  ; ***************************************************************************************
   11 00:0670 -  -  -  -  ; ***************************************************************************************
   12 00:0670 -  -  -  -  
   13 00:0670 -  -  -  -  ; ***************************************************************************************
   14 00:0670 -  -  -  -  ;
   15 00:0670 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:0670 -  -  -  -  ;
   17 00:0670 -  -  -  -  ; ***************************************************************************************
   18 00:0670 -  -  -  -  
   19 00:0670 -  -  -  -  Unary_Not:		;; [not]
   20 00:0670 CD 9F 04 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:0674 CD 7D 06 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0678 CD 7D 06 00 		call 	__UNSwap		
   23 00:067C C9 -  -  -  		ret
   24 00:067D -  -  -  -  
   25 00:067D -  -  -  -  __UNSwap:
   26 00:067D 7C -  -  -  		ld 		a,h
   27 00:067E 2F -  -  -  		cpl
   28 00:067F 67 -  -  -  		ld 		h,a
   29 00:0680 7D -  -  -  		ld 		a,l
   30 00:0681 2F -  -  -  		cpl 	
   31 00:0682 6F -  -  -  		ld 		l,a
   32 00:0683 D9 -  -  -  		exx
   33 00:0684 C9 -  -  -  		ret
   34 00:0685 -  -  -  -  
   35 00:0685 -  -  -  -  ; ***************************************************************************************
   36 00:0685 -  -  -  -  ;
   37 00:0685 -  -  -  -  ;									Changes and Updates
   38 00:0685 -  -  -  -  ;
   39 00:0685 -  -  -  -  ; ***************************************************************************************
   40 00:0685 -  -  -  -  ;
   41 00:0685 -  -  -  -  ;		Date			Notes
   42 00:0685 -  -  -  -  ;		==== 			=====
   43 00:0685 -  -  -  -  ;
   44 00:0685 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0685 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0685 -  -  -  -  ; ***************************************************************************************
    2 00:0685 -  -  -  -  ; ***************************************************************************************
    3 00:0685 -  -  -  -  ;
    4 00:0685 -  -  -  -  ;		Name : 		page.asm
    5 00:0685 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0685 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0685 -  -  -  -  ;		Reviewed :	No
    8 00:0685 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0685 -  -  -  -  ;
   10 00:0685 -  -  -  -  ; ***************************************************************************************
   11 00:0685 -  -  -  -  ; ***************************************************************************************
   12 00:0685 -  -  -  -  
   13 00:0685 -  -  -  -  ; ***************************************************************************************
   14 00:0685 -  -  -  -  ;
   15 00:0685 -  -  -  -  ;							page unary function (no bracket)
   16 00:0685 -  -  -  -  ;
   17 00:0685 -  -  -  -  ; ***************************************************************************************
   18 00:0685 -  -  -  -  
   19 00:0685 -  -  -  -  Unary_Page:	;; [page]
   20 00:0685 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0689 D9 -  -  -  			exx
   22 00:068A 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:068E D9 -  -  -  			exx
   24 00:068F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0691 C9 -  -  -  			ret
   26 00:0692 -  -  -  -  
   27 00:0692 -  -  -  -  ; ***************************************************************************************
   28 00:0692 -  -  -  -  ;
   29 00:0692 -  -  -  -  ;									Changes and Updates
   30 00:0692 -  -  -  -  ;
   31 00:0692 -  -  -  -  ; ***************************************************************************************
   32 00:0692 -  -  -  -  ;
   33 00:0692 -  -  -  -  ;		Date			Notes
   34 00:0692 -  -  -  -  ;		==== 			=====
   35 00:0692 -  -  -  -  ;
   36 00:0692 -  -  -  -  ; ***************************************************************************************
   37 00:0692 -  -  -  -  			
Listing for file "_build.asm"
   40 00:0692 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0692 -  -  -  -  ; ***************************************************************************************
    2 00:0692 -  -  -  -  ; ***************************************************************************************
    3 00:0692 -  -  -  -  ;
    4 00:0692 -  -  -  -  ;		Name : 		random.asm
    5 00:0692 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0692 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0692 -  -  -  -  ;		Reviewed :	No
    8 00:0692 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0692 -  -  -  -  ;
   10 00:0692 -  -  -  -  ; ***************************************************************************************
   11 00:0692 -  -  -  -  ; ***************************************************************************************
   12 00:0692 -  -  -  -  
   13 00:0692 -  -  -  -  ; ***************************************************************************************
   14 00:0692 -  -  -  -  ;
   15 00:0692 -  -  -  -  ;								Random unary function
   16 00:0692 -  -  -  -  ;
   17 00:0692 -  -  -  -  ; ***************************************************************************************
   18 00:0692 -  -  -  -  
   19 00:0692 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0692 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:069A CD 9F 04 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:069E D9 -  -  -  		exx 								; is it -ve
   23 00:069F CB 7C -  -  		bit 	7,h
   24 00:06A1 D9 -  -  -  		exx
   25 00:06A2 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:06A4 22 6C 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:06A8 D9 -  -  -  		exx
   28 00:06A9 22 70 00 00 		ld 		(RandomSeed+4),hl
   29 00:06AD D9 -  -  -  		exx
   30 00:06AE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:06B0 C9 -  -  -  		ret
   32 00:06B1 -  -  -  -  _URDontSeed:		
   33 00:06B1 -  -  -  -  
   34 00:06B1 CD 15 0E 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:06B5 28 1C -  -  		jr 		z,_URFail
   36 00:06B7 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:06B8 D9 -  -  -  		exx
   38 00:06B9 E5 -  -  -  		push 	hl
   39 00:06BA D9 -  -  -  		exx
   40 00:06BB -  -  -  -  		;
   41 00:06BB CD E4 06 00 		call 	URandomHL 					; get random HL'HL
   42 00:06BF D9 -  -  -  		exx
   43 00:06C0 CD E4 06 00 		call 	URandomHL
   44 00:06C4 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:06C6 D9 -  -  -  		exx
   46 00:06C7 -  -  -  -  		;
   47 00:06C7 D9 -  -  -  		exx 								; restore range.
   48 00:06C8 D1 -  -  -  		pop 	de
   49 00:06C9 D9 -  -  -  		exx
   50 00:06CA D1 -  -  -  		pop 	de
   51 00:06CB -  -  -  -  		;
   52 00:06CB CD A6 0C 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:06CF 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:06D0 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:06D2 C9 -  -  -  		ret
   56 00:06D3 -  -  -  -  _URFail:
   57 00:06D3 3E 03 C3 92 
              02 00 -  -  		ERR_BADVALUE
   58 00:06D9 -  -  -  -  ; ***************************************************************************************
   59 00:06D9 -  -  -  -  ;
   60 00:06D9 -  -  -  -  ; 									Push RNG off zero
   61 00:06D9 -  -  -  -  ;
   62 00:06D9 -  -  -  -  ; ***************************************************************************************
   63 00:06D9 -  -  -  -  
   64 00:06D9 -  -  -  -  UnaryRandomInitialise:
   65 00:06D9 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:06DB -  -  -  -  _URILoop:
   67 00:06DB C5 -  -  -  		push 	bc
   68 00:06DC CD E4 06 00 		call 	URandomHL
   69 00:06E0 C1 -  -  -  		pop 	bc
   70 00:06E1 10 F8 -  -  		djnz 	_URILoop
   71 00:06E3 C9 -  -  -  		ret
   72 00:06E4 -  -  -  -  
   73 00:06E4 -  -  -  -  ; ***************************************************************************************
   74 00:06E4 -  -  -  -  ;
   75 00:06E4 -  -  -  -  ;							16 bit random number generator
   76 00:06E4 -  -  -  -  ;
   77 00:06E4 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:06E4 -  -  -  -  ;		Actual author unspecified.
   79 00:06E4 -  -  -  -  ;
   80 00:06E4 -  -  -  -  ; ***************************************************************************************
   81 00:06E4 -  -  -  -  
   82 00:06E4 -  -  -  -  URandomHL:
   83 00:06E4 2A 6C 00 00 	    ld 		hl,(RandomSeed)
   84 00:06E8 ED 5B 70 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:06ED 44 -  -  -  	    ld 		b,h
   86 00:06EE 4D -  -  -  	    ld 		c,l
   87 00:06EF 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:06F4 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:06F9 2C -  -  -  	    inc 	l
   90 00:06FA 09 -  -  -  	    add 	hl,bc
   91 00:06FB 22 6C 00 00 	    ld 		(RandomSeed),hl
   92 00:06FF 2A 70 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:0703 ED 5A -  -  	    adc 	hl,de
   94 00:0705 22 70 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0709 EB -  -  -  	    ex 		de,hl
   96 00:070A 2A 74 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:070E ED 4B 78 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:0713 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0718 ED 43 78 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:071D 9F -  -  -  	    sbc 	a,a
  101 00:071E E6 C5 -  -  	    and 	%11000101
  102 00:0720 AD -  -  -  	    xor 	l
  103 00:0721 6F -  -  -  	    ld 		l,a
  104 00:0722 22 74 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0726 EB -  -  -  	    ex 		de,hl
  106 00:0727 09 -  -  -  	    add 	hl,bc
  107 00:0728 C9 -  -  -  	    ret		
  108 00:0729 -  -  -  -  
  109 00:0729 -  -  -  -  ; ***************************************************************************************
  110 00:0729 -  -  -  -  ;
  111 00:0729 -  -  -  -  ;									Changes and Updates
  112 00:0729 -  -  -  -  ;
  113 00:0729 -  -  -  -  ; ***************************************************************************************
  114 00:0729 -  -  -  -  ;
  115 00:0729 -  -  -  -  ;		Date			Notes
  116 00:0729 -  -  -  -  ;		==== 			=====
  117 00:0729 -  -  -  -  ;
  118 00:0729 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:0729 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0729 -  -  -  -  ; ***************************************************************************************
    2 00:0729 -  -  -  -  ; ***************************************************************************************
    3 00:0729 -  -  -  -  ;
    4 00:0729 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0729 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0729 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0729 -  -  -  -  ;		Reviewed :	No
    8 00:0729 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0729 -  -  -  -  ;
   10 00:0729 -  -  -  -  ; ***************************************************************************************
   11 00:0729 -  -  -  -  ; ***************************************************************************************
   12 00:0729 -  -  -  -  
   13 00:0729 -  -  -  -  ; ***************************************************************************************
   14 00:0729 -  -  -  -  ;
   15 00:0729 -  -  -  -  ;								sgn unary function
   16 00:0729 -  -  -  -  ;
   17 00:0729 -  -  -  -  ; ***************************************************************************************
   18 00:0729 -  -  -  -  
   19 00:0729 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0729 CD 9F 04 00 		call	EvaluateIntegerTerm 		; get value
   21 00:072D CD 15 0E 00 		call 	Int32Zero 					; integer sgn() code
   22 00:0731 CA 9D 03 00 		jp 		z,UnaryInt32False
   23 00:0735 D9 -  -  -  		exx
   24 00:0736 CB 7C -  -  		bit 	7,h
   25 00:0738 D9 -  -  -  		exx
   26 00:0739 C2 99 03 00 		jp 		nz,UnaryInt32True
   27 00:073D 3E 01 -  -  		ld 		a,1
   28 00:073F C3 EA 04 00 		jp 		Return8BitConstant
   29 00:0743 -  -  -  -  
   30 00:0743 -  -  -  -  ; ***************************************************************************************
   31 00:0743 -  -  -  -  ;
   32 00:0743 -  -  -  -  ;									Changes and Updates
   33 00:0743 -  -  -  -  ;
   34 00:0743 -  -  -  -  ; ***************************************************************************************
   35 00:0743 -  -  -  -  ;
   36 00:0743 -  -  -  -  ;		Date			Notes
   37 00:0743 -  -  -  -  ;		==== 			=====
   38 00:0743 -  -  -  -  ;
   39 00:0743 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:0743 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:0743 -  -  -  -  ; ***************************************************************************************
    2 00:0743 -  -  -  -  ; ***************************************************************************************
    3 00:0743 -  -  -  -  ;
    4 00:0743 -  -  -  -  ;		Name : 		simple.asm
    5 00:0743 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0743 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0743 -  -  -  -  ;		Reviewed :	No
    8 00:0743 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:0743 -  -  -  -  ;
   10 00:0743 -  -  -  -  ; ***************************************************************************************
   11 00:0743 -  -  -  -  ; ***************************************************************************************
   12 00:0743 -  -  -  -  
   13 00:0743 -  -  -  -  ; ***************************************************************************************
   14 00:0743 -  -  -  -  ;
   15 00:0743 -  -  -  -  ;								( unary function (think about it)
   16 00:0743 -  -  -  -  ;
   17 00:0743 -  -  -  -  ; ***************************************************************************************
   18 00:0743 -  -  -  -  
   19 00:0743 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:0743 CD 46 04 00 		call 	EvaluateAtPrecedence0
   21 00:0747 C3 5C 02 00 		jp  	CheckRightBracket
   22 00:074B -  -  -  -  
   23 00:074B -  -  -  -  ; ***************************************************************************************
   24 00:074B -  -  -  -  ;
   25 00:074B -  -  -  -  ;									Handle &x
   26 00:074B -  -  -  -  ;
   27 00:074B -  -  -  -  ; ***************************************************************************************
   28 00:074B -  -  -  -  
   29 00:074B -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:074B DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:074E E6 C0 -  -  		and 		$C0
   32 00:0750 FE 40 -  -  		cp 			$40
   33 00:0752 C2 FC 02 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0756 C3 54 05 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:075A -  -  -  -  
   36 00:075A -  -  -  -  ; ***************************************************************************************
   37 00:075A -  -  -  -  ;
   38 00:075A -  -  -  -  ;									Changes and Updates
   39 00:075A -  -  -  -  ;
   40 00:075A -  -  -  -  ; ***************************************************************************************
   41 00:075A -  -  -  -  ;
   42 00:075A -  -  -  -  ;		Date			Notes
   43 00:075A -  -  -  -  ;		==== 			=====
   44 00:075A -  -  -  -  ;
   45 00:075A -  -  -  -  ; ***************************************************************************************
   46 00:075A -  -  -  -  		
Listing for file "_build.asm"
   43 00:075A -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:075A -  -  -  -  ; ***************************************************************************************
    2 00:075A -  -  -  -  ; ***************************************************************************************
    3 00:075A -  -  -  -  ;
    4 00:075A -  -  -  -  ;		Name : 		str.asm
    5 00:075A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:075A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:075A -  -  -  -  ;		Reviewed :	No
    8 00:075A -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:075A -  -  -  -  ;
   10 00:075A -  -  -  -  ; ***************************************************************************************
   11 00:075A -  -  -  -  ; ***************************************************************************************
   12 00:075A -  -  -  -  
   13 00:075A -  -  -  -  ; ***************************************************************************************
   14 00:075A -  -  -  -  ;
   15 00:075A -  -  -  -  ;								Str$() unary function
   16 00:075A -  -  -  -  ;
   17 00:075A -  -  -  -  ; ***************************************************************************************
   18 00:075A -  -  -  -  
   19 00:075A -  -  -  -  Unary_Str:	;; [str]
   20 00:075A CD 6A 02 00 		call 	CheckDollar
   21 00:075E CD 9F 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:0762 01 88 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:0766 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:0768 CD 5D 0E 00 		call 	Int32ToString 				
   25 00:076C 21 88 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:0770 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:0772 C9 -  -  -  		ret
   28 00:0773 -  -  -  -  
   29 00:0773 -  -  -  -  ; ***************************************************************************************
   30 00:0773 -  -  -  -  ;
   31 00:0773 -  -  -  -  ;									Changes and Updates
   32 00:0773 -  -  -  -  ;
   33 00:0773 -  -  -  -  ; ***************************************************************************************
   34 00:0773 -  -  -  -  ;
   35 00:0773 -  -  -  -  ;		Date			Notes
   36 00:0773 -  -  -  -  ;		==== 			=====
   37 00:0773 -  -  -  -  ;
   38 00:0773 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0773 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:0773 -  -  -  -  ; ***************************************************************************************
    2 00:0773 -  -  -  -  ; ***************************************************************************************
    3 00:0773 -  -  -  -  ;
    4 00:0773 -  -  -  -  ;		Name : 		time.asm
    5 00:0773 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0773 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0773 -  -  -  -  ;		Reviewed :	No
    8 00:0773 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:0773 -  -  -  -  ;
   10 00:0773 -  -  -  -  ; ***************************************************************************************
   11 00:0773 -  -  -  -  ; ***************************************************************************************
   12 00:0773 -  -  -  -  
   13 00:0773 -  -  -  -  ; ***************************************************************************************
   14 00:0773 -  -  -  -  ;
   15 00:0773 -  -  -  -  ;							Get system time in ms
   16 00:0773 -  -  -  -  ;
   17 00:0773 -  -  -  -  ; ***************************************************************************************
   18 00:0773 -  -  -  -  
   19 00:0773 -  -  -  -  Unary_Time:	;; [time]
   20 00:0773 CD AE 0E 00 			call 	SYSGetTimer
   21 00:0777 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0779 C9 -  -  -  			ret
   23 00:077A -  -  -  -  
   24 00:077A -  -  -  -  ; ***************************************************************************************
   25 00:077A -  -  -  -  ;
   26 00:077A -  -  -  -  ;									Changes and Updates
   27 00:077A -  -  -  -  ;
   28 00:077A -  -  -  -  ; ***************************************************************************************
   29 00:077A -  -  -  -  ;
   30 00:077A -  -  -  -  ;		Date			Notes
   31 00:077A -  -  -  -  ;		==== 			=====
   32 00:077A -  -  -  -  ;
   33 00:077A -  -  -  -  ; ***************************************************************************************
   34 00:077A -  -  -  -  			
Listing for file "_build.asm"
   45 00:077A -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:077A -  -  -  -  ; ***************************************************************************************
    2 00:077A -  -  -  -  ; ***************************************************************************************
    3 00:077A -  -  -  -  ;
    4 00:077A -  -  -  -  ;		Name : 		top.asm
    5 00:077A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:077A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:077A -  -  -  -  ;		Reviewed :	No
    8 00:077A -  -  -  -  ;		Purpose :	Various constants.
    9 00:077A -  -  -  -  ;
   10 00:077A -  -  -  -  ; ***************************************************************************************
   11 00:077A -  -  -  -  ; ***************************************************************************************
   12 00:077A -  -  -  -  
   13 00:077A -  -  -  -  ; ***************************************************************************************
   14 00:077A -  -  -  -  ;
   15 00:077A -  -  -  -  ;							page unary function (no bracket)
   16 00:077A -  -  -  -  ;
   17 00:077A -  -  -  -  ; ***************************************************************************************
   18 00:077A -  -  -  -  
   19 00:077A -  -  -  -  Unary_Top:	;; [top]
   20 00:077A 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:077E D9 -  -  -  			exx
   22 00:077F 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:0783 D9 -  -  -  			exx
   24 00:0784 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0786 C9 -  -  -  			ret
   26 00:0787 -  -  -  -  
   27 00:0787 -  -  -  -  ; ***************************************************************************************
   28 00:0787 -  -  -  -  ;
   29 00:0787 -  -  -  -  ;									Changes and Updates
   30 00:0787 -  -  -  -  ;
   31 00:0787 -  -  -  -  ; ***************************************************************************************
   32 00:0787 -  -  -  -  ;
   33 00:0787 -  -  -  -  ;		Date			Notes
   34 00:0787 -  -  -  -  ;		==== 			=====
   35 00:0787 -  -  -  -  ;
   36 00:0787 -  -  -  -  ; ***************************************************************************************
   37 00:0787 -  -  -  -  			
Listing for file "_build.asm"
   46 00:0787 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0787 -  -  -  -  ; ***************************************************************************************
    2 00:0787 -  -  -  -  ; ***************************************************************************************
    3 00:0787 -  -  -  -  ;
    4 00:0787 -  -  -  -  ;		Name : 		val.asm
    5 00:0787 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0787 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0787 -  -  -  -  ;		Reviewed :	No
    8 00:0787 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0787 -  -  -  -  ;
   10 00:0787 -  -  -  -  ; ***************************************************************************************
   11 00:0787 -  -  -  -  ; ***************************************************************************************
   12 00:0787 -  -  -  -  
   13 00:0787 -  -  -  -  ; ***************************************************************************************
   14 00:0787 -  -  -  -  ;
   15 00:0787 -  -  -  -  ;								val( unary function
   16 00:0787 -  -  -  -  ;
   17 00:0787 -  -  -  -  ; ***************************************************************************************
   18 00:0787 -  -  -  -  
   19 00:0787 -  -  -  -  Unary_Val:	;; [val]
   20 00:0787 CD AE 04 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:078B E5 -  -  -  		push 	hl 							; copy to BC
   22 00:078C C1 -  -  -  		pop 	bc
   23 00:078D 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:078F CD 3B 0D 00 		call 	Int32FromString 			; get the integer part.
   25 00:0793 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0795 C8 -  -  -  		ret		z 							; okay
   27 00:0796 3E 03 C3 92 
              02 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:079C -  -  -  -  
   29 00:079C -  -  -  -  ; ***************************************************************************************
   30 00:079C -  -  -  -  ;
   31 00:079C -  -  -  -  ;									Changes and Updates
   32 00:079C -  -  -  -  ;
   33 00:079C -  -  -  -  ; ***************************************************************************************
   34 00:079C -  -  -  -  ;
   35 00:079C -  -  -  -  ;		Date			Notes
   36 00:079C -  -  -  -  ;		==== 			=====
   37 00:079C -  -  -  -  ;
   38 00:079C -  -  -  -  ; ***************************************************************************************
   39 00:079C -  -  -  -  		
Listing for file "_build.asm"
   47 00:079C -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:079C -  -  -  -  ; ***************************************************************************************
    2 00:079C -  -  -  -  ; ***************************************************************************************
    3 00:079C -  -  -  -  ;
    4 00:079C -  -  -  -  ;		Name : 		allocate.asm
    5 00:079C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:079C -  -  -  -  ;		Date : 		4th June 2022
    7 00:079C -  -  -  -  ;		Reviewed :	No
    8 00:079C -  -  -  -  ;		Purpose :	Allocate memory
    9 00:079C -  -  -  -  ;
   10 00:079C -  -  -  -  ; ***************************************************************************************
   11 00:079C -  -  -  -  ; ***************************************************************************************
   12 00:079C -  -  -  -  
   13 00:079C -  -  -  -  ; ***************************************************************************************
   14 00:079C -  -  -  -  ;
   15 00:079C -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:079C -  -  -  -  ;
   17 00:079C -  -  -  -  ; ***************************************************************************************
   18 00:079C -  -  -  -  
   19 00:079C -  -  -  -  AllocateBytes:
   20 00:079C ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:07A1 D5 -  -  -  		push 	de 							; save on stack
   22 00:07A2 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:07A3 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   24 00:07A7 EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:07A8 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:07AC AF -  -  -  		xor 	a
   27 00:07AD ED 52 -  -  		sbc 	hl,de
   28 00:07AF E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:07B0 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:07B1 3E 06 C3 92 
              02 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:07B7 -  -  -  -  
   32 00:07B7 -  -  -  -  ; ***************************************************************************************
   33 00:07B7 -  -  -  -  ;
   34 00:07B7 -  -  -  -  ;									Changes and Updates
   35 00:07B7 -  -  -  -  ;
   36 00:07B7 -  -  -  -  ; ***************************************************************************************
   37 00:07B7 -  -  -  -  ;
   38 00:07B7 -  -  -  -  ;		Date			Notes
   39 00:07B7 -  -  -  -  ;		==== 			=====
   40 00:07B7 -  -  -  -  ;
   41 00:07B7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 00:07B7 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:07B7 -  -  -  -  ; ***************************************************************************************
    2 00:07B7 -  -  -  -  ; ***************************************************************************************
    3 00:07B7 -  -  -  -  ;
    4 00:07B7 -  -  -  -  ;		Name : 		clear.asm
    5 00:07B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07B7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07B7 -  -  -  -  ;		Reviewed :	No
    8 00:07B7 -  -  -  -  ;		Purpose :	Clear command.
    9 00:07B7 -  -  -  -  ;
   10 00:07B7 -  -  -  -  ; ***************************************************************************************
   11 00:07B7 -  -  -  -  ; ***************************************************************************************
   12 00:07B7 -  -  -  -  
   13 00:07B7 -  -  -  -  ; ***************************************************************************************
   14 00:07B7 -  -  -  -  ;
   15 00:07B7 -  -  -  -  ;										CLEAR command
   16 00:07B7 -  -  -  -  ;
   17 00:07B7 -  -  -  -  ; ***************************************************************************************
   18 00:07B7 -  -  -  -  
   19 00:07B7 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:07B7 -  -  -  -  		;
   21 00:07B7 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:07B7 -  -  -  -  		;
   23 00:07B7 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:07BB -  -  -  -  _CCFindLow:
   25 00:07BB 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:07BF 5E -  -  -  		ld 		e,(hl)		
   27 00:07C0 19 -  -  -  		add 	hl,de
   28 00:07C1 7B -  -  -  		ld 		a,e
   29 00:07C2 B7 -  -  -  		or 		a
   30 00:07C3 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:07C5 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:07C6 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:07CA 23 -  -  -  		inc 	hl 							; one for luck
   34 00:07CB 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:07CF -  -  -  -  		;
   36 00:07CF -  -  -  -  		; 	 		Reset the language stack
   37 00:07CF -  -  -  -  		;
   38 00:07CF 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:07D3 -  -  -  -  		;
   40 00:07D3 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:07D5 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:07D9 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:07DD 19 -  -  -  		add 	hl,de
   44 00:07DE 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:07E0 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:07E4 -  -  -  -  		;
   47 00:07E4 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:07E8 19 -  -  -  		add 	hl,de
   49 00:07E9 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:07ED -  -  -  -  		;
   51 00:07ED -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:07ED -  -  -  -  		;
   53 00:07ED 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:07F1 -  -  -  -  _CCFClearHT:
   55 00:07F1 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:07F2 36 00 -  -  		ld 		(hl),0
   57 00:07F4 1B -  -  -  		dec 	de
   58 00:07F5 7A -  -  -  		ld 		a,d
   59 00:07F6 B3 -  -  -  		or 		e
   60 00:07F7 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:07F9 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   62 00:07FD -  -  -  -  		;
   63 00:07FD -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:07FD -  -  -  -  		;
   65 00:07FD 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:0801 -  -  -  -  		;
   67 00:0801 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:0801 -  -  -  -  		;
   69 00:0801 CD D9 06 00 		call 	UnaryRandomInitialise
   70 00:0805 C9 -  -  -  		ret
   71 00:0806 -  -  -  -  
   72 00:0806 -  -  -  -  ; ***************************************************************************************
   73 00:0806 -  -  -  -  ;
   74 00:0806 -  -  -  -  ;									Changes and Updates
   75 00:0806 -  -  -  -  ;
   76 00:0806 -  -  -  -  ; ***************************************************************************************
   77 00:0806 -  -  -  -  ;
   78 00:0806 -  -  -  -  ;		Date			Notes
   79 00:0806 -  -  -  -  ;		==== 			=====
   80 00:0806 -  -  -  -  ;
   81 00:0806 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:0806 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0806 -  -  -  -  ; ***************************************************************************************
    2 00:0806 -  -  -  -  ; ***************************************************************************************
    3 00:0806 -  -  -  -  ;
    4 00:0806 -  -  -  -  ;		Name : 		instance.asm
    5 00:0806 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0806 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0806 -  -  -  -  ;		Reviewed :	No
    8 00:0806 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0806 -  -  -  -  ;
   10 00:0806 -  -  -  -  ; ***************************************************************************************
   11 00:0806 -  -  -  -  ; ***************************************************************************************
   12 00:0806 -  -  -  -  
   13 00:0806 -  -  -  -  ; ***************************************************************************************
   14 00:0806 -  -  -  -  ;
   15 00:0806 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0806 -  -  -  -  ;
   17 00:0806 -  -  -  -  ; ***************************************************************************************
   18 00:0806 -  -  -  -  
   19 00:0806 -  -  -  -  SetCurrentInstance:
   20 00:0806 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:080B 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:080F ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0814 -  -  -  -  
   24 00:0814 C9 -  -  -  		ret
   25 00:0815 -  -  -  -  
   26 00:0815 -  -  -  -  
   27 00:0815 -  -  -  -  ; ***************************************************************************************
   28 00:0815 -  -  -  -  ;
   29 00:0815 -  -  -  -  ;									Changes and Updates
   30 00:0815 -  -  -  -  ;
   31 00:0815 -  -  -  -  ; ***************************************************************************************
   32 00:0815 -  -  -  -  ;
   33 00:0815 -  -  -  -  ;		Date			Notes
   34 00:0815 -  -  -  -  ;		==== 			=====
   35 00:0815 -  -  -  -  ;
   36 00:0815 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:0815 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0815 -  -  -  -  ; ***************************************************************************************
    2 00:0815 -  -  -  -  ; ***************************************************************************************
    3 00:0815 -  -  -  -  ;
    4 00:0815 -  -  -  -  ;		Name : 		new.asm
    5 00:0815 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0815 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0815 -  -  -  -  ;		Reviewed :	No
    8 00:0815 -  -  -  -  ;		Purpose :	New command.
    9 00:0815 -  -  -  -  ;
   10 00:0815 -  -  -  -  ; ***************************************************************************************
   11 00:0815 -  -  -  -  ; ***************************************************************************************
   12 00:0815 -  -  -  -  
   13 00:0815 -  -  -  -  ; ***************************************************************************************
   14 00:0815 -  -  -  -  ;
   15 00:0815 -  -  -  -  ;										NEW command
   16 00:0815 -  -  -  -  ;
   17 00:0815 -  -  -  -  ; ***************************************************************************************
   18 00:0815 -  -  -  -  
   19 00:0815 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0815 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0819 36 00 -  -  		ld 		(hl),0
   22 00:081B CD B7 07 00 		call 	Command_CLEAR 				; clear all variables
   23 00:081F 3E 00 C3 92 
              02 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0825 -  -  -  -  
   25 00:0825 -  -  -  -  ; ***************************************************************************************
   26 00:0825 -  -  -  -  ;
   27 00:0825 -  -  -  -  ;									Changes and Updates
   28 00:0825 -  -  -  -  ;
   29 00:0825 -  -  -  -  ; ***************************************************************************************
   30 00:0825 -  -  -  -  ;
   31 00:0825 -  -  -  -  ;		Date			Notes
   32 00:0825 -  -  -  -  ;		==== 			=====
   33 00:0825 -  -  -  -  ;
   34 00:0825 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:0825 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0825 -  -  -  -  ; ***************************************************************************************
    2 00:0825 -  -  -  -  ; ***************************************************************************************
    3 00:0825 -  -  -  -  ;
    4 00:0825 -  -  -  -  ;		Name : 		utility.asm
    5 00:0825 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0825 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0825 -  -  -  -  ;		Reviewed :	No
    8 00:0825 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0825 -  -  -  -  ;
   10 00:0825 -  -  -  -  ; ***************************************************************************************
   11 00:0825 -  -  -  -  ; ***************************************************************************************
   12 00:0825 -  -  -  -  
   13 00:0825 -  -  -  -  ; ***************************************************************************************
   14 00:0825 -  -  -  -  ;
   15 00:0825 -  -  -  -  ;							Print ASCII string at HL
   16 00:0825 -  -  -  -  ;
   17 00:0825 -  -  -  -  ; ***************************************************************************************
   18 00:0825 -  -  -  -  
   19 00:0825 -  -  -  -  PrintStringAtHL:
   20 00:0825 7E -  -  -  		ld 		a,(hl)
   21 00:0826 FE 20 -  -  		cp 		$20		
   22 00:0828 D8 -  -  -  		ret 	c
   23 00:0829 CD AC 0E 00 		call 	SYSPrintChar
   24 00:082D 23 -  -  -  		inc 	hl
   25 00:082E 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0830 -  -  -  -  
   27 00:0830 -  -  -  -  ; ***************************************************************************************
   28 00:0830 -  -  -  -  ;
   29 00:0830 -  -  -  -  ;									Changes and Updates
   30 00:0830 -  -  -  -  ;
   31 00:0830 -  -  -  -  ; ***************************************************************************************
   32 00:0830 -  -  -  -  ;
   33 00:0830 -  -  -  -  ;		Date			Notes
   34 00:0830 -  -  -  -  ;		==== 			=====
   35 00:0830 -  -  -  -  ;
   36 00:0830 -  -  -  -  ; ***************************************************************************************
   37 00:0830 -  -  -  -  		
Listing for file "_build.asm"
   52 00:0830 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0830 -  -  -  -  ; ***************************************************************************************
    2 00:0830 -  -  -  -  ; ***************************************************************************************
    3 00:0830 -  -  -  -  ;
    4 00:0830 -  -  -  -  ;		Name : 		create.asm
    5 00:0830 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0830 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0830 -  -  -  -  ;		Reviewed :	No
    8 00:0830 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0830 -  -  -  -  ;
   10 00:0830 -  -  -  -  ; ***************************************************************************************
   11 00:0830 -  -  -  -  ; ***************************************************************************************
   12 00:0830 -  -  -  -  
   13 00:0830 -  -  -  -  ; ***************************************************************************************
   14 00:0830 -  -  -  -  ;
   15 00:0830 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0830 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0830 -  -  -  -  ;
   18 00:0830 -  -  -  -  ; ***************************************************************************************
   19 00:0830 -  -  -  -  
   20 00:0830 -  -  -  -  VariableCreate:		
   21 00:0830 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   22 00:0838 -  -  -  -  		;
   23 00:0838 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   24 00:0838 -  -  -  -  		;
   25 00:0838 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   26 00:083C 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   27 00:083D E5 -  -  -  		push 	hl 							; save count.
   28 00:083E CD 9C 07 00 		call 	AllocateBytes 				; claim that many bytes
   29 00:0842 C1 -  -  -  		pop 	bc 							; restore count to BC
   30 00:0843 -  -  -  -  		;
   31 00:0843 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   32 00:0843 -  -  -  -  		;
   33 00:0843 E5 -  -  -  		push	hl 							; save start address on stack
   34 00:0844 -  -  -  -  _VCClear:
   35 00:0844 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   36 00:0846 23 -  -  -  		inc 	hl
   37 00:0847 0B -  -  -  		dec 	bc
   38 00:0848 78 -  -  -  		ld		a,b
   39 00:0849 B1 -  -  -  		or 		c
   40 00:084A 20 F8 -  -  		jr 		nz,_VCClear
   41 00:084C E1 -  -  -  		pop 	hl							; restore start address
   42 00:084D F5 3E 02 32 
              FF FF FF F1 		debug
   43 00:0855 -  -  -  -  		;
   44 00:0855 -  -  -  -  		;		Now start to create the data.
   45 00:0855 -  -  -  -  		;
   46 00:0855 E5 -  -  -  		push 	hl 							; save start
   47 00:0856 -  -  -  -  		;
   48 00:0856 -  -  -  -  		;		Write hash to +0
   49 00:0856 -  -  -  -  		;
   50 00:0856 3A 82 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   51 00:085A 77 -  -  -  		ld 		(hl),a
   52 00:085B 23 -  -  -  		inc 	hl
   53 00:085C -  -  -  -  		;
   54 00:085C -  -  -  -  		;		Write list head to +1
   55 00:085C -  -  -  -  		;
   56 00:085C E5 -  -  -  		push 	hl 							; save write position
   57 00:085D 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   58 00:0861 ED 27 -  -  		ld_ind_hl 							; get the list head
   59 00:0863 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   60 00:0864 E1 -  -  -  		pop 	hl 		 					; restore write position
   61 00:0865 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   62 00:086B -  -  -  -  		;
   63 00:086B -  -  -  -  		;		Write variable name to +5
   64 00:086B -  -  -  -  		;
   65 00:086B ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   66 00:0870 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   67 00:0876 -  -  -  -  		;
   68 00:0876 D1 -  -  -  		pop 	de 							; get the start address back
   69 00:0877 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   70 00:087B ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   71 00:0881 -  -  -  -  		;
   72 00:0881 EB -  -  -  		ex 		de,hl 						; start address into HL
   73 00:0882 C9 -  -  -  		ret
   74 00:0883 -  -  -  -  
   75 00:0883 -  -  -  -  ; ***************************************************************************************
   76 00:0883 -  -  -  -  ;
   77 00:0883 -  -  -  -  ;									Changes and Updates
   78 00:0883 -  -  -  -  ;
   79 00:0883 -  -  -  -  ; ***************************************************************************************
   80 00:0883 -  -  -  -  ;
   81 00:0883 -  -  -  -  ;		Date			Notes
   82 00:0883 -  -  -  -  ;		==== 			=====
   83 00:0883 -  -  -  -  ;
   84 00:0883 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:0883 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0883 -  -  -  -  ; ***************************************************************************************
    2 00:0883 -  -  -  -  ; ***************************************************************************************
    3 00:0883 -  -  -  -  ;
    4 00:0883 -  -  -  -  ;		Name : 		find.asm
    5 00:0883 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0883 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0883 -  -  -  -  ;		Reviewed :	No
    8 00:0883 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0883 -  -  -  -  ;
   10 00:0883 -  -  -  -  ; ***************************************************************************************
   11 00:0883 -  -  -  -  ; ***************************************************************************************
   12 00:0883 -  -  -  -  
   13 00:0883 -  -  -  -  ; ***************************************************************************************
   14 00:0883 -  -  -  -  ;
   15 00:0883 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0883 -  -  -  -  ; 		variable information at (IX)
   17 00:0883 -  -  -  -  ;
   18 00:0883 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0883 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0883 -  -  -  -  ;
   21 00:0883 -  -  -  -  ; ***************************************************************************************
   22 00:0883 -  -  -  -  
   23 00:0883 -  -  -  -  FindVariable:
   24 00:0883 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0886 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0888 D2 FC 02 00 		jp 		nc,SyntaxError 		
   27 00:088C -  -  -  -  
   28 00:088C DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:088F FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0891 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0893 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0895 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0897 -  -  -  -  		;
   34 00:0897 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0897 -  -  -  -  		;
   36 00:0897 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:089B DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:089E 87 -  -  -  		add 	a,a 						; x4
   39 00:089F 87 -  -  -  		add 	a,a
   40 00:08A0 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:08A1 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:08A2 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:08A4 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:08A6 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:08A8 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:08A9 C9 -  -  -  		ret
   47 00:08AA -  -  -  -  		;
   48 00:08AA -  -  -  -  		;		Not a standard simple variable.
   49 00:08AA -  -  -  -  		;
   50 00:08AA -  -  -  -  _FVNotSimple:
   51 00:08AA CD E6 08 00 		call 	VariableInformation 		; get information about the variable.
   52 00:08AE CD 20 09 00 		call 	VariableSearchList 			; search the linked list
   53 00:08B2 38 0B -  -  		jr 		c,_FVNotFound  				
   54 00:08B4 -  -  -  -  		;
   55 00:08B4 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:08B4 -  -  -  -  		;
   57 00:08B4 -  -  -  -  _FVExitReference:		
   58 00:08B4 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:08B8 19 -  -  -  		add 	hl,de 
   60 00:08B9 -  -  -  -  		;
   61 00:08B9 -  -  -  -  		; 		TODO: Array check code.
   62 00:08B9 -  -  -  -  		;
   63 00:08B9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:08BB CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:08BD AF -  -  -  		xor 	a 							; clear carry and return
   66 00:08BE C9 -  -  -  		ret
   67 00:08BF -  -  -  -  		;
   68 00:08BF -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:08BF -  -  -  -  		;
   70 00:08BF -  -  -  -  _FVNotFound:		
   71 00:08BF F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
   72 00:08C7 -  -  -  -  
   73 00:08C7 3A 7C 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   74 00:08CB B7 -  -  -  		or 		a
   75 00:08CC 28 11 -  -  		jr 		z,_FVFail
   76 00:08CE DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   77 00:08D1 FE 95 -  -  		cp 		KWD_LPAREN 		
   78 00:08D3 28 0A -  -  		jr 		z,_FVFail
   79 00:08D5 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   80 00:08D9 CD 30 08 00 		call 	VariableCreate 				; create a new variable.
   81 00:08DD 18 D5 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   82 00:08DF -  -  -  -  
   83 00:08DF -  -  -  -  _FVFail:
   84 00:08DF DD 2A 7E 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   85 00:08E4 37 -  -  -  		scf
   86 00:08E5 C9 -  -  -  		ret
   87 00:08E6 -  -  -  -  
   88 00:08E6 -  -  -  -  ; ***************************************************************************************
   89 00:08E6 -  -  -  -  ;
   90 00:08E6 -  -  -  -  ;									Changes and Updates
   91 00:08E6 -  -  -  -  ;
   92 00:08E6 -  -  -  -  ; ***************************************************************************************
   93 00:08E6 -  -  -  -  ;
   94 00:08E6 -  -  -  -  ;		Date			Notes
   95 00:08E6 -  -  -  -  ;		==== 			=====
   96 00:08E6 -  -  -  -  ;
   97 00:08E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:08E6 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:08E6 -  -  -  -  ; ***************************************************************************************
    2 00:08E6 -  -  -  -  ; ***************************************************************************************
    3 00:08E6 -  -  -  -  ;
    4 00:08E6 -  -  -  -  ;		Name : 		info.asm
    5 00:08E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08E6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:08E6 -  -  -  -  ;		Reviewed :	No
    8 00:08E6 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:08E6 -  -  -  -  ;
   10 00:08E6 -  -  -  -  ; ***************************************************************************************
   11 00:08E6 -  -  -  -  ; ***************************************************************************************
   12 00:08E6 -  -  -  -  
   13 00:08E6 -  -  -  -  ; ***************************************************************************************
   14 00:08E6 -  -  -  -  ;
   15 00:08E6 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:08E6 -  -  -  -  ; 		after the identifier.
   17 00:08E6 -  -  -  -  ;
   18 00:08E6 -  -  -  -  ; ***************************************************************************************
   19 00:08E6 -  -  -  -  
   20 00:08E6 -  -  -  -  VariableInformation:
   21 00:08E6 DD 22 7E 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:08EB -  -  -  -  		;
   23 00:08EB -  -  -  -  		; 		Calculate hash, find end.
   24 00:08EB -  -  -  -  		;
   25 00:08EB 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:08ED -  -  -  -  _VICalculateHash:
   27 00:08ED DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:08F0 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:08F2 30 08 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:08F4 80 -  -  -  		add 	a,b 						; add to hash
   31 00:08F5 0F -  -  -  		rrca 								; rotate byte twice right
   32 00:08F6 0F -  -  -  		rrca
   33 00:08F7 47 -  -  -  		ld 		b,a 						; update hash
   34 00:08F8 DD 23 -  -  		inc 	ix 							; next character
   35 00:08FA 18 F1 -  -  		jr 		_VICalculateHash				
   36 00:08FC -  -  -  -  		;
   37 00:08FC -  -  -  -  _VIHashDone:
   38 00:08FC 78 -  -  -  		ld 		a,b 						; write hash byte out
   39 00:08FD 32 82 00 00 		ld 		(VarHash),a
   40 00:0901 -  -  -  -  		;
   41 00:0901 -  -  -  -  		; 		Calculate the hash table address pointer.
   42 00:0901 -  -  -  -  		;		
   43 00:0901 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   44 00:0903 87 -  -  -  		add 	a,a 						; multiply by 4
   45 00:0904 87 -  -  -  		add 	a,a
   46 00:0905 11 00 00 00 		ld 		de,$0000 					; put in DE
   47 00:0909 5F -  -  -  		ld 		e,a
   48 00:090A -  -  -  -  		;
   49 00:090A 21 48 00 00 		ld 		hl,HashTableBase 			; add to hash table base.
   50 00:090E 19 -  -  -  		add 	hl,de
   51 00:090F -  -  -  -  		;
   52 00:090F DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   53 00:0912 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   54 00:0914 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   55 00:0916 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   56 00:091A 19 -  -  -  		add 	hl,de 						; for hash tables
   57 00:091B -  -  -  -  _VINotArray:
   58 00:091B 22 84 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   59 00:091F C9 -  -  -  		ret
   60 00:0920 -  -  -  -  
   61 00:0920 -  -  -  -  ; ***************************************************************************************
   62 00:0920 -  -  -  -  ;
   63 00:0920 -  -  -  -  ;									Changes and Updates
   64 00:0920 -  -  -  -  ;
   65 00:0920 -  -  -  -  ; ***************************************************************************************
   66 00:0920 -  -  -  -  ;
   67 00:0920 -  -  -  -  ;		Date			Notes
   68 00:0920 -  -  -  -  ;		==== 			=====
   69 00:0920 -  -  -  -  ;
   70 00:0920 -  -  -  -  ; ***************************************************************************************
   71 00:0920 -  -  -  -  
Listing for file "_build.asm"
   55 00:0920 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0920 -  -  -  -  ; ***************************************************************************************
    2 00:0920 -  -  -  -  ; ***************************************************************************************
    3 00:0920 -  -  -  -  ;
    4 00:0920 -  -  -  -  ;		Name : 		search.asm
    5 00:0920 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0920 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0920 -  -  -  -  ;		Reviewed :	No
    8 00:0920 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0920 -  -  -  -  ;
   10 00:0920 -  -  -  -  ; ***************************************************************************************
   11 00:0920 -  -  -  -  ; ***************************************************************************************
   12 00:0920 -  -  -  -  
   13 00:0920 -  -  -  -  ; ***************************************************************************************
   14 00:0920 -  -  -  -  ;
   15 00:0920 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0920 -  -  -  -  ;		CS if failed.
   17 00:0920 -  -  -  -  ;
   18 00:0920 -  -  -  -  ; ***************************************************************************************
   19 00:0920 -  -  -  -  
   20 00:0920 -  -  -  -  VariableSearchList:
   21 00:0920 37 -  -  -  		scf
   22 00:0921 C9 -  -  -  		ret
   23 00:0922 -  -  -  -  
   24 00:0922 -  -  -  -  ; ***************************************************************************************
   25 00:0922 -  -  -  -  ;
   26 00:0922 -  -  -  -  ;									Changes and Updates
   27 00:0922 -  -  -  -  ;
   28 00:0922 -  -  -  -  ; ***************************************************************************************
   29 00:0922 -  -  -  -  ;
   30 00:0922 -  -  -  -  ;		Date			Notes
   31 00:0922 -  -  -  -  ;		==== 			=====
   32 00:0922 -  -  -  -  ;
   33 00:0922 -  -  -  -  ; ***************************************************************************************
   34 00:0922 -  -  -  -  		
Listing for file "_build.asm"
   56 00:0922 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 00:0922 -  -  -  -  ;
    2 00:0922 -  -  -  -  ;	This file is automatically generated.
    3 00:0922 -  -  -  -  ;
    4 00:0922 -  -  -  -  ;
    5 00:0922 -  -  -  -  ;	Keywords for set 0
    6 00:0922 -  -  -  -  ;
    7 00:0922 -  -  -  -  KeywordsSet0:
    8 00:0922 01 20 -  -  	.db	1," "              ; $0080
    9 00:0924 01 20 -  -  	.db	1," "              ; $0081
   10 00:0926 01 20 -  -  	.db	1," "              ; $0082
   11 00:0928 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:092A 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:092C 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:092E 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:0930 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:0934 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:0938 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:093A 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:093C 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:093F 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:0942 01 3E -  -  	.db	1,">"              ; $008d
   22 00:0944 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:0946 01 3D -  -  	.db	1,"="              ; $008f
   24 00:0948 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:094B 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:094F 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:0952 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:0956 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:0958 01 28 -  -  	.db	1,"("              ; $0095
   30 00:095A 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:095C 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:0960 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:0964 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:0968 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:096C 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:0970 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:0974 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:0978 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:097C 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:0981 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:0986 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:098A 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:098E 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 00:0993 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 00:0999 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:099B 01 2C -  -  	.db	1,","              ; $00a6
   47 00:099D 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:099F 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:09A1 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:09A3 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 00:09AA 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 00:09B0 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 00:09B3 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 00:09B8 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 00:09BD 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 00:09C1 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 00:09C4 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 00:09C9 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 00:09CE 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 00:09D2 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 00:09D7 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 00:09DF 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 00:09E5 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 00:09E9 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 00:09ED 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 00:09F1 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 00:09F5 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 00:09FB 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 00:0A00 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 00:0A05 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 00:0A0A 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 00:0A0E 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 00:0A12 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 00:0A17 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 00:0A1C 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 00:0A24 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 00:0A2B 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 00:0A31 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 00:0A35 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 00:0A3A 00 -  -  -  	.db	0
   81 00:0A3B -  -  -  -  ;
   82 00:0A3B -  -  -  -  ;	Keywords for set 1
   83 00:0A3B -  -  -  -  ;
   84 00:0A3B -  -  -  -  KeywordsSet1:
   85 00:0A3B 00 -  -  -  	.db	0
   86 00:0A3C -  -  -  -  ;
   87 00:0A3C -  -  -  -  ;	Keywords for set 2
   88 00:0A3C -  -  -  -  ;
   89 00:0A3C -  -  -  -  KeywordsSet2:
   90 00:0A3C 00 -  -  -  	.db	0
Listing for file "_build.asm"
   57 00:0A3D -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0A3D -  -  -  -  ;
    2 00:0A3D -  -  -  -  ;	This file is automatically generated.
    3 00:0A3D -  -  -  -  ;
    4 00:0A3D 00 00 00 -  	.block	$20-($ & $1F)
    5 00:0A40 -  -  -  -  PrecedenceTable:
    6 00:0A40 06 -  -  -  	.db	6	; $0083 !
    7 00:0A41 06 -  -  -  	.db	6	; $0084 ?
    8 00:0A42 05 -  -  -  	.db	5	; $0085 *
    9 00:0A43 05 -  -  -  	.db	5	; $0086 /
   10 00:0A44 05 -  -  -  	.db	5	; $0087 mod
   11 00:0A45 05 -  -  -  	.db	5	; $0088 div
   12 00:0A46 04 -  -  -  	.db	4	; $0089 +
   13 00:0A47 04 -  -  -  	.db	4	; $008a -
   14 00:0A48 03 -  -  -  	.db	3	; $008b >=
   15 00:0A49 03 -  -  -  	.db	3	; $008c <=
   16 00:0A4A 03 -  -  -  	.db	3	; $008d >
   17 00:0A4B 03 -  -  -  	.db	3	; $008e <
   18 00:0A4C 03 -  -  -  	.db	3	; $008f =
   19 00:0A4D 03 -  -  -  	.db	3	; $0090 <>
   20 00:0A4E 02 -  -  -  	.db	2	; $0091 and
   21 00:0A4F 01 -  -  -  	.db	1	; $0092 or
   22 00:0A50 01 -  -  -  	.db	1	; $0093 eor
   23 00:0A51 -  -  -  -  
Listing for file "_build.asm"
   58 00:0A51 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0A51 -  -  -  -  ;
    2 00:0A51 -  -  -  -  ;	This is automatically generated.
    3 00:0A51 -  -  -  -  ;
    4 00:0A51 -  -  -  -  ErrorIDTable:
    5 00:0A51 91 0A 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0A55 97 0A 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0A59 A8 0A 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0A5D B6 0A 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0A61 C0 0A 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 00:0A65 DA 0A 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 00:0A69 EB 0A 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 00:0A6D F9 0A 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 00:0A71 07 0B 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 00:0A75 11 0B 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 00:0A79 26 0B 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 00:0A7D 3C 0B 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 00:0A81 4A 0B 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 00:0A85 4F 0B 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 00:0A89 5C 0B 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 00:0A8D 6D 0B 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 00:0A91 -  -  -  -  
   22 00:0A91 -  -  -  -  ErrText_warmstart:
   23 00:0A91 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 00:0A97 -  -  -  -  ErrText_assert:
   25 00:0A97 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 00:0AA8 -  -  -  -  ErrText_badtype:
   27 00:0AA8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 00:0AB6 -  -  -  -  ErrText_badvalue:
   29 00:0AB6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 00:0AC0 -  -  -  -  ErrText_disabled:
   31 00:0AC0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 00:0ADA -  -  -  -  ErrText_divzero:
   33 00:0ADA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 00:0AEB -  -  -  -  ErrText_memory:
   35 00:0AEB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 00:0AF9 -  -  -  -  ErrText_nocomma:
   37 00:0AF9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 00:0B07 -  -  -  -  ErrText_nodollar:
   39 00:0B07 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 00:0B11 -  -  -  -  ErrText_nolbracket:
   41 00:0B11 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 00:0B26 -  -  -  -  ErrText_norbracket:
   43 00:0B26 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 00:0B3C -  -  -  -  ErrText_notref:
   45 00:0B3C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 00:0B4A -  -  -  -  ErrText_stop:
   47 00:0B4A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 00:0B4F -  -  -  -  ErrText_syntax:
   49 00:0B4F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 00:0B5C -  -  -  -  ErrText_todo:
   51 00:0B5C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 00:0B6D -  -  -  -  ErrText_unknownvar:
   53 00:0B6D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:0B7E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0B7E -  -  -  -  ;
    2 00:0B7E -  -  -  -  ;	Vectors for set 0
    3 00:0B7E -  -  -  -  ;
    4 00:0B7E -  -  -  -  VectorsSet0:
    5 00:0B7E F6 00 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0B82 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0B86 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0B8A 72 03 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0B8E 7B 03 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0B92 1E 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0B96 2C 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0B9A 3A 03 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0B9E 2C 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0BA2 02 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0BA6 10 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0BAA D9 03 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0BAE CF 03 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0BB2 BB 03 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0BB6 B1 03 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0BBA A7 03 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0BBE C5 03 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0BC2 48 03 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0BC6 56 03 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0BCA 64 03 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0BCE 4B 07 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0BD2 43 07 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0BD6 65 06 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0BDA 92 06 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0BDE 54 06 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0BE2 2A 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0BE6 29 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0BEA 5A 07 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0BEE 40 06 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0BF2 37 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0BF6 70 06 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0BFA 85 06 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0BFE 73 07 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0C02 7A 07 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0C06 87 07 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0C0A 99 03 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0C0E 9D 03 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0C12 EB 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0C16 EB 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0C1A EF 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0C1E EB 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0C22 B8 01 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0C26 24 00 00 00 	addr(Unimplemented)              ; $00aa repeat
   48 00:0C2A 24 00 00 00 	addr(Unimplemented)              ; $00ab until
   49 00:0C2E 24 00 00 00 	addr(Unimplemented)              ; $00ac if
   50 00:0C32 EB 00 00 00 	addr(BadCmd_Then)                ; $00ad then
   51 00:0C36 24 00 00 00 	addr(Unimplemented)              ; $00ae else
   52 00:0C3A 24 00 00 00 	addr(Unimplemented)              ; $00af for
   53 00:0C3E EB 00 00 00 	addr(BadCmd_To)                  ; $00b0 to
   54 00:0C42 24 00 00 00 	addr(Unimplemented)              ; $00b1 step
   55 00:0C46 24 00 00 00 	addr(Unimplemented)              ; $00b2 next
   56 00:0C4A EB 00 00 00 	addr(BadCmd_Defproc)             ; $00b3 def
   57 00:0C4E 24 00 00 00 	addr(Unimplemented)              ; $00b4 proc
   58 00:0C52 24 00 00 00 	addr(Unimplemented)              ; $00b5 endproc
   59 00:0C56 24 00 00 00 	addr(Unimplemented)              ; $00b6 local
   60 00:0C5A 24 00 00 00 	addr(Unimplemented)              ; $00b7 dim
   61 00:0C5E B8 01 00 00 	addr(Command_REM)                ; $00b8 rem
   62 00:0C62 0D 01 00 00 	addr(Command_LET)                ; $00b9 let
   63 00:0C66 24 00 00 00 	addr(Unimplemented)              ; $00ba vdu
   64 00:0C6A 61 01 00 00 	addr(Command_PRINT)              ; $00bb print
   65 00:0C6E 24 00 00 00 	addr(Unimplemented)              ; $00bc load
   66 00:0C72 24 00 00 00 	addr(Unimplemented)              ; $00bd save
   67 00:0C76 24 00 00 00 	addr(Unimplemented)              ; $00be list
   68 00:0C7A 15 08 00 00 	addr(Command_NEW)                ; $00bf new
   69 00:0C7E D5 01 00 00 	addr(Command_RUN)                ; $00c0 run
   70 00:0C82 24 00 00 00 	addr(Unimplemented)              ; $00c1 read
   71 00:0C86 24 00 00 00 	addr(Unimplemented)              ; $00c2 data
   72 00:0C8A 24 00 00 00 	addr(Unimplemented)              ; $00c3 restore
   73 00:0C8E DA 00 00 00 	addr(Command_ASSERT)             ; $00c4 assert
   74 00:0C92 B7 07 00 00 	addr(Command_CLEAR)              ; $00c5 clear
   75 00:0C96 F0 00 00 00 	addr(Command_END)                ; $00c6 end
   76 00:0C9A 48 02 00 00 	addr(Command_STOP)               ; $00c7 stop
   77 00:0C9E -  -  -  -  ;
   78 00:0C9E -  -  -  -  ;	Vectors for set 1
   79 00:0C9E -  -  -  -  ;
   80 00:0C9E -  -  -  -  VectorsSet1:
   81 00:0C9E -  -  -  -  ;
   82 00:0C9E -  -  -  -  ;	Vectors for set 2
   83 00:0C9E -  -  -  -  ;
   84 00:0C9E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:0C9E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0C9E -  -  -  -  ; ***************************************************************************************
    2 00:0C9E -  -  -  -  ; ***************************************************************************************
    3 00:0C9E -  -  -  -  ;
    4 00:0C9E -  -  -  -  ;		Name : 		idivide.asm
    5 00:0C9E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C9E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C9E -  -  -  -  ;		Reviewed :	No
    8 00:0C9E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0C9E -  -  -  -  ;
   10 00:0C9E -  -  -  -  ; ***************************************************************************************
   11 00:0C9E -  -  -  -  ; ***************************************************************************************
   12 00:0C9E -  -  -  -  
   13 00:0C9E -  -  -  -  ; ***************************************************************************************
   14 00:0C9E -  -  -  -  ;
   15 00:0C9E -  -  -  -  ;								Unsigned integer divide
   16 00:0C9E -  -  -  -  ;
   17 00:0C9E -  -  -  -  ; ***************************************************************************************
   18 00:0C9E -  -  -  -  
   19 00:0C9E -  -  -  -  Int32UDivide:
   20 00:0C9E 37 -  -  -  		scf
   21 00:0C9F C3 E3 0C 00 		jp 		_I32UnsignedDivide		
   22 00:0CA3 -  -  -  -  
   23 00:0CA3 -  -  -  -  ; ***************************************************************************************
   24 00:0CA3 -  -  -  -  ;
   25 00:0CA3 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0CA3 -  -  -  -  ;
   27 00:0CA3 -  -  -  -  ; ***************************************************************************************
   28 00:0CA3 -  -  -  -  
   29 00:0CA3 -  -  -  -  Int32SDivide:
   30 00:0CA3 37 -  -  -  		scf
   31 00:0CA4 18 01 -  -  		jr 		_I32SDivide
   32 00:0CA6 -  -  -  -  Int32Modulus:
   33 00:0CA6 AF -  -  -  		xor 	a
   34 00:0CA7 -  -  -  -  _I32SDivide:
   35 00:0CA7 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0CA8 F5 -  -  -  		push 	af
   37 00:0CA9 08 -  -  -  		ex 		af,af'
   38 00:0CAA -  -  -  -  
   39 00:0CAA D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0CAB D9 -  -  -  		exx
   41 00:0CAC D5 -  -  -  		push 	de
   42 00:0CAD D9 -  -  -  		exx
   43 00:0CAE -  -  -  -  
   44 00:0CAE F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0CAF AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0CB0 CD D0 0C 00 		call 	_I32CheckHLSignSwap
   47 00:0CB4 CD D0 0C 00 		call 	_I32CheckHLSignSwap
   48 00:0CB8 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0CB9 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0CBA F5 -  -  -  		push 	af
   51 00:0CBB CD E3 0C 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0CBF F1 -  -  -  		pop 	af 							; get function back
   53 00:0CC0 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0CC2 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0CC3 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0CC5 C4 46 0E 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0CC9 -  -  -  -  _I32SDExit:
   58 00:0CC9 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0CCA D1 -  -  -  		pop 	de
   60 00:0CCB D9 -  -  -  		exx
   61 00:0CCC D1 -  -  -  		pop 	de
   62 00:0CCD F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0CCE 08 -  -  -  		ex 		af,af'
   64 00:0CCF C9 -  -  -  		ret
   65 00:0CD0 -  -  -  -  
   66 00:0CD0 -  -  -  -  
   67 00:0CD0 -  -  -  -  _I32CheckHLSignSwap:
   68 00:0CD0 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0CD1 CB 7C -  -  		bit 	7,h
   70 00:0CD3 D9 -  -  -  		exx
   71 00:0CD4 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0CD6 -  -  -  -  		;
   73 00:0CD6 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0CD8 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0CD9 CD 46 0E 00 		call 	Int32Negate 				
   76 00:0CDD F1 -  -  -  		pop 	af
   77 00:0CDE -  -  -  -  _I32CHSPositive:
   78 00:0CDE D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0CDF EB -  -  -  		ex 		de,hl
   80 00:0CE0 D9 -  -  -  		exx		
   81 00:0CE1 EB -  -  -  		ex 		de,hl
   82 00:0CE2 C9 -  -  -  		ret
   83 00:0CE3 -  -  -  -  
   84 00:0CE3 -  -  -  -  ; ***************************************************************************************
   85 00:0CE3 -  -  -  -  ;
   86 00:0CE3 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0CE3 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0CE3 -  -  -  -  ;
   89 00:0CE3 -  -  -  -  ; ***************************************************************************************
   90 00:0CE3 -  -  -  -  
   91 00:0CE3 -  -  -  -  _I32UnsignedDivide:
   92 00:0CE3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0CE4 D5 -  -  -  		push 	de
   94 00:0CE5 D9 -  -  -  		exx
   95 00:0CE6 C5 -  -  -  		push 	bc
   96 00:0CE7 D5 -  -  -  		push 	de 							
   97 00:0CE8 D9 -  -  -  		exx
   98 00:0CE9 -  -  -  -  
   99 00:0CE9 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0CEA -  -  -  -  
  101 00:0CEA 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0CEB B3 -  -  -  		or 		e
  103 00:0CEC D9 -  -  -  		exx
  104 00:0CED B2 -  -  -  		or 		d
  105 00:0CEE B3 -  -  -  		or 		e
  106 00:0CEF D9 -  -  -  		exx
  107 00:0CF0 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0CF4 -  -  -  -  
  109 00:0CF4 -  -  -  -  
  110 00:0CF4 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0CF5 4D -  -  -  		ld		c,l
  112 00:0CF6 21 00 00 00 		ld 		hl,$0000
  113 00:0CFA D9 -  -  -  		exx
  114 00:0CFB 44 -  -  -  		ld 		b,h
  115 00:0CFC 4D -  -  -  		ld		c,l
  116 00:0CFD 21 00 00 00 		ld 		hl,$0000
  117 00:0D01 D9 -  -  -  		exx
  118 00:0D02 -  -  -  -  
  119 00:0D02 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0D04 -  -  -  -  _I32DivideLoop:
  121 00:0D04 F5 -  -  -  		push 	af
  122 00:0D05 -  -  -  -  
  123 00:0D05 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0D07 CB 10 -  -  		rl 		b
  125 00:0D09 D9 -  -  -  		exx
  126 00:0D0A CB 11 -  -  		rl 		c
  127 00:0D0C CB 10 -  -  		rl 		b
  128 00:0D0E D9 -  -  -  		exx
  129 00:0D0F CB 15 -  -  		rl 		l
  130 00:0D11 CB 14 -  -  		rl 		h
  131 00:0D13 D9 -  -  -  		exx
  132 00:0D14 CB 15 -  -  		rl 		l
  133 00:0D16 CB 14 -  -  		rl 		h
  134 00:0D18 D9 -  -  -  		exx
  135 00:0D19 -  -  -  -  
  136 00:0D19 CD E4 0D 00 		call 	Int32Subtract 				; A = A - M
  137 00:0D1D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0D1F -  -  -  -  
  139 00:0D1F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0D20 18 04 -  -  		jr 		_I32Next
  141 00:0D22 -  -  -  -  
  142 00:0D22 -  -  -  -  _I32Borrow:
  143 00:0D22 CD DC 0D 00 		call 	Int32Add 					; A = A + M
  144 00:0D26 -  -  -  -  _I32Next:
  145 00:0D26 F1 -  -  -  		pop 	af
  146 00:0D27 3D -  -  -  		dec 	a
  147 00:0D28 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0D2A -  -  -  -  
  149 00:0D2A F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0D2B -  -  -  -  
  151 00:0D2B 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0D2C 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0D2E -  -  -  -  
  154 00:0D2E 60 -  -  -  		ld  	h,b
  155 00:0D2F 69 -  -  -  		ld 		l,c
  156 00:0D30 D9 -  -  -  		exx
  157 00:0D31 60 -  -  -  		ld  	h,b
  158 00:0D32 69 -  -  -  		ld 		l,c
  159 00:0D33 D9 -  -  -  		exx
  160 00:0D34 -  -  -  -  _I32Modulus1:		
  161 00:0D34 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0D35 D1 -  -  -  		pop 	de
  163 00:0D36 C1 -  -  -  		pop 	bc
  164 00:0D37 D9 -  -  -  		exx
  165 00:0D38 D1 -  -  -  		pop 	de
  166 00:0D39 C1 -  -  -  		pop 	bc
  167 00:0D3A C9 -  -  -  		ret
  168 00:0D3B -  -  -  -  
  169 00:0D3B -  -  -  -  ; ***************************************************************************************
  170 00:0D3B -  -  -  -  ;
  171 00:0D3B -  -  -  -  ;									Changes and Updates
  172 00:0D3B -  -  -  -  ;
  173 00:0D3B -  -  -  -  ; ***************************************************************************************
  174 00:0D3B -  -  -  -  ;
  175 00:0D3B -  -  -  -  ;		Date			Notes
  176 00:0D3B -  -  -  -  ;		==== 			=====
  177 00:0D3B -  -  -  -  ;
  178 00:0D3B -  -  -  -  ; ***************************************************************************************
  179 00:0D3B -  -  -  -  		
Listing for file "_build.asm"
   61 00:0D3B -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0D3B -  -  -  -  ; ***************************************************************************************
    2 00:0D3B -  -  -  -  ; ***************************************************************************************
    3 00:0D3B -  -  -  -  ;
    4 00:0D3B -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0D3B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D3B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D3B -  -  -  -  ;		Reviewed :	No
    8 00:0D3B -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0D3B -  -  -  -  ;
   10 00:0D3B -  -  -  -  ; ***************************************************************************************
   11 00:0D3B -  -  -  -  ; ***************************************************************************************
   12 00:0D3B -  -  -  -  
   13 00:0D3B -  -  -  -  ; ***************************************************************************************
   14 00:0D3B -  -  -  -  ;
   15 00:0D3B -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0D3B -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0D3B -  -  -  -  ;
   18 00:0D3B -  -  -  -  ; ***************************************************************************************
   19 00:0D3B -  -  -  -  
   20 00:0D3B -  -  -  -  Int32FromString:
   21 00:0D3B C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0D3C D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0D3D D5 -  -  -  		push 	de
   24 00:0D3E D9 -  -  -  		exx
   25 00:0D3F D5 -  -  -  		push 	de
   26 00:0D40 -  -  -  -  
   27 00:0D40 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0D44 11 00 00 00 		ld 		de,$0000
   29 00:0D48 D9 -  -  -  		exx
   30 00:0D49 21 00 00 00 		ld 		hl,$0000
   31 00:0D4D 11 00 00 00 		ld 		de,$0000
   32 00:0D51 D9 -  -  -  		exx
   33 00:0D52 -  -  -  -  
   34 00:0D52 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0D53 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0D55 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0D57 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0D59 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0D5A -  -  -  -  		;
   40 00:0D5A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0D5B F5 -  -  -  		push 	af
   42 00:0D5C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0D5E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0D5F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0D61 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0D62 18 01 -  -  		jr 		_I32FSMain
   47 00:0D64 -  -  -  -  _I32FSNotSigned:		
   48 00:0D64 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0D65 -  -  -  -  		;
   50 00:0D65 -  -  -  -  		; 		Main conversion loop.
   51 00:0D65 -  -  -  -  		; 		
   52 00:0D65 -  -  -  -  _I32FSMain:		
   53 00:0D65 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0D66 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0D68 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0D6A D6 20 -  -  		sub 	32
   57 00:0D6C -  -  -  -  _I32FSNotLower:
   58 00:0D6C FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0D6E 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0D70 FE 3A -  -  		cp 		'9'+1
   61 00:0D72 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0D74 FE 41 -  -  		cp 		'A'
   63 00:0D76 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0D78 FE 47 -  -  		cp 		'F'+1
   65 00:0D7A 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0D7C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0D7E -  -  -  -  _I32FSOkay:
   68 00:0D7E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0D80 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0D81 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0D83 03 -  -  -  		inc 	bc 							; consume character
   72 00:0D84 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0D85 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0D86 CD A3 0D 00 		call 	Int32Multiply 				; result *= base
   75 00:0D8A F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0D8B 5F -  -  -  		ld 		e,a
   77 00:0D8C CD DC 0D 00 		call 	Int32Add 					; and add it.
   78 00:0D90 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0D91 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0D93 -  -  -  -  
   81 00:0D93 -  -  -  -  _I32FSExit:
   82 00:0D93 F1 -  -  -  		pop 	af 							; get sign back
   83 00:0D94 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0D96 CC 46 0E 00 		call 	z,Int32Negate
   85 00:0D9A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0D9B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0D9C D9 -  -  -  		exx
   88 00:0D9D D1 -  -  -  		pop 	de
   89 00:0D9E D9 -  -  -  		exx
   90 00:0D9F C1 -  -  -  		pop 	bc
   91 00:0DA0 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0DA2 C9 -  -  -  		ret				
   93 00:0DA3 -  -  -  -  
   94 00:0DA3 -  -  -  -  ; ***************************************************************************************
   95 00:0DA3 -  -  -  -  ;
   96 00:0DA3 -  -  -  -  ;									Changes and Updates
   97 00:0DA3 -  -  -  -  ;
   98 00:0DA3 -  -  -  -  ; ***************************************************************************************
   99 00:0DA3 -  -  -  -  ;
  100 00:0DA3 -  -  -  -  ;		Date			Notes
  101 00:0DA3 -  -  -  -  ;		==== 			=====
  102 00:0DA3 -  -  -  -  ;
  103 00:0DA3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0DA3 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0DA3 -  -  -  -  ; ***************************************************************************************
    2 00:0DA3 -  -  -  -  ; ***************************************************************************************
    3 00:0DA3 -  -  -  -  ;
    4 00:0DA3 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0DA3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DA3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DA3 -  -  -  -  ;		Reviewed :	No
    8 00:0DA3 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0DA3 -  -  -  -  ;
   10 00:0DA3 -  -  -  -  ; ***************************************************************************************
   11 00:0DA3 -  -  -  -  ; ***************************************************************************************
   12 00:0DA3 -  -  -  -  
   13 00:0DA3 -  -  -  -  Int32Multiply:
   14 00:0DA3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0DA4 D5 -  -  -  		push 	de
   16 00:0DA5 44 -  -  -  		ld 		b,h
   17 00:0DA6 4D -  -  -  		ld 		c,l
   18 00:0DA7 21 00 00 00 		ld 		hl,$0000
   19 00:0DAB -  -  -  -  
   20 00:0DAB D9 -  -  -  		exx
   21 00:0DAC C5 -  -  -  		push 	bc
   22 00:0DAD D5 -  -  -  		push 	de
   23 00:0DAE 44 -  -  -  		ld 		b,h
   24 00:0DAF 4D -  -  -  		ld 		c,l
   25 00:0DB0 21 00 00 00 		ld 		hl,$0000		
   26 00:0DB4 D9 -  -  -  		exx
   27 00:0DB5 -  -  -  -  
   28 00:0DB5 -  -  -  -  _I32MultiplyLoop:
   29 00:0DB5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0DB7 C4 DC 0D 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0DBB -  -  -  -  		;
   32 00:0DBB D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0DBC CB 38 -  -  		srl 	b
   34 00:0DBE CB 19 -  -  		rr 		c
   35 00:0DC0 D9 -  -  -  		exx
   36 00:0DC1 CB 18 -  -  		rr 		b
   37 00:0DC3 CB 19 -  -  		rr 		c
   38 00:0DC5 -  -  -  -  		;
   39 00:0DC5 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0DC7 CB 12 -  -  		rl 		d
   41 00:0DC9 D9 -  -  -  		exx
   42 00:0DCA CB 13 -  -  		rl 		e
   43 00:0DCC CB 12 -  -  		rl 		d
   44 00:0DCE -  -  -  -  
   45 00:0DCE 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0DCF B1 -  -  -  		or 		c
   47 00:0DD0 D9 -  -  -  		exx
   48 00:0DD1 B0 -  -  -  		or 		b
   49 00:0DD2 B1 -  -  -  		or 		c
   50 00:0DD3 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0DD5 -  -  -  -  
   52 00:0DD5 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0DD6 D1 -  -  -  		pop 	de
   54 00:0DD7 C1 -  -  -  		pop 	bc
   55 00:0DD8 D9 -  -  -  		exx
   56 00:0DD9 D1 -  -  -  		pop 	de
   57 00:0DDA C1 -  -  -  		pop 	bc
   58 00:0DDB C9 -  -  -  		ret
   59 00:0DDC -  -  -  -  
   60 00:0DDC -  -  -  -  ; ***************************************************************************************
   61 00:0DDC -  -  -  -  ;
   62 00:0DDC -  -  -  -  ;									Changes and Updates
   63 00:0DDC -  -  -  -  ;
   64 00:0DDC -  -  -  -  ; ***************************************************************************************
   65 00:0DDC -  -  -  -  ;
   66 00:0DDC -  -  -  -  ;		Date			Notes
   67 00:0DDC -  -  -  -  ;		==== 			=====
   68 00:0DDC -  -  -  -  ;
   69 00:0DDC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0DDC -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0DDC -  -  -  -  ; ***************************************************************************************
    2 00:0DDC -  -  -  -  ; ***************************************************************************************
    3 00:0DDC -  -  -  -  ;
    4 00:0DDC -  -  -  -  ;		Name : 		isimple.asm
    5 00:0DDC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DDC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DDC -  -  -  -  ;		Reviewed :	No
    8 00:0DDC -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0DDC -  -  -  -  ;
   10 00:0DDC -  -  -  -  ; ***************************************************************************************
   11 00:0DDC -  -  -  -  ; ***************************************************************************************
   12 00:0DDC -  -  -  -  
   13 00:0DDC -  -  -  -  ; ***************************************************************************************
   14 00:0DDC -  -  -  -  ;
   15 00:0DDC -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0DDC -  -  -  -  ;
   17 00:0DDC -  -  -  -  ; ***************************************************************************************
   18 00:0DDC -  -  -  -  
   19 00:0DDC -  -  -  -  Int32Add:
   20 00:0DDC 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0DDE D9 -  -  -  		exx
   22 00:0DDF 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0DE2 D9 -  -  -  		exx
   24 00:0DE3 C9 -  -  -  		ret
   25 00:0DE4 -  -  -  -  
   26 00:0DE4 -  -  -  -  ; ***************************************************************************************
   27 00:0DE4 -  -  -  -  ;
   28 00:0DE4 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0DE4 -  -  -  -  ;
   30 00:0DE4 -  -  -  -  ; ***************************************************************************************
   31 00:0DE4 -  -  -  -  
   32 00:0DE4 -  -  -  -  Int32Subtract:
   33 00:0DE4 AF -  -  -  		xor 	a 							; clear carry
   34 00:0DE5 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0DE8 D9 -  -  -  		exx
   36 00:0DE9 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0DEC D9 -  -  -  		exx
   38 00:0DED C9 -  -  -  		ret
   39 00:0DEE -  -  -  -  
   40 00:0DEE -  -  -  -  ; ***************************************************************************************
   41 00:0DEE -  -  -  -  ;
   42 00:0DEE -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0DEE -  -  -  -  ;
   44 00:0DEE -  -  -  -  ; ***************************************************************************************
   45 00:0DEE -  -  -  -  
   46 00:0DEE -  -  -  -  Int32And:
   47 00:0DEE D9 -  -  -  		exx
   48 00:0DEF CD F4 0D 00 		call 	_I32AndHLDE
   49 00:0DF3 D9 -  -  -  		exx
   50 00:0DF4 -  -  -  -  _I32AndHLDE:		
   51 00:0DF4 7C -  -  -  		ld 		a,h
   52 00:0DF5 A2 -  -  -  		and 	d
   53 00:0DF6 67 -  -  -  		ld 		h,a
   54 00:0DF7 7D -  -  -  		ld 		a,l
   55 00:0DF8 A3 -  -  -  		and 	e
   56 00:0DF9 6F -  -  -  		ld 		l,a
   57 00:0DFA C9 -  -  -  		ret
   58 00:0DFB -  -  -  -  
   59 00:0DFB -  -  -  -  ; ***************************************************************************************
   60 00:0DFB -  -  -  -  ;
   61 00:0DFB -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0DFB -  -  -  -  ;
   63 00:0DFB -  -  -  -  ; ***************************************************************************************
   64 00:0DFB -  -  -  -  
   65 00:0DFB -  -  -  -  Int32Or:
   66 00:0DFB D9 -  -  -  		exx
   67 00:0DFC CD 01 0E 00 		call 	_I32OrHLDE
   68 00:0E00 D9 -  -  -  		exx
   69 00:0E01 -  -  -  -  _I32OrHLDE:		
   70 00:0E01 7C -  -  -  		ld 		a,h
   71 00:0E02 B2 -  -  -  		or 		d
   72 00:0E03 67 -  -  -  		ld 		h,a
   73 00:0E04 7D -  -  -  		ld 		a,l
   74 00:0E05 B3 -  -  -  		or 		e
   75 00:0E06 6F -  -  -  		ld 		l,a
   76 00:0E07 C9 -  -  -  		ret
   77 00:0E08 -  -  -  -  
   78 00:0E08 -  -  -  -  ; ***************************************************************************************
   79 00:0E08 -  -  -  -  ;
   80 00:0E08 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0E08 -  -  -  -  ;
   82 00:0E08 -  -  -  -  ; ***************************************************************************************
   83 00:0E08 -  -  -  -  
   84 00:0E08 -  -  -  -  Int32Xor:
   85 00:0E08 D9 -  -  -  		exx
   86 00:0E09 CD 0E 0E 00 		call 	_I32XorHLDE
   87 00:0E0D D9 -  -  -  		exx
   88 00:0E0E -  -  -  -  _I32XorHLDE:		
   89 00:0E0E 7C -  -  -  		ld 		a,h
   90 00:0E0F AA -  -  -  		xor 	d
   91 00:0E10 67 -  -  -  		ld 		h,a
   92 00:0E11 7D -  -  -  		ld 		a,l
   93 00:0E12 AB -  -  -  		xor 	e
   94 00:0E13 6F -  -  -  		ld 		l,a
   95 00:0E14 C9 -  -  -  		ret
   96 00:0E15 -  -  -  -  
   97 00:0E15 -  -  -  -  ; ***************************************************************************************
   98 00:0E15 -  -  -  -  ;
   99 00:0E15 -  -  -  -  ;								 Check if HL'HL zero
  100 00:0E15 -  -  -  -  ;
  101 00:0E15 -  -  -  -  ; ***************************************************************************************
  102 00:0E15 -  -  -  -  
  103 00:0E15 -  -  -  -  Int32Zero:
  104 00:0E15 D9 -  -  -  		exx
  105 00:0E16 7D -  -  -  		ld 		a,l
  106 00:0E17 B4 -  -  -  		or 		h
  107 00:0E18 D9 -  -  -  		exx
  108 00:0E19 B5 -  -  -  		or 		l
  109 00:0E1A B4 -  -  -  		or 		h
  110 00:0E1B C9 -  -  -  		ret
  111 00:0E1C -  -  -  -  
  112 00:0E1C -  -  -  -  ; ***************************************************************************************
  113 00:0E1C -  -  -  -  ;
  114 00:0E1C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0E1C -  -  -  -  ;
  116 00:0E1C -  -  -  -  ; ***************************************************************************************
  117 00:0E1C -  -  -  -  
  118 00:0E1C -  -  -  -  Int32Compare:
  119 00:0E1C E5 -  -  -  		push 	hl 							; save HL
  120 00:0E1D AF -  -  -  		xor 	a 							; clear carry
  121 00:0E1E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0E21 D9 -  -  -  		exx
  123 00:0E22 E5 -  -  -  		push 	hl 							; save HL'
  124 00:0E23 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0E26 -  -  -  -  		;
  126 00:0E26 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0E27 E2 2F 0E 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0E2B 78 -  -  -  		ld 		a,b
  129 00:0E2C EE 80 -  -  		xor 	$80
  130 00:0E2E 47 -  -  -  		ld 		b,a
  131 00:0E2F -  -  -  -  _I32CNoOverflow:
  132 00:0E2F 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0E30 B5 -  -  -  		or 		l
  134 00:0E31 D9 -  -  -  		exx 
  135 00:0E32 B4 -  -  -  		or 		h
  136 00:0E33 B5 -  -  -  		or 		l
  137 00:0E34 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0E36 -  -  -  -  		;
  139 00:0E36 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0E37 CB 78 -  -  		bit 	7,b
  141 00:0E39 D9 -  -  -  		exx
  142 00:0E3A 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0E3C 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0E3E 3E FF -  -  		ld 		a,$FF
  145 00:0E40 -  -  -  -  _I32NotPos:
  146 00:0E40 D9 -  -  -  		exx
  147 00:0E41 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0E42 D9 -  -  -  		exx
  149 00:0E43 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0E44 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0E45 C9 -  -  -  		ret
  152 00:0E46 -  -  -  -  
  153 00:0E46 -  -  -  -  ; ***************************************************************************************
  154 00:0E46 -  -  -  -  ;
  155 00:0E46 -  -  -  -  ;										Negate HL'HL
  156 00:0E46 -  -  -  -  ;
  157 00:0E46 -  -  -  -  ; ***************************************************************************************
  158 00:0E46 -  -  -  -  
  159 00:0E46 -  -  -  -  Int32Negate:
  160 00:0E46 AF -  -  -  		xor 	a
  161 00:0E47 CD 52 0E 00 		call 	_I32NSubtract
  162 00:0E4B D9 -  -  -  		exx
  163 00:0E4C CD 52 0E 00 		call 	_I32NSubtract
  164 00:0E50 D9 -  -  -  		exx
  165 00:0E51 C9 -  -  -  		ret
  166 00:0E52 -  -  -  -  _I32NSubtract:
  167 00:0E52 D5 -  -  -  		push 	de
  168 00:0E53 EB -  -  -  		ex 		de,hl
  169 00:0E54 21 00 00 00 		ld 		hl,$0000
  170 00:0E58 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0E5B D1 -  -  -  		pop 	de
  172 00:0E5C C9 -  -  -  		ret
  173 00:0E5D -  -  -  -  		
  174 00:0E5D -  -  -  -  ; ***************************************************************************************
  175 00:0E5D -  -  -  -  ;
  176 00:0E5D -  -  -  -  ;									Changes and Updates
  177 00:0E5D -  -  -  -  ;
  178 00:0E5D -  -  -  -  ; ***************************************************************************************
  179 00:0E5D -  -  -  -  ;
  180 00:0E5D -  -  -  -  ;		Date			Notes
  181 00:0E5D -  -  -  -  ;		==== 			=====
  182 00:0E5D -  -  -  -  ;
  183 00:0E5D -  -  -  -  ; ***************************************************************************************
  184 00:0E5D -  -  -  -  		
Listing for file "_build.asm"
   64 00:0E5D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0E5D -  -  -  -  ; ***************************************************************************************
    2 00:0E5D -  -  -  -  ; ***************************************************************************************
    3 00:0E5D -  -  -  -  ;
    4 00:0E5D -  -  -  -  ;		Name : 		itostring.asm
    5 00:0E5D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E5D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E5D -  -  -  -  ;		Reviewed :	No
    8 00:0E5D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0E5D -  -  -  -  ;
   10 00:0E5D -  -  -  -  ; ***************************************************************************************
   11 00:0E5D -  -  -  -  ;
   12 00:0E5D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0E5D -  -  -  -  ;
   14 00:0E5D -  -  -  -  ; ***************************************************************************************
   15 00:0E5D -  -  -  -  
   16 00:0E5D -  -  -  -  Int32ToString:
   17 00:0E5D C5 -  -  -  		push 	bc 							; save string start
   18 00:0E5E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0E5F E5 -  -  -  		push 	hl
   20 00:0E60 11 00 00 00 		ld	 	de,$0000
   21 00:0E64 D9 -  -  -  		exx
   22 00:0E65 D5 -  -  -  		push 	de
   23 00:0E66 E5 -  -  -  		push 	hl
   24 00:0E67 11 00 00 00 		ld 		de,$000
   25 00:0E6B D9 -  -  -  		exx
   26 00:0E6C 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0E6D -  -  -  -  		;
   28 00:0E6D CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0E6F 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0E71 ED 44 -  -  		neg 								; negate base and put in E
   31 00:0E73 5F -  -  -  		ld 		e,a
   32 00:0E74 -  -  -  -  		;
   33 00:0E74 D9 -  -  -  		exx 								; is it -ve ?
   34 00:0E75 CB 7C -  -  		bit 	7,h
   35 00:0E77 D9 -  -  -  		exx
   36 00:0E78 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0E7A -  -  -  -  		;
   38 00:0E7A CD 46 0E 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0E7E -  -  -  -  		;
   40 00:0E7E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0E80 02 -  -  -  		ld 		(bc),a
   42 00:0E81 03 -  -  -  		inc 	bc
   43 00:0E82 -  -  -  -  _I32TSNotNegative:	
   44 00:0E82 CD 91 0E 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0E86 -  -  -  -  _I32TSExit:
   46 00:0E86 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0E88 02 -  -  -  		ld 		(bc),a 
   48 00:0E89 -  -  -  -  
   49 00:0E89 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0E8A E1 -  -  -  		pop 	hl
   51 00:0E8B D1 -  -  -  		pop 	de
   52 00:0E8C D9 -  -  -  		exx
   53 00:0E8D E1 -  -  -  		pop 	hl
   54 00:0E8E D1 -  -  -  		pop 	de
   55 00:0E8F C1 -  -  -  		pop 	bc
   56 00:0E90 C9 -  -  -  		ret
   57 00:0E91 -  -  -  -  
   58 00:0E91 -  -  -  -  _I32RecursiveConvert:
   59 00:0E91 CD 9E 0C 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0E95 F5 -  -  -  		push 	af 							; save remainder
   61 00:0E96 CD 15 0E 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0E9A C4 91 0E 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0E9E F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0E9F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0EA1 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0EA3 C6 07 -  -  		add 	a,7
   67 00:0EA5 -  -  -  -  _I32NotHex:
   68 00:0EA5 C6 30 -  -  		add 	a,48
   69 00:0EA7 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0EA8 03 -  -  -  		inc 	bc
   71 00:0EA9 C9 -  -  -  		ret		
   72 00:0EAA -  -  -  -  
   73 00:0EAA -  -  -  -  ; ***************************************************************************************
   74 00:0EAA -  -  -  -  ;
   75 00:0EAA -  -  -  -  ;									Changes and Updates
   76 00:0EAA -  -  -  -  ;
   77 00:0EAA -  -  -  -  ; ***************************************************************************************
   78 00:0EAA -  -  -  -  ;
   79 00:0EAA -  -  -  -  ;		Date			Notes
   80 00:0EAA -  -  -  -  ;		==== 			=====
   81 00:0EAA -  -  -  -  ;
   82 00:0EAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0EAA -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0EAA -  -  -  -  ; ***************************************************************************************
    2 00:0EAA -  -  -  -  ; ***************************************************************************************
    3 00:0EAA -  -  -  -  ;
    4 00:0EAA -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0EAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EAA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EAA -  -  -  -  ;		Reviewed :	No
    8 00:0EAA -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0EAA -  -  -  -  ;
   10 00:0EAA -  -  -  -  ; ***************************************************************************************
   11 00:0EAA -  -  -  -  ; ***************************************************************************************
   12 00:0EAA -  -  -  -  
   13 00:0EAA -  -  -  -  #ifdef AQUARIUS
   14 00:0EAA             
   15 00:0EAA             ; ***************************************************************************************
   16 00:0EAA             ;
   17 00:0EAA             ;								Initialise system stuff
   18 00:0EAA             ;
   19 00:0EAA             ; ***************************************************************************************
   20 00:0EAA             
   21 00:0EAA             SYSInitialise:
   22 00:0EAA             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0EAA             	call 	SYSPrintChar
   24 00:0EAA             	ret
   25 00:0EAA             
   26 00:0EAA             ; ***************************************************************************************
   27 00:0EAA             ;
   28 00:0EAA             ;								Terminate system stuff
   29 00:0EAA             ;
   30 00:0EAA             ; ***************************************************************************************
   31 00:0EAA             
   32 00:0EAA             SYSTerminate:
   33 00:0EAA             	jr 		SYSTerminate
   34 00:0EAA             
   35 00:0EAA             ; ***************************************************************************************
   36 00:0EAA             ;
   37 00:0EAA             ;								Print A character
   38 00:0EAA             ;
   39 00:0EAA             ; ***************************************************************************************
   40 00:0EAA             
   41 00:0EAA             SYSPrintChar:
   42 00:0EAA             	push 	af 									; we stack everything including alt registers
   43 00:0EAA             	push 	bc
   44 00:0EAA             	push 	de
   45 00:0EAA             	push 	hl
   46 00:0EAA             	push 	ix
   47 00:0EAA             	push 	iy
   48 00:0EAA             	exx
   49 00:0EAA             	push 	bc
   50 00:0EAA             	push 	de
   51 00:0EAA             	push 	hl
   52 00:0EAA             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0EAA             	pop 	hl
   54 00:0EAA             	pop 	de
   55 00:0EAA             	pop 	bc
   56 00:0EAA             	exx
   57 00:0EAA             	pop 	iy
   58 00:0EAA             	pop 	ix
   59 00:0EAA             	pop 	hl
   60 00:0EAA             	pop 	de
   61 00:0EAA             	pop 	bc
   62 00:0EAA             	pop 	af
   63 00:0EAA             	ret		
   64 00:0EAA             
   65 00:0EAA             ; ***************************************************************************************
   66 00:0EAA             ;
   67 00:0EAA             ;									Print Newline
   68 00:0EAA             ;
   69 00:0EAA             ; ***************************************************************************************
   70 00:0EAA             
   71 00:0EAA             SYSPrintCRLF:
   72 00:0EAA             	push 	af
   73 00:0EAA             	ld 		a,13
   74 00:0EAA             	call 	SYSPrintChar
   75 00:0EAA             	ld 		a,10
   76 00:0EAA             	call 	SYSPrintChar
   77 00:0EAA             	pop 	af
   78 00:0EAA             	ret
   79 00:0EAA             
   80 00:0EAA             ; ***************************************************************************************
   81 00:0EAA             ;
   82 00:0EAA             ;									Get time into HL'HL
   83 00:0EAA             ;
   84 00:0EAA             ; ***************************************************************************************
   85 00:0EAA             
   86 00:0EAA             SYSGetTimer:
   87 00:0EAA              	in 		a,($00)
   88 00:0EAA              	ld 		l,a
   89 00:0EAA              	in 		a,($01)
   90 00:0EAA              	ld 		h,a
   91 00:0EAA              	exx
   92 00:0EAA              	in 		a,($02)
   93 00:0EAA              	ld 		l,a
   94 00:0EAA              	in 		a,($03)
   95 00:0EAA              	ld 		h,a
   96 00:0EAA              	exx
   97 00:0EAA             	ret 	
   98 00:0EAA             	
   99 00:0EAA             #endif
  100 00:0EAA -  -  -  -  
  101 00:0EAA -  -  -  -  ; ***************************************************************************************
  102 00:0EAA -  -  -  -  ;
  103 00:0EAA -  -  -  -  ;									Changes and Updates
  104 00:0EAA -  -  -  -  ;
  105 00:0EAA -  -  -  -  ; ***************************************************************************************
  106 00:0EAA -  -  -  -  ;
  107 00:0EAA -  -  -  -  ;		Date			Notes
  108 00:0EAA -  -  -  -  ;		==== 			=====
  109 00:0EAA -  -  -  -  ;
  110 00:0EAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0EAA -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0EAA -  -  -  -  ; ***************************************************************************************
    2 00:0EAA -  -  -  -  ; ***************************************************************************************
    3 00:0EAA -  -  -  -  ;
    4 00:0EAA -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0EAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EAA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EAA -  -  -  -  ;		Reviewed :	No
    8 00:0EAA -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0EAA -  -  -  -  ;
   10 00:0EAA -  -  -  -  ; ***************************************************************************************
   11 00:0EAA -  -  -  -  ; ***************************************************************************************
   12 00:0EAA -  -  -  -  
   13 00:0EAA -  -  -  -  #ifdef CLEANEZ80
   14 00:0EAA -  -  -  -  
   15 00:0EAA -  -  -  -  ; ***************************************************************************************
   16 00:0EAA -  -  -  -  ;
   17 00:0EAA -  -  -  -  ;								Initialise system stuff
   18 00:0EAA -  -  -  -  ;
   19 00:0EAA -  -  -  -  ; ***************************************************************************************
   20 00:0EAA -  -  -  -  
   21 00:0EAA -  -  -  -  SYSInitialise:
   22 00:0EAA C9 -  -  -  	ret
   23 00:0EAB -  -  -  -  
   24 00:0EAB -  -  -  -  ; ***************************************************************************************
   25 00:0EAB -  -  -  -  ;
   26 00:0EAB -  -  -  -  ;								Terminate system stuff
   27 00:0EAB -  -  -  -  ;
   28 00:0EAB -  -  -  -  ; ***************************************************************************************
   29 00:0EAB -  -  -  -  
   30 00:0EAB -  -  -  -  SYSTerminate:
   31 00:0EAB C9 -  -  -  	ret
   32 00:0EAC -  -  -  -  
   33 00:0EAC -  -  -  -  ; ***************************************************************************************
   34 00:0EAC -  -  -  -  ;
   35 00:0EAC -  -  -  -  ;								Print A character
   36 00:0EAC -  -  -  -  ;
   37 00:0EAC -  -  -  -  ; ***************************************************************************************
   38 00:0EAC -  -  -  -  
   39 00:0EAC -  -  -  -  SYSPrintChar:
   40 00:0EAC C9 -  -  -  	ret		
   41 00:0EAD -  -  -  -  
   42 00:0EAD -  -  -  -  ; ***************************************************************************************
   43 00:0EAD -  -  -  -  ;
   44 00:0EAD -  -  -  -  ;									Print Newline
   45 00:0EAD -  -  -  -  ;
   46 00:0EAD -  -  -  -  ; ***************************************************************************************
   47 00:0EAD -  -  -  -  
   48 00:0EAD -  -  -  -  SYSPrintCRLF:
   49 00:0EAD C9 -  -  -  	ret
   50 00:0EAE -  -  -  -  
   51 00:0EAE -  -  -  -  ; ***************************************************************************************
   52 00:0EAE -  -  -  -  ;
   53 00:0EAE -  -  -  -  ;									Get time into HL'HL
   54 00:0EAE -  -  -  -  ;
   55 00:0EAE -  -  -  -  ; ***************************************************************************************
   56 00:0EAE -  -  -  -  
   57 00:0EAE -  -  -  -  SYSGetTimer:
   58 00:0EAE C9 -  -  -  	ret
   59 00:0EAF -  -  -  -  
   60 00:0EAF -  -  -  -  #endif
   61 00:0EAF -  -  -  -  
   62 00:0EAF -  -  -  -  ; ***************************************************************************************
   63 00:0EAF -  -  -  -  ;
   64 00:0EAF -  -  -  -  ;									Changes and Updates
   65 00:0EAF -  -  -  -  ;
   66 00:0EAF -  -  -  -  ; ***************************************************************************************
   67 00:0EAF -  -  -  -  ;
   68 00:0EAF -  -  -  -  ;		Date			Notes
   69 00:0EAF -  -  -  -  ;		==== 			=====
   70 00:0EAF -  -  -  -  ;
   71 00:0EAF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0EAF -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0EAF -  -  -  -  ; ***************************************************************************************
    2 00:0EAF -  -  -  -  ; ***************************************************************************************
    3 00:0EAF -  -  -  -  ;
    4 00:0EAF -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0EAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EAF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EAF -  -  -  -  ;		Reviewed :	No
    8 00:0EAF -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0EAF -  -  -  -  ;
   10 00:0EAF -  -  -  -  ; ***************************************************************************************
   11 00:0EAF -  -  -  -  ; ***************************************************************************************
   12 00:0EAF -  -  -  -  
   13 00:0EAF -  -  -  -  #ifdef TI84
   14 00:0EAF             
   15 00:0EAF             ; ***************************************************************************************
   16 00:0EAF             ;
   17 00:0EAF             ;								Initialise system stuff
   18 00:0EAF             ;
   19 00:0EAF             ; ***************************************************************************************
   20 00:0EAF             
   21 00:0EAF             SYSInitialise:
   22 00:0EAF             	di
   23 00:0EAF             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0EAF             	ld 		(_IYTemp84),iy
   25 00:0EAF             	ret
   26 00:0EAF             
   27 00:0EAF             ; ***************************************************************************************
   28 00:0EAF             ;
   29 00:0EAF             ;								Terminate system stuff
   30 00:0EAF             ;
   31 00:0EAF             ; ***************************************************************************************
   32 00:0EAF             
   33 00:0EAF             SYSTerminate:
   34 00:0EAF             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0EAF             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0EAF             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0EAF             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0EAF             	ei
   39 00:0EAF             	ret 										; and exit.
   40 00:0EAF             
   41 00:0EAF             _StackTemp84:									; temp var for TI84 only.
   42 00:0EAF             	.dw 	0,0
   43 00:0EAF             _IYTemp84:
   44 00:0EAF             	.dw 	0,0		
   45 00:0EAF             
   46 00:0EAF             ; ***************************************************************************************
   47 00:0EAF             ;
   48 00:0EAF             ;								Print A character
   49 00:0EAF             ;
   50 00:0EAF             ; ***************************************************************************************
   51 00:0EAF             
   52 00:0EAF             SYSPrintChar:
   53 00:0EAF             	push 	af 									; we stack everything including alt registers
   54 00:0EAF             	push 	bc
   55 00:0EAF             	push 	de
   56 00:0EAF             	push 	hl
   57 00:0EAF             	push 	ix
   58 00:0EAF             	push 	iy
   59 00:0EAF             	exx
   60 00:0EAF             	push 	bc
   61 00:0EAF             	push 	de
   62 00:0EAF             	push 	hl
   63 00:0EAF             
   64 00:0EAF             	ld 		iy,(_IYTemp84)
   65 00:0EAF             	call 	_PutC 								; print A as character
   66 00:0EAF             	di
   67 00:0EAF             	ld 		(_IYTemp84),iy
   68 00:0EAF             
   69 00:0EAF             	pop 	hl
   70 00:0EAF             	pop 	de
   71 00:0EAF             	pop 	bc
   72 00:0EAF             	exx
   73 00:0EAF             	pop 	iy
   74 00:0EAF             	pop 	ix
   75 00:0EAF             	pop 	hl
   76 00:0EAF             	pop 	de
   77 00:0EAF             	pop 	bc
   78 00:0EAF             	pop 	af
   79 00:0EAF             	ret		
   80 00:0EAF             
   81 00:0EAF             ; ***************************************************************************************
   82 00:0EAF             ;
   83 00:0EAF             ;									Print Newline
   84 00:0EAF             ;
   85 00:0EAF             ; ***************************************************************************************
   86 00:0EAF             
   87 00:0EAF             SYSPrintCRLF:
   88 00:0EAF             	push 	af 									; we stack everything including alt registers
   89 00:0EAF             	push 	bc
   90 00:0EAF             	push 	de
   91 00:0EAF             	push 	hl
   92 00:0EAF             	push 	ix
   93 00:0EAF             	push 	iy
   94 00:0EAF             	exx
   95 00:0EAF             	push 	bc
   96 00:0EAF             	push 	de
   97 00:0EAF             	push 	hl
   98 00:0EAF             
   99 00:0EAF             	ld 		iy,(_IYTemp84)
  100 00:0EAF             	call 	_newline
  101 00:0EAF             	di
  102 00:0EAF             	ld 		(_IYTemp84),iy
  103 00:0EAF             
  104 00:0EAF             	pop 	hl
  105 00:0EAF             	pop 	de
  106 00:0EAF             	pop 	bc
  107 00:0EAF             	exx
  108 00:0EAF             	pop 	iy
  109 00:0EAF             	pop 	ix
  110 00:0EAF             	pop 	hl
  111 00:0EAF             	pop 	de
  112 00:0EAF             	pop 	bc
  113 00:0EAF             	pop 	af
  114 00:0EAF             	ret
  115 00:0EAF             
  116 00:0EAF             ; ***************************************************************************************
  117 00:0EAF             ;
  118 00:0EAF             ;									Get time into HL'HL
  119 00:0EAF             ;
  120 00:0EAF             ; ***************************************************************************************
  121 00:0EAF             
  122 00:0EAF             SYSGetTimer:
  123 00:0EAF             	ld 		hl,$1234
  124 00:0EAF             	exx
  125 00:0EAF             	ld 		hl,$5678
  126 00:0EAF             	exx
  127 00:0EAF             	ret
  128 00:0EAF             
  129 00:0EAF             #endif
  130 00:0EAF -  -  -  -  
  131 00:0EAF -  -  -  -  ; ***************************************************************************************
  132 00:0EAF -  -  -  -  ;
  133 00:0EAF -  -  -  -  ;									Changes and Updates
  134 00:0EAF -  -  -  -  ;
  135 00:0EAF -  -  -  -  ; ***************************************************************************************
  136 00:0EAF -  -  -  -  ;
  137 00:0EAF -  -  -  -  ;		Date			Notes
  138 00:0EAF -  -  -  -  ;		==== 			=====
  139 00:0EAF -  -  -  -  ;
  140 00:0EAF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0EAF -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0EAF -  -  -  -  ; ***************************************************************************************
    2 00:0EAF -  -  -  -  ; ***************************************************************************************
    3 00:0EAF -  -  -  -  ;
    4 00:0EAF -  -  -  -  ;		Name : 		basic.asm
    5 00:0EAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EAF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EAF -  -  -  -  ;		Reviewed :	No
    8 00:0EAF -  -  -  -  ;		Purpose :	Main program.
    9 00:0EAF -  -  -  -  ;
   10 00:0EAF -  -  -  -  ; ***************************************************************************************
   11 00:0EAF -  -  -  -  ; ***************************************************************************************
   12 00:0EAF -  -  -  -  
   13 00:0EAF 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 21 01 00 B8 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0B 02 00 
              03 04 0C 0E 
              1B 8F 6A 80 
              00 -  -  -  	.db	$21,$01,$00,$b8,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0b,$02,$00,$03,$04,$0c,$0e,$1b,$8f,$6a,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:102D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:202D -  -  -  -  EndTestInstance:
   18 00:202D -  -  -  -  		
   19 00:202D -  -  -  -  ; ***************************************************************************************
   20 00:202D -  -  -  -  ;
   21 00:202D -  -  -  -  ;									Changes and Updates
   22 00:202D -  -  -  -  ;
   23 00:202D -  -  -  -  ; ***************************************************************************************
   24 00:202D -  -  -  -  ;
   25 00:202D -  -  -  -  ;		Date			Notes
   26 00:202D -  -  -  -  ;		==== 			=====
   27 00:202D -  -  -  -  ;
   28 00:202D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:202D -  -  -  -  FinalAddress:
