    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b6 ; gosub
   64 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b7 ; return
   65 00:0000 -  -  -  -  #define KWD_GOTO                            	$00b8 ; goto
   66 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b9 ; local
   67 00:0000 -  -  -  -  #define KWD_DIM                             	$00ba ; dim
   68 00:0000 -  -  -  -  #define KWD_REM                             	$00bb ; rem
   69 00:0000 -  -  -  -  #define KWD_LET                             	$00bc ; let
   70 00:0000 -  -  -  -  #define KWD_VDU                             	$00bd ; vdu
   71 00:0000 -  -  -  -  #define KWD_PRINT                           	$00be ; print
   72 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bf ; load
   73 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c0 ; save
   74 00:0000 -  -  -  -  #define KWD_LIST                            	$00c1 ; list
   75 00:0000 -  -  -  -  #define KWD_NEW                             	$00c2 ; new
   76 00:0000 -  -  -  -  #define KWD_RUN                             	$00c3 ; run
   77 00:0000 -  -  -  -  #define KWD_READ                            	$00c4 ; read
   78 00:0000 -  -  -  -  #define KWD_DATA                            	$00c5 ; data
   79 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c6 ; restore
   80 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c7 ; assert
   81 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c8 ; clear
   82 00:0000 -  -  -  -  #define KWD_END                             	$00c9 ; end
   83 00:0000 -  -  -  -  #define KWD_STOP                            	$00ca ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		sp,$BFFF
   40 00:0000             #endif
   41 00:0000             
   42 00:0000             #endif
   43 00:0000 CD 24 0E 00 		call 	SYSInitialise
   44 00:0004 11 00 10 00 		ld 		de,TestInstance
   45 00:0008 21 A9 2C 00 		ld 		hl,EndTestInstance
   46 00:000C CD 4E 08 00 		call 	SetCurrentInstance
   47 00:0010 -  -  -  -  
   48 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 00:0012 32 60 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 00:0016 -  -  -  -  		
   51 00:0016 C3 1D 02 00 		jp 		Command_RUN
   52 00:001A -  -  -  -  
   53 00:001A -  -  -  -  WarmStart:		
   54 00:001A 3E 2A -  -  		ld 		a,'*'
   55 00:001C CD 26 0E 00 		call 	SYSPrintChar
   56 00:0020 CD 25 0E 00 		call 	SYSTerminate
   57 00:0024 -  -  -  -  
   58 00:0024 -  -  -  -  Unimplemented:
   59 00:0024 3E 05 C3 DA 
              02 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 00:002A -  -  -  -  Int32DivZeroHandler:
   61 00:002A 3E 06 C3 DA 
              02 00 -  -  		ERR_DIVZERO
   62 00:0030 -  -  -  -  
   63 00:0030 -  -  -  -  ; ***************************************************************************************
   64 00:0030 -  -  -  -  ;
   65 00:0030 -  -  -  -  ;									Changes and Updates
   66 00:0030 -  -  -  -  ;
   67 00:0030 -  -  -  -  ; ***************************************************************************************
   68 00:0030 -  -  -  -  ;
   69 00:0030 -  -  -  -  ;		Date			Notes
   70 00:0030 -  -  -  -  ;		==== 			=====
   71 00:0030 -  -  -  -  ;
   72 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  		
   78 00:005C -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  
   81 00:0060 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 00:0060 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 00:0066 -  -  -  -  
   84 00:0066 -  -  -  -  AConvert: 									; used for address conversions.
   85 00:0066 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006C -  -  -  -  		
   87 00:006C -  -  -  -  RandomSeed: 								; random number seeds.
   88 00:006C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 00:007C -  -  -  -  
   90 00:007C -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 00:007C 00 00 -  -  		.dw 	0
   92 00:007E -  -  -  -  
   93 00:007E -  -  -  -  ; ***************************************************************************************
   94 00:007E -  -  -  -  ;
   95 00:007E -  -  -  -  ;									Variable Information
   96 00:007E -  -  -  -  ;
   97 00:007E -  -  -  -  ; ***************************************************************************************
   98 00:007E -  -  -  -  
   99 00:007E -  -  -  -  VarNameStart: 								; first byte of name
  100 00:007E 00 00 00 00 		.dw 	0,0
  101 00:0082 -  -  -  -  VarHash: 									; name hash value
  102 00:0082 00 00 -  -  		.dw 	0		
  103 00:0084 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 00:0084 00 00 00 00 		.dw 	0,0
  105 00:0088 -  -  -  -  		
  106 00:0088 -  -  -  -  ; ***************************************************************************************
  107 00:0088 -  -  -  -  ;
  108 00:0088 -  -  -  -  ;										  Buffers
  109 00:0088 -  -  -  -  ;
  110 00:0088 -  -  -  -  ; ***************************************************************************************
  111 00:0088 -  -  -  -  
  112 00:0088 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 00:0088 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 00:0098 -  -  -  -  
  115 00:0098 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 00:0098 00 00 -  -  		.dw 	0
  117 00:009A -  -  -  -  
  118 00:009A -  -  -  -  ConvertBuffer: 								; general usage
  119 00:009A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 00:00DA -  -  -  -  
  121 00:00DA -  -  -  -  ; ***************************************************************************************
  122 00:00DA -  -  -  -  ;
  123 00:00DA -  -  -  -  ;									Changes and Updates
  124 00:00DA -  -  -  -  ;
  125 00:00DA -  -  -  -  ; ***************************************************************************************
  126 00:00DA -  -  -  -  ;
  127 00:00DA -  -  -  -  ;		Date			Notes
  128 00:00DA -  -  -  -  ;		==== 			=====
  129 00:00DA -  -  -  -  ;
  130 00:00DA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:00DA -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00DA -  -  -  -  ; ***************************************************************************************
    2 00:00DA -  -  -  -  ; ***************************************************************************************
    3 00:00DA -  -  -  -  ;
    4 00:00DA -  -  -  -  ;		Name : 		assert.asm
    5 00:00DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00DA -  -  -  -  ;		Reviewed :	No
    8 00:00DA -  -  -  -  ;		Purpose :	Assert command
    9 00:00DA -  -  -  -  ;
   10 00:00DA -  -  -  -  ; ***************************************************************************************
   11 00:00DA -  -  -  -  ; ***************************************************************************************
   12 00:00DA -  -  -  -  
   13 00:00DA -  -  -  -  ; ***************************************************************************************
   14 00:00DA -  -  -  -  ;
   15 00:00DA -  -  -  -  ;									ASSERT command
   16 00:00DA -  -  -  -  ;
   17 00:00DA -  -  -  -  ; ***************************************************************************************
   18 00:00DA -  -  -  -  
   19 00:00DA -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00DA CD 0D 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00DE 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00E4 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00E5 3E 01 C3 DA 
              02 00 -  -  		ERR_ASSERT
   24 00:00EB -  -  -  -  
   25 00:00EB -  -  -  -  ; ***************************************************************************************
   26 00:00EB -  -  -  -  ;
   27 00:00EB -  -  -  -  ;									Changes and Updates
   28 00:00EB -  -  -  -  ;
   29 00:00EB -  -  -  -  ; ***************************************************************************************
   30 00:00EB -  -  -  -  ;
   31 00:00EB -  -  -  -  ;		Date			Notes
   32 00:00EB -  -  -  -  ;		==== 			=====
   33 00:00EB -  -  -  -  ;
   34 00:00EB -  -  -  -  ; ***************************************************************************************
   35 00:00EB -  -  -  -  		
Listing for file "_build.asm"
   14 00:00EB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00EB -  -  -  -  ; ***************************************************************************************
    2 00:00EB -  -  -  -  ; ***************************************************************************************
    3 00:00EB -  -  -  -  ;
    4 00:00EB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00EB -  -  -  -  ;		Reviewed :	No
    8 00:00EB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00EB -  -  -  -  ;
   10 00:00EB -  -  -  -  ; ***************************************************************************************
   11 00:00EB -  -  -  -  ; ***************************************************************************************
   12 00:00EB -  -  -  -  
   13 00:00EB -  -  -  -  BadCmd_Then: 		;; [then]
   14 00:00EB -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 00:00EB -  -  -  -  BadCmd_Comma: 		;; [,]
   16 00:00EB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 00:00EB -  -  -  -  BadCmd_To: 			;; [to]
   18 00:00EB C3 44 03 00 		jp 		SyntaxError
   19 00:00EF -  -  -  -  
   20 00:00EF -  -  -  -  ; ***************************************************************************************
   21 00:00EF -  -  -  -  ;
   22 00:00EF -  -  -  -  ;									Changes and Updates
   23 00:00EF -  -  -  -  ;
   24 00:00EF -  -  -  -  ; ***************************************************************************************
   25 00:00EF -  -  -  -  ;
   26 00:00EF -  -  -  -  ;		Date			Notes
   27 00:00EF -  -  -  -  ;		==== 			=====
   28 00:00EF -  -  -  -  ;
   29 00:00EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 00:00EF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00EF -  -  -  -  ; ***************************************************************************************
    2 00:00EF -  -  -  -  ; ***************************************************************************************
    3 00:00EF -  -  -  -  ;
    4 00:00EF -  -  -  -  ;		Name : 		colon.asm
    5 00:00EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00EF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00EF -  -  -  -  ;		Reviewed :	No
    8 00:00EF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00EF -  -  -  -  ;
   10 00:00EF -  -  -  -  ; ***************************************************************************************
   11 00:00EF -  -  -  -  ; ***************************************************************************************
   12 00:00EF -  -  -  -  
   13 00:00EF -  -  -  -  ; ***************************************************************************************
   14 00:00EF -  -  -  -  ;
   15 00:00EF -  -  -  -  ;								Colon command, this is ignored.
   16 00:00EF -  -  -  -  ;
   17 00:00EF -  -  -  -  ; ***************************************************************************************
   18 00:00EF -  -  -  -  
   19 00:00EF -  -  -  -  Command_Colon: 	;; [:]
   20 00:00EF C9 -  -  -  		ret
   21 00:00F0 -  -  -  -  
   22 00:00F0 -  -  -  -  ; ***************************************************************************************
   23 00:00F0 -  -  -  -  ;
   24 00:00F0 -  -  -  -  ;									Changes and Updates
   25 00:00F0 -  -  -  -  ;
   26 00:00F0 -  -  -  -  ; ***************************************************************************************
   27 00:00F0 -  -  -  -  ;
   28 00:00F0 -  -  -  -  ;		Date			Notes
   29 00:00F0 -  -  -  -  ;		==== 			=====
   30 00:00F0 -  -  -  -  ;
   31 00:00F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F0 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F0 -  -  -  -  ; ***************************************************************************************
    2 00:00F0 -  -  -  -  ; ***************************************************************************************
    3 00:00F0 -  -  -  -  ;
    4 00:00F0 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F0 -  -  -  -  ;		Reviewed :	No
    8 00:00F0 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F0 -  -  -  -  ;
   10 00:00F0 -  -  -  -  ; ***************************************************************************************
   11 00:00F0 -  -  -  -  ; ***************************************************************************************
   12 00:00F0 -  -  -  -  
   13 00:00F0 -  -  -  -  ; ***************************************************************************************
   14 00:00F0 -  -  -  -  ;
   15 00:00F0 -  -  -  -  ;		DIM command
   16 00:00F0 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 00:00F0 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 00:00F0 -  -  -  -  ;								(can be comma chained)
   19 00:00F0 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 00:00F0 -  -  -  -  ;
   21 00:00F0 -  -  -  -  ; ***************************************************************************************
   22 00:00F0 -  -  -  -  
   23 00:00F0 -  -  -  -  Command_DIM: 	;; [dim]
   24 00:00F0 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   25 00:00F8 -  -  -  -  		;
   26 00:00F8 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently.
   27 00:00F8 -  -  -  -  		;
   28 00:00F8 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   29 00:00FA D1 -  -  -  		pop 	de
   30 00:00FB -  -  -  -  		;
   31 00:00FB DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   32 00:00FE FE 26 -  -  		cp 		IDENTIFIER_END 				
   33 00:0100 D2 44 03 00 		jp 		nc,SyntaxError 				; no identifier here
   34 00:0104 -  -  -  -  _DISkip:
   35 00:0104 DD 23 -  -  		inc 	ix 							; skip over identifier
   36 00:0106 DD 7E 00 -  		ld 		a,(ix+0)
   37 00:0109 FE 26 -  -  		cp 		IDENTIFIER_END
   38 00:010B 38 F7 -  -  		jr 		c,_DISkip 					
   39 00:010D -  -  -  -  		;
   40 00:010D DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   41 00:0110 FE 95 -  -  		cp 		KWD_LPAREN
   42 00:0112 F5 -  -  -  		push 	af 							; call whichever function depending.
   43 00:0113 CC 2C 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   44 00:0117 F1 -  -  -  		pop 	af
   45 00:0118 C4 32 01 00 		call 	nz,DimensionAllocate
   46 00:011C -  -  -  -  		;
   47 00:011C DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   48 00:011F FE A6 -  -  		cp 		KWD_COMMA
   49 00:0121 C0 -  -  -  		ret 	nz
   50 00:0122 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   51 00:0124 18 CA -  -  		jr 		Command_DIM
   52 00:0126 -  -  -  -  
   53 00:0126 -  -  -  -  _CDError:
   54 00:0126 3E 04 C3 DA 
              02 00 -  -  		ERR_DIM		
   55 00:012C -  -  -  -  
   56 00:012C -  -  -  -  ; ***************************************************************************************
   57 00:012C -  -  -  -  ;
   58 00:012C -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
   59 00:012C -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
   60 00:012C -  -  -  -  ;
   61 00:012C -  -  -  -  ; ***************************************************************************************
   62 00:012C -  -  -  -  
   63 00:012C -  -  -  -  DimensionArray:
   64 00:012C 3E 0F C3 DA 
              02 00 -  -  		ERR_TODO
   65 00:0132 -  -  -  -  
   66 00:0132 -  -  -  -  ; ***************************************************************************************
   67 00:0132 -  -  -  -  ;
   68 00:0132 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   69 00:0132 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   70 00:0132 -  -  -  -  ;
   71 00:0132 -  -  -  -  ; ***************************************************************************************
   72 00:0132 -  -  -  -  
   73 00:0132 -  -  -  -  DimensionAllocate:
   74 00:0132 3E 0F C3 DA 
              02 00 -  -  		ERR_TODO
   75 00:0138 -  -  -  -  
   76 00:0138 -  -  -  -  ; ***************************************************************************************
   77 00:0138 -  -  -  -  ;
   78 00:0138 -  -  -  -  ;									Changes and Updates
   79 00:0138 -  -  -  -  ;
   80 00:0138 -  -  -  -  ; ***************************************************************************************
   81 00:0138 -  -  -  -  ;
   82 00:0138 -  -  -  -  ;		Date			Notes
   83 00:0138 -  -  -  -  ;		==== 			=====
   84 00:0138 -  -  -  -  ;
   85 00:0138 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:0138 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:0138 -  -  -  -  ; ***************************************************************************************
    2 00:0138 -  -  -  -  ; ***************************************************************************************
    3 00:0138 -  -  -  -  ;
    4 00:0138 -  -  -  -  ;		Name : 		end.asm
    5 00:0138 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0138 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0138 -  -  -  -  ;		Reviewed :	No
    8 00:0138 -  -  -  -  ;		Purpose :	End command
    9 00:0138 -  -  -  -  ;
   10 00:0138 -  -  -  -  ; ***************************************************************************************
   11 00:0138 -  -  -  -  ; ***************************************************************************************
   12 00:0138 -  -  -  -  
   13 00:0138 -  -  -  -  ; ***************************************************************************************
   14 00:0138 -  -  -  -  ;
   15 00:0138 -  -  -  -  ;										END command
   16 00:0138 -  -  -  -  ;
   17 00:0138 -  -  -  -  ; ***************************************************************************************
   18 00:0138 -  -  -  -  
   19 00:0138 -  -  -  -  Command_END: 	;; [end]
   20 00:0138 3E 00 C3 DA 
              02 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:013E -  -  -  -  
   22 00:013E -  -  -  -  ; ***************************************************************************************
   23 00:013E -  -  -  -  ;
   24 00:013E -  -  -  -  ;									Changes and Updates
   25 00:013E -  -  -  -  ;
   26 00:013E -  -  -  -  ; ***************************************************************************************
   27 00:013E -  -  -  -  ;
   28 00:013E -  -  -  -  ;		Date			Notes
   29 00:013E -  -  -  -  ;		==== 			=====
   30 00:013E -  -  -  -  ;
   31 00:013E -  -  -  -  ; ***************************************************************************************
   32 00:013E -  -  -  -  		
Listing for file "_build.asm"
   18 00:013E -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:013E -  -  -  -  ; ***************************************************************************************
    2 00:013E -  -  -  -  ; ***************************************************************************************
    3 00:013E -  -  -  -  ;
    4 00:013E -  -  -  -  ;		Name : 		endofline.asm
    5 00:013E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:013E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:013E -  -  -  -  ;		Reviewed :	None
    8 00:013E -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:013E -  -  -  -  ;
   10 00:013E -  -  -  -  ; ***************************************************************************************
   11 00:013E -  -  -  -  ; ***************************************************************************************
   12 00:013E -  -  -  -  
   13 00:013E -  -  -  -  ; ***************************************************************************************
   14 00:013E -  -  -  -  ;
   15 00:013E -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:013E -  -  -  -  ;
   17 00:013E -  -  -  -  ; ***************************************************************************************
   18 00:013E -  -  -  -  
   19 00:013E -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:013E DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:0143 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:0147 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:014A DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:014C -  -  -  -  		;
   25 00:014C ED 7B 5C 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:0151 C3 30 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:0155 -  -  -  -  
   28 00:0155 -  -  -  -  ; ***************************************************************************************
   29 00:0155 -  -  -  -  ;
   30 00:0155 -  -  -  -  ;									Changes and Updates
   31 00:0155 -  -  -  -  ;
   32 00:0155 -  -  -  -  ; ***************************************************************************************
   33 00:0155 -  -  -  -  ;
   34 00:0155 -  -  -  -  ;		Date			Notes
   35 00:0155 -  -  -  -  ;		==== 			=====
   36 00:0155 -  -  -  -  ;
   37 00:0155 -  -  -  -  ; ***************************************************************************************
   38 00:0155 -  -  -  -  		
Listing for file "_build.asm"
   19 00:0155 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:0155 -  -  -  -  ; ***************************************************************************************
    2 00:0155 -  -  -  -  ; ***************************************************************************************
    3 00:0155 -  -  -  -  ;
    4 00:0155 -  -  -  -  ;		Name : 		let.asm
    5 00:0155 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0155 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0155 -  -  -  -  ;		Reviewed :	No
    8 00:0155 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:0155 -  -  -  -  ;
   10 00:0155 -  -  -  -  ; ***************************************************************************************
   11 00:0155 -  -  -  -  ; ***************************************************************************************
   12 00:0155 -  -  -  -  
   13 00:0155 -  -  -  -  ; ***************************************************************************************
   14 00:0155 -  -  -  -  ;
   15 00:0155 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:0155 -  -  -  -  ;
   17 00:0155 -  -  -  -  ; ***************************************************************************************
   18 00:0155 -  -  -  -  
   19 00:0155 -  -  -  -  Command_LET: 	;; [let]
   20 00:0155 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:0158 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:015A 28 2F -  -  		jr 		z,_CLString
   23 00:015C FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:015E 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:0160 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:0162 32 7C 00 00 		ld 		(AllowAutoCreate),a
   27 00:0166 -  -  -  -  _CLNoAuto:
   28 00:0166 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:0168 CD 8F 04 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:016C CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:016E CA 44 03 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:0172 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:0173 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:0174 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:0175 32 7C 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:0179 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:017B CD CE 02 00 		call 	CheckNextA
   38 00:017F -  -  -  -  
   39 00:017F CD 05 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:0183 -  -  -  -  
   41 00:0183 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:0184 43 -  -  -  		ld 		b,e 						
   43 00:0185 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:0186 -  -  -  -  		;
   45 00:0186 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:0186 -  -  -  -  		;
   47 00:0186 CD 93 01 00 		call 	WriteHLToDE
   48 00:018A C9 -  -  -  		ret
   49 00:018B -  -  -  -  		;
   50 00:018B -  -  -  -  		; 		String assignment code.
   51 00:018B -  -  -  -  		;
   52 00:018B -  -  -  -  _CLString:
   53 00:018B F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 00:0193 -  -  -  -  
   55 00:0193 -  -  -  -  ; ***************************************************************************************
   56 00:0193 -  -  -  -  ;
   57 00:0193 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 00:0193 -  -  -  -  ;
   59 00:0193 -  -  -  -  ; ***************************************************************************************
   60 00:0193 -  -  -  -  
   61 00:0193 -  -  -  -  WriteHLToDE:
   62 00:0193 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 00:0195 C2 38 03 00 		jp 		nz,TypeMismatch
   64 00:0199 -  -  -  -  		;
   65 00:0199 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 00:0199 -  -  -  -  		;		
   67 00:0199 -  -  -  -  _WHDWriteNumber:
   68 00:0199 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 00:019A D9 -  -  -  		exx
   70 00:019B EB -  -  -  		ex 		de,hl
   71 00:019C D9 -  -  -  		exx
   72 00:019D -  -  -  -  
   73 00:019D 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 00:019E 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 00:019F 72 -  -  -  		ld 		(hl),d
   76 00:01A0 23 -  -  -  		inc 	hl
   77 00:01A1 E5 -  -  -  		push 	hl
   78 00:01A2 D9 -  -  -  		exx
   79 00:01A3 E1 -  -  -  		pop 	hl
   80 00:01A4 73 -  -  -  		ld 		(hl),e
   81 00:01A5 23 -  -  -  		inc 	hl
   82 00:01A6 72 -  -  -  		ld 		(hl),d
   83 00:01A7 D9 -  -  -  		exx
   84 00:01A8 -  -  -  -  
   85 00:01A8 C9 -  -  -  		ret
   86 00:01A9 -  -  -  -  
   87 00:01A9 -  -  -  -  ; ***************************************************************************************
   88 00:01A9 -  -  -  -  ;
   89 00:01A9 -  -  -  -  ;									Changes and Updates
   90 00:01A9 -  -  -  -  ;
   91 00:01A9 -  -  -  -  ; ***************************************************************************************
   92 00:01A9 -  -  -  -  ;
   93 00:01A9 -  -  -  -  ;		Date			Notes
   94 00:01A9 -  -  -  -  ;		==== 			=====
   95 00:01A9 -  -  -  -  ;
   96 00:01A9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 00:01A9 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:01A9 -  -  -  -  ; ***************************************************************************************
    2 00:01A9 -  -  -  -  ; ***************************************************************************************
    3 00:01A9 -  -  -  -  ;
    4 00:01A9 -  -  -  -  ;		Name : 		print.asm
    5 00:01A9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A9 -  -  -  -  ;		Reviewed :	No
    8 00:01A9 -  -  -  -  ;		Purpose :	Print command
    9 00:01A9 -  -  -  -  ;
   10 00:01A9 -  -  -  -  ; ***************************************************************************************
   11 00:01A9 -  -  -  -  ; ***************************************************************************************
   12 00:01A9 -  -  -  -  
   13 00:01A9 -  -  -  -  ; ***************************************************************************************
   14 00:01A9 -  -  -  -  ;
   15 00:01A9 -  -  -  -  ;										PRINT command
   16 00:01A9 -  -  -  -  ;
   17 00:01A9 -  -  -  -  ; ***************************************************************************************
   18 00:01A9 -  -  -  -  
   19 00:01A9 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:01A9 -  -  -  -  		;
   21 00:01A9 -  -  -  -  		;		Main loop
   22 00:01A9 -  -  -  -  		;
   23 00:01A9 -  -  -  -  _CPRLoop:
   24 00:01A9 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 00:01AC FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 00:01AE 28 4B -  -  		jr 		z,_CPRExitNL
   27 00:01B0 FE A7 -  -  		cp 		KWD_COLON 	
   28 00:01B2 28 47 -  -  		jr 		z,_CPRExitNL
   29 00:01B4 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 00:01B6 28 36 -  -  		jr 		z,_CPRCheckNext
   31 00:01B8 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 00:01BA 28 2C -  -  		jr 		z,_CPRTab
   33 00:01BC FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 00:01BE 28 22 -  -  		jr 		z,_CPRNewLine
   35 00:01C0 -  -  -  -  		;
   36 00:01C0 CD 05 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   37 00:01C4 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 00:01C6 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 00:01C8 -  -  -  -  		;
   40 00:01C8 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 00:01CA -  -  -  -  _CPRPrintNumber:
   42 00:01CA F5 -  -  -  		push 	af 							; print leading space
   43 00:01CB 3E 20 -  -  		ld 		a,' '
   44 00:01CD CD 26 0E 00 		call 	SYSPrintChar
   45 00:01D1 F1 -  -  -  		pop 	af
   46 00:01D2 01 9A 00 00 		ld  	bc,ConvertBuffer
   47 00:01D6 C5 -  -  -  		push 	bc
   48 00:01D7 CD D7 0D 00 		call 	Int32ToString 				; convert to string
   49 00:01DB E1 -  -  -  		pop 	hl
   50 00:01DC -  -  -  -  		;
   51 00:01DC -  -  -  -  		; 		Print text at HL.
   52 00:01DC -  -  -  -  		;
   53 00:01DC -  -  -  -  _CPRPrintHL:
   54 00:01DC CD 6D 08 00 		call 	PrintStringAtHL 			; print string out
   55 00:01E0 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:01E2 -  -  -  -  		;
   57 00:01E2 -  -  -  -  		; 		New line (')
   58 00:01E2 -  -  -  -  		;
   59 00:01E2 -  -  -  -  _CPRNewLine:
   60 00:01E2 CD 27 0E 00 		call 	SYSPrintCRLF
   61 00:01E6 18 06 -  -  		jr 		_CPRCheckNext
   62 00:01E8 -  -  -  -  		;
   63 00:01E8 -  -  -  -  		; 		Tab command (,)
   64 00:01E8 -  -  -  -  		;
   65 00:01E8 -  -  -  -  _CPRTab:
   66 00:01E8 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 00:01EA CD 26 0E 00 		call 	SYSPrintChar
   68 00:01EE -  -  -  -  		;
   69 00:01EE -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 00:01EE -  -  -  -  		;
   71 00:01EE -  -  -  -  _CPRCheckNext:
   72 00:01EE DD 23 -  -  		inc 	ix 							; consume current
   73 00:01F0 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 00:01F3 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 00:01F5 C8 -  -  -  		ret 	z
   76 00:01F6 FE A7 -  -  		cp 		KWD_COLON
   77 00:01F8 C8 -  -  -  		ret 	z
   78 00:01F9 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 00:01FB -  -  -  -  		;
   80 00:01FB -  -  -  -  		;		Found EOL or : not after ; ,
   81 00:01FB -  -  -  -  		;
   82 00:01FB -  -  -  -  _CPRExitNL:
   83 00:01FB CD 27 0E 00 		call 	SYSPrintCRLF 				; do CR/LF
   84 00:01FF C9 -  -  -  		ret
Listing for file "_build.asm"
   21 00:0200 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0200 -  -  -  -  ; ***************************************************************************************
    2 00:0200 -  -  -  -  ; ***************************************************************************************
    3 00:0200 -  -  -  -  ;
    4 00:0200 -  -  -  -  ;		Name : 		rem.asm
    5 00:0200 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0200 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0200 -  -  -  -  ;		Reviewed :	No
    8 00:0200 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0200 -  -  -  -  ;
   10 00:0200 -  -  -  -  ; ***************************************************************************************
   11 00:0200 -  -  -  -  ; ***************************************************************************************
   12 00:0200 -  -  -  -  
   13 00:0200 -  -  -  -  ; ***************************************************************************************
   14 00:0200 -  -  -  -  ;
   15 00:0200 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0200 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0200 -  -  -  -  ;
   18 00:0200 -  -  -  -  ; ***************************************************************************************
   19 00:0200 -  -  -  -  
   20 00:0200 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0200 -  -  -  -  Command_REM2: 	;; [']
   22 00:0200 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0203 DD 23 -  -  		inc 	ix
   24 00:0205 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 00:0207 C8 -  -  -  		ret 	z
   26 00:0208 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 00:020A C8 -  -  -  		ret 	z
   28 00:020B FE 3F -  -  		cp 		STRING_MARKER
   29 00:020D C2 44 03 00 		jp 		nz,SyntaxError
   30 00:0211 -  -  -  -  		;		
   31 00:0211 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:0215 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0218 13 -  -  -  		inc 	de 
   34 00:0219 13 -  -  -  		inc 	de
   35 00:021A DD 19 -  -  		add 	ix,de 						; skip string
   36 00:021C C9 -  -  -  		ret
   37 00:021D -  -  -  -  
   38 00:021D -  -  -  -  ; ***************************************************************************************
   39 00:021D -  -  -  -  ;
   40 00:021D -  -  -  -  ;									Changes and Updates
   41 00:021D -  -  -  -  ;
   42 00:021D -  -  -  -  ; ***************************************************************************************
   43 00:021D -  -  -  -  ;
   44 00:021D -  -  -  -  ;		Date			Notes
   45 00:021D -  -  -  -  ;		==== 			=====
   46 00:021D -  -  -  -  ;
   47 00:021D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 00:021D -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:021D -  -  -  -  ; ***************************************************************************************
    2 00:021D -  -  -  -  ; ***************************************************************************************
    3 00:021D -  -  -  -  ;
    4 00:021D -  -  -  -  ;		Name : 		run.asm
    5 00:021D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:021D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:021D -  -  -  -  ;		Reviewed :	No
    8 00:021D -  -  -  -  ;		Purpose :	Run command
    9 00:021D -  -  -  -  ;
   10 00:021D -  -  -  -  ; ***************************************************************************************
   11 00:021D -  -  -  -  ; ***************************************************************************************
   12 00:021D -  -  -  -  
   13 00:021D -  -  -  -  ; ***************************************************************************************
   14 00:021D -  -  -  -  ;
   15 00:021D -  -  -  -  ;										RUN command
   16 00:021D -  -  -  -  ;
   17 00:021D -  -  -  -  ; ***************************************************************************************
   18 00:021D -  -  -  -  
   19 00:021D -  -  -  -  Command_RUN: 	;; [run]
   20 00:021D CD FF 07 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:0221 -  -  -  -  
   22 00:0221 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:0226 ED 73 5C 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:022B AF -  -  -  		xor 	a
   25 00:022C 32 7C 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:0230 -  -  -  -  		;
   27 00:0230 -  -  -  -  		; 		New line at IX.
   28 00:0230 -  -  -  -  		;
   29 00:0230 -  -  -  -  CRNewLine:
   30 00:0230 DD 22 58 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:0235 -  -  -  -  		;
   32 00:0235 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:0238 B7 -  -  -  		or 		a
   34 00:0239 CA 38 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:023D -  -  -  -  		;
   36 00:023D DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:023F DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:0241 DD 23 -  -  		inc 	ix
   39 00:0243 -  -  -  -  		;
   40 00:0243 -  -  -  -  		; 		New command at IX
   41 00:0243 -  -  -  -  		;
   42 00:0243 -  -  -  -  _CRNewCommand:	
   43 00:0243 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:0246 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:0247 F2 82 02 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:024B -  -  -  -  		;
   47 00:024B FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:024D 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:024F FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:0251 D2 72 02 00 		jp 		nc,_CRAlternateLets
   51 00:0255 -  -  -  -  		;
   52 00:0255 -  -  -  -  _CRDoCommand:		
   53 00:0255 E6 7F 21 00 
              00 00 6F 29 
              29 11 EC 0A 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:026A DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:026C CD 60 00 00 		call 	JumpCode 					; call the routine.
   56 00:0270 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:0272 -  -  -  -  		;
   58 00:0272 -  -  -  -  		; 		Do CALL (HL)
   59 00:0272 -  -  -  -  		;
   60 00:0272 -  -  -  -  		;
   61 00:0272 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:0272 -  -  -  -  		;		
   63 00:0272 -  -  -  -  _CRAlternateLets:		
   64 00:0272 FE 83 -  -  		cp 		KWD_PLING
   65 00:0274 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:0276 FE 84 -  -  		cp 		KWD_QMARK
   67 00:0278 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:027A FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:027C 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:027E C3 44 03 00 		jp 		SyntaxError
   71 00:0282 -  -  -  -  		;
   72 00:0282 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0282 -  -  -  -  		;
   74 00:0282 -  -  -  -  _CRAssignmentHandler:		
   75 00:0282 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:0284 D2 44 03 00 		jp 		nc,SyntaxError
   77 00:0288 -  -  -  -  _CRAssignmentLet:		
   78 00:0288 CD 55 01 00 		call	Command_LET 				; do LET.
   79 00:028C C3 43 02 00 		jp 		_CRNewCommand
   80 00:0290 -  -  -  -  
   81 00:0290 -  -  -  -  ; ***************************************************************************************
   82 00:0290 -  -  -  -  ;
   83 00:0290 -  -  -  -  ;									Changes and Updates
   84 00:0290 -  -  -  -  ;
   85 00:0290 -  -  -  -  ; ***************************************************************************************
   86 00:0290 -  -  -  -  ;
   87 00:0290 -  -  -  -  ;		Date			Notes
   88 00:0290 -  -  -  -  ;		==== 			=====
   89 00:0290 -  -  -  -  ;
   90 00:0290 -  -  -  -  ; ***************************************************************************************
   91 00:0290 -  -  -  -  		
Listing for file "_build.asm"
   23 00:0290 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0290 -  -  -  -  ; ***************************************************************************************
    2 00:0290 -  -  -  -  ; ***************************************************************************************
    3 00:0290 -  -  -  -  ;
    4 00:0290 -  -  -  -  ;		Name : 		stop.asm
    5 00:0290 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0290 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0290 -  -  -  -  ;		Reviewed :	No
    8 00:0290 -  -  -  -  ;		Purpose :	Stop command
    9 00:0290 -  -  -  -  ;
   10 00:0290 -  -  -  -  ; ***************************************************************************************
   11 00:0290 -  -  -  -  ; ***************************************************************************************
   12 00:0290 -  -  -  -  
   13 00:0290 -  -  -  -  ; ***************************************************************************************
   14 00:0290 -  -  -  -  ;
   15 00:0290 -  -  -  -  ;										STOP command
   16 00:0290 -  -  -  -  ;
   17 00:0290 -  -  -  -  ; ***************************************************************************************
   18 00:0290 -  -  -  -  
   19 00:0290 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0290 3E 0D C3 DA 
              02 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0296 -  -  -  -  
   22 00:0296 -  -  -  -  ; ***************************************************************************************
   23 00:0296 -  -  -  -  ;
   24 00:0296 -  -  -  -  ;									Changes and Updates
   25 00:0296 -  -  -  -  ;
   26 00:0296 -  -  -  -  ; ***************************************************************************************
   27 00:0296 -  -  -  -  ;
   28 00:0296 -  -  -  -  ;		Date			Notes
   29 00:0296 -  -  -  -  ;		==== 			=====
   30 00:0296 -  -  -  -  ;
   31 00:0296 -  -  -  -  ; ***************************************************************************************
   32 00:0296 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0296 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:0296 -  -  -  -  ; ***************************************************************************************
    2 00:0296 -  -  -  -  ; ***************************************************************************************
    3 00:0296 -  -  -  -  ;
    4 00:0296 -  -  -  -  ;		Name : 		charcheck.asm
    5 00:0296 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0296 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0296 -  -  -  -  ;		Reviewed :	No
    8 00:0296 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:0296 -  -  -  -  ;
   10 00:0296 -  -  -  -  ; ***************************************************************************************
   11 00:0296 -  -  -  -  ; ***************************************************************************************
   12 00:0296 -  -  -  -  
   13 00:0296 -  -  -  -  ; ***************************************************************************************
   14 00:0296 -  -  -  -  ;
   15 00:0296 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:0296 -  -  -  -  ;
   17 00:0296 -  -  -  -  ; ***************************************************************************************
   18 00:0296 -  -  -  -  
   19 00:0296 -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:0296             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:0296             		inc 	ix
   22 00:0296             		cp 		ch 							; exit if matches
   23 00:0296             		ret 	z
   24 00:0296             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:0296             		jp 		ErrorHandler
   26 00:0296             #endmacro
   27 00:0296 -  -  -  -  
   28 00:0296 -  -  -  -  CheckLeftBracket:
   29 00:0296 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 DA 
              02 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:02A4 -  -  -  -  
   31 00:02A4 -  -  -  -  CheckRightBracket:
   32 00:02A4 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 DA 
              02 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:02B2 -  -  -  -  
   34 00:02B2 -  -  -  -  CheckDollar:
   35 00:02B2 DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 DA 
              02 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:02C0 -  -  -  -  		
   37 00:02C0 -  -  -  -  CheckComma:
   38 00:02C0 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 DA 
              02 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:02CE -  -  -  -  
   40 00:02CE -  -  -  -  ; ***************************************************************************************
   41 00:02CE -  -  -  -  ;
   42 00:02CE -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:02CE -  -  -  -  ;
   44 00:02CE -  -  -  -  ; ***************************************************************************************
   45 00:02CE -  -  -  -  
   46 00:02CE -  -  -  -  CheckNextA:
   47 00:02CE DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:02D1 DD 23 -  -  		inc 	ix 							; skip character
   49 00:02D3 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:02D4 3E 0E C3 DA 
              02 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:02DA -  -  -  -  		
   52 00:02DA -  -  -  -  ; ***************************************************************************************
   53 00:02DA -  -  -  -  ;
   54 00:02DA -  -  -  -  ;									Changes and Updates
   55 00:02DA -  -  -  -  ;
   56 00:02DA -  -  -  -  ; ***************************************************************************************
   57 00:02DA -  -  -  -  ;
   58 00:02DA -  -  -  -  ;		Date			Notes
   59 00:02DA -  -  -  -  ;		==== 			=====
   60 00:02DA -  -  -  -  ;
   61 00:02DA -  -  -  -  ; ***************************************************************************************
   62 00:02DA -  -  -  -  		
Listing for file "_build.asm"
   25 00:02DA -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:02DA -  -  -  -  ; ***************************************************************************************
    2 00:02DA -  -  -  -  ; ***************************************************************************************
    3 00:02DA -  -  -  -  ;
    4 00:02DA -  -  -  -  ;		Name : 		errors.asm
    5 00:02DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02DA -  -  -  -  ;		Reviewed :	No
    8 00:02DA -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:02DA -  -  -  -  ;
   10 00:02DA -  -  -  -  ; ***************************************************************************************
   11 00:02DA -  -  -  -  ; ***************************************************************************************
   12 00:02DA -  -  -  -  
   13 00:02DA -  -  -  -  ; ***************************************************************************************
   14 00:02DA -  -  -  -  ;
   15 00:02DA -  -  -  -  ;								Error handler, message A 
   16 00:02DA -  -  -  -  ;
   17 00:02DA -  -  -  -  ; ***************************************************************************************
   18 00:02DA -  -  -  -  
   19 00:02DA -  -  -  -  ErrorHandler:
   20 00:02DA F5 -  -  -  		push 	af 						; save error ID
   21 00:02DB -  -  -  -  
   22 00:02DB 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:02DF 6F -  -  -  		ld 		l,a
   24 00:02E0 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:02E1 29 -  -  -  		add 	hl,hl 		
   26 00:02E2 11 B1 09 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:02E6 19 -  -  -  		add 	hl,de
   28 00:02E7 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:02E9 CD 6D 08 00 		call 	PrintStringAtHL
   30 00:02ED -  -  -  -  		;
   31 00:02ED F1 -  -  -  		pop 	af 						; restore error ID
   32 00:02EE B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:02EF 28 2F -  -  		jr 		z,_EHExit
   34 00:02F1 -  -  -  -  		;
   35 00:02F1 DD 2A 58 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:02F6 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:02F9 B7 -  -  -  		or 		a
   38 00:02FA 28 24 -  -  		jr 		z,_EHExit
   39 00:02FC -  -  -  -  
   40 00:02FC 21 28 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0300 CD 6D 08 00 		call 	PrintStringAtHL 
   42 00:0304 -  -  -  -  		
   43 00:0304 D9 -  -  -  		exx								; HL'HL = line number
   44 00:0305 21 00 00 00 		ld 		hl,$0000 		
   45 00:0309 D9 -  -  -  		exx 
   46 00:030A DD 6E 01 -  		ld 		l,(ix+1)
   47 00:030D DD 66 02 -  		ld 		h,(ix+2)
   48 00:0310 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:0312 01 9A 00 00 		ld 		bc,ConvertBuffer
   50 00:0316 CD D7 0D 00 		call 	Int32ToString
   51 00:031A C5 -  -  -  		push 	bc
   52 00:031B E1 -  -  -  		pop 	hl
   53 00:031C CD 6D 08 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0320 -  -  -  -  _EHExit:		
   55 00:0320 CD 27 0E 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:0324 C3 1A 00 00 		jp 		WarmStart
   57 00:0328 -  -  -  -  
   58 00:0328 -  -  -  -  _EHAtText:
   59 00:0328 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:0332 -  -  -  -  
   61 00:0332 -  -  -  -  NotImplemented:
   62 00:0332 3E 05 C3 DA 
              02 00 -  -  		ERR_DISABLED
   63 00:0338 -  -  -  -  TypeMismatch:
   64 00:0338 3E 02 C3 DA 
              02 00 -  -  		ERR_BADTYPE
   65 00:033E -  -  -  -  BadValue:
   66 00:033E 3E 03 C3 DA 
              02 00 -  -  		ERR_BADVALUE
   67 00:0344 -  -  -  -  SyntaxError:
   68 00:0344 3E 0E C3 DA 
              02 00 -  -  		ERR_SYNTAX
   69 00:034A -  -  -  -  						
   70 00:034A -  -  -  -  ; ***************************************************************************************
   71 00:034A -  -  -  -  ;
   72 00:034A -  -  -  -  ;									Changes and Updates
   73 00:034A -  -  -  -  ;
   74 00:034A -  -  -  -  ; ***************************************************************************************
   75 00:034A -  -  -  -  ;
   76 00:034A -  -  -  -  ;		Date			Notes
   77 00:034A -  -  -  -  ;		==== 			=====
   78 00:034A -  -  -  -  ;
   79 00:034A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 00:034A -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:034A -  -  -  -  ; ***************************************************************************************
    2 00:034A -  -  -  -  ; ***************************************************************************************
    3 00:034A -  -  -  -  ;
    4 00:034A -  -  -  -  ;		Name : 		basicmath.asm
    5 00:034A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:034A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:034A -  -  -  -  ;		Reviewed :	No
    8 00:034A -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:034A -  -  -  -  ;
   10 00:034A -  -  -  -  ; ***************************************************************************************
   11 00:034A -  -  -  -  ; ***************************************************************************************
   12 00:034A -  -  -  -  
   13 00:034A -  -  -  -  ; ***************************************************************************************
   14 00:034A -  -  -  -  ;
   15 00:034A -  -  -  -  ; 									Addition
   16 00:034A -  -  -  -  ;
   17 00:034A -  -  -  -  ; ***************************************************************************************
   18 00:034A -  -  -  -  
   19 00:034A -  -  -  -  ALUAdd: 		;; [+]
   20 00:034A CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 56 
              0D 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:0358 -  -  -  -  
   22 00:0358 -  -  -  -  ; ***************************************************************************************
   23 00:0358 -  -  -  -  ;
   24 00:0358 -  -  -  -  ; 									Subtraction
   25 00:0358 -  -  -  -  ;
   26 00:0358 -  -  -  -  ; ***************************************************************************************
   27 00:0358 -  -  -  -  
   28 00:0358 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:0358 CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 5E 
              0D 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:0366 -  -  -  -  
   31 00:0366 -  -  -  -  ; ***************************************************************************************
   32 00:0366 -  -  -  -  ;
   33 00:0366 -  -  -  -  ; 									  Multiply
   34 00:0366 -  -  -  -  ;
   35 00:0366 -  -  -  -  ; ***************************************************************************************
   36 00:0366 -  -  -  -  
   37 00:0366 -  -  -  -  ALUMultiply: 	;; [*]
   38 00:0366 CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 1D 
              0D 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:0374 -  -  -  -  
   40 00:0374 -  -  -  -  ; ***************************************************************************************
   41 00:0374 -  -  -  -  ;
   42 00:0374 -  -  -  -  ; 									  Divide
   43 00:0374 -  -  -  -  ;
   44 00:0374 -  -  -  -  ; ***************************************************************************************
   45 00:0374 -  -  -  -  
   46 00:0374 -  -  -  -  ALUDivide: 	;; [/]
   47 00:0374 -  -  -  -  ALUDivide2:	;; [div]
   48 00:0374 CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 1D 
              0C 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0382 -  -  -  -  
   50 00:0382 -  -  -  -  ; ***************************************************************************************
   51 00:0382 -  -  -  -  ;
   52 00:0382 -  -  -  -  ; 									  Modulus
   53 00:0382 -  -  -  -  ;
   54 00:0382 -  -  -  -  ; ***************************************************************************************
   55 00:0382 -  -  -  -  
   56 00:0382 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0382 CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 20 
              0C 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0390 -  -  -  -  
   59 00:0390 -  -  -  -  ; ***************************************************************************************
   60 00:0390 -  -  -  -  ;
   61 00:0390 -  -  -  -  ; 									  Logical
   62 00:0390 -  -  -  -  ;
   63 00:0390 -  -  -  -  ; ***************************************************************************************
   64 00:0390 -  -  -  -  
   65 00:0390 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0390 CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 68 
              0D 00 -  -  		IntegerDispatch(Int32And)
   67 00:039E -  -  -  -  
   68 00:039E -  -  -  -  ALUOr: 			;; [or]
   69 00:039E CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 75 
              0D 00 -  -  		IntegerDispatch(Int32Or)
   70 00:03AC -  -  -  -  
   71 00:03AC -  -  -  -  ALUXor: 		;; [eor]
   72 00:03AC CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 82 
              0D 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:03BA -  -  -  -  
   74 00:03BA -  -  -  -  ; ***************************************************************************************
   75 00:03BA -  -  -  -  ;
   76 00:03BA -  -  -  -  ;									Changes and Updates
   77 00:03BA -  -  -  -  ;
   78 00:03BA -  -  -  -  ; ***************************************************************************************
   79 00:03BA -  -  -  -  ;
   80 00:03BA -  -  -  -  ;		Date			Notes
   81 00:03BA -  -  -  -  ;		==== 			=====
   82 00:03BA -  -  -  -  ;
   83 00:03BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:03BA -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:03BA -  -  -  -  ; ***************************************************************************************
    2 00:03BA -  -  -  -  ; ***************************************************************************************
    3 00:03BA -  -  -  -  ;
    4 00:03BA -  -  -  -  ;		Name : 		binrefs.asm
    5 00:03BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03BA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03BA -  -  -  -  ;		Reviewed :	No
    8 00:03BA -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:03BA -  -  -  -  ;
   10 00:03BA -  -  -  -  ; ***************************************************************************************
   11 00:03BA -  -  -  -  ; ***************************************************************************************
   12 00:03BA -  -  -  -  
   13 00:03BA -  -  -  -  ; ***************************************************************************************
   14 00:03BA -  -  -  -  ;
   15 00:03BA -  -  -  -  ; 									<l> <op> <r>
   16 00:03BA -  -  -  -  ;
   17 00:03BA -  -  -  -  ; ***************************************************************************************
   18 00:03BA -  -  -  -  
   19 00:03BA -  -  -  -  ALULongReference:			;; [!]
   20 00:03BA CD CA 03 00 		call 	BRGetAddress 				; calculate address
   21 00:03BE 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:03C0 CB F9 -  -  		set 	CIsReference,c
   23 00:03C2 C9 -  -  -  		ret
   24 00:03C3 -  -  -  -  
   25 00:03C3 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:03C3 CD BA 03 00 		call 	ALULongReference
   27 00:03C7 CB F1 -  -  		set 	CIsByteReference,c
   28 00:03C9 C9 -  -  -  		ret
   29 00:03CA -  -  -  -  
   30 00:03CA -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:03CA CD 67 04 00 
              78 B1 C2 38 
              03 00 C3 D8 
              03 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:03D8 -  -  -  -  _BRGAMain:		
   33 00:03D8 CD 56 0D 00 		call 	Int32Add 					; address in HL'HL
   34 00:03DC CD 6D 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:03E0 C9 -  -  -  		ret
   36 00:03E1 -  -  -  -  
   37 00:03E1 -  -  -  -  ; ***************************************************************************************
   38 00:03E1 -  -  -  -  ;
   39 00:03E1 -  -  -  -  ;									Changes and Updates
   40 00:03E1 -  -  -  -  ;
   41 00:03E1 -  -  -  -  ; ***************************************************************************************
   42 00:03E1 -  -  -  -  ;
   43 00:03E1 -  -  -  -  ;		Date			Notes
   44 00:03E1 -  -  -  -  ;		==== 			=====
   45 00:03E1 -  -  -  -  ;
   46 00:03E1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:03E1 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:03E1 -  -  -  -  ; ***************************************************************************************
    2 00:03E1 -  -  -  -  ; ***************************************************************************************
    3 00:03E1 -  -  -  -  ;
    4 00:03E1 -  -  -  -  ;		Name : 		compare.asm
    5 00:03E1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03E1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03E1 -  -  -  -  ;		Reviewed :	No
    8 00:03E1 -  -  -  -  ;		Purpose :	Comparison code
    9 00:03E1 -  -  -  -  ;
   10 00:03E1 -  -  -  -  ; ***************************************************************************************
   11 00:03E1 -  -  -  -  ; ***************************************************************************************
   12 00:03E1 -  -  -  -  
   13 00:03E1 -  -  -  -  #macro compare_equals(n)
   14 00:03E1             		call 	CompareBaseCode
   15 00:03E1             		cp 		n
   16 00:03E1             		jr 		z,UnaryInt32True
   17 00:03E1             		jr 		UnaryInt32False
   18 00:03E1             #endmacro
   19 00:03E1 -  -  -  -  
   20 00:03E1 -  -  -  -  #macro compare_not_equals(n)
   21 00:03E1             		call 	CompareBaseCode
   22 00:03E1             		cp 		n
   23 00:03E1             		jr 		nz,UnaryInt32True
   24 00:03E1             		jr 		UnaryInt32False
   25 00:03E1             #endmacro
   26 00:03E1 -  -  -  -  
   27 00:03E1 -  -  -  -  ; ***************************************************************************************
   28 00:03E1 -  -  -  -  ;
   29 00:03E1 -  -  -  -  ; 								Return True/False
   30 00:03E1 -  -  -  -  ;
   31 00:03E1 -  -  -  -  ; ***************************************************************************************
   32 00:03E1 -  -  -  -  
   33 00:03E1 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:03E1 3E FF -  -  		ld 		a,255
   35 00:03E3 18 01 -  -  		jr 		_Int32Logical
   36 00:03E5 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:03E5 AF -  -  -  		xor 	a
   38 00:03E6 -  -  -  -  _Int32Logical:
   39 00:03E6 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:03E7 67 -  -  -  		ld 		h,a
   41 00:03E8 D9 -  -  -  		exx
   42 00:03E9 6F -  -  -  		ld 		l,a
   43 00:03EA 67 -  -  -  		ld 		h,a
   44 00:03EB D9 -  -  -  		exx
   45 00:03EC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:03EE C9 -  -  -  		ret
   47 00:03EF -  -  -  -  
   48 00:03EF -  -  -  -  ; ***************************************************************************************
   49 00:03EF -  -  -  -  ;
   50 00:03EF -  -  -  -  ; 										> = < (compare == value)
   51 00:03EF -  -  -  -  ;
   52 00:03EF -  -  -  -  ; ***************************************************************************************
   53 00:03EF -  -  -  -  
   54 00:03EF -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:03EF CD 2B 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:03F9 -  -  -  -  
   57 00:03F9 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:03F9 CD 2B 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:0403 -  -  -  -  
   60 00:0403 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:0403 CD 2B 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:040D -  -  -  -  
   63 00:040D -  -  -  -  ; ***************************************************************************************
   64 00:040D -  -  -  -  ;
   65 00:040D -  -  -  -  ; 										> = < (compare <> value)
   66 00:040D -  -  -  -  ;
   67 00:040D -  -  -  -  ; ***************************************************************************************
   68 00:040D -  -  -  -  
   69 00:040D -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:040D CD 2B 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:0417 -  -  -  -  
   72 00:0417 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:0417 CD 2B 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:0421 -  -  -  -  
   75 00:0421 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:0421 CD 2B 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:042B -  -  -  -  
   78 00:042B -  -  -  -  ; ***************************************************************************************
   79 00:042B -  -  -  -  ;
   80 00:042B -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:042B -  -  -  -  ;
   82 00:042B -  -  -  -  ; ***************************************************************************************
   83 00:042B -  -  -  -  
   84 00:042B -  -  -  -  CompareBaseCode:
   85 00:042B CD 67 04 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:042F -  -  -  -  
   87 00:042F 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0430 A1 -  -  -  		and 	c
   89 00:0431 CB 47 -  -  		bit 	CIsString,a 
   90 00:0433 C2 45 04 00 		jp 		nz,StringCompare
   91 00:0437 -  -  -  -  
   92 00:0437 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:0438 B1 -  -  -  		or 		c
   94 00:0439 CB 47 -  -  		bit 	CIsString,a 
   95 00:043B CA 96 0D 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:043F -  -  -  -  
   97 00:043F 3E 02 C3 DA 
              02 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:0445 -  -  -  -  ;
   99 00:0445 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:0445 -  -  -  -  ;
  101 00:0445 -  -  -  -  StringCompare:
  102 00:0445 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:0446 BE -  -  -  		cp 		(hl)
  104 00:0447 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0449 20 08 -  -  		jr 		nz,_SCLess
  106 00:044B 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:044C 23 -  -  -  		inc 	hl
  108 00:044D FE 20 -  -  		cp 		' '
  109 00:044F 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0451 AF -  -  -  		xor 	a 							; return 0.
  111 00:0452 C9 -  -  -  		ret
  112 00:0453 -  -  -  -  
  113 00:0453 -  -  -  -  _SCLess:
  114 00:0453 3E FF -  -  		ld 		a,$FF
  115 00:0455 C9 -  -  -  		ret
  116 00:0456 -  -  -  -  _SCGreater:
  117 00:0456 3E 01 -  -  		ld 		a,1
  118 00:0458 C9 -  -  -  		ret
  119 00:0459 -  -  -  -  
  120 00:0459 3E 0F C3 DA 
              02 00 -  -  		ERR_TODO()
  121 00:045F -  -  -  -  
  122 00:045F -  -  -  -  ; ***************************************************************************************
  123 00:045F -  -  -  -  ;
  124 00:045F -  -  -  -  ;									Changes and Updates
  125 00:045F -  -  -  -  ;
  126 00:045F -  -  -  -  ; ***************************************************************************************
  127 00:045F -  -  -  -  ;
  128 00:045F -  -  -  -  ;		Date			Notes
  129 00:045F -  -  -  -  ;		==== 			=====
  130 00:045F -  -  -  -  ;
  131 00:045F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:045F -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:045F -  -  -  -  ; ***************************************************************************************
    2 00:045F -  -  -  -  ; ***************************************************************************************
    3 00:045F -  -  -  -  ;
    4 00:045F -  -  -  -  ;		Name : 		utility.asm
    5 00:045F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:045F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:045F -  -  -  -  ;		Reviewed :	No
    8 00:045F -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:045F -  -  -  -  ;
   10 00:045F -  -  -  -  ; ***************************************************************************************
   11 00:045F -  -  -  -  ; ***************************************************************************************
   12 00:045F -  -  -  -  
   13 00:045F -  -  -  -  ; ***************************************************************************************
   14 00:045F -  -  -  -  ;
   15 00:045F -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:045F -  -  -  -  ;
   17 00:045F -  -  -  -  ; ***************************************************************************************
   18 00:045F -  -  -  -  
   19 00:045F -  -  -  -  SwapHLDE:
   20 00:045F EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0460 D9 -  -  -  			exx
   22 00:0461 EB -  -  -  			ex 		de,hl
   23 00:0462 D9 -  -  -  			exx
   24 00:0463 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:0464 41 -  -  -  			ld 		b,c
   26 00:0465 4F -  -  -  			ld 		c,a
   27 00:0466 C9 -  -  -  			ret
   28 00:0467 -  -  -  -  
   29 00:0467 -  -  -  -  ; ***************************************************************************************
   30 00:0467 -  -  -  -  ;
   31 00:0467 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:0467 -  -  -  -  ;
   33 00:0467 -  -  -  -  ; ***************************************************************************************
   34 00:0467 -  -  -  -  
   35 00:0467 -  -  -  -  DereferenceBoth:
   36 00:0467 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:0469 C4 40 05 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:046D CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:046F C8 -  -  -  			ret 	z
   40 00:0470 CD 5F 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:0474 CD 40 05 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:0478 CD 5F 04 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:047C C9 -  -  -  			ret
   44 00:047D -  -  -  -  
   45 00:047D -  -  -  -  ; ***************************************************************************************
   46 00:047D -  -  -  -  ;
   47 00:047D -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:047D -  -  -  -  ;
   49 00:047D -  -  -  -  ; ***************************************************************************************
   50 00:047D -  -  -  -  
   51 00:047D -  -  -  -  NegateHLHL:	
   52 00:047D CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:047F C2 38 03 00 			jp 		nz,TypeMismatch
   54 00:0483 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:0485 C4 40 05 00 			call 	nz,Dereference 			; if required.
   56 00:0489 CD C0 0D 00 			call 	Int32Negate
   57 00:048D C9 -  -  -  			ret
Listing for file "_build.asm"
   30 00:048E -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:048E -  -  -  -  ; ***************************************************************************************
    2 00:048E -  -  -  -  ; ***************************************************************************************
    3 00:048E -  -  -  -  ;
    4 00:048E -  -  -  -  ;		Name : 		expression.asm
    5 00:048E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:048E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:048E -  -  -  -  ;		Reviewed :	None
    8 00:048E -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:048E -  -  -  -  ;
   10 00:048E -  -  -  -  ; ***************************************************************************************
   11 00:048E -  -  -  -  ; ***************************************************************************************
   12 00:048E -  -  -  -  
   13 00:048E -  -  -  -  ; ***************************************************************************************
   14 00:048E -  -  -  -  ;
   15 00:048E -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:048E -  -  -  -  ;
   17 00:048E -  -  -  -  ; ***************************************************************************************
   18 00:048E -  -  -  -  
   19 00:048E -  -  -  -  EvaluateAtPrecedence0:
   20 00:048E AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:048F -  -  -  -  EvaluateAtPrecedence:
   22 00:048F F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0490 -  -  -  -  		;
   24 00:0490 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0490 -  -  -  -  		;
   26 00:0490 CD 9C 05 00 		call 	EvaluateTerm 				; get term
   27 00:0494 -  -  -  -  		;
   28 00:0494 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:0494 -  -  -  -  		;
   30 00:0494 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:0495 -  -  -  -  _EAPLoop:
   32 00:0495 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:0498 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:049A D8 -  -  -  		ret 	c
   35 00:049B FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:049D D0 -  -  -  		ret 	nc
   37 00:049E -  -  -  -  		;
   38 00:049E -  -  -  -  		; 		Get the precedence.
   39 00:049E -  -  -  -  		;
   40 00:049E E5 -  -  -  		push 	hl 							; want to use HL
   41 00:049F D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:04A1 21 A0 09 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:04A5 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:04A6 6F -  -  -  		ld 		l,a
   45 00:04A7 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:04A8 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:04A9 -  -  -  -  		;
   48 00:04A9 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:04A9 -  -  -  -  		;
   50 00:04A9 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:04AA BB -  -  -  		cp 		e
   52 00:04AB D0 -  -  -  		ret 	nc
   53 00:04AC -  -  -  -  
   54 00:04AC -  -  -  -  		;
   55 00:04AC -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:04AC -  -  -  -  		;
   57 00:04AC D5 -  -  -  		push 	de 							; save precedence information.
   58 00:04AD -  -  -  -  		;
   59 00:04AD DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:04B0 F5 -  -  -  		push 	af
   61 00:04B1 -  -  -  -  		;
   62 00:04B1 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:04B2 D9 -  -  -  		exx 								; save HL'
   64 00:04B3 E5 -  -  -  		push 	hl
   65 00:04B4 D9 -  -  -  		exx 								
   66 00:04B5 E5 -  -  -  		push 	hl 							; save HL
   67 00:04B6 -  -  -  -  		;
   68 00:04B6 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:04B8 -  -  -  -  		;
   70 00:04B8 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:04B8 -  -  -  -  		;
   72 00:04B8 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:04B9 CD 8F 04 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:04BD -  -  -  -  		;
   75 00:04BD -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:04BD -  -  -  -  		;
   77 00:04BD 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:04BE -  -  -  -  
   79 00:04BE EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:04BF E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:04C0 D9 -  -  -  		exx
   82 00:04C1 EB -  -  -  		ex 		de,hl
   83 00:04C2 E1 -  -  -  		pop 	hl
   84 00:04C3 D9 -  -  -  		exx
   85 00:04C4 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:04C5 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:04C6 -  -  -  -  		;
   88 00:04C6 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:04C6 -  -  -  -  		; 		is in B (type) DE'DE
   90 00:04C6 -  -  -  -  		;
   91 00:04C6 F1 -  -  -  		pop 	af 							; get operator in A
   92 00:04C7 -  -  -  -  		;
   93 00:04C7 -  -  -  -  		; 		Call the binary operator in A.
   94 00:04C7 -  -  -  -  		;
   95 00:04C7 D5 -  -  -  		push 	de
   96 00:04C8 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:04C9 E6 7F 21 00 
              00 00 6F 29 
              29 11 EC 0A 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:04DE E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:04DF D1 -  -  -  		pop 	de 							; restore DE
  100 00:04E0 CD 60 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:04E4 -  -  -  -  		;
  102 00:04E4 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:04E5 -  -  -  -  		;
  104 00:04E5 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:04E7 -  -  -  -  
  106 00:04E7 -  -  -  -  ; ***************************************************************************************
  107 00:04E7 -  -  -  -  ;
  108 00:04E7 -  -  -  -  ;									Changes and Updates
  109 00:04E7 -  -  -  -  ;
  110 00:04E7 -  -  -  -  ; ***************************************************************************************
  111 00:04E7 -  -  -  -  ;
  112 00:04E7 -  -  -  -  ;		Date			Notes
  113 00:04E7 -  -  -  -  ;		==== 			=====
  114 00:04E7 -  -  -  -  ;
  115 00:04E7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:04E7 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:04E7 -  -  -  -  ; ***************************************************************************************
    2 00:04E7 -  -  -  -  ; ***************************************************************************************
    3 00:04E7 -  -  -  -  ;
    4 00:04E7 -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:04E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04E7 -  -  -  -  ;		Reviewed :	No
    8 00:04E7 -  -  -  -  ;		Purpose :	Expression support functions
    9 00:04E7 -  -  -  -  ;
   10 00:04E7 -  -  -  -  ; ***************************************************************************************
   11 00:04E7 -  -  -  -  ; ***************************************************************************************
   12 00:04E7 -  -  -  -  
   13 00:04E7 -  -  -  -  ; ***************************************************************************************
   14 00:04E7 -  -  -  -  ;
   15 00:04E7 -  -  -  -  ; 								Evaluate an integer term
   16 00:04E7 -  -  -  -  ;
   17 00:04E7 -  -  -  -  ; ***************************************************************************************
   18 00:04E7 -  -  -  -  
   19 00:04E7 -  -  -  -  EvaluateIntegerTerm:
   20 00:04E7 CD 9C 05 00 		call 	EvaluateTerm
   21 00:04EB CD 40 05 00 		call 	DeReference
   22 00:04EF CB 41 -  -  		bit 	CIsString,c
   23 00:04F1 C8 -  -  -  		ret 	z
   24 00:04F2 C3 38 03 00 		jp 		TypeMismatch
   25 00:04F6 -  -  -  -  
   26 00:04F6 -  -  -  -  ; ***************************************************************************************
   27 00:04F6 -  -  -  -  ;
   28 00:04F6 -  -  -  -  ; 								Evaluate a string term
   29 00:04F6 -  -  -  -  ;
   30 00:04F6 -  -  -  -  ; ***************************************************************************************
   31 00:04F6 -  -  -  -  
   32 00:04F6 -  -  -  -  EvaluateStringTerm:
   33 00:04F6 CD 9C 05 00 		call 	EvaluateTerm
   34 00:04FA CD 40 05 00 		call 	DeReference
   35 00:04FE CB 41 -  -  		bit 	CIsString,c
   36 00:0500 C0 -  -  -  		ret 	nz
   37 00:0501 C3 38 03 00 		jp 		TypeMismatch
   38 00:0505 -  -  -  -  
   39 00:0505 -  -  -  -  ; ***************************************************************************************
   40 00:0505 -  -  -  -  ;
   41 00:0505 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:0505 -  -  -  -  ;
   43 00:0505 -  -  -  -  ; ***************************************************************************************
   44 00:0505 -  -  -  -  
   45 00:0505 -  -  -  -  EvaluateValue:
   46 00:0505 CD 8E 04 00 		call 	EvaluateAtPrecedence0
   47 00:0509 C3 40 05 00 		jp 		Dereference
   48 00:050D -  -  -  -  
   49 00:050D -  -  -  -  ; ***************************************************************************************
   50 00:050D -  -  -  -  ;
   51 00:050D -  -  -  -  ; 									Evaluate a number
   52 00:050D -  -  -  -  ;
   53 00:050D -  -  -  -  ; ***************************************************************************************
   54 00:050D -  -  -  -  
   55 00:050D -  -  -  -  EvaluateInteger:
   56 00:050D CD 05 05 00 		call 	EvaluateValue
   57 00:0511 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:0513 C8 -  -  -  		ret 	z
   59 00:0514 C3 38 03 00 		jp 		TypeMismatch
   60 00:0518 -  -  -  -  
   61 00:0518 -  -  -  -  ; ***************************************************************************************
   62 00:0518 -  -  -  -  ;
   63 00:0518 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:0518 -  -  -  -  ;
   65 00:0518 -  -  -  -  ; ***************************************************************************************
   66 00:0518 -  -  -  -  
   67 00:0518 -  -  -  -  Evaluate8BitInteger:
   68 00:0518 CD 0D 05 00 		call 	EvaluateInteger
   69 00:051C D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:051D 7C -  -  -  		ld 		a,h
   71 00:051E B5 -  -  -  		or 		l
   72 00:051F D9 -  -  -  		exx 	
   73 00:0520 B4 -  -  -  		or 		h
   74 00:0521 C2 3E 03 00 		jp 		nz,BadValue
   75 00:0525 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:0526 C9 -  -  -  		ret
   77 00:0527 -  -  -  -  		
   78 00:0527 -  -  -  -  ; ***************************************************************************************
   79 00:0527 -  -  -  -  ;
   80 00:0527 -  -  -  -  ; 									Evaluate a string
   81 00:0527 -  -  -  -  ;
   82 00:0527 -  -  -  -  ; ***************************************************************************************
   83 00:0527 -  -  -  -  
   84 00:0527 -  -  -  -  EvaluateStringOnly:
   85 00:0527 CD 05 05 00 		call 	EvaluateValue
   86 00:052B CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:052D CA 38 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:0531 C9 -  -  -  		ret
   89 00:0532 -  -  -  -  
   90 00:0532 -  -  -  -  ; ***************************************************************************************
   91 00:0532 -  -  -  -  ;
   92 00:0532 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:0532 -  -  -  -  ;
   94 00:0532 -  -  -  -  ; ***************************************************************************************
   95 00:0532 -  -  -  -  
   96 00:0532 -  -  -  -  Return8BitConstant:
   97 00:0532 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:0536 6F -  -  -  		ld 		l,a
   99 00:0537 -  -  -  -  Return16BitConstant:
  100 00:0537 D9 -  -  -  		exx 								; clear HL'
  101 00:0538 21 00 00 00 		ld 		hl,0
  102 00:053C D9 -  -  -  		exx
  103 00:053D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:053F C9 -  -  -  		ret
  105 00:0540 -  -  -  -  
  106 00:0540 -  -  -  -  ; ***************************************************************************************
  107 00:0540 -  -  -  -  ;
  108 00:0540 -  -  -  -  ;									Changes and Updates
  109 00:0540 -  -  -  -  ;
  110 00:0540 -  -  -  -  ; ***************************************************************************************
  111 00:0540 -  -  -  -  ;
  112 00:0540 -  -  -  -  ;		Date			Notes
  113 00:0540 -  -  -  -  ;		==== 			=====
  114 00:0540 -  -  -  -  ;
  115 00:0540 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:0540 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0540 -  -  -  -  ; ***************************************************************************************
    2 00:0540 -  -  -  -  ; ***************************************************************************************
    3 00:0540 -  -  -  -  ;
    4 00:0540 -  -  -  -  ;		Name : 		reference.asm
    5 00:0540 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0540 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0540 -  -  -  -  ;		Reviewed :	No
    8 00:0540 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0540 -  -  -  -  ;
   10 00:0540 -  -  -  -  ; ***************************************************************************************
   11 00:0540 -  -  -  -  ; ***************************************************************************************
   12 00:0540 -  -  -  -  
   13 00:0540 -  -  -  -  ; ***************************************************************************************
   14 00:0540 -  -  -  -  ;
   15 00:0540 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0540 -  -  -  -  ;
   17 00:0540 -  -  -  -  ; ***************************************************************************************
   18 00:0540 -  -  -  -  
   19 00:0540 -  -  -  -  Dereference:
   20 00:0540 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:0542 C8 -  -  -  		ret 	z
   22 00:0543 -  -  -  -  
   23 00:0543 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:0545 -  -  -  -  		
   25 00:0545 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:0547 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0549 -  -  -  -  
   28 00:0549 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:054B 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:054D -  -  -  -  
   31 00:054D E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:054E ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0550 D9 -  -  -  		exx
   34 00:0551 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:0552 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:0553 23 -  -  -  		inc  	hl
   37 00:0554 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:0556 D9 -  -  -  		exx 								; fix back
   39 00:0557 C9 -  -  -  		ret
   40 00:0558 -  -  -  -  
   41 00:0558 -  -  -  -  _DeRefByte:		
   42 00:0558 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0559 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:055D 6F -  -  -  		ld	 	l,a
   45 00:055E D9 -  -  -  		exx
   46 00:055F 21 00 00 00 		ld 		hl,$0000
   47 00:0563 D9 -  -  -  		exx
   48 00:0564 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:0566 C9 -  -  -  		ret
   50 00:0567 -  -  -  -  
   51 00:0567 -  -  -  -  _DRInternal:
   52 00:0567 3E 05 C3 DA 
              02 00 -  -  		ERR_DISABLED
   53 00:056D -  -  -  -  
   54 00:056D -  -  -  -  ; ***************************************************************************************
   55 00:056D -  -  -  -  ;
   56 00:056D -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:056D -  -  -  -  ;
   58 00:056D -  -  -  -  ; ***************************************************************************************
   59 00:056D -  -  -  -  
   60 00:056D -  -  -  -  DRConvertHLHLToAddress:
   61 00:056D -  -  -  -  		#ifdef EZ80
   62 00:056D 22 66 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0571 D9 -  -  -  		exx
   64 00:0572 22 68 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:0576 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:057A D9 -  -  -  		exx
   67 00:057B 2A 66 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:057F -  -  -  -  		#endif
   69 00:057F C9 -  -  -  		ret
   70 00:0580 -  -  -  -  
   71 00:0580 -  -  -  -  ; ***************************************************************************************
   72 00:0580 -  -  -  -  ;
   73 00:0580 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0580 -  -  -  -  ;
   75 00:0580 -  -  -  -  ; ***************************************************************************************
   76 00:0580 -  -  -  -  
   77 00:0580 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0580 -  -  -  -  		#ifdef EZ80
   79 00:0580 22 66 00 00 		ld 		(AConvert),hl
   80 00:0584 21 00 00 00 		ld 		hl,$0000
   81 00:0588 22 69 00 00 		ld 		(AConvert+3),hl
   82 00:058C D9 -  -  -  		exx
   83 00:058D 2A 68 00 00 		ld 		hl,(AConvert+2)
   84 00:0591 D9 -  -  -  		exx
   85 00:0592 AF -  -  -  		xor 	a
   86 00:0593 32 68 00 00 		ld 		(AConvert+2),a
   87 00:0597 2A 66 00 00 		ld 		hl,(AConvert)
   88 00:059B -  -  -  -  		#endif
   89 00:059B C9 -  -  -  		ret
   90 00:059C -  -  -  -  
   91 00:059C -  -  -  -  ; ***************************************************************************************
   92 00:059C -  -  -  -  ;
   93 00:059C -  -  -  -  ;									Changes and Updates
   94 00:059C -  -  -  -  ;
   95 00:059C -  -  -  -  ; ***************************************************************************************
   96 00:059C -  -  -  -  ;
   97 00:059C -  -  -  -  ;		Date			Notes
   98 00:059C -  -  -  -  ;		==== 			=====
   99 00:059C -  -  -  -  ;
  100 00:059C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:059C -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:059C -  -  -  -  ; ***************************************************************************************
    2 00:059C -  -  -  -  ; ***************************************************************************************
    3 00:059C -  -  -  -  ;
    4 00:059C -  -  -  -  ;		Name : 		term.asm
    5 00:059C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:059C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:059C -  -  -  -  ;		Reviewed :	No
    8 00:059C -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:059C -  -  -  -  ;
   10 00:059C -  -  -  -  ; ***************************************************************************************
   11 00:059C -  -  -  -  ; ***************************************************************************************
   12 00:059C -  -  -  -  
   13 00:059C -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:059C             		add_hlhl_16
   15 00:059C             		exx
   16 00:059C             		adc_hlhl_16
   17 00:059C             		exx
   18 00:059C             #endmacro
   19 00:059C -  -  -  -  
   20 00:059C -  -  -  -  ; ***************************************************************************************
   21 00:059C -  -  -  -  ;
   22 00:059C -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:059C -  -  -  -  ;
   24 00:059C -  -  -  -  ; ***************************************************************************************
   25 00:059C -  -  -  -  ;
   26 00:059C -  -  -  -  ; 		Terms can be:
   27 00:059C -  -  -  -  ;
   28 00:059C -  -  -  -  ;			<integer> 			42 						not negative
   29 00:059C -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:059C -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:059C -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:059C -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:059C -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:059C -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:059C -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:059C -  -  -  -  ; 														reference of some sort.
   37 00:059C -  -  -  -  ;
   38 00:059C -  -  -  -  ; ***************************************************************************************
   39 00:059C -  -  -  -  
   40 00:059C -  -  -  -  EvaluateTerm:		
   41 00:059C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:059E D9 -  -  -  		exx
   43 00:059F 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:05A3 D9 -  -  -  		exx
   45 00:05A4 21 00 00 00 		ld 		hl,$0000		
   46 00:05A8 -  -  -  -  		;
   47 00:05A8 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:05AB FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:05AD 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:05AF DA 67 06 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:05B3 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:05B5 C2 0B 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:05B9 -  -  -  -  		;
   54 00:05B9 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:05B9 -  -  -  -  		;
   56 00:05B9 -  -  -  -  _ETIntegerConstant:
   57 00:05B9 -  -  -  -  		;
   58 00:05B9 -  -  -  -  _ETIntegerLoop:		
   59 00:05B9 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:05BC E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:05BE B5 -  -  -  		or 		l 							; or into L
   62 00:05BF 6F -  -  -  		ld 		l,a
   63 00:05C0 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:05C2 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:05C5 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:05C7 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:05C9 D8 -  -  -  		ret 	c
   68 00:05CA -  -  -  -  
   69 00:05CA 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:05D1 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:05D8 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:05DF 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:05E6 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:05ED 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:05F4 -  -  -  -  
   76 00:05F4 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:05F6 -  -  -  -  		;
   78 00:05F6 -  -  -  -  		; 		Found the $3F string marker.
   79 00:05F6 -  -  -  -  		;
   80 00:05F6 -  -  -  -  _ETStringMarker:		
   81 00:05F6 DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:05F8 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:05FA DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:05FC E1 -  -  -  		pop 	hl
   85 00:05FD 11 00 00 00 		ld 		de,$0000
   86 00:0601 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:0604 DD 19 -  -  		add 	ix,de
   88 00:0606 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0608 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:060A C9 -  -  -  		ret
   91 00:060B -  -  -  -  		;
   92 00:060B -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:060B -  -  -  -  		;
   94 00:060B -  -  -  -  _ETFoundKeyword:
   95 00:060B DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:060D FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:060F 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0611 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0613 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0615 -  -  -  -  		;
  101 00:0615 -  -  -  -  		;		Unary group 0
  102 00:0615 -  -  -  -  		;
  103 00:0615 E6 7F 21 00 
              00 00 6F 29 
              29 11 EC 0A 
              00 19 ED 17 
              ED 53 61 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:062A C3 60 00 00 		jp 		JumpCode 					; and go there.
  105 00:062E -  -  -  -  
  106 00:062E -  -  -  -  _ETNotUnaryFunction0:	
  107 00:062E FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0630 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:0632 -  -  -  -  		;
  110 00:0632 -  -  -  -  		; 		- term
  111 00:0632 -  -  -  -  		;
  112 00:0632 CD E7 04 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:0636 CD 7D 04 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:063A C9 -  -  -  		ret
  115 00:063B -  -  -  -  		;
  116 00:063B -  -  -  -  		;		! ? indirection check
  117 00:063B -  -  -  -  		;
  118 00:063B -  -  -  -  _ETCheckIndirection:	
  119 00:063B FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:063D 28 06 -  -  		jr 		z,_ETIndirection
  121 00:063F FE 83 -  -  		cp 		KWD_PLING
  122 00:0641 C2 44 03 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:0645 -  -  -  -  		;
  124 00:0645 -  -  -  -  		; 		! ? indirection
  125 00:0645 -  -  -  -  		;
  126 00:0645 -  -  -  -  _ETIndirection:
  127 00:0645 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:0646 CD 9C 05 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:064A CD 40 05 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:064E CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0650 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:0652 CD 6D 05 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:0656 F1 -  -  -  		pop 	af 							; get type back
  134 00:0657 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:0659 CB F9 -  -  		set 	CIsReference,c
  136 00:065B FE 83 -  -  		cp 		KWD_PLING
  137 00:065D C8 -  -  -  		ret 	z
  138 00:065E CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0660 C9 -  -  -  		ret
  140 00:0661 -  -  -  -  _ETStringIndirect:
  141 00:0661 3E 02 C3 DA 
              02 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:0667 -  -  -  -  		;
  143 00:0667 -  -  -  -  		; 		Found an identifier.
  144 00:0667 -  -  -  -  		;
  145 00:0667 -  -  -  -  _ETVariable:
  146 00:0667 CD BB 08 00 		call 	FindVariable 				; find the variable.
  147 00:066B D0 -  -  -  		ret 	nc 							; return if found.
  148 00:066C 3E 10 C3 DA 
              02 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:0672 -  -  -  -  		
  150 00:0672 -  -  -  -  ; ***************************************************************************************
  151 00:0672 -  -  -  -  ;
  152 00:0672 -  -  -  -  ;									Changes and Updates
  153 00:0672 -  -  -  -  ;
  154 00:0672 -  -  -  -  ; ***************************************************************************************
  155 00:0672 -  -  -  -  ;
  156 00:0672 -  -  -  -  ;		Date			Notes
  157 00:0672 -  -  -  -  ;		==== 			=====
  158 00:0672 -  -  -  -  ;
  159 00:0672 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:0672 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0672 -  -  -  -  ; ***************************************************************************************
    2 00:0672 -  -  -  -  ; ***************************************************************************************
    3 00:0672 -  -  -  -  ;
    4 00:0672 -  -  -  -  ;		Name : 		abs.asm
    5 00:0672 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0672 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0672 -  -  -  -  ;		Reviewed :	No
    8 00:0672 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0672 -  -  -  -  ;
   10 00:0672 -  -  -  -  ; ***************************************************************************************
   11 00:0672 -  -  -  -  ; ***************************************************************************************
   12 00:0672 -  -  -  -  
   13 00:0672 -  -  -  -  ; ***************************************************************************************
   14 00:0672 -  -  -  -  ;
   15 00:0672 -  -  -  -  ;								abs( unary function
   16 00:0672 -  -  -  -  ;
   17 00:0672 -  -  -  -  ; ***************************************************************************************
   18 00:0672 -  -  -  -  
   19 00:0672 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0672 CD E7 04 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:0676 D9 -  -  -  		exx 								; test MSB
   22 00:0677 CB 7C -  -  		bit 	7,h
   23 00:0679 D9 -  -  -  		exx
   24 00:067A C4 7D 04 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:067E C9 -  -  -  		ret
   26 00:067F -  -  -  -  
   27 00:067F -  -  -  -  ; ***************************************************************************************
   28 00:067F -  -  -  -  ;
   29 00:067F -  -  -  -  ;									Changes and Updates
   30 00:067F -  -  -  -  ;
   31 00:067F -  -  -  -  ; ***************************************************************************************
   32 00:067F -  -  -  -  ;
   33 00:067F -  -  -  -  ;		Date			Notes
   34 00:067F -  -  -  -  ;		==== 			=====
   35 00:067F -  -  -  -  ;
   36 00:067F -  -  -  -  ; ***************************************************************************************
   37 00:067F -  -  -  -  		
Listing for file "_build.asm"
   35 00:067F -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:067F -  -  -  -  ; ***************************************************************************************
    2 00:067F -  -  -  -  ; ***************************************************************************************
    3 00:067F -  -  -  -  ;
    4 00:067F -  -  -  -  ;		Name : 		asc.asm
    5 00:067F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:067F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:067F -  -  -  -  ;		Reviewed :	No
    8 00:067F -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:067F -  -  -  -  ;
   10 00:067F -  -  -  -  ; ***************************************************************************************
   11 00:067F -  -  -  -  ; ***************************************************************************************
   12 00:067F -  -  -  -  
   13 00:067F -  -  -  -  ; ***************************************************************************************
   14 00:067F -  -  -  -  ;
   15 00:067F -  -  -  -  ;								Asc unary function
   16 00:067F -  -  -  -  ;
   17 00:067F -  -  -  -  ; ***************************************************************************************
   18 00:067F -  -  -  -  
   19 00:067F -  -  -  -  Unary_Asc:	;; [asc]
   20 00:067F CD F6 04 00 		call	EvaluateStringTerm			; Get string
   21 00:0683 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:0684 C3 32 05 00 		jp 		Return8BitConstant
   23 00:0688 -  -  -  -  
   24 00:0688 -  -  -  -  ; ***************************************************************************************
   25 00:0688 -  -  -  -  ;
   26 00:0688 -  -  -  -  ;									Changes and Updates
   27 00:0688 -  -  -  -  ;
   28 00:0688 -  -  -  -  ; ***************************************************************************************
   29 00:0688 -  -  -  -  ;
   30 00:0688 -  -  -  -  ;		Date			Notes
   31 00:0688 -  -  -  -  ;		==== 			=====
   32 00:0688 -  -  -  -  ;
   33 00:0688 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0688 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:0688 -  -  -  -  ; ***************************************************************************************
    2 00:0688 -  -  -  -  ; ***************************************************************************************
    3 00:0688 -  -  -  -  ;
    4 00:0688 -  -  -  -  ;		Name : 		chr.asm
    5 00:0688 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0688 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0688 -  -  -  -  ;		Reviewed :	No
    8 00:0688 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:0688 -  -  -  -  ;
   10 00:0688 -  -  -  -  ; ***************************************************************************************
   11 00:0688 -  -  -  -  ; ***************************************************************************************
   12 00:0688 -  -  -  -  
   13 00:0688 -  -  -  -  ; ***************************************************************************************
   14 00:0688 -  -  -  -  ;
   15 00:0688 -  -  -  -  ;								Chr$() unary function
   16 00:0688 -  -  -  -  ;
   17 00:0688 -  -  -  -  ; ***************************************************************************************
   18 00:0688 -  -  -  -  
   19 00:0688 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:0688 CD B2 02 00 		call 	CheckDollar
   21 00:068C CD E7 04 00 		call 	EvaluateIntegerTerm
   22 00:0690 7D -  -  -  		ld 		a,l 						; get character
   23 00:0691 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:0693 21 99 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:0697 36 0D -  -  		ld 		(hl),13
   26 00:0699 2B -  -  -  		dec 	hl
   27 00:069A 77 -  -  -  		ld 		(hl),a
   28 00:069B C9 -  -  -  		ret
   29 00:069C -  -  -  -  
   30 00:069C -  -  -  -  ; ***************************************************************************************
   31 00:069C -  -  -  -  ;
   32 00:069C -  -  -  -  ;									Changes and Updates
   33 00:069C -  -  -  -  ;
   34 00:069C -  -  -  -  ; ***************************************************************************************
   35 00:069C -  -  -  -  ;
   36 00:069C -  -  -  -  ;		Date			Notes
   37 00:069C -  -  -  -  ;		==== 			=====
   38 00:069C -  -  -  -  ;
   39 00:069C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:069C -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:069C -  -  -  -  ; ***************************************************************************************
    2 00:069C -  -  -  -  ; ***************************************************************************************
    3 00:069C -  -  -  -  ;
    4 00:069C -  -  -  -  ;		Name : 		len.asm
    5 00:069C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:069C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:069C -  -  -  -  ;		Reviewed :	None
    8 00:069C -  -  -  -  ;		Purpose :	String Length
    9 00:069C -  -  -  -  ;
   10 00:069C -  -  -  -  ; ***************************************************************************************
   11 00:069C -  -  -  -  ; ***************************************************************************************
   12 00:069C -  -  -  -  
   13 00:069C -  -  -  -  ; ***************************************************************************************
   14 00:069C -  -  -  -  ;
   15 00:069C -  -  -  -  ;								Len unary function
   16 00:069C -  -  -  -  ;
   17 00:069C -  -  -  -  ; ***************************************************************************************
   18 00:069C -  -  -  -  
   19 00:069C -  -  -  -  Unary_Len:	;; [len]
   20 00:069C CD F6 04 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:06A0 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:06A1 CD E5 03 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:06A5 -  -  -  -  _ULCount:
   24 00:06A5 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:06A6 FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:06A8 D8 -  -  -  		ret 	c
   27 00:06A9 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:06AA 13 -  -  -  		inc 	de
   29 00:06AB 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:06AD -  -  -  -  
   31 00:06AD -  -  -  -  ; ***************************************************************************************
   32 00:06AD -  -  -  -  ;
   33 00:06AD -  -  -  -  ;									Changes and Updates
   34 00:06AD -  -  -  -  ;
   35 00:06AD -  -  -  -  ; ***************************************************************************************
   36 00:06AD -  -  -  -  ;
   37 00:06AD -  -  -  -  ;		Date			Notes
   38 00:06AD -  -  -  -  ;		==== 			=====
   39 00:06AD -  -  -  -  ;
   40 00:06AD -  -  -  -  ; ***************************************************************************************
   41 00:06AD -  -  -  -  		
Listing for file "_build.asm"
   38 00:06AD -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:06AD -  -  -  -  ; ***************************************************************************************
    2 00:06AD -  -  -  -  ; ***************************************************************************************
    3 00:06AD -  -  -  -  ;
    4 00:06AD -  -  -  -  ;		Name : 		makestring.asm
    5 00:06AD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06AD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06AD -  -  -  -  ;		Reviewed :	No
    8 00:06AD -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:06AD -  -  -  -  ;
   10 00:06AD -  -  -  -  ; ***************************************************************************************
   11 00:06AD -  -  -  -  ; ***************************************************************************************
   12 00:06AD -  -  -  -  
   13 00:06AD -  -  -  -  ; ***************************************************************************************
   14 00:06AD -  -  -  -  ;
   15 00:06AD -  -  -  -  ;								Str$() unary function
   16 00:06AD -  -  -  -  ;
   17 00:06AD -  -  -  -  ; ***************************************************************************************
   18 00:06AD -  -  -  -  
   19 00:06AD -  -  -  -  Unary_MkStr:	;; [$]
   20 00:06AD CD E7 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:06B1 CD 6D 05 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:06B5 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:06B7 C9 -  -  -  		ret
   24 00:06B8 -  -  -  -  
   25 00:06B8 -  -  -  -  ; ***************************************************************************************
   26 00:06B8 -  -  -  -  ;
   27 00:06B8 -  -  -  -  ;									Changes and Updates
   28 00:06B8 -  -  -  -  ;
   29 00:06B8 -  -  -  -  ; ***************************************************************************************
   30 00:06B8 -  -  -  -  ;
   31 00:06B8 -  -  -  -  ;		Date			Notes
   32 00:06B8 -  -  -  -  ;		==== 			=====
   33 00:06B8 -  -  -  -  ;
   34 00:06B8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:06B8 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:06B8 -  -  -  -  ; ***************************************************************************************
    2 00:06B8 -  -  -  -  ; ***************************************************************************************
    3 00:06B8 -  -  -  -  ;
    4 00:06B8 -  -  -  -  ;		Name : 		not.asm
    5 00:06B8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06B8 -  -  -  -  ;		Date : 		5th June 2023
    7 00:06B8 -  -  -  -  ;		Reviewed :	No
    8 00:06B8 -  -  -  -  ;		Purpose :	Logical not
    9 00:06B8 -  -  -  -  ;
   10 00:06B8 -  -  -  -  ; ***************************************************************************************
   11 00:06B8 -  -  -  -  ; ***************************************************************************************
   12 00:06B8 -  -  -  -  
   13 00:06B8 -  -  -  -  ; ***************************************************************************************
   14 00:06B8 -  -  -  -  ;
   15 00:06B8 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:06B8 -  -  -  -  ;
   17 00:06B8 -  -  -  -  ; ***************************************************************************************
   18 00:06B8 -  -  -  -  
   19 00:06B8 -  -  -  -  Unary_Not:		;; [not]
   20 00:06B8 CD E7 04 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:06BC CD C5 06 00 		call 	__UNSwap 					; not and swap twice.
   22 00:06C0 CD C5 06 00 		call 	__UNSwap		
   23 00:06C4 C9 -  -  -  		ret
   24 00:06C5 -  -  -  -  
   25 00:06C5 -  -  -  -  __UNSwap:
   26 00:06C5 7C -  -  -  		ld 		a,h
   27 00:06C6 2F -  -  -  		cpl
   28 00:06C7 67 -  -  -  		ld 		h,a
   29 00:06C8 7D -  -  -  		ld 		a,l
   30 00:06C9 2F -  -  -  		cpl 	
   31 00:06CA 6F -  -  -  		ld 		l,a
   32 00:06CB D9 -  -  -  		exx
   33 00:06CC C9 -  -  -  		ret
   34 00:06CD -  -  -  -  
   35 00:06CD -  -  -  -  ; ***************************************************************************************
   36 00:06CD -  -  -  -  ;
   37 00:06CD -  -  -  -  ;									Changes and Updates
   38 00:06CD -  -  -  -  ;
   39 00:06CD -  -  -  -  ; ***************************************************************************************
   40 00:06CD -  -  -  -  ;
   41 00:06CD -  -  -  -  ;		Date			Notes
   42 00:06CD -  -  -  -  ;		==== 			=====
   43 00:06CD -  -  -  -  ;
   44 00:06CD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:06CD -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:06CD -  -  -  -  ; ***************************************************************************************
    2 00:06CD -  -  -  -  ; ***************************************************************************************
    3 00:06CD -  -  -  -  ;
    4 00:06CD -  -  -  -  ;		Name : 		page.asm
    5 00:06CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06CD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06CD -  -  -  -  ;		Reviewed :	No
    8 00:06CD -  -  -  -  ;		Purpose :	Various constants.
    9 00:06CD -  -  -  -  ;
   10 00:06CD -  -  -  -  ; ***************************************************************************************
   11 00:06CD -  -  -  -  ; ***************************************************************************************
   12 00:06CD -  -  -  -  
   13 00:06CD -  -  -  -  ; ***************************************************************************************
   14 00:06CD -  -  -  -  ;
   15 00:06CD -  -  -  -  ;							page unary function (no bracket)
   16 00:06CD -  -  -  -  ;
   17 00:06CD -  -  -  -  ; ***************************************************************************************
   18 00:06CD -  -  -  -  
   19 00:06CD -  -  -  -  Unary_Page:	;; [page]
   20 00:06CD 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:06D1 D9 -  -  -  			exx
   22 00:06D2 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:06D6 D9 -  -  -  			exx
   24 00:06D7 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:06D9 C9 -  -  -  			ret
   26 00:06DA -  -  -  -  
   27 00:06DA -  -  -  -  ; ***************************************************************************************
   28 00:06DA -  -  -  -  ;
   29 00:06DA -  -  -  -  ;									Changes and Updates
   30 00:06DA -  -  -  -  ;
   31 00:06DA -  -  -  -  ; ***************************************************************************************
   32 00:06DA -  -  -  -  ;
   33 00:06DA -  -  -  -  ;		Date			Notes
   34 00:06DA -  -  -  -  ;		==== 			=====
   35 00:06DA -  -  -  -  ;
   36 00:06DA -  -  -  -  ; ***************************************************************************************
   37 00:06DA -  -  -  -  			
Listing for file "_build.asm"
   41 00:06DA -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:06DA -  -  -  -  ; ***************************************************************************************
    2 00:06DA -  -  -  -  ; ***************************************************************************************
    3 00:06DA -  -  -  -  ;
    4 00:06DA -  -  -  -  ;		Name : 		random.asm
    5 00:06DA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06DA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06DA -  -  -  -  ;		Reviewed :	No
    8 00:06DA -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:06DA -  -  -  -  ;
   10 00:06DA -  -  -  -  ; ***************************************************************************************
   11 00:06DA -  -  -  -  ; ***************************************************************************************
   12 00:06DA -  -  -  -  
   13 00:06DA -  -  -  -  ; ***************************************************************************************
   14 00:06DA -  -  -  -  ;
   15 00:06DA -  -  -  -  ;								Random unary function
   16 00:06DA -  -  -  -  ;
   17 00:06DA -  -  -  -  ; ***************************************************************************************
   18 00:06DA -  -  -  -  
   19 00:06DA -  -  -  -  Unary_Random:	;; [rnd]
   20 00:06DA F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:06E2 CD E7 04 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:06E6 D9 -  -  -  		exx 								; is it -ve
   23 00:06E7 CB 7C -  -  		bit 	7,h
   24 00:06E9 D9 -  -  -  		exx
   25 00:06EA 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:06EC 22 6C 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:06F0 D9 -  -  -  		exx
   28 00:06F1 22 70 00 00 		ld 		(RandomSeed+4),hl
   29 00:06F5 D9 -  -  -  		exx
   30 00:06F6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:06F8 C9 -  -  -  		ret
   32 00:06F9 -  -  -  -  _URDontSeed:		
   33 00:06F9 -  -  -  -  
   34 00:06F9 CD 8F 0D 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:06FD 28 1C -  -  		jr 		z,_URFail
   36 00:06FF E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0700 D9 -  -  -  		exx
   38 00:0701 E5 -  -  -  		push 	hl
   39 00:0702 D9 -  -  -  		exx
   40 00:0703 -  -  -  -  		;
   41 00:0703 CD 2C 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:0707 D9 -  -  -  		exx
   43 00:0708 CD 2C 07 00 		call 	URandomHL
   44 00:070C CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:070E D9 -  -  -  		exx
   46 00:070F -  -  -  -  		;
   47 00:070F D9 -  -  -  		exx 								; restore range.
   48 00:0710 D1 -  -  -  		pop 	de
   49 00:0711 D9 -  -  -  		exx
   50 00:0712 D1 -  -  -  		pop 	de
   51 00:0713 -  -  -  -  		;
   52 00:0713 CD 20 0C 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:0717 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0718 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:071A C9 -  -  -  		ret
   56 00:071B -  -  -  -  _URFail:
   57 00:071B 3E 03 C3 DA 
              02 00 -  -  		ERR_BADVALUE
   58 00:0721 -  -  -  -  ; ***************************************************************************************
   59 00:0721 -  -  -  -  ;
   60 00:0721 -  -  -  -  ; 									Push RNG off zero
   61 00:0721 -  -  -  -  ;
   62 00:0721 -  -  -  -  ; ***************************************************************************************
   63 00:0721 -  -  -  -  
   64 00:0721 -  -  -  -  UnaryRandomInitialise:
   65 00:0721 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:0723 -  -  -  -  _URILoop:
   67 00:0723 C5 -  -  -  		push 	bc
   68 00:0724 CD 2C 07 00 		call 	URandomHL
   69 00:0728 C1 -  -  -  		pop 	bc
   70 00:0729 10 F8 -  -  		djnz 	_URILoop
   71 00:072B C9 -  -  -  		ret
   72 00:072C -  -  -  -  
   73 00:072C -  -  -  -  ; ***************************************************************************************
   74 00:072C -  -  -  -  ;
   75 00:072C -  -  -  -  ;							16 bit random number generator
   76 00:072C -  -  -  -  ;
   77 00:072C -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:072C -  -  -  -  ;		Actual author unspecified.
   79 00:072C -  -  -  -  ;
   80 00:072C -  -  -  -  ; ***************************************************************************************
   81 00:072C -  -  -  -  
   82 00:072C -  -  -  -  URandomHL:
   83 00:072C 2A 6C 00 00 	    ld 		hl,(RandomSeed)
   84 00:0730 ED 5B 70 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:0735 44 -  -  -  	    ld 		b,h
   86 00:0736 4D -  -  -  	    ld 		c,l
   87 00:0737 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:073C 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0741 2C -  -  -  	    inc 	l
   90 00:0742 09 -  -  -  	    add 	hl,bc
   91 00:0743 22 6C 00 00 	    ld 		(RandomSeed),hl
   92 00:0747 2A 70 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:074B ED 5A -  -  	    adc 	hl,de
   94 00:074D 22 70 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0751 EB -  -  -  	    ex 		de,hl
   96 00:0752 2A 74 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:0756 ED 4B 78 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:075B 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0760 ED 43 78 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:0765 9F -  -  -  	    sbc 	a,a
  101 00:0766 E6 C5 -  -  	    and 	%11000101
  102 00:0768 AD -  -  -  	    xor 	l
  103 00:0769 6F -  -  -  	    ld 		l,a
  104 00:076A 22 74 00 00 	    ld 		(RandomSeed+8),hl
  105 00:076E EB -  -  -  	    ex 		de,hl
  106 00:076F 09 -  -  -  	    add 	hl,bc
  107 00:0770 C9 -  -  -  	    ret		
  108 00:0771 -  -  -  -  
  109 00:0771 -  -  -  -  ; ***************************************************************************************
  110 00:0771 -  -  -  -  ;
  111 00:0771 -  -  -  -  ;									Changes and Updates
  112 00:0771 -  -  -  -  ;
  113 00:0771 -  -  -  -  ; ***************************************************************************************
  114 00:0771 -  -  -  -  ;
  115 00:0771 -  -  -  -  ;		Date			Notes
  116 00:0771 -  -  -  -  ;		==== 			=====
  117 00:0771 -  -  -  -  ;
  118 00:0771 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:0771 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0771 -  -  -  -  ; ***************************************************************************************
    2 00:0771 -  -  -  -  ; ***************************************************************************************
    3 00:0771 -  -  -  -  ;
    4 00:0771 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0771 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0771 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0771 -  -  -  -  ;		Reviewed :	No
    8 00:0771 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0771 -  -  -  -  ;
   10 00:0771 -  -  -  -  ; ***************************************************************************************
   11 00:0771 -  -  -  -  ; ***************************************************************************************
   12 00:0771 -  -  -  -  
   13 00:0771 -  -  -  -  ; ***************************************************************************************
   14 00:0771 -  -  -  -  ;
   15 00:0771 -  -  -  -  ;								sgn unary function
   16 00:0771 -  -  -  -  ;
   17 00:0771 -  -  -  -  ; ***************************************************************************************
   18 00:0771 -  -  -  -  
   19 00:0771 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0771 CD E7 04 00 		call	EvaluateIntegerTerm 		; get value
   21 00:0775 CD 8F 0D 00 		call 	Int32Zero 					; integer sgn() code
   22 00:0779 CA E5 03 00 		jp 		z,UnaryInt32False
   23 00:077D D9 -  -  -  		exx
   24 00:077E CB 7C -  -  		bit 	7,h
   25 00:0780 D9 -  -  -  		exx
   26 00:0781 C2 E1 03 00 		jp 		nz,UnaryInt32True
   27 00:0785 3E 01 -  -  		ld 		a,1
   28 00:0787 C3 32 05 00 		jp 		Return8BitConstant
   29 00:078B -  -  -  -  
   30 00:078B -  -  -  -  ; ***************************************************************************************
   31 00:078B -  -  -  -  ;
   32 00:078B -  -  -  -  ;									Changes and Updates
   33 00:078B -  -  -  -  ;
   34 00:078B -  -  -  -  ; ***************************************************************************************
   35 00:078B -  -  -  -  ;
   36 00:078B -  -  -  -  ;		Date			Notes
   37 00:078B -  -  -  -  ;		==== 			=====
   38 00:078B -  -  -  -  ;
   39 00:078B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:078B -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:078B -  -  -  -  ; ***************************************************************************************
    2 00:078B -  -  -  -  ; ***************************************************************************************
    3 00:078B -  -  -  -  ;
    4 00:078B -  -  -  -  ;		Name : 		simple.asm
    5 00:078B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:078B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:078B -  -  -  -  ;		Reviewed :	No
    8 00:078B -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:078B -  -  -  -  ;
   10 00:078B -  -  -  -  ; ***************************************************************************************
   11 00:078B -  -  -  -  ; ***************************************************************************************
   12 00:078B -  -  -  -  
   13 00:078B -  -  -  -  ; ***************************************************************************************
   14 00:078B -  -  -  -  ;
   15 00:078B -  -  -  -  ;								( unary function (think about it)
   16 00:078B -  -  -  -  ;
   17 00:078B -  -  -  -  ; ***************************************************************************************
   18 00:078B -  -  -  -  
   19 00:078B -  -  -  -  Unary_Brackets:	;; [(]
   20 00:078B CD 8E 04 00 		call 	EvaluateAtPrecedence0
   21 00:078F C3 A4 02 00 		jp  	CheckRightBracket
   22 00:0793 -  -  -  -  
   23 00:0793 -  -  -  -  ; ***************************************************************************************
   24 00:0793 -  -  -  -  ;
   25 00:0793 -  -  -  -  ;									Handle &x
   26 00:0793 -  -  -  -  ;
   27 00:0793 -  -  -  -  ; ***************************************************************************************
   28 00:0793 -  -  -  -  
   29 00:0793 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:0793 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:0796 E6 C0 -  -  		and 		$C0
   32 00:0798 FE 40 -  -  		cp 			$40
   33 00:079A C2 44 03 00 		jp 			nz,SyntaxError 			; no then error
   34 00:079E C3 9C 05 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:07A2 -  -  -  -  
   36 00:07A2 -  -  -  -  ; ***************************************************************************************
   37 00:07A2 -  -  -  -  ;
   38 00:07A2 -  -  -  -  ;									Changes and Updates
   39 00:07A2 -  -  -  -  ;
   40 00:07A2 -  -  -  -  ; ***************************************************************************************
   41 00:07A2 -  -  -  -  ;
   42 00:07A2 -  -  -  -  ;		Date			Notes
   43 00:07A2 -  -  -  -  ;		==== 			=====
   44 00:07A2 -  -  -  -  ;
   45 00:07A2 -  -  -  -  ; ***************************************************************************************
   46 00:07A2 -  -  -  -  		
Listing for file "_build.asm"
   44 00:07A2 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:07A2 -  -  -  -  ; ***************************************************************************************
    2 00:07A2 -  -  -  -  ; ***************************************************************************************
    3 00:07A2 -  -  -  -  ;
    4 00:07A2 -  -  -  -  ;		Name : 		str.asm
    5 00:07A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07A2 -  -  -  -  ;		Reviewed :	No
    8 00:07A2 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:07A2 -  -  -  -  ;
   10 00:07A2 -  -  -  -  ; ***************************************************************************************
   11 00:07A2 -  -  -  -  ; ***************************************************************************************
   12 00:07A2 -  -  -  -  
   13 00:07A2 -  -  -  -  ; ***************************************************************************************
   14 00:07A2 -  -  -  -  ;
   15 00:07A2 -  -  -  -  ;								Str$() unary function
   16 00:07A2 -  -  -  -  ;
   17 00:07A2 -  -  -  -  ; ***************************************************************************************
   18 00:07A2 -  -  -  -  
   19 00:07A2 -  -  -  -  Unary_Str:	;; [str]
   20 00:07A2 CD B2 02 00 		call 	CheckDollar
   21 00:07A6 CD E7 04 00 		call 	EvaluateIntegerTerm 		; get an integer
   22 00:07AA 01 88 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   23 00:07AE 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 00:07B0 CD D7 0D 00 		call 	Int32ToString 				
   25 00:07B4 21 88 00 00 		ld 		hl,_USBuffer 				; string address.
   26 00:07B8 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 00:07BA C9 -  -  -  		ret
   28 00:07BB -  -  -  -  
   29 00:07BB -  -  -  -  ; ***************************************************************************************
   30 00:07BB -  -  -  -  ;
   31 00:07BB -  -  -  -  ;									Changes and Updates
   32 00:07BB -  -  -  -  ;
   33 00:07BB -  -  -  -  ; ***************************************************************************************
   34 00:07BB -  -  -  -  ;
   35 00:07BB -  -  -  -  ;		Date			Notes
   36 00:07BB -  -  -  -  ;		==== 			=====
   37 00:07BB -  -  -  -  ;
   38 00:07BB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:07BB -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:07BB -  -  -  -  ; ***************************************************************************************
    2 00:07BB -  -  -  -  ; ***************************************************************************************
    3 00:07BB -  -  -  -  ;
    4 00:07BB -  -  -  -  ;		Name : 		time.asm
    5 00:07BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07BB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07BB -  -  -  -  ;		Reviewed :	No
    8 00:07BB -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:07BB -  -  -  -  ;
   10 00:07BB -  -  -  -  ; ***************************************************************************************
   11 00:07BB -  -  -  -  ; ***************************************************************************************
   12 00:07BB -  -  -  -  
   13 00:07BB -  -  -  -  ; ***************************************************************************************
   14 00:07BB -  -  -  -  ;
   15 00:07BB -  -  -  -  ;							Get system time in ms
   16 00:07BB -  -  -  -  ;
   17 00:07BB -  -  -  -  ; ***************************************************************************************
   18 00:07BB -  -  -  -  
   19 00:07BB -  -  -  -  Unary_Time:	;; [time]
   20 00:07BB CD 28 0E 00 			call 	SYSGetTimer
   21 00:07BF 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:07C1 C9 -  -  -  			ret
   23 00:07C2 -  -  -  -  
   24 00:07C2 -  -  -  -  ; ***************************************************************************************
   25 00:07C2 -  -  -  -  ;
   26 00:07C2 -  -  -  -  ;									Changes and Updates
   27 00:07C2 -  -  -  -  ;
   28 00:07C2 -  -  -  -  ; ***************************************************************************************
   29 00:07C2 -  -  -  -  ;
   30 00:07C2 -  -  -  -  ;		Date			Notes
   31 00:07C2 -  -  -  -  ;		==== 			=====
   32 00:07C2 -  -  -  -  ;
   33 00:07C2 -  -  -  -  ; ***************************************************************************************
   34 00:07C2 -  -  -  -  			
Listing for file "_build.asm"
   46 00:07C2 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:07C2 -  -  -  -  ; ***************************************************************************************
    2 00:07C2 -  -  -  -  ; ***************************************************************************************
    3 00:07C2 -  -  -  -  ;
    4 00:07C2 -  -  -  -  ;		Name : 		top.asm
    5 00:07C2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07C2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07C2 -  -  -  -  ;		Reviewed :	No
    8 00:07C2 -  -  -  -  ;		Purpose :	Various constants.
    9 00:07C2 -  -  -  -  ;
   10 00:07C2 -  -  -  -  ; ***************************************************************************************
   11 00:07C2 -  -  -  -  ; ***************************************************************************************
   12 00:07C2 -  -  -  -  
   13 00:07C2 -  -  -  -  ; ***************************************************************************************
   14 00:07C2 -  -  -  -  ;
   15 00:07C2 -  -  -  -  ;							page unary function (no bracket)
   16 00:07C2 -  -  -  -  ;
   17 00:07C2 -  -  -  -  ; ***************************************************************************************
   18 00:07C2 -  -  -  -  
   19 00:07C2 -  -  -  -  Unary_Top:	;; [top]
   20 00:07C2 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:07C6 D9 -  -  -  			exx
   22 00:07C7 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:07CB D9 -  -  -  			exx
   24 00:07CC 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:07CE C9 -  -  -  			ret
   26 00:07CF -  -  -  -  
   27 00:07CF -  -  -  -  ; ***************************************************************************************
   28 00:07CF -  -  -  -  ;
   29 00:07CF -  -  -  -  ;									Changes and Updates
   30 00:07CF -  -  -  -  ;
   31 00:07CF -  -  -  -  ; ***************************************************************************************
   32 00:07CF -  -  -  -  ;
   33 00:07CF -  -  -  -  ;		Date			Notes
   34 00:07CF -  -  -  -  ;		==== 			=====
   35 00:07CF -  -  -  -  ;
   36 00:07CF -  -  -  -  ; ***************************************************************************************
   37 00:07CF -  -  -  -  			
Listing for file "_build.asm"
   47 00:07CF -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:07CF -  -  -  -  ; ***************************************************************************************
    2 00:07CF -  -  -  -  ; ***************************************************************************************
    3 00:07CF -  -  -  -  ;
    4 00:07CF -  -  -  -  ;		Name : 		val.asm
    5 00:07CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07CF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07CF -  -  -  -  ;		Reviewed :	No
    8 00:07CF -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:07CF -  -  -  -  ;
   10 00:07CF -  -  -  -  ; ***************************************************************************************
   11 00:07CF -  -  -  -  ; ***************************************************************************************
   12 00:07CF -  -  -  -  
   13 00:07CF -  -  -  -  ; ***************************************************************************************
   14 00:07CF -  -  -  -  ;
   15 00:07CF -  -  -  -  ;								val( unary function
   16 00:07CF -  -  -  -  ;
   17 00:07CF -  -  -  -  ; ***************************************************************************************
   18 00:07CF -  -  -  -  
   19 00:07CF -  -  -  -  Unary_Val:	;; [val]
   20 00:07CF CD F6 04 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:07D3 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:07D4 C1 -  -  -  		pop 	bc
   23 00:07D5 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:07D7 CD B5 0C 00 		call 	Int32FromString 			; get the integer part.
   25 00:07DB 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:07DD C8 -  -  -  		ret		z 							; okay
   27 00:07DE 3E 03 C3 DA 
              02 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:07E4 -  -  -  -  
   29 00:07E4 -  -  -  -  ; ***************************************************************************************
   30 00:07E4 -  -  -  -  ;
   31 00:07E4 -  -  -  -  ;									Changes and Updates
   32 00:07E4 -  -  -  -  ;
   33 00:07E4 -  -  -  -  ; ***************************************************************************************
   34 00:07E4 -  -  -  -  ;
   35 00:07E4 -  -  -  -  ;		Date			Notes
   36 00:07E4 -  -  -  -  ;		==== 			=====
   37 00:07E4 -  -  -  -  ;
   38 00:07E4 -  -  -  -  ; ***************************************************************************************
   39 00:07E4 -  -  -  -  		
Listing for file "_build.asm"
   48 00:07E4 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:07E4 -  -  -  -  ; ***************************************************************************************
    2 00:07E4 -  -  -  -  ; ***************************************************************************************
    3 00:07E4 -  -  -  -  ;
    4 00:07E4 -  -  -  -  ;		Name : 		allocate.asm
    5 00:07E4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07E4 -  -  -  -  ;		Date : 		4th June 2022
    7 00:07E4 -  -  -  -  ;		Reviewed :	No
    8 00:07E4 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:07E4 -  -  -  -  ;
   10 00:07E4 -  -  -  -  ; ***************************************************************************************
   11 00:07E4 -  -  -  -  ; ***************************************************************************************
   12 00:07E4 -  -  -  -  
   13 00:07E4 -  -  -  -  ; ***************************************************************************************
   14 00:07E4 -  -  -  -  ;
   15 00:07E4 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:07E4 -  -  -  -  ;
   17 00:07E4 -  -  -  -  ; ***************************************************************************************
   18 00:07E4 -  -  -  -  
   19 00:07E4 -  -  -  -  AllocateBytes:
   20 00:07E4 ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 00:07E9 D5 -  -  -  		push 	de 							; save on stack
   22 00:07EA 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 00:07EB 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   24 00:07EF EB -  -  -  		ex 		de,hl 						; put in DE
   25 00:07F0 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 00:07F4 AF -  -  -  		xor 	a
   27 00:07F5 ED 52 -  -  		sbc 	hl,de
   28 00:07F7 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 00:07F8 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 00:07F9 3E 07 C3 DA 
              02 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 00:07FF -  -  -  -  
   32 00:07FF -  -  -  -  ; ***************************************************************************************
   33 00:07FF -  -  -  -  ;
   34 00:07FF -  -  -  -  ;									Changes and Updates
   35 00:07FF -  -  -  -  ;
   36 00:07FF -  -  -  -  ; ***************************************************************************************
   37 00:07FF -  -  -  -  ;
   38 00:07FF -  -  -  -  ;		Date			Notes
   39 00:07FF -  -  -  -  ;		==== 			=====
   40 00:07FF -  -  -  -  ;
   41 00:07FF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:07FF -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:07FF -  -  -  -  ; ***************************************************************************************
    2 00:07FF -  -  -  -  ; ***************************************************************************************
    3 00:07FF -  -  -  -  ;
    4 00:07FF -  -  -  -  ;		Name : 		clear.asm
    5 00:07FF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07FF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07FF -  -  -  -  ;		Reviewed :	No
    8 00:07FF -  -  -  -  ;		Purpose :	Clear command.
    9 00:07FF -  -  -  -  ;
   10 00:07FF -  -  -  -  ; ***************************************************************************************
   11 00:07FF -  -  -  -  ; ***************************************************************************************
   12 00:07FF -  -  -  -  
   13 00:07FF -  -  -  -  ; ***************************************************************************************
   14 00:07FF -  -  -  -  ;
   15 00:07FF -  -  -  -  ;										CLEAR command
   16 00:07FF -  -  -  -  ;
   17 00:07FF -  -  -  -  ; ***************************************************************************************
   18 00:07FF -  -  -  -  
   19 00:07FF -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:07FF -  -  -  -  		;
   21 00:07FF -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:07FF -  -  -  -  		;
   23 00:07FF 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0803 -  -  -  -  _CCFindLow:
   25 00:0803 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0807 5E -  -  -  		ld 		e,(hl)		
   27 00:0808 19 -  -  -  		add 	hl,de
   28 00:0809 7B -  -  -  		ld 		a,e
   29 00:080A B7 -  -  -  		or 		a
   30 00:080B 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:080D 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:080E 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:0812 23 -  -  -  		inc 	hl 							; one for luck
   34 00:0813 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:0817 -  -  -  -  		;
   36 00:0817 -  -  -  -  		; 	 		Reset the language stack
   37 00:0817 -  -  -  -  		;
   38 00:0817 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:081B -  -  -  -  		;
   40 00:081B 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 00:081D 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   42 00:0821 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 00:0825 19 -  -  -  		add 	hl,de
   44 00:0826 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 00:0828 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 00:082C -  -  -  -  		;
   47 00:082C 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 00:0830 19 -  -  -  		add 	hl,de
   49 00:0831 22 44 00 00 		ld 		(StandardIntegers),hl
   50 00:0835 -  -  -  -  		;
   51 00:0835 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 00:0835 -  -  -  -  		;
   53 00:0835 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 00:0839 -  -  -  -  _CCFClearHT:
   55 00:0839 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 00:083A 36 00 -  -  		ld 		(hl),0
   57 00:083C 1B -  -  -  		dec 	de
   58 00:083D 7A -  -  -  		ld 		a,d
   59 00:083E B3 -  -  -  		or 		e
   60 00:083F 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 00:0841 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   62 00:0845 -  -  -  -  		;
   63 00:0845 -  -  -  -  		; 		Save highest byte that can be allocate
   64 00:0845 -  -  -  -  		;
   65 00:0845 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   66 00:0849 -  -  -  -  		;
   67 00:0849 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 00:0849 -  -  -  -  		;
   69 00:0849 CD 21 07 00 		call 	UnaryRandomInitialise
   70 00:084D C9 -  -  -  		ret
   71 00:084E -  -  -  -  
   72 00:084E -  -  -  -  ; ***************************************************************************************
   73 00:084E -  -  -  -  ;
   74 00:084E -  -  -  -  ;									Changes and Updates
   75 00:084E -  -  -  -  ;
   76 00:084E -  -  -  -  ; ***************************************************************************************
   77 00:084E -  -  -  -  ;
   78 00:084E -  -  -  -  ;		Date			Notes
   79 00:084E -  -  -  -  ;		==== 			=====
   80 00:084E -  -  -  -  ;
   81 00:084E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 00:084E -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:084E -  -  -  -  ; ***************************************************************************************
    2 00:084E -  -  -  -  ; ***************************************************************************************
    3 00:084E -  -  -  -  ;
    4 00:084E -  -  -  -  ;		Name : 		instance.asm
    5 00:084E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:084E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:084E -  -  -  -  ;		Reviewed :	No
    8 00:084E -  -  -  -  ;		Purpose :	Instance handling
    9 00:084E -  -  -  -  ;
   10 00:084E -  -  -  -  ; ***************************************************************************************
   11 00:084E -  -  -  -  ; ***************************************************************************************
   12 00:084E -  -  -  -  
   13 00:084E -  -  -  -  ; ***************************************************************************************
   14 00:084E -  -  -  -  ;
   15 00:084E -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:084E -  -  -  -  ;
   17 00:084E -  -  -  -  ; ***************************************************************************************
   18 00:084E -  -  -  -  
   19 00:084E -  -  -  -  SetCurrentInstance:
   20 00:084E ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0853 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0857 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:085C -  -  -  -  
   24 00:085C C9 -  -  -  		ret
   25 00:085D -  -  -  -  
   26 00:085D -  -  -  -  
   27 00:085D -  -  -  -  ; ***************************************************************************************
   28 00:085D -  -  -  -  ;
   29 00:085D -  -  -  -  ;									Changes and Updates
   30 00:085D -  -  -  -  ;
   31 00:085D -  -  -  -  ; ***************************************************************************************
   32 00:085D -  -  -  -  ;
   33 00:085D -  -  -  -  ;		Date			Notes
   34 00:085D -  -  -  -  ;		==== 			=====
   35 00:085D -  -  -  -  ;
   36 00:085D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:085D -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:085D -  -  -  -  ; ***************************************************************************************
    2 00:085D -  -  -  -  ; ***************************************************************************************
    3 00:085D -  -  -  -  ;
    4 00:085D -  -  -  -  ;		Name : 		new.asm
    5 00:085D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:085D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:085D -  -  -  -  ;		Reviewed :	No
    8 00:085D -  -  -  -  ;		Purpose :	New command.
    9 00:085D -  -  -  -  ;
   10 00:085D -  -  -  -  ; ***************************************************************************************
   11 00:085D -  -  -  -  ; ***************************************************************************************
   12 00:085D -  -  -  -  
   13 00:085D -  -  -  -  ; ***************************************************************************************
   14 00:085D -  -  -  -  ;
   15 00:085D -  -  -  -  ;										NEW command
   16 00:085D -  -  -  -  ;
   17 00:085D -  -  -  -  ; ***************************************************************************************
   18 00:085D -  -  -  -  
   19 00:085D -  -  -  -  Command_NEW: 	;; [new]
   20 00:085D 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0861 36 00 -  -  		ld 		(hl),0
   22 00:0863 CD FF 07 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0867 3E 00 C3 DA 
              02 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:086D -  -  -  -  
   25 00:086D -  -  -  -  ; ***************************************************************************************
   26 00:086D -  -  -  -  ;
   27 00:086D -  -  -  -  ;									Changes and Updates
   28 00:086D -  -  -  -  ;
   29 00:086D -  -  -  -  ; ***************************************************************************************
   30 00:086D -  -  -  -  ;
   31 00:086D -  -  -  -  ;		Date			Notes
   32 00:086D -  -  -  -  ;		==== 			=====
   33 00:086D -  -  -  -  ;
   34 00:086D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:086D -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:086D -  -  -  -  ; ***************************************************************************************
    2 00:086D -  -  -  -  ; ***************************************************************************************
    3 00:086D -  -  -  -  ;
    4 00:086D -  -  -  -  ;		Name : 		utility.asm
    5 00:086D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:086D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:086D -  -  -  -  ;		Reviewed :	No
    8 00:086D -  -  -  -  ;		Purpose :	Utility routines
    9 00:086D -  -  -  -  ;
   10 00:086D -  -  -  -  ; ***************************************************************************************
   11 00:086D -  -  -  -  ; ***************************************************************************************
   12 00:086D -  -  -  -  
   13 00:086D -  -  -  -  ; ***************************************************************************************
   14 00:086D -  -  -  -  ;
   15 00:086D -  -  -  -  ;							Print ASCII string at HL
   16 00:086D -  -  -  -  ;
   17 00:086D -  -  -  -  ; ***************************************************************************************
   18 00:086D -  -  -  -  
   19 00:086D -  -  -  -  PrintStringAtHL:
   20 00:086D 7E -  -  -  		ld 		a,(hl)
   21 00:086E FE 20 -  -  		cp 		$20		
   22 00:0870 D8 -  -  -  		ret 	c
   23 00:0871 CD 26 0E 00 		call 	SYSPrintChar
   24 00:0875 23 -  -  -  		inc 	hl
   25 00:0876 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0878 -  -  -  -  
   27 00:0878 -  -  -  -  ; ***************************************************************************************
   28 00:0878 -  -  -  -  ;
   29 00:0878 -  -  -  -  ;									Changes and Updates
   30 00:0878 -  -  -  -  ;
   31 00:0878 -  -  -  -  ; ***************************************************************************************
   32 00:0878 -  -  -  -  ;
   33 00:0878 -  -  -  -  ;		Date			Notes
   34 00:0878 -  -  -  -  ;		==== 			=====
   35 00:0878 -  -  -  -  ;
   36 00:0878 -  -  -  -  ; ***************************************************************************************
   37 00:0878 -  -  -  -  		
Listing for file "_build.asm"
   53 00:0878 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0878 -  -  -  -  ; ***************************************************************************************
    2 00:0878 -  -  -  -  ; ***************************************************************************************
    3 00:0878 -  -  -  -  ;
    4 00:0878 -  -  -  -  ;		Name : 		create.asm
    5 00:0878 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0878 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0878 -  -  -  -  ;		Reviewed :	No
    8 00:0878 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0878 -  -  -  -  ;
   10 00:0878 -  -  -  -  ; ***************************************************************************************
   11 00:0878 -  -  -  -  ; ***************************************************************************************
   12 00:0878 -  -  -  -  
   13 00:0878 -  -  -  -  ; ***************************************************************************************
   14 00:0878 -  -  -  -  ;
   15 00:0878 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0878 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0878 -  -  -  -  ;
   18 00:0878 -  -  -  -  ; ***************************************************************************************
   19 00:0878 -  -  -  -  
   20 00:0878 -  -  -  -  VariableCreate:		
   21 00:0878 -  -  -  -  		;
   22 00:0878 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 00:0878 -  -  -  -  		;
   24 00:0878 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   25 00:087C 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:087D E5 -  -  -  		push 	hl 							; save count.
   27 00:087E CD E4 07 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0882 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0883 -  -  -  -  		;
   30 00:0883 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0883 -  -  -  -  		;
   32 00:0883 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0884 -  -  -  -  _VCClear:
   34 00:0884 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0886 23 -  -  -  		inc 	hl
   36 00:0887 0B -  -  -  		dec 	bc
   37 00:0888 78 -  -  -  		ld		a,b
   38 00:0889 B1 -  -  -  		or 		c
   39 00:088A 20 F8 -  -  		jr 		nz,_VCClear
   40 00:088C E1 -  -  -  		pop 	hl							; restore start address
   41 00:088D -  -  -  -  		;
   42 00:088D -  -  -  -  		;		Now start to create the data.
   43 00:088D -  -  -  -  		;
   44 00:088D E5 -  -  -  		push 	hl 							; save start
   45 00:088E -  -  -  -  		;
   46 00:088E -  -  -  -  		;		Write hash to +0
   47 00:088E -  -  -  -  		;
   48 00:088E 3A 82 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0892 77 -  -  -  		ld 		(hl),a
   50 00:0893 23 -  -  -  		inc 	hl
   51 00:0894 -  -  -  -  		;
   52 00:0894 -  -  -  -  		;		Write list head to +1
   53 00:0894 -  -  -  -  		;
   54 00:0894 E5 -  -  -  		push 	hl 							; save write position
   55 00:0895 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0899 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:089B EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:089C E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:089D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:08A3 -  -  -  -  		;
   61 00:08A3 -  -  -  -  		;		Write variable name to +5
   62 00:08A3 -  -  -  -  		;
   63 00:08A3 ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:08A8 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:08AE -  -  -  -  		;
   66 00:08AE D1 -  -  -  		pop 	de 							; get the start address back
   67 00:08AF 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:08B3 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:08B9 -  -  -  -  		;
   70 00:08B9 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:08BA C9 -  -  -  		ret
   72 00:08BB -  -  -  -  
   73 00:08BB -  -  -  -  ; ***************************************************************************************
   74 00:08BB -  -  -  -  ;
   75 00:08BB -  -  -  -  ;									Changes and Updates
   76 00:08BB -  -  -  -  ;
   77 00:08BB -  -  -  -  ; ***************************************************************************************
   78 00:08BB -  -  -  -  ;
   79 00:08BB -  -  -  -  ;		Date			Notes
   80 00:08BB -  -  -  -  ;		==== 			=====
   81 00:08BB -  -  -  -  ;
   82 00:08BB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:08BB -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:08BB -  -  -  -  ; ***************************************************************************************
    2 00:08BB -  -  -  -  ; ***************************************************************************************
    3 00:08BB -  -  -  -  ;
    4 00:08BB -  -  -  -  ;		Name : 		find.asm
    5 00:08BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08BB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08BB -  -  -  -  ;		Reviewed :	No
    8 00:08BB -  -  -  -  ;		Purpose :	Find a variable.
    9 00:08BB -  -  -  -  ;
   10 00:08BB -  -  -  -  ; ***************************************************************************************
   11 00:08BB -  -  -  -  ; ***************************************************************************************
   12 00:08BB -  -  -  -  
   13 00:08BB -  -  -  -  ; ***************************************************************************************
   14 00:08BB -  -  -  -  ;
   15 00:08BB -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:08BB -  -  -  -  ; 		variable information at (IX)
   17 00:08BB -  -  -  -  ;
   18 00:08BB -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:08BB -  -  -  -  ;		Don't autocreate arrays.
   20 00:08BB -  -  -  -  ;
   21 00:08BB -  -  -  -  ; ***************************************************************************************
   22 00:08BB -  -  -  -  
   23 00:08BB -  -  -  -  FindVariable:
   24 00:08BB DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:08BE FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:08C0 D2 44 03 00 		jp 		nc,SyntaxError 		
   27 00:08C4 -  -  -  -  
   28 00:08C4 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:08C7 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:08C9 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:08CB FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:08CD 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:08CF -  -  -  -  		;
   34 00:08CF -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:08CF -  -  -  -  		;
   36 00:08CF 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:08D3 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:08D6 87 -  -  -  		add 	a,a 						; x4
   39 00:08D7 87 -  -  -  		add 	a,a
   40 00:08D8 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:08D9 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:08DA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:08DC CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:08DE DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:08E0 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:08E1 C9 -  -  -  		ret
   47 00:08E2 -  -  -  -  		;
   48 00:08E2 -  -  -  -  		;		Not a standard simple variable.
   49 00:08E2 -  -  -  -  		;
   50 00:08E2 -  -  -  -  _FVNotSimple:
   51 00:08E2 CD 16 09 00 		call 	VariableInformation 		; get information about the variable.
   52 00:08E6 CD 52 09 00 		call 	VariableSearchList 			; search the linked list
   53 00:08EA 38 0B -  -  		jr 		c,_FVNotFound  				
   54 00:08EC -  -  -  -  		;
   55 00:08EC -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:08EC -  -  -  -  		;
   57 00:08EC -  -  -  -  _FVExitReference:		
   58 00:08EC 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:08F0 19 -  -  -  		add 	hl,de 
   60 00:08F1 -  -  -  -  		;
   61 00:08F1 -  -  -  -  		; 		TODO: Array check code.
   62 00:08F1 -  -  -  -  		;
   63 00:08F1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 00:08F3 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 00:08F5 AF -  -  -  		xor 	a 							; clear carry and return
   66 00:08F6 C9 -  -  -  		ret
   67 00:08F7 -  -  -  -  		;
   68 00:08F7 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 00:08F7 -  -  -  -  		;
   70 00:08F7 -  -  -  -  _FVNotFound:		
   71 00:08F7 3A 7C 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 00:08FB B7 -  -  -  		or 		a
   73 00:08FC 28 11 -  -  		jr 		z,_FVFail
   74 00:08FE DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 00:0901 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 00:0903 28 0A -  -  		jr 		z,_FVFail
   77 00:0905 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 00:0909 CD 78 08 00 		call 	VariableCreate 				; create a new variable.
   79 00:090D 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 00:090F -  -  -  -  
   81 00:090F -  -  -  -  _FVFail:
   82 00:090F DD 2A 7E 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 00:0914 37 -  -  -  		scf
   84 00:0915 C9 -  -  -  		ret
   85 00:0916 -  -  -  -  
   86 00:0916 -  -  -  -  ; ***************************************************************************************
   87 00:0916 -  -  -  -  ;
   88 00:0916 -  -  -  -  ;									Changes and Updates
   89 00:0916 -  -  -  -  ;
   90 00:0916 -  -  -  -  ; ***************************************************************************************
   91 00:0916 -  -  -  -  ;
   92 00:0916 -  -  -  -  ;		Date			Notes
   93 00:0916 -  -  -  -  ;		==== 			=====
   94 00:0916 -  -  -  -  ;
   95 00:0916 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0916 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0916 -  -  -  -  ; ***************************************************************************************
    2 00:0916 -  -  -  -  ; ***************************************************************************************
    3 00:0916 -  -  -  -  ;
    4 00:0916 -  -  -  -  ;		Name : 		info.asm
    5 00:0916 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0916 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0916 -  -  -  -  ;		Reviewed :	No
    8 00:0916 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0916 -  -  -  -  ;
   10 00:0916 -  -  -  -  ; ***************************************************************************************
   11 00:0916 -  -  -  -  ; ***************************************************************************************
   12 00:0916 -  -  -  -  
   13 00:0916 -  -  -  -  ; ***************************************************************************************
   14 00:0916 -  -  -  -  ;
   15 00:0916 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0916 -  -  -  -  ; 		after the identifier.
   17 00:0916 -  -  -  -  ;
   18 00:0916 -  -  -  -  ; ***************************************************************************************
   19 00:0916 -  -  -  -  
   20 00:0916 -  -  -  -  VariableInformation:
   21 00:0916 DD 22 7E 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:091B -  -  -  -  		;
   23 00:091B -  -  -  -  		; 		Calculate hash, find end.
   24 00:091B -  -  -  -  		;
   25 00:091B 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:091D -  -  -  -  _VICalculateHash:
   27 00:091D DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:0920 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:0922 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:0924 80 -  -  -  		add 	a,b 						; add to hash
   31 00:0925 07 -  -  -  		rlca
   32 00:0926 07 -  -  -  		rlca
   33 00:0927 80 -  -  -  		add 	a,b
   34 00:0928 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0929 DD 23 -  -  		inc 	ix 							; next character
   36 00:092B 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:092D -  -  -  -  		;
   38 00:092D -  -  -  -  _VIHashDone:
   39 00:092D 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:092E -  -  -  -  		;
   41 00:092E -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:092E -  -  -  -  		;
   43 00:092E 32 82 00 00 		ld 		(VarHash),a
   44 00:0932 -  -  -  -  		;
   45 00:0932 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:0932 -  -  -  -  		;		
   47 00:0932 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:0934 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0938 6F -  -  -  		ld 		l,a
   50 00:0939 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:093A 29 -  -  -  		add 	hl,hl
   52 00:093B -  -  -  -  		;
   53 00:093B ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0940 19 -  -  -  		add 	hl,de
   55 00:0941 -  -  -  -  		;
   56 00:0941 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0944 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0946 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0948 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:094C 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:094D -  -  -  -  _VINotArray:
   62 00:094D 22 84 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0951 C9 -  -  -  		ret
   64 00:0952 -  -  -  -  
   65 00:0952 -  -  -  -  ; ***************************************************************************************
   66 00:0952 -  -  -  -  ;
   67 00:0952 -  -  -  -  ;									Changes and Updates
   68 00:0952 -  -  -  -  ;
   69 00:0952 -  -  -  -  ; ***************************************************************************************
   70 00:0952 -  -  -  -  ;
   71 00:0952 -  -  -  -  ;		Date			Notes
   72 00:0952 -  -  -  -  ;		==== 			=====
   73 00:0952 -  -  -  -  ;
   74 00:0952 -  -  -  -  ; ***************************************************************************************
   75 00:0952 -  -  -  -  
Listing for file "_build.asm"
   56 00:0952 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0952 -  -  -  -  ; ***************************************************************************************
    2 00:0952 -  -  -  -  ; ***************************************************************************************
    3 00:0952 -  -  -  -  ;
    4 00:0952 -  -  -  -  ;		Name : 		search.asm
    5 00:0952 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0952 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0952 -  -  -  -  ;		Reviewed :	No
    8 00:0952 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0952 -  -  -  -  ;
   10 00:0952 -  -  -  -  ; ***************************************************************************************
   11 00:0952 -  -  -  -  ; ***************************************************************************************
   12 00:0952 -  -  -  -  
   13 00:0952 -  -  -  -  ; ***************************************************************************************
   14 00:0952 -  -  -  -  ;
   15 00:0952 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0952 -  -  -  -  ;		CS if failed.
   17 00:0952 -  -  -  -  ;
   18 00:0952 -  -  -  -  ; ***************************************************************************************
   19 00:0952 -  -  -  -  
   20 00:0952 -  -  -  -  VariableSearchList:
   21 00:0952 2A 84 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0956 -  -  -  -  		;
   23 00:0956 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0956 -  -  -  -  		;		the address of the hash record
   25 00:0956 -  -  -  -  		;
   26 00:0956 -  -  -  -  _VSLLoop:
   27 00:0956 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0958 -  -  -  -  		;
   29 00:0958 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0959 AF -  -  -  		xor 	a
   31 00:095A ED 6A -  -  		adc 	hl,hl
   32 00:095C E1 -  -  -  		pop 	hl
   33 00:095D 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:095F 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0960 C8 -  -  -  		ret 	z
   36 00:0961 -  -  -  -  _VSLRecord:
   37 00:0961 -  -  -  -  		;
   38 00:0961 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0961 -  -  -  -  		;
   40 00:0961 3A 82 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0965 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0966 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0967 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0969 -  -  -  -  		;
   45 00:0969 -  -  -  -  		;		Now check the name
   46 00:0969 -  -  -  -  		;
   47 00:0969 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:096A 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:096B 23 -  -  -  		inc 	hl
   50 00:096C 23 -  -  -  		inc 	hl
   51 00:096D 23 -  -  -  		inc 	hl
   52 00:096E ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0970 ED 5B 7E 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0975 -  -  -  -  		;
   55 00:0975 -  -  -  -  		;		Check individual characters
   56 00:0975 -  -  -  -  		;
   57 00:0975 -  -  -  -  _VSLCharacter:
   58 00:0975 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0976 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0978 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:097A BE -  -  -  		cp 		(hl) 						; compare them
   62 00:097B 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:097C 13 -  -  -  		inc 	de
   64 00:097D 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:097F -  -  -  -  		;
   66 00:097F -  -  -  -  _VSLFailed:
   67 00:097F E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0980 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0982 -  -  -  -  		;
   70 00:0982 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0982 -  -  -  -  		;		
   72 00:0982 -  -  -  -  _VSLEndIdentifier:
   73 00:0982 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0983 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0985 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0987 -  -  -  -  		;
   77 00:0987 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0988 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0989 AF -  -  -  		xor 	a 							; clear carry
   80 00:098A C9 -  -  -  		ret
   81 00:098B -  -  -  -  
   82 00:098B -  -  -  -  ; ***************************************************************************************
   83 00:098B -  -  -  -  ;
   84 00:098B -  -  -  -  ;									Changes and Updates
   85 00:098B -  -  -  -  ;
   86 00:098B -  -  -  -  ; ***************************************************************************************
   87 00:098B -  -  -  -  ;
   88 00:098B -  -  -  -  ;		Date			Notes
   89 00:098B -  -  -  -  ;		==== 			=====
   90 00:098B -  -  -  -  ;
   91 00:098B -  -  -  -  ; ***************************************************************************************
   92 00:098B -  -  -  -  		
Listing for file "_build.asm"
   57 00:098B -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:098B -  -  -  -  ;
    2 00:098B -  -  -  -  ;	This file is automatically generated.
    3 00:098B -  -  -  -  ;
    4 00:098B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  	.block	$20-($ & $1F)
    5 00:09A0 -  -  -  -  PrecedenceTable:
    6 00:09A0 06 -  -  -  	.db	6	; $0083 !
    7 00:09A1 06 -  -  -  	.db	6	; $0084 ?
    8 00:09A2 05 -  -  -  	.db	5	; $0085 *
    9 00:09A3 05 -  -  -  	.db	5	; $0086 /
   10 00:09A4 05 -  -  -  	.db	5	; $0087 mod
   11 00:09A5 05 -  -  -  	.db	5	; $0088 div
   12 00:09A6 04 -  -  -  	.db	4	; $0089 +
   13 00:09A7 04 -  -  -  	.db	4	; $008a -
   14 00:09A8 03 -  -  -  	.db	3	; $008b >=
   15 00:09A9 03 -  -  -  	.db	3	; $008c <=
   16 00:09AA 03 -  -  -  	.db	3	; $008d >
   17 00:09AB 03 -  -  -  	.db	3	; $008e <
   18 00:09AC 03 -  -  -  	.db	3	; $008f =
   19 00:09AD 03 -  -  -  	.db	3	; $0090 <>
   20 00:09AE 02 -  -  -  	.db	2	; $0091 and
   21 00:09AF 01 -  -  -  	.db	1	; $0092 or
   22 00:09B0 01 -  -  -  	.db	1	; $0093 eor
   23 00:09B1 -  -  -  -  
Listing for file "_build.asm"
   58 00:09B1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:09B1 -  -  -  -  ;
    2 00:09B1 -  -  -  -  ;	This is automatically generated.
    3 00:09B1 -  -  -  -  ;
    4 00:09B1 -  -  -  -  ErrorIDTable:
    5 00:09B1 F5 09 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:09B5 FB 09 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:09B9 0C 0A 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:09BD 1A 0A 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:09C1 24 0A 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:09C5 2E 0A 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:09C9 48 0A 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:09CD 59 0A 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 00:09D1 67 0A 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 00:09D5 75 0A 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 00:09D9 7F 0A 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 00:09DD 94 0A 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 00:09E1 AA 0A 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 00:09E5 B8 0A 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 00:09E9 BD 0A 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 00:09ED CA 0A 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 00:09F1 DB 0A 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 00:09F5 -  -  -  -  
   23 00:09F5 -  -  -  -  ErrText_warmstart:
   24 00:09F5 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 00:09FB -  -  -  -  ErrText_assert:
   26 00:09FB 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 00:0A0C -  -  -  -  ErrText_badtype:
   28 00:0A0C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 00:0A1A -  -  -  -  ErrText_badvalue:
   30 00:0A1A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 00:0A24 -  -  -  -  ErrText_dim:
   32 00:0A24 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 00:0A2E -  -  -  -  ErrText_disabled:
   34 00:0A2E 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 00:0A48 -  -  -  -  ErrText_divzero:
   36 00:0A48 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 00:0A59 -  -  -  -  ErrText_memory:
   38 00:0A59 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 00:0A67 -  -  -  -  ErrText_nocomma:
   40 00:0A67 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 00:0A75 -  -  -  -  ErrText_nodollar:
   42 00:0A75 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 00:0A7F -  -  -  -  ErrText_nolbracket:
   44 00:0A7F 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 00:0A94 -  -  -  -  ErrText_norbracket:
   46 00:0A94 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 00:0AAA -  -  -  -  ErrText_notref:
   48 00:0AAA 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 00:0AB8 -  -  -  -  ErrText_stop:
   50 00:0AB8 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 00:0ABD -  -  -  -  ErrText_syntax:
   52 00:0ABD 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 00:0ACA -  -  -  -  ErrText_todo:
   54 00:0ACA 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 00:0ADB -  -  -  -  ErrText_unknownvar:
   56 00:0ADB 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 00:0AEC -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:0AEC -  -  -  -  ;
    2 00:0AEC -  -  -  -  ;	Vectors for set 0
    3 00:0AEC -  -  -  -  ;
    4 00:0AEC -  -  -  -  VectorsSet0:
    5 00:0AEC 3E 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:0AF0 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:0AF4 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:0AF8 BA 03 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:0AFC C3 03 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:0B00 66 03 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:0B04 74 03 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:0B08 82 03 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:0B0C 74 03 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:0B10 4A 03 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:0B14 58 03 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:0B18 21 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:0B1C 17 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:0B20 03 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:0B24 F9 03 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:0B28 EF 03 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:0B2C 0D 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:0B30 90 03 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:0B34 9E 03 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:0B38 AC 03 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:0B3C 93 07 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:0B40 8B 07 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:0B44 AD 06 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:0B48 DA 06 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:0B4C 9C 06 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:0B50 72 06 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:0B54 71 07 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:0B58 A2 07 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:0B5C 88 06 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:0B60 7F 06 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:0B64 B8 06 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:0B68 CD 06 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:0B6C BB 07 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:0B70 C2 07 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:0B74 CF 07 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:0B78 E1 03 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:0B7C E5 03 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:0B80 EB 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:0B84 EB 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:0B88 EF 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:0B8C EB 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:0B90 00 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:0B94 24 00 00 00 	addr(Unimplemented)              ; $00aa repeat
   48 00:0B98 24 00 00 00 	addr(Unimplemented)              ; $00ab until
   49 00:0B9C 24 00 00 00 	addr(Unimplemented)              ; $00ac if
   50 00:0BA0 EB 00 00 00 	addr(BadCmd_Then)                ; $00ad then
   51 00:0BA4 24 00 00 00 	addr(Unimplemented)              ; $00ae else
   52 00:0BA8 24 00 00 00 	addr(Unimplemented)              ; $00af for
   53 00:0BAC EB 00 00 00 	addr(BadCmd_To)                  ; $00b0 to
   54 00:0BB0 24 00 00 00 	addr(Unimplemented)              ; $00b1 step
   55 00:0BB4 24 00 00 00 	addr(Unimplemented)              ; $00b2 next
   56 00:0BB8 24 00 00 00 	addr(Unimplemented)              ; $00b3 def
   57 00:0BBC 24 00 00 00 	addr(Unimplemented)              ; $00b4 proc
   58 00:0BC0 24 00 00 00 	addr(Unimplemented)              ; $00b5 endproc
   59 00:0BC4 24 00 00 00 	addr(Unimplemented)              ; $00b6 gosub
   60 00:0BC8 24 00 00 00 	addr(Unimplemented)              ; $00b7 return
   61 00:0BCC 24 00 00 00 	addr(Unimplemented)              ; $00b8 goto
   62 00:0BD0 24 00 00 00 	addr(Unimplemented)              ; $00b9 local
   63 00:0BD4 F0 00 00 00 	addr(Command_DIM)                ; $00ba dim
   64 00:0BD8 00 02 00 00 	addr(Command_REM)                ; $00bb rem
   65 00:0BDC 55 01 00 00 	addr(Command_LET)                ; $00bc let
   66 00:0BE0 24 00 00 00 	addr(Unimplemented)              ; $00bd vdu
   67 00:0BE4 A9 01 00 00 	addr(Command_PRINT)              ; $00be print
   68 00:0BE8 24 00 00 00 	addr(Unimplemented)              ; $00bf load
   69 00:0BEC 24 00 00 00 	addr(Unimplemented)              ; $00c0 save
   70 00:0BF0 24 00 00 00 	addr(Unimplemented)              ; $00c1 list
   71 00:0BF4 5D 08 00 00 	addr(Command_NEW)                ; $00c2 new
   72 00:0BF8 1D 02 00 00 	addr(Command_RUN)                ; $00c3 run
   73 00:0BFC 24 00 00 00 	addr(Unimplemented)              ; $00c4 read
   74 00:0C00 24 00 00 00 	addr(Unimplemented)              ; $00c5 data
   75 00:0C04 24 00 00 00 	addr(Unimplemented)              ; $00c6 restore
   76 00:0C08 DA 00 00 00 	addr(Command_ASSERT)             ; $00c7 assert
   77 00:0C0C FF 07 00 00 	addr(Command_CLEAR)              ; $00c8 clear
   78 00:0C10 38 01 00 00 	addr(Command_END)                ; $00c9 end
   79 00:0C14 90 02 00 00 	addr(Command_STOP)               ; $00ca stop
   80 00:0C18 -  -  -  -  ;
   81 00:0C18 -  -  -  -  ;	Vectors for set 1
   82 00:0C18 -  -  -  -  ;
   83 00:0C18 -  -  -  -  VectorsSet1:
   84 00:0C18 -  -  -  -  ;
   85 00:0C18 -  -  -  -  ;	Vectors for set 2
   86 00:0C18 -  -  -  -  ;
   87 00:0C18 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 00:0C18 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:0C18 -  -  -  -  ; ***************************************************************************************
    2 00:0C18 -  -  -  -  ; ***************************************************************************************
    3 00:0C18 -  -  -  -  ;
    4 00:0C18 -  -  -  -  ;		Name : 		idivide.asm
    5 00:0C18 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C18 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C18 -  -  -  -  ;		Reviewed :	No
    8 00:0C18 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:0C18 -  -  -  -  ;
   10 00:0C18 -  -  -  -  ; ***************************************************************************************
   11 00:0C18 -  -  -  -  ; ***************************************************************************************
   12 00:0C18 -  -  -  -  
   13 00:0C18 -  -  -  -  ; ***************************************************************************************
   14 00:0C18 -  -  -  -  ;
   15 00:0C18 -  -  -  -  ;								Unsigned integer divide
   16 00:0C18 -  -  -  -  ;
   17 00:0C18 -  -  -  -  ; ***************************************************************************************
   18 00:0C18 -  -  -  -  
   19 00:0C18 -  -  -  -  Int32UDivide:
   20 00:0C18 37 -  -  -  		scf
   21 00:0C19 C3 5D 0C 00 		jp 		_I32UnsignedDivide		
   22 00:0C1D -  -  -  -  
   23 00:0C1D -  -  -  -  ; ***************************************************************************************
   24 00:0C1D -  -  -  -  ;
   25 00:0C1D -  -  -  -  ;							Signed integer divide/Modulus
   26 00:0C1D -  -  -  -  ;
   27 00:0C1D -  -  -  -  ; ***************************************************************************************
   28 00:0C1D -  -  -  -  
   29 00:0C1D -  -  -  -  Int32SDivide:
   30 00:0C1D 37 -  -  -  		scf
   31 00:0C1E 18 01 -  -  		jr 		_I32SDivide
   32 00:0C20 -  -  -  -  Int32Modulus:
   33 00:0C20 AF -  -  -  		xor 	a
   34 00:0C21 -  -  -  -  _I32SDivide:
   35 00:0C21 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:0C22 F5 -  -  -  		push 	af
   37 00:0C23 08 -  -  -  		ex 		af,af'
   38 00:0C24 -  -  -  -  
   39 00:0C24 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:0C25 D9 -  -  -  		exx
   41 00:0C26 D5 -  -  -  		push 	de
   42 00:0C27 D9 -  -  -  		exx
   43 00:0C28 -  -  -  -  
   44 00:0C28 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:0C29 AF -  -  -  		xor 	a 							; clear sign count.
   46 00:0C2A CD 4A 0C 00 		call 	_I32CheckHLSignSwap
   47 00:0C2E CD 4A 0C 00 		call 	_I32CheckHLSignSwap
   48 00:0C32 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:0C33 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:0C34 F5 -  -  -  		push 	af
   51 00:0C35 CD 5D 0C 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:0C39 F1 -  -  -  		pop 	af 							; get function back
   53 00:0C3A 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:0C3C 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:0C3D CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:0C3F C4 C0 0D 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:0C43 -  -  -  -  _I32SDExit:
   58 00:0C43 D9 -  -  -  		exx 								; restore DE'DE
   59 00:0C44 D1 -  -  -  		pop 	de
   60 00:0C45 D9 -  -  -  		exx
   61 00:0C46 D1 -  -  -  		pop 	de
   62 00:0C47 F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:0C48 08 -  -  -  		ex 		af,af'
   64 00:0C49 C9 -  -  -  		ret
   65 00:0C4A -  -  -  -  
   66 00:0C4A -  -  -  -  
   67 00:0C4A -  -  -  -  _I32CheckHLSignSwap:
   68 00:0C4A D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:0C4B CB 7C -  -  		bit 	7,h
   70 00:0C4D D9 -  -  -  		exx
   71 00:0C4E 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:0C50 -  -  -  -  		;
   73 00:0C50 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:0C52 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:0C53 CD C0 0D 00 		call 	Int32Negate 				
   76 00:0C57 F1 -  -  -  		pop 	af
   77 00:0C58 -  -  -  -  _I32CHSPositive:
   78 00:0C58 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:0C59 EB -  -  -  		ex 		de,hl
   80 00:0C5A D9 -  -  -  		exx		
   81 00:0C5B EB -  -  -  		ex 		de,hl
   82 00:0C5C C9 -  -  -  		ret
   83 00:0C5D -  -  -  -  
   84 00:0C5D -  -  -  -  ; ***************************************************************************************
   85 00:0C5D -  -  -  -  ;
   86 00:0C5D -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:0C5D -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:0C5D -  -  -  -  ;
   89 00:0C5D -  -  -  -  ; ***************************************************************************************
   90 00:0C5D -  -  -  -  
   91 00:0C5D -  -  -  -  _I32UnsignedDivide:
   92 00:0C5D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:0C5E D5 -  -  -  		push 	de
   94 00:0C5F D9 -  -  -  		exx
   95 00:0C60 C5 -  -  -  		push 	bc
   96 00:0C61 D5 -  -  -  		push 	de 							
   97 00:0C62 D9 -  -  -  		exx
   98 00:0C63 -  -  -  -  
   99 00:0C63 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:0C64 -  -  -  -  
  101 00:0C64 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:0C65 B3 -  -  -  		or 		e
  103 00:0C66 D9 -  -  -  		exx
  104 00:0C67 B2 -  -  -  		or 		d
  105 00:0C68 B3 -  -  -  		or 		e
  106 00:0C69 D9 -  -  -  		exx
  107 00:0C6A CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:0C6E -  -  -  -  
  109 00:0C6E -  -  -  -  
  110 00:0C6E 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:0C6F 4D -  -  -  		ld		c,l
  112 00:0C70 21 00 00 00 		ld 		hl,$0000
  113 00:0C74 D9 -  -  -  		exx
  114 00:0C75 44 -  -  -  		ld 		b,h
  115 00:0C76 4D -  -  -  		ld		c,l
  116 00:0C77 21 00 00 00 		ld 		hl,$0000
  117 00:0C7B D9 -  -  -  		exx
  118 00:0C7C -  -  -  -  
  119 00:0C7C 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:0C7E -  -  -  -  _I32DivideLoop:
  121 00:0C7E F5 -  -  -  		push 	af
  122 00:0C7F -  -  -  -  
  123 00:0C7F CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:0C81 CB 10 -  -  		rl 		b
  125 00:0C83 D9 -  -  -  		exx
  126 00:0C84 CB 11 -  -  		rl 		c
  127 00:0C86 CB 10 -  -  		rl 		b
  128 00:0C88 D9 -  -  -  		exx
  129 00:0C89 CB 15 -  -  		rl 		l
  130 00:0C8B CB 14 -  -  		rl 		h
  131 00:0C8D D9 -  -  -  		exx
  132 00:0C8E CB 15 -  -  		rl 		l
  133 00:0C90 CB 14 -  -  		rl 		h
  134 00:0C92 D9 -  -  -  		exx
  135 00:0C93 -  -  -  -  
  136 00:0C93 CD 5E 0D 00 		call 	Int32Subtract 				; A = A - M
  137 00:0C97 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:0C99 -  -  -  -  
  139 00:0C99 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:0C9A 18 04 -  -  		jr 		_I32Next
  141 00:0C9C -  -  -  -  
  142 00:0C9C -  -  -  -  _I32Borrow:
  143 00:0C9C CD 56 0D 00 		call 	Int32Add 					; A = A + M
  144 00:0CA0 -  -  -  -  _I32Next:
  145 00:0CA0 F1 -  -  -  		pop 	af
  146 00:0CA1 3D -  -  -  		dec 	a
  147 00:0CA2 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:0CA4 -  -  -  -  
  149 00:0CA4 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:0CA5 -  -  -  -  
  151 00:0CA5 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:0CA6 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:0CA8 -  -  -  -  
  154 00:0CA8 60 -  -  -  		ld  	h,b
  155 00:0CA9 69 -  -  -  		ld 		l,c
  156 00:0CAA D9 -  -  -  		exx
  157 00:0CAB 60 -  -  -  		ld  	h,b
  158 00:0CAC 69 -  -  -  		ld 		l,c
  159 00:0CAD D9 -  -  -  		exx
  160 00:0CAE -  -  -  -  _I32Modulus1:		
  161 00:0CAE D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:0CAF D1 -  -  -  		pop 	de
  163 00:0CB0 C1 -  -  -  		pop 	bc
  164 00:0CB1 D9 -  -  -  		exx
  165 00:0CB2 D1 -  -  -  		pop 	de
  166 00:0CB3 C1 -  -  -  		pop 	bc
  167 00:0CB4 C9 -  -  -  		ret
  168 00:0CB5 -  -  -  -  
  169 00:0CB5 -  -  -  -  ; ***************************************************************************************
  170 00:0CB5 -  -  -  -  ;
  171 00:0CB5 -  -  -  -  ;									Changes and Updates
  172 00:0CB5 -  -  -  -  ;
  173 00:0CB5 -  -  -  -  ; ***************************************************************************************
  174 00:0CB5 -  -  -  -  ;
  175 00:0CB5 -  -  -  -  ;		Date			Notes
  176 00:0CB5 -  -  -  -  ;		==== 			=====
  177 00:0CB5 -  -  -  -  ;
  178 00:0CB5 -  -  -  -  ; ***************************************************************************************
  179 00:0CB5 -  -  -  -  		
Listing for file "_build.asm"
   61 00:0CB5 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:0CB5 -  -  -  -  ; ***************************************************************************************
    2 00:0CB5 -  -  -  -  ; ***************************************************************************************
    3 00:0CB5 -  -  -  -  ;
    4 00:0CB5 -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:0CB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CB5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CB5 -  -  -  -  ;		Reviewed :	No
    8 00:0CB5 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:0CB5 -  -  -  -  ;
   10 00:0CB5 -  -  -  -  ; ***************************************************************************************
   11 00:0CB5 -  -  -  -  ; ***************************************************************************************
   12 00:0CB5 -  -  -  -  
   13 00:0CB5 -  -  -  -  ; ***************************************************************************************
   14 00:0CB5 -  -  -  -  ;
   15 00:0CB5 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:0CB5 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:0CB5 -  -  -  -  ;
   18 00:0CB5 -  -  -  -  ; ***************************************************************************************
   19 00:0CB5 -  -  -  -  
   20 00:0CB5 -  -  -  -  Int32FromString:
   21 00:0CB5 C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:0CB6 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:0CB7 D5 -  -  -  		push 	de
   24 00:0CB8 D9 -  -  -  		exx
   25 00:0CB9 D5 -  -  -  		push 	de
   26 00:0CBA -  -  -  -  
   27 00:0CBA 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:0CBE 11 00 00 00 		ld 		de,$0000
   29 00:0CC2 D9 -  -  -  		exx
   30 00:0CC3 21 00 00 00 		ld 		hl,$0000
   31 00:0CC7 11 00 00 00 		ld 		de,$0000
   32 00:0CCB D9 -  -  -  		exx
   33 00:0CCC -  -  -  -  
   34 00:0CCC 5F -  -  -  		ld 		e,a 						; base in E
   35 00:0CCD CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:0CCF 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:0CD1 ED 44 -  -  		neg 		 						; fix up the base
   38 00:0CD3 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:0CD4 -  -  -  -  		;
   40 00:0CD4 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:0CD5 F5 -  -  -  		push 	af
   42 00:0CD6 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:0CD8 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:0CD9 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:0CDB 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:0CDC 18 01 -  -  		jr 		_I32FSMain
   47 00:0CDE -  -  -  -  _I32FSNotSigned:		
   48 00:0CDE E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:0CDF -  -  -  -  		;
   50 00:0CDF -  -  -  -  		; 		Main conversion loop.
   51 00:0CDF -  -  -  -  		; 		
   52 00:0CDF -  -  -  -  _I32FSMain:		
   53 00:0CDF 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:0CE0 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:0CE2 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:0CE4 D6 20 -  -  		sub 	32
   57 00:0CE6 -  -  -  -  _I32FSNotLower:
   58 00:0CE6 FE 30 -  -  		cp 		'0' 						; check in range
   59 00:0CE8 38 23 -  -  		jr 		c,_I32FSExit
   60 00:0CEA FE 3A -  -  		cp 		'9'+1
   61 00:0CEC 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:0CEE FE 41 -  -  		cp 		'A'
   63 00:0CF0 38 1B -  -  		jr 		c,_I32FSExit
   64 00:0CF2 FE 47 -  -  		cp 		'F'+1
   65 00:0CF4 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:0CF6 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:0CF8 -  -  -  -  _I32FSOkay:
   68 00:0CF8 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:0CFA BB -  -  -  		cp 		e 							; fail if >= base
   70 00:0CFB 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:0CFD 03 -  -  -  		inc 	bc 							; consume character
   72 00:0CFE D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:0CFF F5 -  -  -  		push 	af 							; save additive on stack
   74 00:0D00 CD 1D 0D 00 		call 	Int32Multiply 				; result *= base
   75 00:0D04 F1 -  -  -  		pop 	af 							; additive in DE
   76 00:0D05 5F -  -  -  		ld 		e,a
   77 00:0D06 CD 56 0D 00 		call 	Int32Add 					; and add it.
   78 00:0D0A D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:0D0B 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:0D0D -  -  -  -  
   81 00:0D0D -  -  -  -  _I32FSExit:
   82 00:0D0D F1 -  -  -  		pop 	af 							; get sign back
   83 00:0D0E FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:0D10 CC C0 0D 00 		call 	z,Int32Negate
   85 00:0D14 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:0D15 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:0D16 D9 -  -  -  		exx
   88 00:0D17 D1 -  -  -  		pop 	de
   89 00:0D18 D9 -  -  -  		exx
   90 00:0D19 C1 -  -  -  		pop 	bc
   91 00:0D1A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:0D1C C9 -  -  -  		ret				
   93 00:0D1D -  -  -  -  
   94 00:0D1D -  -  -  -  ; ***************************************************************************************
   95 00:0D1D -  -  -  -  ;
   96 00:0D1D -  -  -  -  ;									Changes and Updates
   97 00:0D1D -  -  -  -  ;
   98 00:0D1D -  -  -  -  ; ***************************************************************************************
   99 00:0D1D -  -  -  -  ;
  100 00:0D1D -  -  -  -  ;		Date			Notes
  101 00:0D1D -  -  -  -  ;		==== 			=====
  102 00:0D1D -  -  -  -  ;
  103 00:0D1D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0D1D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:0D1D -  -  -  -  ; ***************************************************************************************
    2 00:0D1D -  -  -  -  ; ***************************************************************************************
    3 00:0D1D -  -  -  -  ;
    4 00:0D1D -  -  -  -  ;		Name : 		imultiply.asm
    5 00:0D1D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D1D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D1D -  -  -  -  ;		Reviewed :	No
    8 00:0D1D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:0D1D -  -  -  -  ;
   10 00:0D1D -  -  -  -  ; ***************************************************************************************
   11 00:0D1D -  -  -  -  ; ***************************************************************************************
   12 00:0D1D -  -  -  -  
   13 00:0D1D -  -  -  -  Int32Multiply:
   14 00:0D1D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:0D1E D5 -  -  -  		push 	de
   16 00:0D1F 44 -  -  -  		ld 		b,h
   17 00:0D20 4D -  -  -  		ld 		c,l
   18 00:0D21 21 00 00 00 		ld 		hl,$0000
   19 00:0D25 -  -  -  -  
   20 00:0D25 D9 -  -  -  		exx
   21 00:0D26 C5 -  -  -  		push 	bc
   22 00:0D27 D5 -  -  -  		push 	de
   23 00:0D28 44 -  -  -  		ld 		b,h
   24 00:0D29 4D -  -  -  		ld 		c,l
   25 00:0D2A 21 00 00 00 		ld 		hl,$0000		
   26 00:0D2E D9 -  -  -  		exx
   27 00:0D2F -  -  -  -  
   28 00:0D2F -  -  -  -  _I32MultiplyLoop:
   29 00:0D2F CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:0D31 C4 56 0D 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:0D35 -  -  -  -  		;
   32 00:0D35 D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:0D36 CB 38 -  -  		srl 	b
   34 00:0D38 CB 19 -  -  		rr 		c
   35 00:0D3A D9 -  -  -  		exx
   36 00:0D3B CB 18 -  -  		rr 		b
   37 00:0D3D CB 19 -  -  		rr 		c
   38 00:0D3F -  -  -  -  		;
   39 00:0D3F CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:0D41 CB 12 -  -  		rl 		d
   41 00:0D43 D9 -  -  -  		exx
   42 00:0D44 CB 13 -  -  		rl 		e
   43 00:0D46 CB 12 -  -  		rl 		d
   44 00:0D48 -  -  -  -  
   45 00:0D48 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:0D49 B1 -  -  -  		or 		c
   47 00:0D4A D9 -  -  -  		exx
   48 00:0D4B B0 -  -  -  		or 		b
   49 00:0D4C B1 -  -  -  		or 		c
   50 00:0D4D 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:0D4F -  -  -  -  
   52 00:0D4F D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:0D50 D1 -  -  -  		pop 	de
   54 00:0D51 C1 -  -  -  		pop 	bc
   55 00:0D52 D9 -  -  -  		exx
   56 00:0D53 D1 -  -  -  		pop 	de
   57 00:0D54 C1 -  -  -  		pop 	bc
   58 00:0D55 C9 -  -  -  		ret
   59 00:0D56 -  -  -  -  
   60 00:0D56 -  -  -  -  ; ***************************************************************************************
   61 00:0D56 -  -  -  -  ;
   62 00:0D56 -  -  -  -  ;									Changes and Updates
   63 00:0D56 -  -  -  -  ;
   64 00:0D56 -  -  -  -  ; ***************************************************************************************
   65 00:0D56 -  -  -  -  ;
   66 00:0D56 -  -  -  -  ;		Date			Notes
   67 00:0D56 -  -  -  -  ;		==== 			=====
   68 00:0D56 -  -  -  -  ;
   69 00:0D56 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0D56 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:0D56 -  -  -  -  ; ***************************************************************************************
    2 00:0D56 -  -  -  -  ; ***************************************************************************************
    3 00:0D56 -  -  -  -  ;
    4 00:0D56 -  -  -  -  ;		Name : 		isimple.asm
    5 00:0D56 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D56 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D56 -  -  -  -  ;		Reviewed :	No
    8 00:0D56 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:0D56 -  -  -  -  ;
   10 00:0D56 -  -  -  -  ; ***************************************************************************************
   11 00:0D56 -  -  -  -  ; ***************************************************************************************
   12 00:0D56 -  -  -  -  
   13 00:0D56 -  -  -  -  ; ***************************************************************************************
   14 00:0D56 -  -  -  -  ;
   15 00:0D56 -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:0D56 -  -  -  -  ;
   17 00:0D56 -  -  -  -  ; ***************************************************************************************
   18 00:0D56 -  -  -  -  
   19 00:0D56 -  -  -  -  Int32Add:
   20 00:0D56 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:0D58 D9 -  -  -  		exx
   22 00:0D59 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:0D5C D9 -  -  -  		exx
   24 00:0D5D C9 -  -  -  		ret
   25 00:0D5E -  -  -  -  
   26 00:0D5E -  -  -  -  ; ***************************************************************************************
   27 00:0D5E -  -  -  -  ;
   28 00:0D5E -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:0D5E -  -  -  -  ;
   30 00:0D5E -  -  -  -  ; ***************************************************************************************
   31 00:0D5E -  -  -  -  
   32 00:0D5E -  -  -  -  Int32Subtract:
   33 00:0D5E AF -  -  -  		xor 	a 							; clear carry
   34 00:0D5F 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:0D62 D9 -  -  -  		exx
   36 00:0D63 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:0D66 D9 -  -  -  		exx
   38 00:0D67 C9 -  -  -  		ret
   39 00:0D68 -  -  -  -  
   40 00:0D68 -  -  -  -  ; ***************************************************************************************
   41 00:0D68 -  -  -  -  ;
   42 00:0D68 -  -  -  -  ;								And DE'DE into HL'HL
   43 00:0D68 -  -  -  -  ;
   44 00:0D68 -  -  -  -  ; ***************************************************************************************
   45 00:0D68 -  -  -  -  
   46 00:0D68 -  -  -  -  Int32And:
   47 00:0D68 D9 -  -  -  		exx
   48 00:0D69 CD 6E 0D 00 		call 	_I32AndHLDE
   49 00:0D6D D9 -  -  -  		exx
   50 00:0D6E -  -  -  -  _I32AndHLDE:		
   51 00:0D6E 7C -  -  -  		ld 		a,h
   52 00:0D6F A2 -  -  -  		and 	d
   53 00:0D70 67 -  -  -  		ld 		h,a
   54 00:0D71 7D -  -  -  		ld 		a,l
   55 00:0D72 A3 -  -  -  		and 	e
   56 00:0D73 6F -  -  -  		ld 		l,a
   57 00:0D74 C9 -  -  -  		ret
   58 00:0D75 -  -  -  -  
   59 00:0D75 -  -  -  -  ; ***************************************************************************************
   60 00:0D75 -  -  -  -  ;
   61 00:0D75 -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:0D75 -  -  -  -  ;
   63 00:0D75 -  -  -  -  ; ***************************************************************************************
   64 00:0D75 -  -  -  -  
   65 00:0D75 -  -  -  -  Int32Or:
   66 00:0D75 D9 -  -  -  		exx
   67 00:0D76 CD 7B 0D 00 		call 	_I32OrHLDE
   68 00:0D7A D9 -  -  -  		exx
   69 00:0D7B -  -  -  -  _I32OrHLDE:		
   70 00:0D7B 7C -  -  -  		ld 		a,h
   71 00:0D7C B2 -  -  -  		or 		d
   72 00:0D7D 67 -  -  -  		ld 		h,a
   73 00:0D7E 7D -  -  -  		ld 		a,l
   74 00:0D7F B3 -  -  -  		or 		e
   75 00:0D80 6F -  -  -  		ld 		l,a
   76 00:0D81 C9 -  -  -  		ret
   77 00:0D82 -  -  -  -  
   78 00:0D82 -  -  -  -  ; ***************************************************************************************
   79 00:0D82 -  -  -  -  ;
   80 00:0D82 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:0D82 -  -  -  -  ;
   82 00:0D82 -  -  -  -  ; ***************************************************************************************
   83 00:0D82 -  -  -  -  
   84 00:0D82 -  -  -  -  Int32Xor:
   85 00:0D82 D9 -  -  -  		exx
   86 00:0D83 CD 88 0D 00 		call 	_I32XorHLDE
   87 00:0D87 D9 -  -  -  		exx
   88 00:0D88 -  -  -  -  _I32XorHLDE:		
   89 00:0D88 7C -  -  -  		ld 		a,h
   90 00:0D89 AA -  -  -  		xor 	d
   91 00:0D8A 67 -  -  -  		ld 		h,a
   92 00:0D8B 7D -  -  -  		ld 		a,l
   93 00:0D8C AB -  -  -  		xor 	e
   94 00:0D8D 6F -  -  -  		ld 		l,a
   95 00:0D8E C9 -  -  -  		ret
   96 00:0D8F -  -  -  -  
   97 00:0D8F -  -  -  -  ; ***************************************************************************************
   98 00:0D8F -  -  -  -  ;
   99 00:0D8F -  -  -  -  ;								 Check if HL'HL zero
  100 00:0D8F -  -  -  -  ;
  101 00:0D8F -  -  -  -  ; ***************************************************************************************
  102 00:0D8F -  -  -  -  
  103 00:0D8F -  -  -  -  Int32Zero:
  104 00:0D8F D9 -  -  -  		exx
  105 00:0D90 7D -  -  -  		ld 		a,l
  106 00:0D91 B4 -  -  -  		or 		h
  107 00:0D92 D9 -  -  -  		exx
  108 00:0D93 B5 -  -  -  		or 		l
  109 00:0D94 B4 -  -  -  		or 		h
  110 00:0D95 C9 -  -  -  		ret
  111 00:0D96 -  -  -  -  
  112 00:0D96 -  -  -  -  ; ***************************************************************************************
  113 00:0D96 -  -  -  -  ;
  114 00:0D96 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:0D96 -  -  -  -  ;
  116 00:0D96 -  -  -  -  ; ***************************************************************************************
  117 00:0D96 -  -  -  -  
  118 00:0D96 -  -  -  -  Int32Compare:
  119 00:0D96 E5 -  -  -  		push 	hl 							; save HL
  120 00:0D97 AF -  -  -  		xor 	a 							; clear carry
  121 00:0D98 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:0D9B D9 -  -  -  		exx
  123 00:0D9C E5 -  -  -  		push 	hl 							; save HL'
  124 00:0D9D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:0DA0 -  -  -  -  		;
  126 00:0DA0 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:0DA1 E2 A9 0D 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:0DA5 78 -  -  -  		ld 		a,b
  129 00:0DA6 EE 80 -  -  		xor 	$80
  130 00:0DA8 47 -  -  -  		ld 		b,a
  131 00:0DA9 -  -  -  -  _I32CNoOverflow:
  132 00:0DA9 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:0DAA B5 -  -  -  		or 		l
  134 00:0DAB D9 -  -  -  		exx 
  135 00:0DAC B4 -  -  -  		or 		h
  136 00:0DAD B5 -  -  -  		or 		l
  137 00:0DAE 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:0DB0 -  -  -  -  		;
  139 00:0DB0 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:0DB1 CB 78 -  -  		bit 	7,b
  141 00:0DB3 D9 -  -  -  		exx
  142 00:0DB4 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:0DB6 28 02 -  -  		jr 		z,_I32NotPos
  144 00:0DB8 3E FF -  -  		ld 		a,$FF
  145 00:0DBA -  -  -  -  _I32NotPos:
  146 00:0DBA D9 -  -  -  		exx
  147 00:0DBB E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:0DBC D9 -  -  -  		exx
  149 00:0DBD E1 -  -  -  		pop 	hl 							; restore HL
  150 00:0DBE B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:0DBF C9 -  -  -  		ret
  152 00:0DC0 -  -  -  -  
  153 00:0DC0 -  -  -  -  ; ***************************************************************************************
  154 00:0DC0 -  -  -  -  ;
  155 00:0DC0 -  -  -  -  ;										Negate HL'HL
  156 00:0DC0 -  -  -  -  ;
  157 00:0DC0 -  -  -  -  ; ***************************************************************************************
  158 00:0DC0 -  -  -  -  
  159 00:0DC0 -  -  -  -  Int32Negate:
  160 00:0DC0 AF -  -  -  		xor 	a
  161 00:0DC1 CD CC 0D 00 		call 	_I32NSubtract
  162 00:0DC5 D9 -  -  -  		exx
  163 00:0DC6 CD CC 0D 00 		call 	_I32NSubtract
  164 00:0DCA D9 -  -  -  		exx
  165 00:0DCB C9 -  -  -  		ret
  166 00:0DCC -  -  -  -  _I32NSubtract:
  167 00:0DCC D5 -  -  -  		push 	de
  168 00:0DCD EB -  -  -  		ex 		de,hl
  169 00:0DCE 21 00 00 00 		ld 		hl,$0000
  170 00:0DD2 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:0DD5 D1 -  -  -  		pop 	de
  172 00:0DD6 C9 -  -  -  		ret
  173 00:0DD7 -  -  -  -  		
  174 00:0DD7 -  -  -  -  ; ***************************************************************************************
  175 00:0DD7 -  -  -  -  ;
  176 00:0DD7 -  -  -  -  ;									Changes and Updates
  177 00:0DD7 -  -  -  -  ;
  178 00:0DD7 -  -  -  -  ; ***************************************************************************************
  179 00:0DD7 -  -  -  -  ;
  180 00:0DD7 -  -  -  -  ;		Date			Notes
  181 00:0DD7 -  -  -  -  ;		==== 			=====
  182 00:0DD7 -  -  -  -  ;
  183 00:0DD7 -  -  -  -  ; ***************************************************************************************
  184 00:0DD7 -  -  -  -  		
Listing for file "_build.asm"
   64 00:0DD7 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:0DD7 -  -  -  -  ; ***************************************************************************************
    2 00:0DD7 -  -  -  -  ; ***************************************************************************************
    3 00:0DD7 -  -  -  -  ;
    4 00:0DD7 -  -  -  -  ;		Name : 		itostring.asm
    5 00:0DD7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DD7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DD7 -  -  -  -  ;		Reviewed :	No
    8 00:0DD7 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:0DD7 -  -  -  -  ;
   10 00:0DD7 -  -  -  -  ; ***************************************************************************************
   11 00:0DD7 -  -  -  -  ;
   12 00:0DD7 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:0DD7 -  -  -  -  ;
   14 00:0DD7 -  -  -  -  ; ***************************************************************************************
   15 00:0DD7 -  -  -  -  
   16 00:0DD7 -  -  -  -  Int32ToString:
   17 00:0DD7 C5 -  -  -  		push 	bc 							; save string start
   18 00:0DD8 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:0DD9 E5 -  -  -  		push 	hl
   20 00:0DDA 11 00 00 00 		ld	 	de,$0000
   21 00:0DDE D9 -  -  -  		exx
   22 00:0DDF D5 -  -  -  		push 	de
   23 00:0DE0 E5 -  -  -  		push 	hl
   24 00:0DE1 11 00 00 00 		ld 		de,$000
   25 00:0DE5 D9 -  -  -  		exx
   26 00:0DE6 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:0DE7 -  -  -  -  		;
   28 00:0DE7 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:0DE9 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:0DEB ED 44 -  -  		neg 								; negate base and put in E
   31 00:0DED 5F -  -  -  		ld 		e,a
   32 00:0DEE -  -  -  -  		;
   33 00:0DEE D9 -  -  -  		exx 								; is it -ve ?
   34 00:0DEF CB 7C -  -  		bit 	7,h
   35 00:0DF1 D9 -  -  -  		exx
   36 00:0DF2 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:0DF4 -  -  -  -  		;
   38 00:0DF4 CD C0 0D 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:0DF8 -  -  -  -  		;
   40 00:0DF8 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:0DFA 02 -  -  -  		ld 		(bc),a
   42 00:0DFB 03 -  -  -  		inc 	bc
   43 00:0DFC -  -  -  -  _I32TSNotNegative:	
   44 00:0DFC CD 0B 0E 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:0E00 -  -  -  -  _I32TSExit:
   46 00:0E00 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:0E02 02 -  -  -  		ld 		(bc),a 
   48 00:0E03 -  -  -  -  
   49 00:0E03 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:0E04 E1 -  -  -  		pop 	hl
   51 00:0E05 D1 -  -  -  		pop 	de
   52 00:0E06 D9 -  -  -  		exx
   53 00:0E07 E1 -  -  -  		pop 	hl
   54 00:0E08 D1 -  -  -  		pop 	de
   55 00:0E09 C1 -  -  -  		pop 	bc
   56 00:0E0A C9 -  -  -  		ret
   57 00:0E0B -  -  -  -  
   58 00:0E0B -  -  -  -  _I32RecursiveConvert:
   59 00:0E0B CD 18 0C 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:0E0F F5 -  -  -  		push 	af 							; save remainder
   61 00:0E10 CD 8F 0D 00 		call 	Int32Zero		 			; check result is non zero
   62 00:0E14 C4 0B 0E 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:0E18 F1 -  -  -  		pop 	af 							; restore remainder
   64 00:0E19 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:0E1B 38 02 -  -  		jr 		c,_I32NotHex
   66 00:0E1D C6 07 -  -  		add 	a,7
   67 00:0E1F -  -  -  -  _I32NotHex:
   68 00:0E1F C6 30 -  -  		add 	a,48
   69 00:0E21 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:0E22 03 -  -  -  		inc 	bc
   71 00:0E23 C9 -  -  -  		ret		
   72 00:0E24 -  -  -  -  
   73 00:0E24 -  -  -  -  ; ***************************************************************************************
   74 00:0E24 -  -  -  -  ;
   75 00:0E24 -  -  -  -  ;									Changes and Updates
   76 00:0E24 -  -  -  -  ;
   77 00:0E24 -  -  -  -  ; ***************************************************************************************
   78 00:0E24 -  -  -  -  ;
   79 00:0E24 -  -  -  -  ;		Date			Notes
   80 00:0E24 -  -  -  -  ;		==== 			=====
   81 00:0E24 -  -  -  -  ;
   82 00:0E24 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0E24 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:0E24 -  -  -  -  ; ***************************************************************************************
    2 00:0E24 -  -  -  -  ; ***************************************************************************************
    3 00:0E24 -  -  -  -  ;
    4 00:0E24 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:0E24 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E24 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E24 -  -  -  -  ;		Reviewed :	No
    8 00:0E24 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:0E24 -  -  -  -  ;
   10 00:0E24 -  -  -  -  ; ***************************************************************************************
   11 00:0E24 -  -  -  -  ; ***************************************************************************************
   12 00:0E24 -  -  -  -  
   13 00:0E24 -  -  -  -  #ifdef AQUARIUS
   14 00:0E24             
   15 00:0E24             ; ***************************************************************************************
   16 00:0E24             ;
   17 00:0E24             ;								Initialise system stuff
   18 00:0E24             ;
   19 00:0E24             ; ***************************************************************************************
   20 00:0E24             
   21 00:0E24             SYSInitialise:
   22 00:0E24             	ld 		a,$0b 								; Aquarius clear screen
   23 00:0E24             	call 	SYSPrintChar
   24 00:0E24             	ret
   25 00:0E24             
   26 00:0E24             ; ***************************************************************************************
   27 00:0E24             ;
   28 00:0E24             ;								Terminate system stuff
   29 00:0E24             ;
   30 00:0E24             ; ***************************************************************************************
   31 00:0E24             
   32 00:0E24             SYSTerminate:
   33 00:0E24             	jr 		SYSTerminate
   34 00:0E24             
   35 00:0E24             ; ***************************************************************************************
   36 00:0E24             ;
   37 00:0E24             ;								Print A character
   38 00:0E24             ;
   39 00:0E24             ; ***************************************************************************************
   40 00:0E24             
   41 00:0E24             SYSPrintChar:
   42 00:0E24             	push 	af 									; we stack everything including alt registers
   43 00:0E24             	push 	bc
   44 00:0E24             	push 	de
   45 00:0E24             	push 	hl
   46 00:0E24             	push 	ix
   47 00:0E24             	push 	iy
   48 00:0E24             	exx
   49 00:0E24             	push 	bc
   50 00:0E24             	push 	de
   51 00:0E24             	push 	hl
   52 00:0E24             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:0E24             	pop 	hl
   54 00:0E24             	pop 	de
   55 00:0E24             	pop 	bc
   56 00:0E24             	exx
   57 00:0E24             	pop 	iy
   58 00:0E24             	pop 	ix
   59 00:0E24             	pop 	hl
   60 00:0E24             	pop 	de
   61 00:0E24             	pop 	bc
   62 00:0E24             	pop 	af
   63 00:0E24             	ret		
   64 00:0E24             
   65 00:0E24             ; ***************************************************************************************
   66 00:0E24             ;
   67 00:0E24             ;									Print Newline
   68 00:0E24             ;
   69 00:0E24             ; ***************************************************************************************
   70 00:0E24             
   71 00:0E24             SYSPrintCRLF:
   72 00:0E24             	push 	af
   73 00:0E24             	ld 		a,13
   74 00:0E24             	call 	SYSPrintChar
   75 00:0E24             	ld 		a,10
   76 00:0E24             	call 	SYSPrintChar
   77 00:0E24             	pop 	af
   78 00:0E24             	ret
   79 00:0E24             
   80 00:0E24             ; ***************************************************************************************
   81 00:0E24             ;
   82 00:0E24             ;									Get time into HL'HL
   83 00:0E24             ;
   84 00:0E24             ; ***************************************************************************************
   85 00:0E24             
   86 00:0E24             SYSGetTimer:
   87 00:0E24              	in 		a,($00)
   88 00:0E24              	ld 		l,a
   89 00:0E24              	in 		a,($01)
   90 00:0E24              	ld 		h,a
   91 00:0E24              	exx
   92 00:0E24              	in 		a,($02)
   93 00:0E24              	ld 		l,a
   94 00:0E24              	in 		a,($03)
   95 00:0E24              	ld 		h,a
   96 00:0E24              	exx
   97 00:0E24             	ret 	
   98 00:0E24             	
   99 00:0E24             #endif
  100 00:0E24 -  -  -  -  
  101 00:0E24 -  -  -  -  ; ***************************************************************************************
  102 00:0E24 -  -  -  -  ;
  103 00:0E24 -  -  -  -  ;									Changes and Updates
  104 00:0E24 -  -  -  -  ;
  105 00:0E24 -  -  -  -  ; ***************************************************************************************
  106 00:0E24 -  -  -  -  ;
  107 00:0E24 -  -  -  -  ;		Date			Notes
  108 00:0E24 -  -  -  -  ;		==== 			=====
  109 00:0E24 -  -  -  -  ;
  110 00:0E24 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0E24 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:0E24 -  -  -  -  ; ***************************************************************************************
    2 00:0E24 -  -  -  -  ; ***************************************************************************************
    3 00:0E24 -  -  -  -  ;
    4 00:0E24 -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:0E24 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E24 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E24 -  -  -  -  ;		Reviewed :	No
    8 00:0E24 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:0E24 -  -  -  -  ;
   10 00:0E24 -  -  -  -  ; ***************************************************************************************
   11 00:0E24 -  -  -  -  ; ***************************************************************************************
   12 00:0E24 -  -  -  -  
   13 00:0E24 -  -  -  -  #ifdef CLEANEZ80
   14 00:0E24 -  -  -  -  
   15 00:0E24 -  -  -  -  ; ***************************************************************************************
   16 00:0E24 -  -  -  -  ;
   17 00:0E24 -  -  -  -  ;								Initialise system stuff
   18 00:0E24 -  -  -  -  ;
   19 00:0E24 -  -  -  -  ; ***************************************************************************************
   20 00:0E24 -  -  -  -  
   21 00:0E24 -  -  -  -  SYSInitialise:
   22 00:0E24 C9 -  -  -  	ret
   23 00:0E25 -  -  -  -  
   24 00:0E25 -  -  -  -  ; ***************************************************************************************
   25 00:0E25 -  -  -  -  ;
   26 00:0E25 -  -  -  -  ;								Terminate system stuff
   27 00:0E25 -  -  -  -  ;
   28 00:0E25 -  -  -  -  ; ***************************************************************************************
   29 00:0E25 -  -  -  -  
   30 00:0E25 -  -  -  -  SYSTerminate:
   31 00:0E25 C9 -  -  -  	ret
   32 00:0E26 -  -  -  -  
   33 00:0E26 -  -  -  -  ; ***************************************************************************************
   34 00:0E26 -  -  -  -  ;
   35 00:0E26 -  -  -  -  ;								Print A character
   36 00:0E26 -  -  -  -  ;
   37 00:0E26 -  -  -  -  ; ***************************************************************************************
   38 00:0E26 -  -  -  -  
   39 00:0E26 -  -  -  -  SYSPrintChar:
   40 00:0E26 C9 -  -  -  	ret		
   41 00:0E27 -  -  -  -  
   42 00:0E27 -  -  -  -  ; ***************************************************************************************
   43 00:0E27 -  -  -  -  ;
   44 00:0E27 -  -  -  -  ;									Print Newline
   45 00:0E27 -  -  -  -  ;
   46 00:0E27 -  -  -  -  ; ***************************************************************************************
   47 00:0E27 -  -  -  -  
   48 00:0E27 -  -  -  -  SYSPrintCRLF:
   49 00:0E27 C9 -  -  -  	ret
   50 00:0E28 -  -  -  -  
   51 00:0E28 -  -  -  -  ; ***************************************************************************************
   52 00:0E28 -  -  -  -  ;
   53 00:0E28 -  -  -  -  ;									Get time into HL'HL
   54 00:0E28 -  -  -  -  ;
   55 00:0E28 -  -  -  -  ; ***************************************************************************************
   56 00:0E28 -  -  -  -  
   57 00:0E28 -  -  -  -  SYSGetTimer:
   58 00:0E28 C9 -  -  -  	ret
   59 00:0E29 -  -  -  -  
   60 00:0E29 -  -  -  -  #endif
   61 00:0E29 -  -  -  -  
   62 00:0E29 -  -  -  -  ; ***************************************************************************************
   63 00:0E29 -  -  -  -  ;
   64 00:0E29 -  -  -  -  ;									Changes and Updates
   65 00:0E29 -  -  -  -  ;
   66 00:0E29 -  -  -  -  ; ***************************************************************************************
   67 00:0E29 -  -  -  -  ;
   68 00:0E29 -  -  -  -  ;		Date			Notes
   69 00:0E29 -  -  -  -  ;		==== 			=====
   70 00:0E29 -  -  -  -  ;
   71 00:0E29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0E29 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:0E29 -  -  -  -  ; ***************************************************************************************
    2 00:0E29 -  -  -  -  ; ***************************************************************************************
    3 00:0E29 -  -  -  -  ;
    4 00:0E29 -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:0E29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E29 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E29 -  -  -  -  ;		Reviewed :	No
    8 00:0E29 -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:0E29 -  -  -  -  ;
   10 00:0E29 -  -  -  -  ; ***************************************************************************************
   11 00:0E29 -  -  -  -  ; ***************************************************************************************
   12 00:0E29 -  -  -  -  
   13 00:0E29 -  -  -  -  #ifdef TI84
   14 00:0E29             
   15 00:0E29             ; ***************************************************************************************
   16 00:0E29             ;
   17 00:0E29             ;								Initialise system stuff
   18 00:0E29             ;
   19 00:0E29             ; ***************************************************************************************
   20 00:0E29             
   21 00:0E29             SYSInitialise:
   22 00:0E29             	di
   23 00:0E29             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:0E29             	ld 		(_IYTemp84),iy
   25 00:0E29             	ret
   26 00:0E29             
   27 00:0E29             ; ***************************************************************************************
   28 00:0E29             ;
   29 00:0E29             ;								Terminate system stuff
   30 00:0E29             ;
   31 00:0E29             ; ***************************************************************************************
   32 00:0E29             
   33 00:0E29             SYSTerminate:
   34 00:0E29             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:0E29             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:0E29             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:0E29             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:0E29             	ei
   39 00:0E29             	ret 										; and exit.
   40 00:0E29             
   41 00:0E29             _StackTemp84:									; temp var for TI84 only.
   42 00:0E29             	.dw 	0,0
   43 00:0E29             _IYTemp84:
   44 00:0E29             	.dw 	0,0		
   45 00:0E29             
   46 00:0E29             ; ***************************************************************************************
   47 00:0E29             ;
   48 00:0E29             ;								Print A character
   49 00:0E29             ;
   50 00:0E29             ; ***************************************************************************************
   51 00:0E29             
   52 00:0E29             SYSPrintChar:
   53 00:0E29             	push 	af 									; we stack everything including alt registers
   54 00:0E29             	push 	bc
   55 00:0E29             	push 	de
   56 00:0E29             	push 	hl
   57 00:0E29             	push 	ix
   58 00:0E29             	push 	iy
   59 00:0E29             	exx
   60 00:0E29             	push 	bc
   61 00:0E29             	push 	de
   62 00:0E29             	push 	hl
   63 00:0E29             
   64 00:0E29             	ld 		iy,(_IYTemp84)
   65 00:0E29             	call 	_PutC 								; print A as character
   66 00:0E29             	di
   67 00:0E29             	ld 		(_IYTemp84),iy
   68 00:0E29             
   69 00:0E29             	pop 	hl
   70 00:0E29             	pop 	de
   71 00:0E29             	pop 	bc
   72 00:0E29             	exx
   73 00:0E29             	pop 	iy
   74 00:0E29             	pop 	ix
   75 00:0E29             	pop 	hl
   76 00:0E29             	pop 	de
   77 00:0E29             	pop 	bc
   78 00:0E29             	pop 	af
   79 00:0E29             	ret		
   80 00:0E29             
   81 00:0E29             ; ***************************************************************************************
   82 00:0E29             ;
   83 00:0E29             ;									Print Newline
   84 00:0E29             ;
   85 00:0E29             ; ***************************************************************************************
   86 00:0E29             
   87 00:0E29             SYSPrintCRLF:
   88 00:0E29             	push 	af 									; we stack everything including alt registers
   89 00:0E29             	push 	bc
   90 00:0E29             	push 	de
   91 00:0E29             	push 	hl
   92 00:0E29             	push 	ix
   93 00:0E29             	push 	iy
   94 00:0E29             	exx
   95 00:0E29             	push 	bc
   96 00:0E29             	push 	de
   97 00:0E29             	push 	hl
   98 00:0E29             
   99 00:0E29             	ld 		iy,(_IYTemp84)
  100 00:0E29             	call 	_newline
  101 00:0E29             	di
  102 00:0E29             	ld 		(_IYTemp84),iy
  103 00:0E29             
  104 00:0E29             	pop 	hl
  105 00:0E29             	pop 	de
  106 00:0E29             	pop 	bc
  107 00:0E29             	exx
  108 00:0E29             	pop 	iy
  109 00:0E29             	pop 	ix
  110 00:0E29             	pop 	hl
  111 00:0E29             	pop 	de
  112 00:0E29             	pop 	bc
  113 00:0E29             	pop 	af
  114 00:0E29             	ret
  115 00:0E29             
  116 00:0E29             ; ***************************************************************************************
  117 00:0E29             ;
  118 00:0E29             ;									Get time into HL'HL
  119 00:0E29             ;
  120 00:0E29             ; ***************************************************************************************
  121 00:0E29             
  122 00:0E29             SYSGetTimer:
  123 00:0E29             	ld 		hl,$1234
  124 00:0E29             	exx
  125 00:0E29             	ld 		hl,$5678
  126 00:0E29             	exx
  127 00:0E29             	ret
  128 00:0E29             
  129 00:0E29             #endif
  130 00:0E29 -  -  -  -  
  131 00:0E29 -  -  -  -  ; ***************************************************************************************
  132 00:0E29 -  -  -  -  ;
  133 00:0E29 -  -  -  -  ;									Changes and Updates
  134 00:0E29 -  -  -  -  ;
  135 00:0E29 -  -  -  -  ; ***************************************************************************************
  136 00:0E29 -  -  -  -  ;
  137 00:0E29 -  -  -  -  ;		Date			Notes
  138 00:0E29 -  -  -  -  ;		==== 			=====
  139 00:0E29 -  -  -  -  ;
  140 00:0E29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0E29 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:0E29 -  -  -  -  ; ***************************************************************************************
    2 00:0E29 -  -  -  -  ; ***************************************************************************************
    3 00:0E29 -  -  -  -  ;
    4 00:0E29 -  -  -  -  ;		Name : 		basic.asm
    5 00:0E29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E29 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E29 -  -  -  -  ;		Reviewed :	No
    8 00:0E29 -  -  -  -  ;		Purpose :	Main program.
    9 00:0E29 -  -  -  -  ;
   10 00:0E29 -  -  -  -  ; ***************************************************************************************
   11 00:0E29 -  -  -  -  ; ***************************************************************************************
   12 00:0E29 -  -  -  -  
   13 00:0E29 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 00:1000 -  -  -  -  TestInstance:
   15 00:1000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1000 -  -  -  -  ;
    2 00:1000 -  -  -  -  ;	This code automatically generated.
    3 00:1000 -  -  -  -  ;
    4 00:1000 -  -  -  -  TestProgram:
    5 00:1000 22 01 00 BB 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 BB 3F 0C 
              53 65 65 64 
              20 3D 20 34 
              30 32 32 33 
              0D 80 0A 03 
              00 14 8F 8A 
              45 71 6B 80 
              0D 04 00 03 
              19 0A 0E 8F 
              8A 43 5D 57 
              80 0B 05 00 
              0E 1C 08 8F 
              4C 56 7D 80 
              0F 06 00 12 
              13 10 07 0A 
              06 8F 8A 51 
              4C 77 80 0D 
              07 00 19 03 
              00 09 10 8F 
              4C 41 73 80 
              0E 08 00 09 
              14 04 25 24 
              0E 8F 53 54 
              5B 80 0C 09 
              00 16 02 06 
              8F 8A 4F 4F 
              49 80 0C 0A 
              00 00 1F 20 
              0B 8F 50 43 
              64 80 0C 0B 
              00 13 00 08 
              0A 8F 42 7D 
              44 80 0A 0C 
              00 02 8F 8A 
              50 74 5B 80 
              08 0D 00 05 
              8F 75 78 80 
              0C 0E 00 08 
              20 0E 13 8F 
              4F 53 48 80 
              09 0F 00 0E 
              8F 4F 55 5A 
              80 0A 10 00 
              02 1F 8F 53 
              7A 6C 80 0B 
              11 00 18 22 
              8F 8A 54 5D 
              50 80 0E 12 
              00 13 05 1D 
              03 15 8F 8A 
              4B 7B 78 80 
              0B 13 00 17 
              1A 03 8F 4B 
              67 5E 80 0E 
              14 00 0F 09 
              10 06 14 8F 
              8A 41 41 74 
              80 0B 15 00 
              0F 02 07 8F 
              4B 57 5D 80 
              0B 16 00 12 
              20 8F 8A 58 
              58 6F 80 0A 
              17 00 08 8F 
              8A 43 43 4D 
              80 0C 18 00 
              08 23 02 8F 
              8A 58 55 77 
              80 0B 19 00 
              0E 03 25 8F 
              47 66 54 80 
              0B 1A 00 10 
              09 8F 8A 49 
              5B 4A 80 0A 
              1B 00 17 11 
              8F 4E 59 5F 
              80 09 1C 00 
              19 8F 50 7A 
              7F 80 0B 1D 
              00 10 0C 8F 
              8A 49 5B 4C 
              80 0D 1E 00 
              06 15 0E 1D 
              8F 8A 44 75 
              65 80 09 1F 
              00 03 8F 8A 
              41 40 80 0B 
              20 00 19 1C 
              02 8F 49 61 
              51 80 0A 21 
              00 13 10 8F 
              46 62 5E 80 
              0A 22 00 0D 
              13 8F 54 5C 
              6A 80 0E 23 
              00 08 13 22 
              1D 06 19 8F 
              49 53 6A 80 
              0A 24 00 17 
              8F 8A 55 63 
              5F 80 0B 25 
              00 0F 06 16 
              8F 48 6E 4D 
              80 0B 26 00 
              0C 23 8F 8A 
              57 5F 4B 80 
              09 27 00 0A 
              8F 56 73 60 
              80 09 28 00 
              12 8F 4E 55 
              43 80 0E 29 
              00 00 1A 07 
              0B 18 8F 8A 
              4E 63 66 80 
              0C 2A 00 07 
              0A 00 8F 8A 
              4D 5A 55 80 
              09 2B 00 19 
              8F 56 5A 48 
              80 0C 2C 00 
              19 1C 02 8F 
              8A 50 6B 7B 
              80 0E 2D 00 
              12 13 10 07 
              0A 06 8F 51 
              69 7F 80 0A 
              2E 00 0E 8F 
              8A 50 7D 58 
              80 0C 2F 00 
              16 02 06 8F 
              8A 56 7E 7C 
              80 0F 30 00 
              09 14 04 25 
              24 0E 8F 8A 
              45 47 53 80 
              0A 31 00 19 
              8F 8A 4B 7D 
              42 80 0B 32 
              00 17 1A 03 
              8F 4B 67 60 
              80 0A 33 00 
              0D 13 8F 4E 
              7A 5C 80 0B 
              34 00 16 02 
              06 8F 4C 41 
              53 80 0B 35 
              00 17 11 8F 
              8A 51 49 5A 
              80 0A 36 00 
              0E 1C 08 8F 
              70 5A 80 0A 
              37 00 10 0C 
              8F 52 5B 7A 
              80 0F 38 00 
              09 14 04 25 
              24 0E 8F 8A 
              47 44 50 80 
              0B 39 00 12 
              20 8F 8A 46 
              6E 76 80 0E 
              3A 00 09 14 
              04 25 24 0E 
              8F 45 57 52 
              80 0A 3B 00 
              0E 8F 8A 52 
              59 63 80 0C 
              3C 00 03 19 
              0A 0E 8F 42 
              4C 65 80 0C 
              3D 00 07 0A 
              00 8F 8A 44 
              7A 6E 80 09 
              3E 00 0E 8F 
              41 70 67 80 
              0B 3F 00 17 
              1A 03 8F 55 
              74 41 80 0C 
              40 00 17 1A 
              03 8F 8A 46 
              71 7D 80 09 
              41 00 05 8F 
              50 58 6F 80 
              0A 42 00 12 
              20 8F 8A 75 
              4B 80 0A 43 
              00 14 8F 8A 
              48 57 62 80 
              0E 44 00 09 
              14 04 25 24 
              0E 8F 8A 4C 
              7E 80 0C 45 
              00 19 1C 02 
              8F 8A 48 49 
              75 80 0B 46 
              00 0C 23 8F 
              8A 4D 42 67 
              80 0A 47 00 
              10 0C 8F 56 
              6C 76 80 0C 
              48 00 07 0A 
              00 8F 8A 47 
              7C 7D 80 09 
              49 00 0A 8F 
              55 7E 63 80 
              0A 4A 00 0A 
              8F 8A 55 4C 
              75 80 0A 4B 
              00 0A 8F 8A 
              51 69 48 80 
              0C 4C 00 0E 
              03 25 8F 8A 
              41 6B 71 80 
              0A 4D 00 02 
              8F 8A 44 75 
              77 80 09 4E 
              00 0A 8F 4A 
              70 4C 80 0E 
              4F 00 0F 09 
              10 06 14 8F 
              8A 49 54 77 
              80 0B 50 00 
              0E 1C 08 8F 
              56 6A 7E 80 
              0A 51 00 12 
              8F 8A 4C 44 
              67 80 0A 52 
              00 10 0C 8F 
              51 71 54 80 
              0B 53 00 0E 
              03 25 8F 57 
              70 53 80 0B 
              54 00 19 1C 
              02 8F 45 6B 
              40 80 0F 55 
              00 09 14 04 
              25 24 0E 8F 
              8A 47 73 50 
              80 0B 56 00 
              0E 1C 08 8F 
              50 6B 4C 80 
              0C 57 00 19 
              1C 02 8F 8A 
              54 5E 6D 80 
              0A 58 00 13 
              10 8F 41 5E 
              67 80 0B 59 
              00 12 20 8F 
              8A 48 73 41 
              80 0E 5A 00 
              00 1A 07 0B 
              18 8F 8A 44 
              77 4E 80 0A 
              5B 00 0E 8F 
              8A 44 61 50 
              80 0D 5C 00 
              08 20 0E 13 
              8F 8A 52 61 
              47 80 09 5D 
              00 12 8F 4E 
              74 74 80 0A 
              5E 00 02 1F 
              8F 57 6C 60 
              80 0D 5F 00 
              0F 09 10 06 
              14 8F 47 79 
              67 80 0B 60 
              00 08 20 0E 
              13 8F 8A 68 
              80 0D 61 00 
              13 05 1D 03 
              15 8F 54 53 
              6C 80 0A 62 
              00 0D 13 8F 
              44 50 73 80 
              0C 63 00 00 
              1F 20 0B 8F 
              47 72 57 80 
              0A 64 00 03 
              8F 8A 56 50 
              7D 80 0E 65 
              00 0F 09 10 
              06 14 8F 8A 
              53 40 72 80 
              0A 66 00 10 
              09 8F 56 62 
              68 80 09 67 
              00 17 8F 55 
              7A 5D 80 0E 
              68 00 13 05 
              1D 03 15 8F 
              8A 47 7C 78 
              80 0C 69 00 
              16 02 06 8F 
              8A 50 75 41 
              80 0B 6A 00 
              16 02 06 8F 
              4E 46 67 80 
              0A 6B 00 13 
              10 8F 54 71 
              49 80 0D 6C 
              00 08 20 0E 
              13 8F 8A 49 
              7E 5E 80 0A 
              6D 00 05 8F 
              8A 4A 43 43 
              80 0B 6E 00 
              0F 06 16 8F 
              52 47 62 80 
              0E 6F 00 0F 
              09 10 06 14 
              8F 8A 58 41 
              72 80 0B 70 
              00 17 1A 03 
              8F 42 72 4F 
              80 09 71 00 
              19 8F 56 70 
              4B 80 0B 72 
              00 07 0A 00 
              8F 41 5F 6D 
              80 0B 73 00 
              10 0C 8F 8A 
              49 5C 74 80 
              0A 74 00 12 
              8F 8A 54 6C 
              6A 80 0A 75 
              00 0E 8F 8A 
              56 49 4D 80 
              0B 76 00 0E 
              1C 08 8F 4E 
              7E 69 80 0E 
              77 00 08 13 
              22 1D 06 19 
              8F 8A 6C 41 
              80 0B 78 00 
              12 20 8F 8A 
              56 47 7A 80 
              0B 79 00 12 
              20 8F 8A 43 
              62 51 80 09 
              7A 00 03 8F 
              49 43 72 80 
              0A 7B 00 0E 
              8F 8A 54 6D 
              66 80 0C 7C 
              00 0E 03 25 
              8F 8A 42 45 
              63 80 09 7D 
              00 0E 8F 43 
              65 65 80 0E 
              7E 00 09 14 
              04 25 24 0E 
              8F 46 56 71 
              80 0B 7F 00 
              0E 1C 08 8F 
              53 52 5C 80 
              09 80 00 0E 
              8F 57 42 78 
              80 0B 81 00 
              07 0A 00 8F 
              56 74 42 80 
              0A 82 00 08 
              8F 8A 44 50 
              45 80 0F 83 
              00 09 14 04 
              25 24 0E 8F 
              8A 54 69 6F 
              80 09 84 00 
              05 8F 55 5B 
              5B 80 09 85 
              00 13 10 8F 
              5E 59 80 0B 
              86 00 17 1A 
              03 8F 44 60 
              65 80 0B 87 
              00 07 0A 00 
              8F 51 76 52 
              80 0C 88 00 
              08 23 02 8F 
              8A 55 4B 54 
              80 0B 89 00 
              19 1C 02 8F 
              47 67 4D 80 
              0B 8A 00 0F 
              02 07 8F 4D 
              74 4E 80 0A 
              8B 00 18 22 
              8F 54 45 4B 
              80 0B 8C 00 
              07 0A 00 8F 
              41 79 73 80 
              0C 8D 00 08 
              23 02 8F 8A 
              42 7E 69 80 
              0F 8E 00 12 
              13 10 07 0A 
              06 8F 8A 46 
              6D 66 80 0D 
              8F 00 00 1F 
              20 0B 8F 8A 
              44 4D 63 80 
              0D 90 00 13 
              05 1D 03 15 
              8F 56 71 71 
              80 0C 91 00 
              0E 03 25 8F 
              8A 4B 54 58 
              80 09 92 00 
              14 8F 49 7E 
              7C 80 0F 93 
              00 09 14 04 
              25 24 0E 8F 
              8A 4C 46 4E 
              80 0B 94 00 
              0E 1C 08 8F 
              4A 6A 66 80 
              0C 95 00 0E 
              03 25 8F 8A 
              55 5A 41 80 
              0F 96 00 09 
              14 04 25 24 
              0E 8F 8A 4E 
              4F 58 80 0B 
              97 00 0F 06 
              16 8F 4F 6A 
              54 80 0D 98 
              00 19 03 00 
              09 10 8F 48 
              69 69 80 09 
              99 00 0A 8F 
              8A 62 7B 80 
              09 9A 00 02 
              8F 50 7D 73 
              80 0C 9B 00 
              08 20 0E 13 
              8F 42 4C 73 
              80 0A 9C 00 
              14 8F 8A 54 
              50 7F 80 0D 
              9D 00 00 1A 
              07 0B 18 8F 
              4F 7E 52 80 
              0B 9E 00 13 
              10 8F 8A 45 
              6E 57 80 09 
              9F 00 05 8F 
              56 60 48 80 
              0B A0 00 17 
              1A 03 8F 46 
              65 75 80 0A 
              A1 00 0E 8F 
              8A 49 6E 51 
              80 08 A2 00 
              14 8F 60 59 
              80 0A A3 00 
              02 1F 8F 46 
              6C 52 80 08 
              A4 00 12 8F 
              49 75 80 09 
              A5 00 17 8F 
              58 4C 7D 80 
              0B A6 00 0F 
              06 16 8F 55 
              5A 47 80 0C 
              A7 00 17 1A 
              03 8F 8A 58 
              58 64 80 0B 
              A8 00 12 20 
              8F 8A 54 5E 
              4B 80 0B A9 
              00 10 09 8F 
              8A 46 79 5A 
              80 0B AA 00 
              10 09 8F 8A 
              45 77 5D 80 
              0F AB 00 09 
              14 04 25 24 
              0E 8F 8A 48 
              66 5A 80 0B 
              AC 00 03 19 
              0A 0E 8F 76 
              69 80 0A AD 
              00 14 8F 8A 
              55 51 52 80 
              0C AE 00 0E 
              03 25 8F 8A 
              44 5A 49 80 
              09 AF 00 03 
              8F 57 5D 5B 
              80 0A B0 00 
              10 0C 8F 42 
              55 67 80 0B 
              B1 00 08 23 
              02 8F 42 6E 
              52 80 0F B2 
              00 12 13 10 
              07 0A 06 8F 
              8A 51 46 6A 
              80 0F B3 00 
              12 13 10 07 
              0A 06 8F 8A 
              4B 49 77 80 
              09 B4 00 17 
              8F 50 4A 56 
              80 09 B5 00 
              0A 8F 8A 7B 
              79 80 0A B6 
              00 13 10 8F 
              4E 7E 61 80 
              0B B7 00 07 
              0A 00 8F 4B 
              45 71 80 0C 
              B8 00 06 15 
              0E 1D 8F 4E 
              5A 48 80 0B 
              B9 00 0C 23 
              8F 8A 54 54 
              5D 80 0A BA 
              00 0D 13 8F 
              46 58 40 80 
              0F BB 00 12 
              13 10 07 0A 
              06 8F 8A 4F 
              6E 77 80 0A 
              BC 00 0D 13 
              8F 44 4D 5B 
              80 0B BD 00 
              16 02 06 8F 
              42 6E 4E 80 
              0F BE 00 09 
              14 04 25 24 
              0E 8F 8A 45 
              47 6F 80 09 
              BF 00 0A 8F 
              8A 57 5B 80 
              0E C0 00 12 
              13 10 07 0A 
              06 8F 41 4C 
              63 80 0A C1 
              00 0C 23 8F 
              42 7F 76 80 
              09 C2 00 19 
              8F 4F 72 57 
              80 0B C3 00 
              0E 1C 08 8F 
              43 61 64 80 
              0B C4 00 10 
              09 8F 8A 54 
              41 40 80 0A 
              C5 00 10 0C 
              8F 56 62 76 
              80 0A C6 00 
              0E 03 25 8F 
              44 5B 80 0C 
              C7 00 19 1C 
              02 8F 8A 42 
              65 44 80 0E 
              C8 00 0F 09 
              10 06 14 8F 
              8A 56 53 56 
              80 0B C9 00 
              02 1F 8F 8A 
              4C 70 50 80 
              09 CA 00 08 
              8F 45 67 6D 
              80 0A CB 00 
              02 8F 8A 56 
              70 43 80 0F 
              CC 00 12 13 
              10 07 0A 06 
              8F 8A 51 50 
              61 80 0A CD 
              00 05 8F 8A 
              4B 5D 4C 80 
              0C CE 00 06 
              15 0E 1D 8F 
              52 5E 62 80 
              09 CF 00 0E 
              8F 44 59 55 
              80 0B D0 00 
              13 10 8F 8A 
              48 48 6F 80 
              0C D1 00 08 
              20 0E 13 8F 
              51 58 67 80 
              0F D2 00 08 
              13 22 1D 06 
              19 8F 8A 48 
              5C 60 80 0A 
              D3 00 17 11 
              8F 45 70 49 
              80 0A D4 00 
              14 8F 8A 51 
              59 53 80 09 
              D5 00 05 8F 
              42 5A 52 80 
              0C D6 00 03 
              19 0A 0E 8F 
              56 46 4A 80 
              0B D7 00 12 
              20 8F 8A 48 
              60 7C 80 0A 
              D8 00 14 8F 
              8A 49 53 4D 
              80 0C D9 00 
              13 00 08 0A 
              8F 53 5C 4A 
              80 0D DA 00 
              03 19 0A 0E 
              8F 8A 43 5B 
              53 80 09 DB 
              00 19 8F 8A 
              42 65 80 0F 
              DC 00 08 13 
              22 1D 06 19 
              8F 8A 57 61 
              47 80 0C DD 
              00 08 23 02 
              8F 8A 46 5C 
              47 80 0C DE 
              00 08 23 02 
              8F 8A 53 67 
              54 80 0D DF 
              00 08 20 0E 
              13 8F 8A 49 
              40 45 80 0A 
              E0 00 19 8F 
              8A 53 72 68 
              80 09 E1 00 
              0E 8F 42 4B 
              4E 80 09 E2 
              00 17 8F 44 
              41 4A 80 0B 
              E3 00 08 20 
              0E 13 8F 53 
              7D 80 0B E4 
              00 08 23 02 
              8F 52 54 4B 
              80 0A E5 00 
              02 8F 8A 43 
              6E 52 80 0B 
              E6 00 10 09 
              8F 8A 45 41 
              50 80 0D E7 
              00 00 1F 20 
              0B 8F 8A 47 
              62 7E 80 0B 
              E8 00 08 23 
              02 8F 8A 7D 
              57 80 0B E9 
              00 0F 06 16 
              8F 52 7D 7F 
              80 0B EA 00 
              17 11 8F 8A 
              54 70 73 80 
              0A EB 00 02 
              8F 8A 44 6F 
              73 80 09 EC 
              00 19 8F 53 
              69 5A 80 09 
              ED 00 02 8F 
              46 5B 78 80 
              0E EE 00 19 
              03 00 09 10 
              8F 8A 44 51 
              53 80 0A EF 
              00 0A 8F 8A 
              50 60 6B 80 
              09 F0 00 0E 
              8F 50 45 61 
              80 0B F1 00 
              10 09 8F 8A 
              4A 57 7F 80 
              0A F2 00 13 
              10 8F 50 6F 
              6F 80 0B F3 
              00 C7 14 8F 
              8A 49 53 4D 
              80 0E F4 00 
              C7 03 19 0A 
              0E 8F 8A 43 
              5B 53 80 0C 
              F5 00 C7 0E 
              1C 08 8F 43 
              61 64 80 10 
              F6 00 C7 12 
              13 10 07 0A 
              06 8F 8A 51 
              50 61 80 0F 
              F7 00 C7 19 
              03 00 09 10 
              8F 8A 44 51 
              53 80 10 F8 
              00 C7 09 14 
              04 25 24 0E 
              8F 8A 45 47 
              6F 80 0C F9 
              00 C7 16 02 
              06 8F 42 6E 
              4E 80 0E FA 
              00 C7 00 1F 
              20 0B 8F 8A 
              47 62 7E 80 
              0D FB 00 C7 
              13 00 08 0A 
              8F 53 5C 4A 
              80 0A FC 00 
              C7 02 8F 46 
              5B 78 80 0A 
              FD 00 C7 05 
              8F 42 5A 52 
              80 0C FE 00 
              C7 08 20 0E 
              13 8F 53 7D 
              80 0A FF 00 
              C7 0E 8F 50 
              45 61 80 0C 
              00 01 C7 02 
              1F 8F 8A 4C 
              70 50 80 0B 
              01 01 C7 18 
              22 8F 54 45 
              4B 80 0E 02 
              01 C7 13 05 
              1D 03 15 8F 
              56 71 71 80 
              0D 03 01 C7 
              17 1A 03 8F 
              8A 58 58 64 
              80 0F 04 01 
              C7 0F 09 10 
              06 14 8F 8A 
              56 53 56 80 
              0C 05 01 C7 
              0F 02 07 8F 
              4D 74 4E 80 
              0C 06 01 C7 
              12 20 8F 8A 
              48 60 7C 80 
              0A 07 01 C7 
              08 8F 45 67 
              6D 80 0C 08 
              01 C7 08 23 
              02 8F 8A 7D 
              57 80 0B 09 
              01 C7 0E 03 
              25 8F 44 5B 
              80 0C 0A 01 
              C7 10 09 8F 
              8A 4A 57 7F 
              80 0C 0B 01 
              C7 17 11 8F 
              8A 54 70 73 
              80 0A 0C 01 
              C7 19 8F 53 
              69 5A 80 0B 
              0D 01 C7 10 
              0C 8F 56 62 
              76 80 0D 0E 
              01 C7 06 15 
              0E 1D 8F 52 
              5E 62 80 0A 
              0F 01 C7 03 
              8F 57 5D 5B 
              80 0D 10 01 
              C7 19 1C 02 
              8F 8A 42 65 
              44 80 0B 11 
              01 C7 13 10 
              8F 50 6F 6F 
              80 0B 12 01 
              C7 0D 13 8F 
              44 4D 5B 80 
              10 13 01 C7 
              08 13 22 1D 
              06 19 8F 8A 
              57 61 47 80 
              0A 14 01 C7 
              17 8F 44 41 
              4A 80 0C 15 
              01 C7 0F 06 
              16 8F 52 7D 
              7F 80 0B 16 
              01 C7 0C 23 
              8F 42 7F 76 
              80 0B 17 01 
              C7 0A 8F 8A 
              50 60 6B 80 
              09 18 01 C7 
              12 8F 49 75 
              80 0E 19 01 
              C7 00 1A 07 
              0B 18 8F 4F 
              7E 52 80 0C 
              1A 01 C7 07 
              0A 00 8F 4B 
              45 71 80 15 
              1B 01 BE 3F 
              0D 4F 6B 20 
              53 65 65 64 
              20 34 30 32 
              32 33 0D 80 
              00 -  -  -  	.db	$22,$01,$00,$bb,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$bb,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$34,$30,$32,$32,$33,$0d,$80,$0a,$03,$00,$14,$8f,$8a,$45,$71,$6b,$80,$0d,$04,$00,$03,$19,$0a,$0e,$8f,$8a,$43,$5d,$57,$80,$0b,$05,$00,$0e,$1c,$08,$8f,$4c,$56,$7d,$80,$0f,$06,$00,$12,$13,$10,$07,$0a,$06,$8f,$8a,$51,$4c,$77,$80,$0d,$07,$00,$19,$03,$00,$09,$10,$8f,$4c,$41,$73,$80,$0e,$08,$00,$09,$14,$04,$25,$24,$0e,$8f,$53,$54,$5b,$80,$0c,$09,$00,$16,$02,$06,$8f,$8a,$4f,$4f,$49,$80,$0c,$0a,$00,$00,$1f,$20,$0b,$8f,$50,$43,$64,$80,$0c,$0b,$00,$13,$00,$08,$0a,$8f,$42,$7d,$44,$80,$0a,$0c,$00,$02,$8f,$8a,$50,$74,$5b,$80,$08,$0d,$00,$05,$8f,$75,$78,$80,$0c,$0e,$00,$08,$20,$0e,$13,$8f,$4f,$53,$48,$80,$09,$0f,$00,$0e,$8f,$4f,$55,$5a,$80,$0a,$10,$00,$02,$1f,$8f,$53,$7a,$6c,$80,$0b,$11,$00,$18,$22,$8f,$8a,$54,$5d,$50,$80,$0e,$12,$00,$13,$05,$1d,$03,$15,$8f,$8a,$4b,$7b,$78,$80,$0b,$13,$00,$17,$1a,$03,$8f,$4b,$67,$5e,$80,$0e,$14,$00,$0f,$09,$10,$06,$14,$8f,$8a,$41,$41,$74,$80,$0b,$15,$00,$0f,$02,$07,$8f,$4b,$57,$5d,$80,$0b,$16,$00,$12,$20,$8f,$8a,$58,$58,$6f,$80,$0a,$17,$00,$08,$8f,$8a,$43,$43,$4d,$80,$0c,$18,$00,$08,$23,$02,$8f,$8a,$58,$55,$77,$80,$0b,$19,$00,$0e,$03,$25,$8f,$47,$66,$54,$80,$0b,$1a,$00,$10,$09,$8f,$8a,$49,$5b,$4a,$80,$0a,$1b,$00,$17,$11,$8f,$4e,$59,$5f,$80,$09,$1c,$00,$19,$8f,$50,$7a,$7f,$80,$0b,$1d,$00,$10,$0c,$8f,$8a,$49,$5b,$4c,$80,$0d,$1e,$00,$06,$15,$0e,$1d,$8f,$8a,$44,$75,$65,$80,$09,$1f,$00,$03,$8f,$8a,$41,$40,$80,$0b,$20,$00,$19,$1c,$02,$8f,$49,$61,$51,$80,$0a,$21,$00,$13,$10,$8f,$46,$62,$5e,$80,$0a,$22,$00,$0d,$13,$8f,$54,$5c,$6a,$80,$0e,$23,$00,$08,$13,$22,$1d,$06,$19,$8f,$49,$53,$6a,$80,$0a,$24,$00,$17,$8f,$8a,$55,$63,$5f,$80,$0b,$25,$00,$0f,$06,$16,$8f,$48,$6e,$4d,$80,$0b,$26,$00,$0c,$23,$8f,$8a,$57,$5f,$4b,$80,$09,$27,$00,$0a,$8f,$56,$73,$60,$80,$09,$28,$00,$12,$8f,$4e,$55,$43,$80,$0e,$29,$00,$00,$1a,$07,$0b,$18,$8f,$8a,$4e,$63,$66,$80,$0c,$2a,$00,$07,$0a,$00,$8f,$8a,$4d,$5a,$55,$80,$09,$2b,$00,$19,$8f,$56,$5a,$48,$80,$0c,$2c,$00,$19,$1c,$02,$8f,$8a,$50,$6b,$7b,$80,$0e,$2d,$00,$12,$13,$10,$07,$0a,$06,$8f,$51,$69,$7f,$80,$0a,$2e,$00,$0e,$8f,$8a,$50,$7d,$58,$80,$0c,$2f,$00,$16,$02,$06,$8f,$8a,$56,$7e,$7c,$80,$0f,$30,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$45,$47,$53,$80,$0a,$31,$00,$19,$8f,$8a,$4b,$7d,$42,$80,$0b,$32,$00,$17,$1a,$03,$8f,$4b,$67,$60,$80,$0a,$33,$00,$0d,$13,$8f,$4e,$7a,$5c,$80,$0b,$34,$00,$16,$02,$06,$8f,$4c,$41,$53,$80,$0b,$35,$00,$17,$11,$8f,$8a,$51,$49,$5a,$80,$0a,$36,$00,$0e,$1c,$08,$8f,$70,$5a,$80,$0a,$37,$00,$10,$0c,$8f,$52,$5b,$7a,$80,$0f,$38,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$47,$44,$50,$80,$0b,$39,$00,$12,$20,$8f,$8a,$46,$6e,$76,$80,$0e,$3a,$00,$09,$14,$04,$25,$24,$0e,$8f,$45,$57,$52,$80,$0a,$3b,$00,$0e,$8f,$8a,$52,$59,$63,$80,$0c,$3c,$00,$03,$19,$0a,$0e,$8f,$42,$4c,$65,$80,$0c,$3d,$00,$07,$0a,$00,$8f,$8a,$44,$7a,$6e,$80,$09,$3e,$00,$0e,$8f,$41,$70,$67,$80,$0b,$3f,$00,$17,$1a,$03,$8f,$55,$74,$41,$80,$0c,$40,$00,$17,$1a,$03,$8f,$8a,$46,$71,$7d,$80,$09,$41,$00,$05,$8f,$50,$58,$6f,$80,$0a,$42,$00,$12,$20,$8f,$8a,$75,$4b,$80,$0a,$43,$00,$14,$8f,$8a,$48,$57,$62,$80,$0e,$44,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$4c,$7e,$80,$0c,$45,$00,$19,$1c,$02,$8f,$8a,$48,$49,$75,$80,$0b,$46,$00,$0c,$23,$8f,$8a,$4d,$42,$67,$80,$0a,$47,$00,$10,$0c,$8f,$56,$6c,$76,$80,$0c,$48,$00,$07,$0a,$00,$8f,$8a,$47,$7c,$7d,$80,$09,$49,$00,$0a,$8f,$55,$7e,$63,$80,$0a,$4a,$00,$0a,$8f,$8a,$55,$4c,$75,$80,$0a,$4b,$00,$0a,$8f,$8a,$51,$69,$48,$80,$0c,$4c,$00,$0e,$03,$25,$8f,$8a,$41,$6b,$71,$80,$0a,$4d,$00,$02,$8f,$8a,$44,$75,$77,$80,$09,$4e,$00,$0a,$8f,$4a,$70,$4c,$80,$0e,$4f,$00,$0f,$09,$10,$06,$14,$8f,$8a,$49,$54,$77,$80,$0b,$50,$00,$0e,$1c,$08,$8f,$56,$6a,$7e,$80,$0a,$51,$00,$12,$8f,$8a,$4c,$44,$67,$80,$0a,$52,$00,$10,$0c,$8f,$51,$71,$54,$80,$0b,$53,$00,$0e,$03,$25,$8f,$57,$70,$53,$80,$0b,$54,$00,$19,$1c,$02,$8f,$45,$6b,$40,$80,$0f,$55,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$47,$73,$50,$80,$0b,$56,$00,$0e,$1c,$08,$8f,$50,$6b,$4c,$80,$0c,$57,$00,$19,$1c,$02,$8f,$8a,$54,$5e,$6d,$80,$0a,$58,$00,$13,$10,$8f,$41,$5e,$67,$80,$0b,$59,$00,$12,$20,$8f,$8a,$48,$73,$41,$80,$0e,$5a,$00,$00,$1a,$07,$0b,$18,$8f,$8a,$44,$77,$4e,$80,$0a,$5b,$00,$0e,$8f,$8a,$44,$61,$50,$80,$0d,$5c,$00,$08,$20,$0e,$13,$8f,$8a,$52,$61,$47,$80,$09,$5d,$00,$12,$8f,$4e,$74,$74,$80,$0a,$5e,$00,$02,$1f,$8f,$57,$6c,$60,$80,$0d,$5f,$00,$0f,$09,$10,$06,$14,$8f,$47,$79,$67,$80,$0b,$60,$00,$08,$20,$0e,$13,$8f,$8a,$68,$80,$0d,$61,$00,$13,$05,$1d,$03,$15,$8f,$54,$53,$6c,$80,$0a,$62,$00,$0d,$13,$8f,$44,$50,$73,$80,$0c,$63,$00,$00,$1f,$20,$0b,$8f,$47,$72,$57,$80,$0a,$64,$00,$03,$8f,$8a,$56,$50,$7d,$80,$0e,$65,$00,$0f,$09,$10,$06,$14,$8f,$8a,$53,$40,$72,$80,$0a,$66,$00,$10,$09,$8f,$56,$62,$68,$80,$09,$67,$00,$17,$8f,$55,$7a,$5d,$80,$0e,$68,$00,$13,$05,$1d,$03,$15,$8f,$8a,$47,$7c,$78,$80,$0c,$69,$00,$16,$02,$06,$8f,$8a,$50,$75,$41,$80,$0b,$6a,$00,$16,$02,$06,$8f,$4e,$46,$67,$80,$0a,$6b,$00,$13,$10,$8f,$54,$71,$49,$80,$0d,$6c,$00,$08,$20,$0e,$13,$8f,$8a,$49,$7e,$5e,$80,$0a,$6d,$00,$05,$8f,$8a,$4a,$43,$43,$80,$0b,$6e,$00,$0f,$06,$16,$8f,$52,$47,$62,$80,$0e,$6f,$00,$0f,$09,$10,$06,$14,$8f,$8a,$58,$41,$72,$80,$0b,$70,$00,$17,$1a,$03,$8f,$42,$72,$4f,$80,$09,$71,$00,$19,$8f,$56,$70,$4b,$80,$0b,$72,$00,$07,$0a,$00,$8f,$41,$5f,$6d,$80,$0b,$73,$00,$10,$0c,$8f,$8a,$49,$5c,$74,$80,$0a,$74,$00,$12,$8f,$8a,$54,$6c,$6a,$80,$0a,$75,$00,$0e,$8f,$8a,$56,$49,$4d,$80,$0b,$76,$00,$0e,$1c,$08,$8f,$4e,$7e,$69,$80,$0e,$77,$00,$08,$13,$22,$1d,$06,$19,$8f,$8a,$6c,$41,$80,$0b,$78,$00,$12,$20,$8f,$8a,$56,$47,$7a,$80,$0b,$79,$00,$12,$20,$8f,$8a,$43,$62,$51,$80,$09,$7a,$00,$03,$8f,$49,$43,$72,$80,$0a,$7b,$00,$0e,$8f,$8a,$54,$6d,$66,$80,$0c,$7c,$00,$0e,$03,$25,$8f,$8a,$42,$45,$63,$80,$09,$7d,$00,$0e,$8f,$43,$65,$65,$80,$0e,$7e,$00,$09,$14,$04,$25,$24,$0e,$8f,$46,$56,$71,$80,$0b,$7f,$00,$0e,$1c,$08,$8f,$53,$52,$5c,$80,$09,$80,$00,$0e,$8f,$57,$42,$78,$80,$0b,$81,$00,$07,$0a,$00,$8f,$56,$74,$42,$80,$0a,$82,$00,$08,$8f,$8a,$44,$50,$45,$80,$0f,$83,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$54,$69,$6f,$80,$09,$84,$00,$05,$8f,$55,$5b,$5b,$80,$09,$85,$00,$13,$10,$8f,$5e,$59,$80,$0b,$86,$00,$17,$1a,$03,$8f,$44,$60,$65,$80,$0b,$87,$00,$07,$0a,$00,$8f,$51,$76,$52,$80,$0c,$88,$00,$08,$23,$02,$8f,$8a,$55,$4b,$54,$80,$0b,$89,$00,$19,$1c,$02,$8f,$47,$67,$4d,$80,$0b,$8a,$00,$0f,$02,$07,$8f,$4d,$74,$4e,$80,$0a,$8b,$00,$18,$22,$8f,$54,$45,$4b,$80,$0b,$8c,$00,$07,$0a,$00,$8f,$41,$79,$73,$80,$0c,$8d,$00,$08,$23,$02,$8f,$8a,$42,$7e,$69,$80,$0f,$8e,$00,$12,$13,$10,$07,$0a,$06,$8f,$8a,$46,$6d,$66,$80,$0d,$8f,$00,$00,$1f,$20,$0b,$8f,$8a,$44,$4d,$63,$80,$0d,$90,$00,$13,$05,$1d,$03,$15,$8f,$56,$71,$71,$80,$0c,$91,$00,$0e,$03,$25,$8f,$8a,$4b,$54,$58,$80,$09,$92,$00,$14,$8f,$49,$7e,$7c,$80,$0f,$93,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$4c,$46,$4e,$80,$0b,$94,$00,$0e,$1c,$08,$8f,$4a,$6a,$66,$80,$0c,$95,$00,$0e,$03,$25,$8f,$8a,$55,$5a,$41,$80,$0f,$96,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$4e,$4f,$58,$80,$0b,$97,$00,$0f,$06,$16,$8f,$4f,$6a,$54,$80,$0d,$98,$00,$19,$03,$00,$09,$10,$8f,$48,$69,$69,$80,$09,$99,$00,$0a,$8f,$8a,$62,$7b,$80,$09,$9a,$00,$02,$8f,$50,$7d,$73,$80,$0c,$9b,$00,$08,$20,$0e,$13,$8f,$42,$4c,$73,$80,$0a,$9c,$00,$14,$8f,$8a,$54,$50,$7f,$80,$0d,$9d,$00,$00,$1a,$07,$0b,$18,$8f,$4f,$7e,$52,$80,$0b,$9e,$00,$13,$10,$8f,$8a,$45,$6e,$57,$80,$09,$9f,$00,$05,$8f,$56,$60,$48,$80,$0b,$a0,$00,$17,$1a,$03,$8f,$46,$65,$75,$80,$0a,$a1,$00,$0e,$8f,$8a,$49,$6e,$51,$80,$08,$a2,$00,$14,$8f,$60,$59,$80,$0a,$a3,$00,$02,$1f,$8f,$46,$6c,$52,$80,$08,$a4,$00,$12,$8f,$49,$75,$80,$09,$a5,$00,$17,$8f,$58,$4c,$7d,$80,$0b,$a6,$00,$0f,$06,$16,$8f,$55,$5a,$47,$80,$0c,$a7,$00,$17,$1a,$03,$8f,$8a,$58,$58,$64,$80,$0b,$a8,$00,$12,$20,$8f,$8a,$54,$5e,$4b,$80,$0b,$a9,$00,$10,$09,$8f,$8a,$46,$79,$5a,$80,$0b,$aa,$00,$10,$09,$8f,$8a,$45,$77,$5d,$80,$0f,$ab,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$48,$66,$5a,$80,$0b,$ac,$00,$03,$19,$0a,$0e,$8f,$76,$69,$80,$0a,$ad,$00,$14,$8f,$8a,$55,$51,$52,$80,$0c,$ae,$00,$0e,$03,$25,$8f,$8a,$44,$5a,$49,$80,$09,$af,$00,$03,$8f,$57,$5d,$5b,$80,$0a,$b0,$00,$10,$0c,$8f,$42,$55,$67,$80,$0b,$b1,$00,$08,$23,$02,$8f,$42,$6e,$52,$80,$0f,$b2,$00,$12,$13,$10,$07,$0a,$06,$8f,$8a,$51,$46,$6a,$80,$0f,$b3,$00,$12,$13,$10,$07,$0a,$06,$8f,$8a,$4b,$49,$77,$80,$09,$b4,$00,$17,$8f,$50,$4a,$56,$80,$09,$b5,$00,$0a,$8f,$8a,$7b,$79,$80,$0a,$b6,$00,$13,$10,$8f,$4e,$7e,$61,$80,$0b,$b7,$00,$07,$0a,$00,$8f,$4b,$45,$71,$80,$0c,$b8,$00,$06,$15,$0e,$1d,$8f,$4e,$5a,$48,$80,$0b,$b9,$00,$0c,$23,$8f,$8a,$54,$54,$5d,$80,$0a,$ba,$00,$0d,$13,$8f,$46,$58,$40,$80,$0f,$bb,$00,$12,$13,$10,$07,$0a,$06,$8f,$8a,$4f,$6e,$77,$80,$0a,$bc,$00,$0d,$13,$8f,$44,$4d,$5b,$80,$0b,$bd,$00,$16,$02,$06,$8f,$42,$6e,$4e,$80,$0f,$be,$00,$09,$14,$04,$25,$24,$0e,$8f,$8a,$45,$47,$6f,$80,$09,$bf,$00,$0a,$8f,$8a,$57,$5b,$80,$0e,$c0,$00,$12,$13,$10,$07,$0a,$06,$8f,$41,$4c,$63,$80,$0a,$c1,$00,$0c,$23,$8f,$42,$7f,$76,$80,$09,$c2,$00,$19,$8f,$4f,$72,$57,$80,$0b,$c3,$00,$0e,$1c,$08,$8f,$43,$61,$64,$80,$0b,$c4,$00,$10,$09,$8f,$8a,$54,$41,$40,$80,$0a,$c5,$00,$10,$0c,$8f,$56,$62,$76,$80,$0a,$c6,$00,$0e,$03,$25,$8f,$44,$5b,$80,$0c,$c7,$00,$19,$1c,$02,$8f,$8a,$42,$65,$44,$80,$0e,$c8,$00,$0f,$09,$10,$06,$14,$8f,$8a,$56,$53,$56,$80,$0b,$c9,$00,$02,$1f,$8f,$8a,$4c,$70,$50,$80,$09,$ca,$00,$08,$8f,$45,$67,$6d,$80,$0a,$cb,$00,$02,$8f,$8a,$56,$70,$43,$80,$0f,$cc,$00,$12,$13,$10,$07,$0a,$06,$8f,$8a,$51,$50,$61,$80,$0a,$cd,$00,$05,$8f,$8a,$4b,$5d,$4c,$80,$0c,$ce,$00,$06,$15,$0e,$1d,$8f,$52,$5e,$62,$80,$09,$cf,$00,$0e,$8f,$44,$59,$55,$80,$0b,$d0,$00,$13,$10,$8f,$8a,$48,$48,$6f,$80,$0c,$d1,$00,$08,$20,$0e,$13,$8f,$51,$58,$67,$80,$0f,$d2,$00,$08,$13,$22,$1d,$06,$19,$8f,$8a,$48,$5c,$60,$80,$0a,$d3,$00,$17,$11,$8f,$45,$70,$49,$80,$0a,$d4,$00,$14,$8f,$8a,$51,$59,$53,$80,$09,$d5,$00,$05,$8f,$42,$5a,$52,$80,$0c,$d6,$00,$03,$19,$0a,$0e,$8f,$56,$46,$4a,$80,$0b,$d7,$00,$12,$20,$8f,$8a,$48,$60,$7c,$80,$0a,$d8,$00,$14,$8f,$8a,$49,$53,$4d,$80,$0c,$d9,$00,$13,$00,$08,$0a,$8f,$53,$5c,$4a,$80,$0d,$da,$00,$03,$19,$0a,$0e,$8f,$8a,$43,$5b,$53,$80,$09,$db,$00,$19,$8f,$8a,$42,$65,$80,$0f,$dc,$00,$08,$13,$22,$1d,$06,$19,$8f,$8a,$57,$61,$47,$80,$0c,$dd,$00,$08,$23,$02,$8f,$8a,$46,$5c,$47,$80,$0c,$de,$00,$08,$23,$02,$8f,$8a,$53,$67,$54,$80,$0d,$df,$00,$08,$20,$0e,$13,$8f,$8a,$49,$40,$45,$80,$0a,$e0,$00,$19,$8f,$8a,$53,$72,$68,$80,$09,$e1,$00,$0e,$8f,$42,$4b,$4e,$80,$09,$e2,$00,$17,$8f,$44,$41,$4a,$80,$0b,$e3,$00,$08,$20,$0e,$13,$8f,$53,$7d,$80,$0b,$e4,$00,$08,$23,$02,$8f,$52,$54,$4b,$80,$0a,$e5,$00,$02,$8f,$8a,$43,$6e,$52,$80,$0b,$e6,$00,$10,$09,$8f,$8a,$45,$41,$50,$80,$0d,$e7,$00,$00,$1f,$20,$0b,$8f,$8a,$47,$62,$7e,$80,$0b,$e8,$00,$08,$23,$02,$8f,$8a,$7d,$57,$80,$0b,$e9,$00,$0f,$06,$16,$8f,$52,$7d,$7f,$80,$0b,$ea,$00,$17,$11,$8f,$8a,$54,$70,$73,$80,$0a,$eb,$00,$02,$8f,$8a,$44,$6f,$73,$80,$09,$ec,$00,$19,$8f,$53,$69,$5a,$80,$09,$ed,$00,$02,$8f,$46,$5b,$78,$80,$0e,$ee,$00,$19,$03,$00,$09,$10,$8f,$8a,$44,$51,$53,$80,$0a,$ef,$00,$0a,$8f,$8a,$50,$60,$6b,$80,$09,$f0,$00,$0e,$8f,$50,$45,$61,$80,$0b,$f1,$00,$10,$09,$8f,$8a,$4a,$57,$7f,$80,$0a,$f2,$00,$13,$10,$8f,$50,$6f,$6f,$80,$0b,$f3,$00,$c7,$14,$8f,$8a,$49,$53,$4d,$80,$0e,$f4,$00,$c7,$03,$19,$0a,$0e,$8f,$8a,$43,$5b,$53,$80,$0c,$f5,$00,$c7,$0e,$1c,$08,$8f,$43,$61,$64,$80,$10,$f6,$00,$c7,$12,$13,$10,$07,$0a,$06,$8f,$8a,$51,$50,$61,$80,$0f,$f7,$00,$c7,$19,$03,$00,$09,$10,$8f,$8a,$44,$51,$53,$80,$10,$f8,$00,$c7,$09,$14,$04,$25,$24,$0e,$8f,$8a,$45,$47,$6f,$80,$0c,$f9,$00,$c7,$16,$02,$06,$8f,$42,$6e,$4e,$80,$0e,$fa,$00,$c7,$00,$1f,$20,$0b,$8f,$8a,$47,$62,$7e,$80,$0d,$fb,$00,$c7,$13,$00,$08,$0a,$8f,$53,$5c,$4a,$80,$0a,$fc,$00,$c7,$02,$8f,$46,$5b,$78,$80,$0a,$fd,$00,$c7,$05,$8f,$42,$5a,$52,$80,$0c,$fe,$00,$c7,$08,$20,$0e,$13,$8f,$53,$7d,$80,$0a,$ff,$00,$c7,$0e,$8f,$50,$45,$61,$80,$0c,$00,$01,$c7,$02,$1f,$8f,$8a,$4c,$70,$50,$80,$0b,$01,$01,$c7,$18,$22,$8f,$54,$45,$4b,$80,$0e,$02,$01,$c7,$13,$05,$1d,$03,$15,$8f,$56,$71,$71,$80,$0d,$03,$01,$c7,$17,$1a,$03,$8f,$8a,$58,$58,$64,$80,$0f,$04,$01,$c7,$0f,$09,$10,$06,$14,$8f,$8a,$56,$53,$56,$80,$0c,$05,$01,$c7,$0f,$02,$07,$8f,$4d,$74,$4e,$80,$0c,$06,$01,$c7,$12,$20,$8f,$8a,$48,$60,$7c,$80,$0a,$07,$01,$c7,$08,$8f,$45,$67,$6d,$80,$0c,$08,$01,$c7,$08,$23,$02,$8f,$8a,$7d,$57,$80,$0b,$09,$01,$c7,$0e,$03,$25,$8f,$44,$5b,$80,$0c,$0a,$01,$c7,$10,$09,$8f,$8a,$4a,$57,$7f,$80,$0c,$0b,$01,$c7,$17,$11,$8f,$8a,$54,$70,$73,$80,$0a,$0c,$01,$c7,$19,$8f,$53,$69,$5a,$80,$0b,$0d,$01,$c7,$10,$0c,$8f,$56,$62,$76,$80,$0d,$0e,$01,$c7,$06,$15,$0e,$1d,$8f,$52,$5e,$62,$80,$0a,$0f,$01,$c7,$03,$8f,$57,$5d,$5b,$80,$0d,$10,$01,$c7,$19,$1c,$02,$8f,$8a,$42,$65,$44,$80,$0b,$11,$01,$c7,$13,$10,$8f,$50,$6f,$6f,$80,$0b,$12,$01,$c7,$0d,$13,$8f,$44,$4d,$5b,$80,$10,$13,$01,$c7,$08,$13,$22,$1d,$06,$19,$8f,$8a,$57,$61,$47,$80,$0a,$14,$01,$c7,$17,$8f,$44,$41,$4a,$80,$0c,$15,$01,$c7,$0f,$06,$16,$8f,$52,$7d,$7f,$80,$0b,$16,$01,$c7,$0c,$23,$8f,$42,$7f,$76,$80,$0b,$17,$01,$c7,$0a,$8f,$8a,$50,$60,$6b,$80,$09,$18,$01,$c7,$12,$8f,$49,$75,$80,$0e,$19,$01,$c7,$00,$1a,$07,$0b,$18,$8f,$4f,$7e,$52,$80,$0c,$1a,$01,$c7,$07,$0a,$00,$8f,$4b,$45,$71,$80,$15,$1b,$01,$be,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$34,$30,$32,$32,$33,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1CA9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2CA9 -  -  -  -  EndTestInstance:
   18 00:2CA9 -  -  -  -  		
   19 00:2CA9 -  -  -  -  ; ***************************************************************************************
   20 00:2CA9 -  -  -  -  ;
   21 00:2CA9 -  -  -  -  ;									Changes and Updates
   22 00:2CA9 -  -  -  -  ;
   23 00:2CA9 -  -  -  -  ; ***************************************************************************************
   24 00:2CA9 -  -  -  -  ;
   25 00:2CA9 -  -  -  -  ;		Date			Notes
   26 00:2CA9 -  -  -  -  ;		==== 			=====
   27 00:2CA9 -  -  -  -  ;
   28 00:2CA9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:2CA9 -  -  -  -  FinalAddress:
