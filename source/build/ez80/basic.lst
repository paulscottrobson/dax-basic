    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DATA = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DATA
   35 00:0000             	ld a,ERRID_DATA
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIM = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIM
   42 00:0000             	ld a,ERRID_DIM
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DISABLED = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DISABLED
   49 00:0000             	ld a,ERRID_DISABLED
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_DIVZERO = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_DIVZERO
   56 00:0000             	ld a,ERRID_DIVZERO
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_GOSUB = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_GOSUB
   63 00:0000             	ld a,ERRID_GOSUB
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_INDEX = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_INDEX
   70 00:0000             	ld a,ERRID_INDEX
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_LINENO = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_LINENO
   77 00:0000             	ld a,ERRID_LINENO
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_MEMORY = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_MEMORY
   84 00:0000             	ld a,ERRID_MEMORY
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NEXT = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NEXT
   91 00:0000             	ld a,ERRID_NEXT
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOCOMMA = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   98 00:0000             	ld a,ERRID_NOCOMMA
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NODOLLAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NODOLLAR
  105 00:0000             	ld a,ERRID_NODOLLAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOLBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  112 00:0000             	ld a,ERRID_NOLBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOPROC = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOPROC
  119 00:0000             	ld a,ERRID_NOPROC
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NORBRACKET = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  126 00:0000             	ld a,ERRID_NORBRACKET
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_NOTREF = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_NOTREF
  133 00:0000             	ld a,ERRID_NOTREF
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PARAM = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PARAM
  140 00:0000             	ld a,ERRID_PARAM
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_PROC = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_PROC
  147 00:0000             	ld a,ERRID_PROC
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_REPEAT = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_REPEAT
  154 00:0000             	ld a,ERRID_REPEAT
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STACK = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STACK
  161 00:0000             	ld a,ERRID_STACK
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_STOP = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_STOP
  168 00:0000             	ld a,ERRID_STOP
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_SYNTAX = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_SYNTAX
  175 00:0000             	ld a,ERRID_SYNTAX
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_TODO = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_TODO
  182 00:0000             	ld a,ERRID_TODO
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
  186 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 26
  187 00:0000 -  -  -  -  
  188 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  189 00:0000             	ld a,ERRID_UNKNOWNVAR
  190 00:0000             	jp ErrorHandler
  191 00:0000             #endmacro
  192 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:0000             		ld 		sp,$BFFF
   41 00:0000             #endif
   42 00:0000             
   43 00:0000             #endif
   44 00:0000 CD 2A 15 00 		call 	SYSInitialise
   45 00:0004 11 00 1C 00 		ld 		de,TestInstance
   46 00:0008 21 B3 2C 00 		ld 		hl,EndTestInstance
   47 00:000C CD EB 0B 00 		call 	SetCurrentInstance
   48 00:0010 -  -  -  -  
   49 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:0012 32 64 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:0016 -  -  -  -  		
   52 00:0016 C3 8A 03 00 		jp 		Command_RUN
   53 00:001A -  -  -  -  
   54 00:001A -  -  -  -  WarmStart:		
   55 00:001A 3E 2A -  -  		ld 		a,'*'
   56 00:001C CD 2C 15 00 		call 	SYSPrintChar
   57 00:0020 CD 2B 15 00 		call 	SYSTerminate
   58 00:0024 -  -  -  -  
   59 00:0024 -  -  -  -  Unimplemented:
   60 00:0024 3E 06 C3 02 
              05 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:002A -  -  -  -  Int32DivZeroHandler:
   62 00:002A 3E 07 C3 02 
              05 00 -  -  		ERR_DIVZERO
   63 00:0030 -  -  -  -  
   64 00:0030 -  -  -  -  ; ***************************************************************************************
   65 00:0030 -  -  -  -  ;
   66 00:0030 -  -  -  -  ;									Changes and Updates
   67 00:0030 -  -  -  -  ;
   68 00:0030 -  -  -  -  ; ***************************************************************************************
   69 00:0030 -  -  -  -  ;
   70 00:0030 -  -  -  -  ;		Date			Notes
   71 00:0030 -  -  -  -  ;		==== 			=====
   72 00:0030 -  -  -  -  ;
   73 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  
   78 00:005C -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  		
   81 00:0060 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:0060 00 00 00 00 		.dw 	0,0
   83 00:0064 -  -  -  -  
   84 00:0064 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:0064 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006A -  -  -  -  
   87 00:006A -  -  -  -  AConvert: 									; used for address conversions.
   88 00:006A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:0070 -  -  -  -  		
   90 00:0070 -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:0080 -  -  -  -  
   93 00:0080 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:0080 00 00 -  -  		.dw 	0
   95 00:0082 -  -  -  -  
   96 00:0082 -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:0082 00 00 -  -  		.dw 	0 
   98 00:0084 -  -  -  -  
   99 00:0084 -  -  -  -  ReadDataPointer: 							; pointer for READ/DATA.
  100 00:0084 00 00 00 00 		.dw 	0,0
  101 00:0088 -  -  -  -  
  102 00:0088 -  -  -  -  DataScanRequired: 							; flag set when scan forward for DATA required.
  103 00:0088 00 00 -  -  		.dw 	0		
  104 00:008A -  -  -  -  
  105 00:008A -  -  -  -  ; ***************************************************************************************
  106 00:008A -  -  -  -  ;
  107 00:008A -  -  -  -  ;									Variable Information
  108 00:008A -  -  -  -  ;
  109 00:008A -  -  -  -  ; ***************************************************************************************
  110 00:008A -  -  -  -  
  111 00:008A -  -  -  -  VarNameStart: 								; first byte of name
  112 00:008A 00 00 00 00 		.dw 	0,0
  113 00:008E -  -  -  -  VarHash: 									; name hash value
  114 00:008E 00 00 -  -  		.dw 	0		
  115 00:0090 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  116 00:0090 00 00 00 00 		.dw 	0,0
  117 00:0094 -  -  -  -  		
  118 00:0094 -  -  -  -  ; ***************************************************************************************
  119 00:0094 -  -  -  -  ;
  120 00:0094 -  -  -  -  ;										  Buffers
  121 00:0094 -  -  -  -  ;
  122 00:0094 -  -  -  -  ; ***************************************************************************************
  123 00:0094 -  -  -  -  
  124 00:0094 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  125 00:0094 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  126 00:00A4 -  -  -  -  
  127 00:00A4 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  128 00:00A4 00 00 -  -  		.dw 	0
  129 00:00A6 -  -  -  -  
  130 00:00A6 -  -  -  -  ConvertBuffer: 								; general usage for int/hex conversions.
  131 00:00A6 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  132 00:00B6 -  -  -  -  
  133 00:00B6 -  -  -  -  ; ***************************************************************************************
  134 00:00B6 -  -  -  -  ;
  135 00:00B6 -  -  -  -  ;								Tokenising/Detokenising
  136 00:00B6 -  -  -  -  ;
  137 00:00B6 -  -  -  -  ; ***************************************************************************************
  138 00:00B6 -  -  -  -  
  139 00:00B6 -  -  -  -  TokenBuffer: 								; buffer to use
  140 00:00B6 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	256
  141 00:01B6 -  -  -  -  
  142 00:01B6 -  -  -  -  TWPointer;
  143 00:01B6 00 00 00 00 		.dw 	0,0 						; next free slot.
  144 00:01BA -  -  -  -  
  145 00:01BA -  -  -  -  ; ***************************************************************************************
  146 00:01BA -  -  -  -  ;
  147 00:01BA -  -  -  -  ;									Changes and Updates
  148 00:01BA -  -  -  -  ;
  149 00:01BA -  -  -  -  ; ***************************************************************************************
  150 00:01BA -  -  -  -  ;
  151 00:01BA -  -  -  -  ;		Date			Notes
  152 00:01BA -  -  -  -  ;		==== 			=====
  153 00:01BA -  -  -  -  ;
  154 00:01BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:01BA -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:01BA -  -  -  -  ; ***************************************************************************************
    2 00:01BA -  -  -  -  ; ***************************************************************************************
    3 00:01BA -  -  -  -  ;
    4 00:01BA -  -  -  -  ;		Name : 		assert.asm
    5 00:01BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01BA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01BA -  -  -  -  ;		Reviewed :	No
    8 00:01BA -  -  -  -  ;		Purpose :	Assert command
    9 00:01BA -  -  -  -  ;
   10 00:01BA -  -  -  -  ; ***************************************************************************************
   11 00:01BA -  -  -  -  ; ***************************************************************************************
   12 00:01BA -  -  -  -  
   13 00:01BA -  -  -  -  ; ***************************************************************************************
   14 00:01BA -  -  -  -  ;
   15 00:01BA -  -  -  -  ;									ASSERT command
   16 00:01BA -  -  -  -  ;
   17 00:01BA -  -  -  -  ; ***************************************************************************************
   18 00:01BA -  -  -  -  
   19 00:01BA -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:01BA CD 35 07 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:01BE 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:01C4 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:01C5 3E 01 C3 02 
              05 00 -  -  		ERR_ASSERT
   24 00:01CB -  -  -  -  
   25 00:01CB -  -  -  -  ; ***************************************************************************************
   26 00:01CB -  -  -  -  ;
   27 00:01CB -  -  -  -  ;									Changes and Updates
   28 00:01CB -  -  -  -  ;
   29 00:01CB -  -  -  -  ; ***************************************************************************************
   30 00:01CB -  -  -  -  ;
   31 00:01CB -  -  -  -  ;		Date			Notes
   32 00:01CB -  -  -  -  ;		==== 			=====
   33 00:01CB -  -  -  -  ;
   34 00:01CB -  -  -  -  ; ***************************************************************************************
   35 00:01CB -  -  -  -  		
Listing for file "_build.asm"
   15 00:01CB -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:01CB -  -  -  -  ; ***************************************************************************************
    2 00:01CB -  -  -  -  ; ***************************************************************************************
    3 00:01CB -  -  -  -  ;
    4 00:01CB -  -  -  -  ;		Name : 		badcommands.asm
    5 00:01CB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01CB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01CB -  -  -  -  ;		Reviewed :	No
    8 00:01CB -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:01CB -  -  -  -  ;
   10 00:01CB -  -  -  -  ; ***************************************************************************************
   11 00:01CB -  -  -  -  ; ***************************************************************************************
   12 00:01CB -  -  -  -  
   13 00:01CB -  -  -  -  BadCmd_Def: 		;; [def]
   14 00:01CB -  -  -  -  BadCmd_Data: 		;; [data]
   15 00:01CB -  -  -  -  BadCmd_Then: 		;; [then]
   16 00:01CB -  -  -  -  BadCmd_RBracket: 	;; [)]
   17 00:01CB -  -  -  -  BadCmd_LSBracket: 	;; [[]
   18 00:01CB -  -  -  -  BadCmd_RSBracket: 	;; []]
   19 00:01CB -  -  -  -  BadCmd_Comma: 		;; [,]
   20 00:01CB -  -  -  -  BadCmd_Comma: 		;; [~]
   21 00:01CB -  -  -  -  BadCmd_SemiColon: 	;; [;]
   22 00:01CB -  -  -  -  BadCmd_To: 			;; [to]
   23 00:01CB -  -  -  -  BadCmd_Step: 		;; [step]
   24 00:01CB C3 6C 05 00 		jp 		SyntaxError
   25 00:01CF -  -  -  -  
   26 00:01CF -  -  -  -  ; ***************************************************************************************
   27 00:01CF -  -  -  -  ;
   28 00:01CF -  -  -  -  ;									Changes and Updates
   29 00:01CF -  -  -  -  ;
   30 00:01CF -  -  -  -  ; ***************************************************************************************
   31 00:01CF -  -  -  -  ;
   32 00:01CF -  -  -  -  ;		Date			Notes
   33 00:01CF -  -  -  -  ;		==== 			=====
   34 00:01CF -  -  -  -  ;
   35 00:01CF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:01CF -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:01CF -  -  -  -  ; ***************************************************************************************
    2 00:01CF -  -  -  -  ; ***************************************************************************************
    3 00:01CF -  -  -  -  ;
    4 00:01CF -  -  -  -  ;		Name : 		colon.asm
    5 00:01CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01CF -  -  -  -  ;		Date : 		3rd May 2022
    7 00:01CF -  -  -  -  ;		Reviewed :	No
    8 00:01CF -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:01CF -  -  -  -  ;
   10 00:01CF -  -  -  -  ; ***************************************************************************************
   11 00:01CF -  -  -  -  ; ***************************************************************************************
   12 00:01CF -  -  -  -  
   13 00:01CF -  -  -  -  ; ***************************************************************************************
   14 00:01CF -  -  -  -  ;
   15 00:01CF -  -  -  -  ;								Colon command, this is ignored.
   16 00:01CF -  -  -  -  ;
   17 00:01CF -  -  -  -  ; ***************************************************************************************
   18 00:01CF -  -  -  -  
   19 00:01CF -  -  -  -  Command_Colon: 	;; [:]
   20 00:01CF C9 -  -  -  		ret
   21 00:01D0 -  -  -  -  
   22 00:01D0 -  -  -  -  ; ***************************************************************************************
   23 00:01D0 -  -  -  -  ;
   24 00:01D0 -  -  -  -  ;									Changes and Updates
   25 00:01D0 -  -  -  -  ;
   26 00:01D0 -  -  -  -  ; ***************************************************************************************
   27 00:01D0 -  -  -  -  ;
   28 00:01D0 -  -  -  -  ;		Date			Notes
   29 00:01D0 -  -  -  -  ;		==== 			=====
   30 00:01D0 -  -  -  -  ;
   31 00:01D0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:01D0 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:01D0 -  -  -  -  ; ***************************************************************************************
    2 00:01D0 -  -  -  -  ; ***************************************************************************************
    3 00:01D0 -  -  -  -  ;
    4 00:01D0 -  -  -  -  ;		Name : 		dim.asm
    5 00:01D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01D0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:01D0 -  -  -  -  ;		Reviewed :	No
    8 00:01D0 -  -  -  -  ;		Purpose :	Dim command
    9 00:01D0 -  -  -  -  ;
   10 00:01D0 -  -  -  -  ; ***************************************************************************************
   11 00:01D0 -  -  -  -  ; ***************************************************************************************
   12 00:01D0 -  -  -  -  
   13 00:01D0 -  -  -  -  ; ***************************************************************************************
   14 00:01D0 -  -  -  -  ;
   15 00:01D0 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:01D0 -  -  -  -  ;	
   17 00:01D0 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:01D0 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:01D0 -  -  -  -  ;								(can be comma chained)
   20 00:01D0 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:01D0 -  -  -  -  ;
   22 00:01D0 -  -  -  -  ; ***************************************************************************************
   23 00:01D0 -  -  -  -  
   24 00:01D0 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:01D0 -  -  -  -  		;
   26 00:01D0 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:01D0 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:01D0 -  -  -  -  		;
   29 00:01D0 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:01D2 D1 -  -  -  		pop 	de
   31 00:01D3 -  -  -  -  		;
   32 00:01D3 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:01D6 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:01D8 D2 6C 05 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:01DC -  -  -  -  _DISkip:
   36 00:01DC DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:01DE DD 7E 00 -  		ld 		a,(ix+0)
   38 00:01E1 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:01E3 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:01E5 -  -  -  -  		;
   41 00:01E5 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:01E8 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:01EA F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:01EB CC 4C 02 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:01EF F1 -  -  -  		pop 	af
   46 00:01F0 C4 04 02 00 		call 	nz,DimensionAllocate
   47 00:01F4 -  -  -  -  		;
   48 00:01F4 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:01F7 FE A6 -  -  		cp 		KWD_COMMA
   50 00:01F9 C0 -  -  -  		ret 	nz
   51 00:01FA DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:01FC 18 D2 -  -  		jr 		Command_DIM
   53 00:01FE -  -  -  -  
   54 00:01FE -  -  -  -  _CDError:
   55 00:01FE 3E 05 C3 02 
              05 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:0204 -  -  -  -  
   57 00:0204 -  -  -  -  ; ***************************************************************************************
   58 00:0204 -  -  -  -  ;
   59 00:0204 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:0204 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:0204 -  -  -  -  ;
   62 00:0204 -  -  -  -  ; ***************************************************************************************
   63 00:0204 -  -  -  -  
   64 00:0204 -  -  -  -  DimensionAllocate:
   65 00:0204 D5 -  -  -  		push 	de 							; save start on stack
   66 00:0205 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:0207 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:0209 32 80 00 00 		ld 		(AllowAutoCreate),a
   69 00:020D CD BB 0E 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:0211 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:0213 28 E9 -  -  		jr 		z,_CDError
   72 00:0215 CB 41 -  -  		bit 	CIsString,c
   73 00:0217 20 E5 -  -  		jr 		nz,_CDError
   74 00:0219 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:021B E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:021C 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:021E CD F6 04 00 		call 	CheckNextA 					; check for [
   78 00:0222 CD 35 07 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:0226 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:0228 CD F6 04 00 		call 	CheckNextA 					; check for ]
   81 00:022C 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:022D 7C -  -  -  		ld 		a,h
   83 00:022E B5 -  -  -  		or 		l
   84 00:022F 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:0231 D9 -  -  -  		exx
   86 00:0232 23 -  -  -  		inc 	hl
   87 00:0233 D9 -  -  -  		exx
   88 00:0234 -  -  -  -  _DANoCarry:
   89 00:0234 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:0235 7C -  -  -  		ld 		a,h
   91 00:0236 B5 -  -  -  		or 		l
   92 00:0237 D9 -  -  -  		exx
   93 00:0238 20 C4 -  -  		jr 		nz,_CDError
   94 00:023A CD 74 0B 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:023E EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:023F E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:0240 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:0246 AF -  -  -  		xor 	a 							; autocreate off
   99 00:0247 32 80 00 00 		ld 		(AllowAutoCreate),a
  100 00:024B C9 -  -  -  		ret
  101 00:024C -  -  -  -  
  102 00:024C -  -  -  -  ; ***************************************************************************************
  103 00:024C -  -  -  -  ;
  104 00:024C -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:024C -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:024C -  -  -  -  ;
  107 00:024C -  -  -  -  ; ***************************************************************************************
  108 00:024C -  -  -  -  
  109 00:024C -  -  -  -  DimensionArray:
  110 00:024C D5 -  -  -  		push 	de 							; save start on stack.
  111 00:024D -  -  -  -  		;
  112 00:024D CD 35 07 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:0251 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:0252 E6 FC -  -  		and 	$FC
  115 00:0254 D9 -  -  -  		exx
  116 00:0255 B4 -  -  -  		or 		h
  117 00:0256 B5 -  -  -  		or 		l
  118 00:0257 D9 -  -  -  		exx
  119 00:0258 20 A4 -  -  		jr 		nz,_CDError
  120 00:025A -  -  -  -  		;
  121 00:025A DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:025C E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:025D -  -  -  -  		;
  124 00:025D CD 48 0F 00 		call 	VariableInformation 		; get information about this array
  125 00:0261 CD 84 0F 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:0265 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:0267 -  -  -  -  		;
  128 00:0267 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:0268 E5 -  -  -  		push 	hl
  130 00:0269 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:026A 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:026B 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:026C 29 -  -  -  		add 	hl,hl
  134 00:026D CD 78 0E 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:0271 -  -  -  -  		;
  136 00:0271 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:0272 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:0276 09 -  -  -  		add 	hl,bc
  139 00:0277 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:027D DD E1 -  -  		pop 	ix 							; restore end position
  141 00:027F C9 -  -  -  		ret		
  142 00:0280 -  -  -  -  
  143 00:0280 -  -  -  -  
  144 00:0280 -  -  -  -  ; ***************************************************************************************
  145 00:0280 -  -  -  -  ;
  146 00:0280 -  -  -  -  ;									Changes and Updates
  147 00:0280 -  -  -  -  ;
  148 00:0280 -  -  -  -  ; ***************************************************************************************
  149 00:0280 -  -  -  -  ;
  150 00:0280 -  -  -  -  ;		Date			Notes
  151 00:0280 -  -  -  -  ;		==== 			=====
  152 00:0280 -  -  -  -  ;
  153 00:0280 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:0280 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:0280 -  -  -  -  ; ***************************************************************************************
    2 00:0280 -  -  -  -  ; ***************************************************************************************
    3 00:0280 -  -  -  -  ;
    4 00:0280 -  -  -  -  ;		Name : 		end.asm
    5 00:0280 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0280 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0280 -  -  -  -  ;		Reviewed :	No
    8 00:0280 -  -  -  -  ;		Purpose :	End command
    9 00:0280 -  -  -  -  ;
   10 00:0280 -  -  -  -  ; ***************************************************************************************
   11 00:0280 -  -  -  -  ; ***************************************************************************************
   12 00:0280 -  -  -  -  
   13 00:0280 -  -  -  -  ; ***************************************************************************************
   14 00:0280 -  -  -  -  ;
   15 00:0280 -  -  -  -  ;										END command
   16 00:0280 -  -  -  -  ;
   17 00:0280 -  -  -  -  ; ***************************************************************************************
   18 00:0280 -  -  -  -  
   19 00:0280 -  -  -  -  Command_END: 	;; [end]
   20 00:0280 3E 00 C3 02 
              05 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:0286 -  -  -  -  
   22 00:0286 -  -  -  -  ; ***************************************************************************************
   23 00:0286 -  -  -  -  ;
   24 00:0286 -  -  -  -  ;									Changes and Updates
   25 00:0286 -  -  -  -  ;
   26 00:0286 -  -  -  -  ; ***************************************************************************************
   27 00:0286 -  -  -  -  ;
   28 00:0286 -  -  -  -  ;		Date			Notes
   29 00:0286 -  -  -  -  ;		==== 			=====
   30 00:0286 -  -  -  -  ;
   31 00:0286 -  -  -  -  ; ***************************************************************************************
   32 00:0286 -  -  -  -  		
Listing for file "_build.asm"
   19 00:0286 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:0286 -  -  -  -  ; ***************************************************************************************
    2 00:0286 -  -  -  -  ; ***************************************************************************************
    3 00:0286 -  -  -  -  ;
    4 00:0286 -  -  -  -  ;		Name : 		endofline.asm
    5 00:0286 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0286 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0286 -  -  -  -  ;		Reviewed :	None
    8 00:0286 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:0286 -  -  -  -  ;
   10 00:0286 -  -  -  -  ; ***************************************************************************************
   11 00:0286 -  -  -  -  ; ***************************************************************************************
   12 00:0286 -  -  -  -  
   13 00:0286 -  -  -  -  ; ***************************************************************************************
   14 00:0286 -  -  -  -  ;
   15 00:0286 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:0286 -  -  -  -  ;
   17 00:0286 -  -  -  -  ; ***************************************************************************************
   18 00:0286 -  -  -  -  
   19 00:0286 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:0286 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:028B 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:028F DD 5E 00 -  		ld 		e,(ix+0)
   23 00:0292 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:0294 -  -  -  -  		;
   25 00:0294 ED 7B 60 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:0299 C3 9D 03 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:029D -  -  -  -  
   28 00:029D -  -  -  -  ; ***************************************************************************************
   29 00:029D -  -  -  -  ;
   30 00:029D -  -  -  -  ;									Changes and Updates
   31 00:029D -  -  -  -  ;
   32 00:029D -  -  -  -  ; ***************************************************************************************
   33 00:029D -  -  -  -  ;
   34 00:029D -  -  -  -  ;		Date			Notes
   35 00:029D -  -  -  -  ;		==== 			=====
   36 00:029D -  -  -  -  ;
   37 00:029D -  -  -  -  ; ***************************************************************************************
   38 00:029D -  -  -  -  		
Listing for file "_build.asm"
   20 00:029D -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:029D -  -  -  -  ; ***************************************************************************************
    2 00:029D -  -  -  -  ; ***************************************************************************************
    3 00:029D -  -  -  -  ;
    4 00:029D -  -  -  -  ;		Name : 		let.asm
    5 00:029D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:029D -  -  -  -  ;		Date : 		4th June 2022
    7 00:029D -  -  -  -  ;		Reviewed :	No
    8 00:029D -  -  -  -  ;		Purpose :	Assignment statement
    9 00:029D -  -  -  -  ;
   10 00:029D -  -  -  -  ; ***************************************************************************************
   11 00:029D -  -  -  -  ; ***************************************************************************************
   12 00:029D -  -  -  -  
   13 00:029D -  -  -  -  ; ***************************************************************************************
   14 00:029D -  -  -  -  ;
   15 00:029D -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:029D -  -  -  -  ;
   17 00:029D -  -  -  -  ; ***************************************************************************************
   18 00:029D -  -  -  -  
   19 00:029D -  -  -  -  Command_LET: 	;; [let]
   20 00:029D DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:02A0 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:02A2 28 2F -  -  		jr 		z,_CLString
   23 00:02A4 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:02A6 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:02A8 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:02AA 32 80 00 00 		ld 		(AllowAutoCreate),a
   27 00:02AE -  -  -  -  _CLNoAuto:
   28 00:02AE 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:02B0 CD B7 06 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:02B4 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:02B6 CA 6C 05 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:02BA E5 -  -  -  		push 	hl 							; save address on stack
   33 00:02BB C5 -  -  -  		push 	bc 							; save type on stack
   34 00:02BC AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:02BD 32 80 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:02C1 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:02C3 CD F6 04 00 		call 	CheckNextA
   38 00:02C7 -  -  -  -  
   39 00:02C7 CD 2D 07 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:02CB -  -  -  -  
   41 00:02CB D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:02CC 43 -  -  -  		ld 		b,e 						
   43 00:02CD D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:02CE -  -  -  -  		;
   45 00:02CE -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:02CE -  -  -  -  		;
   47 00:02CE CD EC 02 00 		call 	WriteHLToDE
   48 00:02D2 C9 -  -  -  		ret
   49 00:02D3 -  -  -  -  		;
   50 00:02D3 -  -  -  -  		; 		String assignment code.
   51 00:02D3 -  -  -  -  		;
   52 00:02D3 -  -  -  -  _CLString:
   53 00:02D3 CD 1E 07 00 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:02D7 E5 -  -  -  		push 	hl 							; save target expression
   55 00:02D8 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:02DA CD F6 04 00 		call 	CheckNextA
   57 00:02DE CD 4F 07 00 		call 	EvaluateString 				; get the thing to copy
   58 00:02E2 D1 -  -  -  		pop 	de 							; target in DE.
   59 00:02E3 -  -  -  -  _CLCopy:
   60 00:02E3 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:02E4 12 -  -  -  		ld 		(de),a
   62 00:02E5 23 -  -  -  		inc 	hl
   63 00:02E6 13 -  -  -  		inc 	de
   64 00:02E7 FE 20 -  -  		cp 		$20 						; until control character
   65 00:02E9 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:02EB C9 -  -  -  		ret
   67 00:02EC -  -  -  -  
   68 00:02EC -  -  -  -  ; ***************************************************************************************
   69 00:02EC -  -  -  -  ;
   70 00:02EC -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:02EC -  -  -  -  ;
   72 00:02EC -  -  -  -  ; ***************************************************************************************
   73 00:02EC -  -  -  -  
   74 00:02EC -  -  -  -  WriteHLToDE:
   75 00:02EC CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:02EE C2 60 05 00 		jp 		nz,TypeMismatch
   77 00:02F2 -  -  -  -  		;
   78 00:02F2 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:02F2 -  -  -  -  		;		
   80 00:02F2 -  -  -  -  _WHDWriteNumber:
   81 00:02F2 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:02F3 D9 -  -  -  		exx
   83 00:02F4 EB -  -  -  		ex 		de,hl
   84 00:02F5 D9 -  -  -  		exx
   85 00:02F6 -  -  -  -  
   86 00:02F6 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:02F7 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:02F8 72 -  -  -  		ld 		(hl),d
   89 00:02F9 23 -  -  -  		inc 	hl
   90 00:02FA E5 -  -  -  		push 	hl
   91 00:02FB D9 -  -  -  		exx
   92 00:02FC E1 -  -  -  		pop 	hl
   93 00:02FD 73 -  -  -  		ld 		(hl),e
   94 00:02FE 23 -  -  -  		inc 	hl
   95 00:02FF 72 -  -  -  		ld 		(hl),d
   96 00:0300 D9 -  -  -  		exx
   97 00:0301 -  -  -  -  
   98 00:0301 C9 -  -  -  		ret
   99 00:0302 -  -  -  -  
  100 00:0302 -  -  -  -  ; ***************************************************************************************
  101 00:0302 -  -  -  -  ;
  102 00:0302 -  -  -  -  ;									Changes and Updates
  103 00:0302 -  -  -  -  ;
  104 00:0302 -  -  -  -  ; ***************************************************************************************
  105 00:0302 -  -  -  -  ;
  106 00:0302 -  -  -  -  ;		Date			Notes
  107 00:0302 -  -  -  -  ;		==== 			=====
  108 00:0302 -  -  -  -  ;
  109 00:0302 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:0302 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0302 -  -  -  -  ; ***************************************************************************************
    2 00:0302 -  -  -  -  ; ***************************************************************************************
    3 00:0302 -  -  -  -  ;
    4 00:0302 -  -  -  -  ;		Name : 		print.asm
    5 00:0302 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0302 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0302 -  -  -  -  ;		Reviewed :	No
    8 00:0302 -  -  -  -  ;		Purpose :	Print command
    9 00:0302 -  -  -  -  ;
   10 00:0302 -  -  -  -  ; ***************************************************************************************
   11 00:0302 -  -  -  -  ; ***************************************************************************************
   12 00:0302 -  -  -  -  
   13 00:0302 -  -  -  -  ; ***************************************************************************************
   14 00:0302 -  -  -  -  ;
   15 00:0302 -  -  -  -  ;										PRINT command
   16 00:0302 -  -  -  -  ;
   17 00:0302 -  -  -  -  ; ***************************************************************************************
   18 00:0302 -  -  -  -  
   19 00:0302 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0302 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:0304 32 82 00 00 		ld 		(PrintBase),a
   22 00:0308 -  -  -  -  		;
   23 00:0308 -  -  -  -  		;		Main loop
   24 00:0308 -  -  -  -  		;
   25 00:0308 -  -  -  -  _CPRLoop:
   26 00:0308 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:030B FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:030D 28 59 -  -  		jr 		z,_CPRExitNL
   29 00:030F FE A7 -  -  		cp 		KWD_COLON 	
   30 00:0311 28 55 -  -  		jr 		z,_CPRExitNL
   31 00:0313 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:0315 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 00:0317 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:0319 28 34 -  -  		jr 		z,_CPRTab
   35 00:031B FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:031D 28 2A -  -  		jr 		z,_CPRNewLine
   37 00:031F FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:0321 28 1C -  -  		jr 		z,_CPRHexMode
   39 00:0323 -  -  -  -  		;
   40 00:0323 CD 2D 07 00 		call 	EvaluateValue 				; so it must be an expression.		
   41 00:0327 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:0329 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 00:032B -  -  -  -  		;
   44 00:032B 3A 82 00 00 		ld 		a,(PrintBase)				; current print mode.
   45 00:032F -  -  -  -  _CPRPrintNumber:
   46 00:032F 01 A6 00 00 		ld  	bc,ConvertBuffer
   47 00:0333 C5 -  -  -  		push 	bc
   48 00:0334 CD DD 14 00 		call 	Int32ToString 				; convert to string
   49 00:0338 E1 -  -  -  		pop 	hl
   50 00:0339 -  -  -  -  		;
   51 00:0339 -  -  -  -  		; 		Print text at HL.
   52 00:0339 -  -  -  -  		;
   53 00:0339 -  -  -  -  _CPRPrintHL:
   54 00:0339 CD 6D 0E 00 		call 	PrintStringAtHL 			; print string out
   55 00:033D 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:033F -  -  -  -  		;
   57 00:033F -  -  -  -  		;		Hex mode (~)
   58 00:033F -  -  -  -  		;
   59 00:033F -  -  -  -  _CPRHexMode:		
   60 00:033F 3E 10 -  -  		ld 		a,16
   61 00:0341 32 82 00 00 		ld 		(PrintBase),a
   62 00:0345 DD 23 -  -  		inc 	ix
   63 00:0347 18 BF -  -  		jr 		_CPRLoop
   64 00:0349 -  -  -  -  		;
   65 00:0349 -  -  -  -  		; 		New line (')
   66 00:0349 -  -  -  -  		;
   67 00:0349 -  -  -  -  _CPRNewLine:
   68 00:0349 CD 2D 15 00 		call 	SYSPrintCRLF
   69 00:034D 18 0C -  -  		jr 		_CPRCheckNext
   70 00:034F -  -  -  -  		;
   71 00:034F -  -  -  -  		; 		Tab command (,)
   72 00:034F -  -  -  -  		;
   73 00:034F -  -  -  -  _CPRTab:
   74 00:034F 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:0351 CD 2C 15 00 		call 	SYSPrintChar
   76 00:0355 -  -  -  -  		;
   77 00:0355 -  -  -  -  		;		Set to base 10 then check next character
   78 00:0355 -  -  -  -  		;
   79 00:0355 -  -  -  -  _CPRCheckNext10:		
   80 00:0355 3E F6 -  -  		ld 		a,-10
   81 00:0357 32 82 00 00 		ld 		(PrintBase),a
   82 00:035B -  -  -  -  		;
   83 00:035B -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:035B -  -  -  -  		;		
   85 00:035B -  -  -  -  _CPRCheckNext:
   86 00:035B DD 23 -  -  		inc 	ix 							; consume current
   87 00:035D DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:0360 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:0362 C8 -  -  -  		ret 	z
   90 00:0363 FE A7 -  -  		cp 		KWD_COLON
   91 00:0365 C8 -  -  -  		ret 	z
   92 00:0366 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:0368 -  -  -  -  		;
   94 00:0368 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:0368 -  -  -  -  		;
   96 00:0368 -  -  -  -  _CPRExitNL:
   97 00:0368 CD 2D 15 00 		call 	SYSPrintCRLF 				; do CR/LF
   98 00:036C C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:036D -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:036D -  -  -  -  ; ***************************************************************************************
    2 00:036D -  -  -  -  ; ***************************************************************************************
    3 00:036D -  -  -  -  ;
    4 00:036D -  -  -  -  ;		Name : 		rem.asm
    5 00:036D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:036D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:036D -  -  -  -  ;		Reviewed :	No
    8 00:036D -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:036D -  -  -  -  ;
   10 00:036D -  -  -  -  ; ***************************************************************************************
   11 00:036D -  -  -  -  ; ***************************************************************************************
   12 00:036D -  -  -  -  
   13 00:036D -  -  -  -  ; ***************************************************************************************
   14 00:036D -  -  -  -  ;
   15 00:036D -  -  -  -  ;							Comment command, can be ' or REM
   16 00:036D -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:036D -  -  -  -  ;
   18 00:036D -  -  -  -  ; ***************************************************************************************
   19 00:036D -  -  -  -  
   20 00:036D -  -  -  -  Command_REM: 	;; [rem]
   21 00:036D -  -  -  -  Command_REM2: 	;; [']
   22 00:036D DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0370 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:0372 C8 -  -  -  		ret 	z
   25 00:0373 DD 23 -  -  		inc 	ix
   26 00:0375 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:0377 C8 -  -  -  		ret 	z
   28 00:0378 FE 3F -  -  		cp 		STRING_MARKER
   29 00:037A C2 6C 05 00 		jp 		nz,SyntaxError
   30 00:037E -  -  -  -  		;		
   31 00:037E 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:0382 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0385 13 -  -  -  		inc 	de 
   34 00:0386 13 -  -  -  		inc 	de
   35 00:0387 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:0389 C9 -  -  -  		ret
   37 00:038A -  -  -  -  
   38 00:038A -  -  -  -  ; ***************************************************************************************
   39 00:038A -  -  -  -  ;
   40 00:038A -  -  -  -  ;									Changes and Updates
   41 00:038A -  -  -  -  ;
   42 00:038A -  -  -  -  ; ***************************************************************************************
   43 00:038A -  -  -  -  ;
   44 00:038A -  -  -  -  ;		Date			Notes
   45 00:038A -  -  -  -  ;		==== 			=====
   46 00:038A -  -  -  -  ;
   47 00:038A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:038A -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:038A -  -  -  -  ; ***************************************************************************************
    2 00:038A -  -  -  -  ; ***************************************************************************************
    3 00:038A -  -  -  -  ;
    4 00:038A -  -  -  -  ;		Name : 		run.asm
    5 00:038A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:038A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:038A -  -  -  -  ;		Reviewed :	No
    8 00:038A -  -  -  -  ;		Purpose :	Run command
    9 00:038A -  -  -  -  ;
   10 00:038A -  -  -  -  ; ***************************************************************************************
   11 00:038A -  -  -  -  ; ***************************************************************************************
   12 00:038A -  -  -  -  
   13 00:038A -  -  -  -  ; ***************************************************************************************
   14 00:038A -  -  -  -  ;
   15 00:038A -  -  -  -  ;										RUN command
   16 00:038A -  -  -  -  ;
   17 00:038A -  -  -  -  ; ***************************************************************************************
   18 00:038A -  -  -  -  
   19 00:038A -  -  -  -  Command_RUN: 	;; [run]
   20 00:038A CD 96 0B 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:038E -  -  -  -  
   22 00:038E DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:0393 ED 73 60 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:0398 AF -  -  -  		xor 	a
   25 00:0399 32 80 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:039D -  -  -  -  		;
   27 00:039D -  -  -  -  		; 		New line at IX.
   28 00:039D -  -  -  -  		;
   29 00:039D -  -  -  -  CRNewLine:
   30 00:039D DD 22 5C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:03A2 -  -  -  -  		;
   32 00:03A2 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:03A5 B7 -  -  -  		or 		a
   34 00:03A6 CA 80 02 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:03AA -  -  -  -  		;
   36 00:03AA DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:03AC DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:03AE DD 23 -  -  		inc 	ix
   39 00:03B0 -  -  -  -  		;
   40 00:03B0 -  -  -  -  		; 		New command at IX
   41 00:03B0 -  -  -  -  		;
   42 00:03B0 -  -  -  -  _CRNewCommand:	
   43 00:03B0 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:03B3 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:03B4 F2 EF 03 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:03B8 -  -  -  -  		;
   47 00:03B8 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:03BA 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:03BC FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:03BE D2 DF 03 00 		jp 		nc,_CRAlternateLets
   51 00:03C2 -  -  -  -  		;
   52 00:03C2 -  -  -  -  _CRDoCommand:		
   53 00:03C2 E6 7F 21 00 
              00 00 6F 29 
              29 11 E6 11 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:03D7 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:03D9 CD 64 00 00 		call 	JumpCode 					; call the routine.
   56 00:03DD 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:03DF -  -  -  -  		;
   58 00:03DF -  -  -  -  		; 		Do CALL (HL)
   59 00:03DF -  -  -  -  		;
   60 00:03DF -  -  -  -  		;
   61 00:03DF -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:03DF -  -  -  -  		;		
   63 00:03DF -  -  -  -  _CRAlternateLets:		
   64 00:03DF FE 83 -  -  		cp 		KWD_PLING
   65 00:03E1 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:03E3 FE 84 -  -  		cp 		KWD_QMARK
   67 00:03E5 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:03E7 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:03E9 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:03EB C3 6C 05 00 		jp 		SyntaxError
   71 00:03EF -  -  -  -  		;
   72 00:03EF -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:03EF -  -  -  -  		;
   74 00:03EF -  -  -  -  _CRAssignmentHandler:		
   75 00:03EF FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:03F1 D2 6C 05 00 		jp 		nc,SyntaxError
   77 00:03F5 -  -  -  -  _CRAssignmentLet:		
   78 00:03F5 CD 9D 02 00 		call	Command_LET 				; do LET.
   79 00:03F9 C3 B0 03 00 		jp 		_CRNewCommand
   80 00:03FD -  -  -  -  
   81 00:03FD -  -  -  -  ; ***************************************************************************************
   82 00:03FD -  -  -  -  ;
   83 00:03FD -  -  -  -  ;									Changes and Updates
   84 00:03FD -  -  -  -  ;
   85 00:03FD -  -  -  -  ; ***************************************************************************************
   86 00:03FD -  -  -  -  ;
   87 00:03FD -  -  -  -  ;		Date			Notes
   88 00:03FD -  -  -  -  ;		==== 			=====
   89 00:03FD -  -  -  -  ;
   90 00:03FD -  -  -  -  ; ***************************************************************************************
   91 00:03FD -  -  -  -  		
Listing for file "_build.asm"
   24 00:03FD -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:03FD -  -  -  -  ; ***************************************************************************************
    2 00:03FD -  -  -  -  ; ***************************************************************************************
    3 00:03FD -  -  -  -  ;
    4 00:03FD -  -  -  -  ;		Name : 		stop.asm
    5 00:03FD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03FD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03FD -  -  -  -  ;		Reviewed :	No
    8 00:03FD -  -  -  -  ;		Purpose :	Stop command
    9 00:03FD -  -  -  -  ;
   10 00:03FD -  -  -  -  ; ***************************************************************************************
   11 00:03FD -  -  -  -  ; ***************************************************************************************
   12 00:03FD -  -  -  -  
   13 00:03FD -  -  -  -  ; ***************************************************************************************
   14 00:03FD -  -  -  -  ;
   15 00:03FD -  -  -  -  ;										STOP command
   16 00:03FD -  -  -  -  ;
   17 00:03FD -  -  -  -  ; ***************************************************************************************
   18 00:03FD -  -  -  -  
   19 00:03FD -  -  -  -  Command_STOP: 	;; [stop]
   20 00:03FD 3E 17 C3 02 
              05 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0403 -  -  -  -  
   22 00:0403 -  -  -  -  ; ***************************************************************************************
   23 00:0403 -  -  -  -  ;
   24 00:0403 -  -  -  -  ;									Changes and Updates
   25 00:0403 -  -  -  -  ;
   26 00:0403 -  -  -  -  ; ***************************************************************************************
   27 00:0403 -  -  -  -  ;
   28 00:0403 -  -  -  -  ;		Date			Notes
   29 00:0403 -  -  -  -  ;		==== 			=====
   30 00:0403 -  -  -  -  ;
   31 00:0403 -  -  -  -  ; ***************************************************************************************
   32 00:0403 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0403 -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 00:0403 -  -  -  -  ; ***************************************************************************************
    2 00:0403 -  -  -  -  ; ***************************************************************************************
    3 00:0403 -  -  -  -  ;
    4 00:0403 -  -  -  -  ;		Name : 		vdu.asm
    5 00:0403 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0403 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0403 -  -  -  -  ;		Reviewed :	No
    8 00:0403 -  -  -  -  ;		Purpose :	Vdu command
    9 00:0403 -  -  -  -  ;
   10 00:0403 -  -  -  -  ; ***************************************************************************************
   11 00:0403 -  -  -  -  ; ***************************************************************************************
   12 00:0403 -  -  -  -  
   13 00:0403 -  -  -  -  ; ***************************************************************************************
   14 00:0403 -  -  -  -  ;
   15 00:0403 -  -  -  -  ;										END command
   16 00:0403 -  -  -  -  ;
   17 00:0403 -  -  -  -  ; ***************************************************************************************
   18 00:0403 -  -  -  -  
   19 00:0403 -  -  -  -  Command_VDU: 	;; [vdu]
   20 00:0403 DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 00:0406 FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 00:0408 C8 -  -  -  		ret 	z
   23 00:0409 FE A7 -  -  		cp 		KWD_COLON
   24 00:040B C8 -  -  -  		ret 	z
   25 00:040C -  -  -  -  		;
   26 00:040C CD 35 07 00 		call 	EvaluateInteger 			; evaluate integer value
   27 00:0410 D9 -  -  -  		exx 								; check 0-FFFF
   28 00:0411 7C -  -  -  		ld 		a,h
   29 00:0412 B5 -  -  -  		or 		l
   30 00:0413 D9 -  -  -  		exx
   31 00:0414 C2 66 05 00 		jp  	nz,BadValue
   32 00:0418 E5 -  -  -  		push 	hl 							; save on stack
   33 00:0419 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 00:041A CD 2C 15 00 		call 	SYSPrintChar
   35 00:041E E1 -  -  -  		pop 	hl 							; get upper back
   36 00:041F DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 00:0422 DD 23 -  -  		inc 	ix 
   38 00:0424 FE A6 -  -  		cp 		KWD_COMMA 					
   39 00:0426 28 DB -  -  		jr 		z,Command_VDU
   40 00:0428 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 00:042A 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 00:042C DD 2B -  -  		dec 	ix 							; go back and try again
   43 00:042E 18 D3 -  -  		jr 		Command_VDU
   44 00:0430 -  -  -  -  
   45 00:0430 -  -  -  -  _VDUUpper:
   46 00:0430 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 00:0431 CD 2C 15 00 		call 	SYSPrintChar
   48 00:0435 18 CC -  -  		jr 		Command_VDU		
   49 00:0437 -  -  -  -  
   50 00:0437 -  -  -  -  ; ***************************************************************************************
   51 00:0437 -  -  -  -  ;
   52 00:0437 -  -  -  -  ;									Changes and Updates
   53 00:0437 -  -  -  -  ;
   54 00:0437 -  -  -  -  ; ***************************************************************************************
   55 00:0437 -  -  -  -  ;
   56 00:0437 -  -  -  -  ;		Date			Notes
   57 00:0437 -  -  -  -  ;		==== 			=====
   58 00:0437 -  -  -  -  ;
   59 00:0437 -  -  -  -  ; ***************************************************************************************
   60 00:0437 -  -  -  -  		
Listing for file "_build.asm"
   26 00:0437 -  -  -  -  #include "core/data/read.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
    1 00:0437 -  -  -  -  ; ***************************************************************************************
    2 00:0437 -  -  -  -  ; ***************************************************************************************
    3 00:0437 -  -  -  -  ;
    4 00:0437 -  -  -  -  ;		Name : 		read.asm
    5 00:0437 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0437 -  -  -  -  ;		Date : 		9th June 2022
    7 00:0437 -  -  -  -  ;		Reviewed :	No
    8 00:0437 -  -  -  -  ;		Purpose :	READ command
    9 00:0437 -  -  -  -  ;
   10 00:0437 -  -  -  -  ; ***************************************************************************************
   11 00:0437 -  -  -  -  
   12 00:0437 -  -  -  -  ; ***************************************************************************************
   13 00:0437 -  -  -  -  ;
   14 00:0437 -  -  -  -  ;									Read Command
   15 00:0437 -  -  -  -  ;
   16 00:0437 -  -  -  -  ; ***************************************************************************************
   17 00:0437 -  -  -  -  
   18 00:0437 -  -  -  -  Command_READ: ;; [read]
   19 00:0437 -  -  -  -  			;
   20 00:0437 -  -  -  -  			;		READ loop
   21 00:0437 -  -  -  -  			;
   22 00:0437 -  -  -  -  _CRLoop:	
   23 00:0437 21 88 00 00 			ld 		hl,DataScanRequired 	; check and clear scan required flag
   24 00:043B 7E -  -  -  			ld 		a,(hl)
   25 00:043C 36 00 -  -  			ld 		(hl),0 
   26 00:043E B7 -  -  -  			or 		a
   27 00:043F C4 7F 04 00 			call 	nz,CRScanForward 		; if required, scan forward to the first data
   28 00:0443 -  -  -  -  			;
   29 00:0443 3E FF -  -  			ld 		a,$FF 					; we can autocreate READ variables
   30 00:0445 32 80 00 00 			ld 		(AllowAutoCreate),a
   31 00:0449 CD BB 0E 00 			call 	FindVariable 			; locate the variable, address in UHL now.
   32 00:044D AF -  -  -  			xor 	a 						
   33 00:044E 32 80 00 00 			ld 		(AllowAutoCreate),a
   34 00:0452 DD E5 -  -  			push 	ix 						; save position in program
   35 00:0454 E5 -  -  -  			push 	hl						; save variable target address.
   36 00:0455 -  -  -  -  			;
   37 00:0455 -  -  -  -  _CRLocateData:			
   38 00:0455 DD 2A 84 00 
              00 -  -  -  			ld 		ix,(ReadDataPointer) 	; current read position
   39 00:045A CD 35 07 00 			call 	EvaluateInteger 		; should be an integer there.
   40 00:045E D1 -  -  -  			pop 	de 						; target address in DE
   41 00:045F CD 68 0A 00 			call 	_LCVWrite32HL 			; function to write HL'HL to DE
   42 00:0463 -  -  -  -  			;
   43 00:0463 DD 7E 00 -  			ld 		a,(ix+0) 				; get following.
   44 00:0466 DD 23 -  -  			inc 	ix
   45 00:0468 DD 22 84 00 
              00 -  -  -  			ld 		(ReadDataPointer),ix 	; skip over it. It should be , EOS or :
   46 00:046D -  -  -  -  			;
   47 00:046D EE A6 -  -  			xor 	KWD_COMMA 				; will be zero if a comma, hence no scan required
   48 00:046F 32 88 00 00 			ld 		(DataScanRequired),a 	; update the flag accordingly.
   49 00:0473 -  -  -  -  			;
   50 00:0473 DD E1 -  -  			pop 	ix						; get program position back
   51 00:0475 DD 7E 00 -  			ld 		a,(ix+0) 				; is it followed by a comma
   52 00:0478 FE A6 -  -  			cp 		KWD_COMMA
   53 00:047A C0 -  -  -  			ret 	nz 						; no, end of READ
   54 00:047B DD 23 -  -  			inc 	ix 						; skip comma
   55 00:047D 18 B8 -  -  			jr 		_CRLoop 				; go round again.
   56 00:047F -  -  -  -  
   57 00:047F -  -  -  -  ; ***************************************************************************************
   58 00:047F -  -  -  -  ;
   59 00:047F -  -  -  -  ;			Scan the data pointer forward to the next data statement, error if none.
   60 00:047F -  -  -  -  ;
   61 00:047F -  -  -  -  ; ***************************************************************************************
   62 00:047F -  -  -  -  
   63 00:047F -  -  -  -  CRScanForward:
   64 00:047F DD E5 -  -  			push 	ix
   65 00:0481 DD 2A 84 00 
              00 -  -  -  			ld 		ix,(ReadDataPointer)
   66 00:0486 -  -  -  -  _CRScanLoop:
   67 00:0486 06 C8 -  -  			ld 		b,KWD_DATA 				; want to search for DATA or EOL
   68 00:0488 0E 80 -  -  			ld 		c,KWC_EOL_MARKER
   69 00:048A CD D2 0D 00 			call 	SearchForwardTokens 	; look for DATA or EOL in current line.
   70 00:048E FE C8 -  -  			cp 		KWD_DATA 				; DATA found, we can exit
   71 00:0490 28 12 -  -  			jr 		z,_CRScanExit
   72 00:0492 -  -  -  -  			;
   73 00:0492 DD 7E 00 -  			ld 		a,(ix+0) 				; get offset
   74 00:0495 DD 23 -  -  			inc 	ix 						; point to start of next line.
   75 00:0497 DD 23 -  -  			inc 	ix
   76 00:0499 DD 23 -  -  			inc 	ix
   77 00:049B B7 -  -  -  			or 		a 						; if offset non zero try that line.
   78 00:049C 20 E8 -  -  			jr 		nz,_CRScanLoop
   79 00:049E 3E 04 C3 02 
              05 00 -  -  			ERR_DATA 						; we have no data.
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
   80 00:04A4 -  -  -  -  
   81 00:04A4 -  -  -  -  _CRScanExit:
   82 00:04A4 DD 22 84 00 
              00 -  -  -  			ld 		(ReadDataPointer),ix 	; update pointer at new DATA.
   83 00:04A9 DD E1 -  -  			pop 	ix
   84 00:04AB C9 -  -  -  			ret
   85 00:04AC -  -  -  -  
   86 00:04AC -  -  -  -  ; ***************************************************************************************
   87 00:04AC -  -  -  -  ;
   88 00:04AC -  -  -  -  ;									Changes and Updates
   89 00:04AC -  -  -  -  ;
   90 00:04AC -  -  -  -  ; ***************************************************************************************
   91 00:04AC -  -  -  -  ;
   92 00:04AC -  -  -  -  ;		Date			Notes
   93 00:04AC -  -  -  -  ;		==== 			=====
   94 00:04AC -  -  -  -  ;
   95 00:04AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:04AC -  -  -  -  #include "core/data/restore.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/restore.asm"
    1 00:04AC -  -  -  -  ; ***************************************************************************************
    2 00:04AC -  -  -  -  ; ***************************************************************************************
    3 00:04AC -  -  -  -  ;
    4 00:04AC -  -  -  -  ;		Name : 		restore.asm
    5 00:04AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04AC -  -  -  -  ;		Date : 		9th June 2022
    7 00:04AC -  -  -  -  ;		Reviewed :	No
    8 00:04AC -  -  -  -  ;		Purpose :	RESTORE command
    9 00:04AC -  -  -  -  ;
   10 00:04AC -  -  -  -  ; ***************************************************************************************
   11 00:04AC -  -  -  -  
   12 00:04AC -  -  -  -  ; ***************************************************************************************
   13 00:04AC -  -  -  -  ;
   14 00:04AC -  -  -  -  ;									Restore Command
   15 00:04AC -  -  -  -  ;
   16 00:04AC -  -  -  -  ; ***************************************************************************************
   17 00:04AC -  -  -  -  
   18 00:04AC -  -  -  -  Command_RESTORE: ;; [restore]
   19 00:04AC 2A 38 00 00 			ld 		hl,(CodeAddress)		; HL+3 is the first token.
   20 00:04B0 23 -  -  -  			inc 	hl
   21 00:04B1 23 -  -  -  			inc 	hl
   22 00:04B2 23 -  -  -  			inc 	hl
   23 00:04B3 22 84 00 00 			ld 		(ReadDataPointer),hl 	; scan from here.
   24 00:04B7 3E FF -  -  			ld 		a,$FF 					; scan required first time out.
   25 00:04B9 32 88 00 00 			ld 		(DataScanRequired),a
   26 00:04BD C9 -  -  -  			ret 					
   27 00:04BE -  -  -  -  
   28 00:04BE -  -  -  -  ; ***************************************************************************************
   29 00:04BE -  -  -  -  ;
   30 00:04BE -  -  -  -  ;									Changes and Updates
   31 00:04BE -  -  -  -  ;
   32 00:04BE -  -  -  -  ; ***************************************************************************************
   33 00:04BE -  -  -  -  ;
   34 00:04BE -  -  -  -  ;		Date			Notes
   35 00:04BE -  -  -  -  ;		==== 			=====
   36 00:04BE -  -  -  -  ;
   37 00:04BE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:04BE -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:04BE -  -  -  -  ; ***************************************************************************************
    2 00:04BE -  -  -  -  ; ***************************************************************************************
    3 00:04BE -  -  -  -  ;
    4 00:04BE -  -  -  -  ;		Name : 		charcheck.asm
    5 00:04BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04BE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04BE -  -  -  -  ;		Reviewed :	No
    8 00:04BE -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:04BE -  -  -  -  ;
   10 00:04BE -  -  -  -  ; ***************************************************************************************
   11 00:04BE -  -  -  -  ; ***************************************************************************************
   12 00:04BE -  -  -  -  
   13 00:04BE -  -  -  -  ; ***************************************************************************************
   14 00:04BE -  -  -  -  ;
   15 00:04BE -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:04BE -  -  -  -  ;
   17 00:04BE -  -  -  -  ; ***************************************************************************************
   18 00:04BE -  -  -  -  
   19 00:04BE -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:04BE             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:04BE             		inc 	ix
   22 00:04BE             		cp 		ch 							; exit if matches
   23 00:04BE             		ret 	z
   24 00:04BE             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:04BE             		jp 		ErrorHandler
   26 00:04BE             #endmacro
   27 00:04BE -  -  -  -  
   28 00:04BE -  -  -  -  CheckLeftBracket:
   29 00:04BE DD 7E 00 DD 
              23 FE 95 C8 
              3E 0F C3 02 
              05 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:04CC -  -  -  -  
   31 00:04CC -  -  -  -  CheckRightBracket:
   32 00:04CC DD 7E 00 DD 
              23 FE A5 C8 
              3E 11 C3 02 
              05 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:04DA -  -  -  -  
   34 00:04DA -  -  -  -  CheckDollar:
   35 00:04DA DD 7E 00 DD 
              23 FE 96 C8 
              3E 0E C3 02 
              05 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:04E8 -  -  -  -  		
   37 00:04E8 -  -  -  -  CheckComma:
   38 00:04E8 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0D C3 02 
              05 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:04F6 -  -  -  -  
   40 00:04F6 -  -  -  -  ; ***************************************************************************************
   41 00:04F6 -  -  -  -  ;
   42 00:04F6 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:04F6 -  -  -  -  ;
   44 00:04F6 -  -  -  -  ; ***************************************************************************************
   45 00:04F6 -  -  -  -  
   46 00:04F6 -  -  -  -  CheckNextA:
   47 00:04F6 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:04F9 DD 23 -  -  		inc 	ix 							; skip character
   49 00:04FB C8 -  -  -  		ret 	z 							; yes, okay
   50 00:04FC 3E 18 C3 02 
              05 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:0502 -  -  -  -  		
   52 00:0502 -  -  -  -  ; ***************************************************************************************
   53 00:0502 -  -  -  -  ;
   54 00:0502 -  -  -  -  ;									Changes and Updates
   55 00:0502 -  -  -  -  ;
   56 00:0502 -  -  -  -  ; ***************************************************************************************
   57 00:0502 -  -  -  -  ;
   58 00:0502 -  -  -  -  ;		Date			Notes
   59 00:0502 -  -  -  -  ;		==== 			=====
   60 00:0502 -  -  -  -  ;
   61 00:0502 -  -  -  -  ; ***************************************************************************************
   62 00:0502 -  -  -  -  		
Listing for file "_build.asm"
   29 00:0502 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:0502 -  -  -  -  ; ***************************************************************************************
    2 00:0502 -  -  -  -  ; ***************************************************************************************
    3 00:0502 -  -  -  -  ;
    4 00:0502 -  -  -  -  ;		Name : 		errors.asm
    5 00:0502 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0502 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0502 -  -  -  -  ;		Reviewed :	No
    8 00:0502 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:0502 -  -  -  -  ;
   10 00:0502 -  -  -  -  ; ***************************************************************************************
   11 00:0502 -  -  -  -  ; ***************************************************************************************
   12 00:0502 -  -  -  -  
   13 00:0502 -  -  -  -  ; ***************************************************************************************
   14 00:0502 -  -  -  -  ;
   15 00:0502 -  -  -  -  ;								Error handler, message A 
   16 00:0502 -  -  -  -  ;
   17 00:0502 -  -  -  -  ; ***************************************************************************************
   18 00:0502 -  -  -  -  
   19 00:0502 -  -  -  -  ErrorHandler:
   20 00:0502 F5 -  -  -  		push 	af 						; save error ID
   21 00:0503 -  -  -  -  
   22 00:0503 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0507 6F -  -  -  		ld 		l,a
   24 00:0508 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0509 29 -  -  -  		add 	hl,hl 		
   26 00:050A 11 D1 0F 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:050E 19 -  -  -  		add 	hl,de
   28 00:050F ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:0511 CD 6D 0E 00 		call 	PrintStringAtHL
   30 00:0515 -  -  -  -  		;
   31 00:0515 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0516 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0517 28 2F -  -  		jr 		z,_EHExit
   34 00:0519 -  -  -  -  		;
   35 00:0519 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:051E DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:0521 B7 -  -  -  		or 		a
   38 00:0522 28 24 -  -  		jr 		z,_EHExit
   39 00:0524 -  -  -  -  
   40 00:0524 21 50 05 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0528 CD 6D 0E 00 		call 	PrintStringAtHL 
   42 00:052C -  -  -  -  		
   43 00:052C D9 -  -  -  		exx								; HL'HL = line number
   44 00:052D 21 00 00 00 		ld 		hl,$0000 		
   45 00:0531 D9 -  -  -  		exx 
   46 00:0532 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:0535 DD 66 02 -  		ld 		h,(ix+2)
   48 00:0538 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:053A 01 A6 00 00 		ld 		bc,ConvertBuffer
   50 00:053E CD DD 14 00 		call 	Int32ToString
   51 00:0542 C5 -  -  -  		push 	bc
   52 00:0543 E1 -  -  -  		pop 	hl
   53 00:0544 CD 6D 0E 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0548 -  -  -  -  _EHExit:		
   55 00:0548 CD 2D 15 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:054C C3 1A 00 00 		jp 		WarmStart
   57 00:0550 -  -  -  -  
   58 00:0550 -  -  -  -  _EHAtText:
   59 00:0550 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:055A -  -  -  -  
   61 00:055A -  -  -  -  NotImplemented:
   62 00:055A 3E 06 C3 02 
              05 00 -  -  		ERR_DISABLED
   63 00:0560 -  -  -  -  TypeMismatch:
   64 00:0560 3E 02 C3 02 
              05 00 -  -  		ERR_BADTYPE
   65 00:0566 -  -  -  -  BadValue:
   66 00:0566 3E 03 C3 02 
              05 00 -  -  		ERR_BADVALUE
   67 00:056C -  -  -  -  SyntaxError:
   68 00:056C 3E 18 C3 02 
              05 00 -  -  		ERR_SYNTAX
   69 00:0572 -  -  -  -  						
   70 00:0572 -  -  -  -  ; ***************************************************************************************
   71 00:0572 -  -  -  -  ;
   72 00:0572 -  -  -  -  ;									Changes and Updates
   73 00:0572 -  -  -  -  ;
   74 00:0572 -  -  -  -  ; ***************************************************************************************
   75 00:0572 -  -  -  -  ;
   76 00:0572 -  -  -  -  ;		Date			Notes
   77 00:0572 -  -  -  -  ;		==== 			=====
   78 00:0572 -  -  -  -  ;
   79 00:0572 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:0572 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:0572 -  -  -  -  ; ***************************************************************************************
    2 00:0572 -  -  -  -  ; ***************************************************************************************
    3 00:0572 -  -  -  -  ;
    4 00:0572 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:0572 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0572 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0572 -  -  -  -  ;		Reviewed :	No
    8 00:0572 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:0572 -  -  -  -  ;
   10 00:0572 -  -  -  -  ; ***************************************************************************************
   11 00:0572 -  -  -  -  ; ***************************************************************************************
   12 00:0572 -  -  -  -  
   13 00:0572 -  -  -  -  ; ***************************************************************************************
   14 00:0572 -  -  -  -  ;
   15 00:0572 -  -  -  -  ; 									Addition
   16 00:0572 -  -  -  -  ;
   17 00:0572 -  -  -  -  ; ***************************************************************************************
   18 00:0572 -  -  -  -  
   19 00:0572 -  -  -  -  ALUAdd: 		;; [+]
   20 00:0572 CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 5C 
              14 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:0580 -  -  -  -  
   22 00:0580 -  -  -  -  ; ***************************************************************************************
   23 00:0580 -  -  -  -  ;
   24 00:0580 -  -  -  -  ; 									Subtraction
   25 00:0580 -  -  -  -  ;
   26 00:0580 -  -  -  -  ; ***************************************************************************************
   27 00:0580 -  -  -  -  
   28 00:0580 -  -  -  -  ALUSubtract: 	;; [-]
   29 00:0580 CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 64 
              14 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:058E -  -  -  -  
   31 00:058E -  -  -  -  ; ***************************************************************************************
   32 00:058E -  -  -  -  ;
   33 00:058E -  -  -  -  ; 									  Multiply
   34 00:058E -  -  -  -  ;
   35 00:058E -  -  -  -  ; ***************************************************************************************
   36 00:058E -  -  -  -  
   37 00:058E -  -  -  -  ALUMultiply: 	;; [*]
   38 00:058E CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 23 
              14 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:059C -  -  -  -  
   40 00:059C -  -  -  -  ; ***************************************************************************************
   41 00:059C -  -  -  -  ;
   42 00:059C -  -  -  -  ; 									  Divide
   43 00:059C -  -  -  -  ;
   44 00:059C -  -  -  -  ; ***************************************************************************************
   45 00:059C -  -  -  -  
   46 00:059C -  -  -  -  ALUDivide: 	;; [/]
   47 00:059C -  -  -  -  ALUDivide2:	;; [div]
   48 00:059C CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 23 
              13 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:05AA -  -  -  -  
   50 00:05AA -  -  -  -  ; ***************************************************************************************
   51 00:05AA -  -  -  -  ;
   52 00:05AA -  -  -  -  ; 									  Modulus
   53 00:05AA -  -  -  -  ;
   54 00:05AA -  -  -  -  ; ***************************************************************************************
   55 00:05AA -  -  -  -  
   56 00:05AA -  -  -  -  ALUModulus: 	;; [mod]
   57 00:05AA CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 26 
              13 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:05B8 -  -  -  -  
   59 00:05B8 -  -  -  -  ; ***************************************************************************************
   60 00:05B8 -  -  -  -  ;
   61 00:05B8 -  -  -  -  ; 									  Logical
   62 00:05B8 -  -  -  -  ;
   63 00:05B8 -  -  -  -  ; ***************************************************************************************
   64 00:05B8 -  -  -  -  
   65 00:05B8 -  -  -  -  ALUAnd: 		;; [and]
   66 00:05B8 CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 6E 
              14 00 -  -  		IntegerDispatch(Int32And)
   67 00:05C6 -  -  -  -  
   68 00:05C6 -  -  -  -  ALUOr: 			;; [or]
   69 00:05C6 CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 7B 
              14 00 -  -  		IntegerDispatch(Int32Or)
   70 00:05D4 -  -  -  -  
   71 00:05D4 -  -  -  -  ALUXor: 		;; [eor]
   72 00:05D4 CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 88 
              14 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:05E2 -  -  -  -  
   74 00:05E2 -  -  -  -  ; ***************************************************************************************
   75 00:05E2 -  -  -  -  ;
   76 00:05E2 -  -  -  -  ;									Changes and Updates
   77 00:05E2 -  -  -  -  ;
   78 00:05E2 -  -  -  -  ; ***************************************************************************************
   79 00:05E2 -  -  -  -  ;
   80 00:05E2 -  -  -  -  ;		Date			Notes
   81 00:05E2 -  -  -  -  ;		==== 			=====
   82 00:05E2 -  -  -  -  ;
   83 00:05E2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:05E2 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:05E2 -  -  -  -  ; ***************************************************************************************
    2 00:05E2 -  -  -  -  ; ***************************************************************************************
    3 00:05E2 -  -  -  -  ;
    4 00:05E2 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:05E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05E2 -  -  -  -  ;		Reviewed :	No
    8 00:05E2 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:05E2 -  -  -  -  ;
   10 00:05E2 -  -  -  -  ; ***************************************************************************************
   11 00:05E2 -  -  -  -  ; ***************************************************************************************
   12 00:05E2 -  -  -  -  
   13 00:05E2 -  -  -  -  ; ***************************************************************************************
   14 00:05E2 -  -  -  -  ;
   15 00:05E2 -  -  -  -  ; 									<l> <op> <r>
   16 00:05E2 -  -  -  -  ;
   17 00:05E2 -  -  -  -  ; ***************************************************************************************
   18 00:05E2 -  -  -  -  
   19 00:05E2 -  -  -  -  ALULongReference:			;; [!]
   20 00:05E2 CD F2 05 00 		call 	BRGetAddress 				; calculate address
   21 00:05E6 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:05E8 CB F9 -  -  		set 	CIsReference,c
   23 00:05EA C9 -  -  -  		ret
   24 00:05EB -  -  -  -  
   25 00:05EB -  -  -  -  ALUByteReference: 			;; [?]
   26 00:05EB CD E2 05 00 		call 	ALULongReference
   27 00:05EF CB F1 -  -  		set 	CIsByteReference,c
   28 00:05F1 C9 -  -  -  		ret
   29 00:05F2 -  -  -  -  
   30 00:05F2 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:05F2 CD 8F 06 00 
              78 B1 C2 60 
              05 00 C3 00 
              06 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:0600 -  -  -  -  _BRGAMain:		
   33 00:0600 CD 5C 14 00 		call 	Int32Add 					; address in HL'HL
   34 00:0604 CD 95 07 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0608 C9 -  -  -  		ret
   36 00:0609 -  -  -  -  
   37 00:0609 -  -  -  -  ; ***************************************************************************************
   38 00:0609 -  -  -  -  ;
   39 00:0609 -  -  -  -  ;									Changes and Updates
   40 00:0609 -  -  -  -  ;
   41 00:0609 -  -  -  -  ; ***************************************************************************************
   42 00:0609 -  -  -  -  ;
   43 00:0609 -  -  -  -  ;		Date			Notes
   44 00:0609 -  -  -  -  ;		==== 			=====
   45 00:0609 -  -  -  -  ;
   46 00:0609 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:0609 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0609 -  -  -  -  ; ***************************************************************************************
    2 00:0609 -  -  -  -  ; ***************************************************************************************
    3 00:0609 -  -  -  -  ;
    4 00:0609 -  -  -  -  ;		Name : 		compare.asm
    5 00:0609 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0609 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0609 -  -  -  -  ;		Reviewed :	No
    8 00:0609 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0609 -  -  -  -  ;
   10 00:0609 -  -  -  -  ; ***************************************************************************************
   11 00:0609 -  -  -  -  ; ***************************************************************************************
   12 00:0609 -  -  -  -  
   13 00:0609 -  -  -  -  #macro compare_equals(n)
   14 00:0609             		call 	CompareBaseCode
   15 00:0609             		cp 		n
   16 00:0609             		jr 		z,UnaryInt32True
   17 00:0609             		jr 		UnaryInt32False
   18 00:0609             #endmacro
   19 00:0609 -  -  -  -  
   20 00:0609 -  -  -  -  #macro compare_not_equals(n)
   21 00:0609             		call 	CompareBaseCode
   22 00:0609             		cp 		n
   23 00:0609             		jr 		nz,UnaryInt32True
   24 00:0609             		jr 		UnaryInt32False
   25 00:0609             #endmacro
   26 00:0609 -  -  -  -  
   27 00:0609 -  -  -  -  ; ***************************************************************************************
   28 00:0609 -  -  -  -  ;
   29 00:0609 -  -  -  -  ; 								Return True/False
   30 00:0609 -  -  -  -  ;
   31 00:0609 -  -  -  -  ; ***************************************************************************************
   32 00:0609 -  -  -  -  
   33 00:0609 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0609 3E FF -  -  		ld 		a,255
   35 00:060B 18 01 -  -  		jr 		_Int32Logical
   36 00:060D -  -  -  -  UnaryInt32False: ;; [false]
   37 00:060D AF -  -  -  		xor 	a
   38 00:060E -  -  -  -  _Int32Logical:
   39 00:060E 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:060F 67 -  -  -  		ld 		h,a
   41 00:0610 D9 -  -  -  		exx
   42 00:0611 6F -  -  -  		ld 		l,a
   43 00:0612 67 -  -  -  		ld 		h,a
   44 00:0613 D9 -  -  -  		exx
   45 00:0614 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0616 C9 -  -  -  		ret
   47 00:0617 -  -  -  -  
   48 00:0617 -  -  -  -  ; ***************************************************************************************
   49 00:0617 -  -  -  -  ;
   50 00:0617 -  -  -  -  ; 										> = < (compare == value)
   51 00:0617 -  -  -  -  ;
   52 00:0617 -  -  -  -  ; ***************************************************************************************
   53 00:0617 -  -  -  -  
   54 00:0617 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0617 CD 53 06 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:0621 -  -  -  -  
   57 00:0621 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:0621 CD 53 06 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:062B -  -  -  -  
   60 00:062B -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:062B CD 53 06 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:0635 -  -  -  -  
   63 00:0635 -  -  -  -  ; ***************************************************************************************
   64 00:0635 -  -  -  -  ;
   65 00:0635 -  -  -  -  ; 										> = < (compare <> value)
   66 00:0635 -  -  -  -  ;
   67 00:0635 -  -  -  -  ; ***************************************************************************************
   68 00:0635 -  -  -  -  
   69 00:0635 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:0635 CD 53 06 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:063F -  -  -  -  
   72 00:063F -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:063F CD 53 06 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:0649 -  -  -  -  
   75 00:0649 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:0649 CD 53 06 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:0653 -  -  -  -  
   78 00:0653 -  -  -  -  ; ***************************************************************************************
   79 00:0653 -  -  -  -  ;
   80 00:0653 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:0653 -  -  -  -  ;
   82 00:0653 -  -  -  -  ; ***************************************************************************************
   83 00:0653 -  -  -  -  
   84 00:0653 -  -  -  -  CompareBaseCode:
   85 00:0653 CD 8F 06 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0657 -  -  -  -  
   87 00:0657 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0658 A1 -  -  -  		and 	c
   89 00:0659 CB 47 -  -  		bit 	CIsString,a 
   90 00:065B C2 6D 06 00 		jp 		nz,StringCompare
   91 00:065F -  -  -  -  
   92 00:065F 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:0660 B1 -  -  -  		or 		c
   94 00:0661 CB 47 -  -  		bit 	CIsString,a 
   95 00:0663 CA 9C 14 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0667 -  -  -  -  
   97 00:0667 3E 02 C3 02 
              05 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:066D -  -  -  -  ;
   99 00:066D -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:066D -  -  -  -  ;
  101 00:066D -  -  -  -  StringCompare:
  102 00:066D 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:066E BE -  -  -  		cp 		(hl)
  104 00:066F 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0671 20 08 -  -  		jr 		nz,_SCLess
  106 00:0673 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:0674 23 -  -  -  		inc 	hl
  108 00:0675 FE 20 -  -  		cp 		' '
  109 00:0677 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0679 AF -  -  -  		xor 	a 							; return 0.
  111 00:067A C9 -  -  -  		ret
  112 00:067B -  -  -  -  
  113 00:067B -  -  -  -  _SCLess:
  114 00:067B 3E FF -  -  		ld 		a,$FF
  115 00:067D C9 -  -  -  		ret
  116 00:067E -  -  -  -  _SCGreater:
  117 00:067E 3E 01 -  -  		ld 		a,1
  118 00:0680 C9 -  -  -  		ret
  119 00:0681 -  -  -  -  
  120 00:0681 3E 19 C3 02 
              05 00 -  -  		ERR_TODO()
  121 00:0687 -  -  -  -  
  122 00:0687 -  -  -  -  ; ***************************************************************************************
  123 00:0687 -  -  -  -  ;
  124 00:0687 -  -  -  -  ;									Changes and Updates
  125 00:0687 -  -  -  -  ;
  126 00:0687 -  -  -  -  ; ***************************************************************************************
  127 00:0687 -  -  -  -  ;
  128 00:0687 -  -  -  -  ;		Date			Notes
  129 00:0687 -  -  -  -  ;		==== 			=====
  130 00:0687 -  -  -  -  ;
  131 00:0687 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:0687 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0687 -  -  -  -  ; ***************************************************************************************
    2 00:0687 -  -  -  -  ; ***************************************************************************************
    3 00:0687 -  -  -  -  ;
    4 00:0687 -  -  -  -  ;		Name : 		utility.asm
    5 00:0687 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0687 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0687 -  -  -  -  ;		Reviewed :	No
    8 00:0687 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0687 -  -  -  -  ;
   10 00:0687 -  -  -  -  ; ***************************************************************************************
   11 00:0687 -  -  -  -  ; ***************************************************************************************
   12 00:0687 -  -  -  -  
   13 00:0687 -  -  -  -  ; ***************************************************************************************
   14 00:0687 -  -  -  -  ;
   15 00:0687 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0687 -  -  -  -  ;
   17 00:0687 -  -  -  -  ; ***************************************************************************************
   18 00:0687 -  -  -  -  
   19 00:0687 -  -  -  -  SwapHLDE:
   20 00:0687 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0688 D9 -  -  -  			exx
   22 00:0689 EB -  -  -  			ex 		de,hl
   23 00:068A D9 -  -  -  			exx
   24 00:068B 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:068C 41 -  -  -  			ld 		b,c
   26 00:068D 4F -  -  -  			ld 		c,a
   27 00:068E C9 -  -  -  			ret
   28 00:068F -  -  -  -  
   29 00:068F -  -  -  -  ; ***************************************************************************************
   30 00:068F -  -  -  -  ;
   31 00:068F -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:068F -  -  -  -  ;
   33 00:068F -  -  -  -  ; ***************************************************************************************
   34 00:068F -  -  -  -  
   35 00:068F -  -  -  -  DereferenceBoth:
   36 00:068F CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:0691 C4 68 07 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0695 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0697 C8 -  -  -  			ret 	z
   40 00:0698 CD 87 06 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:069C CD 68 07 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:06A0 CD 87 06 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:06A4 C9 -  -  -  			ret
   44 00:06A5 -  -  -  -  
   45 00:06A5 -  -  -  -  ; ***************************************************************************************
   46 00:06A5 -  -  -  -  ;
   47 00:06A5 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:06A5 -  -  -  -  ;
   49 00:06A5 -  -  -  -  ; ***************************************************************************************
   50 00:06A5 -  -  -  -  
   51 00:06A5 -  -  -  -  NegateHLHL:	
   52 00:06A5 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:06A7 C2 60 05 00 			jp 		nz,TypeMismatch
   54 00:06AB CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:06AD C4 68 07 00 			call 	nz,Dereference 			; if required.
   56 00:06B1 CD C6 14 00 			call 	Int32Negate
   57 00:06B5 C9 -  -  -  			ret
Listing for file "_build.asm"
   34 00:06B6 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:06B6 -  -  -  -  ; ***************************************************************************************
    2 00:06B6 -  -  -  -  ; ***************************************************************************************
    3 00:06B6 -  -  -  -  ;
    4 00:06B6 -  -  -  -  ;		Name : 		expression.asm
    5 00:06B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06B6 -  -  -  -  ;		Reviewed :	None
    8 00:06B6 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:06B6 -  -  -  -  ;
   10 00:06B6 -  -  -  -  ; ***************************************************************************************
   11 00:06B6 -  -  -  -  ; ***************************************************************************************
   12 00:06B6 -  -  -  -  
   13 00:06B6 -  -  -  -  ; ***************************************************************************************
   14 00:06B6 -  -  -  -  ;
   15 00:06B6 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:06B6 -  -  -  -  ;
   17 00:06B6 -  -  -  -  ; ***************************************************************************************
   18 00:06B6 -  -  -  -  
   19 00:06B6 -  -  -  -  EvaluateAtPrecedence0:
   20 00:06B6 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:06B7 -  -  -  -  EvaluateAtPrecedence:
   22 00:06B7 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:06B8 -  -  -  -  		;
   24 00:06B8 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:06B8 -  -  -  -  		;
   26 00:06B8 CD C4 07 00 		call 	EvaluateTerm 				; get term
   27 00:06BC -  -  -  -  		;
   28 00:06BC -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:06BC -  -  -  -  		;
   30 00:06BC D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:06BD -  -  -  -  _EAPLoop:
   32 00:06BD DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:06C0 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:06C2 D8 -  -  -  		ret 	c
   35 00:06C3 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:06C5 D0 -  -  -  		ret 	nc
   37 00:06C6 -  -  -  -  		;
   38 00:06C6 -  -  -  -  		; 		Get the precedence.
   39 00:06C6 -  -  -  -  		;
   40 00:06C6 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:06C7 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:06C9 21 C0 0F 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:06CD B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:06CE 6F -  -  -  		ld 		l,a
   45 00:06CF 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:06D0 E1 -  -  -  		pop 	hl 							; restore HL
   47 00:06D1 -  -  -  -  		;
   48 00:06D1 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:06D1 -  -  -  -  		;
   50 00:06D1 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:06D2 BB -  -  -  		cp 		e
   52 00:06D3 D0 -  -  -  		ret 	nc
   53 00:06D4 -  -  -  -  
   54 00:06D4 -  -  -  -  		;
   55 00:06D4 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:06D4 -  -  -  -  		;
   57 00:06D4 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:06D5 -  -  -  -  		;
   59 00:06D5 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:06D8 F5 -  -  -  		push 	af
   61 00:06D9 -  -  -  -  		;
   62 00:06D9 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:06DA D9 -  -  -  		exx 								; save HL'
   64 00:06DB E5 -  -  -  		push 	hl
   65 00:06DC D9 -  -  -  		exx 								
   66 00:06DD E5 -  -  -  		push 	hl 							; save HL
   67 00:06DE -  -  -  -  		;
   68 00:06DE DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:06E0 -  -  -  -  		;
   70 00:06E0 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:06E0 -  -  -  -  		;
   72 00:06E0 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:06E1 CD B7 06 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:06E5 -  -  -  -  		;
   75 00:06E5 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:06E5 -  -  -  -  		;
   77 00:06E5 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:06E6 -  -  -  -  
   79 00:06E6 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:06E7 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:06E8 D9 -  -  -  		exx
   82 00:06E9 EB -  -  -  		ex 		de,hl
   83 00:06EA E1 -  -  -  		pop 	hl
   84 00:06EB D9 -  -  -  		exx
   85 00:06EC C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:06ED 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:06EE -  -  -  -  		;
   88 00:06EE -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:06EE -  -  -  -  		; 		is in B (type) DE'DE
   90 00:06EE -  -  -  -  		;
   91 00:06EE F1 -  -  -  		pop 	af 							; get operator in A
   92 00:06EF -  -  -  -  		;
   93 00:06EF -  -  -  -  		; 		Call the binary operator in A.
   94 00:06EF -  -  -  -  		;
   95 00:06EF D5 -  -  -  		push 	de
   96 00:06F0 E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:06F1 E6 7F 21 00 
              00 00 6F 29 
              29 11 E6 11 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0706 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0707 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0708 CD 64 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:070C -  -  -  -  		;
  102 00:070C D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:070D -  -  -  -  		;
  104 00:070D 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:070F -  -  -  -  
  106 00:070F -  -  -  -  ; ***************************************************************************************
  107 00:070F -  -  -  -  ;
  108 00:070F -  -  -  -  ;									Changes and Updates
  109 00:070F -  -  -  -  ;
  110 00:070F -  -  -  -  ; ***************************************************************************************
  111 00:070F -  -  -  -  ;
  112 00:070F -  -  -  -  ;		Date			Notes
  113 00:070F -  -  -  -  ;		==== 			=====
  114 00:070F -  -  -  -  ;
  115 00:070F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:070F -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:070F -  -  -  -  ; ***************************************************************************************
    2 00:070F -  -  -  -  ; ***************************************************************************************
    3 00:070F -  -  -  -  ;
    4 00:070F -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:070F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:070F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:070F -  -  -  -  ;		Reviewed :	No
    8 00:070F -  -  -  -  ;		Purpose :	Expression support functions
    9 00:070F -  -  -  -  ;
   10 00:070F -  -  -  -  ; ***************************************************************************************
   11 00:070F -  -  -  -  ; ***************************************************************************************
   12 00:070F -  -  -  -  
   13 00:070F -  -  -  -  ; ***************************************************************************************
   14 00:070F -  -  -  -  ;
   15 00:070F -  -  -  -  ; 								Evaluate an integer term
   16 00:070F -  -  -  -  ;
   17 00:070F -  -  -  -  ; ***************************************************************************************
   18 00:070F -  -  -  -  
   19 00:070F -  -  -  -  EvaluateIntegerTerm:
   20 00:070F CD C4 07 00 		call 	EvaluateTerm
   21 00:0713 CD 68 07 00 		call 	DeReference
   22 00:0717 CB 41 -  -  		bit 	CIsString,c
   23 00:0719 C8 -  -  -  		ret 	z
   24 00:071A C3 60 05 00 		jp 		TypeMismatch
   25 00:071E -  -  -  -  
   26 00:071E -  -  -  -  ; ***************************************************************************************
   27 00:071E -  -  -  -  ;
   28 00:071E -  -  -  -  ; 								Evaluate a string term
   29 00:071E -  -  -  -  ;
   30 00:071E -  -  -  -  ; ***************************************************************************************
   31 00:071E -  -  -  -  
   32 00:071E -  -  -  -  EvaluateStringTerm:
   33 00:071E CD C4 07 00 		call 	EvaluateTerm
   34 00:0722 CD 68 07 00 		call 	DeReference
   35 00:0726 CB 41 -  -  		bit 	CIsString,c
   36 00:0728 C0 -  -  -  		ret 	nz
   37 00:0729 C3 60 05 00 		jp 		TypeMismatch
   38 00:072D -  -  -  -  
   39 00:072D -  -  -  -  ; ***************************************************************************************
   40 00:072D -  -  -  -  ;
   41 00:072D -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:072D -  -  -  -  ;
   43 00:072D -  -  -  -  ; ***************************************************************************************
   44 00:072D -  -  -  -  
   45 00:072D -  -  -  -  EvaluateValue:
   46 00:072D CD B6 06 00 		call 	EvaluateAtPrecedence0
   47 00:0731 C3 68 07 00 		jp 		Dereference
   48 00:0735 -  -  -  -  
   49 00:0735 -  -  -  -  ; ***************************************************************************************
   50 00:0735 -  -  -  -  ;
   51 00:0735 -  -  -  -  ; 									Evaluate a number
   52 00:0735 -  -  -  -  ;
   53 00:0735 -  -  -  -  ; ***************************************************************************************
   54 00:0735 -  -  -  -  
   55 00:0735 -  -  -  -  EvaluateInteger:
   56 00:0735 CD 2D 07 00 		call 	EvaluateValue
   57 00:0739 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:073B C8 -  -  -  		ret 	z
   59 00:073C C3 60 05 00 		jp 		TypeMismatch
   60 00:0740 -  -  -  -  
   61 00:0740 -  -  -  -  ; ***************************************************************************************
   62 00:0740 -  -  -  -  ;
   63 00:0740 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:0740 -  -  -  -  ;
   65 00:0740 -  -  -  -  ; ***************************************************************************************
   66 00:0740 -  -  -  -  
   67 00:0740 -  -  -  -  Evaluate8BitInteger:
   68 00:0740 CD 35 07 00 		call 	EvaluateInteger
   69 00:0744 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:0745 7C -  -  -  		ld 		a,h
   71 00:0746 B5 -  -  -  		or 		l
   72 00:0747 D9 -  -  -  		exx 	
   73 00:0748 B4 -  -  -  		or 		h
   74 00:0749 C2 66 05 00 		jp 		nz,BadValue
   75 00:074D 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:074E C9 -  -  -  		ret
   77 00:074F -  -  -  -  		
   78 00:074F -  -  -  -  ; ***************************************************************************************
   79 00:074F -  -  -  -  ;
   80 00:074F -  -  -  -  ; 									Evaluate a string
   81 00:074F -  -  -  -  ;
   82 00:074F -  -  -  -  ; ***************************************************************************************
   83 00:074F -  -  -  -  
   84 00:074F -  -  -  -  EvaluateString:
   85 00:074F CD 2D 07 00 		call 	EvaluateValue
   86 00:0753 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:0755 CA 60 05 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:0759 C9 -  -  -  		ret
   89 00:075A -  -  -  -  
   90 00:075A -  -  -  -  ; ***************************************************************************************
   91 00:075A -  -  -  -  ;
   92 00:075A -  -  -  -  ; 								Return 8/16 bit constant
   93 00:075A -  -  -  -  ;
   94 00:075A -  -  -  -  ; ***************************************************************************************
   95 00:075A -  -  -  -  
   96 00:075A -  -  -  -  Return8BitConstant:
   97 00:075A 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:075E 6F -  -  -  		ld 		l,a
   99 00:075F -  -  -  -  Return16BitConstant:
  100 00:075F D9 -  -  -  		exx 								; clear HL'
  101 00:0760 21 00 00 00 		ld 		hl,0
  102 00:0764 D9 -  -  -  		exx
  103 00:0765 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0767 C9 -  -  -  		ret
  105 00:0768 -  -  -  -  
  106 00:0768 -  -  -  -  ; ***************************************************************************************
  107 00:0768 -  -  -  -  ;
  108 00:0768 -  -  -  -  ;									Changes and Updates
  109 00:0768 -  -  -  -  ;
  110 00:0768 -  -  -  -  ; ***************************************************************************************
  111 00:0768 -  -  -  -  ;
  112 00:0768 -  -  -  -  ;		Date			Notes
  113 00:0768 -  -  -  -  ;		==== 			=====
  114 00:0768 -  -  -  -  ;
  115 00:0768 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0768 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0768 -  -  -  -  ; ***************************************************************************************
    2 00:0768 -  -  -  -  ; ***************************************************************************************
    3 00:0768 -  -  -  -  ;
    4 00:0768 -  -  -  -  ;		Name : 		reference.asm
    5 00:0768 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0768 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0768 -  -  -  -  ;		Reviewed :	No
    8 00:0768 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0768 -  -  -  -  ;
   10 00:0768 -  -  -  -  ; ***************************************************************************************
   11 00:0768 -  -  -  -  ; ***************************************************************************************
   12 00:0768 -  -  -  -  
   13 00:0768 -  -  -  -  ; ***************************************************************************************
   14 00:0768 -  -  -  -  ;
   15 00:0768 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0768 -  -  -  -  ;
   17 00:0768 -  -  -  -  ; ***************************************************************************************
   18 00:0768 -  -  -  -  
   19 00:0768 -  -  -  -  Dereference:
   20 00:0768 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:076A C8 -  -  -  		ret 	z
   22 00:076B -  -  -  -  
   23 00:076B CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:076D -  -  -  -  		
   25 00:076D CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:076F 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0771 -  -  -  -  
   28 00:0771 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:0773 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:0775 -  -  -  -  
   31 00:0775 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0776 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0778 D9 -  -  -  		exx
   34 00:0779 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:077A 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:077B 23 -  -  -  		inc  	hl
   37 00:077C ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:077E D9 -  -  -  		exx 								; fix back
   39 00:077F C9 -  -  -  		ret
   40 00:0780 -  -  -  -  
   41 00:0780 -  -  -  -  _DeRefByte:		
   42 00:0780 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0781 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:0785 6F -  -  -  		ld	 	l,a
   45 00:0786 D9 -  -  -  		exx
   46 00:0787 21 00 00 00 		ld 		hl,$0000
   47 00:078B D9 -  -  -  		exx
   48 00:078C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:078E C9 -  -  -  		ret
   50 00:078F -  -  -  -  
   51 00:078F -  -  -  -  _DRInternal:
   52 00:078F 3E 06 C3 02 
              05 00 -  -  		ERR_DISABLED
   53 00:0795 -  -  -  -  
   54 00:0795 -  -  -  -  ; ***************************************************************************************
   55 00:0795 -  -  -  -  ;
   56 00:0795 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:0795 -  -  -  -  ;
   58 00:0795 -  -  -  -  ; ***************************************************************************************
   59 00:0795 -  -  -  -  
   60 00:0795 -  -  -  -  DRConvertHLHLToAddress:
   61 00:0795 -  -  -  -  		#ifdef EZ80
   62 00:0795 22 6A 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0799 D9 -  -  -  		exx
   64 00:079A 22 6C 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:079E 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:07A2 D9 -  -  -  		exx
   67 00:07A3 2A 6A 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:07A7 -  -  -  -  		#endif
   69 00:07A7 C9 -  -  -  		ret
   70 00:07A8 -  -  -  -  
   71 00:07A8 -  -  -  -  ; ***************************************************************************************
   72 00:07A8 -  -  -  -  ;
   73 00:07A8 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:07A8 -  -  -  -  ;
   75 00:07A8 -  -  -  -  ; ***************************************************************************************
   76 00:07A8 -  -  -  -  
   77 00:07A8 -  -  -  -  DRConvertAddressToHLHL:
   78 00:07A8 -  -  -  -  		#ifdef EZ80
   79 00:07A8 22 6A 00 00 		ld 		(AConvert),hl
   80 00:07AC 21 00 00 00 		ld 		hl,$0000
   81 00:07B0 22 6D 00 00 		ld 		(AConvert+3),hl
   82 00:07B4 D9 -  -  -  		exx
   83 00:07B5 2A 6C 00 00 		ld 		hl,(AConvert+2)
   84 00:07B9 D9 -  -  -  		exx
   85 00:07BA AF -  -  -  		xor 	a
   86 00:07BB 32 6C 00 00 		ld 		(AConvert+2),a
   87 00:07BF 2A 6A 00 00 		ld 		hl,(AConvert)
   88 00:07C3 -  -  -  -  		#endif
   89 00:07C3 C9 -  -  -  		ret
   90 00:07C4 -  -  -  -  
   91 00:07C4 -  -  -  -  ; ***************************************************************************************
   92 00:07C4 -  -  -  -  ;
   93 00:07C4 -  -  -  -  ;									Changes and Updates
   94 00:07C4 -  -  -  -  ;
   95 00:07C4 -  -  -  -  ; ***************************************************************************************
   96 00:07C4 -  -  -  -  ;
   97 00:07C4 -  -  -  -  ;		Date			Notes
   98 00:07C4 -  -  -  -  ;		==== 			=====
   99 00:07C4 -  -  -  -  ;
  100 00:07C4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:07C4 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:07C4 -  -  -  -  ; ***************************************************************************************
    2 00:07C4 -  -  -  -  ; ***************************************************************************************
    3 00:07C4 -  -  -  -  ;
    4 00:07C4 -  -  -  -  ;		Name : 		term.asm
    5 00:07C4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07C4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07C4 -  -  -  -  ;		Reviewed :	No
    8 00:07C4 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:07C4 -  -  -  -  ;
   10 00:07C4 -  -  -  -  ; ***************************************************************************************
   11 00:07C4 -  -  -  -  ; ***************************************************************************************
   12 00:07C4 -  -  -  -  
   13 00:07C4 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:07C4             		add_hlhl_16
   15 00:07C4             		exx
   16 00:07C4             		adc_hlhl_16
   17 00:07C4             		exx
   18 00:07C4             #endmacro
   19 00:07C4 -  -  -  -  
   20 00:07C4 -  -  -  -  ; ***************************************************************************************
   21 00:07C4 -  -  -  -  ;
   22 00:07C4 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:07C4 -  -  -  -  ;
   24 00:07C4 -  -  -  -  ; ***************************************************************************************
   25 00:07C4 -  -  -  -  ;
   26 00:07C4 -  -  -  -  ; 		Terms can be:
   27 00:07C4 -  -  -  -  ;
   28 00:07C4 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:07C4 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:07C4 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:07C4 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:07C4 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:07C4 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:07C4 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:07C4 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:07C4 -  -  -  -  ; 														reference of some sort.
   37 00:07C4 -  -  -  -  ;
   38 00:07C4 -  -  -  -  ; ***************************************************************************************
   39 00:07C4 -  -  -  -  
   40 00:07C4 -  -  -  -  EvaluateTerm:		
   41 00:07C4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:07C6 D9 -  -  -  		exx
   43 00:07C7 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:07CB D9 -  -  -  		exx
   45 00:07CC 21 00 00 00 		ld 		hl,$0000		
   46 00:07D0 -  -  -  -  		;
   47 00:07D0 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:07D3 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:07D5 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:07D7 DA 8F 08 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:07DB CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:07DD C2 33 08 00 		jp 		nz,_ETFoundKeyword 
   53 00:07E1 -  -  -  -  		;
   54 00:07E1 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:07E1 -  -  -  -  		;
   56 00:07E1 -  -  -  -  _ETIntegerConstant:
   57 00:07E1 -  -  -  -  		;
   58 00:07E1 -  -  -  -  _ETIntegerLoop:		
   59 00:07E1 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:07E4 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:07E6 B5 -  -  -  		or 		l 							; or into L
   62 00:07E7 6F -  -  -  		ld 		l,a
   63 00:07E8 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:07EA DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:07ED C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:07EF FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:07F1 D8 -  -  -  		ret 	c
   68 00:07F2 -  -  -  -  
   69 00:07F2 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:07F9 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:0800 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0807 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:080E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0815 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:081C -  -  -  -  
   76 00:081C 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:081E -  -  -  -  		;
   78 00:081E -  -  -  -  		; 		Found the $3F string marker.
   79 00:081E -  -  -  -  		;
   80 00:081E -  -  -  -  _ETStringMarker:		
   81 00:081E DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:0820 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:0822 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:0824 E1 -  -  -  		pop 	hl
   85 00:0825 11 00 00 00 		ld 		de,$0000
   86 00:0829 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:082C DD 19 -  -  		add 	ix,de
   88 00:082E DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:0830 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:0832 C9 -  -  -  		ret
   91 00:0833 -  -  -  -  		;
   92 00:0833 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:0833 -  -  -  -  		;
   94 00:0833 -  -  -  -  _ETFoundKeyword:
   95 00:0833 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:0835 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0837 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0839 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:083B 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:083D -  -  -  -  		;
  101 00:083D -  -  -  -  		;		Unary group 0
  102 00:083D -  -  -  -  		;
  103 00:083D E6 7F 21 00 
              00 00 6F 29 
              29 11 E6 11 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:0852 C3 64 00 00 		jp 		JumpCode 					; and go there.
  105 00:0856 -  -  -  -  
  106 00:0856 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0856 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0858 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:085A -  -  -  -  		;
  110 00:085A -  -  -  -  		; 		- term
  111 00:085A -  -  -  -  		;
  112 00:085A CD 0F 07 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:085E CD A5 06 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:0862 C9 -  -  -  		ret
  115 00:0863 -  -  -  -  		;
  116 00:0863 -  -  -  -  		;		! ? indirection check
  117 00:0863 -  -  -  -  		;
  118 00:0863 -  -  -  -  _ETCheckIndirection:	
  119 00:0863 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:0865 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0867 FE 83 -  -  		cp 		KWD_PLING
  122 00:0869 C2 6C 05 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:086D -  -  -  -  		;
  124 00:086D -  -  -  -  		; 		! ? indirection
  125 00:086D -  -  -  -  		;
  126 00:086D -  -  -  -  _ETIndirection:
  127 00:086D F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:086E CD C4 07 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:0872 CD 68 07 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0876 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0878 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:087A CD 95 07 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:087E F1 -  -  -  		pop 	af 							; get type back
  134 00:087F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:0881 CB F9 -  -  		set 	CIsReference,c
  136 00:0883 FE 83 -  -  		cp 		KWD_PLING
  137 00:0885 C8 -  -  -  		ret 	z
  138 00:0886 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0888 C9 -  -  -  		ret
  140 00:0889 -  -  -  -  _ETStringIndirect:
  141 00:0889 3E 02 C3 02 
              05 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:088F -  -  -  -  		;
  143 00:088F -  -  -  -  		; 		Found an identifier.
  144 00:088F -  -  -  -  		;
  145 00:088F -  -  -  -  _ETVariable:
  146 00:088F CD BB 0E 00 		call 	FindVariable 				; find the variable.
  147 00:0893 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:0894 3E 1A C3 02 
              05 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:089A -  -  -  -  		
  150 00:089A -  -  -  -  ; ***************************************************************************************
  151 00:089A -  -  -  -  ;
  152 00:089A -  -  -  -  ;									Changes and Updates
  153 00:089A -  -  -  -  ;
  154 00:089A -  -  -  -  ; ***************************************************************************************
  155 00:089A -  -  -  -  ;
  156 00:089A -  -  -  -  ;		Date			Notes
  157 00:089A -  -  -  -  ;		==== 			=====
  158 00:089A -  -  -  -  ;
  159 00:089A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:089A -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:089A -  -  -  -  ; ***************************************************************************************
    2 00:089A -  -  -  -  ; ***************************************************************************************
    3 00:089A -  -  -  -  ;
    4 00:089A -  -  -  -  ;		Name : 		abs.asm
    5 00:089A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:089A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:089A -  -  -  -  ;		Reviewed :	No
    8 00:089A -  -  -  -  ;		Purpose :	Absolute value 
    9 00:089A -  -  -  -  ;
   10 00:089A -  -  -  -  ; ***************************************************************************************
   11 00:089A -  -  -  -  ; ***************************************************************************************
   12 00:089A -  -  -  -  
   13 00:089A -  -  -  -  ; ***************************************************************************************
   14 00:089A -  -  -  -  ;
   15 00:089A -  -  -  -  ;								abs( unary function
   16 00:089A -  -  -  -  ;
   17 00:089A -  -  -  -  ; ***************************************************************************************
   18 00:089A -  -  -  -  
   19 00:089A -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:089A CD 0F 07 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:089E D9 -  -  -  		exx 								; test MSB
   22 00:089F CB 7C -  -  		bit 	7,h
   23 00:08A1 D9 -  -  -  		exx
   24 00:08A2 C4 A5 06 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:08A6 C9 -  -  -  		ret
   26 00:08A7 -  -  -  -  
   27 00:08A7 -  -  -  -  ; ***************************************************************************************
   28 00:08A7 -  -  -  -  ;
   29 00:08A7 -  -  -  -  ;									Changes and Updates
   30 00:08A7 -  -  -  -  ;
   31 00:08A7 -  -  -  -  ; ***************************************************************************************
   32 00:08A7 -  -  -  -  ;
   33 00:08A7 -  -  -  -  ;		Date			Notes
   34 00:08A7 -  -  -  -  ;		==== 			=====
   35 00:08A7 -  -  -  -  ;
   36 00:08A7 -  -  -  -  ; ***************************************************************************************
   37 00:08A7 -  -  -  -  		
Listing for file "_build.asm"
   39 00:08A7 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:08A7 -  -  -  -  ; ***************************************************************************************
    2 00:08A7 -  -  -  -  ; ***************************************************************************************
    3 00:08A7 -  -  -  -  ;
    4 00:08A7 -  -  -  -  ;		Name : 		asc.asm
    5 00:08A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08A7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08A7 -  -  -  -  ;		Reviewed :	No
    8 00:08A7 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:08A7 -  -  -  -  ;
   10 00:08A7 -  -  -  -  ; ***************************************************************************************
   11 00:08A7 -  -  -  -  ; ***************************************************************************************
   12 00:08A7 -  -  -  -  
   13 00:08A7 -  -  -  -  ; ***************************************************************************************
   14 00:08A7 -  -  -  -  ;
   15 00:08A7 -  -  -  -  ;								Asc unary function
   16 00:08A7 -  -  -  -  ;
   17 00:08A7 -  -  -  -  ; ***************************************************************************************
   18 00:08A7 -  -  -  -  
   19 00:08A7 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:08A7 CD 1E 07 00 		call	EvaluateStringTerm			; Get string
   21 00:08AB 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:08AC C3 5A 07 00 		jp 		Return8BitConstant
   23 00:08B0 -  -  -  -  
   24 00:08B0 -  -  -  -  ; ***************************************************************************************
   25 00:08B0 -  -  -  -  ;
   26 00:08B0 -  -  -  -  ;									Changes and Updates
   27 00:08B0 -  -  -  -  ;
   28 00:08B0 -  -  -  -  ; ***************************************************************************************
   29 00:08B0 -  -  -  -  ;
   30 00:08B0 -  -  -  -  ;		Date			Notes
   31 00:08B0 -  -  -  -  ;		==== 			=====
   32 00:08B0 -  -  -  -  ;
   33 00:08B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:08B0 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:08B0 -  -  -  -  ; ***************************************************************************************
    2 00:08B0 -  -  -  -  ; ***************************************************************************************
    3 00:08B0 -  -  -  -  ;
    4 00:08B0 -  -  -  -  ;		Name : 		chr.asm
    5 00:08B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08B0 -  -  -  -  ;		Reviewed :	No
    8 00:08B0 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:08B0 -  -  -  -  ;
   10 00:08B0 -  -  -  -  ; ***************************************************************************************
   11 00:08B0 -  -  -  -  ; ***************************************************************************************
   12 00:08B0 -  -  -  -  
   13 00:08B0 -  -  -  -  ; ***************************************************************************************
   14 00:08B0 -  -  -  -  ;
   15 00:08B0 -  -  -  -  ;								Chr$() unary function
   16 00:08B0 -  -  -  -  ;
   17 00:08B0 -  -  -  -  ; ***************************************************************************************
   18 00:08B0 -  -  -  -  
   19 00:08B0 -  -  -  -  Unary_Chr:	;; [chr]
   20 00:08B0 CD DA 04 00 		call 	CheckDollar
   21 00:08B4 CD 0F 07 00 		call 	EvaluateIntegerTerm
   22 00:08B8 7D -  -  -  		ld 		a,l 						; get character
   23 00:08B9 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:08BB 21 A5 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:08BF 36 0D -  -  		ld 		(hl),13
   26 00:08C1 2B -  -  -  		dec 	hl
   27 00:08C2 77 -  -  -  		ld 		(hl),a
   28 00:08C3 C9 -  -  -  		ret
   29 00:08C4 -  -  -  -  
   30 00:08C4 -  -  -  -  ; ***************************************************************************************
   31 00:08C4 -  -  -  -  ;
   32 00:08C4 -  -  -  -  ;									Changes and Updates
   33 00:08C4 -  -  -  -  ;
   34 00:08C4 -  -  -  -  ; ***************************************************************************************
   35 00:08C4 -  -  -  -  ;
   36 00:08C4 -  -  -  -  ;		Date			Notes
   37 00:08C4 -  -  -  -  ;		==== 			=====
   38 00:08C4 -  -  -  -  ;
   39 00:08C4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:08C4 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:08C4 -  -  -  -  ; ***************************************************************************************
    2 00:08C4 -  -  -  -  ; ***************************************************************************************
    3 00:08C4 -  -  -  -  ;
    4 00:08C4 -  -  -  -  ;		Name : 		len.asm
    5 00:08C4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08C4 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08C4 -  -  -  -  ;		Reviewed :	None
    8 00:08C4 -  -  -  -  ;		Purpose :	String Length
    9 00:08C4 -  -  -  -  ;
   10 00:08C4 -  -  -  -  ; ***************************************************************************************
   11 00:08C4 -  -  -  -  ; ***************************************************************************************
   12 00:08C4 -  -  -  -  
   13 00:08C4 -  -  -  -  ; ***************************************************************************************
   14 00:08C4 -  -  -  -  ;
   15 00:08C4 -  -  -  -  ;								Len unary function
   16 00:08C4 -  -  -  -  ;
   17 00:08C4 -  -  -  -  ; ***************************************************************************************
   18 00:08C4 -  -  -  -  
   19 00:08C4 -  -  -  -  Unary_Len:	;; [len]
   20 00:08C4 CD 1E 07 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:08C8 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:08C9 CD 0D 06 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:08CD -  -  -  -  _ULCount:
   24 00:08CD 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:08CE FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:08D0 D8 -  -  -  		ret 	c
   27 00:08D1 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:08D2 13 -  -  -  		inc 	de
   29 00:08D3 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:08D5 -  -  -  -  
   31 00:08D5 -  -  -  -  ; ***************************************************************************************
   32 00:08D5 -  -  -  -  ;
   33 00:08D5 -  -  -  -  ;									Changes and Updates
   34 00:08D5 -  -  -  -  ;
   35 00:08D5 -  -  -  -  ; ***************************************************************************************
   36 00:08D5 -  -  -  -  ;
   37 00:08D5 -  -  -  -  ;		Date			Notes
   38 00:08D5 -  -  -  -  ;		==== 			=====
   39 00:08D5 -  -  -  -  ;
   40 00:08D5 -  -  -  -  ; ***************************************************************************************
   41 00:08D5 -  -  -  -  		
Listing for file "_build.asm"
   42 00:08D5 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:08D5 -  -  -  -  ; ***************************************************************************************
    2 00:08D5 -  -  -  -  ; ***************************************************************************************
    3 00:08D5 -  -  -  -  ;
    4 00:08D5 -  -  -  -  ;		Name : 		makestring.asm
    5 00:08D5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08D5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08D5 -  -  -  -  ;		Reviewed :	No
    8 00:08D5 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:08D5 -  -  -  -  ;
   10 00:08D5 -  -  -  -  ; ***************************************************************************************
   11 00:08D5 -  -  -  -  ; ***************************************************************************************
   12 00:08D5 -  -  -  -  
   13 00:08D5 -  -  -  -  ; ***************************************************************************************
   14 00:08D5 -  -  -  -  ;
   15 00:08D5 -  -  -  -  ;								Str$() unary function
   16 00:08D5 -  -  -  -  ;
   17 00:08D5 -  -  -  -  ; ***************************************************************************************
   18 00:08D5 -  -  -  -  
   19 00:08D5 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:08D5 CD 0F 07 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:08D9 CD 95 07 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:08DD 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:08DF C9 -  -  -  		ret
   24 00:08E0 -  -  -  -  
   25 00:08E0 -  -  -  -  ; ***************************************************************************************
   26 00:08E0 -  -  -  -  ;
   27 00:08E0 -  -  -  -  ;									Changes and Updates
   28 00:08E0 -  -  -  -  ;
   29 00:08E0 -  -  -  -  ; ***************************************************************************************
   30 00:08E0 -  -  -  -  ;
   31 00:08E0 -  -  -  -  ;		Date			Notes
   32 00:08E0 -  -  -  -  ;		==== 			=====
   33 00:08E0 -  -  -  -  ;
   34 00:08E0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:08E0 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:08E0 -  -  -  -  ; ***************************************************************************************
    2 00:08E0 -  -  -  -  ; ***************************************************************************************
    3 00:08E0 -  -  -  -  ;
    4 00:08E0 -  -  -  -  ;		Name : 		not.asm
    5 00:08E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08E0 -  -  -  -  ;		Date : 		5th June 2023
    7 00:08E0 -  -  -  -  ;		Reviewed :	No
    8 00:08E0 -  -  -  -  ;		Purpose :	Logical not
    9 00:08E0 -  -  -  -  ;
   10 00:08E0 -  -  -  -  ; ***************************************************************************************
   11 00:08E0 -  -  -  -  ; ***************************************************************************************
   12 00:08E0 -  -  -  -  
   13 00:08E0 -  -  -  -  ; ***************************************************************************************
   14 00:08E0 -  -  -  -  ;
   15 00:08E0 -  -  -  -  ;							not(x) e.g. one's complement
   16 00:08E0 -  -  -  -  ;
   17 00:08E0 -  -  -  -  ; ***************************************************************************************
   18 00:08E0 -  -  -  -  
   19 00:08E0 -  -  -  -  Unary_Not:		;; [not]
   20 00:08E0 CD 0F 07 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:08E4 CD ED 08 00 		call 	__UNSwap 					; not and swap twice.
   22 00:08E8 CD ED 08 00 		call 	__UNSwap		
   23 00:08EC C9 -  -  -  		ret
   24 00:08ED -  -  -  -  
   25 00:08ED -  -  -  -  __UNSwap:
   26 00:08ED 7C -  -  -  		ld 		a,h
   27 00:08EE 2F -  -  -  		cpl
   28 00:08EF 67 -  -  -  		ld 		h,a
   29 00:08F0 7D -  -  -  		ld 		a,l
   30 00:08F1 2F -  -  -  		cpl 	
   31 00:08F2 6F -  -  -  		ld 		l,a
   32 00:08F3 D9 -  -  -  		exx
   33 00:08F4 C9 -  -  -  		ret
   34 00:08F5 -  -  -  -  
   35 00:08F5 -  -  -  -  ; ***************************************************************************************
   36 00:08F5 -  -  -  -  ;
   37 00:08F5 -  -  -  -  ;									Changes and Updates
   38 00:08F5 -  -  -  -  ;
   39 00:08F5 -  -  -  -  ; ***************************************************************************************
   40 00:08F5 -  -  -  -  ;
   41 00:08F5 -  -  -  -  ;		Date			Notes
   42 00:08F5 -  -  -  -  ;		==== 			=====
   43 00:08F5 -  -  -  -  ;
   44 00:08F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:08F5 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:08F5 -  -  -  -  ; ***************************************************************************************
    2 00:08F5 -  -  -  -  ; ***************************************************************************************
    3 00:08F5 -  -  -  -  ;
    4 00:08F5 -  -  -  -  ;		Name : 		page.asm
    5 00:08F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F5 -  -  -  -  ;		Reviewed :	No
    8 00:08F5 -  -  -  -  ;		Purpose :	Various constants.
    9 00:08F5 -  -  -  -  ;
   10 00:08F5 -  -  -  -  ; ***************************************************************************************
   11 00:08F5 -  -  -  -  ; ***************************************************************************************
   12 00:08F5 -  -  -  -  
   13 00:08F5 -  -  -  -  ; ***************************************************************************************
   14 00:08F5 -  -  -  -  ;
   15 00:08F5 -  -  -  -  ;							page unary function (no bracket)
   16 00:08F5 -  -  -  -  ;
   17 00:08F5 -  -  -  -  ; ***************************************************************************************
   18 00:08F5 -  -  -  -  
   19 00:08F5 -  -  -  -  Unary_Page:	;; [page]
   20 00:08F5 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:08F9 D9 -  -  -  			exx
   22 00:08FA 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:08FE D9 -  -  -  			exx
   24 00:08FF 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0901 C9 -  -  -  			ret
   26 00:0902 -  -  -  -  
   27 00:0902 -  -  -  -  ; ***************************************************************************************
   28 00:0902 -  -  -  -  ;
   29 00:0902 -  -  -  -  ;									Changes and Updates
   30 00:0902 -  -  -  -  ;
   31 00:0902 -  -  -  -  ; ***************************************************************************************
   32 00:0902 -  -  -  -  ;
   33 00:0902 -  -  -  -  ;		Date			Notes
   34 00:0902 -  -  -  -  ;		==== 			=====
   35 00:0902 -  -  -  -  ;
   36 00:0902 -  -  -  -  ; ***************************************************************************************
   37 00:0902 -  -  -  -  			
Listing for file "_build.asm"
   45 00:0902 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:0902 -  -  -  -  ; ***************************************************************************************
    2 00:0902 -  -  -  -  ; ***************************************************************************************
    3 00:0902 -  -  -  -  ;
    4 00:0902 -  -  -  -  ;		Name : 		random.asm
    5 00:0902 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0902 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0902 -  -  -  -  ;		Reviewed :	No
    8 00:0902 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:0902 -  -  -  -  ;
   10 00:0902 -  -  -  -  ; ***************************************************************************************
   11 00:0902 -  -  -  -  ; ***************************************************************************************
   12 00:0902 -  -  -  -  
   13 00:0902 -  -  -  -  ; ***************************************************************************************
   14 00:0902 -  -  -  -  ;
   15 00:0902 -  -  -  -  ;								Random unary function
   16 00:0902 -  -  -  -  ;
   17 00:0902 -  -  -  -  ; ***************************************************************************************
   18 00:0902 -  -  -  -  
   19 00:0902 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:0902 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:090A CD 0F 07 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:090E D9 -  -  -  		exx 								; is it -ve
   23 00:090F CB 7C -  -  		bit 	7,h
   24 00:0911 D9 -  -  -  		exx
   25 00:0912 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:0914 22 70 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0918 D9 -  -  -  		exx
   28 00:0919 22 74 00 00 		ld 		(RandomSeed+4),hl
   29 00:091D D9 -  -  -  		exx
   30 00:091E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:0920 C9 -  -  -  		ret
   32 00:0921 -  -  -  -  _URDontSeed:		
   33 00:0921 -  -  -  -  
   34 00:0921 CD 95 14 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:0925 28 1C -  -  		jr 		z,_URFail
   36 00:0927 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0928 D9 -  -  -  		exx
   38 00:0929 E5 -  -  -  		push 	hl
   39 00:092A D9 -  -  -  		exx
   40 00:092B -  -  -  -  		;
   41 00:092B CD 54 09 00 		call 	URandomHL 					; get random HL'HL
   42 00:092F D9 -  -  -  		exx
   43 00:0930 CD 54 09 00 		call 	URandomHL
   44 00:0934 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0936 D9 -  -  -  		exx
   46 00:0937 -  -  -  -  		;
   47 00:0937 D9 -  -  -  		exx 								; restore range.
   48 00:0938 D1 -  -  -  		pop 	de
   49 00:0939 D9 -  -  -  		exx
   50 00:093A D1 -  -  -  		pop 	de
   51 00:093B -  -  -  -  		;
   52 00:093B CD 26 13 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:093F 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:0940 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:0942 C9 -  -  -  		ret
   56 00:0943 -  -  -  -  _URFail:
   57 00:0943 3E 03 C3 02 
              05 00 -  -  		ERR_BADVALUE
   58 00:0949 -  -  -  -  ; ***************************************************************************************
   59 00:0949 -  -  -  -  ;
   60 00:0949 -  -  -  -  ; 									Push RNG off zero
   61 00:0949 -  -  -  -  ;
   62 00:0949 -  -  -  -  ; ***************************************************************************************
   63 00:0949 -  -  -  -  
   64 00:0949 -  -  -  -  UnaryRandomInitialise:
   65 00:0949 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:094B -  -  -  -  _URILoop:
   67 00:094B C5 -  -  -  		push 	bc
   68 00:094C CD 54 09 00 		call 	URandomHL
   69 00:0950 C1 -  -  -  		pop 	bc
   70 00:0951 10 F8 -  -  		djnz 	_URILoop
   71 00:0953 C9 -  -  -  		ret
   72 00:0954 -  -  -  -  
   73 00:0954 -  -  -  -  ; ***************************************************************************************
   74 00:0954 -  -  -  -  ;
   75 00:0954 -  -  -  -  ;							16 bit random number generator
   76 00:0954 -  -  -  -  ;
   77 00:0954 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:0954 -  -  -  -  ;		Actual author unspecified.
   79 00:0954 -  -  -  -  ;
   80 00:0954 -  -  -  -  ; ***************************************************************************************
   81 00:0954 -  -  -  -  
   82 00:0954 -  -  -  -  URandomHL:
   83 00:0954 2A 70 00 00 	    ld 		hl,(RandomSeed)
   84 00:0958 ED 5B 74 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:095D 44 -  -  -  	    ld 		b,h
   86 00:095E 4D -  -  -  	    ld 		c,l
   87 00:095F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:0964 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0969 2C -  -  -  	    inc 	l
   90 00:096A 09 -  -  -  	    add 	hl,bc
   91 00:096B 22 70 00 00 	    ld 		(RandomSeed),hl
   92 00:096F 2A 74 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:0973 ED 5A -  -  	    adc 	hl,de
   94 00:0975 22 74 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0979 EB -  -  -  	    ex 		de,hl
   96 00:097A 2A 78 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:097E ED 4B 7C 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:0983 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0988 ED 43 7C 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:098D 9F -  -  -  	    sbc 	a,a
  101 00:098E E6 C5 -  -  	    and 	%11000101
  102 00:0990 AD -  -  -  	    xor 	l
  103 00:0991 6F -  -  -  	    ld 		l,a
  104 00:0992 22 78 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0996 EB -  -  -  	    ex 		de,hl
  106 00:0997 09 -  -  -  	    add 	hl,bc
  107 00:0998 C9 -  -  -  	    ret		
  108 00:0999 -  -  -  -  
  109 00:0999 -  -  -  -  ; ***************************************************************************************
  110 00:0999 -  -  -  -  ;
  111 00:0999 -  -  -  -  ;									Changes and Updates
  112 00:0999 -  -  -  -  ;
  113 00:0999 -  -  -  -  ; ***************************************************************************************
  114 00:0999 -  -  -  -  ;
  115 00:0999 -  -  -  -  ;		Date			Notes
  116 00:0999 -  -  -  -  ;		==== 			=====
  117 00:0999 -  -  -  -  ;
  118 00:0999 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:0999 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0999 -  -  -  -  ; ***************************************************************************************
    2 00:0999 -  -  -  -  ; ***************************************************************************************
    3 00:0999 -  -  -  -  ;
    4 00:0999 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0999 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0999 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0999 -  -  -  -  ;		Reviewed :	No
    8 00:0999 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0999 -  -  -  -  ;
   10 00:0999 -  -  -  -  ; ***************************************************************************************
   11 00:0999 -  -  -  -  ; ***************************************************************************************
   12 00:0999 -  -  -  -  
   13 00:0999 -  -  -  -  ; ***************************************************************************************
   14 00:0999 -  -  -  -  ;
   15 00:0999 -  -  -  -  ;								sgn unary function
   16 00:0999 -  -  -  -  ;
   17 00:0999 -  -  -  -  ; ***************************************************************************************
   18 00:0999 -  -  -  -  
   19 00:0999 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0999 CD 0F 07 00 		call	EvaluateIntegerTerm 		; get value
   21 00:099D CD 95 14 00 		call 	Int32Zero 					; integer sgn() code
   22 00:09A1 CA 0D 06 00 		jp 		z,UnaryInt32False
   23 00:09A5 D9 -  -  -  		exx
   24 00:09A6 CB 7C -  -  		bit 	7,h
   25 00:09A8 D9 -  -  -  		exx
   26 00:09A9 C2 09 06 00 		jp 		nz,UnaryInt32True
   27 00:09AD 3E 01 -  -  		ld 		a,1
   28 00:09AF C3 5A 07 00 		jp 		Return8BitConstant
   29 00:09B3 -  -  -  -  
   30 00:09B3 -  -  -  -  ; ***************************************************************************************
   31 00:09B3 -  -  -  -  ;
   32 00:09B3 -  -  -  -  ;									Changes and Updates
   33 00:09B3 -  -  -  -  ;
   34 00:09B3 -  -  -  -  ; ***************************************************************************************
   35 00:09B3 -  -  -  -  ;
   36 00:09B3 -  -  -  -  ;		Date			Notes
   37 00:09B3 -  -  -  -  ;		==== 			=====
   38 00:09B3 -  -  -  -  ;
   39 00:09B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:09B3 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:09B3 -  -  -  -  ; ***************************************************************************************
    2 00:09B3 -  -  -  -  ; ***************************************************************************************
    3 00:09B3 -  -  -  -  ;
    4 00:09B3 -  -  -  -  ;		Name : 		simple.asm
    5 00:09B3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09B3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09B3 -  -  -  -  ;		Reviewed :	No
    8 00:09B3 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:09B3 -  -  -  -  ;
   10 00:09B3 -  -  -  -  ; ***************************************************************************************
   11 00:09B3 -  -  -  -  ; ***************************************************************************************
   12 00:09B3 -  -  -  -  
   13 00:09B3 -  -  -  -  ; ***************************************************************************************
   14 00:09B3 -  -  -  -  ;
   15 00:09B3 -  -  -  -  ;								( unary function (think about it)
   16 00:09B3 -  -  -  -  ;
   17 00:09B3 -  -  -  -  ; ***************************************************************************************
   18 00:09B3 -  -  -  -  
   19 00:09B3 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:09B3 CD B6 06 00 		call 	EvaluateAtPrecedence0
   21 00:09B7 C3 CC 04 00 		jp  	CheckRightBracket
   22 00:09BB -  -  -  -  
   23 00:09BB -  -  -  -  ; ***************************************************************************************
   24 00:09BB -  -  -  -  ;
   25 00:09BB -  -  -  -  ;									Handle &x
   26 00:09BB -  -  -  -  ;
   27 00:09BB -  -  -  -  ; ***************************************************************************************
   28 00:09BB -  -  -  -  
   29 00:09BB -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:09BB DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:09BE E6 C0 -  -  		and 		$C0
   32 00:09C0 FE 40 -  -  		cp 			$40
   33 00:09C2 C2 6C 05 00 		jp 			nz,SyntaxError 			; no then error
   34 00:09C6 C3 C4 07 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:09CA -  -  -  -  
   36 00:09CA -  -  -  -  ; ***************************************************************************************
   37 00:09CA -  -  -  -  ;
   38 00:09CA -  -  -  -  ;									Changes and Updates
   39 00:09CA -  -  -  -  ;
   40 00:09CA -  -  -  -  ; ***************************************************************************************
   41 00:09CA -  -  -  -  ;
   42 00:09CA -  -  -  -  ;		Date			Notes
   43 00:09CA -  -  -  -  ;		==== 			=====
   44 00:09CA -  -  -  -  ;
   45 00:09CA -  -  -  -  ; ***************************************************************************************
   46 00:09CA -  -  -  -  		
Listing for file "_build.asm"
   48 00:09CA -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:09CA -  -  -  -  ; ***************************************************************************************
    2 00:09CA -  -  -  -  ; ***************************************************************************************
    3 00:09CA -  -  -  -  ;
    4 00:09CA -  -  -  -  ;		Name : 		str.asm
    5 00:09CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09CA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09CA -  -  -  -  ;		Reviewed :	No
    8 00:09CA -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:09CA -  -  -  -  ;
   10 00:09CA -  -  -  -  ; ***************************************************************************************
   11 00:09CA -  -  -  -  ; ***************************************************************************************
   12 00:09CA -  -  -  -  
   13 00:09CA -  -  -  -  ; ***************************************************************************************
   14 00:09CA -  -  -  -  ;
   15 00:09CA -  -  -  -  ;								Str$() unary function
   16 00:09CA -  -  -  -  ;
   17 00:09CA -  -  -  -  ; ***************************************************************************************
   18 00:09CA -  -  -  -  
   19 00:09CA -  -  -  -  Unary_Str:	;; [str]
   20 00:09CA CD DA 04 00 		call 	CheckDollar
   21 00:09CE DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:09D1 EE AC -  -  		xor		KWD_TILDE
   23 00:09D3 F5 -  -  -  		push 	af
   24 00:09D4 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:09D6 DD 23 -  -  		inc 	ix
   26 00:09D8 -  -  -  -  _USNotHex:		
   27 00:09D8 CD 0F 07 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:09DC 01 94 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:09E0 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:09E1 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:09E3 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:09E5 3E 10 -  -  		ld 		a,16
   33 00:09E7 -  -  -  -  _USNotHex2:		
   34 00:09E7 CD DD 14 00 		call 	Int32ToString 				
   35 00:09EB 21 94 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:09EF 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:09F1 C9 -  -  -  		ret
   38 00:09F2 -  -  -  -  
   39 00:09F2 -  -  -  -  ; ***************************************************************************************
   40 00:09F2 -  -  -  -  ;
   41 00:09F2 -  -  -  -  ;									Changes and Updates
   42 00:09F2 -  -  -  -  ;
   43 00:09F2 -  -  -  -  ; ***************************************************************************************
   44 00:09F2 -  -  -  -  ;
   45 00:09F2 -  -  -  -  ;		Date			Notes
   46 00:09F2 -  -  -  -  ;		==== 			=====
   47 00:09F2 -  -  -  -  ;
   48 00:09F2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:09F2 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:09F2 -  -  -  -  ; ***************************************************************************************
    2 00:09F2 -  -  -  -  ; ***************************************************************************************
    3 00:09F2 -  -  -  -  ;
    4 00:09F2 -  -  -  -  ;		Name : 		time.asm
    5 00:09F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09F2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09F2 -  -  -  -  ;		Reviewed :	No
    8 00:09F2 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:09F2 -  -  -  -  ;
   10 00:09F2 -  -  -  -  ; ***************************************************************************************
   11 00:09F2 -  -  -  -  ; ***************************************************************************************
   12 00:09F2 -  -  -  -  
   13 00:09F2 -  -  -  -  ; ***************************************************************************************
   14 00:09F2 -  -  -  -  ;
   15 00:09F2 -  -  -  -  ;							Get system time in ms
   16 00:09F2 -  -  -  -  ;
   17 00:09F2 -  -  -  -  ; ***************************************************************************************
   18 00:09F2 -  -  -  -  
   19 00:09F2 -  -  -  -  Unary_Time:	;; [time]
   20 00:09F2 CD 2E 15 00 			call 	SYSGetTimer
   21 00:09F6 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:09F8 C9 -  -  -  			ret
   23 00:09F9 -  -  -  -  
   24 00:09F9 -  -  -  -  ; ***************************************************************************************
   25 00:09F9 -  -  -  -  ;
   26 00:09F9 -  -  -  -  ;									Changes and Updates
   27 00:09F9 -  -  -  -  ;
   28 00:09F9 -  -  -  -  ; ***************************************************************************************
   29 00:09F9 -  -  -  -  ;
   30 00:09F9 -  -  -  -  ;		Date			Notes
   31 00:09F9 -  -  -  -  ;		==== 			=====
   32 00:09F9 -  -  -  -  ;
   33 00:09F9 -  -  -  -  ; ***************************************************************************************
   34 00:09F9 -  -  -  -  			
Listing for file "_build.asm"
   50 00:09F9 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:09F9 -  -  -  -  ; ***************************************************************************************
    2 00:09F9 -  -  -  -  ; ***************************************************************************************
    3 00:09F9 -  -  -  -  ;
    4 00:09F9 -  -  -  -  ;		Name : 		top.asm
    5 00:09F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09F9 -  -  -  -  ;		Reviewed :	No
    8 00:09F9 -  -  -  -  ;		Purpose :	Various constants.
    9 00:09F9 -  -  -  -  ;
   10 00:09F9 -  -  -  -  ; ***************************************************************************************
   11 00:09F9 -  -  -  -  ; ***************************************************************************************
   12 00:09F9 -  -  -  -  
   13 00:09F9 -  -  -  -  ; ***************************************************************************************
   14 00:09F9 -  -  -  -  ;
   15 00:09F9 -  -  -  -  ;							page unary function (no bracket)
   16 00:09F9 -  -  -  -  ;
   17 00:09F9 -  -  -  -  ; ***************************************************************************************
   18 00:09F9 -  -  -  -  
   19 00:09F9 -  -  -  -  Unary_Top:	;; [top]
   20 00:09F9 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:09FD D9 -  -  -  			exx
   22 00:09FE 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:0A02 D9 -  -  -  			exx
   24 00:0A03 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0A05 C9 -  -  -  			ret
   26 00:0A06 -  -  -  -  
   27 00:0A06 -  -  -  -  ; ***************************************************************************************
   28 00:0A06 -  -  -  -  ;
   29 00:0A06 -  -  -  -  ;									Changes and Updates
   30 00:0A06 -  -  -  -  ;
   31 00:0A06 -  -  -  -  ; ***************************************************************************************
   32 00:0A06 -  -  -  -  ;
   33 00:0A06 -  -  -  -  ;		Date			Notes
   34 00:0A06 -  -  -  -  ;		==== 			=====
   35 00:0A06 -  -  -  -  ;
   36 00:0A06 -  -  -  -  ; ***************************************************************************************
   37 00:0A06 -  -  -  -  			
Listing for file "_build.asm"
   51 00:0A06 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0A06 -  -  -  -  ; ***************************************************************************************
    2 00:0A06 -  -  -  -  ; ***************************************************************************************
    3 00:0A06 -  -  -  -  ;
    4 00:0A06 -  -  -  -  ;		Name : 		val.asm
    5 00:0A06 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A06 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A06 -  -  -  -  ;		Reviewed :	No
    8 00:0A06 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0A06 -  -  -  -  ;
   10 00:0A06 -  -  -  -  ; ***************************************************************************************
   11 00:0A06 -  -  -  -  ; ***************************************************************************************
   12 00:0A06 -  -  -  -  
   13 00:0A06 -  -  -  -  ; ***************************************************************************************
   14 00:0A06 -  -  -  -  ;
   15 00:0A06 -  -  -  -  ;								val( unary function
   16 00:0A06 -  -  -  -  ;
   17 00:0A06 -  -  -  -  ; ***************************************************************************************
   18 00:0A06 -  -  -  -  
   19 00:0A06 -  -  -  -  Unary_Val:	;; [val]
   20 00:0A06 CD 1E 07 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0A0A E5 -  -  -  		push 	hl 							; copy to BC
   22 00:0A0B C1 -  -  -  		pop 	bc
   23 00:0A0C 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:0A0E CD BB 13 00 		call 	Int32FromString 			; get the integer part.
   25 00:0A12 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0A14 C8 -  -  -  		ret		z 							; okay
   27 00:0A15 3E 03 C3 02 
              05 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:0A1B -  -  -  -  
   29 00:0A1B -  -  -  -  ; ***************************************************************************************
   30 00:0A1B -  -  -  -  ;
   31 00:0A1B -  -  -  -  ;									Changes and Updates
   32 00:0A1B -  -  -  -  ;
   33 00:0A1B -  -  -  -  ; ***************************************************************************************
   34 00:0A1B -  -  -  -  ;
   35 00:0A1B -  -  -  -  ;		Date			Notes
   36 00:0A1B -  -  -  -  ;		==== 			=====
   37 00:0A1B -  -  -  -  ;
   38 00:0A1B -  -  -  -  ; ***************************************************************************************
   39 00:0A1B -  -  -  -  		
Listing for file "_build.asm"
   52 00:0A1B -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 00:0A1B -  -  -  -  ; ***************************************************************************************
    2 00:0A1B -  -  -  -  ; ***************************************************************************************
    3 00:0A1B -  -  -  -  ;
    4 00:0A1B -  -  -  -  ;		Name : 		locals.asm
    5 00:0A1B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A1B -  -  -  -  ;		Date : 		8th June 2022
    7 00:0A1B -  -  -  -  ;		Reviewed :	No
    8 00:0A1B -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 00:0A1B -  -  -  -  ;
   10 00:0A1B -  -  -  -  ; ***************************************************************************************
   11 00:0A1B -  -  -  -  ; ***************************************************************************************
   12 00:0A1B -  -  -  -  
   13 00:0A1B -  -  -  -  ; ***************************************************************************************
   14 00:0A1B -  -  -  -  ;
   15 00:0A1B -  -  -  -  ;									Locals command
   16 00:0A1B -  -  -  -  ;
   17 00:0A1B -  -  -  -  ; ***************************************************************************************
   18 00:0A1B -  -  -  -  
   19 00:0A1B -  -  -  -  Command_LOCAL:	;; [local]
   20 00:0A1B 21 00 00 00 		ld 		hl,0 						; set HL'HL, the default value, to zero
   21 00:0A1F D9 -  -  -  		exx
   22 00:0A20 21 00 00 00 		ld 		hl,0
   23 00:0A24 D9 -  -  -  		exx
   24 00:0A25 CD 33 0A 00 		call 	LocalCreateVariable 		; create a variable
   25 00:0A29 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a comma ?
   26 00:0A2C FE A6 -  -  		cp 		KWD_COMMA
   27 00:0A2E C0 -  -  -  		ret 	nz 							; exit if not
   28 00:0A2F DD 23 -  -  		inc 	ix 							; skip comma
   29 00:0A31 18 E8 -  -  		jr 		Command_LOCAL 				; and go try the next one.
   30 00:0A33 -  -  -  -  		
   31 00:0A33 -  -  -  -  ; ***************************************************************************************
   32 00:0A33 -  -  -  -  ;
   33 00:0A33 -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   34 00:0A33 -  -  -  -  ;						(used for parameters and locals)
   35 00:0A33 -  -  -  -  ;
   36 00:0A33 -  -  -  -  ; ***************************************************************************************
   37 00:0A33 -  -  -  -  
   38 00:0A33 -  -  -  -  LocalCreateVariable:
   39 00:0A33 E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   40 00:0A34 D9 -  -  -  		exx
   41 00:0A35 E5 -  -  -  		push 	hl
   42 00:0A36 D9 -  -  -  		exx
   43 00:0A37 -  -  -  -  
   44 00:0A37 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   45 00:0A39 32 80 00 00 		ld 		(AllowAutoCreate),a
   46 00:0A3D CD BB 0E 00 		call 	FindVariable 				; locate the variable, address in UHL now.
   47 00:0A41 E5 -  -  -  		push 	hl 							; save variable address.
   48 00:0A42 -  -  -  -  
   49 00:0A42 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   50 00:0A44 CD F8 0D 00 		call 	StackOpenFrame
   51 00:0A48 -  -  -  -  
   52 00:0A48 2A 58 00 00 		ld 		hl,(BasicSP) 				; point to SP+1
   53 00:0A4C 23 -  -  -  		inc 	hl
   54 00:0A4D D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   55 00:0A4E D5 -  -  -  		push 	de
   56 00:0A4F ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   57 00:0A55 -  -  -  -  		;
   58 00:0A55 EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   59 00:0A56 CD 78 0A 00 		call 	_LCVRead32HL 				; read HL current value into HL'HL
   60 00:0A5A CD 68 0A 00 		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   61 00:0A5E -  -  -  -  		;
   62 00:0A5E D1 -  -  -  		pop 	de 							; the address of the variable itself.
   63 00:0A5F -  -  -  -  		;
   64 00:0A5F D9 -  -  -  		exx 								; restore the value being initialised to.
   65 00:0A60 E1 -  -  -  		pop 	hl
   66 00:0A61 D9 -  -  -  		exx
   67 00:0A62 E1 -  -  -  		pop 	hl
   68 00:0A63 CD 68 0A 00 		call 	_LCVWrite32HL 				; write HL'HL to DE.
   69 00:0A67 C9 -  -  -  		ret
   70 00:0A68 -  -  -  -  
   71 00:0A68 -  -  -  -  ; ***************************************************************************************
   72 00:0A68 -  -  -  -  ;
   73 00:0A68 -  -  -  -  ;									Write HL'HL to DE.
   74 00:0A68 -  -  -  -  ;
   75 00:0A68 -  -  -  -  ; ***************************************************************************************
   76 00:0A68 -  -  -  -  
   77 00:0A68 -  -  -  -  _LCVWrite32HL:
   78 00:0A68 7D -  -  -  		ld 		a,l
   79 00:0A69 12 -  -  -  		ld 		(de),a
   80 00:0A6A 13 -  -  -  		inc 	de
   81 00:0A6B 7C -  -  -  		ld 		a,h
   82 00:0A6C 12 -  -  -  		ld 		(de),a
   83 00:0A6D 13 -  -  -  		inc 	de
   84 00:0A6E D5 -  -  -  		push 	de
   85 00:0A6F D9 -  -  -  		exx
   86 00:0A70 D1 -  -  -  		pop 	de
   87 00:0A71 7D -  -  -  		ld 		a,l
   88 00:0A72 12 -  -  -  		ld 		(de),a
   89 00:0A73 13 -  -  -  		inc 	de
   90 00:0A74 7C -  -  -  		ld 		a,h
   91 00:0A75 12 -  -  -  		ld 		(de),a
   92 00:0A76 D9 -  -  -  		exx
   93 00:0A77 C9 -  -  -  		ret
   94 00:0A78 -  -  -  -  
   95 00:0A78 -  -  -  -  ; ***************************************************************************************
   96 00:0A78 -  -  -  -  ;
   97 00:0A78 -  -  -  -  ;									Read (HL) to HL'HL
   98 00:0A78 -  -  -  -  ;
   99 00:0A78 -  -  -  -  ; ***************************************************************************************
  100 00:0A78 -  -  -  -  
  101 00:0A78 -  -  -  -  _LCVRead32HL:
  102 00:0A78 E5 -  -  -  		push 	hl
  103 00:0A79 ED 27 -  -  		ld_ind_hl
  104 00:0A7B D9 -  -  -  		exx
  105 00:0A7C E1 -  -  -  		pop 	hl
  106 00:0A7D 23 -  -  -  		inc 	hl
  107 00:0A7E 23 -  -  -  		inc 	hl
  108 00:0A7F ED 27 -  -  		ld_ind_hl
  109 00:0A81 D9 -  -  -  		exx
  110 00:0A82 C9 -  -  -  		ret
  111 00:0A83 -  -  -  -  
  112 00:0A83 -  -  -  -  ; ***************************************************************************************
  113 00:0A83 -  -  -  -  ;
  114 00:0A83 -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
  115 00:0A83 -  -  -  -  ;			or parameter
  116 00:0A83 -  -  -  -  ;
  117 00:0A83 -  -  -  -  ; ***************************************************************************************
  118 00:0A83 -  -  -  -  
  119 00:0A83 -  -  -  -  PopLocals:
  120 00:0A83 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  121 00:0A85 CD 30 0E 00 		call 	StackCheckFrame
  122 00:0A89 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  123 00:0A8A -  -  -  -  
  124 00:0A8A 2A 58 00 00 		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  125 00:0A8E 23 -  -  -  		inc 	hl
  126 00:0A8F E5 -  -  -  		push 	hl 							; save it
  127 00:0A90 ED 27 -  -  		ld_ind_hl 							; read address into HL
  128 00:0A92 EB -  -  -  		ex 		de,hl 						; target address is in DE.
  129 00:0A93 -  -  -  -  		;
  130 00:0A93 E1 -  -  -  		pop 	hl 							; address of old value
  131 00:0A94 23 -  -  -  		inc 	hl
  132 00:0A95 23 -  -  -  		inc 	hl
  133 00:0A96 23 -  -  -  		inc 	hl
  134 00:0A97 23 -  -  -  		inc 	hl
  135 00:0A98 CD 78 0A 00 		call 	_LCVRead32HL 				; value into HL'HL
  136 00:0A9C CD 68 0A 00 		call 	_LCVWrite32HL 				; and write it out again to var address
  137 00:0AA0 -  -  -  -  
  138 00:0AA0 CD 1D 0E 00 		call 	StackCloseFrame 			; remove the local/parameter
  139 00:0AA4 18 DD -  -  		jr 		PopLocals 					; check any more ?
  140 00:0AA6 -  -  -  -  
  141 00:0AA6 -  -  -  -  ; ***************************************************************************************
  142 00:0AA6 -  -  -  -  ;
  143 00:0AA6 -  -  -  -  ;									Changes and Updates
  144 00:0AA6 -  -  -  -  ;
  145 00:0AA6 -  -  -  -  ; ***************************************************************************************
  146 00:0AA6 -  -  -  -  ;
  147 00:0AA6 -  -  -  -  ;		Date			Notes
  148 00:0AA6 -  -  -  -  ;		==== 			=====
  149 00:0AA6 -  -  -  -  ;
  150 00:0AA6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:0AA6 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 00:0AA6 -  -  -  -  ; ***************************************************************************************
    2 00:0AA6 -  -  -  -  ; ***************************************************************************************
    3 00:0AA6 -  -  -  -  ;
    4 00:0AA6 -  -  -  -  ;		Name : 		proc.asm
    5 00:0AA6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AA6 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0AA6 -  -  -  -  ;		Reviewed :	No
    8 00:0AA6 -  -  -  -  ;		Purpose :	Proc command
    9 00:0AA6 -  -  -  -  ;
   10 00:0AA6 -  -  -  -  ; ***************************************************************************************
   11 00:0AA6 -  -  -  -  ; ***************************************************************************************
   12 00:0AA6 -  -  -  -  
   13 00:0AA6 -  -  -  -  ; ***************************************************************************************
   14 00:0AA6 -  -  -  -  ;
   15 00:0AA6 -  -  -  -  ;										PROC Command
   16 00:0AA6 -  -  -  -  ;
   17 00:0AA6 -  -  -  -  ; ***************************************************************************************
   18 00:0AA6 -  -  -  -  
   19 00:0AA6 -  -  -  -  Command_PROC: 	;; [proc]
   20 00:0AA6 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 00:0AA8 CD F8 0D 00 			call 	StackOpenFrame 			; marker position.
   22 00:0AAC -  -  -  -  			;
   23 00:0AAC DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 00:0AAF FE 26 -  -  			cp 		IDENTIFIER_END
   25 00:0AB1 D2 6C 05 00 			jp 		nc,SyntaxError 			; no , no call possible.
   26 00:0AB5 CD 2B 0B 00 			call 	SearchProcedure 		; find procedure referenced at IX.
   27 00:0AB9 -  -  -  -  			;
   28 00:0AB9 -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 00:0AB9 -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 00:0AB9 -  -  -  -  			;
   31 00:0AB9 D5 -  -  -  			push 	de 						; save start of line
   32 00:0ABA DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 00:0ABD FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 00:0ABF CC D6 0A 00 			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 00:0AC3 -  -  -  -  			;
   36 00:0AC3 E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 00:0AC4 -  -  -  -  			;
   38 00:0AC4 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 00:0AC6 CD F8 0D 00 			call 	StackOpenFrame 
   40 00:0ACA CD 36 0E 00 			call 	StackSavePosition 		; and save the return address on the stack.
   41 00:0ACE -  -  -  -  
   42 00:0ACE DD E1 -  -  			pop 	ix 						; new position in code
   43 00:0AD0 E1 -  -  -  			pop 	hl 						; start of line
   44 00:0AD1 22 5C 00 00 			ld 		(CurrentLineStart),hl 	; save start of line
   45 00:0AD5 C9 -  -  -  			ret
   46 00:0AD6 -  -  -  -  
   47 00:0AD6 -  -  -  -  ; ***************************************************************************************
   48 00:0AD6 -  -  -  -  ;
   49 00:0AD6 -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 00:0AD6 -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 00:0AD6 -  -  -  -  ;
   52 00:0AD6 -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 00:0AD6 -  -  -  -  ;			final ) on the parameter lists.
   54 00:0AD6 -  -  -  -  ;
   55 00:0AD6 -  -  -  -  ; ***************************************************************************************
   56 00:0AD6 -  -  -  -  
   57 00:0AD6 -  -  -  -  ProcDoParameterList:
   58 00:0AD6 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 00:0AD7 DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 00:0ADA 20 1E -  -  			jr 		nz,_ParamError
   61 00:0ADC -  -  -  -  			;
   62 00:0ADC DD 23 -  -  			inc 	ix 						; skip over it
   63 00:0ADE 23 -  -  -  			inc 	hl
   64 00:0ADF FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 00:0AE1 C8 -  -  -  			ret 	z
   66 00:0AE2 -  -  -  -  			;
   67 00:0AE2 FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 00:0AE4 28 04 -  -  			jr 		z,_PDPFound
   69 00:0AE6 FE A6 -  -  			cp 		KWD_COMMA
   70 00:0AE8 20 10 -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 00:0AEA -  -  -  -  			;
   72 00:0AEA -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 00:0AEA -  -  -  -  			;
   74 00:0AEA -  -  -  -  _PDPFound:			
   75 00:0AEA E5 -  -  -  			push 	hl 						; save callee on stack
   76 00:0AEB CD 35 07 00 			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 00:0AEF DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 00:0AF1 CD 33 0A 00 			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 00:0AF5 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 00:0AF7 E1 -  -  -  			pop 	hl 						; and HL the callee
   81 00:0AF8 18 DC -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 00:0AFA -  -  -  -  
   83 00:0AFA -  -  -  -  _ParamError:
   84 00:0AFA 3E 13 C3 02 
              05 00 -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 00:0B00 -  -  -  -  
   86 00:0B00 -  -  -  -  ; ***************************************************************************************
   87 00:0B00 -  -  -  -  ;
   88 00:0B00 -  -  -  -  ;										ENDPROC Command
   89 00:0B00 -  -  -  -  ;
   90 00:0B00 -  -  -  -  ; ***************************************************************************************
   91 00:0B00 -  -  -  -  
   92 00:0B00 -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 00:0B00 CD 83 0A 00 			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 00:0B04 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 00:0B06 CD 30 0E 00 			call 	StackCheckFrame
   96 00:0B0A 20 19 -  -  			jr 		nz,_EndProcError
   97 00:0B0C CD 51 0E 00 			call 	StackLoadPosition 		; restore position into IX/SOL
   98 00:0B10 CD 1D 0E 00 			call 	StackCloseFrame 		
   99 00:0B14 -  -  -  -  
  100 00:0B14 CD 83 0A 00 			call 	PopLocals 				; restore any locals (parameters)
  101 00:0B18 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 00:0B1A CD 30 0E 00 			call 	StackCheckFrame
  103 00:0B1E 20 05 -  -  			jr 		nz,_EndProcError
  104 00:0B20 CD 1D 0E 00 			call 	StackCloseFrame 		
  105 00:0B24 C9 -  -  -  			ret
  106 00:0B25 -  -  -  -  _EndProcError:
  107 00:0B25 3E 10 C3 02 
              05 00 -  -  			ERR_NOPROC
  108 00:0B2B -  -  -  -  
  109 00:0B2B -  -  -  -  ; ***************************************************************************************
  110 00:0B2B -  -  -  -  ;
  111 00:0B2B -  -  -  -  ;									Changes and Updates
  112 00:0B2B -  -  -  -  ;
  113 00:0B2B -  -  -  -  ; ***************************************************************************************
  114 00:0B2B -  -  -  -  ;
  115 00:0B2B -  -  -  -  ;		Date			Notes
  116 00:0B2B -  -  -  -  ;		==== 			=====
  117 00:0B2B -  -  -  -  ;
  118 00:0B2B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:0B2B -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 00:0B2B -  -  -  -  ; ***************************************************************************************
    2 00:0B2B -  -  -  -  ; ***************************************************************************************
    3 00:0B2B -  -  -  -  ;
    4 00:0B2B -  -  -  -  ;		Name : 		search.asm
    5 00:0B2B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B2B -  -  -  -  ;		Date : 		8th June 2022
    7 00:0B2B -  -  -  -  ;		Reviewed :	No
    8 00:0B2B -  -  -  -  ;		Purpose :	Search program for procedures
    9 00:0B2B -  -  -  -  ;
   10 00:0B2B -  -  -  -  ; ***************************************************************************************
   11 00:0B2B -  -  -  -  ; ***************************************************************************************
   12 00:0B2B -  -  -  -  
   13 00:0B2B -  -  -  -  ; ***************************************************************************************
   14 00:0B2B -  -  -  -  ;
   15 00:0B2B -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 00:0B2B -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 00:0B2B -  -  -  -  ;
   18 00:0B2B -  -  -  -  ;					A very simple search which may actually be good enough.
   19 00:0B2B -  -  -  -  ;					Give consideration to a table w/index ? 
   20 00:0B2B -  -  -  -  ;
   21 00:0B2B -  -  -  -  ; ***************************************************************************************
   22 00:0B2B -  -  -  -  
   23 00:0B2B -  -  -  -  SearchProcedure:
   24 00:0B2B DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 00:0B2E -  -  -  -  
   26 00:0B2E 2A 38 00 00 			ld 		hl,(CodeAddress) 		; start of program space
   27 00:0B32 -  -  -  -  			;
   28 00:0B32 -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 00:0B32 -  -  -  -  			;
   30 00:0B32 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 00:0B33 B7 -  -  -  			or 		a
   32 00:0B34 28 38 -  -  			jr 		z,_SPFail
   33 00:0B36 E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 00:0B37 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 00:0B38 23 -  -  -  			inc 	hl
   36 00:0B39 23 -  -  -  			inc 	hl
   37 00:0B3A 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 00:0B3B FE B6 -  -  			cp 		KWD_DEF 				
   39 00:0B3D 20 0B -  -  			jr 		nz,_SPNext
   40 00:0B3F 23 -  -  -  			inc 	hl 				
   41 00:0B40 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 00:0B41 FE B7 -  -  			cp 		KWD_PROC
   43 00:0B43 20 05 -  -  			jr 		nz,_SPNext
   44 00:0B45 23 -  -  -  			inc 	hl
   45 00:0B46 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 00:0B47 B9 -  -  -  			cp 		c
   47 00:0B48 28 09 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 00:0B4A -  -  -  -  			;
   49 00:0B4A -  -  -  -  			;		Advance to next entry.
   50 00:0B4A -  -  -  -  			;			
   51 00:0B4A E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 00:0B4B 11 00 00 00 			ld 		de,0 					; offset into UDE
   53 00:0B4F 5E -  -  -  			ld 		e,(hl)
   54 00:0B50 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 00:0B51 18 DF -  -  			jr 		_SPLoop
   56 00:0B53 -  -  -  -  			;
   57 00:0B53 -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 00:0B53 -  -  -  -  			; 		DEF PROC line.
   59 00:0B53 -  -  -  -  			;		
   60 00:0B53 -  -  -  -  			;		Already know the first characters match
   61 00:0B53 -  -  -  -  			;
   62 00:0B53 -  -  -  -  _SPFullCheck:
   63 00:0B53 DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 00:0B55 -  -  -  -  _SPCheckLoop:
   65 00:0B55 DD 23 -  -  			inc 	ix 						; look at next character.
   66 00:0B57 23 -  -  -  			inc 	hl
   67 00:0B58 DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 00:0B5B FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 00:0B5D 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 00:0B5F BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 00:0B60 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 00:0B62 -  -  -  -  			;
   73 00:0B62 -  -  -  -  			;		Full check failed.
   74 00:0B62 -  -  -  -  			;
   75 00:0B62 -  -  -  -  _SPFullCheckFailed:			
   76 00:0B62 DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 00:0B64 18 E4 -  -  			jr 		_SPNext 				; do the next line.
   78 00:0B66 -  -  -  -  			;
   79 00:0B66 -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 00:0B66 -  -  -  -  			;
   81 00:0B66 -  -  -  -  _SPCheckBothEnd:
   82 00:0B66 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 00:0B67 FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 00:0B69 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 00:0B6B -  -  -  -  			;
   86 00:0B6B -  -  -  -  			;	 	We found it.
   87 00:0B6B -  -  -  -  			;
   88 00:0B6B C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 00:0B6C D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 00:0B6D C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 00:0B6E -  -  -  -  
   92 00:0B6E -  -  -  -  _SPFail: 									; come here when not found.
   93 00:0B6E 3E 14 C3 02 
              05 00 -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 00:0B74 -  -  -  -  
   95 00:0B74 -  -  -  -  ; ***************************************************************************************
   96 00:0B74 -  -  -  -  ;
   97 00:0B74 -  -  -  -  ;									Changes and Updates
   98 00:0B74 -  -  -  -  ;
   99 00:0B74 -  -  -  -  ; ***************************************************************************************
  100 00:0B74 -  -  -  -  ;
  101 00:0B74 -  -  -  -  ;		Date			Notes
  102 00:0B74 -  -  -  -  ;		==== 			=====
  103 00:0B74 -  -  -  -  ;
  104 00:0B74 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0B74 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:0B74 -  -  -  -  ; ***************************************************************************************
    2 00:0B74 -  -  -  -  ; ***************************************************************************************
    3 00:0B74 -  -  -  -  ;
    4 00:0B74 -  -  -  -  ;		Name : 		allocate.asm
    5 00:0B74 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B74 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0B74 -  -  -  -  ;		Reviewed :	No
    8 00:0B74 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:0B74 -  -  -  -  ;
   10 00:0B74 -  -  -  -  ; ***************************************************************************************
   11 00:0B74 -  -  -  -  ; ***************************************************************************************
   12 00:0B74 -  -  -  -  
   13 00:0B74 -  -  -  -  ; ***************************************************************************************
   14 00:0B74 -  -  -  -  ;
   15 00:0B74 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:0B74 -  -  -  -  ;
   17 00:0B74 -  -  -  -  ; ***************************************************************************************
   18 00:0B74 -  -  -  -  
   19 00:0B74 -  -  -  -  AllocateBytes:
   20 00:0B74 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:0B75 21 00 00 00 		ld 		hl,$000000
   22 00:0B79 62 -  -  -  		ld 		h,d
   23 00:0B7A 6B -  -  -  		ld 		l,e
   24 00:0B7B -  -  -  -  		;
   25 00:0B7B ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:0B80 D5 -  -  -  		push 	de 							; save on stack
   27 00:0B81 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:0B82 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   29 00:0B86 -  -  -  -  		;
   30 00:0B86 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:0B87 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:0B8B AF -  -  -  		xor 	a
   33 00:0B8C ED 52 -  -  		sbc 	hl,de
   34 00:0B8E E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:0B8F D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:0B90 3E 0B C3 02 
              05 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:0B96 -  -  -  -  
   38 00:0B96 -  -  -  -  ; ***************************************************************************************
   39 00:0B96 -  -  -  -  ;
   40 00:0B96 -  -  -  -  ;									Changes and Updates
   41 00:0B96 -  -  -  -  ;
   42 00:0B96 -  -  -  -  ; ***************************************************************************************
   43 00:0B96 -  -  -  -  ;
   44 00:0B96 -  -  -  -  ;		Date			Notes
   45 00:0B96 -  -  -  -  ;		==== 			=====
   46 00:0B96 -  -  -  -  ;
   47 00:0B96 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:0B96 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:0B96 -  -  -  -  ; ***************************************************************************************
    2 00:0B96 -  -  -  -  ; ***************************************************************************************
    3 00:0B96 -  -  -  -  ;
    4 00:0B96 -  -  -  -  ;		Name : 		clear.asm
    5 00:0B96 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B96 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B96 -  -  -  -  ;		Reviewed :	No
    8 00:0B96 -  -  -  -  ;		Purpose :	Clear command.
    9 00:0B96 -  -  -  -  ;
   10 00:0B96 -  -  -  -  ; ***************************************************************************************
   11 00:0B96 -  -  -  -  ; ***************************************************************************************
   12 00:0B96 -  -  -  -  
   13 00:0B96 -  -  -  -  ; ***************************************************************************************
   14 00:0B96 -  -  -  -  ;
   15 00:0B96 -  -  -  -  ;										CLEAR command
   16 00:0B96 -  -  -  -  ;
   17 00:0B96 -  -  -  -  ; ***************************************************************************************
   18 00:0B96 -  -  -  -  
   19 00:0B96 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:0B96 -  -  -  -  		;
   21 00:0B96 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:0B96 -  -  -  -  		;
   23 00:0B96 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0B9A -  -  -  -  _CCFindLow:
   25 00:0B9A 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0B9E 5E -  -  -  		ld 		e,(hl)		
   27 00:0B9F 19 -  -  -  		add 	hl,de
   28 00:0BA0 7B -  -  -  		ld 		a,e
   29 00:0BA1 B7 -  -  -  		or 		a
   30 00:0BA2 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:0BA4 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:0BA5 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:0BA9 23 -  -  -  		inc 	hl 							; one for luck
   34 00:0BAA 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:0BAE -  -  -  -  		;
   36 00:0BAE -  -  -  -  		; 	 		Reset the language stack
   37 00:0BAE -  -  -  -  		;
   38 00:0BAE 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:0BB2 -  -  -  -  		;
   40 00:0BB2 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:0BB6 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:0BBA 19 -  -  -  		add 	hl,de
   43 00:0BBB 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:0BBD 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:0BC1 -  -  -  -  		;
   46 00:0BC1 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:0BC5 19 -  -  -  		add 	hl,de
   48 00:0BC6 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:0BCA -  -  -  -  		;
   50 00:0BCA -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:0BCA -  -  -  -  		;
   52 00:0BCA 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:0BCE -  -  -  -  _CCFClearHT:
   54 00:0BCE 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:0BCF 36 00 -  -  		ld 		(hl),0
   56 00:0BD1 1B -  -  -  		dec 	de
   57 00:0BD2 7A -  -  -  		ld 		a,d
   58 00:0BD3 B3 -  -  -  		or 		e
   59 00:0BD4 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:0BD6 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   61 00:0BDA -  -  -  -  		;
   62 00:0BDA -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:0BDA -  -  -  -  		;
   64 00:0BDA 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:0BDE -  -  -  -  		;
   66 00:0BDE -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:0BDE -  -  -  -  		;
   68 00:0BDE CD 49 09 00 		call 	UnaryRandomInitialise
   69 00:0BE2 -  -  -  -  		;
   70 00:0BE2 -  -  -  -  		;		Erase the stack
   71 00:0BE2 -  -  -  -  		;
   72 00:0BE2 CD EC 0D 00 		call 	StackReset 					; reset the basic stack to empty
   73 00:0BE6 -  -  -  -  		;
   74 00:0BE6 -  -  -  -  		;		Reset READ/DATA
   75 00:0BE6 -  -  -  -  		;
   76 00:0BE6 CD AC 04 00 		call 	Command_RESTORE
   77 00:0BEA C9 -  -  -  		ret
   78 00:0BEB -  -  -  -  
   79 00:0BEB -  -  -  -  ; ***************************************************************************************
   80 00:0BEB -  -  -  -  ;
   81 00:0BEB -  -  -  -  ;									Changes and Updates
   82 00:0BEB -  -  -  -  ;
   83 00:0BEB -  -  -  -  ; ***************************************************************************************
   84 00:0BEB -  -  -  -  ;
   85 00:0BEB -  -  -  -  ;		Date			Notes
   86 00:0BEB -  -  -  -  ;		==== 			=====
   87 00:0BEB -  -  -  -  ;
   88 00:0BEB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:0BEB -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0BEB -  -  -  -  ; ***************************************************************************************
    2 00:0BEB -  -  -  -  ; ***************************************************************************************
    3 00:0BEB -  -  -  -  ;
    4 00:0BEB -  -  -  -  ;		Name : 		instance.asm
    5 00:0BEB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BEB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BEB -  -  -  -  ;		Reviewed :	No
    8 00:0BEB -  -  -  -  ;		Purpose :	Instance handling
    9 00:0BEB -  -  -  -  ;
   10 00:0BEB -  -  -  -  ; ***************************************************************************************
   11 00:0BEB -  -  -  -  ; ***************************************************************************************
   12 00:0BEB -  -  -  -  
   13 00:0BEB -  -  -  -  ; ***************************************************************************************
   14 00:0BEB -  -  -  -  ;
   15 00:0BEB -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0BEB -  -  -  -  ;
   17 00:0BEB -  -  -  -  ; ***************************************************************************************
   18 00:0BEB -  -  -  -  
   19 00:0BEB -  -  -  -  SetCurrentInstance:
   20 00:0BEB ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0BF0 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0BF4 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0BF9 -  -  -  -  
   24 00:0BF9 C9 -  -  -  		ret
   25 00:0BFA -  -  -  -  
   26 00:0BFA -  -  -  -  
   27 00:0BFA -  -  -  -  ; ***************************************************************************************
   28 00:0BFA -  -  -  -  ;
   29 00:0BFA -  -  -  -  ;									Changes and Updates
   30 00:0BFA -  -  -  -  ;
   31 00:0BFA -  -  -  -  ; ***************************************************************************************
   32 00:0BFA -  -  -  -  ;
   33 00:0BFA -  -  -  -  ;		Date			Notes
   34 00:0BFA -  -  -  -  ;		==== 			=====
   35 00:0BFA -  -  -  -  ;
   36 00:0BFA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0BFA -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0BFA -  -  -  -  ; ***************************************************************************************
    2 00:0BFA -  -  -  -  ; ***************************************************************************************
    3 00:0BFA -  -  -  -  ;
    4 00:0BFA -  -  -  -  ;		Name : 		new.asm
    5 00:0BFA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BFA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0BFA -  -  -  -  ;		Reviewed :	No
    8 00:0BFA -  -  -  -  ;		Purpose :	New command.
    9 00:0BFA -  -  -  -  ;
   10 00:0BFA -  -  -  -  ; ***************************************************************************************
   11 00:0BFA -  -  -  -  ; ***************************************************************************************
   12 00:0BFA -  -  -  -  
   13 00:0BFA -  -  -  -  ; ***************************************************************************************
   14 00:0BFA -  -  -  -  ;
   15 00:0BFA -  -  -  -  ;										NEW command
   16 00:0BFA -  -  -  -  ;
   17 00:0BFA -  -  -  -  ; ***************************************************************************************
   18 00:0BFA -  -  -  -  
   19 00:0BFA -  -  -  -  Command_NEW: 	;; [new]
   20 00:0BFA 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0BFE 36 00 -  -  		ld 		(hl),0
   22 00:0C00 CD 96 0B 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0C04 3E 00 C3 02 
              05 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0C0A -  -  -  -  
   25 00:0C0A -  -  -  -  ; ***************************************************************************************
   26 00:0C0A -  -  -  -  ;
   27 00:0C0A -  -  -  -  ;									Changes and Updates
   28 00:0C0A -  -  -  -  ;
   29 00:0C0A -  -  -  -  ; ***************************************************************************************
   30 00:0C0A -  -  -  -  ;
   31 00:0C0A -  -  -  -  ;		Date			Notes
   32 00:0C0A -  -  -  -  ;		==== 			=====
   33 00:0C0A -  -  -  -  ;
   34 00:0C0A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0C0A -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 00:0C0A -  -  -  -  ; ***************************************************************************************
    2 00:0C0A -  -  -  -  ; ***************************************************************************************
    3 00:0C0A -  -  -  -  ;
    4 00:0C0A -  -  -  -  ;		Name : 		for.asm
    5 00:0C0A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C0A -  -  -  -  ;		Date : 		7th June 2022
    7 00:0C0A -  -  -  -  ;		Reviewed :	No
    8 00:0C0A -  -  -  -  ;		Purpose :	For/Next command
    9 00:0C0A -  -  -  -  ;
   10 00:0C0A -  -  -  -  ; ***************************************************************************************
   11 00:0C0A -  -  -  -  
   12 00:0C0A -  -  -  -  ; ***************************************************************************************
   13 00:0C0A -  -  -  -  ;
   14 00:0C0A -  -  -  -  ;									For Command
   15 00:0C0A -  -  -  -  ;
   16 00:0C0A -  -  -  -  ; ***************************************************************************************
   17 00:0C0A -  -  -  -  
   18 00:0C0A -  -  -  -  Command_FOR: ;; [for]
   19 00:0C0A 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 00:0C0C CD F8 0D 00 			call 	StackOpenFrame
   21 00:0C10 -  -  -  -  			;
   22 00:0C10 -  -  -  -  			;		Variable Reference to increment
   23 00:0C10 -  -  -  -  			;
   24 00:0C10 DD E5 -  -  			push	ix 						; save start position
   25 00:0C12 3E FF -  -  			ld 		a,255 					; FOR can create
   26 00:0C14 32 80 00 00 			ld 		(AllowAutoCreate),a
   27 00:0C18 CD C4 07 00 			call 	EvaluateTerm 			; get term
   28 00:0C1C AF -  -  -  			xor 	a 						; autocreate off.
   29 00:0C1D 32 80 00 00 			ld 		(AllowAutoCreate),a
   30 00:0C21 DD E1 -  -  			pop 	ix 						; get start position
   31 00:0C23 E5 -  -  -  			push 	hl 						; save reference address.
   32 00:0C24 -  -  -  -  			;
   33 00:0C24 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 00:0C26 C2 6C 05 00 			jp 		nz,SyntaxError
   35 00:0C2A EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 00:0C2B -  -  -  -  			;
   37 00:0C2B 2A 58 00 00 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 00:0C2F 01 06 00 00 			ld 		bc,6
   39 00:0C33 09 -  -  -  			add 	hl,bc 
   40 00:0C34 D1 -  -  -  			pop 	de 						; get reference.
   41 00:0C35 ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 00:0C3B -  -  -  -  			;
   43 00:0C3B -  -  -  -  			;		var = value
   44 00:0C3B -  -  -  -  			;
   45 00:0C3B CD 9D 02 00 			call 	Command_LET 			; so we do I = 1 or whatever.
   46 00:0C3F -  -  -  -  			; 		
   47 00:0C3F -  -  -  -  			; 		TO
   48 00:0C3F -  -  -  -  			;
   49 00:0C3F 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 00:0C41 CD F6 04 00 			call 	CheckNextA
   51 00:0C45 -  -  -  -  			;
   52 00:0C45 -  -  -  -  			;		value
   53 00:0C45 -  -  -  -  			;
   54 00:0C45 CD 35 07 00 			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 00:0C49 3E 0A -  -  			ld 		a,10
   56 00:0C4B CD 86 0C 00 			call 	CFWriteHLHLToA 
   57 00:0C4F -  -  -  -  			;
   58 00:0C4F -  -  -  -  			;		Check STEP ?
   59 00:0C4F -  -  -  -  			;
   60 00:0C4F 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   61 00:0C53 D9 -  -  -  			exx
   62 00:0C54 21 00 00 00 			ld 		hl,0
   63 00:0C58 D9 -  -  -  			exx			
   64 00:0C59 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 00:0C5C FE B4 -  -  			cp 		KWD_STEP 				
   66 00:0C5E 20 06 -  -  			jr 		nz,_CFDefaultStep
   67 00:0C60 -  -  -  -  			;
   68 00:0C60 DD 23 -  -  			inc 	ix 						; get step
   69 00:0C62 CD 35 07 00 			call 	EvaluateInteger
   70 00:0C66 -  -  -  -  _CFDefaultStep:			
   71 00:0C66 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 00:0C68 CD 86 0C 00 			call 	CFWriteHLHLToA 
   73 00:0C6C CD 36 0E 00 			call 	StackSavePosition 		; save loop address
   74 00:0C70 C9 -  -  -  			ret
   75 00:0C71 -  -  -  -  
   76 00:0C71 -  -  -  -  ; ***************************************************************************************
   77 00:0C71 -  -  -  -  ;
   78 00:0C71 -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 00:0C71 -  -  -  -  ;
   80 00:0C71 -  -  -  -  ; ***************************************************************************************
   81 00:0C71 -  -  -  -  
   82 00:0C71 -  -  -  -  CFReadAToHLHL:
   83 00:0C71 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   84 00:0C75 4F -  -  -  			ld 		c,a
   85 00:0C76 2A 58 00 00 			ld 		hl,(BasicSP) 			; add stack base
   86 00:0C7A 09 -  -  -  			add 	hl,bc
   87 00:0C7B -  -  -  -  
   88 00:0C7B -  -  -  -  CFReadHLToHLHL:
   89 00:0C7B E5 -  -  -  			push 	hl
   90 00:0C7C ED 27 -  -  			ld_ind_hl 						; get low word
   91 00:0C7E D9 -  -  -  			exx
   92 00:0C7F -  -  -  -  
   93 00:0C7F E1 -  -  -  			pop 	hl 						; get high word
   94 00:0C80 23 -  -  -  			inc 	hl
   95 00:0C81 23 -  -  -  			inc 	hl
   96 00:0C82 ED 27 -  -  			ld_ind_hl
   97 00:0C84 D9 -  -  -  			exx
   98 00:0C85 -  -  -  -  
   99 00:0C85 C9 -  -  -  			ret
  100 00:0C86 -  -  -  -  
  101 00:0C86 -  -  -  -  ; ***************************************************************************************
  102 00:0C86 -  -  -  -  ;
  103 00:0C86 -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 00:0C86 -  -  -  -  ;
  105 00:0C86 -  -  -  -  ; ***************************************************************************************
  106 00:0C86 -  -  -  -  
  107 00:0C86 -  -  -  -  CFWriteHLHLToA:
  108 00:0C86 EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 00:0C87 D9 -  -  -  			exx
  110 00:0C88 EB -  -  -  			ex 		de,hl
  111 00:0C89 D9 -  -  -  			exx
  112 00:0C8A -  -  -  -  
  113 00:0C8A 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  114 00:0C8E 4F -  -  -  			ld 		c,a
  115 00:0C8F 2A 58 00 00 			ld 		hl,(BasicSP) 			; add stack base
  116 00:0C93 09 -  -  -  			add 	hl,bc
  117 00:0C94 -  -  -  -  
  118 00:0C94 -  -  -  -  CFWriteDEDEToHL:
  119 00:0C94 73 -  -  -  			ld 		(hl),e 					; write low word
  120 00:0C95 23 -  -  -  			inc 	hl
  121 00:0C96 72 -  -  -  			ld 		(hl),d
  122 00:0C97 23 -  -  -  			inc 	hl
  123 00:0C98 -  -  -  -  
  124 00:0C98 E5 -  -  -  			push 	hl 						; write high word
  125 00:0C99 D9 -  -  -  			exx
  126 00:0C9A E1 -  -  -  			pop 	hl
  127 00:0C9B 73 -  -  -  			ld 		(hl),e
  128 00:0C9C 23 -  -  -  			inc 	hl
  129 00:0C9D 72 -  -  -  			ld 		(hl),d
  130 00:0C9E D9 -  -  -  			exx
  131 00:0C9F C9 -  -  -  			ret			
  132 00:0CA0 -  -  -  -  
  133 00:0CA0 -  -  -  -  ; ***************************************************************************************
  134 00:0CA0 -  -  -  -  ;
  135 00:0CA0 -  -  -  -  ;									Next Command
  136 00:0CA0 -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 00:0CA0 -  -  -  -  ;
  138 00:0CA0 -  -  -  -  ; ***************************************************************************************
  139 00:0CA0 -  -  -  -  
  140 00:0CA0 -  -  -  -  Command_Next:	;; [next]
  141 00:0CA0 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 00:0CA2 CD 30 0E 00 			call 	StackCheckFrame
  143 00:0CA6 -  -  -  -  			;
  144 00:0CA6 -  -  -  -  			;		Get address of FOR variable
  145 00:0CA6 -  -  -  -  			;
  146 00:0CA6 2A 58 00 00 			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 00:0CAA 01 06 00 00 			ld 		bc,6
  148 00:0CAE 09 -  -  -  			add 	hl,bc
  149 00:0CAF ED 27 -  -  			ld_ind_hl
  150 00:0CB1 -  -  -  -  			;
  151 00:0CB1 -  -  -  -  			; 		Save reference, read value into DE.
  152 00:0CB1 -  -  -  -  			;
  153 00:0CB1 E5 -  -  -  			push 	hl 						; save index address
  154 00:0CB2 CD 7B 0C 00 			call 	CFReadHLToHLHL 			; read the index value.
  155 00:0CB6 -  -  -  -  
  156 00:0CB6 EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 00:0CB7 D9 -  -  -  			exx
  158 00:0CB8 EB -  -  -  			ex 		de,hl
  159 00:0CB9 D9 -  -  -  			exx
  160 00:0CBA -  -  -  -  			;
  161 00:0CBA -  -  -  -  			; 		Read step and Add
  162 00:0CBA -  -  -  -  			;
  163 00:0CBA 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 00:0CBC CD 71 0C 00 			call 	CFReadAToHLHL
  165 00:0CC0 D9 -  -  -  			exx 							; msb of step on stack
  166 00:0CC1 7C -  -  -  			ld 		a,h
  167 00:0CC2 D9 -  -  -  			exx
  168 00:0CC3 F5 -  -  -  			push 	af
  169 00:0CC4 CD 5C 14 00 			call 	Int32Add 				; add step to offset => HL'HL
  170 00:0CC8 -  -  -  -  			;
  171 00:0CC8 -  -  -  -  			;		Put result in DE and write back out
  172 00:0CC8 -  -  -  -  			;
  173 00:0CC8 EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 00:0CC9 D9 -  -  -  			exx
  175 00:0CCA EB -  -  -  			ex 		de,hl
  176 00:0CCB D9 -  -  -  			exx
  177 00:0CCC F1 -  -  -  			pop 	af 						; get msb of step
  178 00:0CCD E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 00:0CCE F5 -  -  -  			push 	af 						; push msb of step back.
  180 00:0CCF CD 94 0C 00 			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 00:0CD3 -  -  -  -  			;
  182 00:0CD3 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 00:0CD3 -  -  -  -  			;
  184 00:0CD3 3E 0A -  -  			ld 		a,10 					; load limit
  185 00:0CD5 CD 71 0C 00 			call 	CFReadAToHLHL
  186 00:0CD9 CD 9C 14 00 			call 	Int32Compare 			; compare limit to index.
  187 00:0CDD C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 00:0CDE B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 00:0CDF 28 0A -  -  			jr 		z,_CNXLoopBack
  190 00:0CE1 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 00:0CE3 28 02 -  -  			jr 		z,_CNXNotMStep
  192 00:0CE5 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 00:0CE7 -  -  -  -  _CNXNotMStep:			
  194 00:0CE7 E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 00:0CE9 20 04 -  -  			jr 		nz,_CNXLoopOver
  196 00:0CEB -  -  -  -  			;
  197 00:0CEB -  -  -  -  			;		For loop goes round again.
  198 00:0CEB -  -  -  -  			;
  199 00:0CEB -  -  -  -  _CNXLoopBack:			
  200 00:0CEB C3 51 0E 00 			jp 		StackLoadPosition
  201 00:0CEF -  -  -  -  			;
  202 00:0CEF -  -  -  -  			;		For loop completed
  203 00:0CEF -  -  -  -  			;
  204 00:0CEF -  -  -  -  _CNXLoopOver:
  205 00:0CEF C3 1D 0E 00 			jp 		StackCloseFrame
  206 00:0CF3 F5 3E 02 32 
              FF FF FF F1 			debug
  207 00:0CFB -  -  -  -  
  208 00:0CFB -  -  -  -  ; ***************************************************************************************
  209 00:0CFB -  -  -  -  ;
  210 00:0CFB -  -  -  -  ;									Changes and Updates
  211 00:0CFB -  -  -  -  ;
  212 00:0CFB -  -  -  -  ; ***************************************************************************************
  213 00:0CFB -  -  -  -  ;
  214 00:0CFB -  -  -  -  ;		Date			Notes
  215 00:0CFB -  -  -  -  ;		==== 			=====
  216 00:0CFB -  -  -  -  ;
  217 00:0CFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:0CFB -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:0CFB -  -  -  -  ; ***************************************************************************************
    2 00:0CFB -  -  -  -  ; ***************************************************************************************
    3 00:0CFB -  -  -  -  ;
    4 00:0CFB -  -  -  -  ;		Name : 		gosub.asm
    5 00:0CFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CFB -  -  -  -  ;		Date : 		7th June 2022
    7 00:0CFB -  -  -  -  ;		Reviewed :	No
    8 00:0CFB -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:0CFB -  -  -  -  ;
   10 00:0CFB -  -  -  -  ; ***************************************************************************************
   11 00:0CFB -  -  -  -  
   12 00:0CFB -  -  -  -  ; ***************************************************************************************
   13 00:0CFB -  -  -  -  ;
   14 00:0CFB -  -  -  -  ;									Gosub Command
   15 00:0CFB -  -  -  -  ;
   16 00:0CFB -  -  -  -  ; ***************************************************************************************
   17 00:0CFB -  -  -  -  
   18 00:0CFB -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:0CFB 3E 13 -  -  			ld		a,STM_GOSUB
   20 00:0CFD CD F8 0D 00 			call 	StackOpenFrame
   21 00:0D01 CD 30 0D 00 			call 	GoGetLineNumber
   22 00:0D05 E5 -  -  -  			push 	hl
   23 00:0D06 CD 36 0E 00 			call 	StackSavePosition
   24 00:0D0A E1 -  -  -  			pop 	hl
   25 00:0D0B CD 3D 0D 00 			call	TransferToLineHL
   26 00:0D0F C9 -  -  -  			ret
   27 00:0D10 -  -  -  -  
   28 00:0D10 -  -  -  -  ; ***************************************************************************************
   29 00:0D10 -  -  -  -  ;
   30 00:0D10 -  -  -  -  ;									Return command
   31 00:0D10 -  -  -  -  ;
   32 00:0D10 -  -  -  -  ; ***************************************************************************************
   33 00:0D10 -  -  -  -  
   34 00:0D10 -  -  -  -  Command_Return: ;; [return]
   35 00:0D10 3E 13 -  -  			ld		a,STM_GOSUB
   36 00:0D12 CD 30 0E 00 			call 	StackCheckFrame
   37 00:0D16 20 09 -  -  			jr 		nz,_ReturnError
   38 00:0D18 CD 51 0E 00 			call 	StackLoadPosition
   39 00:0D1C CD 1D 0E 00 			call 	StackCloseFrame
   40 00:0D20 C9 -  -  -  			ret
   41 00:0D21 -  -  -  -  _ReturnError:
   42 00:0D21 3E 08 C3 02 
              05 00 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:0D27 -  -  -  -  
   44 00:0D27 -  -  -  -  ; ***************************************************************************************
   45 00:0D27 -  -  -  -  ;
   46 00:0D27 -  -  -  -  ;									Changes and Updates
   47 00:0D27 -  -  -  -  ;
   48 00:0D27 -  -  -  -  ; ***************************************************************************************
   49 00:0D27 -  -  -  -  ;
   50 00:0D27 -  -  -  -  ;		Date			Notes
   51 00:0D27 -  -  -  -  ;		==== 			=====
   52 00:0D27 -  -  -  -  ;
   53 00:0D27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:0D27 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:0D27 -  -  -  -  ; ***************************************************************************************
    2 00:0D27 -  -  -  -  ; ***************************************************************************************
    3 00:0D27 -  -  -  -  ;
    4 00:0D27 -  -  -  -  ;		Name : 		goto.asm
    5 00:0D27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D27 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0D27 -  -  -  -  ;		Reviewed :	No
    8 00:0D27 -  -  -  -  ;		Purpose :	Goto command
    9 00:0D27 -  -  -  -  ;
   10 00:0D27 -  -  -  -  ; ***************************************************************************************
   11 00:0D27 -  -  -  -  
   12 00:0D27 -  -  -  -  ; ***************************************************************************************
   13 00:0D27 -  -  -  -  ;
   14 00:0D27 -  -  -  -  ;									Goto Command
   15 00:0D27 -  -  -  -  ;
   16 00:0D27 -  -  -  -  ; ***************************************************************************************
   17 00:0D27 -  -  -  -  
   18 00:0D27 -  -  -  -  Command_GOTO: ;; [goto]
   19 00:0D27 CD 30 0D 00 			call 	GoGetLineNumber
   20 00:0D2B CD 3D 0D 00 			call	TransferToLineHL
   21 00:0D2F C9 -  -  -  			ret
   22 00:0D30 -  -  -  -  
   23 00:0D30 -  -  -  -  ; ***************************************************************************************
   24 00:0D30 -  -  -  -  ;
   25 00:0D30 -  -  -  -  ;							Get and validate a line number in HL
   26 00:0D30 -  -  -  -  ;
   27 00:0D30 -  -  -  -  ; ***************************************************************************************
   28 00:0D30 -  -  -  -  
   29 00:0D30 -  -  -  -  GoGetLineNumber:
   30 00:0D30 CD 35 07 00 			call 	EvaluateInteger
   31 00:0D34 D9 -  -  -  			exx
   32 00:0D35 7C -  -  -  			ld 		a,h
   33 00:0D36 B5 -  -  -  			or 		l
   34 00:0D37 D9 -  -  -  			exx
   35 00:0D38 C8 -  -  -  			ret 	z
   36 00:0D39 C3 66 05 00 			jp 		BadValue
   37 00:0D3D -  -  -  -  
   38 00:0D3D -  -  -  -  ; ***************************************************************************************
   39 00:0D3D -  -  -  -  ;
   40 00:0D3D -  -  -  -  ;							Transfer to Line Number HL
   41 00:0D3D -  -  -  -  ;
   42 00:0D3D -  -  -  -  ; ***************************************************************************************
   43 00:0D3D -  -  -  -  
   44 00:0D3D -  -  -  -  TransferToLineHL:
   45 00:0D3D EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:0D3E 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:0D42 DD 2A 38 00 
              00 -  -  -  			ld 		ix,(CodeAddress)
   48 00:0D47 -  -  -  -  _TLSearch:	
   49 00:0D47 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:0D49 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:0D4C B7 -  -  -  			or 		a 						; if zero
   52 00:0D4D 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:0D4F 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:0D50 -  -  -  -  
   55 00:0D50 7B -  -  -  			ld 		a,e						; compare line address
   56 00:0D51 DD BE 01 -  			cp 		(ix+1)
   57 00:0D54 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:0D56 7A -  -  -  			ld 		a,d
   59 00:0D57 DD BE 02 -  			cp 		(ix+2)
   60 00:0D5A 20 EB -  -  			jr 		nz,_TLSearch
   61 00:0D5C -  -  -  -  			;
   62 00:0D5C DD 22 5C 00 
              00 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 00:0D61 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:0D63 DD 23 -  -  			inc 	ix
   65 00:0D65 DD 23 -  -  			inc 	ix
   66 00:0D67 -  -  -  -  
   67 00:0D67 C9 -  -  -  			ret
   68 00:0D68 -  -  -  -  
   69 00:0D68 -  -  -  -  _TLNotFound:
   70 00:0D68 3E 0A C3 02 
              05 00 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:0D6E -  -  -  -  
   72 00:0D6E -  -  -  -  ; ***************************************************************************************
   73 00:0D6E -  -  -  -  ;
   74 00:0D6E -  -  -  -  ;									Changes and Updates
   75 00:0D6E -  -  -  -  ;
   76 00:0D6E -  -  -  -  ; ***************************************************************************************
   77 00:0D6E -  -  -  -  ;
   78 00:0D6E -  -  -  -  ;		Date			Notes
   79 00:0D6E -  -  -  -  ;		==== 			=====
   80 00:0D6E -  -  -  -  ;
   81 00:0D6E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0D6E -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 00:0D6E -  -  -  -  ; ***************************************************************************************
    2 00:0D6E -  -  -  -  ; ***************************************************************************************
    3 00:0D6E -  -  -  -  ;
    4 00:0D6E -  -  -  -  ;		Name : 		if.asm
    5 00:0D6E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D6E -  -  -  -  ;		Date : 		8th June 2022
    7 00:0D6E -  -  -  -  ;		Reviewed :	No
    8 00:0D6E -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 00:0D6E -  -  -  -  ;
   10 00:0D6E -  -  -  -  ; ***************************************************************************************
   11 00:0D6E -  -  -  -  
   12 00:0D6E -  -  -  -  ; ***************************************************************************************
   13 00:0D6E -  -  -  -  ;
   14 00:0D6E -  -  -  -  ;									If Command
   15 00:0D6E -  -  -  -  ;
   16 00:0D6E -  -  -  -  ; ***************************************************************************************
   17 00:0D6E -  -  -  -  
   18 00:0D6E -  -  -  -  Command_IF: ;; [if]
   19 00:0D6E CD 35 07 00 		call 	EvaluateInteger 			; work out the test.
   20 00:0D72 CD 95 14 00 		call 	Int32Zero 					; test if zero
   21 00:0D76 28 1D -  -  		jr 		z,_IFFail
   22 00:0D78 -  -  -  -  		;
   23 00:0D78 -  -  -  -  		;	 	Passed
   24 00:0D78 -  -  -  -  		;
   25 00:0D78 DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 00:0D7B DD 23 -  -  		inc 	ix
   27 00:0D7D FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 00:0D7F CA 27 0D 00 		jp 		z,Command_GOTO
   29 00:0D83 FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 00:0D85 C2 6C 05 00 		jp 		nz,SyntaxError
   31 00:0D89 DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 00:0D8C E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 00:0D8E FE 40 -  -  		cp 		$40
   34 00:0D90 CA 27 0D 00 		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 00:0D94 C9 -  -  -  		ret 								; otherwise carry on.
   36 00:0D95 -  -  -  -  		;
   37 00:0D95 -  -  -  -  		;		Failed.
   38 00:0D95 -  -  -  -  		;
   39 00:0D95 -  -  -  -  _IFFail:
   40 00:0D95 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 00:0D97 0E B1 -  -  		ld 		c,KWD_ELSE
   42 00:0D99 CD D2 0D 00 		call 	SearchForwardTokens 		; searching forward.
   43 00:0D9D FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 00:0D9F CA 86 02 00 		jp 		z,EOLHandler 				; do the next line code.
   45 00:0DA3 C9 -  -  -  		ret 								; otherwise carry on.
   46 00:0DA4 -  -  -  -  
   47 00:0DA4 -  -  -  -  ; ***************************************************************************************
   48 00:0DA4 -  -  -  -  ;
   49 00:0DA4 -  -  -  -  ;						Else command => Progress to next line
   50 00:0DA4 -  -  -  -  ;
   51 00:0DA4 -  -  -  -  ; ***************************************************************************************
   52 00:0DA4 -  -  -  -  
   53 00:0DA4 -  -  -  -  Command_Else: ;; [else]
   54 00:0DA4 C3 86 02 00 		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 00:0DA8 -  -  -  -  
   56 00:0DA8 -  -  -  -  ; ***************************************************************************************
   57 00:0DA8 -  -  -  -  ;
   58 00:0DA8 -  -  -  -  ;									Changes and Updates
   59 00:0DA8 -  -  -  -  ;
   60 00:0DA8 -  -  -  -  ; ***************************************************************************************
   61 00:0DA8 -  -  -  -  ;
   62 00:0DA8 -  -  -  -  ;		Date			Notes
   63 00:0DA8 -  -  -  -  ;		==== 			=====
   64 00:0DA8 -  -  -  -  ;
   65 00:0DA8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0DA8 -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:0DA8 -  -  -  -  ; ***************************************************************************************
    2 00:0DA8 -  -  -  -  ; ***************************************************************************************
    3 00:0DA8 -  -  -  -  ;
    4 00:0DA8 -  -  -  -  ;		Name : 		repeat.asm
    5 00:0DA8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DA8 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0DA8 -  -  -  -  ;		Reviewed :	No
    8 00:0DA8 -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:0DA8 -  -  -  -  ;
   10 00:0DA8 -  -  -  -  ; ***************************************************************************************
   11 00:0DA8 -  -  -  -  
   12 00:0DA8 -  -  -  -  ; ***************************************************************************************
   13 00:0DA8 -  -  -  -  ;
   14 00:0DA8 -  -  -  -  ;									Repeat Command
   15 00:0DA8 -  -  -  -  ;
   16 00:0DA8 -  -  -  -  ; ***************************************************************************************
   17 00:0DA8 -  -  -  -  
   18 00:0DA8 -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:0DA8 3E 23 -  -  			ld		a,STM_REPEAT
   20 00:0DAA CD F8 0D 00 			call 	StackOpenFrame
   21 00:0DAE CD 36 0E 00 			call 	StackSavePosition
   22 00:0DB2 C9 -  -  -  			ret
   23 00:0DB3 -  -  -  -  
   24 00:0DB3 -  -  -  -  ; ***************************************************************************************
   25 00:0DB3 -  -  -  -  ;
   26 00:0DB3 -  -  -  -  ;									Until command
   27 00:0DB3 -  -  -  -  ;
   28 00:0DB3 -  -  -  -  ; ***************************************************************************************
   29 00:0DB3 -  -  -  -  
   30 00:0DB3 -  -  -  -  Command_Until: ;; [until]
   31 00:0DB3 3E 23 -  -  			ld		a,STM_REPEAT
   32 00:0DB5 CD 30 0E 00 			call 	StackCheckFrame
   33 00:0DB9 20 11 -  -  			jr 		nz,_UntilError
   34 00:0DBB CD 35 07 00 			call	EvaluateInteger 		; until what
   35 00:0DBF CD 95 14 00 			call 	Int32Zero 				; check zero
   36 00:0DC3 CA 51 0E 00 			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:0DC7 CD 1D 0E 00 			call 	StackCloseFrame 		; otherwise end frame.
   38 00:0DCB C9 -  -  -  			ret
   39 00:0DCC -  -  -  -  _UntilError:
   40 00:0DCC 3E 15 C3 02 
              05 00 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:0DD2 -  -  -  -  
   42 00:0DD2 -  -  -  -  ; ***************************************************************************************
   43 00:0DD2 -  -  -  -  ;
   44 00:0DD2 -  -  -  -  ;									Changes and Updates
   45 00:0DD2 -  -  -  -  ;
   46 00:0DD2 -  -  -  -  ; ***************************************************************************************
   47 00:0DD2 -  -  -  -  ;
   48 00:0DD2 -  -  -  -  ;		Date			Notes
   49 00:0DD2 -  -  -  -  ;		==== 			=====
   50 00:0DD2 -  -  -  -  ;
   51 00:0DD2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:0DD2 -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 00:0DD2 -  -  -  -  ; ***************************************************************************************
    2 00:0DD2 -  -  -  -  ; ***************************************************************************************
    3 00:0DD2 -  -  -  -  ;
    4 00:0DD2 -  -  -  -  ;		Name : 		search.asm
    5 00:0DD2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DD2 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0DD2 -  -  -  -  ;		Reviewed :	No
    8 00:0DD2 -  -  -  -  ;		Purpose :	Search forward for token
    9 00:0DD2 -  -  -  -  ;
   10 00:0DD2 -  -  -  -  ; ***************************************************************************************
   11 00:0DD2 -  -  -  -  
   12 00:0DD2 -  -  -  -  ; ***************************************************************************************
   13 00:0DD2 -  -  -  -  ;
   14 00:0DD2 -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 00:0DD2 -  -  -  -  ; 		and IX points to next byte.
   16 00:0DD2 -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 00:0DD2 -  -  -  -  ;
   18 00:0DD2 -  -  -  -  ; ***************************************************************************************
   19 00:0DD2 -  -  -  -  
   20 00:0DD2 -  -  -  -  SearchForwardTokens:
   21 00:0DD2 DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 00:0DD5 DD 23 -  -  		inc 	ix
   23 00:0DD7 B8 -  -  -  		cp 		b 							; exit if either found.
   24 00:0DD8 C8 -  -  -  		ret 	z
   25 00:0DD9 B9 -  -  -  		cp 		c
   26 00:0DDA C8 -  -  -  		ret 	z
   27 00:0DDB -  -  -  -  		;
   28 00:0DDB FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 00:0DDD 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 00:0DDF -  -  -  -  
   31 00:0DDF 11 00 00 00 		ld 		de,0 						; put length into DE
   32 00:0DE3 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0DE6 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 00:0DE7 13 -  -  -  		inc 	de
   35 00:0DE8 DD 19 -  -  		add 	ix,de 						; jump forward
   36 00:0DEA 18 E6 -  -  		jr 		SearchForwardTokens
   37 00:0DEC -  -  -  -  
   38 00:0DEC -  -  -  -  ; ***************************************************************************************
   39 00:0DEC -  -  -  -  ;
   40 00:0DEC -  -  -  -  ;									Changes and Updates
   41 00:0DEC -  -  -  -  ;
   42 00:0DEC -  -  -  -  ; ***************************************************************************************
   43 00:0DEC -  -  -  -  ;
   44 00:0DEC -  -  -  -  ;		Date			Notes
   45 00:0DEC -  -  -  -  ;		==== 			=====
   46 00:0DEC -  -  -  -  ;
   47 00:0DEC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0DEC -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:0DEC -  -  -  -  ; ***************************************************************************************
    2 00:0DEC -  -  -  -  ; ***************************************************************************************
    3 00:0DEC -  -  -  -  ;
    4 00:0DEC -  -  -  -  ;		Name : 		stack.asm
    5 00:0DEC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DEC -  -  -  -  ;		Date : 		6th June 2022
    7 00:0DEC -  -  -  -  ;		Reviewed :	No
    8 00:0DEC -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0DEC -  -  -  -  ;
   10 00:0DEC -  -  -  -  ; ***************************************************************************************
   11 00:0DEC -  -  -  -  ; ***************************************************************************************
   12 00:0DEC -  -  -  -  ;
   13 00:0DEC -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:0DEC -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 00:0DEC -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:0DEC -  -  -  -  ;
   17 00:0DEC -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:0DEC -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:0DEC -  -  -  -  ;
   20 00:0DEC -  -  -  -  ; ***************************************************************************************
   21 00:0DEC -  -  -  -  ;
   22 00:0DEC -  -  -  -  ;								Clear the stack
   23 00:0DEC -  -  -  -  ;
   24 00:0DEC -  -  -  -  ; ***************************************************************************************
   25 00:0DEC -  -  -  -  
   26 00:0DEC -  -  -  -  StackReset:
   27 00:0DEC 2A 3C 00 00 		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:0DF0 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:0DF1 22 58 00 00 		ld 		(BasicSP),hl 				; write out current position
   30 00:0DF5 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:0DF7 C9 -  -  -  		ret
   32 00:0DF8 -  -  -  -  
   33 00:0DF8 -  -  -  -  ; ***************************************************************************************
   34 00:0DF8 -  -  -  -  ;
   35 00:0DF8 -  -  -  -  ;								Open a stack frame type A
   36 00:0DF8 -  -  -  -  ;
   37 00:0DF8 -  -  -  -  ; ***************************************************************************************
   38 00:0DF8 -  -  -  -  
   39 00:0DF8 -  -  -  -  StackOpenFrame:
   40 00:0DF8 F5 -  -  -  		push 	af 							; save frame type
   41 00:0DF9 E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:0DFB 87 -  -  -  		add 	a,a 						; double it
   43 00:0DFC 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 00:0E00 5F -  -  -  		ld 		e,a
   45 00:0E01 2A 58 00 00 		ld 		hl,(BasicSP) 				; get stack pointer
   46 00:0E05 AF -  -  -  		xor 	a
   47 00:0E06 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 00:0E08 22 58 00 00 		ld 		(BasicSP),hl
   49 00:0E0C F1 -  -  -  		pop 	af 							; copy out frame type
   50 00:0E0D 77 -  -  -  		ld 		(hl),a
   51 00:0E0E ED 5B 40 00 
              00 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 00:0E13 AF -  -  -  		xor 	a
   53 00:0E14 ED 52 -  -  		sbc 	hl,de
   54 00:0E16 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 00:0E17 3E 16 C3 02 
              05 00 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 00:0E1D -  -  -  -  
   57 00:0E1D -  -  -  -  ; ***************************************************************************************
   58 00:0E1D -  -  -  -  ;
   59 00:0E1D -  -  -  -  ;								Close Stack Frame
   60 00:0E1D -  -  -  -  ;
   61 00:0E1D -  -  -  -  ; ***************************************************************************************
   62 00:0E1D -  -  -  -  
   63 00:0E1D -  -  -  -  StackCloseFrame:
   64 00:0E1D 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   65 00:0E21 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 00:0E22 E6 0F -  -  		and 	$0F 						; put into UDE
   67 00:0E24 87 -  -  -  		add 	a,a 						; double it
   68 00:0E25 11 00 00 00 		ld 		de,$000000
   69 00:0E29 5F -  -  -  		ld 		e,a
   70 00:0E2A 19 -  -  -  		add 	hl,de 						; close it
   71 00:0E2B 22 58 00 00 		ld 		(BasicSP),hl 				; write it back
   72 00:0E2F C9 -  -  -  		ret
   73 00:0E30 -  -  -  -  
   74 00:0E30 -  -  -  -  ; ***************************************************************************************
   75 00:0E30 -  -  -  -  ;
   76 00:0E30 -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 00:0E30 -  -  -  -  ;
   78 00:0E30 -  -  -  -  ; ***************************************************************************************
   79 00:0E30 -  -  -  -  
   80 00:0E30 -  -  -  -  StackCheckFrame:
   81 00:0E30 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   82 00:0E34 BE -  -  -  		cp 		(hl) 						; get stack marker
   83 00:0E35 C9 -  -  -  		ret
   84 00:0E36 -  -  -  -  
   85 00:0E36 -  -  -  -  ; ***************************************************************************************
   86 00:0E36 -  -  -  -  ;
   87 00:0E36 -  -  -  -  ;								Save position on stack
   88 00:0E36 -  -  -  -  ;
   89 00:0E36 -  -  -  -  ; ***************************************************************************************
   90 00:0E36 -  -  -  -  
   91 00:0E36 -  -  -  -  StackSavePosition:
   92 00:0E36 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 00:0E3A 23 -  -  -  		inc 	hl
   94 00:0E3B ED 5B 5C 00 
              00 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 00:0E40 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 00:0E46 -  -  -  -  		;
   97 00:0E46 E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 00:0E47 DD E5 -  -  		push 	ix 							; HL = current position
   99 00:0E49 E1 -  -  -  		pop 	hl
  100 00:0E4A AF -  -  -  		xor 	a 							; calculate offset
  101 00:0E4B ED 52 -  -  		sbc 	hl,de
  102 00:0E4D 7D -  -  -  		ld 		a,l 						; into A
  103 00:0E4E E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 00:0E4F 77 -  -  -  		ld 		(hl),a
  105 00:0E50 C9 -  -  -  		ret
  106 00:0E51 -  -  -  -  
  107 00:0E51 -  -  -  -  ; ***************************************************************************************
  108 00:0E51 -  -  -  -  ;
  109 00:0E51 -  -  -  -  ;								Load position off stack
  110 00:0E51 -  -  -  -  ;
  111 00:0E51 -  -  -  -  ; ***************************************************************************************
  112 00:0E51 -  -  -  -  
  113 00:0E51 -  -  -  -  StackLoadPosition:
  114 00:0E51 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 00:0E55 23 -  -  -  		inc 	hl
  116 00:0E56 E5 -  -  -  		push 	hl 							; save on stack
  117 00:0E57 ED 27 -  -  		ld_ind_hl 							; get start of line
  118 00:0E59 22 5C 00 00 		ld 		(CurrentLineStart),hl 		; write it back
  119 00:0E5D D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 00:0E5E 13 -  -  -  		inc 	de
  121 00:0E5F 13 -  -  -  		inc 	de
  122 00:0E60 13 -  -  -  		inc 	de
  123 00:0E61 13 -  -  -  		inc 	de
  124 00:0E62 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 00:0E63 11 00 00 00 		ld 		de,$000000
  126 00:0E67 5F -  -  -  		ld 		e,a
  127 00:0E68 19 -  -  -  		add 	hl,de 						; add to start => position
  128 00:0E69 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 00:0E6A DD E1 -  -  		pop 	ix
  130 00:0E6C C9 -  -  -  		ret
  131 00:0E6D -  -  -  -  
  132 00:0E6D -  -  -  -  ; ***************************************************************************************
  133 00:0E6D -  -  -  -  ;
  134 00:0E6D -  -  -  -  ;									Changes and Updates
  135 00:0E6D -  -  -  -  ;
  136 00:0E6D -  -  -  -  ; ***************************************************************************************
  137 00:0E6D -  -  -  -  ;
  138 00:0E6D -  -  -  -  ;		Date			Notes
  139 00:0E6D -  -  -  -  ;		==== 			=====
  140 00:0E6D -  -  -  -  ;
  141 00:0E6D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0E6D -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0E6D -  -  -  -  ; ***************************************************************************************
    2 00:0E6D -  -  -  -  ; ***************************************************************************************
    3 00:0E6D -  -  -  -  ;
    4 00:0E6D -  -  -  -  ;		Name : 		utility.asm
    5 00:0E6D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E6D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0E6D -  -  -  -  ;		Reviewed :	No
    8 00:0E6D -  -  -  -  ;		Purpose :	Utility routines
    9 00:0E6D -  -  -  -  ;
   10 00:0E6D -  -  -  -  ; ***************************************************************************************
   11 00:0E6D -  -  -  -  ; ***************************************************************************************
   12 00:0E6D -  -  -  -  
   13 00:0E6D -  -  -  -  ; ***************************************************************************************
   14 00:0E6D -  -  -  -  ;
   15 00:0E6D -  -  -  -  ;							Print ASCII string at HL
   16 00:0E6D -  -  -  -  ;
   17 00:0E6D -  -  -  -  ; ***************************************************************************************
   18 00:0E6D -  -  -  -  
   19 00:0E6D -  -  -  -  PrintStringAtHL:
   20 00:0E6D 7E -  -  -  		ld 		a,(hl)
   21 00:0E6E FE 20 -  -  		cp 		$20		
   22 00:0E70 D8 -  -  -  		ret 	c
   23 00:0E71 CD 2C 15 00 		call 	SYSPrintChar
   24 00:0E75 23 -  -  -  		inc 	hl
   25 00:0E76 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0E78 -  -  -  -  
   27 00:0E78 -  -  -  -  ; ***************************************************************************************
   28 00:0E78 -  -  -  -  ;
   29 00:0E78 -  -  -  -  ;									Changes and Updates
   30 00:0E78 -  -  -  -  ;
   31 00:0E78 -  -  -  -  ; ***************************************************************************************
   32 00:0E78 -  -  -  -  ;
   33 00:0E78 -  -  -  -  ;		Date			Notes
   34 00:0E78 -  -  -  -  ;		==== 			=====
   35 00:0E78 -  -  -  -  ;
   36 00:0E78 -  -  -  -  ; ***************************************************************************************
   37 00:0E78 -  -  -  -  		
Listing for file "_build.asm"
   67 00:0E78 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0E78 -  -  -  -  ; ***************************************************************************************
    2 00:0E78 -  -  -  -  ; ***************************************************************************************
    3 00:0E78 -  -  -  -  ;
    4 00:0E78 -  -  -  -  ;		Name : 		create.asm
    5 00:0E78 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E78 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0E78 -  -  -  -  ;		Reviewed :	No
    8 00:0E78 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0E78 -  -  -  -  ;
   10 00:0E78 -  -  -  -  ; ***************************************************************************************
   11 00:0E78 -  -  -  -  ; ***************************************************************************************
   12 00:0E78 -  -  -  -  
   13 00:0E78 -  -  -  -  ; ***************************************************************************************
   14 00:0E78 -  -  -  -  ;
   15 00:0E78 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0E78 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0E78 -  -  -  -  ;
   18 00:0E78 -  -  -  -  ; ***************************************************************************************
   19 00:0E78 -  -  -  -  
   20 00:0E78 -  -  -  -  VariableCreate:		
   21 00:0E78 -  -  -  -  		;
   22 00:0E78 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:0E78 -  -  -  -  		;
   24 00:0E78 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:0E7C 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:0E7D E5 -  -  -  		push 	hl 							; save count.
   27 00:0E7E CD 74 0B 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0E82 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0E83 -  -  -  -  		;
   30 00:0E83 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0E83 -  -  -  -  		;
   32 00:0E83 E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0E84 -  -  -  -  _VCClear:
   34 00:0E84 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0E86 23 -  -  -  		inc 	hl
   36 00:0E87 0B -  -  -  		dec 	bc
   37 00:0E88 78 -  -  -  		ld		a,b
   38 00:0E89 B1 -  -  -  		or 		c
   39 00:0E8A 20 F8 -  -  		jr 		nz,_VCClear
   40 00:0E8C E1 -  -  -  		pop 	hl							; restore start address
   41 00:0E8D -  -  -  -  		;
   42 00:0E8D -  -  -  -  		;		Now start to create the data.
   43 00:0E8D -  -  -  -  		;
   44 00:0E8D E5 -  -  -  		push 	hl 							; save start
   45 00:0E8E -  -  -  -  		;
   46 00:0E8E -  -  -  -  		;		Write hash to +0
   47 00:0E8E -  -  -  -  		;
   48 00:0E8E 3A 8E 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0E92 77 -  -  -  		ld 		(hl),a
   50 00:0E93 23 -  -  -  		inc 	hl
   51 00:0E94 -  -  -  -  		;
   52 00:0E94 -  -  -  -  		;		Write list head to +1
   53 00:0E94 -  -  -  -  		;
   54 00:0E94 E5 -  -  -  		push 	hl 							; save write position
   55 00:0E95 2A 90 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0E99 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:0E9B EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:0E9C E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:0E9D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0EA3 -  -  -  -  		;
   61 00:0EA3 -  -  -  -  		;		Write variable name to +5
   62 00:0EA3 -  -  -  -  		;
   63 00:0EA3 ED 5B 8A 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:0EA8 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:0EAE -  -  -  -  		;
   66 00:0EAE D1 -  -  -  		pop 	de 							; get the start address back
   67 00:0EAF 2A 90 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0EB3 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:0EB9 -  -  -  -  		;
   70 00:0EB9 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:0EBA C9 -  -  -  		ret
   72 00:0EBB -  -  -  -  
   73 00:0EBB -  -  -  -  ; ***************************************************************************************
   74 00:0EBB -  -  -  -  ;
   75 00:0EBB -  -  -  -  ;									Changes and Updates
   76 00:0EBB -  -  -  -  ;
   77 00:0EBB -  -  -  -  ; ***************************************************************************************
   78 00:0EBB -  -  -  -  ;
   79 00:0EBB -  -  -  -  ;		Date			Notes
   80 00:0EBB -  -  -  -  ;		==== 			=====
   81 00:0EBB -  -  -  -  ;
   82 00:0EBB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0EBB -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0EBB -  -  -  -  ; ***************************************************************************************
    2 00:0EBB -  -  -  -  ; ***************************************************************************************
    3 00:0EBB -  -  -  -  ;
    4 00:0EBB -  -  -  -  ;		Name : 		find.asm
    5 00:0EBB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EBB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0EBB -  -  -  -  ;		Reviewed :	No
    8 00:0EBB -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0EBB -  -  -  -  ;
   10 00:0EBB -  -  -  -  ; ***************************************************************************************
   11 00:0EBB -  -  -  -  ; ***************************************************************************************
   12 00:0EBB -  -  -  -  
   13 00:0EBB -  -  -  -  ; ***************************************************************************************
   14 00:0EBB -  -  -  -  ;
   15 00:0EBB -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0EBB -  -  -  -  ; 		variable information at (IX)
   17 00:0EBB -  -  -  -  ;
   18 00:0EBB -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0EBB -  -  -  -  ;		Don't autocreate arrays.
   20 00:0EBB -  -  -  -  ;
   21 00:0EBB -  -  -  -  ; ***************************************************************************************
   22 00:0EBB -  -  -  -  
   23 00:0EBB -  -  -  -  FindVariable:
   24 00:0EBB DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0EBE FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0EC0 D2 6C 05 00 		jp 		nc,SyntaxError 		
   27 00:0EC4 -  -  -  -  
   28 00:0EC4 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0EC7 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0EC9 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0ECB FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0ECD 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0ECF -  -  -  -  		;
   34 00:0ECF -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0ECF -  -  -  -  		;
   36 00:0ECF 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0ED3 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0ED6 87 -  -  -  		add 	a,a 						; x4
   39 00:0ED7 87 -  -  -  		add 	a,a
   40 00:0ED8 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0ED9 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0EDA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0EDC CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0EDE DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:0EE0 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:0EE1 C9 -  -  -  		ret
   47 00:0EE2 -  -  -  -  		;
   48 00:0EE2 -  -  -  -  		;		Not a standard simple variable.
   49 00:0EE2 -  -  -  -  		;
   50 00:0EE2 -  -  -  -  _FVNotSimple:
   51 00:0EE2 CD 48 0F 00 		call 	VariableInformation 		; get information about the variable.
   52 00:0EE6 CD 84 0F 00 		call 	VariableSearchList 			; search the linked list
   53 00:0EEA 38 14 -  -  		jr 		c,_FVNotFound  				
   54 00:0EEC -  -  -  -  		;
   55 00:0EEC -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0EEC -  -  -  -  		;
   57 00:0EEC -  -  -  -  _FVExitReference:		
   58 00:0EEC 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:0EF0 19 -  -  -  		add 	hl,de 
   60 00:0EF1 -  -  -  -  		;
   61 00:0EF1 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:0EF1 -  -  -  -  		;
   63 00:0EF1 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:0EF4 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:0EF6 CC 1F 0F 00 		call 	z,ArrayLookup 				; array access required.
   66 00:0EFA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:0EFC CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:0EFE AF -  -  -  		xor 	a 							; clear carry and return
   69 00:0EFF C9 -  -  -  		ret
   70 00:0F00 -  -  -  -  		;
   71 00:0F00 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:0F00 -  -  -  -  		;
   73 00:0F00 -  -  -  -  _FVNotFound:		
   74 00:0F00 3A 80 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:0F04 B7 -  -  -  		or 		a
   76 00:0F05 28 11 -  -  		jr 		z,_FVFail
   77 00:0F07 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:0F0A FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:0F0C 28 0A -  -  		jr 		z,_FVFail
   80 00:0F0E 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 00:0F12 CD 78 0E 00 		call 	VariableCreate 				; create a new variable.
   82 00:0F16 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:0F18 -  -  -  -  
   84 00:0F18 -  -  -  -  _FVFail:
   85 00:0F18 DD 2A 8A 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:0F1D 37 -  -  -  		scf
   87 00:0F1E C9 -  -  -  		ret
   88 00:0F1F -  -  -  -  
   89 00:0F1F -  -  -  -  ; ***************************************************************************************
   90 00:0F1F -  -  -  -  ;
   91 00:0F1F -  -  -  -  ;									 Array lookup
   92 00:0F1F -  -  -  -  ;
   93 00:0F1F -  -  -  -  ; ***************************************************************************************
   94 00:0F1F -  -  -  -  
   95 00:0F1F -  -  -  -  ArrayLookup:
   96 00:0F1F E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:0F20 CD 0F 07 00 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:0F24 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:0F25 7C -  -  -  		ld 		a,h
  100 00:0F26 B5 -  -  -  		or 		l
  101 00:0F27 D9 -  -  -  		exx
  102 00:0F28 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:0F2A 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:0F2E 54 -  -  -  		ld 		d,h
  105 00:0F2F 5D -  -  -  		ld 		e,l
  106 00:0F30 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:0F31 E5 -  -  -  		push 	hl
  108 00:0F32 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:0F34 AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:0F35 ED 52 -  -  		sbc 	hl,de
  111 00:0F37 DA 42 0F 00 		jp 		c,_ALBadValue 				; if max < index then error
  112 00:0F3B EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:0F3C 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:0F3D 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:0F3E 29 -  -  -  		add 	hl,hl
  116 00:0F3F D1 -  -  -  		pop 	de 							; get array base back
  117 00:0F40 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:0F41 C9 -  -  -  		ret
  119 00:0F42 -  -  -  -  
  120 00:0F42 -  -  -  -  _ALBadValue:
  121 00:0F42 3E 09 C3 02 
              05 00 -  -  		ERR_INDEX
  122 00:0F48 -  -  -  -  		
  123 00:0F48 -  -  -  -  ; ***************************************************************************************
  124 00:0F48 -  -  -  -  ;
  125 00:0F48 -  -  -  -  ;									Changes and Updates
  126 00:0F48 -  -  -  -  ;
  127 00:0F48 -  -  -  -  ; ***************************************************************************************
  128 00:0F48 -  -  -  -  ;
  129 00:0F48 -  -  -  -  ;		Date			Notes
  130 00:0F48 -  -  -  -  ;		==== 			=====
  131 00:0F48 -  -  -  -  ;
  132 00:0F48 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:0F48 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0F48 -  -  -  -  ; ***************************************************************************************
    2 00:0F48 -  -  -  -  ; ***************************************************************************************
    3 00:0F48 -  -  -  -  ;
    4 00:0F48 -  -  -  -  ;		Name : 		info.asm
    5 00:0F48 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F48 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0F48 -  -  -  -  ;		Reviewed :	No
    8 00:0F48 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0F48 -  -  -  -  ;
   10 00:0F48 -  -  -  -  ; ***************************************************************************************
   11 00:0F48 -  -  -  -  ; ***************************************************************************************
   12 00:0F48 -  -  -  -  
   13 00:0F48 -  -  -  -  ; ***************************************************************************************
   14 00:0F48 -  -  -  -  ;
   15 00:0F48 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0F48 -  -  -  -  ; 		after the identifier.
   17 00:0F48 -  -  -  -  ;
   18 00:0F48 -  -  -  -  ; ***************************************************************************************
   19 00:0F48 -  -  -  -  
   20 00:0F48 -  -  -  -  VariableInformation:
   21 00:0F48 DD 22 8A 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:0F4D -  -  -  -  		;
   23 00:0F4D -  -  -  -  		; 		Calculate hash, find end.
   24 00:0F4D -  -  -  -  		;
   25 00:0F4D 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:0F4F -  -  -  -  _VICalculateHash:
   27 00:0F4F DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:0F52 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:0F54 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:0F56 80 -  -  -  		add 	a,b 						; add to hash
   31 00:0F57 07 -  -  -  		rlca
   32 00:0F58 07 -  -  -  		rlca
   33 00:0F59 80 -  -  -  		add 	a,b
   34 00:0F5A 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0F5B DD 23 -  -  		inc 	ix 							; next character
   36 00:0F5D 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:0F5F -  -  -  -  		;
   38 00:0F5F -  -  -  -  _VIHashDone:
   39 00:0F5F 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:0F60 -  -  -  -  		;
   41 00:0F60 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:0F60 -  -  -  -  		;
   43 00:0F60 32 8E 00 00 		ld 		(VarHash),a
   44 00:0F64 -  -  -  -  		;
   45 00:0F64 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:0F64 -  -  -  -  		;		
   47 00:0F64 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:0F66 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0F6A 6F -  -  -  		ld 		l,a
   50 00:0F6B 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0F6C 29 -  -  -  		add 	hl,hl
   52 00:0F6D -  -  -  -  		;
   53 00:0F6D ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0F72 19 -  -  -  		add 	hl,de
   55 00:0F73 -  -  -  -  		;
   56 00:0F73 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0F76 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0F78 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0F7A 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0F7E 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0F7F -  -  -  -  _VINotArray:
   62 00:0F7F 22 90 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0F83 C9 -  -  -  		ret
   64 00:0F84 -  -  -  -  
   65 00:0F84 -  -  -  -  ; ***************************************************************************************
   66 00:0F84 -  -  -  -  ;
   67 00:0F84 -  -  -  -  ;									Changes and Updates
   68 00:0F84 -  -  -  -  ;
   69 00:0F84 -  -  -  -  ; ***************************************************************************************
   70 00:0F84 -  -  -  -  ;
   71 00:0F84 -  -  -  -  ;		Date			Notes
   72 00:0F84 -  -  -  -  ;		==== 			=====
   73 00:0F84 -  -  -  -  ;
   74 00:0F84 -  -  -  -  ; ***************************************************************************************
   75 00:0F84 -  -  -  -  
Listing for file "_build.asm"
   70 00:0F84 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0F84 -  -  -  -  ; ***************************************************************************************
    2 00:0F84 -  -  -  -  ; ***************************************************************************************
    3 00:0F84 -  -  -  -  ;
    4 00:0F84 -  -  -  -  ;		Name : 		search.asm
    5 00:0F84 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0F84 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0F84 -  -  -  -  ;		Reviewed :	No
    8 00:0F84 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0F84 -  -  -  -  ;
   10 00:0F84 -  -  -  -  ; ***************************************************************************************
   11 00:0F84 -  -  -  -  ; ***************************************************************************************
   12 00:0F84 -  -  -  -  
   13 00:0F84 -  -  -  -  ; ***************************************************************************************
   14 00:0F84 -  -  -  -  ;
   15 00:0F84 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0F84 -  -  -  -  ;		CS if failed.
   17 00:0F84 -  -  -  -  ;
   18 00:0F84 -  -  -  -  ; ***************************************************************************************
   19 00:0F84 -  -  -  -  
   20 00:0F84 -  -  -  -  VariableSearchList:
   21 00:0F84 2A 90 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0F88 -  -  -  -  		;
   23 00:0F88 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0F88 -  -  -  -  		;		the address of the hash record
   25 00:0F88 -  -  -  -  		;
   26 00:0F88 -  -  -  -  _VSLLoop:
   27 00:0F88 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0F8A -  -  -  -  		;
   29 00:0F8A E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0F8B AF -  -  -  		xor 	a
   31 00:0F8C ED 6A -  -  		adc 	hl,hl
   32 00:0F8E E1 -  -  -  		pop 	hl
   33 00:0F8F 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0F91 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0F92 C8 -  -  -  		ret 	z
   36 00:0F93 -  -  -  -  _VSLRecord:
   37 00:0F93 -  -  -  -  		;
   38 00:0F93 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0F93 -  -  -  -  		;
   40 00:0F93 3A 8E 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0F97 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0F98 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0F99 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0F9B -  -  -  -  		;
   45 00:0F9B -  -  -  -  		;		Now check the name
   46 00:0F9B -  -  -  -  		;
   47 00:0F9B E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:0F9C 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:0F9D 23 -  -  -  		inc 	hl
   50 00:0F9E 23 -  -  -  		inc 	hl
   51 00:0F9F 23 -  -  -  		inc 	hl
   52 00:0FA0 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0FA2 ED 5B 8A 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0FA7 -  -  -  -  		;
   55 00:0FA7 -  -  -  -  		;		Check individual characters
   56 00:0FA7 -  -  -  -  		;
   57 00:0FA7 -  -  -  -  _VSLCharacter:
   58 00:0FA7 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0FA8 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0FAA 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:0FAC BE -  -  -  		cp 		(hl) 						; compare them
   62 00:0FAD 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:0FAE 13 -  -  -  		inc 	de
   64 00:0FAF 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:0FB1 -  -  -  -  		;
   66 00:0FB1 -  -  -  -  _VSLFailed:
   67 00:0FB1 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0FB2 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0FB4 -  -  -  -  		;
   70 00:0FB4 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0FB4 -  -  -  -  		;		
   72 00:0FB4 -  -  -  -  _VSLEndIdentifier:
   73 00:0FB4 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0FB5 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0FB7 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0FB9 -  -  -  -  		;
   77 00:0FB9 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0FBA 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0FBB AF -  -  -  		xor 	a 							; clear carry
   80 00:0FBC C9 -  -  -  		ret
   81 00:0FBD -  -  -  -  
   82 00:0FBD -  -  -  -  ; ***************************************************************************************
   83 00:0FBD -  -  -  -  ;
   84 00:0FBD -  -  -  -  ;									Changes and Updates
   85 00:0FBD -  -  -  -  ;
   86 00:0FBD -  -  -  -  ; ***************************************************************************************
   87 00:0FBD -  -  -  -  ;
   88 00:0FBD -  -  -  -  ;		Date			Notes
   89 00:0FBD -  -  -  -  ;		==== 			=====
   90 00:0FBD -  -  -  -  ;
   91 00:0FBD -  -  -  -  ; ***************************************************************************************
   92 00:0FBD -  -  -  -  		
Listing for file "_build.asm"
   71 00:0FBD -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0FBD -  -  -  -  ;
    2 00:0FBD -  -  -  -  ;	This file is automatically generated.
    3 00:0FBD -  -  -  -  ;
    4 00:0FBD 00 00 00 -  	.block	$20-($ & $1F)
    5 00:0FC0 -  -  -  -  PrecedenceTable:
    6 00:0FC0 06 -  -  -  	.db	6	; $0083 !
    7 00:0FC1 06 -  -  -  	.db	6	; $0084 ?
    8 00:0FC2 05 -  -  -  	.db	5	; $0085 *
    9 00:0FC3 05 -  -  -  	.db	5	; $0086 /
   10 00:0FC4 05 -  -  -  	.db	5	; $0087 mod
   11 00:0FC5 05 -  -  -  	.db	5	; $0088 div
   12 00:0FC6 04 -  -  -  	.db	4	; $0089 +
   13 00:0FC7 04 -  -  -  	.db	4	; $008a -
   14 00:0FC8 03 -  -  -  	.db	3	; $008b >=
   15 00:0FC9 03 -  -  -  	.db	3	; $008c <=
   16 00:0FCA 03 -  -  -  	.db	3	; $008d >
   17 00:0FCB 03 -  -  -  	.db	3	; $008e <
   18 00:0FCC 03 -  -  -  	.db	3	; $008f =
   19 00:0FCD 03 -  -  -  	.db	3	; $0090 <>
   20 00:0FCE 02 -  -  -  	.db	2	; $0091 and
   21 00:0FCF 01 -  -  -  	.db	1	; $0092 or
   22 00:0FD0 01 -  -  -  	.db	1	; $0093 eor
   23 00:0FD1 -  -  -  -  
Listing for file "_build.asm"
   72 00:0FD1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0FD1 -  -  -  -  ;
    2 00:0FD1 -  -  -  -  ;	This is automatically generated.
    3 00:0FD1 -  -  -  -  ;
    4 00:0FD1 -  -  -  -  ErrorIDTable:
    5 00:0FD1 3D 10 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0FD5 43 10 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0FD9 54 10 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0FDD 62 10 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0FE1 6C 10 00 00 	.dw	ErrText_data & $FFFF,ErrText_data >> 16
   10 00:0FE5 78 10 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   11 00:0FE9 82 10 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   12 00:0FED 9C 10 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   13 00:0FF1 AD 10 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   14 00:0FF5 C2 10 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   15 00:0FF9 D2 10 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   16 00:0FFD E7 10 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   17 00:1001 F5 10 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   18 00:1005 06 11 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   19 00:1009 14 11 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   20 00:100D 1E 11 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   21 00:1011 33 11 00 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   22 00:1015 48 11 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   23 00:1019 5E 11 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   24 00:101D 6C 11 00 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   25 00:1021 7F 11 00 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   26 00:1025 91 11 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   27 00:1029 A6 11 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   28 00:102D B2 11 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   29 00:1031 B7 11 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   30 00:1035 C4 11 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   31 00:1039 D5 11 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   32 00:103D -  -  -  -  
   33 00:103D -  -  -  -  ErrText_warmstart:
   34 00:103D 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   35 00:1043 -  -  -  -  ErrText_assert:
   36 00:1043 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   37 00:1054 -  -  -  -  ErrText_badtype:
   38 00:1054 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   39 00:1062 -  -  -  -  ErrText_badvalue:
   40 00:1062 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   41 00:106C -  -  -  -  ErrText_data:
   42 00:106C 4F 75 74 20 
              6F 66 20 44 
              61 74 61 00 	.db "Out of Data",0
   43 00:1078 -  -  -  -  ErrText_dim:
   44 00:1078 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   45 00:1082 -  -  -  -  ErrText_disabled:
   46 00:1082 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   47 00:109C -  -  -  -  ErrText_divzero:
   48 00:109C 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   49 00:10AD -  -  -  -  ErrText_gosub:
   50 00:10AD 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   51 00:10C2 -  -  -  -  ErrText_index:
   52 00:10C2 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   53 00:10D2 -  -  -  -  ErrText_lineno:
   54 00:10D2 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   55 00:10E7 -  -  -  -  ErrText_memory:
   56 00:10E7 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   57 00:10F5 -  -  -  -  ErrText_next:
   58 00:10F5 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   59 00:1106 -  -  -  -  ErrText_nocomma:
   60 00:1106 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   61 00:1114 -  -  -  -  ErrText_nodollar:
   62 00:1114 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   63 00:111E -  -  -  -  ErrText_nolbracket:
   64 00:111E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   65 00:1133 -  -  -  -  ErrText_noproc:
   66 00:1133 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   67 00:1148 -  -  -  -  ErrText_norbracket:
   68 00:1148 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   69 00:115E -  -  -  -  ErrText_notref:
   70 00:115E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   71 00:116C -  -  -  -  ErrText_param:
   72 00:116C 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   73 00:117F -  -  -  -  ErrText_proc:
   74 00:117F 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   75 00:1191 -  -  -  -  ErrText_repeat:
   76 00:1191 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   77 00:11A6 -  -  -  -  ErrText_stack:
   78 00:11A6 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   79 00:11B2 -  -  -  -  ErrText_stop:
   80 00:11B2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   81 00:11B7 -  -  -  -  ErrText_syntax:
   82 00:11B7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   83 00:11C4 -  -  -  -  ErrText_todo:
   84 00:11C4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   85 00:11D5 -  -  -  -  ErrText_unknownvar:
   86 00:11D5 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   73 00:11E6 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:11E6 -  -  -  -  ;
    2 00:11E6 -  -  -  -  ;	Vectors for set 0
    3 00:11E6 -  -  -  -  ;
    4 00:11E6 -  -  -  -  VectorsSet0:
    5 00:11E6 86 02 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:11EA 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:11EE 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:11F2 E2 05 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:11F6 EB 05 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:11FA 8E 05 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:11FE 9C 05 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:1202 AA 05 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:1206 9C 05 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:120A 72 05 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:120E 80 05 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:1212 49 06 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:1216 3F 06 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:121A 2B 06 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:121E 21 06 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:1222 17 06 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:1226 35 06 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:122A B8 05 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:122E C6 05 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:1232 D4 05 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:1236 BB 09 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:123A B3 09 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:123E D5 08 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:1242 02 09 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:1246 C4 08 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:124A 9A 08 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:124E 99 09 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:1252 CA 09 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:1256 B0 08 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:125A A7 08 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:125E E0 08 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:1262 F5 08 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:1266 F2 09 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:126A F9 09 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:126E 06 0A 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:1272 09 06 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:1276 0D 06 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:127A CB 01 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:127E CB 01 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:1282 CF 01 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:1286 CB 01 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:128A 6D 03 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:128E CB 01 00 00 	addr(BadCmd_LSBracket)           ; $00aa [
   48 00:1292 CB 01 00 00 	addr(BadCmd_RSBracket)           ; $00ab ]
   49 00:1296 CB 01 00 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 00:129A A8 0D 00 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 00:129E B3 0D 00 00 	addr(Command_Until)              ; $00ae until
   52 00:12A2 6E 0D 00 00 	addr(Command_IF)                 ; $00af if
   53 00:12A6 CB 01 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:12AA A4 0D 00 00 	addr(Command_Else)               ; $00b1 else
   55 00:12AE 0A 0C 00 00 	addr(Command_FOR)                ; $00b2 for
   56 00:12B2 CB 01 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:12B6 CB 01 00 00 	addr(BadCmd_Step)                ; $00b4 step
   58 00:12BA A0 0C 00 00 	addr(Command_Next)               ; $00b5 next
   59 00:12BE CB 01 00 00 	addr(BadCmd_Def)                 ; $00b6 def
   60 00:12C2 A6 0A 00 00 	addr(Command_PROC)               ; $00b7 proc
   61 00:12C6 00 0B 00 00 	addr(Command_ENDPROC)            ; $00b8 endproc
   62 00:12CA FB 0C 00 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:12CE 10 0D 00 00 	addr(Command_Return)             ; $00ba return
   64 00:12D2 27 0D 00 00 	addr(Command_GOTO)               ; $00bb goto
   65 00:12D6 1B 0A 00 00 	addr(Command_LOCAL)              ; $00bc local
   66 00:12DA D0 01 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:12DE 6D 03 00 00 	addr(Command_REM)                ; $00be rem
   68 00:12E2 9D 02 00 00 	addr(Command_LET)                ; $00bf let
   69 00:12E6 03 04 00 00 	addr(Command_VDU)                ; $00c0 vdu
   70 00:12EA 02 03 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:12EE 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:12F2 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:12F6 62 16 00 00 	addr(Command_LIST)               ; $00c4 list
   74 00:12FA FA 0B 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:12FE 8A 03 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:1302 37 04 00 00 	addr(Command_READ)               ; $00c7 read
   77 00:1306 CB 01 00 00 	addr(BadCmd_Data)                ; $00c8 data
   78 00:130A AC 04 00 00 	addr(Command_RESTORE)            ; $00c9 restore
   79 00:130E BA 01 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:1312 96 0B 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:1316 80 02 00 00 	addr(Command_END)                ; $00cc end
   82 00:131A FD 03 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:131E -  -  -  -  ;
   84 00:131E -  -  -  -  ;	Vectors for set 1
   85 00:131E -  -  -  -  ;
   86 00:131E -  -  -  -  VectorsSet1:
   87 00:131E -  -  -  -  ;
   88 00:131E -  -  -  -  ;	Vectors for set 2
   89 00:131E -  -  -  -  ;
   90 00:131E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   74 00:131E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:131E -  -  -  -  ; ***************************************************************************************
    2 00:131E -  -  -  -  ; ***************************************************************************************
    3 00:131E -  -  -  -  ;
    4 00:131E -  -  -  -  ;		Name : 		idivide.asm
    5 00:131E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:131E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:131E -  -  -  -  ;		Reviewed :	No
    8 00:131E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:131E -  -  -  -  ;
   10 00:131E -  -  -  -  ; ***************************************************************************************
   11 00:131E -  -  -  -  ; ***************************************************************************************
   12 00:131E -  -  -  -  
   13 00:131E -  -  -  -  ; ***************************************************************************************
   14 00:131E -  -  -  -  ;
   15 00:131E -  -  -  -  ;								Unsigned integer divide
   16 00:131E -  -  -  -  ;
   17 00:131E -  -  -  -  ; ***************************************************************************************
   18 00:131E -  -  -  -  
   19 00:131E -  -  -  -  Int32UDivide:
   20 00:131E 37 -  -  -  		scf
   21 00:131F C3 63 13 00 		jp 		_I32UnsignedDivide		
   22 00:1323 -  -  -  -  
   23 00:1323 -  -  -  -  ; ***************************************************************************************
   24 00:1323 -  -  -  -  ;
   25 00:1323 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:1323 -  -  -  -  ;
   27 00:1323 -  -  -  -  ; ***************************************************************************************
   28 00:1323 -  -  -  -  
   29 00:1323 -  -  -  -  Int32SDivide:
   30 00:1323 37 -  -  -  		scf
   31 00:1324 18 01 -  -  		jr 		_I32SDivide
   32 00:1326 -  -  -  -  Int32Modulus:
   33 00:1326 AF -  -  -  		xor 	a
   34 00:1327 -  -  -  -  _I32SDivide:
   35 00:1327 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:1328 F5 -  -  -  		push 	af
   37 00:1329 08 -  -  -  		ex 		af,af'
   38 00:132A -  -  -  -  
   39 00:132A D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:132B D9 -  -  -  		exx
   41 00:132C D5 -  -  -  		push 	de
   42 00:132D D9 -  -  -  		exx
   43 00:132E -  -  -  -  
   44 00:132E F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:132F AF -  -  -  		xor 	a 							; clear sign count.
   46 00:1330 CD 50 13 00 		call 	_I32CheckHLSignSwap
   47 00:1334 CD 50 13 00 		call 	_I32CheckHLSignSwap
   48 00:1338 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:1339 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:133A F5 -  -  -  		push 	af
   51 00:133B CD 63 13 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:133F F1 -  -  -  		pop 	af 							; get function back
   53 00:1340 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:1342 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:1343 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:1345 C4 C6 14 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:1349 -  -  -  -  _I32SDExit:
   58 00:1349 D9 -  -  -  		exx 								; restore DE'DE
   59 00:134A D1 -  -  -  		pop 	de
   60 00:134B D9 -  -  -  		exx
   61 00:134C D1 -  -  -  		pop 	de
   62 00:134D F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:134E 08 -  -  -  		ex 		af,af'
   64 00:134F C9 -  -  -  		ret
   65 00:1350 -  -  -  -  
   66 00:1350 -  -  -  -  
   67 00:1350 -  -  -  -  _I32CheckHLSignSwap:
   68 00:1350 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:1351 CB 7C -  -  		bit 	7,h
   70 00:1353 D9 -  -  -  		exx
   71 00:1354 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:1356 -  -  -  -  		;
   73 00:1356 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:1358 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:1359 CD C6 14 00 		call 	Int32Negate 				
   76 00:135D F1 -  -  -  		pop 	af
   77 00:135E -  -  -  -  _I32CHSPositive:
   78 00:135E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:135F EB -  -  -  		ex 		de,hl
   80 00:1360 D9 -  -  -  		exx		
   81 00:1361 EB -  -  -  		ex 		de,hl
   82 00:1362 C9 -  -  -  		ret
   83 00:1363 -  -  -  -  
   84 00:1363 -  -  -  -  ; ***************************************************************************************
   85 00:1363 -  -  -  -  ;
   86 00:1363 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:1363 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:1363 -  -  -  -  ;
   89 00:1363 -  -  -  -  ; ***************************************************************************************
   90 00:1363 -  -  -  -  
   91 00:1363 -  -  -  -  _I32UnsignedDivide:
   92 00:1363 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:1364 D5 -  -  -  		push 	de
   94 00:1365 D9 -  -  -  		exx
   95 00:1366 C5 -  -  -  		push 	bc
   96 00:1367 D5 -  -  -  		push 	de 							
   97 00:1368 D9 -  -  -  		exx
   98 00:1369 -  -  -  -  
   99 00:1369 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:136A -  -  -  -  
  101 00:136A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:136B B3 -  -  -  		or 		e
  103 00:136C D9 -  -  -  		exx
  104 00:136D B2 -  -  -  		or 		d
  105 00:136E B3 -  -  -  		or 		e
  106 00:136F D9 -  -  -  		exx
  107 00:1370 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:1374 -  -  -  -  
  109 00:1374 -  -  -  -  
  110 00:1374 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:1375 4D -  -  -  		ld		c,l
  112 00:1376 21 00 00 00 		ld 		hl,$0000
  113 00:137A D9 -  -  -  		exx
  114 00:137B 44 -  -  -  		ld 		b,h
  115 00:137C 4D -  -  -  		ld		c,l
  116 00:137D 21 00 00 00 		ld 		hl,$0000
  117 00:1381 D9 -  -  -  		exx
  118 00:1382 -  -  -  -  
  119 00:1382 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:1384 -  -  -  -  _I32DivideLoop:
  121 00:1384 F5 -  -  -  		push 	af
  122 00:1385 -  -  -  -  
  123 00:1385 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:1387 CB 10 -  -  		rl 		b
  125 00:1389 D9 -  -  -  		exx
  126 00:138A CB 11 -  -  		rl 		c
  127 00:138C CB 10 -  -  		rl 		b
  128 00:138E D9 -  -  -  		exx
  129 00:138F CB 15 -  -  		rl 		l
  130 00:1391 CB 14 -  -  		rl 		h
  131 00:1393 D9 -  -  -  		exx
  132 00:1394 CB 15 -  -  		rl 		l
  133 00:1396 CB 14 -  -  		rl 		h
  134 00:1398 D9 -  -  -  		exx
  135 00:1399 -  -  -  -  
  136 00:1399 CD 64 14 00 		call 	Int32Subtract 				; A = A - M
  137 00:139D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:139F -  -  -  -  
  139 00:139F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:13A0 18 04 -  -  		jr 		_I32Next
  141 00:13A2 -  -  -  -  
  142 00:13A2 -  -  -  -  _I32Borrow:
  143 00:13A2 CD 5C 14 00 		call 	Int32Add 					; A = A + M
  144 00:13A6 -  -  -  -  _I32Next:
  145 00:13A6 F1 -  -  -  		pop 	af
  146 00:13A7 3D -  -  -  		dec 	a
  147 00:13A8 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:13AA -  -  -  -  
  149 00:13AA F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:13AB -  -  -  -  
  151 00:13AB 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:13AC 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:13AE -  -  -  -  
  154 00:13AE 60 -  -  -  		ld  	h,b
  155 00:13AF 69 -  -  -  		ld 		l,c
  156 00:13B0 D9 -  -  -  		exx
  157 00:13B1 60 -  -  -  		ld  	h,b
  158 00:13B2 69 -  -  -  		ld 		l,c
  159 00:13B3 D9 -  -  -  		exx
  160 00:13B4 -  -  -  -  _I32Modulus1:		
  161 00:13B4 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:13B5 D1 -  -  -  		pop 	de
  163 00:13B6 C1 -  -  -  		pop 	bc
  164 00:13B7 D9 -  -  -  		exx
  165 00:13B8 D1 -  -  -  		pop 	de
  166 00:13B9 C1 -  -  -  		pop 	bc
  167 00:13BA C9 -  -  -  		ret
  168 00:13BB -  -  -  -  
  169 00:13BB -  -  -  -  ; ***************************************************************************************
  170 00:13BB -  -  -  -  ;
  171 00:13BB -  -  -  -  ;									Changes and Updates
  172 00:13BB -  -  -  -  ;
  173 00:13BB -  -  -  -  ; ***************************************************************************************
  174 00:13BB -  -  -  -  ;
  175 00:13BB -  -  -  -  ;		Date			Notes
  176 00:13BB -  -  -  -  ;		==== 			=====
  177 00:13BB -  -  -  -  ;
  178 00:13BB -  -  -  -  ; ***************************************************************************************
  179 00:13BB -  -  -  -  		
Listing for file "_build.asm"
   75 00:13BB -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:13BB -  -  -  -  ; ***************************************************************************************
    2 00:13BB -  -  -  -  ; ***************************************************************************************
    3 00:13BB -  -  -  -  ;
    4 00:13BB -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:13BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:13BB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:13BB -  -  -  -  ;		Reviewed :	No
    8 00:13BB -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:13BB -  -  -  -  ;
   10 00:13BB -  -  -  -  ; ***************************************************************************************
   11 00:13BB -  -  -  -  ; ***************************************************************************************
   12 00:13BB -  -  -  -  
   13 00:13BB -  -  -  -  ; ***************************************************************************************
   14 00:13BB -  -  -  -  ;
   15 00:13BB -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:13BB -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:13BB -  -  -  -  ;
   18 00:13BB -  -  -  -  ; ***************************************************************************************
   19 00:13BB -  -  -  -  
   20 00:13BB -  -  -  -  Int32FromString:
   21 00:13BB C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:13BC D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:13BD D5 -  -  -  		push 	de
   24 00:13BE D9 -  -  -  		exx
   25 00:13BF D5 -  -  -  		push 	de
   26 00:13C0 -  -  -  -  
   27 00:13C0 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:13C4 11 00 00 00 		ld 		de,$0000
   29 00:13C8 D9 -  -  -  		exx
   30 00:13C9 21 00 00 00 		ld 		hl,$0000
   31 00:13CD 11 00 00 00 		ld 		de,$0000
   32 00:13D1 D9 -  -  -  		exx
   33 00:13D2 -  -  -  -  
   34 00:13D2 5F -  -  -  		ld 		e,a 						; base in E
   35 00:13D3 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:13D5 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:13D7 ED 44 -  -  		neg 		 						; fix up the base
   38 00:13D9 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:13DA -  -  -  -  		;
   40 00:13DA 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:13DB F5 -  -  -  		push 	af
   42 00:13DC FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:13DE 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:13DF 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:13E1 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:13E2 18 01 -  -  		jr 		_I32FSMain
   47 00:13E4 -  -  -  -  _I32FSNotSigned:		
   48 00:13E4 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:13E5 -  -  -  -  		;
   50 00:13E5 -  -  -  -  		; 		Main conversion loop.
   51 00:13E5 -  -  -  -  		; 		
   52 00:13E5 -  -  -  -  _I32FSMain:		
   53 00:13E5 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:13E6 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:13E8 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:13EA D6 20 -  -  		sub 	32
   57 00:13EC -  -  -  -  _I32FSNotLower:
   58 00:13EC FE 30 -  -  		cp 		'0' 						; check in range
   59 00:13EE 38 23 -  -  		jr 		c,_I32FSExit
   60 00:13F0 FE 3A -  -  		cp 		'9'+1
   61 00:13F2 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:13F4 FE 41 -  -  		cp 		'A'
   63 00:13F6 38 1B -  -  		jr 		c,_I32FSExit
   64 00:13F8 FE 47 -  -  		cp 		'F'+1
   65 00:13FA 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:13FC D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:13FE -  -  -  -  _I32FSOkay:
   68 00:13FE D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:1400 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:1401 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:1403 03 -  -  -  		inc 	bc 							; consume character
   72 00:1404 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:1405 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:1406 CD 23 14 00 		call 	Int32Multiply 				; result *= base
   75 00:140A F1 -  -  -  		pop 	af 							; additive in DE
   76 00:140B 5F -  -  -  		ld 		e,a
   77 00:140C CD 5C 14 00 		call 	Int32Add 					; and add it.
   78 00:1410 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:1411 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:1413 -  -  -  -  
   81 00:1413 -  -  -  -  _I32FSExit:
   82 00:1413 F1 -  -  -  		pop 	af 							; get sign back
   83 00:1414 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:1416 CC C6 14 00 		call 	z,Int32Negate
   85 00:141A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:141B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:141C D9 -  -  -  		exx
   88 00:141D D1 -  -  -  		pop 	de
   89 00:141E D9 -  -  -  		exx
   90 00:141F C1 -  -  -  		pop 	bc
   91 00:1420 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:1422 C9 -  -  -  		ret				
   93 00:1423 -  -  -  -  
   94 00:1423 -  -  -  -  ; ***************************************************************************************
   95 00:1423 -  -  -  -  ;
   96 00:1423 -  -  -  -  ;									Changes and Updates
   97 00:1423 -  -  -  -  ;
   98 00:1423 -  -  -  -  ; ***************************************************************************************
   99 00:1423 -  -  -  -  ;
  100 00:1423 -  -  -  -  ;		Date			Notes
  101 00:1423 -  -  -  -  ;		==== 			=====
  102 00:1423 -  -  -  -  ;
  103 00:1423 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   76 00:1423 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:1423 -  -  -  -  ; ***************************************************************************************
    2 00:1423 -  -  -  -  ; ***************************************************************************************
    3 00:1423 -  -  -  -  ;
    4 00:1423 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:1423 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:1423 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:1423 -  -  -  -  ;		Reviewed :	No
    8 00:1423 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:1423 -  -  -  -  ;
   10 00:1423 -  -  -  -  ; ***************************************************************************************
   11 00:1423 -  -  -  -  ; ***************************************************************************************
   12 00:1423 -  -  -  -  
   13 00:1423 -  -  -  -  Int32Multiply:
   14 00:1423 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:1424 D5 -  -  -  		push 	de
   16 00:1425 44 -  -  -  		ld 		b,h
   17 00:1426 4D -  -  -  		ld 		c,l
   18 00:1427 21 00 00 00 		ld 		hl,$0000
   19 00:142B -  -  -  -  
   20 00:142B D9 -  -  -  		exx
   21 00:142C C5 -  -  -  		push 	bc
   22 00:142D D5 -  -  -  		push 	de
   23 00:142E 44 -  -  -  		ld 		b,h
   24 00:142F 4D -  -  -  		ld 		c,l
   25 00:1430 21 00 00 00 		ld 		hl,$0000		
   26 00:1434 D9 -  -  -  		exx
   27 00:1435 -  -  -  -  
   28 00:1435 -  -  -  -  _I32MultiplyLoop:
   29 00:1435 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:1437 C4 5C 14 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:143B -  -  -  -  		;
   32 00:143B D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:143C CB 38 -  -  		srl 	b
   34 00:143E CB 19 -  -  		rr 		c
   35 00:1440 D9 -  -  -  		exx
   36 00:1441 CB 18 -  -  		rr 		b
   37 00:1443 CB 19 -  -  		rr 		c
   38 00:1445 -  -  -  -  		;
   39 00:1445 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:1447 CB 12 -  -  		rl 		d
   41 00:1449 D9 -  -  -  		exx
   42 00:144A CB 13 -  -  		rl 		e
   43 00:144C CB 12 -  -  		rl 		d
   44 00:144E -  -  -  -  
   45 00:144E 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:144F B1 -  -  -  		or 		c
   47 00:1450 D9 -  -  -  		exx
   48 00:1451 B0 -  -  -  		or 		b
   49 00:1452 B1 -  -  -  		or 		c
   50 00:1453 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:1455 -  -  -  -  
   52 00:1455 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:1456 D1 -  -  -  		pop 	de
   54 00:1457 C1 -  -  -  		pop 	bc
   55 00:1458 D9 -  -  -  		exx
   56 00:1459 D1 -  -  -  		pop 	de
   57 00:145A C1 -  -  -  		pop 	bc
   58 00:145B C9 -  -  -  		ret
   59 00:145C -  -  -  -  
   60 00:145C -  -  -  -  ; ***************************************************************************************
   61 00:145C -  -  -  -  ;
   62 00:145C -  -  -  -  ;									Changes and Updates
   63 00:145C -  -  -  -  ;
   64 00:145C -  -  -  -  ; ***************************************************************************************
   65 00:145C -  -  -  -  ;
   66 00:145C -  -  -  -  ;		Date			Notes
   67 00:145C -  -  -  -  ;		==== 			=====
   68 00:145C -  -  -  -  ;
   69 00:145C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 00:145C -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:145C -  -  -  -  ; ***************************************************************************************
    2 00:145C -  -  -  -  ; ***************************************************************************************
    3 00:145C -  -  -  -  ;
    4 00:145C -  -  -  -  ;		Name : 		isimple.asm
    5 00:145C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:145C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:145C -  -  -  -  ;		Reviewed :	No
    8 00:145C -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:145C -  -  -  -  ;
   10 00:145C -  -  -  -  ; ***************************************************************************************
   11 00:145C -  -  -  -  ; ***************************************************************************************
   12 00:145C -  -  -  -  
   13 00:145C -  -  -  -  ; ***************************************************************************************
   14 00:145C -  -  -  -  ;
   15 00:145C -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:145C -  -  -  -  ;
   17 00:145C -  -  -  -  ; ***************************************************************************************
   18 00:145C -  -  -  -  
   19 00:145C -  -  -  -  Int32Add:
   20 00:145C 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:145E D9 -  -  -  		exx
   22 00:145F 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:1462 D9 -  -  -  		exx
   24 00:1463 C9 -  -  -  		ret
   25 00:1464 -  -  -  -  
   26 00:1464 -  -  -  -  ; ***************************************************************************************
   27 00:1464 -  -  -  -  ;
   28 00:1464 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:1464 -  -  -  -  ;
   30 00:1464 -  -  -  -  ; ***************************************************************************************
   31 00:1464 -  -  -  -  
   32 00:1464 -  -  -  -  Int32Subtract:
   33 00:1464 AF -  -  -  		xor 	a 							; clear carry
   34 00:1465 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:1468 D9 -  -  -  		exx
   36 00:1469 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:146C D9 -  -  -  		exx
   38 00:146D C9 -  -  -  		ret
   39 00:146E -  -  -  -  
   40 00:146E -  -  -  -  ; ***************************************************************************************
   41 00:146E -  -  -  -  ;
   42 00:146E -  -  -  -  ;								And DE'DE into HL'HL
   43 00:146E -  -  -  -  ;
   44 00:146E -  -  -  -  ; ***************************************************************************************
   45 00:146E -  -  -  -  
   46 00:146E -  -  -  -  Int32And:
   47 00:146E D9 -  -  -  		exx
   48 00:146F CD 74 14 00 		call 	_I32AndHLDE
   49 00:1473 D9 -  -  -  		exx
   50 00:1474 -  -  -  -  _I32AndHLDE:		
   51 00:1474 7C -  -  -  		ld 		a,h
   52 00:1475 A2 -  -  -  		and 	d
   53 00:1476 67 -  -  -  		ld 		h,a
   54 00:1477 7D -  -  -  		ld 		a,l
   55 00:1478 A3 -  -  -  		and 	e
   56 00:1479 6F -  -  -  		ld 		l,a
   57 00:147A C9 -  -  -  		ret
   58 00:147B -  -  -  -  
   59 00:147B -  -  -  -  ; ***************************************************************************************
   60 00:147B -  -  -  -  ;
   61 00:147B -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:147B -  -  -  -  ;
   63 00:147B -  -  -  -  ; ***************************************************************************************
   64 00:147B -  -  -  -  
   65 00:147B -  -  -  -  Int32Or:
   66 00:147B D9 -  -  -  		exx
   67 00:147C CD 81 14 00 		call 	_I32OrHLDE
   68 00:1480 D9 -  -  -  		exx
   69 00:1481 -  -  -  -  _I32OrHLDE:		
   70 00:1481 7C -  -  -  		ld 		a,h
   71 00:1482 B2 -  -  -  		or 		d
   72 00:1483 67 -  -  -  		ld 		h,a
   73 00:1484 7D -  -  -  		ld 		a,l
   74 00:1485 B3 -  -  -  		or 		e
   75 00:1486 6F -  -  -  		ld 		l,a
   76 00:1487 C9 -  -  -  		ret
   77 00:1488 -  -  -  -  
   78 00:1488 -  -  -  -  ; ***************************************************************************************
   79 00:1488 -  -  -  -  ;
   80 00:1488 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:1488 -  -  -  -  ;
   82 00:1488 -  -  -  -  ; ***************************************************************************************
   83 00:1488 -  -  -  -  
   84 00:1488 -  -  -  -  Int32Xor:
   85 00:1488 D9 -  -  -  		exx
   86 00:1489 CD 8E 14 00 		call 	_I32XorHLDE
   87 00:148D D9 -  -  -  		exx
   88 00:148E -  -  -  -  _I32XorHLDE:		
   89 00:148E 7C -  -  -  		ld 		a,h
   90 00:148F AA -  -  -  		xor 	d
   91 00:1490 67 -  -  -  		ld 		h,a
   92 00:1491 7D -  -  -  		ld 		a,l
   93 00:1492 AB -  -  -  		xor 	e
   94 00:1493 6F -  -  -  		ld 		l,a
   95 00:1494 C9 -  -  -  		ret
   96 00:1495 -  -  -  -  
   97 00:1495 -  -  -  -  ; ***************************************************************************************
   98 00:1495 -  -  -  -  ;
   99 00:1495 -  -  -  -  ;								 Check if HL'HL zero
  100 00:1495 -  -  -  -  ;
  101 00:1495 -  -  -  -  ; ***************************************************************************************
  102 00:1495 -  -  -  -  
  103 00:1495 -  -  -  -  Int32Zero:
  104 00:1495 D9 -  -  -  		exx
  105 00:1496 7D -  -  -  		ld 		a,l
  106 00:1497 B4 -  -  -  		or 		h
  107 00:1498 D9 -  -  -  		exx
  108 00:1499 B5 -  -  -  		or 		l
  109 00:149A B4 -  -  -  		or 		h
  110 00:149B C9 -  -  -  		ret
  111 00:149C -  -  -  -  
  112 00:149C -  -  -  -  ; ***************************************************************************************
  113 00:149C -  -  -  -  ;
  114 00:149C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:149C -  -  -  -  ;
  116 00:149C -  -  -  -  ; ***************************************************************************************
  117 00:149C -  -  -  -  
  118 00:149C -  -  -  -  Int32Compare:
  119 00:149C E5 -  -  -  		push 	hl 							; save HL
  120 00:149D AF -  -  -  		xor 	a 							; clear carry
  121 00:149E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:14A1 D9 -  -  -  		exx
  123 00:14A2 E5 -  -  -  		push 	hl 							; save HL'
  124 00:14A3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:14A6 -  -  -  -  		;
  126 00:14A6 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:14A7 E2 AF 14 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:14AB 78 -  -  -  		ld 		a,b
  129 00:14AC EE 80 -  -  		xor 	$80
  130 00:14AE 47 -  -  -  		ld 		b,a
  131 00:14AF -  -  -  -  _I32CNoOverflow:
  132 00:14AF 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:14B0 B5 -  -  -  		or 		l
  134 00:14B1 D9 -  -  -  		exx 
  135 00:14B2 B4 -  -  -  		or 		h
  136 00:14B3 B5 -  -  -  		or 		l
  137 00:14B4 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:14B6 -  -  -  -  		;
  139 00:14B6 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:14B7 CB 78 -  -  		bit 	7,b
  141 00:14B9 D9 -  -  -  		exx
  142 00:14BA 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:14BC 28 02 -  -  		jr 		z,_I32NotPos
  144 00:14BE 3E FF -  -  		ld 		a,$FF
  145 00:14C0 -  -  -  -  _I32NotPos:
  146 00:14C0 D9 -  -  -  		exx
  147 00:14C1 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:14C2 D9 -  -  -  		exx
  149 00:14C3 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:14C4 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:14C5 C9 -  -  -  		ret
  152 00:14C6 -  -  -  -  
  153 00:14C6 -  -  -  -  ; ***************************************************************************************
  154 00:14C6 -  -  -  -  ;
  155 00:14C6 -  -  -  -  ;										Negate HL'HL
  156 00:14C6 -  -  -  -  ;
  157 00:14C6 -  -  -  -  ; ***************************************************************************************
  158 00:14C6 -  -  -  -  
  159 00:14C6 -  -  -  -  Int32Negate:
  160 00:14C6 AF -  -  -  		xor 	a
  161 00:14C7 CD D2 14 00 		call 	_I32NSubtract
  162 00:14CB D9 -  -  -  		exx
  163 00:14CC CD D2 14 00 		call 	_I32NSubtract
  164 00:14D0 D9 -  -  -  		exx
  165 00:14D1 C9 -  -  -  		ret
  166 00:14D2 -  -  -  -  _I32NSubtract:
  167 00:14D2 D5 -  -  -  		push 	de
  168 00:14D3 EB -  -  -  		ex 		de,hl
  169 00:14D4 21 00 00 00 		ld 		hl,$0000
  170 00:14D8 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:14DB D1 -  -  -  		pop 	de
  172 00:14DC C9 -  -  -  		ret
  173 00:14DD -  -  -  -  		
  174 00:14DD -  -  -  -  ; ***************************************************************************************
  175 00:14DD -  -  -  -  ;
  176 00:14DD -  -  -  -  ;									Changes and Updates
  177 00:14DD -  -  -  -  ;
  178 00:14DD -  -  -  -  ; ***************************************************************************************
  179 00:14DD -  -  -  -  ;
  180 00:14DD -  -  -  -  ;		Date			Notes
  181 00:14DD -  -  -  -  ;		==== 			=====
  182 00:14DD -  -  -  -  ;
  183 00:14DD -  -  -  -  ; ***************************************************************************************
  184 00:14DD -  -  -  -  		
Listing for file "_build.asm"
   78 00:14DD -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:14DD -  -  -  -  ; ***************************************************************************************
    2 00:14DD -  -  -  -  ; ***************************************************************************************
    3 00:14DD -  -  -  -  ;
    4 00:14DD -  -  -  -  ;		Name : 		itostring.asm
    5 00:14DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:14DD -  -  -  -  ;		Date : 		3rd June 2022
    7 00:14DD -  -  -  -  ;		Reviewed :	No
    8 00:14DD -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:14DD -  -  -  -  ;
   10 00:14DD -  -  -  -  ; ***************************************************************************************
   11 00:14DD -  -  -  -  ;
   12 00:14DD -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:14DD -  -  -  -  ;
   14 00:14DD -  -  -  -  ; ***************************************************************************************
   15 00:14DD -  -  -  -  
   16 00:14DD -  -  -  -  Int32ToString:
   17 00:14DD C5 -  -  -  		push 	bc 							; save string start
   18 00:14DE D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:14DF E5 -  -  -  		push 	hl
   20 00:14E0 11 00 00 00 		ld	 	de,$0000
   21 00:14E4 D9 -  -  -  		exx
   22 00:14E5 D5 -  -  -  		push 	de
   23 00:14E6 E5 -  -  -  		push 	hl
   24 00:14E7 11 00 00 00 		ld 		de,$000
   25 00:14EB D9 -  -  -  		exx
   26 00:14EC 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:14ED -  -  -  -  		;
   28 00:14ED CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:14EF 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:14F1 ED 44 -  -  		neg 								; negate base and put in E
   31 00:14F3 5F -  -  -  		ld 		e,a
   32 00:14F4 -  -  -  -  		;
   33 00:14F4 D9 -  -  -  		exx 								; is it -ve ?
   34 00:14F5 CB 7C -  -  		bit 	7,h
   35 00:14F7 D9 -  -  -  		exx
   36 00:14F8 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:14FA -  -  -  -  		;
   38 00:14FA CD C6 14 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:14FE -  -  -  -  		;
   40 00:14FE 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:1500 02 -  -  -  		ld 		(bc),a
   42 00:1501 03 -  -  -  		inc 	bc
   43 00:1502 -  -  -  -  _I32TSNotNegative:	
   44 00:1502 CD 11 15 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:1506 -  -  -  -  _I32TSExit:
   46 00:1506 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:1508 02 -  -  -  		ld 		(bc),a 
   48 00:1509 -  -  -  -  
   49 00:1509 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:150A E1 -  -  -  		pop 	hl
   51 00:150B D1 -  -  -  		pop 	de
   52 00:150C D9 -  -  -  		exx
   53 00:150D E1 -  -  -  		pop 	hl
   54 00:150E D1 -  -  -  		pop 	de
   55 00:150F C1 -  -  -  		pop 	bc
   56 00:1510 C9 -  -  -  		ret
   57 00:1511 -  -  -  -  
   58 00:1511 -  -  -  -  _I32RecursiveConvert:
   59 00:1511 CD 1E 13 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:1515 F5 -  -  -  		push 	af 							; save remainder
   61 00:1516 CD 95 14 00 		call 	Int32Zero		 			; check result is non zero
   62 00:151A C4 11 15 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:151E F1 -  -  -  		pop 	af 							; restore remainder
   64 00:151F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:1521 38 02 -  -  		jr 		c,_I32NotHex
   66 00:1523 C6 07 -  -  		add 	a,7
   67 00:1525 -  -  -  -  _I32NotHex:
   68 00:1525 C6 30 -  -  		add 	a,48
   69 00:1527 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:1528 03 -  -  -  		inc 	bc
   71 00:1529 C9 -  -  -  		ret		
   72 00:152A -  -  -  -  
   73 00:152A -  -  -  -  ; ***************************************************************************************
   74 00:152A -  -  -  -  ;
   75 00:152A -  -  -  -  ;									Changes and Updates
   76 00:152A -  -  -  -  ;
   77 00:152A -  -  -  -  ; ***************************************************************************************
   78 00:152A -  -  -  -  ;
   79 00:152A -  -  -  -  ;		Date			Notes
   80 00:152A -  -  -  -  ;		==== 			=====
   81 00:152A -  -  -  -  ;
   82 00:152A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 00:152A -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:152A -  -  -  -  ; ***************************************************************************************
    2 00:152A -  -  -  -  ; ***************************************************************************************
    3 00:152A -  -  -  -  ;
    4 00:152A -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:152A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:152A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:152A -  -  -  -  ;		Reviewed :	No
    8 00:152A -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:152A -  -  -  -  ;
   10 00:152A -  -  -  -  ; ***************************************************************************************
   11 00:152A -  -  -  -  ; ***************************************************************************************
   12 00:152A -  -  -  -  
   13 00:152A -  -  -  -  #ifdef AQUARIUS
   14 00:152A             
   15 00:152A             ; ***************************************************************************************
   16 00:152A             ;
   17 00:152A             ;								Initialise system stuff
   18 00:152A             ;
   19 00:152A             ; ***************************************************************************************
   20 00:152A             
   21 00:152A             SYSInitialise:
   22 00:152A             	ld 		a,$0b 								; Aquarius clear screen
   23 00:152A             	call 	SYSPrintChar
   24 00:152A             	ret
   25 00:152A             
   26 00:152A             ; ***************************************************************************************
   27 00:152A             ;
   28 00:152A             ;								Terminate system stuff
   29 00:152A             ;
   30 00:152A             ; ***************************************************************************************
   31 00:152A             
   32 00:152A             SYSTerminate:
   33 00:152A             	jr 		SYSTerminate
   34 00:152A             
   35 00:152A             ; ***************************************************************************************
   36 00:152A             ;
   37 00:152A             ;						Print A character (note 13,10 required for CRLF)
   38 00:152A             ;
   39 00:152A             ; ***************************************************************************************
   40 00:152A             
   41 00:152A             SYSPrintChar:
   42 00:152A             	push 	af 									; we stack everything including alt registers
   43 00:152A             	push 	bc
   44 00:152A             	push 	de
   45 00:152A             	push 	hl
   46 00:152A             	push 	ix
   47 00:152A             	push 	iy
   48 00:152A             	exx
   49 00:152A             	push 	bc
   50 00:152A             	push 	de
   51 00:152A             	push 	hl
   52 00:152A             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:152A             	pop 	hl
   54 00:152A             	pop 	de
   55 00:152A             	pop 	bc
   56 00:152A             	exx
   57 00:152A             	pop 	iy
   58 00:152A             	pop 	ix
   59 00:152A             	pop 	hl
   60 00:152A             	pop 	de
   61 00:152A             	pop 	bc
   62 00:152A             	pop 	af
   63 00:152A             	ret		
   64 00:152A             
   65 00:152A             ; ***************************************************************************************
   66 00:152A             ;
   67 00:152A             ;									Print Newline
   68 00:152A             ;
   69 00:152A             ; ***************************************************************************************
   70 00:152A             
   71 00:152A             SYSPrintCRLF:
   72 00:152A             	push 	af
   73 00:152A             	ld 		a,13
   74 00:152A             	call 	SYSPrintChar
   75 00:152A             	ld 		a,10
   76 00:152A             	call 	SYSPrintChar
   77 00:152A             	pop 	af
   78 00:152A             	ret
   79 00:152A             
   80 00:152A             ; ***************************************************************************************
   81 00:152A             ;
   82 00:152A             ;									Get time into HL'HL
   83 00:152A             ;
   84 00:152A             ; ***************************************************************************************
   85 00:152A             
   86 00:152A             SYSGetTimer:
   87 00:152A              	in 		a,($00)
   88 00:152A              	ld 		l,a
   89 00:152A              	in 		a,($01)
   90 00:152A              	ld 		h,a
   91 00:152A              	exx
   92 00:152A              	in 		a,($02)
   93 00:152A              	ld 		l,a
   94 00:152A              	in 		a,($03)
   95 00:152A              	ld 		h,a
   96 00:152A              	exx
   97 00:152A             	ret 	
   98 00:152A             	
   99 00:152A             #endif
  100 00:152A -  -  -  -  
  101 00:152A -  -  -  -  ; ***************************************************************************************
  102 00:152A -  -  -  -  ;
  103 00:152A -  -  -  -  ;									Changes and Updates
  104 00:152A -  -  -  -  ;
  105 00:152A -  -  -  -  ; ***************************************************************************************
  106 00:152A -  -  -  -  ;
  107 00:152A -  -  -  -  ;		Date			Notes
  108 00:152A -  -  -  -  ;		==== 			=====
  109 00:152A -  -  -  -  ;
  110 00:152A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 00:152A -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:152A -  -  -  -  ; ***************************************************************************************
    2 00:152A -  -  -  -  ; ***************************************************************************************
    3 00:152A -  -  -  -  ;
    4 00:152A -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:152A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:152A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:152A -  -  -  -  ;		Reviewed :	No
    8 00:152A -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:152A -  -  -  -  ;
   10 00:152A -  -  -  -  ; ***************************************************************************************
   11 00:152A -  -  -  -  ; ***************************************************************************************
   12 00:152A -  -  -  -  
   13 00:152A -  -  -  -  #ifdef CLEANEZ80
   14 00:152A -  -  -  -  
   15 00:152A -  -  -  -  ; ***************************************************************************************
   16 00:152A -  -  -  -  ;
   17 00:152A -  -  -  -  ;								Initialise system stuff
   18 00:152A -  -  -  -  ;
   19 00:152A -  -  -  -  ; ***************************************************************************************
   20 00:152A -  -  -  -  
   21 00:152A -  -  -  -  SYSInitialise:
   22 00:152A C9 -  -  -  	ret
   23 00:152B -  -  -  -  
   24 00:152B -  -  -  -  ; ***************************************************************************************
   25 00:152B -  -  -  -  ;
   26 00:152B -  -  -  -  ;								Terminate system stuff
   27 00:152B -  -  -  -  ;
   28 00:152B -  -  -  -  ; ***************************************************************************************
   29 00:152B -  -  -  -  
   30 00:152B -  -  -  -  SYSTerminate:
   31 00:152B C9 -  -  -  	ret
   32 00:152C -  -  -  -  
   33 00:152C -  -  -  -  ; ***************************************************************************************
   34 00:152C -  -  -  -  ;
   35 00:152C -  -  -  -  ;								Print A character
   36 00:152C -  -  -  -  ;
   37 00:152C -  -  -  -  ; ***************************************************************************************
   38 00:152C -  -  -  -  
   39 00:152C -  -  -  -  SYSPrintChar:
   40 00:152C C9 -  -  -  	ret		
   41 00:152D -  -  -  -  
   42 00:152D -  -  -  -  ; ***************************************************************************************
   43 00:152D -  -  -  -  ;
   44 00:152D -  -  -  -  ;									Print Newline
   45 00:152D -  -  -  -  ;
   46 00:152D -  -  -  -  ; ***************************************************************************************
   47 00:152D -  -  -  -  
   48 00:152D -  -  -  -  SYSPrintCRLF:
   49 00:152D C9 -  -  -  	ret
   50 00:152E -  -  -  -  
   51 00:152E -  -  -  -  ; ***************************************************************************************
   52 00:152E -  -  -  -  ;
   53 00:152E -  -  -  -  ;									Get time into HL'HL
   54 00:152E -  -  -  -  ;
   55 00:152E -  -  -  -  ; ***************************************************************************************
   56 00:152E -  -  -  -  
   57 00:152E -  -  -  -  SYSGetTimer:
   58 00:152E C9 -  -  -  	ret
   59 00:152F -  -  -  -  
   60 00:152F -  -  -  -  #endif
   61 00:152F -  -  -  -  
   62 00:152F -  -  -  -  ; ***************************************************************************************
   63 00:152F -  -  -  -  ;
   64 00:152F -  -  -  -  ;									Changes and Updates
   65 00:152F -  -  -  -  ;
   66 00:152F -  -  -  -  ; ***************************************************************************************
   67 00:152F -  -  -  -  ;
   68 00:152F -  -  -  -  ;		Date			Notes
   69 00:152F -  -  -  -  ;		==== 			=====
   70 00:152F -  -  -  -  ;
   71 00:152F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 00:152F -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:152F -  -  -  -  ; ***************************************************************************************
    2 00:152F -  -  -  -  ; ***************************************************************************************
    3 00:152F -  -  -  -  ;
    4 00:152F -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:152F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:152F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:152F -  -  -  -  ;		Reviewed :	No
    8 00:152F -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:152F -  -  -  -  ;
   10 00:152F -  -  -  -  ; ***************************************************************************************
   11 00:152F -  -  -  -  ; ***************************************************************************************
   12 00:152F -  -  -  -  
   13 00:152F -  -  -  -  #ifdef TI84
   14 00:152F             
   15 00:152F             ; ***************************************************************************************
   16 00:152F             ;
   17 00:152F             ;								Initialise system stuff
   18 00:152F             ;
   19 00:152F             ; ***************************************************************************************
   20 00:152F             
   21 00:152F             SYSInitialise:
   22 00:152F             	di
   23 00:152F             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:152F             	ld 		(_IYTemp84),iy
   25 00:152F             	ret
   26 00:152F             
   27 00:152F             ; ***************************************************************************************
   28 00:152F             ;
   29 00:152F             ;								Terminate system stuff
   30 00:152F             ;
   31 00:152F             ; ***************************************************************************************
   32 00:152F             
   33 00:152F             SYSTerminate:
   34 00:152F             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:152F             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:152F             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:152F             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:152F             	ei
   39 00:152F             	ret 										; and exit.
   40 00:152F             
   41 00:152F             _StackTemp84:									; temp var for TI84 only.
   42 00:152F             	.dw 	0,0
   43 00:152F             _IYTemp84:
   44 00:152F             	.dw 	0,0		
   45 00:152F             
   46 00:152F             ; ***************************************************************************************
   47 00:152F             ;
   48 00:152F             ;								Print A character
   49 00:152F             ;
   50 00:152F             ; ***************************************************************************************
   51 00:152F             
   52 00:152F             SYSPrintChar:
   53 00:152F             	push 	af 									; we stack everything including alt registers
   54 00:152F             	push 	bc
   55 00:152F             	push 	de
   56 00:152F             	push 	hl
   57 00:152F             	push 	ix
   58 00:152F             	push 	iy
   59 00:152F             	exx
   60 00:152F             	push 	bc
   61 00:152F             	push 	de
   62 00:152F             	push 	hl
   63 00:152F             
   64 00:152F             	ld 		iy,(_IYTemp84)
   65 00:152F             	call 	_PutC 								; print A as character
   66 00:152F             	di
   67 00:152F             	ld 		(_IYTemp84),iy
   68 00:152F             
   69 00:152F             	pop 	hl
   70 00:152F             	pop 	de
   71 00:152F             	pop 	bc
   72 00:152F             	exx
   73 00:152F             	pop 	iy
   74 00:152F             	pop 	ix
   75 00:152F             	pop 	hl
   76 00:152F             	pop 	de
   77 00:152F             	pop 	bc
   78 00:152F             	pop 	af
   79 00:152F             	ret		
   80 00:152F             
   81 00:152F             ; ***************************************************************************************
   82 00:152F             ;
   83 00:152F             ;									Print Newline
   84 00:152F             ;
   85 00:152F             ; ***************************************************************************************
   86 00:152F             
   87 00:152F             SYSPrintCRLF:
   88 00:152F             	push 	af 									; we stack everything including alt registers
   89 00:152F             	push 	bc
   90 00:152F             	push 	de
   91 00:152F             	push 	hl
   92 00:152F             	push 	ix
   93 00:152F             	push 	iy
   94 00:152F             	exx
   95 00:152F             	push 	bc
   96 00:152F             	push 	de
   97 00:152F             	push 	hl
   98 00:152F             
   99 00:152F             	ld 		iy,(_IYTemp84)
  100 00:152F             	call 	_newline
  101 00:152F             	di
  102 00:152F             	ld 		(_IYTemp84),iy
  103 00:152F             
  104 00:152F             	pop 	hl
  105 00:152F             	pop 	de
  106 00:152F             	pop 	bc
  107 00:152F             	exx
  108 00:152F             	pop 	iy
  109 00:152F             	pop 	ix
  110 00:152F             	pop 	hl
  111 00:152F             	pop 	de
  112 00:152F             	pop 	bc
  113 00:152F             	pop 	af
  114 00:152F             	ret
  115 00:152F             
  116 00:152F             ; ***************************************************************************************
  117 00:152F             ;
  118 00:152F             ;									Get time into HL'HL
  119 00:152F             ;
  120 00:152F             ; ***************************************************************************************
  121 00:152F             
  122 00:152F             SYSGetTimer:
  123 00:152F             	ld 		hl,$1234
  124 00:152F             	exx
  125 00:152F             	ld 		hl,$5678
  126 00:152F             	exx
  127 00:152F             	ret
  128 00:152F             
  129 00:152F             #endif
  130 00:152F -  -  -  -  
  131 00:152F -  -  -  -  ; ***************************************************************************************
  132 00:152F -  -  -  -  ;
  133 00:152F -  -  -  -  ;									Changes and Updates
  134 00:152F -  -  -  -  ;
  135 00:152F -  -  -  -  ; ***************************************************************************************
  136 00:152F -  -  -  -  ;
  137 00:152F -  -  -  -  ;		Date			Notes
  138 00:152F -  -  -  -  ;		==== 			=====
  139 00:152F -  -  -  -  ;
  140 00:152F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   82 00:152F -  -  -  -  #include "tokeniser/generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/tokeniser/generated/kwd_keywords.asm"
    1 00:152F -  -  -  -  ;
    2 00:152F -  -  -  -  ;	This file is automatically generated.
    3 00:152F -  -  -  -  ;
    4 00:152F -  -  -  -  ;
    5 00:152F -  -  -  -  ;	Keywords for set 0
    6 00:152F -  -  -  -  ;
    7 00:152F -  -  -  -  KeywordsSet0:
    8 00:152F 01 20 -  -  	.db	1," "              ; $0080
    9 00:1531 01 20 -  -  	.db	1," "              ; $0081
   10 00:1533 01 20 -  -  	.db	1," "              ; $0082
   11 00:1535 01 21 -  -  	.db	1,"!"              ; $0083
   12 00:1537 01 3F -  -  	.db	1,"?"              ; $0084
   13 00:1539 01 2A -  -  	.db	1,"*"              ; $0085
   14 00:153B 01 2F -  -  	.db	1,"/"              ; $0086
   15 00:153D 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 00:1541 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 00:1545 01 2B -  -  	.db	1,"+"              ; $0089
   18 00:1547 01 2D -  -  	.db	1,"-"              ; $008a
   19 00:1549 02 3E 3D -  	.db	2,">="             ; $008b
   20 00:154C 02 3C 3D -  	.db	2,"<="             ; $008c
   21 00:154F 01 3E -  -  	.db	1,">"              ; $008d
   22 00:1551 01 3C -  -  	.db	1,"<"              ; $008e
   23 00:1553 01 3D -  -  	.db	1,"="              ; $008f
   24 00:1555 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 00:1558 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 00:155C 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 00:155F 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 00:1563 01 26 -  -  	.db	1,"&"              ; $0094
   29 00:1565 01 28 -  -  	.db	1,"("              ; $0095
   30 00:1567 01 24 -  -  	.db	1,"$"              ; $0096
   31 00:1569 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 00:156D 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 00:1571 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 00:1575 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 00:1579 03 53 54 52 	.db	3,"STR"            ; $009b
   36 00:157D 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 00:1581 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 00:1585 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 00:1589 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 00:158E 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 00:1593 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 00:1597 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 00:159B 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 00:15A0 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 00:15A6 01 29 -  -  	.db	1,")"              ; $00a5
   46 00:15A8 01 2C -  -  	.db	1,","              ; $00a6
   47 00:15AA 01 3A -  -  	.db	1,":"              ; $00a7
   48 00:15AC 01 3B -  -  	.db	1,";"              ; $00a8
   49 00:15AE 01 27 -  -  	.db	1,"'"              ; $00a9
   50 00:15B0 01 5B -  -  	.db	1,"["              ; $00aa
   51 00:15B2 01 5D -  -  	.db	1,"]"              ; $00ab
   52 00:15B4 01 7E -  -  	.db	1,"~"              ; $00ac
   53 00:15B6 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00ad
   54 00:15BD 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ae
   55 00:15C3 02 49 46 -  	.db	2,"IF"             ; $00af
   56 00:15C6 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00b0
   57 00:15CB 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00b1
   58 00:15D0 03 46 4F 52 	.db	3,"FOR"            ; $00b2
   59 00:15D4 02 54 4F -  	.db	2,"TO"             ; $00b3
   60 00:15D7 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b4
   61 00:15DC 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b5
   62 00:15E1 03 44 45 46 	.db	3,"DEF"            ; $00b6
   63 00:15E5 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b7
   64 00:15EA 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b8
   65 00:15F2 05 47 4F 53 
              55 42 -  -  	.db	5,"GOSUB"          ; $00b9
   66 00:15F8 06 52 45 54 
              55 52 4E -  	.db	6,"RETURN"         ; $00ba
   67 00:15FF 04 47 4F 54 
              4F -  -  -  	.db	4,"GOTO"           ; $00bb
   68 00:1604 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00bc
   69 00:160A 03 44 49 4D 	.db	3,"DIM"            ; $00bd
   70 00:160E 03 52 45 4D 	.db	3,"REM"            ; $00be
   71 00:1612 03 4C 45 54 	.db	3,"LET"            ; $00bf
   72 00:1616 03 56 44 55 	.db	3,"VDU"            ; $00c0
   73 00:161A 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00c1
   74 00:1620 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00c2
   75 00:1625 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00c3
   76 00:162A 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00c4
   77 00:162F 03 4E 45 57 	.db	3,"NEW"            ; $00c5
   78 00:1633 03 52 55 4E 	.db	3,"RUN"            ; $00c6
   79 00:1637 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c7
   80 00:163C 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c8
   81 00:1641 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c9
   82 00:1649 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00ca
   83 00:1650 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00cb
   84 00:1656 03 45 4E 44 	.db	3,"END"            ; $00cc
   85 00:165A 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00cd
   86 00:165F 00 -  -  -  	.db	0
   87 00:1660 -  -  -  -  ;
   88 00:1660 -  -  -  -  ;	Keywords for set 1
   89 00:1660 -  -  -  -  ;
   90 00:1660 -  -  -  -  KeywordsSet1:
   91 00:1660 00 -  -  -  	.db	0
   92 00:1661 -  -  -  -  ;
   93 00:1661 -  -  -  -  ;	Keywords for set 2
   94 00:1661 -  -  -  -  ;
   95 00:1661 -  -  -  -  KeywordsSet2:
   96 00:1661 00 -  -  -  	.db	0
Listing for file "_build.asm"
   83 00:1662 -  -  -  -  #include "tokeniser/list.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/tokeniser/list.asm"
    1 00:1662 -  -  -  -  ; ***************************************************************************************
    2 00:1662 -  -  -  -  ; ***************************************************************************************
    3 00:1662 -  -  -  -  ;
    4 00:1662 -  -  -  -  ;		Name : 		list.asm
    5 00:1662 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:1662 -  -  -  -  ;		Date : 		9th June 2022
    7 00:1662 -  -  -  -  ;		Reviewed :	No
    8 00:1662 -  -  -  -  ;		Purpose :	Program listing.
    9 00:1662 -  -  -  -  ;
   10 00:1662 -  -  -  -  ; ***************************************************************************************
   11 00:1662 -  -  -  -  ; ***************************************************************************************
   12 00:1662 -  -  -  -  
   13 00:1662 -  -  -  -  ; ***************************************************************************************
   14 00:1662 -  -  -  -  ;
   15 00:1662 -  -  -  -  ;										LIST a program
   16 00:1662 -  -  -  -  ;
   17 00:1662 -  -  -  -  ; ***************************************************************************************
   18 00:1662 -  -  -  -  
   19 00:1662 -  -  -  -  Command_LIST: 	;; [list]
   20 00:1662 01 00 00 00 		ld 		bc,$0000 					; BC is the low value
   21 00:1666 11 FF FF 00 		ld 		de,$FFFF 					; DE is the high value
   22 00:166A -  -  -  -  		;
   23 00:166A -  -  -  -  		;		Unpack the command
   24 00:166A -  -  -  -  		;		
   25 00:166A DD 7E 00 -  		ld 		a,(ix+0) 					; what's there ?
   26 00:166D FE A6 -  -  		cp	 	KWD_COMMA 					; if , then do the second part
   27 00:166F 28 17 -  -  		jr 		z,_CLUpperRange
   28 00:1671 E6 C0 -  -  		and 	$C0 						; check number follows.
   29 00:1673 FE 40 -  -  		cp 		$40
   30 00:1675 20 22 -  -  		jr 		nz,_CLList 			
   31 00:1677 CD D5 16 00 		call 	_CLGetInteger 				; get a line number
   32 00:167B 44 -  -  -  		ld  	b,h 						; put into BC
   33 00:167C 4D -  -  -  		ld 		c,l
   34 00:167D DD 7E 00 -  		ld 		a,(ix+0)					; , follows ?
   35 00:1680 FE A6 -  -  		cp 		KWD_COMMA
   36 00:1682 28 04 -  -  		jr 		z,_CLUpperRange
   37 00:1684 54 -  -  -  		ld 		d,h 						; one number only, so in BC and DE
   38 00:1685 5D -  -  -  		ld 		e,l
   39 00:1686 18 11 -  -  		jr 		_CLList
   40 00:1688 -  -  -  -  		;
   41 00:1688 -  -  -  -  		;		Second number.
   42 00:1688 -  -  -  -  		;
   43 00:1688 -  -  -  -  _CLUpperRange:
   44 00:1688 DD 23 -  -  		inc 	ix 							; skip comma
   45 00:168A DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a number
   46 00:168D E6 C0 -  -  		and 	$C0
   47 00:168F FE 40 -  -  		cp 		$40
   48 00:1691 20 06 -  -  		jr 		nz,_CLList 					; No listing done
   49 00:1693 CD D5 16 00 		call 	_CLGetInteger 				; get a number
   50 00:1697 54 -  -  -  		ld 		d,h 						; put into DE
   51 00:1698 5D -  -  -  		ld 		e,l		
   52 00:1699 -  -  -  -  		;
   53 00:1699 -  -  -  -  		;		List from line no.s BC to DE.
   54 00:1699 -  -  -  -  		;
   55 00:1699 -  -  -  -  _CLList:		
   56 00:1699 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start of code.
   57 00:169E -  -  -  -  		;
   58 00:169E -  -  -  -  		;		List main loop
   59 00:169E -  -  -  -  		;
   60 00:169E -  -  -  -  _CLNextLine:		
   61 00:169E DD 7E 00 -  		ld 		a,(ix+0) 					; offset = 0, then end.
   62 00:16A1 B7 -  -  -  		or 		a
   63 00:16A2 CA 80 02 00 		jp 		z,Command_END
   64 00:16A6 -  -  -  -  		;
   65 00:16A6 21 00 00 00 		ld 		hl,$0000 					; line number into HL
   66 00:16AA DD 6E 01 -  		ld 		l,(ix+1) 						
   67 00:16AD DD 66 02 -  		ld 		h,(ix+2)
   68 00:16B0 CD C5 16 00 		call 	CLCheckLineNumber
   69 00:16B4 D4 E6 16 00 		call 	nc,CLPrintLine
   70 00:16B8 -  -  -  -  		;
   71 00:16B8 C5 -  -  -  		push 	bc 							; go to next line
   72 00:16B9 01 00 00 00 		ld 		bc,0 						; BC is offset
   73 00:16BD DD 4E 00 -  		ld 		c,(ix+0)
   74 00:16C0 DD 09 -  -  		add 	ix,bc
   75 00:16C2 C1 -  -  -  		pop 	bc
   76 00:16C3 -  -  -  -  		;
   77 00:16C3 18 D9 -  -  		jr 		_CLNextLine 				; go round again.
   78 00:16C5 -  -  -  -  
   79 00:16C5 -  -  -  -  ; ***************************************************************************************
   80 00:16C5 -  -  -  -  ;
   81 00:16C5 -  -  -  -  ;				Compare line number in HL vs BC/DE, NC if listable
   82 00:16C5 -  -  -  -  ;
   83 00:16C5 -  -  -  -  ; ***************************************************************************************
   84 00:16C5 -  -  -  -  
   85 00:16C5 -  -  -  -  CLCheckLineNumber:
   86 00:16C5 E5 -  -  -  		push 	hl 							; compare against BC
   87 00:16C6 AF -  -  -  		xor		a
   88 00:16C7 ED 42 -  -  		sbc 	hl,bc
   89 00:16C9 E1 -  -  -  		pop 	hl
   90 00:16CA D8 -  -  -  		ret		c 							; if < BC then fail.
   91 00:16CB ED 52 -  -  		sbc 	hl,de
   92 00:16CD 28 04 -  -  		jr 		z,_CLCLOkay 				; if <= DE then okay
   93 00:16CF 38 02 -  -  		jr 		c,_CLCLOkay
   94 00:16D1 37 -  -  -  		scf
   95 00:16D2 C9 -  -  -  		ret
   96 00:16D3 -  -  -  -  _CLCLOkay:
   97 00:16D3 AF -  -  -  		xor 	a
   98 00:16D4 C9 -  -  -  		ret
   99 00:16D5 -  -  -  -  
  100 00:16D5 -  -  -  -  ; ***************************************************************************************
  101 00:16D5 -  -  -  -  ;
  102 00:16D5 -  -  -  -  ;						Get 16 bit integer (for line numbers)
  103 00:16D5 -  -  -  -  ;
  104 00:16D5 -  -  -  -  ; ***************************************************************************************
  105 00:16D5 -  -  -  -  
  106 00:16D5 -  -  -  -  _CLGetInteger:
  107 00:16D5 C5 -  -  -  		push 	bc
  108 00:16D6 D5 -  -  -  		push 	de
  109 00:16D7 CD 35 07 00 		call 	EvaluateInteger
  110 00:16DB D9 -  -  -  		exx
  111 00:16DC 7C -  -  -  		ld 		a,h
  112 00:16DD B5 -  -  -  		or 		l
  113 00:16DE D9 -  -  -  		exx
  114 00:16DF CA 66 05 00 		jp 		z,BadValue
  115 00:16E3 D1 -  -  -  		pop 	de
  116 00:16E4 C1 -  -  -  		pop 	bc
  117 00:16E5 C9 -  -  -  		ret
  118 00:16E6 -  -  -  -  
  119 00:16E6 -  -  -  -  ; ***************************************************************************************
  120 00:16E6 -  -  -  -  ;
  121 00:16E6 -  -  -  -  ;								Print line starting at IX
  122 00:16E6 -  -  -  -  ;
  123 00:16E6 -  -  -  -  ; ***************************************************************************************
  124 00:16E6 -  -  -  -  
  125 00:16E6 -  -  -  -  CLPrintLine:
  126 00:16E6 CD F7 16 00 		call 	CLExpandLine
  127 00:16EA 21 B6 00 00 		ld 		hl,TokenBuffer
  128 00:16EE CD 6D 0E 00 		call 	PrintStringAtHL 
  129 00:16F2 CD 2D 15 00 		call 	SYSPrintCRLF
  130 00:16F6 C9 -  -  -  		ret
  131 00:16F7 -  -  -  -  
  132 00:16F7 -  -  -  -  ; ***************************************************************************************
  133 00:16F7 -  -  -  -  ;
  134 00:16F7 -  -  -  -  ;						 Expand line to buffer starting at IX
  135 00:16F7 -  -  -  -  ;
  136 00:16F7 -  -  -  -  ; ***************************************************************************************
  137 00:16F7 -  -  -  -  
  138 00:16F7 -  -  -  -  CLExpandLine:
  139 00:16F7 C5 -  -  -  		push 	bc
  140 00:16F8 D5 -  -  -  		push 	de
  141 00:16F9 DD E5 -  -  		push 	ix
  142 00:16FB 21 B6 00 00 		ld 		hl,TokenBuffer 				; set the token buffer pointer
  143 00:16FF 22 B6 01 00 		ld 		(TWPointer),hl
  144 00:1703 CD E2 17 00 		call 	CLDecodeLineNumber
  145 00:1707 -  -  -  -  _CLSpaceOut:		
  146 00:1707 CD 4A 17 00 		call 	CLPrintSpace
  147 00:170B 3A B6 01 00 		ld 		a,(TWPointer)
  148 00:170F FE BC -  -  		cp 		(6+TokenBuffer) & $FF
  149 00:1711 20 F4 -  -  		jr 		nz,_CLSpaceOut
  150 00:1713 DD 23 -  -  		inc 	ix 							; point to line star.
  151 00:1715 DD 23 -  -  		inc 	ix
  152 00:1717 DD 23 -  -  		inc 	ix
  153 00:1719 -  -  -  -  _CLPLLoop		
  154 00:1719 DD 7E 00 -  		ld 		a,(ix+0) 					; next token.
  155 00:171C FE 80 -  -  		cp 		$80 						; EOL 
  156 00:171E 28 25 -  -  		jr 		z,_CLPLLExit 				; if so, exit.
  157 00:1720 B7 -  -  -  		or 		a
  158 00:1721 FC 5B 17 00 		call 	m,CLDecodeKeyword
  159 00:1725 -  -  -  -  
  160 00:1725 06 10 -  -  		ld 		b,16
  161 00:1727 FE 94 -  -  		cp 		KWD_AMPERSAND
  162 00:1729 CC D0 17 00 		call 	z,CLDecodeInteger
  163 00:172D -  -  -  -  
  164 00:172D FE 26 -  -  		cp 		IDENTIFIER_END
  165 00:172F DC 88 17 00 		call 	c,CLDecodeIdentifier
  166 00:1733 -  -  -  -  
  167 00:1733 FE 3F -  -  		cp 		STRING_MARKER
  168 00:1735 CC AE 17 00 		call 	z,CLDecodeString
  169 00:1739 -  -  -  -  
  170 00:1739 E6 C0 -  -  		and 	$C0
  171 00:173B FE 40 -  -  		cp 		$40
  172 00:173D 06 0A -  -  		ld 		b,10
  173 00:173F CC D0 17 00 		call 	z,CLDecodeInteger
  174 00:1743 18 D4 -  -  		jr 		_CLPLLoop
  175 00:1745 -  -  -  -  
  176 00:1745 -  -  -  -  _CLPLLExit:		
  177 00:1745 DD E1 -  -  		pop 	ix
  178 00:1747 D1 -  -  -  		pop 	de
  179 00:1748 C1 -  -  -  		pop 	bc
  180 00:1749 C9 -  -  -  		ret
  181 00:174A -  -  -  -  
  182 00:174A -  -  -  -  ; ***************************************************************************************
  183 00:174A -  -  -  -  ;
  184 00:174A -  -  -  -  ;								Print Space/A to output
  185 00:174A -  -  -  -  ;
  186 00:174A -  -  -  -  ; ***************************************************************************************
  187 00:174A -  -  -  -  
  188 00:174A -  -  -  -  CLPrintSpace:
  189 00:174A 3E 20 -  -  		ld 		a,' '
  190 00:174C -  -  -  -  CLPrintA:
  191 00:174C E5 -  -  -  		push 	hl
  192 00:174D 2A B6 01 00 		ld 		hl,(TWPointer)		
  193 00:1751 77 -  -  -  		ld 		(hl),a
  194 00:1752 23 -  -  -  		inc 	hl
  195 00:1753 22 B6 01 00 		ld 		(TWPointer),hl
  196 00:1757 36 00 -  -  		ld 		(hl),0
  197 00:1759 E1 -  -  -  		pop 	hl
  198 00:175A C9 -  -  -  		ret
  199 00:175B -  -  -  -  
  200 00:175B -  -  -  -  ; ***************************************************************************************
  201 00:175B -  -  -  -  ;
  202 00:175B -  -  -  -  ;									Decode Keyword A
  203 00:175B -  -  -  -  ;
  204 00:175B -  -  -  -  ; ***************************************************************************************
  205 00:175B -  -  -  -  
  206 00:175B -  -  -  -  CLDecodeKeyword:
  207 00:175B F5 -  -  -  		push 	af
  208 00:175C DD 23 -  -  		inc 	ix 							; consume keyword
  209 00:175E 47 -  -  -  		ld 		b,a 						; put keyword # in B
  210 00:175F 21 2F 15 00 		ld 		hl,KeywordsSet0 			; start with set 0
  211 00:1763 -  -  -  -  _CLFindKeyword:
  212 00:1763 05 -  -  -  		dec 	b
  213 00:1764 F2 71 17 00 		jp 		p,_CLFoundKeyword 			; if $7F have found keyword.
  214 00:1768 11 00 00 00 		ld 		de,0 						; get length into DE
  215 00:176C 5E -  -  -  		ld 		e,(hl)
  216 00:176D 13 -  -  -  		inc 	de 							; +1 for the length
  217 00:176E 19 -  -  -  		add 	hl,de 						; go to next keyword		
  218 00:176F 18 F2 -  -  		jr 		_CLFindKeyword
  219 00:1771 -  -  -  -  _CLFoundKeyword:
  220 00:1771 46 -  -  -  		ld 		b,(hl) 						; get length into B
  221 00:1772 23 -  -  -  		inc 	hl
  222 00:1773 7E -  -  -  		ld 		a,(hl) 						; is first char identifier
  223 00:1774 CD 1A 18 00 		call 	CLGetCharacterType 			
  224 00:1778 FE 01 -  -  		cp 		1 							; if so, space requied maybe ?
  225 00:177A CC 07 18 00 		call 	z,CLCheckLastIdentifier
  226 00:177E -  -  -  -  _CLCopyKeyword:
  227 00:177E 7E -  -  -  		ld 		a,(hl)						; copy that many characters			
  228 00:177F 23 -  -  -  		inc 	hl 		
  229 00:1780 CD 4C 17 00 		call 	CLPrintA
  230 00:1784 10 F8 -  -  		djnz 	_CLCopyKeyword
  231 00:1786 F1 -  -  -  		pop 	af
  232 00:1787 C9 -  -  -  		ret
  233 00:1788 -  -  -  -  
  234 00:1788 -  -  -  -  ; ***************************************************************************************
  235 00:1788 -  -  -  -  ;
  236 00:1788 -  -  -  -  ;								 Decode Identifier at IX
  237 00:1788 -  -  -  -  ;
  238 00:1788 -  -  -  -  ; ***************************************************************************************
  239 00:1788 -  -  -  -  
  240 00:1788 -  -  -  -  CLDecodeIdentifier:
  241 00:1788 F5 -  -  -  		push 	af
  242 00:1789 CD 07 18 00 		call 	CLCheckLastIdentifier 		; check if identifier
  243 00:178D -  -  -  -  _CLDILoop:
  244 00:178D DD 7E 00 -  		ld 		a,(ix+0) 					; get identifier.
  245 00:1790 DD 23 -  -  		inc 	ix
  246 00:1792 06 61 -  -  		ld 		b,97 
  247 00:1794 FE 1A -  -  		cp 		26
  248 00:1796 38 08 -  -  		jr 		c,_CLDIDoChar
  249 00:1798 06 16 -  -  		ld 		b,48-26
  250 00:179A FE 24 -  -  		cp 		36
  251 00:179C 38 02 -  -  		jr 		c,_CLDIDoChar
  252 00:179E 06 3B -  -  		ld 		b,'_'-36
  253 00:17A0 -  -  -  -  _CLDIDoChar:
  254 00:17A0 80 -  -  -  		add 	a,b
  255 00:17A1 CD 4C 17 00 		call 	CLPrintA		
  256 00:17A5 DD 7E 00 -  		ld 		a,(ix+0) 					; check next is identifier
  257 00:17A8 FE 26 -  -  		cp 		IDENTIFIER_END
  258 00:17AA 38 E1 -  -  		jr 		c,_CLDILoop
  259 00:17AC F1 -  -  -  		pop 	af
  260 00:17AD C9 -  -  -  		ret
  261 00:17AE -  -  -  -  
  262 00:17AE -  -  -  -  ; ***************************************************************************************
  263 00:17AE -  -  -  -  ;
  264 00:17AE -  -  -  -  ;								 Decode String at IX
  265 00:17AE -  -  -  -  ;
  266 00:17AE -  -  -  -  ; ***************************************************************************************
  267 00:17AE -  -  -  -  
  268 00:17AE -  -  -  -  CLDecodeString:
  269 00:17AE F5 -  -  -  		push 	af
  270 00:17AF 3E 22 -  -  		ld	 	a,'"'
  271 00:17B1 CD 4C 17 00 		call 	CLPrintA
  272 00:17B5 DD 23 -  -  		inc 	ix
  273 00:17B7 DD 23 -  -  		inc 	ix
  274 00:17B9 -  -  -  -  _CLDSOut:
  275 00:17B9 DD 7E 00 -  		ld 		a,(ix+0)
  276 00:17BC DD 23 -  -  		inc 	ix
  277 00:17BE FE 20 -  -  		cp 		' '	
  278 00:17C0 38 06 -  -  		jr 		c,_CLDSEnd
  279 00:17C2 CD 4C 17 00 		call 	CLPrintA
  280 00:17C6 18 F1 -  -  		jr 		_CLDSOut
  281 00:17C8 -  -  -  -  _CLDSEnd:		
  282 00:17C8 3E 22 -  -  		ld	 	a,'"'
  283 00:17CA CD 4C 17 00 		call 	CLPrintA
  284 00:17CE F1 -  -  -  		pop 	af
  285 00:17CF C9 -  -  -  		ret
  286 00:17D0 -  -  -  -  
  287 00:17D0 -  -  -  -  ; ***************************************************************************************
  288 00:17D0 -  -  -  -  ;
  289 00:17D0 -  -  -  -  ;							Decode Integer at IX, base B
  290 00:17D0 -  -  -  -  ;
  291 00:17D0 -  -  -  -  ; ***************************************************************************************
  292 00:17D0 -  -  -  -  
  293 00:17D0 -  -  -  -  CLDecodeInteger:
  294 00:17D0 F5 -  -  -  		push 	af
  295 00:17D1 C5 -  -  -  		push 	bc
  296 00:17D2 CD 07 18 00 		call 	CLCheckLastIdentifier 		; check if identifier
  297 00:17D6 CD 0F 07 00 		call 	EvaluateIntegerTerm 		; get the number only
  298 00:17DA C1 -  -  -  		pop 	bc
  299 00:17DB 78 -  -  -  		ld 		a,b 						; base
  300 00:17DC CD F0 17 00 		call 	CLExpandInt32ToBuffer
  301 00:17E0 F1 -  -  -  		pop 	af
  302 00:17E1 C9 -  -  -  		ret
  303 00:17E2 -  -  -  -  
  304 00:17E2 -  -  -  -  ; ***************************************************************************************
  305 00:17E2 -  -  -  -  ;
  306 00:17E2 -  -  -  -  ;							 Decode Line Number into Token Buffer
  307 00:17E2 -  -  -  -  ;
  308 00:17E2 -  -  -  -  ; ***************************************************************************************
  309 00:17E2 -  -  -  -  
  310 00:17E2 -  -  -  -  CLDecodeLineNumber:
  311 00:17E2 DD 6E 01 -  		ld 		l,(ix+1)					; get line# to HL'HL
  312 00:17E5 DD 66 02 -  		ld 		h,(ix+2)
  313 00:17E8 D9 -  -  -  		exx
  314 00:17E9 21 00 00 00 		ld 		hl,$000000
  315 00:17ED D9 -  -  -  		exx
  316 00:17EE 3E 0A -  -  		ld 		a,10 						; base
  317 00:17F0 -  -  -  -  CLExpandInt32ToBuffer:
  318 00:17F0 ED 4B B6 01 
              00 -  -  -  		ld 		bc,(TWPointer) 				; where it goes.
  319 00:17F5 CD DD 14 00 		call 	Int32ToString
  320 00:17F9 -  -  -  -  _CLEI3End: 									; look for number end.
  321 00:17F9 0A -  -  -  		ld 		a,(bc)
  322 00:17FA ED 43 B6 01 
              00 -  -  -  		ld 		(TWPointer),bc
  323 00:17FF 03 -  -  -  		inc 	bc
  324 00:1800 FE 20 -  -  		cp 		' '
  325 00:1802 30 F5 -  -  		jr 		nc,_CLEI3End
  326 00:1804 AF -  -  -  		xor 	a 							; add EOS
  327 00:1805 02 -  -  -  		ld 		(bc),a				
  328 00:1806 C9 -  -  -  		ret
  329 00:1807 -  -  -  -  
  330 00:1807 -  -  -  -  ; ***************************************************************************************
  331 00:1807 -  -  -  -  ;
  332 00:1807 -  -  -  -  ;						Check if last was identifier, if so add space
  333 00:1807 -  -  -  -  ;
  334 00:1807 -  -  -  -  ; ***************************************************************************************
  335 00:1807 -  -  -  -  
  336 00:1807 -  -  -  -  CLCheckLastIdentifier:
  337 00:1807 E5 -  -  -  		push	hl 							; get last character written
  338 00:1808 2A B6 01 00 		ld 		hl,(TWPointer)
  339 00:180C 2B -  -  -  		dec 	hl
  340 00:180D 7E -  -  -  		ld 		a,(hl)
  341 00:180E E1 -  -  -  		pop 	hl
  342 00:180F CD 1A 18 00 		call 	CLGetCharacterType 			; get type
  343 00:1813 FE 01 -  -  		cp 		1  							; if identifier (A-Z0-9_)
  344 00:1815 CC 4A 17 00 		call 	z,CLPrintSpace 				; space needed
  345 00:1819 C9 -  -  -  		ret
  346 00:181A -  -  -  -  
  347 00:181A -  -  -  -  ; ***************************************************************************************
  348 00:181A -  -  -  -  ;
  349 00:181A -  -  -  -  ;								Get character type
  350 00:181A -  -  -  -  ;						0 = Space, 1 = 0-9a-zA-Z_ 2 = the rest
  351 00:181A -  -  -  -  ;
  352 00:181A -  -  -  -  ; ***************************************************************************************
  353 00:181A -  -  -  -  
  354 00:181A -  -  -  -  CLGetCharacterType:
  355 00:181A EE 20 -  -  		xor 	' ' 						; zero if space
  356 00:181C C8 -  -  -  		ret 	z
  357 00:181D EE 20 -  -  		xor 	' '							; get it back
  358 00:181F -  -  -  -  		;
  359 00:181F FE 5F -  -  		cp 		'_' 						; identifier if underscore.
  360 00:1821 28 16 -  -  		jr 		z,_CLIsIdentifier
  361 00:1823 -  -  -  -  		;
  362 00:1823 FE 30 -  -  		cp 		'0' 						; check 0-9
  363 00:1825 38 15 -  -  		jr 		c,_CLNotIdentifier
  364 00:1827 FE 3A -  -  		cp 		'9'+1
  365 00:1829 38 0E -  -  		jr 		c,_CLIsIdentifier
  366 00:182B -  -  -  -  		;
  367 00:182B FE 60 -  -  		cp 		96 							; shift l/c down
  368 00:182D 38 02 -  -  		jr 		c,_CLNotUpper
  369 00:182F D6 20 -  -  		sub 	a,32
  370 00:1831 -  -  -  -  _CLNotUpper:
  371 00:1831 FE 41 -  -  		cp 		'A'
  372 00:1833 38 07 -  -  		jr 		c,_CLNotIdentifier
  373 00:1835 FE 5B -  -  		cp 		'Z'+1
  374 00:1837 30 00 -  -  		jr 		nc,_CLIsIdentifier		
  375 00:1839 -  -  -  -  _CLIsIdentifier:
  376 00:1839 3E 01 -  -  		ld 		a,1
  377 00:183B C9 -  -  -  		ret
  378 00:183C -  -  -  -  _CLNotIdentifier:
  379 00:183C 3E 02 -  -  		ld 		a,2
  380 00:183E C9 -  -  -  		ret
  381 00:183F -  -  -  -  
  382 00:183F -  -  -  -  ; ***************************************************************************************
  383 00:183F -  -  -  -  ;
  384 00:183F -  -  -  -  ;									Changes and Updates
  385 00:183F -  -  -  -  ;
  386 00:183F -  -  -  -  ; ***************************************************************************************
  387 00:183F -  -  -  -  ;
  388 00:183F -  -  -  -  ;		Date			Notes
  389 00:183F -  -  -  -  ;		==== 			=====
  390 00:183F -  -  -  -  ;
  391 00:183F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   84 00:183F -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:183F -  -  -  -  ; ***************************************************************************************
    2 00:183F -  -  -  -  ; ***************************************************************************************
    3 00:183F -  -  -  -  ;
    4 00:183F -  -  -  -  ;		Name : 		basic.asm
    5 00:183F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:183F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:183F -  -  -  -  ;		Reviewed :	No
    8 00:183F -  -  -  -  ;		Purpose :	Main program.
    9 00:183F -  -  -  -  ;
   10 00:183F -  -  -  -  ; ***************************************************************************************
   11 00:183F -  -  -  -  ; ***************************************************************************************
   12 00:183F -  -  -  -  
   13 00:183F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1C00 -  -  -  -  TestInstance:
   15 00:1C00 10 04 00 BF 
              00 8F 0A 86 
              42 85 43 89 
              44 8A 45 80 
              05 0A 00 C4 
              80 0F 0C 00 
              00 01 02 24 
              1B 1C 1D 8F 
              17 A7 CD 80 
              08 14 00 BF 
              0A 8F 40 80 
              09 19 00 BD 
              0C 95 45 A5 
              80 0A 1E 00 
              BF 0A 8F 0A 
              89 41 80 10 
              28 00 BF 00 
              8F 0A 86 42 
              85 43 89 44 
              8A 45 80 07 
              2D 00 B9 4A 
              7C 80 0A 2E 
              00 B2 0B 8F 
              41 B3 45 80 
              0B 2F 00 BF 
              0C 95 0B A5 
              8F 00 80 05 
              30 00 B5 80 
              0D 32 00 AF 
              0A 8E 42 5C 
              50 B0 BB 5E 
              80 13 3C 00 
              C1 3F 0B 48 
              65 6C 6C 6F 
              20 77 6F 72 
              6C 64 0D 80 
              0D 58 02 B6 
              B7 13 04 12 
              13 95 00 A5 
              80 0C 5D 02 
              00 8F 94 4A 
              64 A7 C1 00 
              80 05 62 02 
              B8 80 05 AC 
              58 BA 80 -  		#import 	"testprogram/testprogram.dat"
   16 00:1CB3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2CB3 -  -  -  -  EndTestInstance:
   18 00:2CB3 -  -  -  -  		
   19 00:2CB3 -  -  -  -  ; ***************************************************************************************
   20 00:2CB3 -  -  -  -  ;
   21 00:2CB3 -  -  -  -  ;									Changes and Updates
   22 00:2CB3 -  -  -  -  ;
   23 00:2CB3 -  -  -  -  ; ***************************************************************************************
   24 00:2CB3 -  -  -  -  ;
   25 00:2CB3 -  -  -  -  ;		Date			Notes
   26 00:2CB3 -  -  -  -  ;		==== 			=====
   27 00:2CB3 -  -  -  -  ;
   28 00:2CB3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   85 00:2CB3 -  -  -  -  FinalAddress:
