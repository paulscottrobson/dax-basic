    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_GOSUB = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_GOSUB
   56 00:0000             	ld a,ERRID_GOSUB
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_INDEX = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_INDEX
   63 00:0000             	ld a,ERRID_INDEX
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_LINENO = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_LINENO
   70 00:0000             	ld a,ERRID_LINENO
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_MEMORY = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_MEMORY
   77 00:0000             	ld a,ERRID_MEMORY
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NEXT = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NEXT
   84 00:0000             	ld a,ERRID_NEXT
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOCOMMA = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   91 00:0000             	ld a,ERRID_NOCOMMA
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NODOLLAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   98 00:0000             	ld a,ERRID_NODOLLAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NOLBRACKET = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  105 00:0000             	ld a,ERRID_NOLBRACKET
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOPROC = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOPROC
  112 00:0000             	ld a,ERRID_NOPROC
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NORBRACKET = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  119 00:0000             	ld a,ERRID_NORBRACKET
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NOTREF = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NOTREF
  126 00:0000             	ld a,ERRID_NOTREF
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_PARAM = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_PARAM
  133 00:0000             	ld a,ERRID_PARAM
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PROC = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PROC
  140 00:0000             	ld a,ERRID_PROC
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_REPEAT = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_REPEAT
  147 00:0000             	ld a,ERRID_REPEAT
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_STACK = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_STACK
  154 00:0000             	ld a,ERRID_STACK
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STOP = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STOP
  161 00:0000             	ld a,ERRID_STOP
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_SYNTAX = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_SYNTAX
  168 00:0000             	ld a,ERRID_SYNTAX
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_TODO = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_TODO
  175 00:0000             	ld a,ERRID_TODO
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  182 00:0000             	ld a,ERRID_UNKNOWNVAR
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:0000             		ld 		sp,$BFFF
   41 00:0000             #endif
   42 00:0000             
   43 00:0000             #endif
   44 00:0000 CD 5A 13 00 		call 	SYSInitialise
   45 00:0004 11 00 14 00 		ld 		de,TestInstance
   46 00:0008 21 85 24 00 		ld 		hl,EndTestInstance
   47 00:000C CD 12 0A 00 		call 	SetCurrentInstance
   48 00:0010 -  -  -  -  
   49 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:0012 32 64 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:0016 -  -  -  -  		
   52 00:0016 C3 B0 02 00 		jp 		Command_RUN
   53 00:001A -  -  -  -  
   54 00:001A -  -  -  -  WarmStart:		
   55 00:001A 3E 2A -  -  		ld 		a,'*'
   56 00:001C CD 5C 13 00 		call 	SYSPrintChar
   57 00:0020 CD 5B 13 00 		call 	SYSTerminate
   58 00:0024 -  -  -  -  
   59 00:0024 -  -  -  -  Unimplemented:
   60 00:0024 3E 05 C3 A1 
              03 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:002A -  -  -  -  Int32DivZeroHandler:
   62 00:002A 3E 06 C3 A1 
              03 00 -  -  		ERR_DIVZERO
   63 00:0030 -  -  -  -  
   64 00:0030 -  -  -  -  ; ***************************************************************************************
   65 00:0030 -  -  -  -  ;
   66 00:0030 -  -  -  -  ;									Changes and Updates
   67 00:0030 -  -  -  -  ;
   68 00:0030 -  -  -  -  ; ***************************************************************************************
   69 00:0030 -  -  -  -  ;
   70 00:0030 -  -  -  -  ;		Date			Notes
   71 00:0030 -  -  -  -  ;		==== 			=====
   72 00:0030 -  -  -  -  ;
   73 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  
   78 00:005C -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  		
   81 00:0060 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:0060 00 00 00 00 		.dw 	0,0
   83 00:0064 -  -  -  -  
   84 00:0064 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:0064 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006A -  -  -  -  
   87 00:006A -  -  -  -  AConvert: 									; used for address conversions.
   88 00:006A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:0070 -  -  -  -  		
   90 00:0070 -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:0080 -  -  -  -  
   93 00:0080 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:0080 00 00 -  -  		.dw 	0
   95 00:0082 -  -  -  -  
   96 00:0082 -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:0082 00 00 -  -  		.dw 	0 
   98 00:0084 -  -  -  -  
   99 00:0084 -  -  -  -  ; ***************************************************************************************
  100 00:0084 -  -  -  -  ;
  101 00:0084 -  -  -  -  ;									Variable Information
  102 00:0084 -  -  -  -  ;
  103 00:0084 -  -  -  -  ; ***************************************************************************************
  104 00:0084 -  -  -  -  
  105 00:0084 -  -  -  -  VarNameStart: 								; first byte of name
  106 00:0084 00 00 00 00 		.dw 	0,0
  107 00:0088 -  -  -  -  VarHash: 									; name hash value
  108 00:0088 00 00 -  -  		.dw 	0		
  109 00:008A -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 00:008A 00 00 00 00 		.dw 	0,0
  111 00:008E -  -  -  -  		
  112 00:008E -  -  -  -  ; ***************************************************************************************
  113 00:008E -  -  -  -  ;
  114 00:008E -  -  -  -  ;										  Buffers
  115 00:008E -  -  -  -  ;
  116 00:008E -  -  -  -  ; ***************************************************************************************
  117 00:008E -  -  -  -  
  118 00:008E -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 00:008E 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 00:009E -  -  -  -  
  121 00:009E -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 00:009E 00 00 -  -  		.dw 	0
  123 00:00A0 -  -  -  -  
  124 00:00A0 -  -  -  -  ConvertBuffer: 								; general usage
  125 00:00A0 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 00:00E0 -  -  -  -  
  127 00:00E0 -  -  -  -  ; ***************************************************************************************
  128 00:00E0 -  -  -  -  ;
  129 00:00E0 -  -  -  -  ;									Changes and Updates
  130 00:00E0 -  -  -  -  ;
  131 00:00E0 -  -  -  -  ; ***************************************************************************************
  132 00:00E0 -  -  -  -  ;
  133 00:00E0 -  -  -  -  ;		Date			Notes
  134 00:00E0 -  -  -  -  ;		==== 			=====
  135 00:00E0 -  -  -  -  ;
  136 00:00E0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:00E0 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00E0 -  -  -  -  ; ***************************************************************************************
    2 00:00E0 -  -  -  -  ; ***************************************************************************************
    3 00:00E0 -  -  -  -  ;
    4 00:00E0 -  -  -  -  ;		Name : 		assert.asm
    5 00:00E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E0 -  -  -  -  ;		Reviewed :	No
    8 00:00E0 -  -  -  -  ;		Purpose :	Assert command
    9 00:00E0 -  -  -  -  ;
   10 00:00E0 -  -  -  -  ; ***************************************************************************************
   11 00:00E0 -  -  -  -  ; ***************************************************************************************
   12 00:00E0 -  -  -  -  
   13 00:00E0 -  -  -  -  ; ***************************************************************************************
   14 00:00E0 -  -  -  -  ;
   15 00:00E0 -  -  -  -  ;									ASSERT command
   16 00:00E0 -  -  -  -  ;
   17 00:00E0 -  -  -  -  ; ***************************************************************************************
   18 00:00E0 -  -  -  -  
   19 00:00E0 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00E0 CD D4 05 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00E4 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00EA C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00EB 3E 01 C3 A1 
              03 00 -  -  		ERR_ASSERT
   24 00:00F1 -  -  -  -  
   25 00:00F1 -  -  -  -  ; ***************************************************************************************
   26 00:00F1 -  -  -  -  ;
   27 00:00F1 -  -  -  -  ;									Changes and Updates
   28 00:00F1 -  -  -  -  ;
   29 00:00F1 -  -  -  -  ; ***************************************************************************************
   30 00:00F1 -  -  -  -  ;
   31 00:00F1 -  -  -  -  ;		Date			Notes
   32 00:00F1 -  -  -  -  ;		==== 			=====
   33 00:00F1 -  -  -  -  ;
   34 00:00F1 -  -  -  -  ; ***************************************************************************************
   35 00:00F1 -  -  -  -  		
Listing for file "_build.asm"
   15 00:00F1 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00F1 -  -  -  -  ; ***************************************************************************************
    2 00:00F1 -  -  -  -  ; ***************************************************************************************
    3 00:00F1 -  -  -  -  ;
    4 00:00F1 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F1 -  -  -  -  ;		Reviewed :	No
    8 00:00F1 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00F1 -  -  -  -  ;
   10 00:00F1 -  -  -  -  ; ***************************************************************************************
   11 00:00F1 -  -  -  -  ; ***************************************************************************************
   12 00:00F1 -  -  -  -  
   13 00:00F1 -  -  -  -  BadCmd_Def: 		;; [def]
   14 00:00F1 -  -  -  -  BadCmd_Then: 		;; [then]
   15 00:00F1 -  -  -  -  BadCmd_RBracket: 	;; [)]
   16 00:00F1 -  -  -  -  BadCmd_LSBracket: 	;; [[]
   17 00:00F1 -  -  -  -  BadCmd_RSBracket: 	;; []]
   18 00:00F1 -  -  -  -  BadCmd_Comma: 		;; [,]
   19 00:00F1 -  -  -  -  BadCmd_Comma: 		;; [~]
   20 00:00F1 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   21 00:00F1 -  -  -  -  BadCmd_To: 			;; [to]
   22 00:00F1 -  -  -  -  BadCmd_Step: 		;; [step]
   23 00:00F1 C3 0B 04 00 		jp 		SyntaxError
   24 00:00F5 -  -  -  -  
   25 00:00F5 -  -  -  -  ; ***************************************************************************************
   26 00:00F5 -  -  -  -  ;
   27 00:00F5 -  -  -  -  ;									Changes and Updates
   28 00:00F5 -  -  -  -  ;
   29 00:00F5 -  -  -  -  ; ***************************************************************************************
   30 00:00F5 -  -  -  -  ;
   31 00:00F5 -  -  -  -  ;		Date			Notes
   32 00:00F5 -  -  -  -  ;		==== 			=====
   33 00:00F5 -  -  -  -  ;
   34 00:00F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00F5 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00F5 -  -  -  -  ; ***************************************************************************************
    2 00:00F5 -  -  -  -  ; ***************************************************************************************
    3 00:00F5 -  -  -  -  ;
    4 00:00F5 -  -  -  -  ;		Name : 		colon.asm
    5 00:00F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F5 -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00F5 -  -  -  -  ;		Reviewed :	No
    8 00:00F5 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00F5 -  -  -  -  ;
   10 00:00F5 -  -  -  -  ; ***************************************************************************************
   11 00:00F5 -  -  -  -  ; ***************************************************************************************
   12 00:00F5 -  -  -  -  
   13 00:00F5 -  -  -  -  ; ***************************************************************************************
   14 00:00F5 -  -  -  -  ;
   15 00:00F5 -  -  -  -  ;								Colon command, this is ignored.
   16 00:00F5 -  -  -  -  ;
   17 00:00F5 -  -  -  -  ; ***************************************************************************************
   18 00:00F5 -  -  -  -  
   19 00:00F5 -  -  -  -  Command_Colon: 	;; [:]
   20 00:00F5 C9 -  -  -  		ret
   21 00:00F6 -  -  -  -  
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  ;
   24 00:00F6 -  -  -  -  ;									Changes and Updates
   25 00:00F6 -  -  -  -  ;
   26 00:00F6 -  -  -  -  ; ***************************************************************************************
   27 00:00F6 -  -  -  -  ;
   28 00:00F6 -  -  -  -  ;		Date			Notes
   29 00:00F6 -  -  -  -  ;		==== 			=====
   30 00:00F6 -  -  -  -  ;
   31 00:00F6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:00F6 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00F6 -  -  -  -  ; ***************************************************************************************
    2 00:00F6 -  -  -  -  ; ***************************************************************************************
    3 00:00F6 -  -  -  -  ;
    4 00:00F6 -  -  -  -  ;		Name : 		dim.asm
    5 00:00F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F6 -  -  -  -  ;		Date : 		4th June 2022
    7 00:00F6 -  -  -  -  ;		Reviewed :	No
    8 00:00F6 -  -  -  -  ;		Purpose :	Dim command
    9 00:00F6 -  -  -  -  ;
   10 00:00F6 -  -  -  -  ; ***************************************************************************************
   11 00:00F6 -  -  -  -  ; ***************************************************************************************
   12 00:00F6 -  -  -  -  
   13 00:00F6 -  -  -  -  ; ***************************************************************************************
   14 00:00F6 -  -  -  -  ;
   15 00:00F6 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:00F6 -  -  -  -  ;	
   17 00:00F6 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:00F6 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:00F6 -  -  -  -  ;								(can be comma chained)
   20 00:00F6 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:00F6 -  -  -  -  ;
   22 00:00F6 -  -  -  -  ; ***************************************************************************************
   23 00:00F6 -  -  -  -  
   24 00:00F6 -  -  -  -  Command_DIM: 	;; [dim]
   25 00:00F6 -  -  -  -  		;
   26 00:00F6 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:00F6 -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:00F6 -  -  -  -  		;
   29 00:00F6 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:00F8 D1 -  -  -  		pop 	de
   31 00:00F9 -  -  -  -  		;
   32 00:00F9 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:00FC FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:00FE D2 0B 04 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:0102 -  -  -  -  _DISkip:
   36 00:0102 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:0104 DD 7E 00 -  		ld 		a,(ix+0)
   38 00:0107 FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:0109 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:010B -  -  -  -  		;
   41 00:010B DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:010E FE 95 -  -  		cp 		KWD_LPAREN
   43 00:0110 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:0111 CC 72 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:0115 F1 -  -  -  		pop 	af
   46 00:0116 C4 2A 01 00 		call 	nz,DimensionAllocate
   47 00:011A -  -  -  -  		;
   48 00:011A DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:011D FE A6 -  -  		cp 		KWD_COMMA
   50 00:011F C0 -  -  -  		ret 	nz
   51 00:0120 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:0122 18 D2 -  -  		jr 		Command_DIM
   53 00:0124 -  -  -  -  
   54 00:0124 -  -  -  -  _CDError:
   55 00:0124 3E 04 C3 A1 
              03 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:012A -  -  -  -  
   57 00:012A -  -  -  -  ; ***************************************************************************************
   58 00:012A -  -  -  -  ;
   59 00:012A -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:012A -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:012A -  -  -  -  ;
   62 00:012A -  -  -  -  ; ***************************************************************************************
   63 00:012A -  -  -  -  
   64 00:012A -  -  -  -  DimensionAllocate:
   65 00:012A D5 -  -  -  		push 	de 							; save start on stack
   66 00:012B DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:012D 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:012F 32 80 00 00 		ld 		(AllowAutoCreate),a
   69 00:0133 CD E2 0C 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:0137 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:0139 28 E9 -  -  		jr 		z,_CDError
   72 00:013B CB 41 -  -  		bit 	CIsString,c
   73 00:013D 20 E5 -  -  		jr 		nz,_CDError
   74 00:013F DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:0141 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:0142 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:0144 CD 95 03 00 		call 	CheckNextA 					; check for [
   78 00:0148 CD D4 05 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:014C 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:014E CD 95 03 00 		call 	CheckNextA 					; check for ]
   81 00:0152 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:0153 7C -  -  -  		ld 		a,h
   83 00:0154 B5 -  -  -  		or 		l
   84 00:0155 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:0157 D9 -  -  -  		exx
   86 00:0158 23 -  -  -  		inc 	hl
   87 00:0159 D9 -  -  -  		exx
   88 00:015A -  -  -  -  _DANoCarry:
   89 00:015A D9 -  -  -  		exx 								; check if HL' is zero
   90 00:015B 7C -  -  -  		ld 		a,h
   91 00:015C B5 -  -  -  		or 		l
   92 00:015D D9 -  -  -  		exx
   93 00:015E 20 C4 -  -  		jr 		nz,_CDError
   94 00:0160 CD 9F 09 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:0164 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:0165 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:0166 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:016C AF -  -  -  		xor 	a 							; autocreate off
   99 00:016D 32 80 00 00 		ld 		(AllowAutoCreate),a
  100 00:0171 C9 -  -  -  		ret
  101 00:0172 -  -  -  -  
  102 00:0172 -  -  -  -  ; ***************************************************************************************
  103 00:0172 -  -  -  -  ;
  104 00:0172 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:0172 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:0172 -  -  -  -  ;
  107 00:0172 -  -  -  -  ; ***************************************************************************************
  108 00:0172 -  -  -  -  
  109 00:0172 -  -  -  -  DimensionArray:
  110 00:0172 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:0173 -  -  -  -  		;
  112 00:0173 CD D4 05 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:0177 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:0178 E6 FC -  -  		and 	$FC
  115 00:017A D9 -  -  -  		exx
  116 00:017B B4 -  -  -  		or 		h
  117 00:017C B5 -  -  -  		or 		l
  118 00:017D D9 -  -  -  		exx
  119 00:017E 20 A4 -  -  		jr 		nz,_CDError
  120 00:0180 -  -  -  -  		;
  121 00:0180 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:0182 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:0183 -  -  -  -  		;
  124 00:0183 CD 6F 0D 00 		call 	VariableInformation 		; get information about this array
  125 00:0187 CD AB 0D 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:018B 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:018D -  -  -  -  		;
  128 00:018D E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:018E E5 -  -  -  		push 	hl
  130 00:018F 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:0190 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:0191 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:0192 29 -  -  -  		add 	hl,hl
  134 00:0193 CD 9F 0C 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:0197 -  -  -  -  		;
  136 00:0197 D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:0198 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:019C 09 -  -  -  		add 	hl,bc
  139 00:019D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:01A3 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:01A5 C9 -  -  -  		ret		
  142 00:01A6 -  -  -  -  
  143 00:01A6 -  -  -  -  
  144 00:01A6 -  -  -  -  ; ***************************************************************************************
  145 00:01A6 -  -  -  -  ;
  146 00:01A6 -  -  -  -  ;									Changes and Updates
  147 00:01A6 -  -  -  -  ;
  148 00:01A6 -  -  -  -  ; ***************************************************************************************
  149 00:01A6 -  -  -  -  ;
  150 00:01A6 -  -  -  -  ;		Date			Notes
  151 00:01A6 -  -  -  -  ;		==== 			=====
  152 00:01A6 -  -  -  -  ;
  153 00:01A6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:01A6 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:01A6 -  -  -  -  ; ***************************************************************************************
    2 00:01A6 -  -  -  -  ; ***************************************************************************************
    3 00:01A6 -  -  -  -  ;
    4 00:01A6 -  -  -  -  ;		Name : 		end.asm
    5 00:01A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01A6 -  -  -  -  ;		Reviewed :	No
    8 00:01A6 -  -  -  -  ;		Purpose :	End command
    9 00:01A6 -  -  -  -  ;
   10 00:01A6 -  -  -  -  ; ***************************************************************************************
   11 00:01A6 -  -  -  -  ; ***************************************************************************************
   12 00:01A6 -  -  -  -  
   13 00:01A6 -  -  -  -  ; ***************************************************************************************
   14 00:01A6 -  -  -  -  ;
   15 00:01A6 -  -  -  -  ;										END command
   16 00:01A6 -  -  -  -  ;
   17 00:01A6 -  -  -  -  ; ***************************************************************************************
   18 00:01A6 -  -  -  -  
   19 00:01A6 -  -  -  -  Command_END: 	;; [end]
   20 00:01A6 3E 00 C3 A1 
              03 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:01AC -  -  -  -  
   22 00:01AC -  -  -  -  ; ***************************************************************************************
   23 00:01AC -  -  -  -  ;
   24 00:01AC -  -  -  -  ;									Changes and Updates
   25 00:01AC -  -  -  -  ;
   26 00:01AC -  -  -  -  ; ***************************************************************************************
   27 00:01AC -  -  -  -  ;
   28 00:01AC -  -  -  -  ;		Date			Notes
   29 00:01AC -  -  -  -  ;		==== 			=====
   30 00:01AC -  -  -  -  ;
   31 00:01AC -  -  -  -  ; ***************************************************************************************
   32 00:01AC -  -  -  -  		
Listing for file "_build.asm"
   19 00:01AC -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:01AC -  -  -  -  ; ***************************************************************************************
    2 00:01AC -  -  -  -  ; ***************************************************************************************
    3 00:01AC -  -  -  -  ;
    4 00:01AC -  -  -  -  ;		Name : 		endofline.asm
    5 00:01AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01AC -  -  -  -  ;		Reviewed :	None
    8 00:01AC -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:01AC -  -  -  -  ;
   10 00:01AC -  -  -  -  ; ***************************************************************************************
   11 00:01AC -  -  -  -  ; ***************************************************************************************
   12 00:01AC -  -  -  -  
   13 00:01AC -  -  -  -  ; ***************************************************************************************
   14 00:01AC -  -  -  -  ;
   15 00:01AC -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:01AC -  -  -  -  ;
   17 00:01AC -  -  -  -  ; ***************************************************************************************
   18 00:01AC -  -  -  -  
   19 00:01AC -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:01AC DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:01B1 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:01B5 DD 5E 00 -  		ld 		e,(ix+0)
   23 00:01B8 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:01BA -  -  -  -  		;
   25 00:01BA ED 7B 60 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:01BF C3 C3 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:01C3 -  -  -  -  
   28 00:01C3 -  -  -  -  ; ***************************************************************************************
   29 00:01C3 -  -  -  -  ;
   30 00:01C3 -  -  -  -  ;									Changes and Updates
   31 00:01C3 -  -  -  -  ;
   32 00:01C3 -  -  -  -  ; ***************************************************************************************
   33 00:01C3 -  -  -  -  ;
   34 00:01C3 -  -  -  -  ;		Date			Notes
   35 00:01C3 -  -  -  -  ;		==== 			=====
   36 00:01C3 -  -  -  -  ;
   37 00:01C3 -  -  -  -  ; ***************************************************************************************
   38 00:01C3 -  -  -  -  		
Listing for file "_build.asm"
   20 00:01C3 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:01C3 -  -  -  -  ; ***************************************************************************************
    2 00:01C3 -  -  -  -  ; ***************************************************************************************
    3 00:01C3 -  -  -  -  ;
    4 00:01C3 -  -  -  -  ;		Name : 		let.asm
    5 00:01C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01C3 -  -  -  -  ;		Date : 		4th June 2022
    7 00:01C3 -  -  -  -  ;		Reviewed :	No
    8 00:01C3 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:01C3 -  -  -  -  ;
   10 00:01C3 -  -  -  -  ; ***************************************************************************************
   11 00:01C3 -  -  -  -  ; ***************************************************************************************
   12 00:01C3 -  -  -  -  
   13 00:01C3 -  -  -  -  ; ***************************************************************************************
   14 00:01C3 -  -  -  -  ;
   15 00:01C3 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:01C3 -  -  -  -  ;
   17 00:01C3 -  -  -  -  ; ***************************************************************************************
   18 00:01C3 -  -  -  -  
   19 00:01C3 -  -  -  -  Command_LET: 	;; [let]
   20 00:01C3 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:01C6 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:01C8 28 2F -  -  		jr 		z,_CLString
   23 00:01CA FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:01CC 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:01CE 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:01D0 32 80 00 00 		ld 		(AllowAutoCreate),a
   27 00:01D4 -  -  -  -  _CLNoAuto:
   28 00:01D4 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01D6 CD 56 05 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01DA CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01DC CA 0B 04 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01E0 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01E1 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01E2 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01E3 32 80 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01E7 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01E9 CD 95 03 00 		call 	CheckNextA
   38 00:01ED -  -  -  -  
   39 00:01ED CD CC 05 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01F1 -  -  -  -  
   41 00:01F1 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01F2 43 -  -  -  		ld 		b,e 						
   43 00:01F3 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01F4 -  -  -  -  		;
   45 00:01F4 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01F4 -  -  -  -  		;
   47 00:01F4 CD 12 02 00 		call 	WriteHLToDE
   48 00:01F8 C9 -  -  -  		ret
   49 00:01F9 -  -  -  -  		;
   50 00:01F9 -  -  -  -  		; 		String assignment code.
   51 00:01F9 -  -  -  -  		;
   52 00:01F9 -  -  -  -  _CLString:
   53 00:01F9 CD BD 05 00 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:01FD E5 -  -  -  		push 	hl 							; save target expression
   55 00:01FE 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:0200 CD 95 03 00 		call 	CheckNextA
   57 00:0204 CD EE 05 00 		call 	EvaluateString 				; get the thing to copy
   58 00:0208 D1 -  -  -  		pop 	de 							; target in DE.
   59 00:0209 -  -  -  -  _CLCopy:
   60 00:0209 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:020A 12 -  -  -  		ld 		(de),a
   62 00:020B 23 -  -  -  		inc 	hl
   63 00:020C 13 -  -  -  		inc 	de
   64 00:020D FE 20 -  -  		cp 		$20 						; until control character
   65 00:020F 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:0211 C9 -  -  -  		ret
   67 00:0212 -  -  -  -  
   68 00:0212 -  -  -  -  ; ***************************************************************************************
   69 00:0212 -  -  -  -  ;
   70 00:0212 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:0212 -  -  -  -  ;
   72 00:0212 -  -  -  -  ; ***************************************************************************************
   73 00:0212 -  -  -  -  
   74 00:0212 -  -  -  -  WriteHLToDE:
   75 00:0212 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:0214 C2 FF 03 00 		jp 		nz,TypeMismatch
   77 00:0218 -  -  -  -  		;
   78 00:0218 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:0218 -  -  -  -  		;		
   80 00:0218 -  -  -  -  _WHDWriteNumber:
   81 00:0218 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:0219 D9 -  -  -  		exx
   83 00:021A EB -  -  -  		ex 		de,hl
   84 00:021B D9 -  -  -  		exx
   85 00:021C -  -  -  -  
   86 00:021C 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:021D 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:021E 72 -  -  -  		ld 		(hl),d
   89 00:021F 23 -  -  -  		inc 	hl
   90 00:0220 E5 -  -  -  		push 	hl
   91 00:0221 D9 -  -  -  		exx
   92 00:0222 E1 -  -  -  		pop 	hl
   93 00:0223 73 -  -  -  		ld 		(hl),e
   94 00:0224 23 -  -  -  		inc 	hl
   95 00:0225 72 -  -  -  		ld 		(hl),d
   96 00:0226 D9 -  -  -  		exx
   97 00:0227 -  -  -  -  
   98 00:0227 C9 -  -  -  		ret
   99 00:0228 -  -  -  -  
  100 00:0228 -  -  -  -  ; ***************************************************************************************
  101 00:0228 -  -  -  -  ;
  102 00:0228 -  -  -  -  ;									Changes and Updates
  103 00:0228 -  -  -  -  ;
  104 00:0228 -  -  -  -  ; ***************************************************************************************
  105 00:0228 -  -  -  -  ;
  106 00:0228 -  -  -  -  ;		Date			Notes
  107 00:0228 -  -  -  -  ;		==== 			=====
  108 00:0228 -  -  -  -  ;
  109 00:0228 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:0228 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:0228 -  -  -  -  ; ***************************************************************************************
    2 00:0228 -  -  -  -  ; ***************************************************************************************
    3 00:0228 -  -  -  -  ;
    4 00:0228 -  -  -  -  ;		Name : 		print.asm
    5 00:0228 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0228 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0228 -  -  -  -  ;		Reviewed :	No
    8 00:0228 -  -  -  -  ;		Purpose :	Print command
    9 00:0228 -  -  -  -  ;
   10 00:0228 -  -  -  -  ; ***************************************************************************************
   11 00:0228 -  -  -  -  ; ***************************************************************************************
   12 00:0228 -  -  -  -  
   13 00:0228 -  -  -  -  ; ***************************************************************************************
   14 00:0228 -  -  -  -  ;
   15 00:0228 -  -  -  -  ;										PRINT command
   16 00:0228 -  -  -  -  ;
   17 00:0228 -  -  -  -  ; ***************************************************************************************
   18 00:0228 -  -  -  -  
   19 00:0228 -  -  -  -  Command_PRINT: 	;; [print]
   20 00:0228 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:022A 32 82 00 00 		ld 		(PrintBase),a
   22 00:022E -  -  -  -  		;
   23 00:022E -  -  -  -  		;		Main loop
   24 00:022E -  -  -  -  		;
   25 00:022E -  -  -  -  _CPRLoop:
   26 00:022E DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:0231 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:0233 28 59 -  -  		jr 		z,_CPRExitNL
   29 00:0235 FE A7 -  -  		cp 		KWD_COLON 	
   30 00:0237 28 55 -  -  		jr 		z,_CPRExitNL
   31 00:0239 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:023B 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 00:023D FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:023F 28 34 -  -  		jr 		z,_CPRTab
   35 00:0241 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:0243 28 2A -  -  		jr 		z,_CPRNewLine
   37 00:0245 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:0247 28 1C -  -  		jr 		z,_CPRHexMode
   39 00:0249 -  -  -  -  		;
   40 00:0249 CD CC 05 00 		call 	EvaluateValue 				; so it must be an expression.		
   41 00:024D CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:024F 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 00:0251 -  -  -  -  		;
   44 00:0251 3A 82 00 00 		ld 		a,(PrintBase)				; current print mode.
   45 00:0255 -  -  -  -  _CPRPrintNumber:
   46 00:0255 01 A0 00 00 		ld  	bc,ConvertBuffer
   47 00:0259 C5 -  -  -  		push 	bc
   48 00:025A CD 0D 13 00 		call 	Int32ToString 				; convert to string
   49 00:025E E1 -  -  -  		pop 	hl
   50 00:025F -  -  -  -  		;
   51 00:025F -  -  -  -  		; 		Print text at HL.
   52 00:025F -  -  -  -  		;
   53 00:025F -  -  -  -  _CPRPrintHL:
   54 00:025F CD 94 0C 00 		call 	PrintStringAtHL 			; print string out
   55 00:0263 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:0265 -  -  -  -  		;
   57 00:0265 -  -  -  -  		;		Hex mode (~)
   58 00:0265 -  -  -  -  		;
   59 00:0265 -  -  -  -  _CPRHexMode:		
   60 00:0265 3E 10 -  -  		ld 		a,16
   61 00:0267 32 82 00 00 		ld 		(PrintBase),a
   62 00:026B DD 23 -  -  		inc 	ix
   63 00:026D 18 BF -  -  		jr 		_CPRLoop
   64 00:026F -  -  -  -  		;
   65 00:026F -  -  -  -  		; 		New line (')
   66 00:026F -  -  -  -  		;
   67 00:026F -  -  -  -  _CPRNewLine:
   68 00:026F CD 5D 13 00 		call 	SYSPrintCRLF
   69 00:0273 18 0C -  -  		jr 		_CPRCheckNext
   70 00:0275 -  -  -  -  		;
   71 00:0275 -  -  -  -  		; 		Tab command (,)
   72 00:0275 -  -  -  -  		;
   73 00:0275 -  -  -  -  _CPRTab:
   74 00:0275 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:0277 CD 5C 13 00 		call 	SYSPrintChar
   76 00:027B -  -  -  -  		;
   77 00:027B -  -  -  -  		;		Set to base 10 then check next character
   78 00:027B -  -  -  -  		;
   79 00:027B -  -  -  -  _CPRCheckNext10:		
   80 00:027B 3E F6 -  -  		ld 		a,-10
   81 00:027D 32 82 00 00 		ld 		(PrintBase),a
   82 00:0281 -  -  -  -  		;
   83 00:0281 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:0281 -  -  -  -  		;		
   85 00:0281 -  -  -  -  _CPRCheckNext:
   86 00:0281 DD 23 -  -  		inc 	ix 							; consume current
   87 00:0283 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:0286 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:0288 C8 -  -  -  		ret 	z
   90 00:0289 FE A7 -  -  		cp 		KWD_COLON
   91 00:028B C8 -  -  -  		ret 	z
   92 00:028C 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:028E -  -  -  -  		;
   94 00:028E -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:028E -  -  -  -  		;
   96 00:028E -  -  -  -  _CPRExitNL:
   97 00:028E CD 5D 13 00 		call 	SYSPrintCRLF 				; do CR/LF
   98 00:0292 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:0293 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0293 -  -  -  -  ; ***************************************************************************************
    2 00:0293 -  -  -  -  ; ***************************************************************************************
    3 00:0293 -  -  -  -  ;
    4 00:0293 -  -  -  -  ;		Name : 		rem.asm
    5 00:0293 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0293 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0293 -  -  -  -  ;		Reviewed :	No
    8 00:0293 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0293 -  -  -  -  ;
   10 00:0293 -  -  -  -  ; ***************************************************************************************
   11 00:0293 -  -  -  -  ; ***************************************************************************************
   12 00:0293 -  -  -  -  
   13 00:0293 -  -  -  -  ; ***************************************************************************************
   14 00:0293 -  -  -  -  ;
   15 00:0293 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0293 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0293 -  -  -  -  ;
   18 00:0293 -  -  -  -  ; ***************************************************************************************
   19 00:0293 -  -  -  -  
   20 00:0293 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0293 -  -  -  -  Command_REM2: 	;; [']
   22 00:0293 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:0296 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:0298 C8 -  -  -  		ret 	z
   25 00:0299 DD 23 -  -  		inc 	ix
   26 00:029B FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:029D C8 -  -  -  		ret 	z
   28 00:029E FE 3F -  -  		cp 		STRING_MARKER
   29 00:02A0 C2 0B 04 00 		jp 		nz,SyntaxError
   30 00:02A4 -  -  -  -  		;		
   31 00:02A4 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:02A8 DD 5E 00 -  		ld 		e,(ix+0)
   33 00:02AB 13 -  -  -  		inc 	de 
   34 00:02AC 13 -  -  -  		inc 	de
   35 00:02AD DD 19 -  -  		add 	ix,de 						; skip string
   36 00:02AF C9 -  -  -  		ret
   37 00:02B0 -  -  -  -  
   38 00:02B0 -  -  -  -  ; ***************************************************************************************
   39 00:02B0 -  -  -  -  ;
   40 00:02B0 -  -  -  -  ;									Changes and Updates
   41 00:02B0 -  -  -  -  ;
   42 00:02B0 -  -  -  -  ; ***************************************************************************************
   43 00:02B0 -  -  -  -  ;
   44 00:02B0 -  -  -  -  ;		Date			Notes
   45 00:02B0 -  -  -  -  ;		==== 			=====
   46 00:02B0 -  -  -  -  ;
   47 00:02B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:02B0 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:02B0 -  -  -  -  ; ***************************************************************************************
    2 00:02B0 -  -  -  -  ; ***************************************************************************************
    3 00:02B0 -  -  -  -  ;
    4 00:02B0 -  -  -  -  ;		Name : 		run.asm
    5 00:02B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02B0 -  -  -  -  ;		Reviewed :	No
    8 00:02B0 -  -  -  -  ;		Purpose :	Run command
    9 00:02B0 -  -  -  -  ;
   10 00:02B0 -  -  -  -  ; ***************************************************************************************
   11 00:02B0 -  -  -  -  ; ***************************************************************************************
   12 00:02B0 -  -  -  -  
   13 00:02B0 -  -  -  -  ; ***************************************************************************************
   14 00:02B0 -  -  -  -  ;
   15 00:02B0 -  -  -  -  ;										RUN command
   16 00:02B0 -  -  -  -  ;
   17 00:02B0 -  -  -  -  ; ***************************************************************************************
   18 00:02B0 -  -  -  -  
   19 00:02B0 -  -  -  -  Command_RUN: 	;; [run]
   20 00:02B0 CD C1 09 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:02B4 -  -  -  -  
   22 00:02B4 DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:02B9 ED 73 60 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:02BE AF -  -  -  		xor 	a
   25 00:02BF 32 80 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:02C3 -  -  -  -  		;
   27 00:02C3 -  -  -  -  		; 		New line at IX.
   28 00:02C3 -  -  -  -  		;
   29 00:02C3 -  -  -  -  CRNewLine:
   30 00:02C3 DD 22 5C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:02C8 -  -  -  -  		;
   32 00:02C8 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:02CB B7 -  -  -  		or 		a
   34 00:02CC CA A6 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:02D0 -  -  -  -  		;
   36 00:02D0 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:02D2 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:02D4 DD 23 -  -  		inc 	ix
   39 00:02D6 -  -  -  -  		;
   40 00:02D6 -  -  -  -  		; 		New command at IX
   41 00:02D6 -  -  -  -  		;
   42 00:02D6 -  -  -  -  _CRNewCommand:	
   43 00:02D6 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:02D9 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:02DA F2 15 03 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:02DE -  -  -  -  		;
   47 00:02DE FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:02E0 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:02E2 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:02E4 D2 05 03 00 		jp 		nc,_CRAlternateLets
   51 00:02E8 -  -  -  -  		;
   52 00:02E8 -  -  -  -  _CRDoCommand:		
   53 00:02E8 E6 7F 21 00 
              00 00 6F 29 
              29 11 16 10 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:02FD DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:02FF CD 64 00 00 		call 	JumpCode 					; call the routine.
   56 00:0303 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:0305 -  -  -  -  		;
   58 00:0305 -  -  -  -  		; 		Do CALL (HL)
   59 00:0305 -  -  -  -  		;
   60 00:0305 -  -  -  -  		;
   61 00:0305 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:0305 -  -  -  -  		;		
   63 00:0305 -  -  -  -  _CRAlternateLets:		
   64 00:0305 FE 83 -  -  		cp 		KWD_PLING
   65 00:0307 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:0309 FE 84 -  -  		cp 		KWD_QMARK
   67 00:030B 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:030D FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:030F 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:0311 C3 0B 04 00 		jp 		SyntaxError
   71 00:0315 -  -  -  -  		;
   72 00:0315 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:0315 -  -  -  -  		;
   74 00:0315 -  -  -  -  _CRAssignmentHandler:		
   75 00:0315 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:0317 D2 0B 04 00 		jp 		nc,SyntaxError
   77 00:031B -  -  -  -  _CRAssignmentLet:		
   78 00:031B CD C3 01 00 		call	Command_LET 				; do LET.
   79 00:031F C3 D6 02 00 		jp 		_CRNewCommand
   80 00:0323 -  -  -  -  
   81 00:0323 -  -  -  -  ; ***************************************************************************************
   82 00:0323 -  -  -  -  ;
   83 00:0323 -  -  -  -  ;									Changes and Updates
   84 00:0323 -  -  -  -  ;
   85 00:0323 -  -  -  -  ; ***************************************************************************************
   86 00:0323 -  -  -  -  ;
   87 00:0323 -  -  -  -  ;		Date			Notes
   88 00:0323 -  -  -  -  ;		==== 			=====
   89 00:0323 -  -  -  -  ;
   90 00:0323 -  -  -  -  ; ***************************************************************************************
   91 00:0323 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0323 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0323 -  -  -  -  ; ***************************************************************************************
    2 00:0323 -  -  -  -  ; ***************************************************************************************
    3 00:0323 -  -  -  -  ;
    4 00:0323 -  -  -  -  ;		Name : 		stop.asm
    5 00:0323 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0323 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0323 -  -  -  -  ;		Reviewed :	No
    8 00:0323 -  -  -  -  ;		Purpose :	Stop command
    9 00:0323 -  -  -  -  ;
   10 00:0323 -  -  -  -  ; ***************************************************************************************
   11 00:0323 -  -  -  -  ; ***************************************************************************************
   12 00:0323 -  -  -  -  
   13 00:0323 -  -  -  -  ; ***************************************************************************************
   14 00:0323 -  -  -  -  ;
   15 00:0323 -  -  -  -  ;										STOP command
   16 00:0323 -  -  -  -  ;
   17 00:0323 -  -  -  -  ; ***************************************************************************************
   18 00:0323 -  -  -  -  
   19 00:0323 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0323 3E 16 C3 A1 
              03 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:0329 -  -  -  -  
   22 00:0329 -  -  -  -  ; ***************************************************************************************
   23 00:0329 -  -  -  -  ;
   24 00:0329 -  -  -  -  ;									Changes and Updates
   25 00:0329 -  -  -  -  ;
   26 00:0329 -  -  -  -  ; ***************************************************************************************
   27 00:0329 -  -  -  -  ;
   28 00:0329 -  -  -  -  ;		Date			Notes
   29 00:0329 -  -  -  -  ;		==== 			=====
   30 00:0329 -  -  -  -  ;
   31 00:0329 -  -  -  -  ; ***************************************************************************************
   32 00:0329 -  -  -  -  		
Listing for file "_build.asm"
   25 00:0329 -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 00:0329 -  -  -  -  ; ***************************************************************************************
    2 00:0329 -  -  -  -  ; ***************************************************************************************
    3 00:0329 -  -  -  -  ;
    4 00:0329 -  -  -  -  ;		Name : 		vdu.asm
    5 00:0329 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0329 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0329 -  -  -  -  ;		Reviewed :	No
    8 00:0329 -  -  -  -  ;		Purpose :	Vdu command
    9 00:0329 -  -  -  -  ;
   10 00:0329 -  -  -  -  ; ***************************************************************************************
   11 00:0329 -  -  -  -  ; ***************************************************************************************
   12 00:0329 -  -  -  -  
   13 00:0329 -  -  -  -  ; ***************************************************************************************
   14 00:0329 -  -  -  -  ;
   15 00:0329 -  -  -  -  ;										END command
   16 00:0329 -  -  -  -  ;
   17 00:0329 -  -  -  -  ; ***************************************************************************************
   18 00:0329 -  -  -  -  
   19 00:0329 -  -  -  -  Command_VDU: 	;; [vdu]
   20 00:0329 DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 00:032C FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 00:032E C8 -  -  -  		ret 	z
   23 00:032F FE A7 -  -  		cp 		KWD_COLON
   24 00:0331 C8 -  -  -  		ret 	z
   25 00:0332 -  -  -  -  		;
   26 00:0332 CD D4 05 00 		call 	EvaluateInteger 			; evaluate integer value
   27 00:0336 D9 -  -  -  		exx 								; check 0-FFFF
   28 00:0337 7C -  -  -  		ld 		a,h
   29 00:0338 B5 -  -  -  		or 		l
   30 00:0339 D9 -  -  -  		exx
   31 00:033A C2 05 04 00 		jp  	nz,BadValue
   32 00:033E E5 -  -  -  		push 	hl 							; save on stack
   33 00:033F 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 00:0340 CD 5C 13 00 		call 	SYSPrintChar
   35 00:0344 E1 -  -  -  		pop 	hl 							; get upper back
   36 00:0345 DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 00:0348 DD 23 -  -  		inc 	ix 
   38 00:034A FE A6 -  -  		cp 		KWD_COMMA 					
   39 00:034C 28 DB -  -  		jr 		z,Command_VDU
   40 00:034E FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 00:0350 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 00:0352 DD 2B -  -  		dec 	ix 							; go back and try again
   43 00:0354 18 D3 -  -  		jr 		Command_VDU
   44 00:0356 -  -  -  -  
   45 00:0356 -  -  -  -  _VDUUpper:
   46 00:0356 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 00:0357 CD 5C 13 00 		call 	SYSPrintChar
   48 00:035B 18 CC -  -  		jr 		Command_VDU		
   49 00:035D -  -  -  -  
   50 00:035D -  -  -  -  ; ***************************************************************************************
   51 00:035D -  -  -  -  ;
   52 00:035D -  -  -  -  ;									Changes and Updates
   53 00:035D -  -  -  -  ;
   54 00:035D -  -  -  -  ; ***************************************************************************************
   55 00:035D -  -  -  -  ;
   56 00:035D -  -  -  -  ;		Date			Notes
   57 00:035D -  -  -  -  ;		==== 			=====
   58 00:035D -  -  -  -  ;
   59 00:035D -  -  -  -  ; ***************************************************************************************
   60 00:035D -  -  -  -  		
Listing for file "_build.asm"
   26 00:035D -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:035D -  -  -  -  ; ***************************************************************************************
    2 00:035D -  -  -  -  ; ***************************************************************************************
    3 00:035D -  -  -  -  ;
    4 00:035D -  -  -  -  ;		Name : 		charcheck.asm
    5 00:035D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:035D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:035D -  -  -  -  ;		Reviewed :	No
    8 00:035D -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:035D -  -  -  -  ;
   10 00:035D -  -  -  -  ; ***************************************************************************************
   11 00:035D -  -  -  -  ; ***************************************************************************************
   12 00:035D -  -  -  -  
   13 00:035D -  -  -  -  ; ***************************************************************************************
   14 00:035D -  -  -  -  ;
   15 00:035D -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:035D -  -  -  -  ;
   17 00:035D -  -  -  -  ; ***************************************************************************************
   18 00:035D -  -  -  -  
   19 00:035D -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:035D             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:035D             		inc 	ix
   22 00:035D             		cp 		ch 							; exit if matches
   23 00:035D             		ret 	z
   24 00:035D             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:035D             		jp 		ErrorHandler
   26 00:035D             #endmacro
   27 00:035D -  -  -  -  
   28 00:035D -  -  -  -  CheckLeftBracket:
   29 00:035D DD 7E 00 DD 
              23 FE 95 C8 
              3E 0E C3 A1 
              03 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:036B -  -  -  -  
   31 00:036B -  -  -  -  CheckRightBracket:
   32 00:036B DD 7E 00 DD 
              23 FE A5 C8 
              3E 10 C3 A1 
              03 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0379 -  -  -  -  
   34 00:0379 -  -  -  -  CheckDollar:
   35 00:0379 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0D C3 A1 
              03 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0387 -  -  -  -  		
   37 00:0387 -  -  -  -  CheckComma:
   38 00:0387 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0C C3 A1 
              03 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0395 -  -  -  -  
   40 00:0395 -  -  -  -  ; ***************************************************************************************
   41 00:0395 -  -  -  -  ;
   42 00:0395 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0395 -  -  -  -  ;
   44 00:0395 -  -  -  -  ; ***************************************************************************************
   45 00:0395 -  -  -  -  
   46 00:0395 -  -  -  -  CheckNextA:
   47 00:0395 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0398 DD 23 -  -  		inc 	ix 							; skip character
   49 00:039A C8 -  -  -  		ret 	z 							; yes, okay
   50 00:039B 3E 17 C3 A1 
              03 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:03A1 -  -  -  -  		
   52 00:03A1 -  -  -  -  ; ***************************************************************************************
   53 00:03A1 -  -  -  -  ;
   54 00:03A1 -  -  -  -  ;									Changes and Updates
   55 00:03A1 -  -  -  -  ;
   56 00:03A1 -  -  -  -  ; ***************************************************************************************
   57 00:03A1 -  -  -  -  ;
   58 00:03A1 -  -  -  -  ;		Date			Notes
   59 00:03A1 -  -  -  -  ;		==== 			=====
   60 00:03A1 -  -  -  -  ;
   61 00:03A1 -  -  -  -  ; ***************************************************************************************
   62 00:03A1 -  -  -  -  		
Listing for file "_build.asm"
   27 00:03A1 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:03A1 -  -  -  -  ; ***************************************************************************************
    2 00:03A1 -  -  -  -  ; ***************************************************************************************
    3 00:03A1 -  -  -  -  ;
    4 00:03A1 -  -  -  -  ;		Name : 		errors.asm
    5 00:03A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03A1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03A1 -  -  -  -  ;		Reviewed :	No
    8 00:03A1 -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:03A1 -  -  -  -  ;
   10 00:03A1 -  -  -  -  ; ***************************************************************************************
   11 00:03A1 -  -  -  -  ; ***************************************************************************************
   12 00:03A1 -  -  -  -  
   13 00:03A1 -  -  -  -  ; ***************************************************************************************
   14 00:03A1 -  -  -  -  ;
   15 00:03A1 -  -  -  -  ;								Error handler, message A 
   16 00:03A1 -  -  -  -  ;
   17 00:03A1 -  -  -  -  ; ***************************************************************************************
   18 00:03A1 -  -  -  -  
   19 00:03A1 -  -  -  -  ErrorHandler:
   20 00:03A1 F5 -  -  -  		push 	af 						; save error ID
   21 00:03A2 -  -  -  -  
   22 00:03A2 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:03A6 6F -  -  -  		ld 		l,a
   24 00:03A7 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:03A8 29 -  -  -  		add 	hl,hl 		
   26 00:03A9 11 11 0E 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:03AD 19 -  -  -  		add 	hl,de
   28 00:03AE ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:03B0 CD 94 0C 00 		call 	PrintStringAtHL
   30 00:03B4 -  -  -  -  		;
   31 00:03B4 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:03B5 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:03B6 28 2F -  -  		jr 		z,_EHExit
   34 00:03B8 -  -  -  -  		;
   35 00:03B8 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:03BD DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:03C0 B7 -  -  -  		or 		a
   38 00:03C1 28 24 -  -  		jr 		z,_EHExit
   39 00:03C3 -  -  -  -  
   40 00:03C3 21 EF 03 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:03C7 CD 94 0C 00 		call 	PrintStringAtHL 
   42 00:03CB -  -  -  -  		
   43 00:03CB D9 -  -  -  		exx								; HL'HL = line number
   44 00:03CC 21 00 00 00 		ld 		hl,$0000 		
   45 00:03D0 D9 -  -  -  		exx 
   46 00:03D1 DD 6E 01 -  		ld 		l,(ix+1)
   47 00:03D4 DD 66 02 -  		ld 		h,(ix+2)
   48 00:03D7 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:03D9 01 A0 00 00 		ld 		bc,ConvertBuffer
   50 00:03DD CD 0D 13 00 		call 	Int32ToString
   51 00:03E1 C5 -  -  -  		push 	bc
   52 00:03E2 E1 -  -  -  		pop 	hl
   53 00:03E3 CD 94 0C 00 		call 	PrintStringAtHL			; print error line number.
   54 00:03E7 -  -  -  -  _EHExit:		
   55 00:03E7 CD 5D 13 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:03EB C3 1A 00 00 		jp 		WarmStart
   57 00:03EF -  -  -  -  
   58 00:03EF -  -  -  -  _EHAtText:
   59 00:03EF 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:03F9 -  -  -  -  
   61 00:03F9 -  -  -  -  NotImplemented:
   62 00:03F9 3E 05 C3 A1 
              03 00 -  -  		ERR_DISABLED
   63 00:03FF -  -  -  -  TypeMismatch:
   64 00:03FF 3E 02 C3 A1 
              03 00 -  -  		ERR_BADTYPE
   65 00:0405 -  -  -  -  BadValue:
   66 00:0405 3E 03 C3 A1 
              03 00 -  -  		ERR_BADVALUE
   67 00:040B -  -  -  -  SyntaxError:
   68 00:040B 3E 17 C3 A1 
              03 00 -  -  		ERR_SYNTAX
   69 00:0411 -  -  -  -  						
   70 00:0411 -  -  -  -  ; ***************************************************************************************
   71 00:0411 -  -  -  -  ;
   72 00:0411 -  -  -  -  ;									Changes and Updates
   73 00:0411 -  -  -  -  ;
   74 00:0411 -  -  -  -  ; ***************************************************************************************
   75 00:0411 -  -  -  -  ;
   76 00:0411 -  -  -  -  ;		Date			Notes
   77 00:0411 -  -  -  -  ;		==== 			=====
   78 00:0411 -  -  -  -  ;
   79 00:0411 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:0411 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:0411 -  -  -  -  ; ***************************************************************************************
    2 00:0411 -  -  -  -  ; ***************************************************************************************
    3 00:0411 -  -  -  -  ;
    4 00:0411 -  -  -  -  ;		Name : 		basicmath.asm
    5 00:0411 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0411 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0411 -  -  -  -  ;		Reviewed :	No
    8 00:0411 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:0411 -  -  -  -  ;
   10 00:0411 -  -  -  -  ; ***************************************************************************************
   11 00:0411 -  -  -  -  ; ***************************************************************************************
   12 00:0411 -  -  -  -  
   13 00:0411 -  -  -  -  ; ***************************************************************************************
   14 00:0411 -  -  -  -  ;
   15 00:0411 -  -  -  -  ; 									Addition
   16 00:0411 -  -  -  -  ;
   17 00:0411 -  -  -  -  ; ***************************************************************************************
   18 00:0411 -  -  -  -  
   19 00:0411 -  -  -  -  ALUAdd: 		;; [+]
   20 00:0411 CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 8C 
              12 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:041F -  -  -  -  
   22 00:041F -  -  -  -  ; ***************************************************************************************
   23 00:041F -  -  -  -  ;
   24 00:041F -  -  -  -  ; 									Subtraction
   25 00:041F -  -  -  -  ;
   26 00:041F -  -  -  -  ; ***************************************************************************************
   27 00:041F -  -  -  -  
   28 00:041F -  -  -  -  ALUSubtract: 	;; [-]
   29 00:041F CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 94 
              12 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:042D -  -  -  -  
   31 00:042D -  -  -  -  ; ***************************************************************************************
   32 00:042D -  -  -  -  ;
   33 00:042D -  -  -  -  ; 									  Multiply
   34 00:042D -  -  -  -  ;
   35 00:042D -  -  -  -  ; ***************************************************************************************
   36 00:042D -  -  -  -  
   37 00:042D -  -  -  -  ALUMultiply: 	;; [*]
   38 00:042D CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 53 
              12 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:043B -  -  -  -  
   40 00:043B -  -  -  -  ; ***************************************************************************************
   41 00:043B -  -  -  -  ;
   42 00:043B -  -  -  -  ; 									  Divide
   43 00:043B -  -  -  -  ;
   44 00:043B -  -  -  -  ; ***************************************************************************************
   45 00:043B -  -  -  -  
   46 00:043B -  -  -  -  ALUDivide: 	;; [/]
   47 00:043B -  -  -  -  ALUDivide2:	;; [div]
   48 00:043B CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 53 
              11 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:0449 -  -  -  -  
   50 00:0449 -  -  -  -  ; ***************************************************************************************
   51 00:0449 -  -  -  -  ;
   52 00:0449 -  -  -  -  ; 									  Modulus
   53 00:0449 -  -  -  -  ;
   54 00:0449 -  -  -  -  ; ***************************************************************************************
   55 00:0449 -  -  -  -  
   56 00:0449 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:0449 CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 56 
              11 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:0457 -  -  -  -  
   59 00:0457 -  -  -  -  ; ***************************************************************************************
   60 00:0457 -  -  -  -  ;
   61 00:0457 -  -  -  -  ; 									  Logical
   62 00:0457 -  -  -  -  ;
   63 00:0457 -  -  -  -  ; ***************************************************************************************
   64 00:0457 -  -  -  -  
   65 00:0457 -  -  -  -  ALUAnd: 		;; [and]
   66 00:0457 CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 9E 
              12 00 -  -  		IntegerDispatch(Int32And)
   67 00:0465 -  -  -  -  
   68 00:0465 -  -  -  -  ALUOr: 			;; [or]
   69 00:0465 CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 AB 
              12 00 -  -  		IntegerDispatch(Int32Or)
   70 00:0473 -  -  -  -  
   71 00:0473 -  -  -  -  ALUXor: 		;; [eor]
   72 00:0473 CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 B8 
              12 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:0481 -  -  -  -  
   74 00:0481 -  -  -  -  ; ***************************************************************************************
   75 00:0481 -  -  -  -  ;
   76 00:0481 -  -  -  -  ;									Changes and Updates
   77 00:0481 -  -  -  -  ;
   78 00:0481 -  -  -  -  ; ***************************************************************************************
   79 00:0481 -  -  -  -  ;
   80 00:0481 -  -  -  -  ;		Date			Notes
   81 00:0481 -  -  -  -  ;		==== 			=====
   82 00:0481 -  -  -  -  ;
   83 00:0481 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 00:0481 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:0481 -  -  -  -  ; ***************************************************************************************
    2 00:0481 -  -  -  -  ; ***************************************************************************************
    3 00:0481 -  -  -  -  ;
    4 00:0481 -  -  -  -  ;		Name : 		binrefs.asm
    5 00:0481 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0481 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0481 -  -  -  -  ;		Reviewed :	No
    8 00:0481 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:0481 -  -  -  -  ;
   10 00:0481 -  -  -  -  ; ***************************************************************************************
   11 00:0481 -  -  -  -  ; ***************************************************************************************
   12 00:0481 -  -  -  -  
   13 00:0481 -  -  -  -  ; ***************************************************************************************
   14 00:0481 -  -  -  -  ;
   15 00:0481 -  -  -  -  ; 									<l> <op> <r>
   16 00:0481 -  -  -  -  ;
   17 00:0481 -  -  -  -  ; ***************************************************************************************
   18 00:0481 -  -  -  -  
   19 00:0481 -  -  -  -  ALULongReference:			;; [!]
   20 00:0481 CD 91 04 00 		call 	BRGetAddress 				; calculate address
   21 00:0485 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0487 CB F9 -  -  		set 	CIsReference,c
   23 00:0489 C9 -  -  -  		ret
   24 00:048A -  -  -  -  
   25 00:048A -  -  -  -  ALUByteReference: 			;; [?]
   26 00:048A CD 81 04 00 		call 	ALULongReference
   27 00:048E CB F1 -  -  		set 	CIsByteReference,c
   28 00:0490 C9 -  -  -  		ret
   29 00:0491 -  -  -  -  
   30 00:0491 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:0491 CD 2E 05 00 
              78 B1 C2 FF 
              03 00 C3 9F 
              04 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:049F -  -  -  -  _BRGAMain:		
   33 00:049F CD 8C 12 00 		call 	Int32Add 					; address in HL'HL
   34 00:04A3 CD 34 06 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:04A7 C9 -  -  -  		ret
   36 00:04A8 -  -  -  -  
   37 00:04A8 -  -  -  -  ; ***************************************************************************************
   38 00:04A8 -  -  -  -  ;
   39 00:04A8 -  -  -  -  ;									Changes and Updates
   40 00:04A8 -  -  -  -  ;
   41 00:04A8 -  -  -  -  ; ***************************************************************************************
   42 00:04A8 -  -  -  -  ;
   43 00:04A8 -  -  -  -  ;		Date			Notes
   44 00:04A8 -  -  -  -  ;		==== 			=====
   45 00:04A8 -  -  -  -  ;
   46 00:04A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:04A8 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:04A8 -  -  -  -  ; ***************************************************************************************
    2 00:04A8 -  -  -  -  ; ***************************************************************************************
    3 00:04A8 -  -  -  -  ;
    4 00:04A8 -  -  -  -  ;		Name : 		compare.asm
    5 00:04A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:04A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:04A8 -  -  -  -  ;		Reviewed :	No
    8 00:04A8 -  -  -  -  ;		Purpose :	Comparison code
    9 00:04A8 -  -  -  -  ;
   10 00:04A8 -  -  -  -  ; ***************************************************************************************
   11 00:04A8 -  -  -  -  ; ***************************************************************************************
   12 00:04A8 -  -  -  -  
   13 00:04A8 -  -  -  -  #macro compare_equals(n)
   14 00:04A8             		call 	CompareBaseCode
   15 00:04A8             		cp 		n
   16 00:04A8             		jr 		z,UnaryInt32True
   17 00:04A8             		jr 		UnaryInt32False
   18 00:04A8             #endmacro
   19 00:04A8 -  -  -  -  
   20 00:04A8 -  -  -  -  #macro compare_not_equals(n)
   21 00:04A8             		call 	CompareBaseCode
   22 00:04A8             		cp 		n
   23 00:04A8             		jr 		nz,UnaryInt32True
   24 00:04A8             		jr 		UnaryInt32False
   25 00:04A8             #endmacro
   26 00:04A8 -  -  -  -  
   27 00:04A8 -  -  -  -  ; ***************************************************************************************
   28 00:04A8 -  -  -  -  ;
   29 00:04A8 -  -  -  -  ; 								Return True/False
   30 00:04A8 -  -  -  -  ;
   31 00:04A8 -  -  -  -  ; ***************************************************************************************
   32 00:04A8 -  -  -  -  
   33 00:04A8 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:04A8 3E FF -  -  		ld 		a,255
   35 00:04AA 18 01 -  -  		jr 		_Int32Logical
   36 00:04AC -  -  -  -  UnaryInt32False: ;; [false]
   37 00:04AC AF -  -  -  		xor 	a
   38 00:04AD -  -  -  -  _Int32Logical:
   39 00:04AD 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:04AE 67 -  -  -  		ld 		h,a
   41 00:04AF D9 -  -  -  		exx
   42 00:04B0 6F -  -  -  		ld 		l,a
   43 00:04B1 67 -  -  -  		ld 		h,a
   44 00:04B2 D9 -  -  -  		exx
   45 00:04B3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:04B5 C9 -  -  -  		ret
   47 00:04B6 -  -  -  -  
   48 00:04B6 -  -  -  -  ; ***************************************************************************************
   49 00:04B6 -  -  -  -  ;
   50 00:04B6 -  -  -  -  ; 										> = < (compare == value)
   51 00:04B6 -  -  -  -  ;
   52 00:04B6 -  -  -  -  ; ***************************************************************************************
   53 00:04B6 -  -  -  -  
   54 00:04B6 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:04B6 CD F2 04 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:04C0 -  -  -  -  
   57 00:04C0 -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:04C0 CD F2 04 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:04CA -  -  -  -  
   60 00:04CA -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:04CA CD F2 04 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:04D4 -  -  -  -  
   63 00:04D4 -  -  -  -  ; ***************************************************************************************
   64 00:04D4 -  -  -  -  ;
   65 00:04D4 -  -  -  -  ; 										> = < (compare <> value)
   66 00:04D4 -  -  -  -  ;
   67 00:04D4 -  -  -  -  ; ***************************************************************************************
   68 00:04D4 -  -  -  -  
   69 00:04D4 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:04D4 CD F2 04 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:04DE -  -  -  -  
   72 00:04DE -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:04DE CD F2 04 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:04E8 -  -  -  -  
   75 00:04E8 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:04E8 CD F2 04 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:04F2 -  -  -  -  
   78 00:04F2 -  -  -  -  ; ***************************************************************************************
   79 00:04F2 -  -  -  -  ;
   80 00:04F2 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:04F2 -  -  -  -  ;
   82 00:04F2 -  -  -  -  ; ***************************************************************************************
   83 00:04F2 -  -  -  -  
   84 00:04F2 -  -  -  -  CompareBaseCode:
   85 00:04F2 CD 2E 05 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:04F6 -  -  -  -  
   87 00:04F6 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:04F7 A1 -  -  -  		and 	c
   89 00:04F8 CB 47 -  -  		bit 	CIsString,a 
   90 00:04FA C2 0C 05 00 		jp 		nz,StringCompare
   91 00:04FE -  -  -  -  
   92 00:04FE 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:04FF B1 -  -  -  		or 		c
   94 00:0500 CB 47 -  -  		bit 	CIsString,a 
   95 00:0502 CA CC 12 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0506 -  -  -  -  
   97 00:0506 3E 02 C3 A1 
              03 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:050C -  -  -  -  ;
   99 00:050C -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:050C -  -  -  -  ;
  101 00:050C -  -  -  -  StringCompare:
  102 00:050C 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:050D BE -  -  -  		cp 		(hl)
  104 00:050E 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:0510 20 08 -  -  		jr 		nz,_SCLess
  106 00:0512 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:0513 23 -  -  -  		inc 	hl
  108 00:0514 FE 20 -  -  		cp 		' '
  109 00:0516 30 F4 -  -  		jr 		nc,StringCompare
  110 00:0518 AF -  -  -  		xor 	a 							; return 0.
  111 00:0519 C9 -  -  -  		ret
  112 00:051A -  -  -  -  
  113 00:051A -  -  -  -  _SCLess:
  114 00:051A 3E FF -  -  		ld 		a,$FF
  115 00:051C C9 -  -  -  		ret
  116 00:051D -  -  -  -  _SCGreater:
  117 00:051D 3E 01 -  -  		ld 		a,1
  118 00:051F C9 -  -  -  		ret
  119 00:0520 -  -  -  -  
  120 00:0520 3E 18 C3 A1 
              03 00 -  -  		ERR_TODO()
  121 00:0526 -  -  -  -  
  122 00:0526 -  -  -  -  ; ***************************************************************************************
  123 00:0526 -  -  -  -  ;
  124 00:0526 -  -  -  -  ;									Changes and Updates
  125 00:0526 -  -  -  -  ;
  126 00:0526 -  -  -  -  ; ***************************************************************************************
  127 00:0526 -  -  -  -  ;
  128 00:0526 -  -  -  -  ;		Date			Notes
  129 00:0526 -  -  -  -  ;		==== 			=====
  130 00:0526 -  -  -  -  ;
  131 00:0526 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:0526 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:0526 -  -  -  -  ; ***************************************************************************************
    2 00:0526 -  -  -  -  ; ***************************************************************************************
    3 00:0526 -  -  -  -  ;
    4 00:0526 -  -  -  -  ;		Name : 		utility.asm
    5 00:0526 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0526 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0526 -  -  -  -  ;		Reviewed :	No
    8 00:0526 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:0526 -  -  -  -  ;
   10 00:0526 -  -  -  -  ; ***************************************************************************************
   11 00:0526 -  -  -  -  ; ***************************************************************************************
   12 00:0526 -  -  -  -  
   13 00:0526 -  -  -  -  ; ***************************************************************************************
   14 00:0526 -  -  -  -  ;
   15 00:0526 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:0526 -  -  -  -  ;
   17 00:0526 -  -  -  -  ; ***************************************************************************************
   18 00:0526 -  -  -  -  
   19 00:0526 -  -  -  -  SwapHLDE:
   20 00:0526 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:0527 D9 -  -  -  			exx
   22 00:0528 EB -  -  -  			ex 		de,hl
   23 00:0529 D9 -  -  -  			exx
   24 00:052A 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:052B 41 -  -  -  			ld 		b,c
   26 00:052C 4F -  -  -  			ld 		c,a
   27 00:052D C9 -  -  -  			ret
   28 00:052E -  -  -  -  
   29 00:052E -  -  -  -  ; ***************************************************************************************
   30 00:052E -  -  -  -  ;
   31 00:052E -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:052E -  -  -  -  ;
   33 00:052E -  -  -  -  ; ***************************************************************************************
   34 00:052E -  -  -  -  
   35 00:052E -  -  -  -  DereferenceBoth:
   36 00:052E CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:0530 C4 07 06 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:0534 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:0536 C8 -  -  -  			ret 	z
   40 00:0537 CD 26 05 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:053B CD 07 06 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:053F CD 26 05 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:0543 C9 -  -  -  			ret
   44 00:0544 -  -  -  -  
   45 00:0544 -  -  -  -  ; ***************************************************************************************
   46 00:0544 -  -  -  -  ;
   47 00:0544 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:0544 -  -  -  -  ;
   49 00:0544 -  -  -  -  ; ***************************************************************************************
   50 00:0544 -  -  -  -  
   51 00:0544 -  -  -  -  NegateHLHL:	
   52 00:0544 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:0546 C2 FF 03 00 			jp 		nz,TypeMismatch
   54 00:054A CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:054C C4 07 06 00 			call 	nz,Dereference 			; if required.
   56 00:0550 CD F6 12 00 			call 	Int32Negate
   57 00:0554 C9 -  -  -  			ret
Listing for file "_build.asm"
   32 00:0555 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:0555 -  -  -  -  ; ***************************************************************************************
    2 00:0555 -  -  -  -  ; ***************************************************************************************
    3 00:0555 -  -  -  -  ;
    4 00:0555 -  -  -  -  ;		Name : 		expression.asm
    5 00:0555 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0555 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0555 -  -  -  -  ;		Reviewed :	None
    8 00:0555 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:0555 -  -  -  -  ;
   10 00:0555 -  -  -  -  ; ***************************************************************************************
   11 00:0555 -  -  -  -  ; ***************************************************************************************
   12 00:0555 -  -  -  -  
   13 00:0555 -  -  -  -  ; ***************************************************************************************
   14 00:0555 -  -  -  -  ;
   15 00:0555 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:0555 -  -  -  -  ;
   17 00:0555 -  -  -  -  ; ***************************************************************************************
   18 00:0555 -  -  -  -  
   19 00:0555 -  -  -  -  EvaluateAtPrecedence0:
   20 00:0555 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:0556 -  -  -  -  EvaluateAtPrecedence:
   22 00:0556 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:0557 -  -  -  -  		;
   24 00:0557 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:0557 -  -  -  -  		;
   26 00:0557 CD 63 06 00 		call 	EvaluateTerm 				; get term
   27 00:055B -  -  -  -  		;
   28 00:055B -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:055B -  -  -  -  		;
   30 00:055B D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:055C -  -  -  -  _EAPLoop:
   32 00:055C DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:055F FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:0561 D8 -  -  -  		ret 	c
   35 00:0562 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:0564 D0 -  -  -  		ret 	nc
   37 00:0565 -  -  -  -  		;
   38 00:0565 -  -  -  -  		; 		Get the precedence.
   39 00:0565 -  -  -  -  		;
   40 00:0565 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:0566 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:0568 21 00 0E 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:056C B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:056D 6F -  -  -  		ld 		l,a
   45 00:056E 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:056F E1 -  -  -  		pop 	hl 							; restore HL
   47 00:0570 -  -  -  -  		;
   48 00:0570 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:0570 -  -  -  -  		;
   50 00:0570 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:0571 BB -  -  -  		cp 		e
   52 00:0572 D0 -  -  -  		ret 	nc
   53 00:0573 -  -  -  -  
   54 00:0573 -  -  -  -  		;
   55 00:0573 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:0573 -  -  -  -  		;
   57 00:0573 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0574 -  -  -  -  		;
   59 00:0574 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0577 F5 -  -  -  		push 	af
   61 00:0578 -  -  -  -  		;
   62 00:0578 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0579 D9 -  -  -  		exx 								; save HL'
   64 00:057A E5 -  -  -  		push 	hl
   65 00:057B D9 -  -  -  		exx 								
   66 00:057C E5 -  -  -  		push 	hl 							; save HL
   67 00:057D -  -  -  -  		;
   68 00:057D DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:057F -  -  -  -  		;
   70 00:057F -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:057F -  -  -  -  		;
   72 00:057F 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:0580 CD 56 05 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0584 -  -  -  -  		;
   75 00:0584 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0584 -  -  -  -  		;
   77 00:0584 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0585 -  -  -  -  
   79 00:0585 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0586 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0587 D9 -  -  -  		exx
   82 00:0588 EB -  -  -  		ex 		de,hl
   83 00:0589 E1 -  -  -  		pop 	hl
   84 00:058A D9 -  -  -  		exx
   85 00:058B C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:058C 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:058D -  -  -  -  		;
   88 00:058D -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:058D -  -  -  -  		; 		is in B (type) DE'DE
   90 00:058D -  -  -  -  		;
   91 00:058D F1 -  -  -  		pop 	af 							; get operator in A
   92 00:058E -  -  -  -  		;
   93 00:058E -  -  -  -  		; 		Call the binary operator in A.
   94 00:058E -  -  -  -  		;
   95 00:058E D5 -  -  -  		push 	de
   96 00:058F E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:0590 E6 7F 21 00 
              00 00 6F 29 
              29 11 16 10 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:05A5 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:05A6 D1 -  -  -  		pop 	de 							; restore DE
  100 00:05A7 CD 64 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:05AB -  -  -  -  		;
  102 00:05AB D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:05AC -  -  -  -  		;
  104 00:05AC 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:05AE -  -  -  -  
  106 00:05AE -  -  -  -  ; ***************************************************************************************
  107 00:05AE -  -  -  -  ;
  108 00:05AE -  -  -  -  ;									Changes and Updates
  109 00:05AE -  -  -  -  ;
  110 00:05AE -  -  -  -  ; ***************************************************************************************
  111 00:05AE -  -  -  -  ;
  112 00:05AE -  -  -  -  ;		Date			Notes
  113 00:05AE -  -  -  -  ;		==== 			=====
  114 00:05AE -  -  -  -  ;
  115 00:05AE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:05AE -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:05AE -  -  -  -  ; ***************************************************************************************
    2 00:05AE -  -  -  -  ; ***************************************************************************************
    3 00:05AE -  -  -  -  ;
    4 00:05AE -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:05AE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05AE -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05AE -  -  -  -  ;		Reviewed :	No
    8 00:05AE -  -  -  -  ;		Purpose :	Expression support functions
    9 00:05AE -  -  -  -  ;
   10 00:05AE -  -  -  -  ; ***************************************************************************************
   11 00:05AE -  -  -  -  ; ***************************************************************************************
   12 00:05AE -  -  -  -  
   13 00:05AE -  -  -  -  ; ***************************************************************************************
   14 00:05AE -  -  -  -  ;
   15 00:05AE -  -  -  -  ; 								Evaluate an integer term
   16 00:05AE -  -  -  -  ;
   17 00:05AE -  -  -  -  ; ***************************************************************************************
   18 00:05AE -  -  -  -  
   19 00:05AE -  -  -  -  EvaluateIntegerTerm:
   20 00:05AE CD 63 06 00 		call 	EvaluateTerm
   21 00:05B2 CD 07 06 00 		call 	DeReference
   22 00:05B6 CB 41 -  -  		bit 	CIsString,c
   23 00:05B8 C8 -  -  -  		ret 	z
   24 00:05B9 C3 FF 03 00 		jp 		TypeMismatch
   25 00:05BD -  -  -  -  
   26 00:05BD -  -  -  -  ; ***************************************************************************************
   27 00:05BD -  -  -  -  ;
   28 00:05BD -  -  -  -  ; 								Evaluate a string term
   29 00:05BD -  -  -  -  ;
   30 00:05BD -  -  -  -  ; ***************************************************************************************
   31 00:05BD -  -  -  -  
   32 00:05BD -  -  -  -  EvaluateStringTerm:
   33 00:05BD CD 63 06 00 		call 	EvaluateTerm
   34 00:05C1 CD 07 06 00 		call 	DeReference
   35 00:05C5 CB 41 -  -  		bit 	CIsString,c
   36 00:05C7 C0 -  -  -  		ret 	nz
   37 00:05C8 C3 FF 03 00 		jp 		TypeMismatch
   38 00:05CC -  -  -  -  
   39 00:05CC -  -  -  -  ; ***************************************************************************************
   40 00:05CC -  -  -  -  ;
   41 00:05CC -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:05CC -  -  -  -  ;
   43 00:05CC -  -  -  -  ; ***************************************************************************************
   44 00:05CC -  -  -  -  
   45 00:05CC -  -  -  -  EvaluateValue:
   46 00:05CC CD 55 05 00 		call 	EvaluateAtPrecedence0
   47 00:05D0 C3 07 06 00 		jp 		Dereference
   48 00:05D4 -  -  -  -  
   49 00:05D4 -  -  -  -  ; ***************************************************************************************
   50 00:05D4 -  -  -  -  ;
   51 00:05D4 -  -  -  -  ; 									Evaluate a number
   52 00:05D4 -  -  -  -  ;
   53 00:05D4 -  -  -  -  ; ***************************************************************************************
   54 00:05D4 -  -  -  -  
   55 00:05D4 -  -  -  -  EvaluateInteger:
   56 00:05D4 CD CC 05 00 		call 	EvaluateValue
   57 00:05D8 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:05DA C8 -  -  -  		ret 	z
   59 00:05DB C3 FF 03 00 		jp 		TypeMismatch
   60 00:05DF -  -  -  -  
   61 00:05DF -  -  -  -  ; ***************************************************************************************
   62 00:05DF -  -  -  -  ;
   63 00:05DF -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:05DF -  -  -  -  ;
   65 00:05DF -  -  -  -  ; ***************************************************************************************
   66 00:05DF -  -  -  -  
   67 00:05DF -  -  -  -  Evaluate8BitInteger:
   68 00:05DF CD D4 05 00 		call 	EvaluateInteger
   69 00:05E3 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:05E4 7C -  -  -  		ld 		a,h
   71 00:05E5 B5 -  -  -  		or 		l
   72 00:05E6 D9 -  -  -  		exx 	
   73 00:05E7 B4 -  -  -  		or 		h
   74 00:05E8 C2 05 04 00 		jp 		nz,BadValue
   75 00:05EC 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:05ED C9 -  -  -  		ret
   77 00:05EE -  -  -  -  		
   78 00:05EE -  -  -  -  ; ***************************************************************************************
   79 00:05EE -  -  -  -  ;
   80 00:05EE -  -  -  -  ; 									Evaluate a string
   81 00:05EE -  -  -  -  ;
   82 00:05EE -  -  -  -  ; ***************************************************************************************
   83 00:05EE -  -  -  -  
   84 00:05EE -  -  -  -  EvaluateString:
   85 00:05EE CD CC 05 00 		call 	EvaluateValue
   86 00:05F2 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:05F4 CA FF 03 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:05F8 C9 -  -  -  		ret
   89 00:05F9 -  -  -  -  
   90 00:05F9 -  -  -  -  ; ***************************************************************************************
   91 00:05F9 -  -  -  -  ;
   92 00:05F9 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:05F9 -  -  -  -  ;
   94 00:05F9 -  -  -  -  ; ***************************************************************************************
   95 00:05F9 -  -  -  -  
   96 00:05F9 -  -  -  -  Return8BitConstant:
   97 00:05F9 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:05FD 6F -  -  -  		ld 		l,a
   99 00:05FE -  -  -  -  Return16BitConstant:
  100 00:05FE D9 -  -  -  		exx 								; clear HL'
  101 00:05FF 21 00 00 00 		ld 		hl,0
  102 00:0603 D9 -  -  -  		exx
  103 00:0604 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0606 C9 -  -  -  		ret
  105 00:0607 -  -  -  -  
  106 00:0607 -  -  -  -  ; ***************************************************************************************
  107 00:0607 -  -  -  -  ;
  108 00:0607 -  -  -  -  ;									Changes and Updates
  109 00:0607 -  -  -  -  ;
  110 00:0607 -  -  -  -  ; ***************************************************************************************
  111 00:0607 -  -  -  -  ;
  112 00:0607 -  -  -  -  ;		Date			Notes
  113 00:0607 -  -  -  -  ;		==== 			=====
  114 00:0607 -  -  -  -  ;
  115 00:0607 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 00:0607 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0607 -  -  -  -  ; ***************************************************************************************
    2 00:0607 -  -  -  -  ; ***************************************************************************************
    3 00:0607 -  -  -  -  ;
    4 00:0607 -  -  -  -  ;		Name : 		reference.asm
    5 00:0607 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0607 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0607 -  -  -  -  ;		Reviewed :	No
    8 00:0607 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0607 -  -  -  -  ;
   10 00:0607 -  -  -  -  ; ***************************************************************************************
   11 00:0607 -  -  -  -  ; ***************************************************************************************
   12 00:0607 -  -  -  -  
   13 00:0607 -  -  -  -  ; ***************************************************************************************
   14 00:0607 -  -  -  -  ;
   15 00:0607 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0607 -  -  -  -  ;
   17 00:0607 -  -  -  -  ; ***************************************************************************************
   18 00:0607 -  -  -  -  
   19 00:0607 -  -  -  -  Dereference:
   20 00:0607 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:0609 C8 -  -  -  		ret 	z
   22 00:060A -  -  -  -  
   23 00:060A CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:060C -  -  -  -  		
   25 00:060C CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:060E 20 1E -  -  		jr 		nz,_DRInternal
   27 00:0610 -  -  -  -  
   28 00:0610 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:0612 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:0614 -  -  -  -  
   31 00:0614 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:0615 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:0617 D9 -  -  -  		exx
   34 00:0618 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:0619 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:061A 23 -  -  -  		inc  	hl
   37 00:061B ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:061D D9 -  -  -  		exx 								; fix back
   39 00:061E C9 -  -  -  		ret
   40 00:061F -  -  -  -  
   41 00:061F -  -  -  -  _DeRefByte:		
   42 00:061F 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:0620 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:0624 6F -  -  -  		ld	 	l,a
   45 00:0625 D9 -  -  -  		exx
   46 00:0626 21 00 00 00 		ld 		hl,$0000
   47 00:062A D9 -  -  -  		exx
   48 00:062B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:062D C9 -  -  -  		ret
   50 00:062E -  -  -  -  
   51 00:062E -  -  -  -  _DRInternal:
   52 00:062E 3E 05 C3 A1 
              03 00 -  -  		ERR_DISABLED
   53 00:0634 -  -  -  -  
   54 00:0634 -  -  -  -  ; ***************************************************************************************
   55 00:0634 -  -  -  -  ;
   56 00:0634 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:0634 -  -  -  -  ;
   58 00:0634 -  -  -  -  ; ***************************************************************************************
   59 00:0634 -  -  -  -  
   60 00:0634 -  -  -  -  DRConvertHLHLToAddress:
   61 00:0634 -  -  -  -  		#ifdef EZ80
   62 00:0634 22 6A 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:0638 D9 -  -  -  		exx
   64 00:0639 22 6C 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:063D 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:0641 D9 -  -  -  		exx
   67 00:0642 2A 6A 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:0646 -  -  -  -  		#endif
   69 00:0646 C9 -  -  -  		ret
   70 00:0647 -  -  -  -  
   71 00:0647 -  -  -  -  ; ***************************************************************************************
   72 00:0647 -  -  -  -  ;
   73 00:0647 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:0647 -  -  -  -  ;
   75 00:0647 -  -  -  -  ; ***************************************************************************************
   76 00:0647 -  -  -  -  
   77 00:0647 -  -  -  -  DRConvertAddressToHLHL:
   78 00:0647 -  -  -  -  		#ifdef EZ80
   79 00:0647 22 6A 00 00 		ld 		(AConvert),hl
   80 00:064B 21 00 00 00 		ld 		hl,$0000
   81 00:064F 22 6D 00 00 		ld 		(AConvert+3),hl
   82 00:0653 D9 -  -  -  		exx
   83 00:0654 2A 6C 00 00 		ld 		hl,(AConvert+2)
   84 00:0658 D9 -  -  -  		exx
   85 00:0659 AF -  -  -  		xor 	a
   86 00:065A 32 6C 00 00 		ld 		(AConvert+2),a
   87 00:065E 2A 6A 00 00 		ld 		hl,(AConvert)
   88 00:0662 -  -  -  -  		#endif
   89 00:0662 C9 -  -  -  		ret
   90 00:0663 -  -  -  -  
   91 00:0663 -  -  -  -  ; ***************************************************************************************
   92 00:0663 -  -  -  -  ;
   93 00:0663 -  -  -  -  ;									Changes and Updates
   94 00:0663 -  -  -  -  ;
   95 00:0663 -  -  -  -  ; ***************************************************************************************
   96 00:0663 -  -  -  -  ;
   97 00:0663 -  -  -  -  ;		Date			Notes
   98 00:0663 -  -  -  -  ;		==== 			=====
   99 00:0663 -  -  -  -  ;
  100 00:0663 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:0663 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:0663 -  -  -  -  ; ***************************************************************************************
    2 00:0663 -  -  -  -  ; ***************************************************************************************
    3 00:0663 -  -  -  -  ;
    4 00:0663 -  -  -  -  ;		Name : 		term.asm
    5 00:0663 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0663 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0663 -  -  -  -  ;		Reviewed :	No
    8 00:0663 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:0663 -  -  -  -  ;
   10 00:0663 -  -  -  -  ; ***************************************************************************************
   11 00:0663 -  -  -  -  ; ***************************************************************************************
   12 00:0663 -  -  -  -  
   13 00:0663 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:0663             		add_hlhl_16
   15 00:0663             		exx
   16 00:0663             		adc_hlhl_16
   17 00:0663             		exx
   18 00:0663             #endmacro
   19 00:0663 -  -  -  -  
   20 00:0663 -  -  -  -  ; ***************************************************************************************
   21 00:0663 -  -  -  -  ;
   22 00:0663 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:0663 -  -  -  -  ;
   24 00:0663 -  -  -  -  ; ***************************************************************************************
   25 00:0663 -  -  -  -  ;
   26 00:0663 -  -  -  -  ; 		Terms can be:
   27 00:0663 -  -  -  -  ;
   28 00:0663 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:0663 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:0663 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:0663 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:0663 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:0663 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:0663 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:0663 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:0663 -  -  -  -  ; 														reference of some sort.
   37 00:0663 -  -  -  -  ;
   38 00:0663 -  -  -  -  ; ***************************************************************************************
   39 00:0663 -  -  -  -  
   40 00:0663 -  -  -  -  EvaluateTerm:		
   41 00:0663 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:0665 D9 -  -  -  		exx
   43 00:0666 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:066A D9 -  -  -  		exx
   45 00:066B 21 00 00 00 		ld 		hl,$0000		
   46 00:066F -  -  -  -  		;
   47 00:066F DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:0672 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0674 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0676 DA 2E 07 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:067A CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:067C C2 D2 06 00 		jp 		nz,_ETFoundKeyword 
   53 00:0680 -  -  -  -  		;
   54 00:0680 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:0680 -  -  -  -  		;
   56 00:0680 -  -  -  -  _ETIntegerConstant:
   57 00:0680 -  -  -  -  		;
   58 00:0680 -  -  -  -  _ETIntegerLoop:		
   59 00:0680 DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0683 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0685 B5 -  -  -  		or 		l 							; or into L
   62 00:0686 6F -  -  -  		ld 		l,a
   63 00:0687 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0689 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:068C C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:068E FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:0690 D8 -  -  -  		ret 	c
   68 00:0691 -  -  -  -  
   69 00:0691 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0698 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:069F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:06A6 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:06AD 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:06B4 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:06BB -  -  -  -  
   76 00:06BB 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:06BD -  -  -  -  		;
   78 00:06BD -  -  -  -  		; 		Found the $3F string marker.
   79 00:06BD -  -  -  -  		;
   80 00:06BD -  -  -  -  _ETStringMarker:		
   81 00:06BD DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:06BF DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:06C1 DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:06C3 E1 -  -  -  		pop 	hl
   85 00:06C4 11 00 00 00 		ld 		de,$0000
   86 00:06C8 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:06CB DD 19 -  -  		add 	ix,de
   88 00:06CD DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:06CF 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:06D1 C9 -  -  -  		ret
   91 00:06D2 -  -  -  -  		;
   92 00:06D2 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:06D2 -  -  -  -  		;
   94 00:06D2 -  -  -  -  _ETFoundKeyword:
   95 00:06D2 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:06D4 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:06D6 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:06D8 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:06DA 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:06DC -  -  -  -  		;
  101 00:06DC -  -  -  -  		;		Unary group 0
  102 00:06DC -  -  -  -  		;
  103 00:06DC E6 7F 21 00 
              00 00 6F 29 
              29 11 16 10 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:06F1 C3 64 00 00 		jp 		JumpCode 					; and go there.
  105 00:06F5 -  -  -  -  
  106 00:06F5 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:06F5 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:06F7 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:06F9 -  -  -  -  		;
  110 00:06F9 -  -  -  -  		; 		- term
  111 00:06F9 -  -  -  -  		;
  112 00:06F9 CD AE 05 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:06FD CD 44 05 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:0701 C9 -  -  -  		ret
  115 00:0702 -  -  -  -  		;
  116 00:0702 -  -  -  -  		;		! ? indirection check
  117 00:0702 -  -  -  -  		;
  118 00:0702 -  -  -  -  _ETCheckIndirection:	
  119 00:0702 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:0704 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0706 FE 83 -  -  		cp 		KWD_PLING
  122 00:0708 C2 0B 04 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:070C -  -  -  -  		;
  124 00:070C -  -  -  -  		; 		! ? indirection
  125 00:070C -  -  -  -  		;
  126 00:070C -  -  -  -  _ETIndirection:
  127 00:070C F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:070D CD 63 06 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:0711 CD 07 06 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:0715 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:0717 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:0719 CD 34 06 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:071D F1 -  -  -  		pop 	af 							; get type back
  134 00:071E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:0720 CB F9 -  -  		set 	CIsReference,c
  136 00:0722 FE 83 -  -  		cp 		KWD_PLING
  137 00:0724 C8 -  -  -  		ret 	z
  138 00:0725 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:0727 C9 -  -  -  		ret
  140 00:0728 -  -  -  -  _ETStringIndirect:
  141 00:0728 3E 02 C3 A1 
              03 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:072E -  -  -  -  		;
  143 00:072E -  -  -  -  		; 		Found an identifier.
  144 00:072E -  -  -  -  		;
  145 00:072E -  -  -  -  _ETVariable:
  146 00:072E CD E2 0C 00 		call 	FindVariable 				; find the variable.
  147 00:0732 D0 -  -  -  		ret 	nc 							; return if found.
  148 00:0733 3E 19 C3 A1 
              03 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:0739 -  -  -  -  		
  150 00:0739 -  -  -  -  ; ***************************************************************************************
  151 00:0739 -  -  -  -  ;
  152 00:0739 -  -  -  -  ;									Changes and Updates
  153 00:0739 -  -  -  -  ;
  154 00:0739 -  -  -  -  ; ***************************************************************************************
  155 00:0739 -  -  -  -  ;
  156 00:0739 -  -  -  -  ;		Date			Notes
  157 00:0739 -  -  -  -  ;		==== 			=====
  158 00:0739 -  -  -  -  ;
  159 00:0739 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0739 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:0739 -  -  -  -  ; ***************************************************************************************
    2 00:0739 -  -  -  -  ; ***************************************************************************************
    3 00:0739 -  -  -  -  ;
    4 00:0739 -  -  -  -  ;		Name : 		abs.asm
    5 00:0739 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0739 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0739 -  -  -  -  ;		Reviewed :	No
    8 00:0739 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:0739 -  -  -  -  ;
   10 00:0739 -  -  -  -  ; ***************************************************************************************
   11 00:0739 -  -  -  -  ; ***************************************************************************************
   12 00:0739 -  -  -  -  
   13 00:0739 -  -  -  -  ; ***************************************************************************************
   14 00:0739 -  -  -  -  ;
   15 00:0739 -  -  -  -  ;								abs( unary function
   16 00:0739 -  -  -  -  ;
   17 00:0739 -  -  -  -  ; ***************************************************************************************
   18 00:0739 -  -  -  -  
   19 00:0739 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:0739 CD AE 05 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:073D D9 -  -  -  		exx 								; test MSB
   22 00:073E CB 7C -  -  		bit 	7,h
   23 00:0740 D9 -  -  -  		exx
   24 00:0741 C4 44 05 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:0745 C9 -  -  -  		ret
   26 00:0746 -  -  -  -  
   27 00:0746 -  -  -  -  ; ***************************************************************************************
   28 00:0746 -  -  -  -  ;
   29 00:0746 -  -  -  -  ;									Changes and Updates
   30 00:0746 -  -  -  -  ;
   31 00:0746 -  -  -  -  ; ***************************************************************************************
   32 00:0746 -  -  -  -  ;
   33 00:0746 -  -  -  -  ;		Date			Notes
   34 00:0746 -  -  -  -  ;		==== 			=====
   35 00:0746 -  -  -  -  ;
   36 00:0746 -  -  -  -  ; ***************************************************************************************
   37 00:0746 -  -  -  -  		
Listing for file "_build.asm"
   37 00:0746 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:0746 -  -  -  -  ; ***************************************************************************************
    2 00:0746 -  -  -  -  ; ***************************************************************************************
    3 00:0746 -  -  -  -  ;
    4 00:0746 -  -  -  -  ;		Name : 		asc.asm
    5 00:0746 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0746 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0746 -  -  -  -  ;		Reviewed :	No
    8 00:0746 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:0746 -  -  -  -  ;
   10 00:0746 -  -  -  -  ; ***************************************************************************************
   11 00:0746 -  -  -  -  ; ***************************************************************************************
   12 00:0746 -  -  -  -  
   13 00:0746 -  -  -  -  ; ***************************************************************************************
   14 00:0746 -  -  -  -  ;
   15 00:0746 -  -  -  -  ;								Asc unary function
   16 00:0746 -  -  -  -  ;
   17 00:0746 -  -  -  -  ; ***************************************************************************************
   18 00:0746 -  -  -  -  
   19 00:0746 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:0746 CD BD 05 00 		call	EvaluateStringTerm			; Get string
   21 00:074A 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:074B C3 F9 05 00 		jp 		Return8BitConstant
   23 00:074F -  -  -  -  
   24 00:074F -  -  -  -  ; ***************************************************************************************
   25 00:074F -  -  -  -  ;
   26 00:074F -  -  -  -  ;									Changes and Updates
   27 00:074F -  -  -  -  ;
   28 00:074F -  -  -  -  ; ***************************************************************************************
   29 00:074F -  -  -  -  ;
   30 00:074F -  -  -  -  ;		Date			Notes
   31 00:074F -  -  -  -  ;		==== 			=====
   32 00:074F -  -  -  -  ;
   33 00:074F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:074F -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:074F -  -  -  -  ; ***************************************************************************************
    2 00:074F -  -  -  -  ; ***************************************************************************************
    3 00:074F -  -  -  -  ;
    4 00:074F -  -  -  -  ;		Name : 		chr.asm
    5 00:074F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:074F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:074F -  -  -  -  ;		Reviewed :	No
    8 00:074F -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:074F -  -  -  -  ;
   10 00:074F -  -  -  -  ; ***************************************************************************************
   11 00:074F -  -  -  -  ; ***************************************************************************************
   12 00:074F -  -  -  -  
   13 00:074F -  -  -  -  ; ***************************************************************************************
   14 00:074F -  -  -  -  ;
   15 00:074F -  -  -  -  ;								Chr$() unary function
   16 00:074F -  -  -  -  ;
   17 00:074F -  -  -  -  ; ***************************************************************************************
   18 00:074F -  -  -  -  
   19 00:074F -  -  -  -  Unary_Chr:	;; [chr]
   20 00:074F CD 79 03 00 		call 	CheckDollar
   21 00:0753 CD AE 05 00 		call 	EvaluateIntegerTerm
   22 00:0757 7D -  -  -  		ld 		a,l 						; get character
   23 00:0758 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:075A 21 9F 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:075E 36 0D -  -  		ld 		(hl),13
   26 00:0760 2B -  -  -  		dec 	hl
   27 00:0761 77 -  -  -  		ld 		(hl),a
   28 00:0762 C9 -  -  -  		ret
   29 00:0763 -  -  -  -  
   30 00:0763 -  -  -  -  ; ***************************************************************************************
   31 00:0763 -  -  -  -  ;
   32 00:0763 -  -  -  -  ;									Changes and Updates
   33 00:0763 -  -  -  -  ;
   34 00:0763 -  -  -  -  ; ***************************************************************************************
   35 00:0763 -  -  -  -  ;
   36 00:0763 -  -  -  -  ;		Date			Notes
   37 00:0763 -  -  -  -  ;		==== 			=====
   38 00:0763 -  -  -  -  ;
   39 00:0763 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 00:0763 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:0763 -  -  -  -  ; ***************************************************************************************
    2 00:0763 -  -  -  -  ; ***************************************************************************************
    3 00:0763 -  -  -  -  ;
    4 00:0763 -  -  -  -  ;		Name : 		len.asm
    5 00:0763 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0763 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0763 -  -  -  -  ;		Reviewed :	None
    8 00:0763 -  -  -  -  ;		Purpose :	String Length
    9 00:0763 -  -  -  -  ;
   10 00:0763 -  -  -  -  ; ***************************************************************************************
   11 00:0763 -  -  -  -  ; ***************************************************************************************
   12 00:0763 -  -  -  -  
   13 00:0763 -  -  -  -  ; ***************************************************************************************
   14 00:0763 -  -  -  -  ;
   15 00:0763 -  -  -  -  ;								Len unary function
   16 00:0763 -  -  -  -  ;
   17 00:0763 -  -  -  -  ; ***************************************************************************************
   18 00:0763 -  -  -  -  
   19 00:0763 -  -  -  -  Unary_Len:	;; [len]
   20 00:0763 CD BD 05 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:0767 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:0768 CD AC 04 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:076C -  -  -  -  _ULCount:
   24 00:076C 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:076D FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:076F D8 -  -  -  		ret 	c
   27 00:0770 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:0771 13 -  -  -  		inc 	de
   29 00:0772 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:0774 -  -  -  -  
   31 00:0774 -  -  -  -  ; ***************************************************************************************
   32 00:0774 -  -  -  -  ;
   33 00:0774 -  -  -  -  ;									Changes and Updates
   34 00:0774 -  -  -  -  ;
   35 00:0774 -  -  -  -  ; ***************************************************************************************
   36 00:0774 -  -  -  -  ;
   37 00:0774 -  -  -  -  ;		Date			Notes
   38 00:0774 -  -  -  -  ;		==== 			=====
   39 00:0774 -  -  -  -  ;
   40 00:0774 -  -  -  -  ; ***************************************************************************************
   41 00:0774 -  -  -  -  		
Listing for file "_build.asm"
   40 00:0774 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:0774 -  -  -  -  ; ***************************************************************************************
    2 00:0774 -  -  -  -  ; ***************************************************************************************
    3 00:0774 -  -  -  -  ;
    4 00:0774 -  -  -  -  ;		Name : 		makestring.asm
    5 00:0774 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0774 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0774 -  -  -  -  ;		Reviewed :	No
    8 00:0774 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:0774 -  -  -  -  ;
   10 00:0774 -  -  -  -  ; ***************************************************************************************
   11 00:0774 -  -  -  -  ; ***************************************************************************************
   12 00:0774 -  -  -  -  
   13 00:0774 -  -  -  -  ; ***************************************************************************************
   14 00:0774 -  -  -  -  ;
   15 00:0774 -  -  -  -  ;								Str$() unary function
   16 00:0774 -  -  -  -  ;
   17 00:0774 -  -  -  -  ; ***************************************************************************************
   18 00:0774 -  -  -  -  
   19 00:0774 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:0774 CD AE 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0778 CD 34 06 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:077C 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:077E C9 -  -  -  		ret
   24 00:077F -  -  -  -  
   25 00:077F -  -  -  -  ; ***************************************************************************************
   26 00:077F -  -  -  -  ;
   27 00:077F -  -  -  -  ;									Changes and Updates
   28 00:077F -  -  -  -  ;
   29 00:077F -  -  -  -  ; ***************************************************************************************
   30 00:077F -  -  -  -  ;
   31 00:077F -  -  -  -  ;		Date			Notes
   32 00:077F -  -  -  -  ;		==== 			=====
   33 00:077F -  -  -  -  ;
   34 00:077F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:077F -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:077F -  -  -  -  ; ***************************************************************************************
    2 00:077F -  -  -  -  ; ***************************************************************************************
    3 00:077F -  -  -  -  ;
    4 00:077F -  -  -  -  ;		Name : 		not.asm
    5 00:077F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:077F -  -  -  -  ;		Date : 		5th June 2023
    7 00:077F -  -  -  -  ;		Reviewed :	No
    8 00:077F -  -  -  -  ;		Purpose :	Logical not
    9 00:077F -  -  -  -  ;
   10 00:077F -  -  -  -  ; ***************************************************************************************
   11 00:077F -  -  -  -  ; ***************************************************************************************
   12 00:077F -  -  -  -  
   13 00:077F -  -  -  -  ; ***************************************************************************************
   14 00:077F -  -  -  -  ;
   15 00:077F -  -  -  -  ;							not(x) e.g. one's complement
   16 00:077F -  -  -  -  ;
   17 00:077F -  -  -  -  ; ***************************************************************************************
   18 00:077F -  -  -  -  
   19 00:077F -  -  -  -  Unary_Not:		;; [not]
   20 00:077F CD AE 05 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:0783 CD 8C 07 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0787 CD 8C 07 00 		call 	__UNSwap		
   23 00:078B C9 -  -  -  		ret
   24 00:078C -  -  -  -  
   25 00:078C -  -  -  -  __UNSwap:
   26 00:078C 7C -  -  -  		ld 		a,h
   27 00:078D 2F -  -  -  		cpl
   28 00:078E 67 -  -  -  		ld 		h,a
   29 00:078F 7D -  -  -  		ld 		a,l
   30 00:0790 2F -  -  -  		cpl 	
   31 00:0791 6F -  -  -  		ld 		l,a
   32 00:0792 D9 -  -  -  		exx
   33 00:0793 C9 -  -  -  		ret
   34 00:0794 -  -  -  -  
   35 00:0794 -  -  -  -  ; ***************************************************************************************
   36 00:0794 -  -  -  -  ;
   37 00:0794 -  -  -  -  ;									Changes and Updates
   38 00:0794 -  -  -  -  ;
   39 00:0794 -  -  -  -  ; ***************************************************************************************
   40 00:0794 -  -  -  -  ;
   41 00:0794 -  -  -  -  ;		Date			Notes
   42 00:0794 -  -  -  -  ;		==== 			=====
   43 00:0794 -  -  -  -  ;
   44 00:0794 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 00:0794 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0794 -  -  -  -  ; ***************************************************************************************
    2 00:0794 -  -  -  -  ; ***************************************************************************************
    3 00:0794 -  -  -  -  ;
    4 00:0794 -  -  -  -  ;		Name : 		page.asm
    5 00:0794 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0794 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0794 -  -  -  -  ;		Reviewed :	No
    8 00:0794 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0794 -  -  -  -  ;
   10 00:0794 -  -  -  -  ; ***************************************************************************************
   11 00:0794 -  -  -  -  ; ***************************************************************************************
   12 00:0794 -  -  -  -  
   13 00:0794 -  -  -  -  ; ***************************************************************************************
   14 00:0794 -  -  -  -  ;
   15 00:0794 -  -  -  -  ;							page unary function (no bracket)
   16 00:0794 -  -  -  -  ;
   17 00:0794 -  -  -  -  ; ***************************************************************************************
   18 00:0794 -  -  -  -  
   19 00:0794 -  -  -  -  Unary_Page:	;; [page]
   20 00:0794 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0798 D9 -  -  -  			exx
   22 00:0799 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:079D D9 -  -  -  			exx
   24 00:079E 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:07A0 C9 -  -  -  			ret
   26 00:07A1 -  -  -  -  
   27 00:07A1 -  -  -  -  ; ***************************************************************************************
   28 00:07A1 -  -  -  -  ;
   29 00:07A1 -  -  -  -  ;									Changes and Updates
   30 00:07A1 -  -  -  -  ;
   31 00:07A1 -  -  -  -  ; ***************************************************************************************
   32 00:07A1 -  -  -  -  ;
   33 00:07A1 -  -  -  -  ;		Date			Notes
   34 00:07A1 -  -  -  -  ;		==== 			=====
   35 00:07A1 -  -  -  -  ;
   36 00:07A1 -  -  -  -  ; ***************************************************************************************
   37 00:07A1 -  -  -  -  			
Listing for file "_build.asm"
   43 00:07A1 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:07A1 -  -  -  -  ; ***************************************************************************************
    2 00:07A1 -  -  -  -  ; ***************************************************************************************
    3 00:07A1 -  -  -  -  ;
    4 00:07A1 -  -  -  -  ;		Name : 		random.asm
    5 00:07A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07A1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07A1 -  -  -  -  ;		Reviewed :	No
    8 00:07A1 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:07A1 -  -  -  -  ;
   10 00:07A1 -  -  -  -  ; ***************************************************************************************
   11 00:07A1 -  -  -  -  ; ***************************************************************************************
   12 00:07A1 -  -  -  -  
   13 00:07A1 -  -  -  -  ; ***************************************************************************************
   14 00:07A1 -  -  -  -  ;
   15 00:07A1 -  -  -  -  ;								Random unary function
   16 00:07A1 -  -  -  -  ;
   17 00:07A1 -  -  -  -  ; ***************************************************************************************
   18 00:07A1 -  -  -  -  
   19 00:07A1 -  -  -  -  Unary_Random:	;; [rnd]
   20 00:07A1 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:07A9 CD AE 05 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:07AD D9 -  -  -  		exx 								; is it -ve
   23 00:07AE CB 7C -  -  		bit 	7,h
   24 00:07B0 D9 -  -  -  		exx
   25 00:07B1 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:07B3 22 70 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:07B7 D9 -  -  -  		exx
   28 00:07B8 22 74 00 00 		ld 		(RandomSeed+4),hl
   29 00:07BC D9 -  -  -  		exx
   30 00:07BD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:07BF C9 -  -  -  		ret
   32 00:07C0 -  -  -  -  _URDontSeed:		
   33 00:07C0 -  -  -  -  
   34 00:07C0 CD C5 12 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:07C4 28 1C -  -  		jr 		z,_URFail
   36 00:07C6 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:07C7 D9 -  -  -  		exx
   38 00:07C8 E5 -  -  -  		push 	hl
   39 00:07C9 D9 -  -  -  		exx
   40 00:07CA -  -  -  -  		;
   41 00:07CA CD F3 07 00 		call 	URandomHL 					; get random HL'HL
   42 00:07CE D9 -  -  -  		exx
   43 00:07CF CD F3 07 00 		call 	URandomHL
   44 00:07D3 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:07D5 D9 -  -  -  		exx
   46 00:07D6 -  -  -  -  		;
   47 00:07D6 D9 -  -  -  		exx 								; restore range.
   48 00:07D7 D1 -  -  -  		pop 	de
   49 00:07D8 D9 -  -  -  		exx
   50 00:07D9 D1 -  -  -  		pop 	de
   51 00:07DA -  -  -  -  		;
   52 00:07DA CD 56 11 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:07DE 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:07DF 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:07E1 C9 -  -  -  		ret
   56 00:07E2 -  -  -  -  _URFail:
   57 00:07E2 3E 03 C3 A1 
              03 00 -  -  		ERR_BADVALUE
   58 00:07E8 -  -  -  -  ; ***************************************************************************************
   59 00:07E8 -  -  -  -  ;
   60 00:07E8 -  -  -  -  ; 									Push RNG off zero
   61 00:07E8 -  -  -  -  ;
   62 00:07E8 -  -  -  -  ; ***************************************************************************************
   63 00:07E8 -  -  -  -  
   64 00:07E8 -  -  -  -  UnaryRandomInitialise:
   65 00:07E8 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:07EA -  -  -  -  _URILoop:
   67 00:07EA C5 -  -  -  		push 	bc
   68 00:07EB CD F3 07 00 		call 	URandomHL
   69 00:07EF C1 -  -  -  		pop 	bc
   70 00:07F0 10 F8 -  -  		djnz 	_URILoop
   71 00:07F2 C9 -  -  -  		ret
   72 00:07F3 -  -  -  -  
   73 00:07F3 -  -  -  -  ; ***************************************************************************************
   74 00:07F3 -  -  -  -  ;
   75 00:07F3 -  -  -  -  ;							16 bit random number generator
   76 00:07F3 -  -  -  -  ;
   77 00:07F3 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:07F3 -  -  -  -  ;		Actual author unspecified.
   79 00:07F3 -  -  -  -  ;
   80 00:07F3 -  -  -  -  ; ***************************************************************************************
   81 00:07F3 -  -  -  -  
   82 00:07F3 -  -  -  -  URandomHL:
   83 00:07F3 2A 70 00 00 	    ld 		hl,(RandomSeed)
   84 00:07F7 ED 5B 74 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:07FC 44 -  -  -  	    ld 		b,h
   86 00:07FD 4D -  -  -  	    ld 		c,l
   87 00:07FE 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:0803 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0808 2C -  -  -  	    inc 	l
   90 00:0809 09 -  -  -  	    add 	hl,bc
   91 00:080A 22 70 00 00 	    ld 		(RandomSeed),hl
   92 00:080E 2A 74 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:0812 ED 5A -  -  	    adc 	hl,de
   94 00:0814 22 74 00 00 	    ld 		(RandomSeed+4),hl
   95 00:0818 EB -  -  -  	    ex 		de,hl
   96 00:0819 2A 78 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:081D ED 4B 7C 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:0822 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:0827 ED 43 7C 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:082C 9F -  -  -  	    sbc 	a,a
  101 00:082D E6 C5 -  -  	    and 	%11000101
  102 00:082F AD -  -  -  	    xor 	l
  103 00:0830 6F -  -  -  	    ld 		l,a
  104 00:0831 22 78 00 00 	    ld 		(RandomSeed+8),hl
  105 00:0835 EB -  -  -  	    ex 		de,hl
  106 00:0836 09 -  -  -  	    add 	hl,bc
  107 00:0837 C9 -  -  -  	    ret		
  108 00:0838 -  -  -  -  
  109 00:0838 -  -  -  -  ; ***************************************************************************************
  110 00:0838 -  -  -  -  ;
  111 00:0838 -  -  -  -  ;									Changes and Updates
  112 00:0838 -  -  -  -  ;
  113 00:0838 -  -  -  -  ; ***************************************************************************************
  114 00:0838 -  -  -  -  ;
  115 00:0838 -  -  -  -  ;		Date			Notes
  116 00:0838 -  -  -  -  ;		==== 			=====
  117 00:0838 -  -  -  -  ;
  118 00:0838 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0838 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:0838 -  -  -  -  ; ***************************************************************************************
    2 00:0838 -  -  -  -  ; ***************************************************************************************
    3 00:0838 -  -  -  -  ;
    4 00:0838 -  -  -  -  ;		Name : 		sgn.asm
    5 00:0838 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0838 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0838 -  -  -  -  ;		Reviewed :	No
    8 00:0838 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:0838 -  -  -  -  ;
   10 00:0838 -  -  -  -  ; ***************************************************************************************
   11 00:0838 -  -  -  -  ; ***************************************************************************************
   12 00:0838 -  -  -  -  
   13 00:0838 -  -  -  -  ; ***************************************************************************************
   14 00:0838 -  -  -  -  ;
   15 00:0838 -  -  -  -  ;								sgn unary function
   16 00:0838 -  -  -  -  ;
   17 00:0838 -  -  -  -  ; ***************************************************************************************
   18 00:0838 -  -  -  -  
   19 00:0838 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:0838 CD AE 05 00 		call	EvaluateIntegerTerm 		; get value
   21 00:083C CD C5 12 00 		call 	Int32Zero 					; integer sgn() code
   22 00:0840 CA AC 04 00 		jp 		z,UnaryInt32False
   23 00:0844 D9 -  -  -  		exx
   24 00:0845 CB 7C -  -  		bit 	7,h
   25 00:0847 D9 -  -  -  		exx
   26 00:0848 C2 A8 04 00 		jp 		nz,UnaryInt32True
   27 00:084C 3E 01 -  -  		ld 		a,1
   28 00:084E C3 F9 05 00 		jp 		Return8BitConstant
   29 00:0852 -  -  -  -  
   30 00:0852 -  -  -  -  ; ***************************************************************************************
   31 00:0852 -  -  -  -  ;
   32 00:0852 -  -  -  -  ;									Changes and Updates
   33 00:0852 -  -  -  -  ;
   34 00:0852 -  -  -  -  ; ***************************************************************************************
   35 00:0852 -  -  -  -  ;
   36 00:0852 -  -  -  -  ;		Date			Notes
   37 00:0852 -  -  -  -  ;		==== 			=====
   38 00:0852 -  -  -  -  ;
   39 00:0852 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 00:0852 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:0852 -  -  -  -  ; ***************************************************************************************
    2 00:0852 -  -  -  -  ; ***************************************************************************************
    3 00:0852 -  -  -  -  ;
    4 00:0852 -  -  -  -  ;		Name : 		simple.asm
    5 00:0852 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0852 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0852 -  -  -  -  ;		Reviewed :	No
    8 00:0852 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:0852 -  -  -  -  ;
   10 00:0852 -  -  -  -  ; ***************************************************************************************
   11 00:0852 -  -  -  -  ; ***************************************************************************************
   12 00:0852 -  -  -  -  
   13 00:0852 -  -  -  -  ; ***************************************************************************************
   14 00:0852 -  -  -  -  ;
   15 00:0852 -  -  -  -  ;								( unary function (think about it)
   16 00:0852 -  -  -  -  ;
   17 00:0852 -  -  -  -  ; ***************************************************************************************
   18 00:0852 -  -  -  -  
   19 00:0852 -  -  -  -  Unary_Brackets:	;; [(]
   20 00:0852 CD 55 05 00 		call 	EvaluateAtPrecedence0
   21 00:0856 C3 6B 03 00 		jp  	CheckRightBracket
   22 00:085A -  -  -  -  
   23 00:085A -  -  -  -  ; ***************************************************************************************
   24 00:085A -  -  -  -  ;
   25 00:085A -  -  -  -  ;									Handle &x
   26 00:085A -  -  -  -  ;
   27 00:085A -  -  -  -  ; ***************************************************************************************
   28 00:085A -  -  -  -  
   29 00:085A -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:085A DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:085D E6 C0 -  -  		and 		$C0
   32 00:085F FE 40 -  -  		cp 			$40
   33 00:0861 C2 0B 04 00 		jp 			nz,SyntaxError 			; no then error
   34 00:0865 C3 63 06 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:0869 -  -  -  -  
   36 00:0869 -  -  -  -  ; ***************************************************************************************
   37 00:0869 -  -  -  -  ;
   38 00:0869 -  -  -  -  ;									Changes and Updates
   39 00:0869 -  -  -  -  ;
   40 00:0869 -  -  -  -  ; ***************************************************************************************
   41 00:0869 -  -  -  -  ;
   42 00:0869 -  -  -  -  ;		Date			Notes
   43 00:0869 -  -  -  -  ;		==== 			=====
   44 00:0869 -  -  -  -  ;
   45 00:0869 -  -  -  -  ; ***************************************************************************************
   46 00:0869 -  -  -  -  		
Listing for file "_build.asm"
   46 00:0869 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:0869 -  -  -  -  ; ***************************************************************************************
    2 00:0869 -  -  -  -  ; ***************************************************************************************
    3 00:0869 -  -  -  -  ;
    4 00:0869 -  -  -  -  ;		Name : 		str.asm
    5 00:0869 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0869 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0869 -  -  -  -  ;		Reviewed :	No
    8 00:0869 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:0869 -  -  -  -  ;
   10 00:0869 -  -  -  -  ; ***************************************************************************************
   11 00:0869 -  -  -  -  ; ***************************************************************************************
   12 00:0869 -  -  -  -  
   13 00:0869 -  -  -  -  ; ***************************************************************************************
   14 00:0869 -  -  -  -  ;
   15 00:0869 -  -  -  -  ;								Str$() unary function
   16 00:0869 -  -  -  -  ;
   17 00:0869 -  -  -  -  ; ***************************************************************************************
   18 00:0869 -  -  -  -  
   19 00:0869 -  -  -  -  Unary_Str:	;; [str]
   20 00:0869 CD 79 03 00 		call 	CheckDollar
   21 00:086D DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:0870 EE AC -  -  		xor		KWD_TILDE
   23 00:0872 F5 -  -  -  		push 	af
   24 00:0873 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:0875 DD 23 -  -  		inc 	ix
   26 00:0877 -  -  -  -  _USNotHex:		
   27 00:0877 CD AE 05 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:087B 01 8E 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:087F F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:0880 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:0882 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:0884 3E 10 -  -  		ld 		a,16
   33 00:0886 -  -  -  -  _USNotHex2:		
   34 00:0886 CD 0D 13 00 		call 	Int32ToString 				
   35 00:088A 21 8E 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:088E 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:0890 C9 -  -  -  		ret
   38 00:0891 -  -  -  -  
   39 00:0891 -  -  -  -  ; ***************************************************************************************
   40 00:0891 -  -  -  -  ;
   41 00:0891 -  -  -  -  ;									Changes and Updates
   42 00:0891 -  -  -  -  ;
   43 00:0891 -  -  -  -  ; ***************************************************************************************
   44 00:0891 -  -  -  -  ;
   45 00:0891 -  -  -  -  ;		Date			Notes
   46 00:0891 -  -  -  -  ;		==== 			=====
   47 00:0891 -  -  -  -  ;
   48 00:0891 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:0891 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:0891 -  -  -  -  ; ***************************************************************************************
    2 00:0891 -  -  -  -  ; ***************************************************************************************
    3 00:0891 -  -  -  -  ;
    4 00:0891 -  -  -  -  ;		Name : 		time.asm
    5 00:0891 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0891 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0891 -  -  -  -  ;		Reviewed :	No
    8 00:0891 -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:0891 -  -  -  -  ;
   10 00:0891 -  -  -  -  ; ***************************************************************************************
   11 00:0891 -  -  -  -  ; ***************************************************************************************
   12 00:0891 -  -  -  -  
   13 00:0891 -  -  -  -  ; ***************************************************************************************
   14 00:0891 -  -  -  -  ;
   15 00:0891 -  -  -  -  ;							Get system time in ms
   16 00:0891 -  -  -  -  ;
   17 00:0891 -  -  -  -  ; ***************************************************************************************
   18 00:0891 -  -  -  -  
   19 00:0891 -  -  -  -  Unary_Time:	;; [time]
   20 00:0891 CD 5E 13 00 			call 	SYSGetTimer
   21 00:0895 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0897 C9 -  -  -  			ret
   23 00:0898 -  -  -  -  
   24 00:0898 -  -  -  -  ; ***************************************************************************************
   25 00:0898 -  -  -  -  ;
   26 00:0898 -  -  -  -  ;									Changes and Updates
   27 00:0898 -  -  -  -  ;
   28 00:0898 -  -  -  -  ; ***************************************************************************************
   29 00:0898 -  -  -  -  ;
   30 00:0898 -  -  -  -  ;		Date			Notes
   31 00:0898 -  -  -  -  ;		==== 			=====
   32 00:0898 -  -  -  -  ;
   33 00:0898 -  -  -  -  ; ***************************************************************************************
   34 00:0898 -  -  -  -  			
Listing for file "_build.asm"
   48 00:0898 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0898 -  -  -  -  ; ***************************************************************************************
    2 00:0898 -  -  -  -  ; ***************************************************************************************
    3 00:0898 -  -  -  -  ;
    4 00:0898 -  -  -  -  ;		Name : 		top.asm
    5 00:0898 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0898 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0898 -  -  -  -  ;		Reviewed :	No
    8 00:0898 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0898 -  -  -  -  ;
   10 00:0898 -  -  -  -  ; ***************************************************************************************
   11 00:0898 -  -  -  -  ; ***************************************************************************************
   12 00:0898 -  -  -  -  
   13 00:0898 -  -  -  -  ; ***************************************************************************************
   14 00:0898 -  -  -  -  ;
   15 00:0898 -  -  -  -  ;							page unary function (no bracket)
   16 00:0898 -  -  -  -  ;
   17 00:0898 -  -  -  -  ; ***************************************************************************************
   18 00:0898 -  -  -  -  
   19 00:0898 -  -  -  -  Unary_Top:	;; [top]
   20 00:0898 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:089C D9 -  -  -  			exx
   22 00:089D 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:08A1 D9 -  -  -  			exx
   24 00:08A2 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:08A4 C9 -  -  -  			ret
   26 00:08A5 -  -  -  -  
   27 00:08A5 -  -  -  -  ; ***************************************************************************************
   28 00:08A5 -  -  -  -  ;
   29 00:08A5 -  -  -  -  ;									Changes and Updates
   30 00:08A5 -  -  -  -  ;
   31 00:08A5 -  -  -  -  ; ***************************************************************************************
   32 00:08A5 -  -  -  -  ;
   33 00:08A5 -  -  -  -  ;		Date			Notes
   34 00:08A5 -  -  -  -  ;		==== 			=====
   35 00:08A5 -  -  -  -  ;
   36 00:08A5 -  -  -  -  ; ***************************************************************************************
   37 00:08A5 -  -  -  -  			
Listing for file "_build.asm"
   49 00:08A5 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:08A5 -  -  -  -  ; ***************************************************************************************
    2 00:08A5 -  -  -  -  ; ***************************************************************************************
    3 00:08A5 -  -  -  -  ;
    4 00:08A5 -  -  -  -  ;		Name : 		val.asm
    5 00:08A5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08A5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08A5 -  -  -  -  ;		Reviewed :	No
    8 00:08A5 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:08A5 -  -  -  -  ;
   10 00:08A5 -  -  -  -  ; ***************************************************************************************
   11 00:08A5 -  -  -  -  ; ***************************************************************************************
   12 00:08A5 -  -  -  -  
   13 00:08A5 -  -  -  -  ; ***************************************************************************************
   14 00:08A5 -  -  -  -  ;
   15 00:08A5 -  -  -  -  ;								val( unary function
   16 00:08A5 -  -  -  -  ;
   17 00:08A5 -  -  -  -  ; ***************************************************************************************
   18 00:08A5 -  -  -  -  
   19 00:08A5 -  -  -  -  Unary_Val:	;; [val]
   20 00:08A5 CD BD 05 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:08A9 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:08AA C1 -  -  -  		pop 	bc
   23 00:08AB 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:08AD CD EB 11 00 		call 	Int32FromString 			; get the integer part.
   25 00:08B1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:08B3 C8 -  -  -  		ret		z 							; okay
   27 00:08B4 3E 03 C3 A1 
              03 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:08BA -  -  -  -  
   29 00:08BA -  -  -  -  ; ***************************************************************************************
   30 00:08BA -  -  -  -  ;
   31 00:08BA -  -  -  -  ;									Changes and Updates
   32 00:08BA -  -  -  -  ;
   33 00:08BA -  -  -  -  ; ***************************************************************************************
   34 00:08BA -  -  -  -  ;
   35 00:08BA -  -  -  -  ;		Date			Notes
   36 00:08BA -  -  -  -  ;		==== 			=====
   37 00:08BA -  -  -  -  ;
   38 00:08BA -  -  -  -  ; ***************************************************************************************
   39 00:08BA -  -  -  -  		
Listing for file "_build.asm"
   50 00:08BA -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 00:08BA -  -  -  -  ; ***************************************************************************************
    2 00:08BA -  -  -  -  ; ***************************************************************************************
    3 00:08BA -  -  -  -  ;
    4 00:08BA -  -  -  -  ;		Name : 		locals.asm
    5 00:08BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08BA -  -  -  -  ;		Date : 		8th June 2022
    7 00:08BA -  -  -  -  ;		Reviewed :	No
    8 00:08BA -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 00:08BA -  -  -  -  ;
   10 00:08BA -  -  -  -  ; ***************************************************************************************
   11 00:08BA -  -  -  -  ; ***************************************************************************************
   12 00:08BA -  -  -  -  
   13 00:08BA -  -  -  -  ; ***************************************************************************************
   14 00:08BA -  -  -  -  ;
   15 00:08BA -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
   16 00:08BA -  -  -  -  ;			or parameter
   17 00:08BA -  -  -  -  ;
   18 00:08BA -  -  -  -  ; ***************************************************************************************
   19 00:08BA -  -  -  -  
   20 00:08BA -  -  -  -  PopLocals:
   21 00:08BA 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
   22 00:08BC CD 57 0C 00 		call 	StackCheckFrame
   23 00:08C0 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
   24 00:08C1 -  -  -  -  
   25 00:08C1 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   26 00:08C9 -  -  -  -  
   27 00:08C9 -  -  -  -  ; ***************************************************************************************
   28 00:08C9 -  -  -  -  ;
   29 00:08C9 -  -  -  -  ;									Changes and Updates
   30 00:08C9 -  -  -  -  ;
   31 00:08C9 -  -  -  -  ; ***************************************************************************************
   32 00:08C9 -  -  -  -  ;
   33 00:08C9 -  -  -  -  ;		Date			Notes
   34 00:08C9 -  -  -  -  ;		==== 			=====
   35 00:08C9 -  -  -  -  ;
   36 00:08C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 00:08C9 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 00:08C9 -  -  -  -  ; ***************************************************************************************
    2 00:08C9 -  -  -  -  ; ***************************************************************************************
    3 00:08C9 -  -  -  -  ;
    4 00:08C9 -  -  -  -  ;		Name : 		proc.asm
    5 00:08C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08C9 -  -  -  -  ;		Date : 		8th June 2022
    7 00:08C9 -  -  -  -  ;		Reviewed :	No
    8 00:08C9 -  -  -  -  ;		Purpose :	Proc command
    9 00:08C9 -  -  -  -  ;
   10 00:08C9 -  -  -  -  ; ***************************************************************************************
   11 00:08C9 -  -  -  -  ; ***************************************************************************************
   12 00:08C9 -  -  -  -  
   13 00:08C9 -  -  -  -  ; ***************************************************************************************
   14 00:08C9 -  -  -  -  ;
   15 00:08C9 -  -  -  -  ;										PROC Command
   16 00:08C9 -  -  -  -  ;
   17 00:08C9 -  -  -  -  ; ***************************************************************************************
   18 00:08C9 -  -  -  -  
   19 00:08C9 -  -  -  -  Command_PROC: 	;; [proc]
   20 00:08C9 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 00:08CB CD 1F 0C 00 			call 	StackOpenFrame 			; marker position.
   22 00:08CF -  -  -  -  			;
   23 00:08CF DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 00:08D2 FE 26 -  -  			cp 		IDENTIFIER_END
   25 00:08D4 D2 0B 04 00 			jp 		nc,SyntaxError 			; no , no call possible.
   26 00:08D8 CD 56 09 00 			call 	SearchProcedure 		; find procedure referenced at IX.
   27 00:08DC -  -  -  -  			;
   28 00:08DC -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 00:08DC -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 00:08DC -  -  -  -  			;
   31 00:08DC D5 -  -  -  			push 	de 						; save start of line
   32 00:08DD DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 00:08E0 FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 00:08E2 CC F9 08 00 			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 00:08E6 -  -  -  -  			;
   36 00:08E6 E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 00:08E7 -  -  -  -  			;
   38 00:08E7 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 00:08E9 CD 1F 0C 00 			call 	StackOpenFrame 
   40 00:08ED CD 5D 0C 00 			call 	StackSavePosition 		; and save the return address on the stack.
   41 00:08F1 -  -  -  -  
   42 00:08F1 DD E1 -  -  			pop 	ix 						; new position in code
   43 00:08F3 E1 -  -  -  			pop 	hl 						; start of line
   44 00:08F4 22 5C 00 00 			ld 		(CurrentLineStart),hl 	; save start of line
   45 00:08F8 C9 -  -  -  			ret
   46 00:08F9 -  -  -  -  
   47 00:08F9 -  -  -  -  ; ***************************************************************************************
   48 00:08F9 -  -  -  -  ;
   49 00:08F9 -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 00:08F9 -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 00:08F9 -  -  -  -  ;
   52 00:08F9 -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 00:08F9 -  -  -  -  ;			final ) on the parameter lists.
   54 00:08F9 -  -  -  -  ;
   55 00:08F9 -  -  -  -  ; ***************************************************************************************
   56 00:08F9 -  -  -  -  
   57 00:08F9 -  -  -  -  ProcDoParameterList:
   58 00:08F9 F5 3E 02 32 
              FF FF FF F1 			debug			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   59 00:0901 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   60 00:0902 DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   61 00:0905 20 00 -  -  			jr 		nz,_ParamErr
   62 00:0907 -  -  -  -  			;
   63 00:0907 DD 23 -  -  			inc 	ix 						; skip over it
   64 00:0909 23 -  -  -  			inc 	hl
   65 00:090A FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   66 00:090C C8 -  -  -  			ret 	z
   67 00:090D -  -  -  -  			;
   68 00:090D FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   69 00:090F 28 04 -  -  			jr 		z,_PDPFound
   70 00:0911 FE A6 -  -  			cp 		KWD_COMMA
   71 00:0913 20 10 -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   72 00:0915 -  -  -  -  			;
   73 00:0915 -  -  -  -  			;		at this point HL points to callee, IX to caller.
   74 00:0915 -  -  -  -  			;
   75 00:0915 -  -  -  -  _PDPFound:			
   76 00:0915 E5 -  -  -  			push 	hl 						; save callee on stack
   77 00:0916 CD D4 05 00 			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   78 00:091A DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   79 00:091C CD 00 00 00 			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   80 00:0920 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   81 00:0922 E1 -  -  -  			pop 	hl 						; and HL the callee
   82 00:0923 18 D4 -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   83 00:0925 -  -  -  -  
   84 00:0925 -  -  -  -  _ParamError:
   85 00:0925 3E 12 C3 A1 
              03 00 -  -  			ERR_PARAM
   86 00:092B -  -  -  -  
   87 00:092B -  -  -  -  ; ***************************************************************************************
   88 00:092B -  -  -  -  ;
   89 00:092B -  -  -  -  ;										ENDPROC Command
   90 00:092B -  -  -  -  ;
   91 00:092B -  -  -  -  ; ***************************************************************************************
   92 00:092B -  -  -  -  
   93 00:092B -  -  -  -  Command_ENDPROC: ;; [endproc]
   94 00:092B CD BA 08 00 			call 	PopLocals 				; restore any locals (declared using LOCAL)
   95 00:092F 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   96 00:0931 CD 57 0C 00 			call 	StackCheckFrame
   97 00:0935 20 19 -  -  			jr 		nz,_EndProcError
   98 00:0937 CD 78 0C 00 			call 	StackLoadPosition 		; restore position into IX/SOL
   99 00:093B CD 44 0C 00 			call 	StackCloseFrame 		
  100 00:093F -  -  -  -  
  101 00:093F CD BA 08 00 			call 	PopLocals 				; restore any locals (parameters)
  102 00:0943 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  103 00:0945 CD 57 0C 00 			call 	StackCheckFrame
  104 00:0949 20 05 -  -  			jr 		nz,_EndProcError
  105 00:094B CD 44 0C 00 			call 	StackCloseFrame 		
  106 00:094F C9 -  -  -  			ret
  107 00:0950 -  -  -  -  _EndProcError:
  108 00:0950 3E 0F C3 A1 
              03 00 -  -  			ERR_NOPROC
  109 00:0956 -  -  -  -  
  110 00:0956 -  -  -  -  ; ***************************************************************************************
  111 00:0956 -  -  -  -  ;
  112 00:0956 -  -  -  -  ;									Changes and Updates
  113 00:0956 -  -  -  -  ;
  114 00:0956 -  -  -  -  ; ***************************************************************************************
  115 00:0956 -  -  -  -  ;
  116 00:0956 -  -  -  -  ;		Date			Notes
  117 00:0956 -  -  -  -  ;		==== 			=====
  118 00:0956 -  -  -  -  ;
  119 00:0956 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 00:0956 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 00:0956 -  -  -  -  ; ***************************************************************************************
    2 00:0956 -  -  -  -  ; ***************************************************************************************
    3 00:0956 -  -  -  -  ;
    4 00:0956 -  -  -  -  ;		Name : 		search.asm
    5 00:0956 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0956 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0956 -  -  -  -  ;		Reviewed :	No
    8 00:0956 -  -  -  -  ;		Purpose :	Search program for procedures
    9 00:0956 -  -  -  -  ;
   10 00:0956 -  -  -  -  ; ***************************************************************************************
   11 00:0956 -  -  -  -  ; ***************************************************************************************
   12 00:0956 -  -  -  -  
   13 00:0956 -  -  -  -  ; ***************************************************************************************
   14 00:0956 -  -  -  -  ;
   15 00:0956 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 00:0956 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 00:0956 -  -  -  -  ;
   18 00:0956 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 00:0956 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 00:0956 -  -  -  -  ;
   21 00:0956 -  -  -  -  ; ***************************************************************************************
   22 00:0956 -  -  -  -  
   23 00:0956 -  -  -  -  SearchProcedure:
   24 00:0956 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 00:0959 -  -  -  -  
   26 00:0959 2A 38 00 00 			ld 		hl,(CodeAddress) 		; start of program space
   27 00:095D -  -  -  -  			;
   28 00:095D -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 00:095D -  -  -  -  			;
   30 00:095D 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 00:095E B7 -  -  -  			or 		a
   32 00:095F 28 38 -  -  			jr 		z,_SPFail
   33 00:0961 E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 00:0962 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 00:0963 23 -  -  -  			inc 	hl
   36 00:0964 23 -  -  -  			inc 	hl
   37 00:0965 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 00:0966 FE B6 -  -  			cp 		KWD_DEF 				
   39 00:0968 20 0B -  -  			jr 		nz,_SPNext
   40 00:096A 23 -  -  -  			inc 	hl 				
   41 00:096B 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 00:096C FE B7 -  -  			cp 		KWD_PROC
   43 00:096E 20 05 -  -  			jr 		nz,_SPNext
   44 00:0970 23 -  -  -  			inc 	hl
   45 00:0971 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 00:0972 B9 -  -  -  			cp 		c
   47 00:0973 28 09 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 00:0975 -  -  -  -  			;
   49 00:0975 -  -  -  -  			;		Advance to next entry.
   50 00:0975 -  -  -  -  			;			
   51 00:0975 E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 00:0976 11 00 00 00 			ld 		de,0 					; offset into UDE
   53 00:097A 5E -  -  -  			ld 		e,(hl)
   54 00:097B 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 00:097C 18 DF -  -  			jr 		_SPLoop
   56 00:097E -  -  -  -  			;
   57 00:097E -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 00:097E -  -  -  -  			; 		DEF PROC line.
   59 00:097E -  -  -  -  			;		
   60 00:097E -  -  -  -  			;		Already know the first characters match
   61 00:097E -  -  -  -  			;
   62 00:097E -  -  -  -  _SPFullCheck:
   63 00:097E DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 00:0980 -  -  -  -  _SPCheckLoop:
   65 00:0980 DD 23 -  -  			inc 	ix 						; look at next character.
   66 00:0982 23 -  -  -  			inc 	hl
   67 00:0983 DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 00:0986 FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 00:0988 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 00:098A BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 00:098B 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 00:098D -  -  -  -  			;
   73 00:098D -  -  -  -  			;		Full check failed.
   74 00:098D -  -  -  -  			;
   75 00:098D -  -  -  -  _SPFullCheckFailed:			
   76 00:098D DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 00:098F 18 E4 -  -  			jr 		_SPNext 				; do the next line.
   78 00:0991 -  -  -  -  			;
   79 00:0991 -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 00:0991 -  -  -  -  			;
   81 00:0991 -  -  -  -  _SPCheckBothEnd:
   82 00:0991 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 00:0992 FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 00:0994 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 00:0996 -  -  -  -  			;
   86 00:0996 -  -  -  -  			;	 	We found it.
   87 00:0996 -  -  -  -  			;
   88 00:0996 C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 00:0997 D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 00:0998 C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 00:0999 -  -  -  -  
   92 00:0999 -  -  -  -  _SPFail: 									; come here when not found.
   93 00:0999 3E 13 C3 A1 
              03 00 -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 00:099F -  -  -  -  
   95 00:099F -  -  -  -  ; ***************************************************************************************
   96 00:099F -  -  -  -  ;
   97 00:099F -  -  -  -  ;									Changes and Updates
   98 00:099F -  -  -  -  ;
   99 00:099F -  -  -  -  ; ***************************************************************************************
  100 00:099F -  -  -  -  ;
  101 00:099F -  -  -  -  ;		Date			Notes
  102 00:099F -  -  -  -  ;		==== 			=====
  103 00:099F -  -  -  -  ;
  104 00:099F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:099F -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:099F -  -  -  -  ; ***************************************************************************************
    2 00:099F -  -  -  -  ; ***************************************************************************************
    3 00:099F -  -  -  -  ;
    4 00:099F -  -  -  -  ;		Name : 		allocate.asm
    5 00:099F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:099F -  -  -  -  ;		Date : 		4th June 2022
    7 00:099F -  -  -  -  ;		Reviewed :	No
    8 00:099F -  -  -  -  ;		Purpose :	Allocate memory
    9 00:099F -  -  -  -  ;
   10 00:099F -  -  -  -  ; ***************************************************************************************
   11 00:099F -  -  -  -  ; ***************************************************************************************
   12 00:099F -  -  -  -  
   13 00:099F -  -  -  -  ; ***************************************************************************************
   14 00:099F -  -  -  -  ;
   15 00:099F -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:099F -  -  -  -  ;
   17 00:099F -  -  -  -  ; ***************************************************************************************
   18 00:099F -  -  -  -  
   19 00:099F -  -  -  -  AllocateBytes:
   20 00:099F EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:09A0 21 00 00 00 		ld 		hl,$000000
   22 00:09A4 62 -  -  -  		ld 		h,d
   23 00:09A5 6B -  -  -  		ld 		l,e
   24 00:09A6 -  -  -  -  		;
   25 00:09A6 ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:09AB D5 -  -  -  		push 	de 							; save on stack
   27 00:09AC 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:09AD 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   29 00:09B1 -  -  -  -  		;
   30 00:09B1 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:09B2 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:09B6 AF -  -  -  		xor 	a
   33 00:09B7 ED 52 -  -  		sbc 	hl,de
   34 00:09B9 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:09BA D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:09BB 3E 0A C3 A1 
              03 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:09C1 -  -  -  -  
   38 00:09C1 -  -  -  -  ; ***************************************************************************************
   39 00:09C1 -  -  -  -  ;
   40 00:09C1 -  -  -  -  ;									Changes and Updates
   41 00:09C1 -  -  -  -  ;
   42 00:09C1 -  -  -  -  ; ***************************************************************************************
   43 00:09C1 -  -  -  -  ;
   44 00:09C1 -  -  -  -  ;		Date			Notes
   45 00:09C1 -  -  -  -  ;		==== 			=====
   46 00:09C1 -  -  -  -  ;
   47 00:09C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:09C1 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:09C1 -  -  -  -  ; ***************************************************************************************
    2 00:09C1 -  -  -  -  ; ***************************************************************************************
    3 00:09C1 -  -  -  -  ;
    4 00:09C1 -  -  -  -  ;		Name : 		clear.asm
    5 00:09C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:09C1 -  -  -  -  ;		Reviewed :	No
    8 00:09C1 -  -  -  -  ;		Purpose :	Clear command.
    9 00:09C1 -  -  -  -  ;
   10 00:09C1 -  -  -  -  ; ***************************************************************************************
   11 00:09C1 -  -  -  -  ; ***************************************************************************************
   12 00:09C1 -  -  -  -  
   13 00:09C1 -  -  -  -  ; ***************************************************************************************
   14 00:09C1 -  -  -  -  ;
   15 00:09C1 -  -  -  -  ;										CLEAR command
   16 00:09C1 -  -  -  -  ;
   17 00:09C1 -  -  -  -  ; ***************************************************************************************
   18 00:09C1 -  -  -  -  
   19 00:09C1 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:09C1 -  -  -  -  		;
   21 00:09C1 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:09C1 -  -  -  -  		;
   23 00:09C1 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:09C5 -  -  -  -  _CCFindLow:
   25 00:09C5 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:09C9 5E -  -  -  		ld 		e,(hl)		
   27 00:09CA 19 -  -  -  		add 	hl,de
   28 00:09CB 7B -  -  -  		ld 		a,e
   29 00:09CC B7 -  -  -  		or 		a
   30 00:09CD 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:09CF 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:09D0 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:09D4 23 -  -  -  		inc 	hl 							; one for luck
   34 00:09D5 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:09D9 -  -  -  -  		;
   36 00:09D9 -  -  -  -  		; 	 		Reset the language stack
   37 00:09D9 -  -  -  -  		;
   38 00:09D9 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:09DD -  -  -  -  		;
   40 00:09DD 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:09E1 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:09E5 19 -  -  -  		add 	hl,de
   43 00:09E6 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:09E8 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:09EC -  -  -  -  		;
   46 00:09EC 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:09F0 19 -  -  -  		add 	hl,de
   48 00:09F1 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:09F5 -  -  -  -  		;
   50 00:09F5 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:09F5 -  -  -  -  		;
   52 00:09F5 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:09F9 -  -  -  -  _CCFClearHT:
   54 00:09F9 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:09FA 36 00 -  -  		ld 		(hl),0
   56 00:09FC 1B -  -  -  		dec 	de
   57 00:09FD 7A -  -  -  		ld 		a,d
   58 00:09FE B3 -  -  -  		or 		e
   59 00:09FF 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:0A01 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   61 00:0A05 -  -  -  -  		;
   62 00:0A05 -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:0A05 -  -  -  -  		;
   64 00:0A05 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:0A09 -  -  -  -  		;
   66 00:0A09 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:0A09 -  -  -  -  		;
   68 00:0A09 CD E8 07 00 		call 	UnaryRandomInitialise
   69 00:0A0D -  -  -  -  		;
   70 00:0A0D -  -  -  -  		;		Erase the stack
   71 00:0A0D -  -  -  -  		;
   72 00:0A0D CD 13 0C 00 		call 	StackReset 					; reset the basic stack to empty
   73 00:0A11 C9 -  -  -  		ret
   74 00:0A12 -  -  -  -  
   75 00:0A12 -  -  -  -  ; ***************************************************************************************
   76 00:0A12 -  -  -  -  ;
   77 00:0A12 -  -  -  -  ;									Changes and Updates
   78 00:0A12 -  -  -  -  ;
   79 00:0A12 -  -  -  -  ; ***************************************************************************************
   80 00:0A12 -  -  -  -  ;
   81 00:0A12 -  -  -  -  ;		Date			Notes
   82 00:0A12 -  -  -  -  ;		==== 			=====
   83 00:0A12 -  -  -  -  ;
   84 00:0A12 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0A12 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0A12 -  -  -  -  ; ***************************************************************************************
    2 00:0A12 -  -  -  -  ; ***************************************************************************************
    3 00:0A12 -  -  -  -  ;
    4 00:0A12 -  -  -  -  ;		Name : 		instance.asm
    5 00:0A12 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A12 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A12 -  -  -  -  ;		Reviewed :	No
    8 00:0A12 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0A12 -  -  -  -  ;
   10 00:0A12 -  -  -  -  ; ***************************************************************************************
   11 00:0A12 -  -  -  -  ; ***************************************************************************************
   12 00:0A12 -  -  -  -  
   13 00:0A12 -  -  -  -  ; ***************************************************************************************
   14 00:0A12 -  -  -  -  ;
   15 00:0A12 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0A12 -  -  -  -  ;
   17 00:0A12 -  -  -  -  ; ***************************************************************************************
   18 00:0A12 -  -  -  -  
   19 00:0A12 -  -  -  -  SetCurrentInstance:
   20 00:0A12 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0A17 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0A1B ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0A20 -  -  -  -  
   24 00:0A20 C9 -  -  -  		ret
   25 00:0A21 -  -  -  -  
   26 00:0A21 -  -  -  -  
   27 00:0A21 -  -  -  -  ; ***************************************************************************************
   28 00:0A21 -  -  -  -  ;
   29 00:0A21 -  -  -  -  ;									Changes and Updates
   30 00:0A21 -  -  -  -  ;
   31 00:0A21 -  -  -  -  ; ***************************************************************************************
   32 00:0A21 -  -  -  -  ;
   33 00:0A21 -  -  -  -  ;		Date			Notes
   34 00:0A21 -  -  -  -  ;		==== 			=====
   35 00:0A21 -  -  -  -  ;
   36 00:0A21 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:0A21 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0A21 -  -  -  -  ; ***************************************************************************************
    2 00:0A21 -  -  -  -  ; ***************************************************************************************
    3 00:0A21 -  -  -  -  ;
    4 00:0A21 -  -  -  -  ;		Name : 		new.asm
    5 00:0A21 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A21 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0A21 -  -  -  -  ;		Reviewed :	No
    8 00:0A21 -  -  -  -  ;		Purpose :	New command.
    9 00:0A21 -  -  -  -  ;
   10 00:0A21 -  -  -  -  ; ***************************************************************************************
   11 00:0A21 -  -  -  -  ; ***************************************************************************************
   12 00:0A21 -  -  -  -  
   13 00:0A21 -  -  -  -  ; ***************************************************************************************
   14 00:0A21 -  -  -  -  ;
   15 00:0A21 -  -  -  -  ;										NEW command
   16 00:0A21 -  -  -  -  ;
   17 00:0A21 -  -  -  -  ; ***************************************************************************************
   18 00:0A21 -  -  -  -  
   19 00:0A21 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0A21 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0A25 36 00 -  -  		ld 		(hl),0
   22 00:0A27 CD C1 09 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0A2B 3E 00 C3 A1 
              03 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0A31 -  -  -  -  
   25 00:0A31 -  -  -  -  ; ***************************************************************************************
   26 00:0A31 -  -  -  -  ;
   27 00:0A31 -  -  -  -  ;									Changes and Updates
   28 00:0A31 -  -  -  -  ;
   29 00:0A31 -  -  -  -  ; ***************************************************************************************
   30 00:0A31 -  -  -  -  ;
   31 00:0A31 -  -  -  -  ;		Date			Notes
   32 00:0A31 -  -  -  -  ;		==== 			=====
   33 00:0A31 -  -  -  -  ;
   34 00:0A31 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:0A31 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 00:0A31 -  -  -  -  ; ***************************************************************************************
    2 00:0A31 -  -  -  -  ; ***************************************************************************************
    3 00:0A31 -  -  -  -  ;
    4 00:0A31 -  -  -  -  ;		Name : 		for.asm
    5 00:0A31 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A31 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0A31 -  -  -  -  ;		Reviewed :	No
    8 00:0A31 -  -  -  -  ;		Purpose :	For/Next command
    9 00:0A31 -  -  -  -  ;
   10 00:0A31 -  -  -  -  ; ***************************************************************************************
   11 00:0A31 -  -  -  -  
   12 00:0A31 -  -  -  -  ; ***************************************************************************************
   13 00:0A31 -  -  -  -  ;
   14 00:0A31 -  -  -  -  ;									For Command
   15 00:0A31 -  -  -  -  ;
   16 00:0A31 -  -  -  -  ; ***************************************************************************************
   17 00:0A31 -  -  -  -  
   18 00:0A31 -  -  -  -  Command_FOR: ;; [for]
   19 00:0A31 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 00:0A33 CD 1F 0C 00 			call 	StackOpenFrame
   21 00:0A37 -  -  -  -  			;
   22 00:0A37 -  -  -  -  			;		Variable Reference to increment
   23 00:0A37 -  -  -  -  			;
   24 00:0A37 DD E5 -  -  			push	ix 						; save start position
   25 00:0A39 3E FF -  -  			ld 		a,255 					; FOR can create
   26 00:0A3B 32 80 00 00 			ld 		(AllowAutoCreate),a
   27 00:0A3F CD 63 06 00 			call 	EvaluateTerm 			; get term
   28 00:0A43 AF -  -  -  			xor 	a 						; autocreate off.
   29 00:0A44 32 80 00 00 			ld 		(AllowAutoCreate),a
   30 00:0A48 DD E1 -  -  			pop 	ix 						; get start position
   31 00:0A4A E5 -  -  -  			push 	hl 						; save reference address.
   32 00:0A4B -  -  -  -  			;
   33 00:0A4B CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 00:0A4D C2 0B 04 00 			jp 		nz,SyntaxError
   35 00:0A51 EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 00:0A52 -  -  -  -  			;
   37 00:0A52 2A 58 00 00 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 00:0A56 01 06 00 00 			ld 		bc,6
   39 00:0A5A 09 -  -  -  			add 	hl,bc 
   40 00:0A5B D1 -  -  -  			pop 	de 						; get reference.
   41 00:0A5C ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 00:0A62 -  -  -  -  			;
   43 00:0A62 -  -  -  -  			;		var = value
   44 00:0A62 -  -  -  -  			;
   45 00:0A62 CD C3 01 00 			call 	Command_LET 			; so we do I = 1 or whatever.
   46 00:0A66 -  -  -  -  			; 		
   47 00:0A66 -  -  -  -  			; 		TO
   48 00:0A66 -  -  -  -  			;
   49 00:0A66 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 00:0A68 CD 95 03 00 			call 	CheckNextA
   51 00:0A6C -  -  -  -  			;
   52 00:0A6C -  -  -  -  			;		value
   53 00:0A6C -  -  -  -  			;
   54 00:0A6C CD D4 05 00 			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 00:0A70 3E 0A -  -  			ld 		a,10
   56 00:0A72 CD AD 0A 00 			call 	CFWriteHLHLToA 
   57 00:0A76 -  -  -  -  			;
   58 00:0A76 -  -  -  -  			;		Check STEP ?
   59 00:0A76 -  -  -  -  			;
   60 00:0A76 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   61 00:0A7A D9 -  -  -  			exx
   62 00:0A7B 21 00 00 00 			ld 		hl,0
   63 00:0A7F D9 -  -  -  			exx			
   64 00:0A80 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 00:0A83 FE B4 -  -  			cp 		KWD_STEP 				
   66 00:0A85 20 06 -  -  			jr 		nz,_CFDefaultStep
   67 00:0A87 -  -  -  -  			;
   68 00:0A87 DD 23 -  -  			inc 	ix 						; get step
   69 00:0A89 CD D4 05 00 			call 	EvaluateInteger
   70 00:0A8D -  -  -  -  _CFDefaultStep:			
   71 00:0A8D 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 00:0A8F CD AD 0A 00 			call 	CFWriteHLHLToA 
   73 00:0A93 CD 5D 0C 00 			call 	StackSavePosition 		; save loop address
   74 00:0A97 C9 -  -  -  			ret
   75 00:0A98 -  -  -  -  
   76 00:0A98 -  -  -  -  ; ***************************************************************************************
   77 00:0A98 -  -  -  -  ;
   78 00:0A98 -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 00:0A98 -  -  -  -  ;
   80 00:0A98 -  -  -  -  ; ***************************************************************************************
   81 00:0A98 -  -  -  -  
   82 00:0A98 -  -  -  -  CFReadAToHLHL:
   83 00:0A98 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   84 00:0A9C 4F -  -  -  			ld 		c,a
   85 00:0A9D 2A 58 00 00 			ld 		hl,(BasicSP) 			; add stack base
   86 00:0AA1 09 -  -  -  			add 	hl,bc
   87 00:0AA2 -  -  -  -  
   88 00:0AA2 -  -  -  -  CFReadHLToHLHL:
   89 00:0AA2 E5 -  -  -  			push 	hl
   90 00:0AA3 ED 27 -  -  			ld_ind_hl 						; get low word
   91 00:0AA5 D9 -  -  -  			exx
   92 00:0AA6 -  -  -  -  
   93 00:0AA6 E1 -  -  -  			pop 	hl 						; get high word
   94 00:0AA7 23 -  -  -  			inc 	hl
   95 00:0AA8 23 -  -  -  			inc 	hl
   96 00:0AA9 ED 27 -  -  			ld_ind_hl
   97 00:0AAB D9 -  -  -  			exx
   98 00:0AAC -  -  -  -  
   99 00:0AAC C9 -  -  -  			ret
  100 00:0AAD -  -  -  -  
  101 00:0AAD -  -  -  -  ; ***************************************************************************************
  102 00:0AAD -  -  -  -  ;
  103 00:0AAD -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 00:0AAD -  -  -  -  ;
  105 00:0AAD -  -  -  -  ; ***************************************************************************************
  106 00:0AAD -  -  -  -  
  107 00:0AAD -  -  -  -  CFWriteHLHLToA:
  108 00:0AAD EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 00:0AAE D9 -  -  -  			exx
  110 00:0AAF EB -  -  -  			ex 		de,hl
  111 00:0AB0 D9 -  -  -  			exx
  112 00:0AB1 -  -  -  -  
  113 00:0AB1 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  114 00:0AB5 4F -  -  -  			ld 		c,a
  115 00:0AB6 2A 58 00 00 			ld 		hl,(BasicSP) 			; add stack base
  116 00:0ABA 09 -  -  -  			add 	hl,bc
  117 00:0ABB -  -  -  -  
  118 00:0ABB -  -  -  -  CFWriteDEDEToHL:
  119 00:0ABB 73 -  -  -  			ld 		(hl),e 					; write low word
  120 00:0ABC 23 -  -  -  			inc 	hl
  121 00:0ABD 72 -  -  -  			ld 		(hl),d
  122 00:0ABE 23 -  -  -  			inc 	hl
  123 00:0ABF -  -  -  -  
  124 00:0ABF E5 -  -  -  			push 	hl 						; write high word
  125 00:0AC0 D9 -  -  -  			exx
  126 00:0AC1 E1 -  -  -  			pop 	hl
  127 00:0AC2 73 -  -  -  			ld 		(hl),e
  128 00:0AC3 23 -  -  -  			inc 	hl
  129 00:0AC4 72 -  -  -  			ld 		(hl),d
  130 00:0AC5 D9 -  -  -  			exx
  131 00:0AC6 C9 -  -  -  			ret			
  132 00:0AC7 -  -  -  -  
  133 00:0AC7 -  -  -  -  ; ***************************************************************************************
  134 00:0AC7 -  -  -  -  ;
  135 00:0AC7 -  -  -  -  ;									Next Command
  136 00:0AC7 -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 00:0AC7 -  -  -  -  ;
  138 00:0AC7 -  -  -  -  ; ***************************************************************************************
  139 00:0AC7 -  -  -  -  
  140 00:0AC7 -  -  -  -  Command_Next:	;; [next]
  141 00:0AC7 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 00:0AC9 CD 57 0C 00 			call 	StackCheckFrame
  143 00:0ACD -  -  -  -  			;
  144 00:0ACD -  -  -  -  			;		Get address of FOR variable
  145 00:0ACD -  -  -  -  			;
  146 00:0ACD 2A 58 00 00 			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 00:0AD1 01 06 00 00 			ld 		bc,6
  148 00:0AD5 09 -  -  -  			add 	hl,bc
  149 00:0AD6 ED 27 -  -  			ld_ind_hl
  150 00:0AD8 -  -  -  -  			;
  151 00:0AD8 -  -  -  -  			; 		Save reference, read value into DE.
  152 00:0AD8 -  -  -  -  			;
  153 00:0AD8 E5 -  -  -  			push 	hl 						; save index address
  154 00:0AD9 CD A2 0A 00 			call 	CFReadHLToHLHL 			; read the index value.
  155 00:0ADD -  -  -  -  
  156 00:0ADD EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 00:0ADE D9 -  -  -  			exx
  158 00:0ADF EB -  -  -  			ex 		de,hl
  159 00:0AE0 D9 -  -  -  			exx
  160 00:0AE1 -  -  -  -  			;
  161 00:0AE1 -  -  -  -  			; 		Read step and Add
  162 00:0AE1 -  -  -  -  			;
  163 00:0AE1 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 00:0AE3 CD 98 0A 00 			call 	CFReadAToHLHL
  165 00:0AE7 D9 -  -  -  			exx 							; msb of step on stack
  166 00:0AE8 7C -  -  -  			ld 		a,h
  167 00:0AE9 D9 -  -  -  			exx
  168 00:0AEA F5 -  -  -  			push 	af
  169 00:0AEB CD 8C 12 00 			call 	Int32Add 				; add step to offset => HL'HL
  170 00:0AEF -  -  -  -  			;
  171 00:0AEF -  -  -  -  			;		Put result in DE and write back out
  172 00:0AEF -  -  -  -  			;
  173 00:0AEF EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 00:0AF0 D9 -  -  -  			exx
  175 00:0AF1 EB -  -  -  			ex 		de,hl
  176 00:0AF2 D9 -  -  -  			exx
  177 00:0AF3 F1 -  -  -  			pop 	af 						; get msb of step
  178 00:0AF4 E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 00:0AF5 F5 -  -  -  			push 	af 						; push msb of step back.
  180 00:0AF6 CD BB 0A 00 			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 00:0AFA -  -  -  -  			;
  182 00:0AFA -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 00:0AFA -  -  -  -  			;
  184 00:0AFA 3E 0A -  -  			ld 		a,10 					; load limit
  185 00:0AFC CD 98 0A 00 			call 	CFReadAToHLHL
  186 00:0B00 CD CC 12 00 			call 	Int32Compare 			; compare limit to index.
  187 00:0B04 C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 00:0B05 B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 00:0B06 28 0A -  -  			jr 		z,_CNXLoopBack
  190 00:0B08 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 00:0B0A 28 02 -  -  			jr 		z,_CNXNotMStep
  192 00:0B0C EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 00:0B0E -  -  -  -  _CNXNotMStep:			
  194 00:0B0E E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 00:0B10 20 04 -  -  			jr 		nz,_CNXLoopOver
  196 00:0B12 -  -  -  -  			;
  197 00:0B12 -  -  -  -  			;		For loop goes round again.
  198 00:0B12 -  -  -  -  			;
  199 00:0B12 -  -  -  -  _CNXLoopBack:			
  200 00:0B12 C3 78 0C 00 			jp 		StackLoadPosition
  201 00:0B16 -  -  -  -  			;
  202 00:0B16 -  -  -  -  			;		For loop completed
  203 00:0B16 -  -  -  -  			;
  204 00:0B16 -  -  -  -  _CNXLoopOver:
  205 00:0B16 C3 44 0C 00 			jp 		StackCloseFrame
  206 00:0B1A F5 3E 02 32 
              FF FF FF F1 			debug
  207 00:0B22 -  -  -  -  
  208 00:0B22 -  -  -  -  ; ***************************************************************************************
  209 00:0B22 -  -  -  -  ;
  210 00:0B22 -  -  -  -  ;									Changes and Updates
  211 00:0B22 -  -  -  -  ;
  212 00:0B22 -  -  -  -  ; ***************************************************************************************
  213 00:0B22 -  -  -  -  ;
  214 00:0B22 -  -  -  -  ;		Date			Notes
  215 00:0B22 -  -  -  -  ;		==== 			=====
  216 00:0B22 -  -  -  -  ;
  217 00:0B22 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0B22 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:0B22 -  -  -  -  ; ***************************************************************************************
    2 00:0B22 -  -  -  -  ; ***************************************************************************************
    3 00:0B22 -  -  -  -  ;
    4 00:0B22 -  -  -  -  ;		Name : 		gosub.asm
    5 00:0B22 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B22 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0B22 -  -  -  -  ;		Reviewed :	No
    8 00:0B22 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:0B22 -  -  -  -  ;
   10 00:0B22 -  -  -  -  ; ***************************************************************************************
   11 00:0B22 -  -  -  -  
   12 00:0B22 -  -  -  -  ; ***************************************************************************************
   13 00:0B22 -  -  -  -  ;
   14 00:0B22 -  -  -  -  ;									Gosub Command
   15 00:0B22 -  -  -  -  ;
   16 00:0B22 -  -  -  -  ; ***************************************************************************************
   17 00:0B22 -  -  -  -  
   18 00:0B22 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:0B22 3E 13 -  -  			ld		a,STM_GOSUB
   20 00:0B24 CD 1F 0C 00 			call 	StackOpenFrame
   21 00:0B28 CD 57 0B 00 			call 	GoGetLineNumber
   22 00:0B2C E5 -  -  -  			push 	hl
   23 00:0B2D CD 5D 0C 00 			call 	StackSavePosition
   24 00:0B31 E1 -  -  -  			pop 	hl
   25 00:0B32 CD 64 0B 00 			call	TransferToLineHL
   26 00:0B36 C9 -  -  -  			ret
   27 00:0B37 -  -  -  -  
   28 00:0B37 -  -  -  -  ; ***************************************************************************************
   29 00:0B37 -  -  -  -  ;
   30 00:0B37 -  -  -  -  ;									Return command
   31 00:0B37 -  -  -  -  ;
   32 00:0B37 -  -  -  -  ; ***************************************************************************************
   33 00:0B37 -  -  -  -  
   34 00:0B37 -  -  -  -  Command_Return: ;; [return]
   35 00:0B37 3E 13 -  -  			ld		a,STM_GOSUB
   36 00:0B39 CD 57 0C 00 			call 	StackCheckFrame
   37 00:0B3D 20 09 -  -  			jr 		nz,_ReturnError
   38 00:0B3F CD 78 0C 00 			call 	StackLoadPosition
   39 00:0B43 CD 44 0C 00 			call 	StackCloseFrame
   40 00:0B47 C9 -  -  -  			ret
   41 00:0B48 -  -  -  -  _ReturnError:
   42 00:0B48 3E 07 C3 A1 
              03 00 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:0B4E -  -  -  -  
   44 00:0B4E -  -  -  -  ; ***************************************************************************************
   45 00:0B4E -  -  -  -  ;
   46 00:0B4E -  -  -  -  ;									Changes and Updates
   47 00:0B4E -  -  -  -  ;
   48 00:0B4E -  -  -  -  ; ***************************************************************************************
   49 00:0B4E -  -  -  -  ;
   50 00:0B4E -  -  -  -  ;		Date			Notes
   51 00:0B4E -  -  -  -  ;		==== 			=====
   52 00:0B4E -  -  -  -  ;
   53 00:0B4E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0B4E -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:0B4E -  -  -  -  ; ***************************************************************************************
    2 00:0B4E -  -  -  -  ; ***************************************************************************************
    3 00:0B4E -  -  -  -  ;
    4 00:0B4E -  -  -  -  ;		Name : 		goto.asm
    5 00:0B4E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B4E -  -  -  -  ;		Date : 		6th June 2022
    7 00:0B4E -  -  -  -  ;		Reviewed :	No
    8 00:0B4E -  -  -  -  ;		Purpose :	Goto command
    9 00:0B4E -  -  -  -  ;
   10 00:0B4E -  -  -  -  ; ***************************************************************************************
   11 00:0B4E -  -  -  -  
   12 00:0B4E -  -  -  -  ; ***************************************************************************************
   13 00:0B4E -  -  -  -  ;
   14 00:0B4E -  -  -  -  ;									Goto Command
   15 00:0B4E -  -  -  -  ;
   16 00:0B4E -  -  -  -  ; ***************************************************************************************
   17 00:0B4E -  -  -  -  
   18 00:0B4E -  -  -  -  Command_GOTO: ;; [goto]
   19 00:0B4E CD 57 0B 00 			call 	GoGetLineNumber
   20 00:0B52 CD 64 0B 00 			call	TransferToLineHL
   21 00:0B56 C9 -  -  -  			ret
   22 00:0B57 -  -  -  -  
   23 00:0B57 -  -  -  -  ; ***************************************************************************************
   24 00:0B57 -  -  -  -  ;
   25 00:0B57 -  -  -  -  ;							Get and validate a line number in HL
   26 00:0B57 -  -  -  -  ;
   27 00:0B57 -  -  -  -  ; ***************************************************************************************
   28 00:0B57 -  -  -  -  
   29 00:0B57 -  -  -  -  GoGetLineNumber:
   30 00:0B57 CD D4 05 00 			call 	EvaluateInteger
   31 00:0B5B D9 -  -  -  			exx
   32 00:0B5C 7C -  -  -  			ld 		a,h
   33 00:0B5D B5 -  -  -  			or 		l
   34 00:0B5E D9 -  -  -  			exx
   35 00:0B5F C8 -  -  -  			ret 	z
   36 00:0B60 C3 05 04 00 			jp 		BadValue
   37 00:0B64 -  -  -  -  
   38 00:0B64 -  -  -  -  ; ***************************************************************************************
   39 00:0B64 -  -  -  -  ;
   40 00:0B64 -  -  -  -  ;							Transfer to Line Number HL
   41 00:0B64 -  -  -  -  ;
   42 00:0B64 -  -  -  -  ; ***************************************************************************************
   43 00:0B64 -  -  -  -  
   44 00:0B64 -  -  -  -  TransferToLineHL:
   45 00:0B64 EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:0B65 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:0B69 DD 2A 38 00 
              00 -  -  -  			ld 		ix,(CodeAddress)
   48 00:0B6E -  -  -  -  _TLSearch:	
   49 00:0B6E DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:0B70 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:0B73 B7 -  -  -  			or 		a 						; if zero
   52 00:0B74 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:0B76 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:0B77 -  -  -  -  
   55 00:0B77 7B -  -  -  			ld 		a,e						; compare line address
   56 00:0B78 DD BE 01 -  			cp 		(ix+1)
   57 00:0B7B 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:0B7D 7A -  -  -  			ld 		a,d
   59 00:0B7E DD BE 02 -  			cp 		(ix+2)
   60 00:0B81 20 EB -  -  			jr 		nz,_TLSearch
   61 00:0B83 -  -  -  -  			;
   62 00:0B83 DD 22 5C 00 
              00 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 00:0B88 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:0B8A DD 23 -  -  			inc 	ix
   65 00:0B8C DD 23 -  -  			inc 	ix
   66 00:0B8E -  -  -  -  
   67 00:0B8E C9 -  -  -  			ret
   68 00:0B8F -  -  -  -  
   69 00:0B8F -  -  -  -  _TLNotFound:
   70 00:0B8F 3E 09 C3 A1 
              03 00 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:0B95 -  -  -  -  
   72 00:0B95 -  -  -  -  ; ***************************************************************************************
   73 00:0B95 -  -  -  -  ;
   74 00:0B95 -  -  -  -  ;									Changes and Updates
   75 00:0B95 -  -  -  -  ;
   76 00:0B95 -  -  -  -  ; ***************************************************************************************
   77 00:0B95 -  -  -  -  ;
   78 00:0B95 -  -  -  -  ;		Date			Notes
   79 00:0B95 -  -  -  -  ;		==== 			=====
   80 00:0B95 -  -  -  -  ;
   81 00:0B95 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:0B95 -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 00:0B95 -  -  -  -  ; ***************************************************************************************
    2 00:0B95 -  -  -  -  ; ***************************************************************************************
    3 00:0B95 -  -  -  -  ;
    4 00:0B95 -  -  -  -  ;		Name : 		if.asm
    5 00:0B95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B95 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0B95 -  -  -  -  ;		Reviewed :	No
    8 00:0B95 -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 00:0B95 -  -  -  -  ;
   10 00:0B95 -  -  -  -  ; ***************************************************************************************
   11 00:0B95 -  -  -  -  
   12 00:0B95 -  -  -  -  ; ***************************************************************************************
   13 00:0B95 -  -  -  -  ;
   14 00:0B95 -  -  -  -  ;									If Command
   15 00:0B95 -  -  -  -  ;
   16 00:0B95 -  -  -  -  ; ***************************************************************************************
   17 00:0B95 -  -  -  -  
   18 00:0B95 -  -  -  -  Command_IF: ;; [if]
   19 00:0B95 CD D4 05 00 		call 	EvaluateInteger 			; work out the test.
   20 00:0B99 CD C5 12 00 		call 	Int32Zero 					; test if zero
   21 00:0B9D 28 1D -  -  		jr 		z,_IFFail
   22 00:0B9F -  -  -  -  		;
   23 00:0B9F -  -  -  -  		;	 	Passed
   24 00:0B9F -  -  -  -  		;
   25 00:0B9F DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 00:0BA2 DD 23 -  -  		inc 	ix
   27 00:0BA4 FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 00:0BA6 CA 4E 0B 00 		jp 		z,Command_GOTO
   29 00:0BAA FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 00:0BAC C2 0B 04 00 		jp 		nz,SyntaxError
   31 00:0BB0 DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 00:0BB3 E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 00:0BB5 FE 40 -  -  		cp 		$40
   34 00:0BB7 CA 4E 0B 00 		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 00:0BBB C9 -  -  -  		ret 								; otherwise carry on.
   36 00:0BBC -  -  -  -  		;
   37 00:0BBC -  -  -  -  		;		Failed.
   38 00:0BBC -  -  -  -  		;
   39 00:0BBC -  -  -  -  _IFFail:
   40 00:0BBC 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 00:0BBE 0E B1 -  -  		ld 		c,KWD_ELSE
   42 00:0BC0 CD F9 0B 00 		call 	SearchForwardTokens 		; searching forward.
   43 00:0BC4 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 00:0BC6 CA AC 01 00 		jp 		z,EOLHandler 				; do the next line code.
   45 00:0BCA C9 -  -  -  		ret 								; otherwise carry on.
   46 00:0BCB -  -  -  -  
   47 00:0BCB -  -  -  -  ; ***************************************************************************************
   48 00:0BCB -  -  -  -  ;
   49 00:0BCB -  -  -  -  ;						Else command => Progress to next line
   50 00:0BCB -  -  -  -  ;
   51 00:0BCB -  -  -  -  ; ***************************************************************************************
   52 00:0BCB -  -  -  -  
   53 00:0BCB -  -  -  -  Command_Else: ;; [else]
   54 00:0BCB C3 AC 01 00 		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 00:0BCF -  -  -  -  
   56 00:0BCF -  -  -  -  ; ***************************************************************************************
   57 00:0BCF -  -  -  -  ;
   58 00:0BCF -  -  -  -  ;									Changes and Updates
   59 00:0BCF -  -  -  -  ;
   60 00:0BCF -  -  -  -  ; ***************************************************************************************
   61 00:0BCF -  -  -  -  ;
   62 00:0BCF -  -  -  -  ;		Date			Notes
   63 00:0BCF -  -  -  -  ;		==== 			=====
   64 00:0BCF -  -  -  -  ;
   65 00:0BCF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:0BCF -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:0BCF -  -  -  -  ; ***************************************************************************************
    2 00:0BCF -  -  -  -  ; ***************************************************************************************
    3 00:0BCF -  -  -  -  ;
    4 00:0BCF -  -  -  -  ;		Name : 		repeat.asm
    5 00:0BCF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BCF -  -  -  -  ;		Date : 		7th June 2022
    7 00:0BCF -  -  -  -  ;		Reviewed :	No
    8 00:0BCF -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:0BCF -  -  -  -  ;
   10 00:0BCF -  -  -  -  ; ***************************************************************************************
   11 00:0BCF -  -  -  -  
   12 00:0BCF -  -  -  -  ; ***************************************************************************************
   13 00:0BCF -  -  -  -  ;
   14 00:0BCF -  -  -  -  ;									Repeat Command
   15 00:0BCF -  -  -  -  ;
   16 00:0BCF -  -  -  -  ; ***************************************************************************************
   17 00:0BCF -  -  -  -  
   18 00:0BCF -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:0BCF 3E 23 -  -  			ld		a,STM_REPEAT
   20 00:0BD1 CD 1F 0C 00 			call 	StackOpenFrame
   21 00:0BD5 CD 5D 0C 00 			call 	StackSavePosition
   22 00:0BD9 C9 -  -  -  			ret
   23 00:0BDA -  -  -  -  
   24 00:0BDA -  -  -  -  ; ***************************************************************************************
   25 00:0BDA -  -  -  -  ;
   26 00:0BDA -  -  -  -  ;									Until command
   27 00:0BDA -  -  -  -  ;
   28 00:0BDA -  -  -  -  ; ***************************************************************************************
   29 00:0BDA -  -  -  -  
   30 00:0BDA -  -  -  -  Command_Until: ;; [until]
   31 00:0BDA 3E 23 -  -  			ld		a,STM_REPEAT
   32 00:0BDC CD 57 0C 00 			call 	StackCheckFrame
   33 00:0BE0 20 11 -  -  			jr 		nz,_UntilError
   34 00:0BE2 CD D4 05 00 			call	EvaluateInteger 		; until what
   35 00:0BE6 CD C5 12 00 			call 	Int32Zero 				; check zero
   36 00:0BEA CA 78 0C 00 			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:0BEE CD 44 0C 00 			call 	StackCloseFrame 		; otherwise end frame.
   38 00:0BF2 C9 -  -  -  			ret
   39 00:0BF3 -  -  -  -  _UntilError:
   40 00:0BF3 3E 14 C3 A1 
              03 00 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:0BF9 -  -  -  -  
   42 00:0BF9 -  -  -  -  ; ***************************************************************************************
   43 00:0BF9 -  -  -  -  ;
   44 00:0BF9 -  -  -  -  ;									Changes and Updates
   45 00:0BF9 -  -  -  -  ;
   46 00:0BF9 -  -  -  -  ; ***************************************************************************************
   47 00:0BF9 -  -  -  -  ;
   48 00:0BF9 -  -  -  -  ;		Date			Notes
   49 00:0BF9 -  -  -  -  ;		==== 			=====
   50 00:0BF9 -  -  -  -  ;
   51 00:0BF9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0BF9 -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 00:0BF9 -  -  -  -  ; ***************************************************************************************
    2 00:0BF9 -  -  -  -  ; ***************************************************************************************
    3 00:0BF9 -  -  -  -  ;
    4 00:0BF9 -  -  -  -  ;		Name : 		search.asm
    5 00:0BF9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0BF9 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0BF9 -  -  -  -  ;		Reviewed :	No
    8 00:0BF9 -  -  -  -  ;		Purpose :	Search forward for token
    9 00:0BF9 -  -  -  -  ;
   10 00:0BF9 -  -  -  -  ; ***************************************************************************************
   11 00:0BF9 -  -  -  -  
   12 00:0BF9 -  -  -  -  ; ***************************************************************************************
   13 00:0BF9 -  -  -  -  ;
   14 00:0BF9 -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 00:0BF9 -  -  -  -  ; 		and IX points to next byte.
   16 00:0BF9 -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 00:0BF9 -  -  -  -  ;
   18 00:0BF9 -  -  -  -  ; ***************************************************************************************
   19 00:0BF9 -  -  -  -  
   20 00:0BF9 -  -  -  -  SearchForwardTokens:
   21 00:0BF9 DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 00:0BFC DD 23 -  -  		inc 	ix
   23 00:0BFE B8 -  -  -  		cp 		b 							; exit if either found.
   24 00:0BFF C8 -  -  -  		ret 	z
   25 00:0C00 B9 -  -  -  		cp 		c
   26 00:0C01 C8 -  -  -  		ret 	z
   27 00:0C02 -  -  -  -  		;
   28 00:0C02 FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 00:0C04 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 00:0C06 -  -  -  -  
   31 00:0C06 11 00 00 00 		ld 		de,0 						; put length into DE
   32 00:0C0A DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0C0D 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 00:0C0E 13 -  -  -  		inc 	de
   35 00:0C0F DD 19 -  -  		add 	ix,de 						; jump forward
   36 00:0C11 18 E6 -  -  		jr 		SearchForwardTokens
   37 00:0C13 -  -  -  -  
   38 00:0C13 -  -  -  -  ; ***************************************************************************************
   39 00:0C13 -  -  -  -  ;
   40 00:0C13 -  -  -  -  ;									Changes and Updates
   41 00:0C13 -  -  -  -  ;
   42 00:0C13 -  -  -  -  ; ***************************************************************************************
   43 00:0C13 -  -  -  -  ;
   44 00:0C13 -  -  -  -  ;		Date			Notes
   45 00:0C13 -  -  -  -  ;		==== 			=====
   46 00:0C13 -  -  -  -  ;
   47 00:0C13 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0C13 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:0C13 -  -  -  -  ; ***************************************************************************************
    2 00:0C13 -  -  -  -  ; ***************************************************************************************
    3 00:0C13 -  -  -  -  ;
    4 00:0C13 -  -  -  -  ;		Name : 		stack.asm
    5 00:0C13 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C13 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0C13 -  -  -  -  ;		Reviewed :	No
    8 00:0C13 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0C13 -  -  -  -  ;
   10 00:0C13 -  -  -  -  ; ***************************************************************************************
   11 00:0C13 -  -  -  -  ; ***************************************************************************************
   12 00:0C13 -  -  -  -  ;
   13 00:0C13 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:0C13 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 00:0C13 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:0C13 -  -  -  -  ;
   17 00:0C13 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:0C13 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:0C13 -  -  -  -  ;
   20 00:0C13 -  -  -  -  ; ***************************************************************************************
   21 00:0C13 -  -  -  -  ;
   22 00:0C13 -  -  -  -  ;								Clear the stack
   23 00:0C13 -  -  -  -  ;
   24 00:0C13 -  -  -  -  ; ***************************************************************************************
   25 00:0C13 -  -  -  -  
   26 00:0C13 -  -  -  -  StackReset:
   27 00:0C13 2A 3C 00 00 		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:0C17 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:0C18 22 58 00 00 		ld 		(BasicSP),hl 				; write out current position
   30 00:0C1C 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:0C1E C9 -  -  -  		ret
   32 00:0C1F -  -  -  -  
   33 00:0C1F -  -  -  -  ; ***************************************************************************************
   34 00:0C1F -  -  -  -  ;
   35 00:0C1F -  -  -  -  ;								Open a stack frame type A
   36 00:0C1F -  -  -  -  ;
   37 00:0C1F -  -  -  -  ; ***************************************************************************************
   38 00:0C1F -  -  -  -  
   39 00:0C1F -  -  -  -  StackOpenFrame:
   40 00:0C1F F5 -  -  -  		push 	af 							; save frame type
   41 00:0C20 E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:0C22 87 -  -  -  		add 	a,a 						; double it
   43 00:0C23 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 00:0C27 5F -  -  -  		ld 		e,a
   45 00:0C28 2A 58 00 00 		ld 		hl,(BasicSP) 				; get stack pointer
   46 00:0C2C AF -  -  -  		xor 	a
   47 00:0C2D ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 00:0C2F 22 58 00 00 		ld 		(BasicSP),hl
   49 00:0C33 F1 -  -  -  		pop 	af 							; copy out frame type
   50 00:0C34 77 -  -  -  		ld 		(hl),a
   51 00:0C35 ED 5B 40 00 
              00 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 00:0C3A AF -  -  -  		xor 	a
   53 00:0C3B ED 52 -  -  		sbc 	hl,de
   54 00:0C3D D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 00:0C3E 3E 15 C3 A1 
              03 00 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 00:0C44 -  -  -  -  
   57 00:0C44 -  -  -  -  ; ***************************************************************************************
   58 00:0C44 -  -  -  -  ;
   59 00:0C44 -  -  -  -  ;								Close Stack Frame
   60 00:0C44 -  -  -  -  ;
   61 00:0C44 -  -  -  -  ; ***************************************************************************************
   62 00:0C44 -  -  -  -  
   63 00:0C44 -  -  -  -  StackCloseFrame:
   64 00:0C44 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   65 00:0C48 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 00:0C49 E6 0F -  -  		and 	$0F 						; put into UDE
   67 00:0C4B 87 -  -  -  		add 	a,a 						; double it
   68 00:0C4C 11 00 00 00 		ld 		de,$000000
   69 00:0C50 5F -  -  -  		ld 		e,a
   70 00:0C51 19 -  -  -  		add 	hl,de 						; close it
   71 00:0C52 22 58 00 00 		ld 		(BasicSP),hl 				; write it back
   72 00:0C56 C9 -  -  -  		ret
   73 00:0C57 -  -  -  -  
   74 00:0C57 -  -  -  -  ; ***************************************************************************************
   75 00:0C57 -  -  -  -  ;
   76 00:0C57 -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 00:0C57 -  -  -  -  ;
   78 00:0C57 -  -  -  -  ; ***************************************************************************************
   79 00:0C57 -  -  -  -  
   80 00:0C57 -  -  -  -  StackCheckFrame:
   81 00:0C57 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   82 00:0C5B BE -  -  -  		cp 		(hl) 						; get stack marker
   83 00:0C5C C9 -  -  -  		ret
   84 00:0C5D -  -  -  -  
   85 00:0C5D -  -  -  -  ; ***************************************************************************************
   86 00:0C5D -  -  -  -  ;
   87 00:0C5D -  -  -  -  ;								Save position on stack
   88 00:0C5D -  -  -  -  ;
   89 00:0C5D -  -  -  -  ; ***************************************************************************************
   90 00:0C5D -  -  -  -  
   91 00:0C5D -  -  -  -  StackSavePosition:
   92 00:0C5D 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 00:0C61 23 -  -  -  		inc 	hl
   94 00:0C62 ED 5B 5C 00 
              00 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 00:0C67 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 00:0C6D -  -  -  -  		;
   97 00:0C6D E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 00:0C6E DD E5 -  -  		push 	ix 							; HL = current position
   99 00:0C70 E1 -  -  -  		pop 	hl
  100 00:0C71 AF -  -  -  		xor 	a 							; calculate offset
  101 00:0C72 ED 52 -  -  		sbc 	hl,de
  102 00:0C74 7D -  -  -  		ld 		a,l 						; into A
  103 00:0C75 E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 00:0C76 77 -  -  -  		ld 		(hl),a
  105 00:0C77 C9 -  -  -  		ret
  106 00:0C78 -  -  -  -  
  107 00:0C78 -  -  -  -  ; ***************************************************************************************
  108 00:0C78 -  -  -  -  ;
  109 00:0C78 -  -  -  -  ;								Load position off stack
  110 00:0C78 -  -  -  -  ;
  111 00:0C78 -  -  -  -  ; ***************************************************************************************
  112 00:0C78 -  -  -  -  
  113 00:0C78 -  -  -  -  StackLoadPosition:
  114 00:0C78 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 00:0C7C 23 -  -  -  		inc 	hl
  116 00:0C7D E5 -  -  -  		push 	hl 							; save on stack
  117 00:0C7E ED 27 -  -  		ld_ind_hl 							; get start of line
  118 00:0C80 22 5C 00 00 		ld 		(CurrentLineStart),hl 		; write it back
  119 00:0C84 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 00:0C85 13 -  -  -  		inc 	de
  121 00:0C86 13 -  -  -  		inc 	de
  122 00:0C87 13 -  -  -  		inc 	de
  123 00:0C88 13 -  -  -  		inc 	de
  124 00:0C89 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 00:0C8A 11 00 00 00 		ld 		de,$000000
  126 00:0C8E 5F -  -  -  		ld 		e,a
  127 00:0C8F 19 -  -  -  		add 	hl,de 						; add to start => position
  128 00:0C90 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 00:0C91 DD E1 -  -  		pop 	ix
  130 00:0C93 C9 -  -  -  		ret
  131 00:0C94 -  -  -  -  
  132 00:0C94 -  -  -  -  ; ***************************************************************************************
  133 00:0C94 -  -  -  -  ;
  134 00:0C94 -  -  -  -  ;									Changes and Updates
  135 00:0C94 -  -  -  -  ;
  136 00:0C94 -  -  -  -  ; ***************************************************************************************
  137 00:0C94 -  -  -  -  ;
  138 00:0C94 -  -  -  -  ;		Date			Notes
  139 00:0C94 -  -  -  -  ;		==== 			=====
  140 00:0C94 -  -  -  -  ;
  141 00:0C94 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:0C94 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0C94 -  -  -  -  ; ***************************************************************************************
    2 00:0C94 -  -  -  -  ; ***************************************************************************************
    3 00:0C94 -  -  -  -  ;
    4 00:0C94 -  -  -  -  ;		Name : 		utility.asm
    5 00:0C94 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C94 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0C94 -  -  -  -  ;		Reviewed :	No
    8 00:0C94 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0C94 -  -  -  -  ;
   10 00:0C94 -  -  -  -  ; ***************************************************************************************
   11 00:0C94 -  -  -  -  ; ***************************************************************************************
   12 00:0C94 -  -  -  -  
   13 00:0C94 -  -  -  -  ; ***************************************************************************************
   14 00:0C94 -  -  -  -  ;
   15 00:0C94 -  -  -  -  ;							Print ASCII string at HL
   16 00:0C94 -  -  -  -  ;
   17 00:0C94 -  -  -  -  ; ***************************************************************************************
   18 00:0C94 -  -  -  -  
   19 00:0C94 -  -  -  -  PrintStringAtHL:
   20 00:0C94 7E -  -  -  		ld 		a,(hl)
   21 00:0C95 FE 20 -  -  		cp 		$20		
   22 00:0C97 D8 -  -  -  		ret 	c
   23 00:0C98 CD 5C 13 00 		call 	SYSPrintChar
   24 00:0C9C 23 -  -  -  		inc 	hl
   25 00:0C9D 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0C9F -  -  -  -  
   27 00:0C9F -  -  -  -  ; ***************************************************************************************
   28 00:0C9F -  -  -  -  ;
   29 00:0C9F -  -  -  -  ;									Changes and Updates
   30 00:0C9F -  -  -  -  ;
   31 00:0C9F -  -  -  -  ; ***************************************************************************************
   32 00:0C9F -  -  -  -  ;
   33 00:0C9F -  -  -  -  ;		Date			Notes
   34 00:0C9F -  -  -  -  ;		==== 			=====
   35 00:0C9F -  -  -  -  ;
   36 00:0C9F -  -  -  -  ; ***************************************************************************************
   37 00:0C9F -  -  -  -  		
Listing for file "_build.asm"
   65 00:0C9F -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0C9F -  -  -  -  ; ***************************************************************************************
    2 00:0C9F -  -  -  -  ; ***************************************************************************************
    3 00:0C9F -  -  -  -  ;
    4 00:0C9F -  -  -  -  ;		Name : 		create.asm
    5 00:0C9F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C9F -  -  -  -  ;		Date : 		4th June 2022
    7 00:0C9F -  -  -  -  ;		Reviewed :	No
    8 00:0C9F -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0C9F -  -  -  -  ;
   10 00:0C9F -  -  -  -  ; ***************************************************************************************
   11 00:0C9F -  -  -  -  ; ***************************************************************************************
   12 00:0C9F -  -  -  -  
   13 00:0C9F -  -  -  -  ; ***************************************************************************************
   14 00:0C9F -  -  -  -  ;
   15 00:0C9F -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0C9F -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0C9F -  -  -  -  ;
   18 00:0C9F -  -  -  -  ; ***************************************************************************************
   19 00:0C9F -  -  -  -  
   20 00:0C9F -  -  -  -  VariableCreate:		
   21 00:0C9F -  -  -  -  		;
   22 00:0C9F -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:0C9F -  -  -  -  		;
   24 00:0C9F 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:0CA3 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:0CA4 E5 -  -  -  		push 	hl 							; save count.
   27 00:0CA5 CD 9F 09 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0CA9 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0CAA -  -  -  -  		;
   30 00:0CAA -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0CAA -  -  -  -  		;
   32 00:0CAA E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0CAB -  -  -  -  _VCClear:
   34 00:0CAB 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0CAD 23 -  -  -  		inc 	hl
   36 00:0CAE 0B -  -  -  		dec 	bc
   37 00:0CAF 78 -  -  -  		ld		a,b
   38 00:0CB0 B1 -  -  -  		or 		c
   39 00:0CB1 20 F8 -  -  		jr 		nz,_VCClear
   40 00:0CB3 E1 -  -  -  		pop 	hl							; restore start address
   41 00:0CB4 -  -  -  -  		;
   42 00:0CB4 -  -  -  -  		;		Now start to create the data.
   43 00:0CB4 -  -  -  -  		;
   44 00:0CB4 E5 -  -  -  		push 	hl 							; save start
   45 00:0CB5 -  -  -  -  		;
   46 00:0CB5 -  -  -  -  		;		Write hash to +0
   47 00:0CB5 -  -  -  -  		;
   48 00:0CB5 3A 88 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0CB9 77 -  -  -  		ld 		(hl),a
   50 00:0CBA 23 -  -  -  		inc 	hl
   51 00:0CBB -  -  -  -  		;
   52 00:0CBB -  -  -  -  		;		Write list head to +1
   53 00:0CBB -  -  -  -  		;
   54 00:0CBB E5 -  -  -  		push 	hl 							; save write position
   55 00:0CBC 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0CC0 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:0CC2 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:0CC3 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:0CC4 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0CCA -  -  -  -  		;
   61 00:0CCA -  -  -  -  		;		Write variable name to +5
   62 00:0CCA -  -  -  -  		;
   63 00:0CCA ED 5B 84 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:0CCF ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:0CD5 -  -  -  -  		;
   66 00:0CD5 D1 -  -  -  		pop 	de 							; get the start address back
   67 00:0CD6 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0CDA ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:0CE0 -  -  -  -  		;
   70 00:0CE0 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:0CE1 C9 -  -  -  		ret
   72 00:0CE2 -  -  -  -  
   73 00:0CE2 -  -  -  -  ; ***************************************************************************************
   74 00:0CE2 -  -  -  -  ;
   75 00:0CE2 -  -  -  -  ;									Changes and Updates
   76 00:0CE2 -  -  -  -  ;
   77 00:0CE2 -  -  -  -  ; ***************************************************************************************
   78 00:0CE2 -  -  -  -  ;
   79 00:0CE2 -  -  -  -  ;		Date			Notes
   80 00:0CE2 -  -  -  -  ;		==== 			=====
   81 00:0CE2 -  -  -  -  ;
   82 00:0CE2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0CE2 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0CE2 -  -  -  -  ; ***************************************************************************************
    2 00:0CE2 -  -  -  -  ; ***************************************************************************************
    3 00:0CE2 -  -  -  -  ;
    4 00:0CE2 -  -  -  -  ;		Name : 		find.asm
    5 00:0CE2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CE2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0CE2 -  -  -  -  ;		Reviewed :	No
    8 00:0CE2 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0CE2 -  -  -  -  ;
   10 00:0CE2 -  -  -  -  ; ***************************************************************************************
   11 00:0CE2 -  -  -  -  ; ***************************************************************************************
   12 00:0CE2 -  -  -  -  
   13 00:0CE2 -  -  -  -  ; ***************************************************************************************
   14 00:0CE2 -  -  -  -  ;
   15 00:0CE2 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0CE2 -  -  -  -  ; 		variable information at (IX)
   17 00:0CE2 -  -  -  -  ;
   18 00:0CE2 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0CE2 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0CE2 -  -  -  -  ;
   21 00:0CE2 -  -  -  -  ; ***************************************************************************************
   22 00:0CE2 -  -  -  -  
   23 00:0CE2 -  -  -  -  FindVariable:
   24 00:0CE2 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0CE5 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0CE7 D2 0B 04 00 		jp 		nc,SyntaxError 		
   27 00:0CEB -  -  -  -  
   28 00:0CEB DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0CEE FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0CF0 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0CF2 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0CF4 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0CF6 -  -  -  -  		;
   34 00:0CF6 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0CF6 -  -  -  -  		;
   36 00:0CF6 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0CFA DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0CFD 87 -  -  -  		add 	a,a 						; x4
   39 00:0CFE 87 -  -  -  		add 	a,a
   40 00:0CFF B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0D00 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0D01 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0D03 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0D05 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:0D07 AF -  -  -  		xor 	a 							; clear carry and return
   46 00:0D08 C9 -  -  -  		ret
   47 00:0D09 -  -  -  -  		;
   48 00:0D09 -  -  -  -  		;		Not a standard simple variable.
   49 00:0D09 -  -  -  -  		;
   50 00:0D09 -  -  -  -  _FVNotSimple:
   51 00:0D09 CD 6F 0D 00 		call 	VariableInformation 		; get information about the variable.
   52 00:0D0D CD AB 0D 00 		call 	VariableSearchList 			; search the linked list
   53 00:0D11 38 14 -  -  		jr 		c,_FVNotFound  				
   54 00:0D13 -  -  -  -  		;
   55 00:0D13 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0D13 -  -  -  -  		;
   57 00:0D13 -  -  -  -  _FVExitReference:		
   58 00:0D13 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:0D17 19 -  -  -  		add 	hl,de 
   60 00:0D18 -  -  -  -  		;
   61 00:0D18 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:0D18 -  -  -  -  		;
   63 00:0D18 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:0D1B FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:0D1D CC 46 0D 00 		call 	z,ArrayLookup 				; array access required.
   66 00:0D21 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:0D23 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:0D25 AF -  -  -  		xor 	a 							; clear carry and return
   69 00:0D26 C9 -  -  -  		ret
   70 00:0D27 -  -  -  -  		;
   71 00:0D27 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:0D27 -  -  -  -  		;
   73 00:0D27 -  -  -  -  _FVNotFound:		
   74 00:0D27 3A 80 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:0D2B B7 -  -  -  		or 		a
   76 00:0D2C 28 11 -  -  		jr 		z,_FVFail
   77 00:0D2E DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:0D31 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:0D33 28 0A -  -  		jr 		z,_FVFail
   80 00:0D35 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 00:0D39 CD 9F 0C 00 		call 	VariableCreate 				; create a new variable.
   82 00:0D3D 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:0D3F -  -  -  -  
   84 00:0D3F -  -  -  -  _FVFail:
   85 00:0D3F DD 2A 84 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:0D44 37 -  -  -  		scf
   87 00:0D45 C9 -  -  -  		ret
   88 00:0D46 -  -  -  -  
   89 00:0D46 -  -  -  -  ; ***************************************************************************************
   90 00:0D46 -  -  -  -  ;
   91 00:0D46 -  -  -  -  ;									 Array lookup
   92 00:0D46 -  -  -  -  ;
   93 00:0D46 -  -  -  -  ; ***************************************************************************************
   94 00:0D46 -  -  -  -  
   95 00:0D46 -  -  -  -  ArrayLookup:
   96 00:0D46 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:0D47 CD AE 05 00 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:0D4B D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:0D4C 7C -  -  -  		ld 		a,h
  100 00:0D4D B5 -  -  -  		or 		l
  101 00:0D4E D9 -  -  -  		exx
  102 00:0D4F 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:0D51 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:0D55 54 -  -  -  		ld 		d,h
  105 00:0D56 5D -  -  -  		ld 		e,l
  106 00:0D57 E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:0D58 E5 -  -  -  		push 	hl
  108 00:0D59 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:0D5B AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:0D5C ED 52 -  -  		sbc 	hl,de
  111 00:0D5E DA 69 0D 00 		jp 		c,_ALBadValue 				; if max < index then error
  112 00:0D62 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:0D63 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:0D64 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:0D65 29 -  -  -  		add 	hl,hl
  116 00:0D66 D1 -  -  -  		pop 	de 							; get array base back
  117 00:0D67 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:0D68 C9 -  -  -  		ret
  119 00:0D69 -  -  -  -  
  120 00:0D69 -  -  -  -  _ALBadValue:
  121 00:0D69 3E 08 C3 A1 
              03 00 -  -  		ERR_INDEX
  122 00:0D6F -  -  -  -  		
  123 00:0D6F -  -  -  -  ; ***************************************************************************************
  124 00:0D6F -  -  -  -  ;
  125 00:0D6F -  -  -  -  ;									Changes and Updates
  126 00:0D6F -  -  -  -  ;
  127 00:0D6F -  -  -  -  ; ***************************************************************************************
  128 00:0D6F -  -  -  -  ;
  129 00:0D6F -  -  -  -  ;		Date			Notes
  130 00:0D6F -  -  -  -  ;		==== 			=====
  131 00:0D6F -  -  -  -  ;
  132 00:0D6F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 00:0D6F -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0D6F -  -  -  -  ; ***************************************************************************************
    2 00:0D6F -  -  -  -  ; ***************************************************************************************
    3 00:0D6F -  -  -  -  ;
    4 00:0D6F -  -  -  -  ;		Name : 		info.asm
    5 00:0D6F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D6F -  -  -  -  ;		Date : 		4th June 2022
    7 00:0D6F -  -  -  -  ;		Reviewed :	No
    8 00:0D6F -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0D6F -  -  -  -  ;
   10 00:0D6F -  -  -  -  ; ***************************************************************************************
   11 00:0D6F -  -  -  -  ; ***************************************************************************************
   12 00:0D6F -  -  -  -  
   13 00:0D6F -  -  -  -  ; ***************************************************************************************
   14 00:0D6F -  -  -  -  ;
   15 00:0D6F -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0D6F -  -  -  -  ; 		after the identifier.
   17 00:0D6F -  -  -  -  ;
   18 00:0D6F -  -  -  -  ; ***************************************************************************************
   19 00:0D6F -  -  -  -  
   20 00:0D6F -  -  -  -  VariableInformation:
   21 00:0D6F DD 22 84 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:0D74 -  -  -  -  		;
   23 00:0D74 -  -  -  -  		; 		Calculate hash, find end.
   24 00:0D74 -  -  -  -  		;
   25 00:0D74 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:0D76 -  -  -  -  _VICalculateHash:
   27 00:0D76 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:0D79 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:0D7B 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:0D7D 80 -  -  -  		add 	a,b 						; add to hash
   31 00:0D7E 07 -  -  -  		rlca
   32 00:0D7F 07 -  -  -  		rlca
   33 00:0D80 80 -  -  -  		add 	a,b
   34 00:0D81 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0D82 DD 23 -  -  		inc 	ix 							; next character
   36 00:0D84 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:0D86 -  -  -  -  		;
   38 00:0D86 -  -  -  -  _VIHashDone:
   39 00:0D86 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:0D87 -  -  -  -  		;
   41 00:0D87 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:0D87 -  -  -  -  		;
   43 00:0D87 32 88 00 00 		ld 		(VarHash),a
   44 00:0D8B -  -  -  -  		;
   45 00:0D8B -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:0D8B -  -  -  -  		;		
   47 00:0D8B E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:0D8D 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0D91 6F -  -  -  		ld 		l,a
   50 00:0D92 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0D93 29 -  -  -  		add 	hl,hl
   52 00:0D94 -  -  -  -  		;
   53 00:0D94 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0D99 19 -  -  -  		add 	hl,de
   55 00:0D9A -  -  -  -  		;
   56 00:0D9A DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0D9D FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0D9F 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0DA1 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0DA5 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0DA6 -  -  -  -  _VINotArray:
   62 00:0DA6 22 8A 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0DAA C9 -  -  -  		ret
   64 00:0DAB -  -  -  -  
   65 00:0DAB -  -  -  -  ; ***************************************************************************************
   66 00:0DAB -  -  -  -  ;
   67 00:0DAB -  -  -  -  ;									Changes and Updates
   68 00:0DAB -  -  -  -  ;
   69 00:0DAB -  -  -  -  ; ***************************************************************************************
   70 00:0DAB -  -  -  -  ;
   71 00:0DAB -  -  -  -  ;		Date			Notes
   72 00:0DAB -  -  -  -  ;		==== 			=====
   73 00:0DAB -  -  -  -  ;
   74 00:0DAB -  -  -  -  ; ***************************************************************************************
   75 00:0DAB -  -  -  -  
Listing for file "_build.asm"
   68 00:0DAB -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0DAB -  -  -  -  ; ***************************************************************************************
    2 00:0DAB -  -  -  -  ; ***************************************************************************************
    3 00:0DAB -  -  -  -  ;
    4 00:0DAB -  -  -  -  ;		Name : 		search.asm
    5 00:0DAB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DAB -  -  -  -  ;		Date : 		4th June 2022
    7 00:0DAB -  -  -  -  ;		Reviewed :	No
    8 00:0DAB -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0DAB -  -  -  -  ;
   10 00:0DAB -  -  -  -  ; ***************************************************************************************
   11 00:0DAB -  -  -  -  ; ***************************************************************************************
   12 00:0DAB -  -  -  -  
   13 00:0DAB -  -  -  -  ; ***************************************************************************************
   14 00:0DAB -  -  -  -  ;
   15 00:0DAB -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0DAB -  -  -  -  ;		CS if failed.
   17 00:0DAB -  -  -  -  ;
   18 00:0DAB -  -  -  -  ; ***************************************************************************************
   19 00:0DAB -  -  -  -  
   20 00:0DAB -  -  -  -  VariableSearchList:
   21 00:0DAB 2A 8A 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0DAF -  -  -  -  		;
   23 00:0DAF -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0DAF -  -  -  -  		;		the address of the hash record
   25 00:0DAF -  -  -  -  		;
   26 00:0DAF -  -  -  -  _VSLLoop:
   27 00:0DAF ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0DB1 -  -  -  -  		;
   29 00:0DB1 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0DB2 AF -  -  -  		xor 	a
   31 00:0DB3 ED 6A -  -  		adc 	hl,hl
   32 00:0DB5 E1 -  -  -  		pop 	hl
   33 00:0DB6 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0DB8 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0DB9 C8 -  -  -  		ret 	z
   36 00:0DBA -  -  -  -  _VSLRecord:
   37 00:0DBA -  -  -  -  		;
   38 00:0DBA -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0DBA -  -  -  -  		;
   40 00:0DBA 3A 88 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0DBE BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0DBF 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0DC0 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0DC2 -  -  -  -  		;
   45 00:0DC2 -  -  -  -  		;		Now check the name
   46 00:0DC2 -  -  -  -  		;
   47 00:0DC2 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:0DC3 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:0DC4 23 -  -  -  		inc 	hl
   50 00:0DC5 23 -  -  -  		inc 	hl
   51 00:0DC6 23 -  -  -  		inc 	hl
   52 00:0DC7 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0DC9 ED 5B 84 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0DCE -  -  -  -  		;
   55 00:0DCE -  -  -  -  		;		Check individual characters
   56 00:0DCE -  -  -  -  		;
   57 00:0DCE -  -  -  -  _VSLCharacter:
   58 00:0DCE 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0DCF FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0DD1 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:0DD3 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:0DD4 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:0DD5 13 -  -  -  		inc 	de
   64 00:0DD6 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:0DD8 -  -  -  -  		;
   66 00:0DD8 -  -  -  -  _VSLFailed:
   67 00:0DD8 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0DD9 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0DDB -  -  -  -  		;
   70 00:0DDB -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0DDB -  -  -  -  		;		
   72 00:0DDB -  -  -  -  _VSLEndIdentifier:
   73 00:0DDB 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0DDC FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0DDE 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0DE0 -  -  -  -  		;
   77 00:0DE0 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0DE1 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0DE2 AF -  -  -  		xor 	a 							; clear carry
   80 00:0DE3 C9 -  -  -  		ret
   81 00:0DE4 -  -  -  -  
   82 00:0DE4 -  -  -  -  ; ***************************************************************************************
   83 00:0DE4 -  -  -  -  ;
   84 00:0DE4 -  -  -  -  ;									Changes and Updates
   85 00:0DE4 -  -  -  -  ;
   86 00:0DE4 -  -  -  -  ; ***************************************************************************************
   87 00:0DE4 -  -  -  -  ;
   88 00:0DE4 -  -  -  -  ;		Date			Notes
   89 00:0DE4 -  -  -  -  ;		==== 			=====
   90 00:0DE4 -  -  -  -  ;
   91 00:0DE4 -  -  -  -  ; ***************************************************************************************
   92 00:0DE4 -  -  -  -  		
Listing for file "_build.asm"
   69 00:0DE4 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0DE4 -  -  -  -  ;
    2 00:0DE4 -  -  -  -  ;	This file is automatically generated.
    3 00:0DE4 -  -  -  -  ;
    4 00:0DE4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 00:0E00 -  -  -  -  PrecedenceTable:
    6 00:0E00 06 -  -  -  	.db	6	; $0083 !
    7 00:0E01 06 -  -  -  	.db	6	; $0084 ?
    8 00:0E02 05 -  -  -  	.db	5	; $0085 *
    9 00:0E03 05 -  -  -  	.db	5	; $0086 /
   10 00:0E04 05 -  -  -  	.db	5	; $0087 mod
   11 00:0E05 05 -  -  -  	.db	5	; $0088 div
   12 00:0E06 04 -  -  -  	.db	4	; $0089 +
   13 00:0E07 04 -  -  -  	.db	4	; $008a -
   14 00:0E08 03 -  -  -  	.db	3	; $008b >=
   15 00:0E09 03 -  -  -  	.db	3	; $008c <=
   16 00:0E0A 03 -  -  -  	.db	3	; $008d >
   17 00:0E0B 03 -  -  -  	.db	3	; $008e <
   18 00:0E0C 03 -  -  -  	.db	3	; $008f =
   19 00:0E0D 03 -  -  -  	.db	3	; $0090 <>
   20 00:0E0E 02 -  -  -  	.db	2	; $0091 and
   21 00:0E0F 01 -  -  -  	.db	1	; $0092 or
   22 00:0E10 01 -  -  -  	.db	1	; $0093 eor
   23 00:0E11 -  -  -  -  
Listing for file "_build.asm"
   70 00:0E11 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0E11 -  -  -  -  ;
    2 00:0E11 -  -  -  -  ;	This is automatically generated.
    3 00:0E11 -  -  -  -  ;
    4 00:0E11 -  -  -  -  ErrorIDTable:
    5 00:0E11 79 0E 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0E15 7F 0E 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0E19 90 0E 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0E1D 9E 0E 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0E21 A8 0E 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 00:0E25 B2 0E 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 00:0E29 CC 0E 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 00:0E2D DD 0E 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   13 00:0E31 F2 0E 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   14 00:0E35 02 0F 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   15 00:0E39 17 0F 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   16 00:0E3D 25 0F 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   17 00:0E41 36 0F 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   18 00:0E45 44 0F 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   19 00:0E49 4E 0F 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   20 00:0E4D 63 0F 00 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   21 00:0E51 78 0F 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   22 00:0E55 8E 0F 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   23 00:0E59 9C 0F 00 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   24 00:0E5D AF 0F 00 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   25 00:0E61 C1 0F 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   26 00:0E65 D6 0F 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   27 00:0E69 E2 0F 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   28 00:0E6D E7 0F 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   29 00:0E71 F4 0F 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   30 00:0E75 05 10 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   31 00:0E79 -  -  -  -  
   32 00:0E79 -  -  -  -  ErrText_warmstart:
   33 00:0E79 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   34 00:0E7F -  -  -  -  ErrText_assert:
   35 00:0E7F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   36 00:0E90 -  -  -  -  ErrText_badtype:
   37 00:0E90 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   38 00:0E9E -  -  -  -  ErrText_badvalue:
   39 00:0E9E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   40 00:0EA8 -  -  -  -  ErrText_dim:
   41 00:0EA8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   42 00:0EB2 -  -  -  -  ErrText_disabled:
   43 00:0EB2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   44 00:0ECC -  -  -  -  ErrText_divzero:
   45 00:0ECC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   46 00:0EDD -  -  -  -  ErrText_gosub:
   47 00:0EDD 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   48 00:0EF2 -  -  -  -  ErrText_index:
   49 00:0EF2 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   50 00:0F02 -  -  -  -  ErrText_lineno:
   51 00:0F02 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   52 00:0F17 -  -  -  -  ErrText_memory:
   53 00:0F17 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   54 00:0F25 -  -  -  -  ErrText_next:
   55 00:0F25 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   56 00:0F36 -  -  -  -  ErrText_nocomma:
   57 00:0F36 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   58 00:0F44 -  -  -  -  ErrText_nodollar:
   59 00:0F44 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   60 00:0F4E -  -  -  -  ErrText_nolbracket:
   61 00:0F4E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   62 00:0F63 -  -  -  -  ErrText_noproc:
   63 00:0F63 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   64 00:0F78 -  -  -  -  ErrText_norbracket:
   65 00:0F78 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   66 00:0F8E -  -  -  -  ErrText_notref:
   67 00:0F8E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   68 00:0F9C -  -  -  -  ErrText_param:
   69 00:0F9C 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   70 00:0FAF -  -  -  -  ErrText_proc:
   71 00:0FAF 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   72 00:0FC1 -  -  -  -  ErrText_repeat:
   73 00:0FC1 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   74 00:0FD6 -  -  -  -  ErrText_stack:
   75 00:0FD6 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   76 00:0FE2 -  -  -  -  ErrText_stop:
   77 00:0FE2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   78 00:0FE7 -  -  -  -  ErrText_syntax:
   79 00:0FE7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   80 00:0FF4 -  -  -  -  ErrText_todo:
   81 00:0FF4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   82 00:1005 -  -  -  -  ErrText_unknownvar:
   83 00:1005 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   71 00:1016 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:1016 -  -  -  -  ;
    2 00:1016 -  -  -  -  ;	Vectors for set 0
    3 00:1016 -  -  -  -  ;
    4 00:1016 -  -  -  -  VectorsSet0:
    5 00:1016 AC 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:101A 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:101E 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:1022 81 04 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:1026 8A 04 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:102A 2D 04 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:102E 3B 04 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:1032 49 04 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:1036 3B 04 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:103A 11 04 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:103E 1F 04 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:1042 E8 04 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:1046 DE 04 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:104A CA 04 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:104E C0 04 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:1052 B6 04 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:1056 D4 04 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:105A 57 04 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:105E 65 04 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:1062 73 04 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:1066 5A 08 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:106A 52 08 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:106E 74 07 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:1072 A1 07 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:1076 63 07 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:107A 39 07 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:107E 38 08 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:1082 69 08 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:1086 4F 07 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:108A 46 07 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:108E 7F 07 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:1092 94 07 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:1096 91 08 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:109A 98 08 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:109E A5 08 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:10A2 A8 04 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:10A6 AC 04 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:10AA F1 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:10AE F1 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:10B2 F5 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:10B6 F1 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:10BA 93 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:10BE F1 00 00 00 	addr(BadCmd_LSBracket)           ; $00aa [
   48 00:10C2 F1 00 00 00 	addr(BadCmd_RSBracket)           ; $00ab ]
   49 00:10C6 F1 00 00 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 00:10CA CF 0B 00 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 00:10CE DA 0B 00 00 	addr(Command_Until)              ; $00ae until
   52 00:10D2 95 0B 00 00 	addr(Command_IF)                 ; $00af if
   53 00:10D6 F1 00 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:10DA CB 0B 00 00 	addr(Command_Else)               ; $00b1 else
   55 00:10DE 31 0A 00 00 	addr(Command_FOR)                ; $00b2 for
   56 00:10E2 F1 00 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:10E6 F1 00 00 00 	addr(BadCmd_Step)                ; $00b4 step
   58 00:10EA C7 0A 00 00 	addr(Command_Next)               ; $00b5 next
   59 00:10EE F1 00 00 00 	addr(BadCmd_Def)                 ; $00b6 def
   60 00:10F2 C9 08 00 00 	addr(Command_PROC)               ; $00b7 proc
   61 00:10F6 2B 09 00 00 	addr(Command_ENDPROC)            ; $00b8 endproc
   62 00:10FA 22 0B 00 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:10FE 37 0B 00 00 	addr(Command_Return)             ; $00ba return
   64 00:1102 4E 0B 00 00 	addr(Command_GOTO)               ; $00bb goto
   65 00:1106 24 00 00 00 	addr(Unimplemented)              ; $00bc local
   66 00:110A F6 00 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:110E 93 02 00 00 	addr(Command_REM)                ; $00be rem
   68 00:1112 C3 01 00 00 	addr(Command_LET)                ; $00bf let
   69 00:1116 29 03 00 00 	addr(Command_VDU)                ; $00c0 vdu
   70 00:111A 28 02 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:111E 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:1122 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:1126 24 00 00 00 	addr(Unimplemented)              ; $00c4 list
   74 00:112A 21 0A 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:112E B0 02 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:1132 24 00 00 00 	addr(Unimplemented)              ; $00c7 read
   77 00:1136 24 00 00 00 	addr(Unimplemented)              ; $00c8 data
   78 00:113A 24 00 00 00 	addr(Unimplemented)              ; $00c9 restore
   79 00:113E E0 00 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:1142 C1 09 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:1146 A6 01 00 00 	addr(Command_END)                ; $00cc end
   82 00:114A 23 03 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:114E -  -  -  -  ;
   84 00:114E -  -  -  -  ;	Vectors for set 1
   85 00:114E -  -  -  -  ;
   86 00:114E -  -  -  -  VectorsSet1:
   87 00:114E -  -  -  -  ;
   88 00:114E -  -  -  -  ;	Vectors for set 2
   89 00:114E -  -  -  -  ;
   90 00:114E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   72 00:114E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:114E -  -  -  -  ; ***************************************************************************************
    2 00:114E -  -  -  -  ; ***************************************************************************************
    3 00:114E -  -  -  -  ;
    4 00:114E -  -  -  -  ;		Name : 		idivide.asm
    5 00:114E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:114E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:114E -  -  -  -  ;		Reviewed :	No
    8 00:114E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:114E -  -  -  -  ;
   10 00:114E -  -  -  -  ; ***************************************************************************************
   11 00:114E -  -  -  -  ; ***************************************************************************************
   12 00:114E -  -  -  -  
   13 00:114E -  -  -  -  ; ***************************************************************************************
   14 00:114E -  -  -  -  ;
   15 00:114E -  -  -  -  ;								Unsigned integer divide
   16 00:114E -  -  -  -  ;
   17 00:114E -  -  -  -  ; ***************************************************************************************
   18 00:114E -  -  -  -  
   19 00:114E -  -  -  -  Int32UDivide:
   20 00:114E 37 -  -  -  		scf
   21 00:114F C3 93 11 00 		jp 		_I32UnsignedDivide		
   22 00:1153 -  -  -  -  
   23 00:1153 -  -  -  -  ; ***************************************************************************************
   24 00:1153 -  -  -  -  ;
   25 00:1153 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:1153 -  -  -  -  ;
   27 00:1153 -  -  -  -  ; ***************************************************************************************
   28 00:1153 -  -  -  -  
   29 00:1153 -  -  -  -  Int32SDivide:
   30 00:1153 37 -  -  -  		scf
   31 00:1154 18 01 -  -  		jr 		_I32SDivide
   32 00:1156 -  -  -  -  Int32Modulus:
   33 00:1156 AF -  -  -  		xor 	a
   34 00:1157 -  -  -  -  _I32SDivide:
   35 00:1157 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:1158 F5 -  -  -  		push 	af
   37 00:1159 08 -  -  -  		ex 		af,af'
   38 00:115A -  -  -  -  
   39 00:115A D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:115B D9 -  -  -  		exx
   41 00:115C D5 -  -  -  		push 	de
   42 00:115D D9 -  -  -  		exx
   43 00:115E -  -  -  -  
   44 00:115E F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:115F AF -  -  -  		xor 	a 							; clear sign count.
   46 00:1160 CD 80 11 00 		call 	_I32CheckHLSignSwap
   47 00:1164 CD 80 11 00 		call 	_I32CheckHLSignSwap
   48 00:1168 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:1169 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:116A F5 -  -  -  		push 	af
   51 00:116B CD 93 11 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:116F F1 -  -  -  		pop 	af 							; get function back
   53 00:1170 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:1172 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:1173 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:1175 C4 F6 12 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:1179 -  -  -  -  _I32SDExit:
   58 00:1179 D9 -  -  -  		exx 								; restore DE'DE
   59 00:117A D1 -  -  -  		pop 	de
   60 00:117B D9 -  -  -  		exx
   61 00:117C D1 -  -  -  		pop 	de
   62 00:117D F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:117E 08 -  -  -  		ex 		af,af'
   64 00:117F C9 -  -  -  		ret
   65 00:1180 -  -  -  -  
   66 00:1180 -  -  -  -  
   67 00:1180 -  -  -  -  _I32CheckHLSignSwap:
   68 00:1180 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:1181 CB 7C -  -  		bit 	7,h
   70 00:1183 D9 -  -  -  		exx
   71 00:1184 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:1186 -  -  -  -  		;
   73 00:1186 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:1188 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:1189 CD F6 12 00 		call 	Int32Negate 				
   76 00:118D F1 -  -  -  		pop 	af
   77 00:118E -  -  -  -  _I32CHSPositive:
   78 00:118E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:118F EB -  -  -  		ex 		de,hl
   80 00:1190 D9 -  -  -  		exx		
   81 00:1191 EB -  -  -  		ex 		de,hl
   82 00:1192 C9 -  -  -  		ret
   83 00:1193 -  -  -  -  
   84 00:1193 -  -  -  -  ; ***************************************************************************************
   85 00:1193 -  -  -  -  ;
   86 00:1193 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:1193 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:1193 -  -  -  -  ;
   89 00:1193 -  -  -  -  ; ***************************************************************************************
   90 00:1193 -  -  -  -  
   91 00:1193 -  -  -  -  _I32UnsignedDivide:
   92 00:1193 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:1194 D5 -  -  -  		push 	de
   94 00:1195 D9 -  -  -  		exx
   95 00:1196 C5 -  -  -  		push 	bc
   96 00:1197 D5 -  -  -  		push 	de 							
   97 00:1198 D9 -  -  -  		exx
   98 00:1199 -  -  -  -  
   99 00:1199 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:119A -  -  -  -  
  101 00:119A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:119B B3 -  -  -  		or 		e
  103 00:119C D9 -  -  -  		exx
  104 00:119D B2 -  -  -  		or 		d
  105 00:119E B3 -  -  -  		or 		e
  106 00:119F D9 -  -  -  		exx
  107 00:11A0 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:11A4 -  -  -  -  
  109 00:11A4 -  -  -  -  
  110 00:11A4 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:11A5 4D -  -  -  		ld		c,l
  112 00:11A6 21 00 00 00 		ld 		hl,$0000
  113 00:11AA D9 -  -  -  		exx
  114 00:11AB 44 -  -  -  		ld 		b,h
  115 00:11AC 4D -  -  -  		ld		c,l
  116 00:11AD 21 00 00 00 		ld 		hl,$0000
  117 00:11B1 D9 -  -  -  		exx
  118 00:11B2 -  -  -  -  
  119 00:11B2 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:11B4 -  -  -  -  _I32DivideLoop:
  121 00:11B4 F5 -  -  -  		push 	af
  122 00:11B5 -  -  -  -  
  123 00:11B5 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:11B7 CB 10 -  -  		rl 		b
  125 00:11B9 D9 -  -  -  		exx
  126 00:11BA CB 11 -  -  		rl 		c
  127 00:11BC CB 10 -  -  		rl 		b
  128 00:11BE D9 -  -  -  		exx
  129 00:11BF CB 15 -  -  		rl 		l
  130 00:11C1 CB 14 -  -  		rl 		h
  131 00:11C3 D9 -  -  -  		exx
  132 00:11C4 CB 15 -  -  		rl 		l
  133 00:11C6 CB 14 -  -  		rl 		h
  134 00:11C8 D9 -  -  -  		exx
  135 00:11C9 -  -  -  -  
  136 00:11C9 CD 94 12 00 		call 	Int32Subtract 				; A = A - M
  137 00:11CD 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:11CF -  -  -  -  
  139 00:11CF 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:11D0 18 04 -  -  		jr 		_I32Next
  141 00:11D2 -  -  -  -  
  142 00:11D2 -  -  -  -  _I32Borrow:
  143 00:11D2 CD 8C 12 00 		call 	Int32Add 					; A = A + M
  144 00:11D6 -  -  -  -  _I32Next:
  145 00:11D6 F1 -  -  -  		pop 	af
  146 00:11D7 3D -  -  -  		dec 	a
  147 00:11D8 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:11DA -  -  -  -  
  149 00:11DA F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:11DB -  -  -  -  
  151 00:11DB 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:11DC 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:11DE -  -  -  -  
  154 00:11DE 60 -  -  -  		ld  	h,b
  155 00:11DF 69 -  -  -  		ld 		l,c
  156 00:11E0 D9 -  -  -  		exx
  157 00:11E1 60 -  -  -  		ld  	h,b
  158 00:11E2 69 -  -  -  		ld 		l,c
  159 00:11E3 D9 -  -  -  		exx
  160 00:11E4 -  -  -  -  _I32Modulus1:		
  161 00:11E4 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:11E5 D1 -  -  -  		pop 	de
  163 00:11E6 C1 -  -  -  		pop 	bc
  164 00:11E7 D9 -  -  -  		exx
  165 00:11E8 D1 -  -  -  		pop 	de
  166 00:11E9 C1 -  -  -  		pop 	bc
  167 00:11EA C9 -  -  -  		ret
  168 00:11EB -  -  -  -  
  169 00:11EB -  -  -  -  ; ***************************************************************************************
  170 00:11EB -  -  -  -  ;
  171 00:11EB -  -  -  -  ;									Changes and Updates
  172 00:11EB -  -  -  -  ;
  173 00:11EB -  -  -  -  ; ***************************************************************************************
  174 00:11EB -  -  -  -  ;
  175 00:11EB -  -  -  -  ;		Date			Notes
  176 00:11EB -  -  -  -  ;		==== 			=====
  177 00:11EB -  -  -  -  ;
  178 00:11EB -  -  -  -  ; ***************************************************************************************
  179 00:11EB -  -  -  -  		
Listing for file "_build.asm"
   73 00:11EB -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:11EB -  -  -  -  ; ***************************************************************************************
    2 00:11EB -  -  -  -  ; ***************************************************************************************
    3 00:11EB -  -  -  -  ;
    4 00:11EB -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:11EB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:11EB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:11EB -  -  -  -  ;		Reviewed :	No
    8 00:11EB -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:11EB -  -  -  -  ;
   10 00:11EB -  -  -  -  ; ***************************************************************************************
   11 00:11EB -  -  -  -  ; ***************************************************************************************
   12 00:11EB -  -  -  -  
   13 00:11EB -  -  -  -  ; ***************************************************************************************
   14 00:11EB -  -  -  -  ;
   15 00:11EB -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:11EB -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:11EB -  -  -  -  ;
   18 00:11EB -  -  -  -  ; ***************************************************************************************
   19 00:11EB -  -  -  -  
   20 00:11EB -  -  -  -  Int32FromString:
   21 00:11EB C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:11EC D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:11ED D5 -  -  -  		push 	de
   24 00:11EE D9 -  -  -  		exx
   25 00:11EF D5 -  -  -  		push 	de
   26 00:11F0 -  -  -  -  
   27 00:11F0 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:11F4 11 00 00 00 		ld 		de,$0000
   29 00:11F8 D9 -  -  -  		exx
   30 00:11F9 21 00 00 00 		ld 		hl,$0000
   31 00:11FD 11 00 00 00 		ld 		de,$0000
   32 00:1201 D9 -  -  -  		exx
   33 00:1202 -  -  -  -  
   34 00:1202 5F -  -  -  		ld 		e,a 						; base in E
   35 00:1203 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:1205 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:1207 ED 44 -  -  		neg 		 						; fix up the base
   38 00:1209 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:120A -  -  -  -  		;
   40 00:120A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:120B F5 -  -  -  		push 	af
   42 00:120C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:120E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:120F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:1211 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:1212 18 01 -  -  		jr 		_I32FSMain
   47 00:1214 -  -  -  -  _I32FSNotSigned:		
   48 00:1214 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:1215 -  -  -  -  		;
   50 00:1215 -  -  -  -  		; 		Main conversion loop.
   51 00:1215 -  -  -  -  		; 		
   52 00:1215 -  -  -  -  _I32FSMain:		
   53 00:1215 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:1216 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:1218 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:121A D6 20 -  -  		sub 	32
   57 00:121C -  -  -  -  _I32FSNotLower:
   58 00:121C FE 30 -  -  		cp 		'0' 						; check in range
   59 00:121E 38 23 -  -  		jr 		c,_I32FSExit
   60 00:1220 FE 3A -  -  		cp 		'9'+1
   61 00:1222 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:1224 FE 41 -  -  		cp 		'A'
   63 00:1226 38 1B -  -  		jr 		c,_I32FSExit
   64 00:1228 FE 47 -  -  		cp 		'F'+1
   65 00:122A 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:122C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:122E -  -  -  -  _I32FSOkay:
   68 00:122E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:1230 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:1231 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:1233 03 -  -  -  		inc 	bc 							; consume character
   72 00:1234 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:1235 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:1236 CD 53 12 00 		call 	Int32Multiply 				; result *= base
   75 00:123A F1 -  -  -  		pop 	af 							; additive in DE
   76 00:123B 5F -  -  -  		ld 		e,a
   77 00:123C CD 8C 12 00 		call 	Int32Add 					; and add it.
   78 00:1240 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:1241 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:1243 -  -  -  -  
   81 00:1243 -  -  -  -  _I32FSExit:
   82 00:1243 F1 -  -  -  		pop 	af 							; get sign back
   83 00:1244 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:1246 CC F6 12 00 		call 	z,Int32Negate
   85 00:124A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:124B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:124C D9 -  -  -  		exx
   88 00:124D D1 -  -  -  		pop 	de
   89 00:124E D9 -  -  -  		exx
   90 00:124F C1 -  -  -  		pop 	bc
   91 00:1250 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:1252 C9 -  -  -  		ret				
   93 00:1253 -  -  -  -  
   94 00:1253 -  -  -  -  ; ***************************************************************************************
   95 00:1253 -  -  -  -  ;
   96 00:1253 -  -  -  -  ;									Changes and Updates
   97 00:1253 -  -  -  -  ;
   98 00:1253 -  -  -  -  ; ***************************************************************************************
   99 00:1253 -  -  -  -  ;
  100 00:1253 -  -  -  -  ;		Date			Notes
  101 00:1253 -  -  -  -  ;		==== 			=====
  102 00:1253 -  -  -  -  ;
  103 00:1253 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   74 00:1253 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:1253 -  -  -  -  ; ***************************************************************************************
    2 00:1253 -  -  -  -  ; ***************************************************************************************
    3 00:1253 -  -  -  -  ;
    4 00:1253 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:1253 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:1253 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:1253 -  -  -  -  ;		Reviewed :	No
    8 00:1253 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:1253 -  -  -  -  ;
   10 00:1253 -  -  -  -  ; ***************************************************************************************
   11 00:1253 -  -  -  -  ; ***************************************************************************************
   12 00:1253 -  -  -  -  
   13 00:1253 -  -  -  -  Int32Multiply:
   14 00:1253 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:1254 D5 -  -  -  		push 	de
   16 00:1255 44 -  -  -  		ld 		b,h
   17 00:1256 4D -  -  -  		ld 		c,l
   18 00:1257 21 00 00 00 		ld 		hl,$0000
   19 00:125B -  -  -  -  
   20 00:125B D9 -  -  -  		exx
   21 00:125C C5 -  -  -  		push 	bc
   22 00:125D D5 -  -  -  		push 	de
   23 00:125E 44 -  -  -  		ld 		b,h
   24 00:125F 4D -  -  -  		ld 		c,l
   25 00:1260 21 00 00 00 		ld 		hl,$0000		
   26 00:1264 D9 -  -  -  		exx
   27 00:1265 -  -  -  -  
   28 00:1265 -  -  -  -  _I32MultiplyLoop:
   29 00:1265 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:1267 C4 8C 12 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:126B -  -  -  -  		;
   32 00:126B D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:126C CB 38 -  -  		srl 	b
   34 00:126E CB 19 -  -  		rr 		c
   35 00:1270 D9 -  -  -  		exx
   36 00:1271 CB 18 -  -  		rr 		b
   37 00:1273 CB 19 -  -  		rr 		c
   38 00:1275 -  -  -  -  		;
   39 00:1275 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:1277 CB 12 -  -  		rl 		d
   41 00:1279 D9 -  -  -  		exx
   42 00:127A CB 13 -  -  		rl 		e
   43 00:127C CB 12 -  -  		rl 		d
   44 00:127E -  -  -  -  
   45 00:127E 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:127F B1 -  -  -  		or 		c
   47 00:1280 D9 -  -  -  		exx
   48 00:1281 B0 -  -  -  		or 		b
   49 00:1282 B1 -  -  -  		or 		c
   50 00:1283 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:1285 -  -  -  -  
   52 00:1285 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:1286 D1 -  -  -  		pop 	de
   54 00:1287 C1 -  -  -  		pop 	bc
   55 00:1288 D9 -  -  -  		exx
   56 00:1289 D1 -  -  -  		pop 	de
   57 00:128A C1 -  -  -  		pop 	bc
   58 00:128B C9 -  -  -  		ret
   59 00:128C -  -  -  -  
   60 00:128C -  -  -  -  ; ***************************************************************************************
   61 00:128C -  -  -  -  ;
   62 00:128C -  -  -  -  ;									Changes and Updates
   63 00:128C -  -  -  -  ;
   64 00:128C -  -  -  -  ; ***************************************************************************************
   65 00:128C -  -  -  -  ;
   66 00:128C -  -  -  -  ;		Date			Notes
   67 00:128C -  -  -  -  ;		==== 			=====
   68 00:128C -  -  -  -  ;
   69 00:128C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   75 00:128C -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:128C -  -  -  -  ; ***************************************************************************************
    2 00:128C -  -  -  -  ; ***************************************************************************************
    3 00:128C -  -  -  -  ;
    4 00:128C -  -  -  -  ;		Name : 		isimple.asm
    5 00:128C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:128C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:128C -  -  -  -  ;		Reviewed :	No
    8 00:128C -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:128C -  -  -  -  ;
   10 00:128C -  -  -  -  ; ***************************************************************************************
   11 00:128C -  -  -  -  ; ***************************************************************************************
   12 00:128C -  -  -  -  
   13 00:128C -  -  -  -  ; ***************************************************************************************
   14 00:128C -  -  -  -  ;
   15 00:128C -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:128C -  -  -  -  ;
   17 00:128C -  -  -  -  ; ***************************************************************************************
   18 00:128C -  -  -  -  
   19 00:128C -  -  -  -  Int32Add:
   20 00:128C 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:128E D9 -  -  -  		exx
   22 00:128F 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:1292 D9 -  -  -  		exx
   24 00:1293 C9 -  -  -  		ret
   25 00:1294 -  -  -  -  
   26 00:1294 -  -  -  -  ; ***************************************************************************************
   27 00:1294 -  -  -  -  ;
   28 00:1294 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:1294 -  -  -  -  ;
   30 00:1294 -  -  -  -  ; ***************************************************************************************
   31 00:1294 -  -  -  -  
   32 00:1294 -  -  -  -  Int32Subtract:
   33 00:1294 AF -  -  -  		xor 	a 							; clear carry
   34 00:1295 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:1298 D9 -  -  -  		exx
   36 00:1299 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:129C D9 -  -  -  		exx
   38 00:129D C9 -  -  -  		ret
   39 00:129E -  -  -  -  
   40 00:129E -  -  -  -  ; ***************************************************************************************
   41 00:129E -  -  -  -  ;
   42 00:129E -  -  -  -  ;								And DE'DE into HL'HL
   43 00:129E -  -  -  -  ;
   44 00:129E -  -  -  -  ; ***************************************************************************************
   45 00:129E -  -  -  -  
   46 00:129E -  -  -  -  Int32And:
   47 00:129E D9 -  -  -  		exx
   48 00:129F CD A4 12 00 		call 	_I32AndHLDE
   49 00:12A3 D9 -  -  -  		exx
   50 00:12A4 -  -  -  -  _I32AndHLDE:		
   51 00:12A4 7C -  -  -  		ld 		a,h
   52 00:12A5 A2 -  -  -  		and 	d
   53 00:12A6 67 -  -  -  		ld 		h,a
   54 00:12A7 7D -  -  -  		ld 		a,l
   55 00:12A8 A3 -  -  -  		and 	e
   56 00:12A9 6F -  -  -  		ld 		l,a
   57 00:12AA C9 -  -  -  		ret
   58 00:12AB -  -  -  -  
   59 00:12AB -  -  -  -  ; ***************************************************************************************
   60 00:12AB -  -  -  -  ;
   61 00:12AB -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:12AB -  -  -  -  ;
   63 00:12AB -  -  -  -  ; ***************************************************************************************
   64 00:12AB -  -  -  -  
   65 00:12AB -  -  -  -  Int32Or:
   66 00:12AB D9 -  -  -  		exx
   67 00:12AC CD B1 12 00 		call 	_I32OrHLDE
   68 00:12B0 D9 -  -  -  		exx
   69 00:12B1 -  -  -  -  _I32OrHLDE:		
   70 00:12B1 7C -  -  -  		ld 		a,h
   71 00:12B2 B2 -  -  -  		or 		d
   72 00:12B3 67 -  -  -  		ld 		h,a
   73 00:12B4 7D -  -  -  		ld 		a,l
   74 00:12B5 B3 -  -  -  		or 		e
   75 00:12B6 6F -  -  -  		ld 		l,a
   76 00:12B7 C9 -  -  -  		ret
   77 00:12B8 -  -  -  -  
   78 00:12B8 -  -  -  -  ; ***************************************************************************************
   79 00:12B8 -  -  -  -  ;
   80 00:12B8 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:12B8 -  -  -  -  ;
   82 00:12B8 -  -  -  -  ; ***************************************************************************************
   83 00:12B8 -  -  -  -  
   84 00:12B8 -  -  -  -  Int32Xor:
   85 00:12B8 D9 -  -  -  		exx
   86 00:12B9 CD BE 12 00 		call 	_I32XorHLDE
   87 00:12BD D9 -  -  -  		exx
   88 00:12BE -  -  -  -  _I32XorHLDE:		
   89 00:12BE 7C -  -  -  		ld 		a,h
   90 00:12BF AA -  -  -  		xor 	d
   91 00:12C0 67 -  -  -  		ld 		h,a
   92 00:12C1 7D -  -  -  		ld 		a,l
   93 00:12C2 AB -  -  -  		xor 	e
   94 00:12C3 6F -  -  -  		ld 		l,a
   95 00:12C4 C9 -  -  -  		ret
   96 00:12C5 -  -  -  -  
   97 00:12C5 -  -  -  -  ; ***************************************************************************************
   98 00:12C5 -  -  -  -  ;
   99 00:12C5 -  -  -  -  ;								 Check if HL'HL zero
  100 00:12C5 -  -  -  -  ;
  101 00:12C5 -  -  -  -  ; ***************************************************************************************
  102 00:12C5 -  -  -  -  
  103 00:12C5 -  -  -  -  Int32Zero:
  104 00:12C5 D9 -  -  -  		exx
  105 00:12C6 7D -  -  -  		ld 		a,l
  106 00:12C7 B4 -  -  -  		or 		h
  107 00:12C8 D9 -  -  -  		exx
  108 00:12C9 B5 -  -  -  		or 		l
  109 00:12CA B4 -  -  -  		or 		h
  110 00:12CB C9 -  -  -  		ret
  111 00:12CC -  -  -  -  
  112 00:12CC -  -  -  -  ; ***************************************************************************************
  113 00:12CC -  -  -  -  ;
  114 00:12CC -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:12CC -  -  -  -  ;
  116 00:12CC -  -  -  -  ; ***************************************************************************************
  117 00:12CC -  -  -  -  
  118 00:12CC -  -  -  -  Int32Compare:
  119 00:12CC E5 -  -  -  		push 	hl 							; save HL
  120 00:12CD AF -  -  -  		xor 	a 							; clear carry
  121 00:12CE 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:12D1 D9 -  -  -  		exx
  123 00:12D2 E5 -  -  -  		push 	hl 							; save HL'
  124 00:12D3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:12D6 -  -  -  -  		;
  126 00:12D6 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:12D7 E2 DF 12 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:12DB 78 -  -  -  		ld 		a,b
  129 00:12DC EE 80 -  -  		xor 	$80
  130 00:12DE 47 -  -  -  		ld 		b,a
  131 00:12DF -  -  -  -  _I32CNoOverflow:
  132 00:12DF 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:12E0 B5 -  -  -  		or 		l
  134 00:12E1 D9 -  -  -  		exx 
  135 00:12E2 B4 -  -  -  		or 		h
  136 00:12E3 B5 -  -  -  		or 		l
  137 00:12E4 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:12E6 -  -  -  -  		;
  139 00:12E6 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:12E7 CB 78 -  -  		bit 	7,b
  141 00:12E9 D9 -  -  -  		exx
  142 00:12EA 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:12EC 28 02 -  -  		jr 		z,_I32NotPos
  144 00:12EE 3E FF -  -  		ld 		a,$FF
  145 00:12F0 -  -  -  -  _I32NotPos:
  146 00:12F0 D9 -  -  -  		exx
  147 00:12F1 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:12F2 D9 -  -  -  		exx
  149 00:12F3 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:12F4 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:12F5 C9 -  -  -  		ret
  152 00:12F6 -  -  -  -  
  153 00:12F6 -  -  -  -  ; ***************************************************************************************
  154 00:12F6 -  -  -  -  ;
  155 00:12F6 -  -  -  -  ;										Negate HL'HL
  156 00:12F6 -  -  -  -  ;
  157 00:12F6 -  -  -  -  ; ***************************************************************************************
  158 00:12F6 -  -  -  -  
  159 00:12F6 -  -  -  -  Int32Negate:
  160 00:12F6 AF -  -  -  		xor 	a
  161 00:12F7 CD 02 13 00 		call 	_I32NSubtract
  162 00:12FB D9 -  -  -  		exx
  163 00:12FC CD 02 13 00 		call 	_I32NSubtract
  164 00:1300 D9 -  -  -  		exx
  165 00:1301 C9 -  -  -  		ret
  166 00:1302 -  -  -  -  _I32NSubtract:
  167 00:1302 D5 -  -  -  		push 	de
  168 00:1303 EB -  -  -  		ex 		de,hl
  169 00:1304 21 00 00 00 		ld 		hl,$0000
  170 00:1308 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:130B D1 -  -  -  		pop 	de
  172 00:130C C9 -  -  -  		ret
  173 00:130D -  -  -  -  		
  174 00:130D -  -  -  -  ; ***************************************************************************************
  175 00:130D -  -  -  -  ;
  176 00:130D -  -  -  -  ;									Changes and Updates
  177 00:130D -  -  -  -  ;
  178 00:130D -  -  -  -  ; ***************************************************************************************
  179 00:130D -  -  -  -  ;
  180 00:130D -  -  -  -  ;		Date			Notes
  181 00:130D -  -  -  -  ;		==== 			=====
  182 00:130D -  -  -  -  ;
  183 00:130D -  -  -  -  ; ***************************************************************************************
  184 00:130D -  -  -  -  		
Listing for file "_build.asm"
   76 00:130D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:130D -  -  -  -  ; ***************************************************************************************
    2 00:130D -  -  -  -  ; ***************************************************************************************
    3 00:130D -  -  -  -  ;
    4 00:130D -  -  -  -  ;		Name : 		itostring.asm
    5 00:130D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:130D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:130D -  -  -  -  ;		Reviewed :	No
    8 00:130D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:130D -  -  -  -  ;
   10 00:130D -  -  -  -  ; ***************************************************************************************
   11 00:130D -  -  -  -  ;
   12 00:130D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:130D -  -  -  -  ;
   14 00:130D -  -  -  -  ; ***************************************************************************************
   15 00:130D -  -  -  -  
   16 00:130D -  -  -  -  Int32ToString:
   17 00:130D C5 -  -  -  		push 	bc 							; save string start
   18 00:130E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:130F E5 -  -  -  		push 	hl
   20 00:1310 11 00 00 00 		ld	 	de,$0000
   21 00:1314 D9 -  -  -  		exx
   22 00:1315 D5 -  -  -  		push 	de
   23 00:1316 E5 -  -  -  		push 	hl
   24 00:1317 11 00 00 00 		ld 		de,$000
   25 00:131B D9 -  -  -  		exx
   26 00:131C 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:131D -  -  -  -  		;
   28 00:131D CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:131F 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:1321 ED 44 -  -  		neg 								; negate base and put in E
   31 00:1323 5F -  -  -  		ld 		e,a
   32 00:1324 -  -  -  -  		;
   33 00:1324 D9 -  -  -  		exx 								; is it -ve ?
   34 00:1325 CB 7C -  -  		bit 	7,h
   35 00:1327 D9 -  -  -  		exx
   36 00:1328 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:132A -  -  -  -  		;
   38 00:132A CD F6 12 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:132E -  -  -  -  		;
   40 00:132E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:1330 02 -  -  -  		ld 		(bc),a
   42 00:1331 03 -  -  -  		inc 	bc
   43 00:1332 -  -  -  -  _I32TSNotNegative:	
   44 00:1332 CD 41 13 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:1336 -  -  -  -  _I32TSExit:
   46 00:1336 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:1338 02 -  -  -  		ld 		(bc),a 
   48 00:1339 -  -  -  -  
   49 00:1339 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:133A E1 -  -  -  		pop 	hl
   51 00:133B D1 -  -  -  		pop 	de
   52 00:133C D9 -  -  -  		exx
   53 00:133D E1 -  -  -  		pop 	hl
   54 00:133E D1 -  -  -  		pop 	de
   55 00:133F C1 -  -  -  		pop 	bc
   56 00:1340 C9 -  -  -  		ret
   57 00:1341 -  -  -  -  
   58 00:1341 -  -  -  -  _I32RecursiveConvert:
   59 00:1341 CD 4E 11 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:1345 F5 -  -  -  		push 	af 							; save remainder
   61 00:1346 CD C5 12 00 		call 	Int32Zero		 			; check result is non zero
   62 00:134A C4 41 13 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:134E F1 -  -  -  		pop 	af 							; restore remainder
   64 00:134F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:1351 38 02 -  -  		jr 		c,_I32NotHex
   66 00:1353 C6 07 -  -  		add 	a,7
   67 00:1355 -  -  -  -  _I32NotHex:
   68 00:1355 C6 30 -  -  		add 	a,48
   69 00:1357 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:1358 03 -  -  -  		inc 	bc
   71 00:1359 C9 -  -  -  		ret		
   72 00:135A -  -  -  -  
   73 00:135A -  -  -  -  ; ***************************************************************************************
   74 00:135A -  -  -  -  ;
   75 00:135A -  -  -  -  ;									Changes and Updates
   76 00:135A -  -  -  -  ;
   77 00:135A -  -  -  -  ; ***************************************************************************************
   78 00:135A -  -  -  -  ;
   79 00:135A -  -  -  -  ;		Date			Notes
   80 00:135A -  -  -  -  ;		==== 			=====
   81 00:135A -  -  -  -  ;
   82 00:135A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 00:135A -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:135A -  -  -  -  ; ***************************************************************************************
    2 00:135A -  -  -  -  ; ***************************************************************************************
    3 00:135A -  -  -  -  ;
    4 00:135A -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:135A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:135A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:135A -  -  -  -  ;		Reviewed :	No
    8 00:135A -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:135A -  -  -  -  ;
   10 00:135A -  -  -  -  ; ***************************************************************************************
   11 00:135A -  -  -  -  ; ***************************************************************************************
   12 00:135A -  -  -  -  
   13 00:135A -  -  -  -  #ifdef AQUARIUS
   14 00:135A             
   15 00:135A             ; ***************************************************************************************
   16 00:135A             ;
   17 00:135A             ;								Initialise system stuff
   18 00:135A             ;
   19 00:135A             ; ***************************************************************************************
   20 00:135A             
   21 00:135A             SYSInitialise:
   22 00:135A             	ld 		a,$0b 								; Aquarius clear screen
   23 00:135A             	call 	SYSPrintChar
   24 00:135A             	ret
   25 00:135A             
   26 00:135A             ; ***************************************************************************************
   27 00:135A             ;
   28 00:135A             ;								Terminate system stuff
   29 00:135A             ;
   30 00:135A             ; ***************************************************************************************
   31 00:135A             
   32 00:135A             SYSTerminate:
   33 00:135A             	jr 		SYSTerminate
   34 00:135A             
   35 00:135A             ; ***************************************************************************************
   36 00:135A             ;
   37 00:135A             ;						Print A character (note 13,10 required for CRLF)
   38 00:135A             ;
   39 00:135A             ; ***************************************************************************************
   40 00:135A             
   41 00:135A             SYSPrintChar:
   42 00:135A             	push 	af 									; we stack everything including alt registers
   43 00:135A             	push 	bc
   44 00:135A             	push 	de
   45 00:135A             	push 	hl
   46 00:135A             	push 	ix
   47 00:135A             	push 	iy
   48 00:135A             	exx
   49 00:135A             	push 	bc
   50 00:135A             	push 	de
   51 00:135A             	push 	hl
   52 00:135A             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:135A             	pop 	hl
   54 00:135A             	pop 	de
   55 00:135A             	pop 	bc
   56 00:135A             	exx
   57 00:135A             	pop 	iy
   58 00:135A             	pop 	ix
   59 00:135A             	pop 	hl
   60 00:135A             	pop 	de
   61 00:135A             	pop 	bc
   62 00:135A             	pop 	af
   63 00:135A             	ret		
   64 00:135A             
   65 00:135A             ; ***************************************************************************************
   66 00:135A             ;
   67 00:135A             ;									Print Newline
   68 00:135A             ;
   69 00:135A             ; ***************************************************************************************
   70 00:135A             
   71 00:135A             SYSPrintCRLF:
   72 00:135A             	push 	af
   73 00:135A             	ld 		a,13
   74 00:135A             	call 	SYSPrintChar
   75 00:135A             	ld 		a,10
   76 00:135A             	call 	SYSPrintChar
   77 00:135A             	pop 	af
   78 00:135A             	ret
   79 00:135A             
   80 00:135A             ; ***************************************************************************************
   81 00:135A             ;
   82 00:135A             ;									Get time into HL'HL
   83 00:135A             ;
   84 00:135A             ; ***************************************************************************************
   85 00:135A             
   86 00:135A             SYSGetTimer:
   87 00:135A              	in 		a,($00)
   88 00:135A              	ld 		l,a
   89 00:135A              	in 		a,($01)
   90 00:135A              	ld 		h,a
   91 00:135A              	exx
   92 00:135A              	in 		a,($02)
   93 00:135A              	ld 		l,a
   94 00:135A              	in 		a,($03)
   95 00:135A              	ld 		h,a
   96 00:135A              	exx
   97 00:135A             	ret 	
   98 00:135A             	
   99 00:135A             #endif
  100 00:135A -  -  -  -  
  101 00:135A -  -  -  -  ; ***************************************************************************************
  102 00:135A -  -  -  -  ;
  103 00:135A -  -  -  -  ;									Changes and Updates
  104 00:135A -  -  -  -  ;
  105 00:135A -  -  -  -  ; ***************************************************************************************
  106 00:135A -  -  -  -  ;
  107 00:135A -  -  -  -  ;		Date			Notes
  108 00:135A -  -  -  -  ;		==== 			=====
  109 00:135A -  -  -  -  ;
  110 00:135A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   78 00:135A -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:135A -  -  -  -  ; ***************************************************************************************
    2 00:135A -  -  -  -  ; ***************************************************************************************
    3 00:135A -  -  -  -  ;
    4 00:135A -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:135A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:135A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:135A -  -  -  -  ;		Reviewed :	No
    8 00:135A -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:135A -  -  -  -  ;
   10 00:135A -  -  -  -  ; ***************************************************************************************
   11 00:135A -  -  -  -  ; ***************************************************************************************
   12 00:135A -  -  -  -  
   13 00:135A -  -  -  -  #ifdef CLEANEZ80
   14 00:135A -  -  -  -  
   15 00:135A -  -  -  -  ; ***************************************************************************************
   16 00:135A -  -  -  -  ;
   17 00:135A -  -  -  -  ;								Initialise system stuff
   18 00:135A -  -  -  -  ;
   19 00:135A -  -  -  -  ; ***************************************************************************************
   20 00:135A -  -  -  -  
   21 00:135A -  -  -  -  SYSInitialise:
   22 00:135A C9 -  -  -  	ret
   23 00:135B -  -  -  -  
   24 00:135B -  -  -  -  ; ***************************************************************************************
   25 00:135B -  -  -  -  ;
   26 00:135B -  -  -  -  ;								Terminate system stuff
   27 00:135B -  -  -  -  ;
   28 00:135B -  -  -  -  ; ***************************************************************************************
   29 00:135B -  -  -  -  
   30 00:135B -  -  -  -  SYSTerminate:
   31 00:135B C9 -  -  -  	ret
   32 00:135C -  -  -  -  
   33 00:135C -  -  -  -  ; ***************************************************************************************
   34 00:135C -  -  -  -  ;
   35 00:135C -  -  -  -  ;								Print A character
   36 00:135C -  -  -  -  ;
   37 00:135C -  -  -  -  ; ***************************************************************************************
   38 00:135C -  -  -  -  
   39 00:135C -  -  -  -  SYSPrintChar:
   40 00:135C C9 -  -  -  	ret		
   41 00:135D -  -  -  -  
   42 00:135D -  -  -  -  ; ***************************************************************************************
   43 00:135D -  -  -  -  ;
   44 00:135D -  -  -  -  ;									Print Newline
   45 00:135D -  -  -  -  ;
   46 00:135D -  -  -  -  ; ***************************************************************************************
   47 00:135D -  -  -  -  
   48 00:135D -  -  -  -  SYSPrintCRLF:
   49 00:135D C9 -  -  -  	ret
   50 00:135E -  -  -  -  
   51 00:135E -  -  -  -  ; ***************************************************************************************
   52 00:135E -  -  -  -  ;
   53 00:135E -  -  -  -  ;									Get time into HL'HL
   54 00:135E -  -  -  -  ;
   55 00:135E -  -  -  -  ; ***************************************************************************************
   56 00:135E -  -  -  -  
   57 00:135E -  -  -  -  SYSGetTimer:
   58 00:135E C9 -  -  -  	ret
   59 00:135F -  -  -  -  
   60 00:135F -  -  -  -  #endif
   61 00:135F -  -  -  -  
   62 00:135F -  -  -  -  ; ***************************************************************************************
   63 00:135F -  -  -  -  ;
   64 00:135F -  -  -  -  ;									Changes and Updates
   65 00:135F -  -  -  -  ;
   66 00:135F -  -  -  -  ; ***************************************************************************************
   67 00:135F -  -  -  -  ;
   68 00:135F -  -  -  -  ;		Date			Notes
   69 00:135F -  -  -  -  ;		==== 			=====
   70 00:135F -  -  -  -  ;
   71 00:135F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 00:135F -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:135F -  -  -  -  ; ***************************************************************************************
    2 00:135F -  -  -  -  ; ***************************************************************************************
    3 00:135F -  -  -  -  ;
    4 00:135F -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:135F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:135F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:135F -  -  -  -  ;		Reviewed :	No
    8 00:135F -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:135F -  -  -  -  ;
   10 00:135F -  -  -  -  ; ***************************************************************************************
   11 00:135F -  -  -  -  ; ***************************************************************************************
   12 00:135F -  -  -  -  
   13 00:135F -  -  -  -  #ifdef TI84
   14 00:135F             
   15 00:135F             ; ***************************************************************************************
   16 00:135F             ;
   17 00:135F             ;								Initialise system stuff
   18 00:135F             ;
   19 00:135F             ; ***************************************************************************************
   20 00:135F             
   21 00:135F             SYSInitialise:
   22 00:135F             	di
   23 00:135F             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:135F             	ld 		(_IYTemp84),iy
   25 00:135F             	ret
   26 00:135F             
   27 00:135F             ; ***************************************************************************************
   28 00:135F             ;
   29 00:135F             ;								Terminate system stuff
   30 00:135F             ;
   31 00:135F             ; ***************************************************************************************
   32 00:135F             
   33 00:135F             SYSTerminate:
   34 00:135F             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:135F             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:135F             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:135F             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:135F             	ei
   39 00:135F             	ret 										; and exit.
   40 00:135F             
   41 00:135F             _StackTemp84:									; temp var for TI84 only.
   42 00:135F             	.dw 	0,0
   43 00:135F             _IYTemp84:
   44 00:135F             	.dw 	0,0		
   45 00:135F             
   46 00:135F             ; ***************************************************************************************
   47 00:135F             ;
   48 00:135F             ;								Print A character
   49 00:135F             ;
   50 00:135F             ; ***************************************************************************************
   51 00:135F             
   52 00:135F             SYSPrintChar:
   53 00:135F             	push 	af 									; we stack everything including alt registers
   54 00:135F             	push 	bc
   55 00:135F             	push 	de
   56 00:135F             	push 	hl
   57 00:135F             	push 	ix
   58 00:135F             	push 	iy
   59 00:135F             	exx
   60 00:135F             	push 	bc
   61 00:135F             	push 	de
   62 00:135F             	push 	hl
   63 00:135F             
   64 00:135F             	ld 		iy,(_IYTemp84)
   65 00:135F             	call 	_PutC 								; print A as character
   66 00:135F             	di
   67 00:135F             	ld 		(_IYTemp84),iy
   68 00:135F             
   69 00:135F             	pop 	hl
   70 00:135F             	pop 	de
   71 00:135F             	pop 	bc
   72 00:135F             	exx
   73 00:135F             	pop 	iy
   74 00:135F             	pop 	ix
   75 00:135F             	pop 	hl
   76 00:135F             	pop 	de
   77 00:135F             	pop 	bc
   78 00:135F             	pop 	af
   79 00:135F             	ret		
   80 00:135F             
   81 00:135F             ; ***************************************************************************************
   82 00:135F             ;
   83 00:135F             ;									Print Newline
   84 00:135F             ;
   85 00:135F             ; ***************************************************************************************
   86 00:135F             
   87 00:135F             SYSPrintCRLF:
   88 00:135F             	push 	af 									; we stack everything including alt registers
   89 00:135F             	push 	bc
   90 00:135F             	push 	de
   91 00:135F             	push 	hl
   92 00:135F             	push 	ix
   93 00:135F             	push 	iy
   94 00:135F             	exx
   95 00:135F             	push 	bc
   96 00:135F             	push 	de
   97 00:135F             	push 	hl
   98 00:135F             
   99 00:135F             	ld 		iy,(_IYTemp84)
  100 00:135F             	call 	_newline
  101 00:135F             	di
  102 00:135F             	ld 		(_IYTemp84),iy
  103 00:135F             
  104 00:135F             	pop 	hl
  105 00:135F             	pop 	de
  106 00:135F             	pop 	bc
  107 00:135F             	exx
  108 00:135F             	pop 	iy
  109 00:135F             	pop 	ix
  110 00:135F             	pop 	hl
  111 00:135F             	pop 	de
  112 00:135F             	pop 	bc
  113 00:135F             	pop 	af
  114 00:135F             	ret
  115 00:135F             
  116 00:135F             ; ***************************************************************************************
  117 00:135F             ;
  118 00:135F             ;									Get time into HL'HL
  119 00:135F             ;
  120 00:135F             ; ***************************************************************************************
  121 00:135F             
  122 00:135F             SYSGetTimer:
  123 00:135F             	ld 		hl,$1234
  124 00:135F             	exx
  125 00:135F             	ld 		hl,$5678
  126 00:135F             	exx
  127 00:135F             	ret
  128 00:135F             
  129 00:135F             #endif
  130 00:135F -  -  -  -  
  131 00:135F -  -  -  -  ; ***************************************************************************************
  132 00:135F -  -  -  -  ;
  133 00:135F -  -  -  -  ;									Changes and Updates
  134 00:135F -  -  -  -  ;
  135 00:135F -  -  -  -  ; ***************************************************************************************
  136 00:135F -  -  -  -  ;
  137 00:135F -  -  -  -  ;		Date			Notes
  138 00:135F -  -  -  -  ;		==== 			=====
  139 00:135F -  -  -  -  ;
  140 00:135F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 00:135F -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:135F -  -  -  -  ; ***************************************************************************************
    2 00:135F -  -  -  -  ; ***************************************************************************************
    3 00:135F -  -  -  -  ;
    4 00:135F -  -  -  -  ;		Name : 		basic.asm
    5 00:135F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:135F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:135F -  -  -  -  ;		Reviewed :	No
    8 00:135F -  -  -  -  ;		Purpose :	Main program.
    9 00:135F -  -  -  -  ;
   10 00:135F -  -  -  -  ; ***************************************************************************************
   11 00:135F -  -  -  -  ; ***************************************************************************************
   12 00:135F -  -  -  -  
   13 00:135F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1400 -  -  -  -  TestInstance:
   15 00:1400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1400 -  -  -  -  ;
    2 00:1400 -  -  -  -  ;	This code automatically generated.
    3 00:1400 -  -  -  -  ;
    4 00:1400 -  -  -  -  TestProgram:
    5 00:1400 20 01 00 B7 
              13 04 12 13 
              1B 95 44 A5 
              A7 C1 3F 04 
              4E 65 78 74 
              0D A7 B7 13 
              04 12 13 1B 
              95 48 A5 80 
              08 02 00 B7 
              13 04 17 80 
              05 03 00 CC 
              80 09 04 00 
              B6 B7 13 04 
              17 80 0B 05 
              00 C1 3F 03 
              74 65 78 0D 
              80 0D 06 00 
              B7 13 04 12 
              13 1B 95 6A 
              A5 80 0C 07 
              00 C1 3F 04 
              65 74 65 78 
              0D 80 05 08 
              00 B8 80 0F 
              09 00 B6 B7 
              13 04 12 13 
              1B 95 0D 1B 
              A5 80 11 0A 
              00 C1 3F 06 
              74 65 73 74 
              31 20 0D A8 
              0D 1B 80 05 
              0B 00 B8 80 
              00 -  -  -  	.db	$20,$01,$00,$b7,$13,$04,$12,$13,$1b,$95,$44,$a5,$a7,$c1,$3f,$04,$4e,$65,$78,$74,$0d,$a7,$b7,$13,$04,$12,$13,$1b,$95,$48,$a5,$80,$08,$02,$00,$b7,$13,$04,$17,$80,$05,$03,$00,$cc,$80,$09,$04,$00,$b6,$b7,$13,$04,$17,$80,$0b,$05,$00,$c1,$3f,$03,$74,$65,$78,$0d,$80,$0d,$06,$00,$b7,$13,$04,$12,$13,$1b,$95,$6a,$a5,$80,$0c,$07,$00,$c1,$3f,$04,$65,$74,$65,$78,$0d,$80,$05,$08,$00,$b8,$80,$0f,$09,$00,$b6,$b7,$13,$04,$12,$13,$1b,$95,$0d,$1b,$a5,$80,$11,$0a,$00,$c1,$3f,$06,$74,$65,$73,$74,$31,$20,$0d,$a8,$0d,$1b,$80,$05,$0b,$00,$b8,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:1485 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:2485 -  -  -  -  EndTestInstance:
   18 00:2485 -  -  -  -  		
   19 00:2485 -  -  -  -  ; ***************************************************************************************
   20 00:2485 -  -  -  -  ;
   21 00:2485 -  -  -  -  ;									Changes and Updates
   22 00:2485 -  -  -  -  ;
   23 00:2485 -  -  -  -  ; ***************************************************************************************
   24 00:2485 -  -  -  -  ;
   25 00:2485 -  -  -  -  ;		Date			Notes
   26 00:2485 -  -  -  -  ;		==== 			=====
   27 00:2485 -  -  -  -  ;
   28 00:2485 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 00:2485 -  -  -  -  FinalAddress:
