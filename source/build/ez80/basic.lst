    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DATA = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DATA
   35 00:0000             	ld a,ERRID_DATA
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIM = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIM
   42 00:0000             	ld a,ERRID_DIM
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DISABLED = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DISABLED
   49 00:0000             	ld a,ERRID_DISABLED
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_DIVZERO = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_DIVZERO
   56 00:0000             	ld a,ERRID_DIVZERO
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_GOSUB = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_GOSUB
   63 00:0000             	ld a,ERRID_GOSUB
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_INDEX = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_INDEX
   70 00:0000             	ld a,ERRID_INDEX
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_LINENO = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_LINENO
   77 00:0000             	ld a,ERRID_LINENO
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_MEMORY = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_MEMORY
   84 00:0000             	ld a,ERRID_MEMORY
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NEXT = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NEXT
   91 00:0000             	ld a,ERRID_NEXT
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOCOMMA = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   98 00:0000             	ld a,ERRID_NOCOMMA
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NODOLLAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NODOLLAR
  105 00:0000             	ld a,ERRID_NODOLLAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOLBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  112 00:0000             	ld a,ERRID_NOLBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOPROC = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOPROC
  119 00:0000             	ld a,ERRID_NOPROC
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NORBRACKET = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  126 00:0000             	ld a,ERRID_NORBRACKET
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_NOTREF = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_NOTREF
  133 00:0000             	ld a,ERRID_NOTREF
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PARAM = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PARAM
  140 00:0000             	ld a,ERRID_PARAM
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_PROC = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_PROC
  147 00:0000             	ld a,ERRID_PROC
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_REPEAT = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_REPEAT
  154 00:0000             	ld a,ERRID_REPEAT
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STACK = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STACK
  161 00:0000             	ld a,ERRID_STACK
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_STOP = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_STOP
  168 00:0000             	ld a,ERRID_STOP
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_SYNTAX = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_SYNTAX
  175 00:0000             	ld a,ERRID_SYNTAX
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_TODO = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_TODO
  182 00:0000             	ld a,ERRID_TODO
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
  186 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 26
  187 00:0000 -  -  -  -  
  188 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  189 00:0000             	ld a,ERRID_UNKNOWNVAR
  190 00:0000             	jp ErrorHandler
  191 00:0000             #endmacro
  192 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000             #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
   25 00:0000             		.org 	userMem-2
   26 00:0000             		.db 	tExtTok,tAsm84CeCmp	
   27 00:0000             #endif
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  
   35 00:0000 -  -  -  -  #else 
   36 00:0000             
   37 00:0000             #ifdef AQUARIUS
   38 00:0000             .org 	$4000
   39 00:0000             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 00:0000             		ld 		sp,$BFFF
   41 00:0000             #endif
   42 00:0000             
   43 00:0000             #endif
   44 00:0000 CD 6A 14 00 		call 	SYSInitialise
   45 00:0004 11 00 18 00 		ld 		de,TestInstance
   46 00:0008 21 2A 28 00 		ld 		hl,EndTestInstance
   47 00:000C CD 17 0B 00 		call 	SetCurrentInstance
   48 00:0010 -  -  -  -  
   49 00:0010 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 00:0012 32 64 00 00 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 00:0016 -  -  -  -  		
   52 00:0016 C3 B6 02 00 		jp 		Command_RUN
   53 00:001A -  -  -  -  
   54 00:001A -  -  -  -  WarmStart:		
   55 00:001A 3E 2A -  -  		ld 		a,'*'
   56 00:001C CD 6C 14 00 		call 	SYSPrintChar
   57 00:0020 CD 6B 14 00 		call 	SYSTerminate
   58 00:0024 -  -  -  -  
   59 00:0024 -  -  -  -  Unimplemented:
   60 00:0024 3E 06 C3 2E 
              04 00 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 00:002A -  -  -  -  Int32DivZeroHandler:
   62 00:002A 3E 07 C3 2E 
              04 00 -  -  		ERR_DIVZERO
   63 00:0030 -  -  -  -  
   64 00:0030 -  -  -  -  ; ***************************************************************************************
   65 00:0030 -  -  -  -  ;
   66 00:0030 -  -  -  -  ;									Changes and Updates
   67 00:0030 -  -  -  -  ;
   68 00:0030 -  -  -  -  ; ***************************************************************************************
   69 00:0030 -  -  -  -  ;
   70 00:0030 -  -  -  -  ;		Date			Notes
   71 00:0030 -  -  -  -  ;		==== 			=====
   72 00:0030 -  -  -  -  ;
   73 00:0030 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 00:0030 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 00:0030 -  -  -  -  ; ***************************************************************************************
    2 00:0030 -  -  -  -  ; ***************************************************************************************
    3 00:0030 -  -  -  -  ;
    4 00:0030 -  -  -  -  ;		Name : 		01data.asm
    5 00:0030 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0030 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0030 -  -  -  -  ;		Reviewed :	No
    8 00:0030 -  -  -  -  ;		Purpose :	Data space
    9 00:0030 -  -  -  -  ;
   10 00:0030 -  -  -  -  ; ***************************************************************************************
   11 00:0030 -  -  -  -  ; ***************************************************************************************
   12 00:0030 -  -  -  -  
   13 00:0030 -  -  -  -  ; ***************************************************************************************
   14 00:0030 -  -  -  -  ;
   15 00:0030 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 00:0030 -  -  -  -  ;				LD (xxx),rr etc.
   17 00:0030 -  -  -  -  ;
   18 00:0030 -  -  -  -  ; ***************************************************************************************
   19 00:0030 -  -  -  -  
   20 00:0030 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 00:0030 -  -  -  -  
   22 00:0030 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 00:0030 -  -  -  -  											; must be power of 2. 
   24 00:0030 -  -  -  -  
   25 00:0030 -  -  -  -  ; ***************************************************************************************
   26 00:0030 -  -  -  -  ;
   27 00:0030 -  -  -  -  ;								Defines the current instance
   28 00:0030 -  -  -  -  ;
   29 00:0030 -  -  -  -  ; ***************************************************************************************
   30 00:0030 -  -  -  -  
   31 00:0030 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 00:0030 00 00 00 00 		.dw 	0,0
   33 00:0034 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 00:0034 00 00 00 00 		.dw 	0,0		
   35 00:0038 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 00:0038 00 00 00 00 		.dw 	0,0 							
   37 00:003C -  -  -  -  
   38 00:003C -  -  -  -  ; ***************************************************************************************
   39 00:003C -  -  -  -  ;
   40 00:003C -  -  -  -  ;								Allocatable memory, working down.
   41 00:003C -  -  -  -  ;
   42 00:003C -  -  -  -  ; ***************************************************************************************
   43 00:003C -  -  -  -  
   44 00:003C -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 00:003C 00 00 00 00 		.dw 	0,0
   46 00:0040 -  -  -  -  
   47 00:0040 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 00:0040 00 00 00 00 		.dw 	0,0		
   49 00:0044 -  -  -  -  
   50 00:0044 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 00:0044 00 00 00 00 		.dw 	0,0
   52 00:0048 -  -  -  -  
   53 00:0048 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 00:0048 00 00 00 00 		.dw 	0,0
   55 00:004C -  -  -  -  
   56 00:004C -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 00:004C 00 00 00 00 		.dw 	0,0		
   58 00:0050 -  -  -  -  
   59 00:0050 -  -  -  -  ;
   60 00:0050 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 00:0050 -  -  -  -  ;
   62 00:0050 -  -  -  -  
   63 00:0050 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 00:0050 00 00 00 00 		.dw 	0,0
   65 00:0054 -  -  -  -  		
   66 00:0054 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 00:0054 00 00 00 00 		.dw 	0,0
   68 00:0058 -  -  -  -  
   69 00:0058 -  -  -  -  ; ***************************************************************************************
   70 00:0058 -  -  -  -  ;
   71 00:0058 -  -  -  -  ;										Run variables
   72 00:0058 -  -  -  -  ;
   73 00:0058 -  -  -  -  ; ***************************************************************************************
   74 00:0058 -  -  -  -  
   75 00:0058 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 00:0058 00 00 00 00 		.dw 	0,0
   77 00:005C -  -  -  -  
   78 00:005C -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 00:005C 00 00 00 00 		.dw 	0,0
   80 00:0060 -  -  -  -  		
   81 00:0060 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 00:0060 00 00 00 00 		.dw 	0,0
   83 00:0064 -  -  -  -  
   84 00:0064 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 00:0064 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 00:006A -  -  -  -  
   87 00:006A -  -  -  -  AConvert: 									; used for address conversions.
   88 00:006A 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 00:0070 -  -  -  -  		
   90 00:0070 -  -  -  -  RandomSeed: 								; random number seeds.
   91 00:0070 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 00:0080 -  -  -  -  
   93 00:0080 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 00:0080 00 00 -  -  		.dw 	0
   95 00:0082 -  -  -  -  
   96 00:0082 -  -  -  -  PrintBase: 									; current base for PRINT
   97 00:0082 00 00 -  -  		.dw 	0 
   98 00:0084 -  -  -  -  
   99 00:0084 -  -  -  -  ReadDataPointer: 							; pointer for READ/DATA.
  100 00:0084 00 00 00 00 		.dw 	0,0
  101 00:0088 -  -  -  -  
  102 00:0088 -  -  -  -  DataScanRequired: 							; flag set when scan forward for DATA required.
  103 00:0088 00 00 -  -  		.dw 	0		
  104 00:008A -  -  -  -  
  105 00:008A -  -  -  -  ; ***************************************************************************************
  106 00:008A -  -  -  -  ;
  107 00:008A -  -  -  -  ;									Variable Information
  108 00:008A -  -  -  -  ;
  109 00:008A -  -  -  -  ; ***************************************************************************************
  110 00:008A -  -  -  -  
  111 00:008A -  -  -  -  VarNameStart: 								; first byte of name
  112 00:008A 00 00 00 00 		.dw 	0,0
  113 00:008E -  -  -  -  VarHash: 									; name hash value
  114 00:008E 00 00 -  -  		.dw 	0		
  115 00:0090 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  116 00:0090 00 00 00 00 		.dw 	0,0
  117 00:0094 -  -  -  -  		
  118 00:0094 -  -  -  -  ; ***************************************************************************************
  119 00:0094 -  -  -  -  ;
  120 00:0094 -  -  -  -  ;										  Buffers
  121 00:0094 -  -  -  -  ;
  122 00:0094 -  -  -  -  ; ***************************************************************************************
  123 00:0094 -  -  -  -  
  124 00:0094 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  125 00:0094 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  126 00:00A4 -  -  -  -  
  127 00:00A4 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  128 00:00A4 00 00 -  -  		.dw 	0
  129 00:00A6 -  -  -  -  
  130 00:00A6 -  -  -  -  ConvertBuffer: 								; general usage
  131 00:00A6 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  132 00:00E6 -  -  -  -  
  133 00:00E6 -  -  -  -  ; ***************************************************************************************
  134 00:00E6 -  -  -  -  ;
  135 00:00E6 -  -  -  -  ;									Changes and Updates
  136 00:00E6 -  -  -  -  ;
  137 00:00E6 -  -  -  -  ; ***************************************************************************************
  138 00:00E6 -  -  -  -  ;
  139 00:00E6 -  -  -  -  ;		Date			Notes
  140 00:00E6 -  -  -  -  ;		==== 			=====
  141 00:00E6 -  -  -  -  ;
  142 00:00E6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 00:00E6 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 00:00E6 -  -  -  -  ; ***************************************************************************************
    2 00:00E6 -  -  -  -  ; ***************************************************************************************
    3 00:00E6 -  -  -  -  ;
    4 00:00E6 -  -  -  -  ;		Name : 		assert.asm
    5 00:00E6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00E6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00E6 -  -  -  -  ;		Reviewed :	No
    8 00:00E6 -  -  -  -  ;		Purpose :	Assert command
    9 00:00E6 -  -  -  -  ;
   10 00:00E6 -  -  -  -  ; ***************************************************************************************
   11 00:00E6 -  -  -  -  ; ***************************************************************************************
   12 00:00E6 -  -  -  -  
   13 00:00E6 -  -  -  -  ; ***************************************************************************************
   14 00:00E6 -  -  -  -  ;
   15 00:00E6 -  -  -  -  ;									ASSERT command
   16 00:00E6 -  -  -  -  ;
   17 00:00E6 -  -  -  -  ; ***************************************************************************************
   18 00:00E6 -  -  -  -  
   19 00:00E6 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 00:00E6 CD 61 06 00 		call 	EvaluateInteger 			; get an integer expression.
   21 00:00EA 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 00:00F0 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 00:00F1 3E 01 C3 2E 
              04 00 -  -  		ERR_ASSERT
   24 00:00F7 -  -  -  -  
   25 00:00F7 -  -  -  -  ; ***************************************************************************************
   26 00:00F7 -  -  -  -  ;
   27 00:00F7 -  -  -  -  ;									Changes and Updates
   28 00:00F7 -  -  -  -  ;
   29 00:00F7 -  -  -  -  ; ***************************************************************************************
   30 00:00F7 -  -  -  -  ;
   31 00:00F7 -  -  -  -  ;		Date			Notes
   32 00:00F7 -  -  -  -  ;		==== 			=====
   33 00:00F7 -  -  -  -  ;
   34 00:00F7 -  -  -  -  ; ***************************************************************************************
   35 00:00F7 -  -  -  -  		
Listing for file "_build.asm"
   15 00:00F7 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 00:00F7 -  -  -  -  ; ***************************************************************************************
    2 00:00F7 -  -  -  -  ; ***************************************************************************************
    3 00:00F7 -  -  -  -  ;
    4 00:00F7 -  -  -  -  ;		Name : 		badcommands.asm
    5 00:00F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:00F7 -  -  -  -  ;		Reviewed :	No
    8 00:00F7 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 00:00F7 -  -  -  -  ;
   10 00:00F7 -  -  -  -  ; ***************************************************************************************
   11 00:00F7 -  -  -  -  ; ***************************************************************************************
   12 00:00F7 -  -  -  -  
   13 00:00F7 -  -  -  -  BadCmd_Def: 		;; [def]
   14 00:00F7 -  -  -  -  BadCmd_Data: 		;; [data]
   15 00:00F7 -  -  -  -  BadCmd_Then: 		;; [then]
   16 00:00F7 -  -  -  -  BadCmd_RBracket: 	;; [)]
   17 00:00F7 -  -  -  -  BadCmd_LSBracket: 	;; [[]
   18 00:00F7 -  -  -  -  BadCmd_RSBracket: 	;; []]
   19 00:00F7 -  -  -  -  BadCmd_Comma: 		;; [,]
   20 00:00F7 -  -  -  -  BadCmd_Comma: 		;; [~]
   21 00:00F7 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   22 00:00F7 -  -  -  -  BadCmd_To: 			;; [to]
   23 00:00F7 -  -  -  -  BadCmd_Step: 		;; [step]
   24 00:00F7 C3 98 04 00 		jp 		SyntaxError
   25 00:00FB -  -  -  -  
   26 00:00FB -  -  -  -  ; ***************************************************************************************
   27 00:00FB -  -  -  -  ;
   28 00:00FB -  -  -  -  ;									Changes and Updates
   29 00:00FB -  -  -  -  ;
   30 00:00FB -  -  -  -  ; ***************************************************************************************
   31 00:00FB -  -  -  -  ;
   32 00:00FB -  -  -  -  ;		Date			Notes
   33 00:00FB -  -  -  -  ;		==== 			=====
   34 00:00FB -  -  -  -  ;
   35 00:00FB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 00:00FB -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 00:00FB -  -  -  -  ; ***************************************************************************************
    2 00:00FB -  -  -  -  ; ***************************************************************************************
    3 00:00FB -  -  -  -  ;
    4 00:00FB -  -  -  -  ;		Name : 		colon.asm
    5 00:00FB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00FB -  -  -  -  ;		Date : 		3rd May 2022
    7 00:00FB -  -  -  -  ;		Reviewed :	No
    8 00:00FB -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 00:00FB -  -  -  -  ;
   10 00:00FB -  -  -  -  ; ***************************************************************************************
   11 00:00FB -  -  -  -  ; ***************************************************************************************
   12 00:00FB -  -  -  -  
   13 00:00FB -  -  -  -  ; ***************************************************************************************
   14 00:00FB -  -  -  -  ;
   15 00:00FB -  -  -  -  ;								Colon command, this is ignored.
   16 00:00FB -  -  -  -  ;
   17 00:00FB -  -  -  -  ; ***************************************************************************************
   18 00:00FB -  -  -  -  
   19 00:00FB -  -  -  -  Command_Colon: 	;; [:]
   20 00:00FB C9 -  -  -  		ret
   21 00:00FC -  -  -  -  
   22 00:00FC -  -  -  -  ; ***************************************************************************************
   23 00:00FC -  -  -  -  ;
   24 00:00FC -  -  -  -  ;									Changes and Updates
   25 00:00FC -  -  -  -  ;
   26 00:00FC -  -  -  -  ; ***************************************************************************************
   27 00:00FC -  -  -  -  ;
   28 00:00FC -  -  -  -  ;		Date			Notes
   29 00:00FC -  -  -  -  ;		==== 			=====
   30 00:00FC -  -  -  -  ;
   31 00:00FC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 00:00FC -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 00:00FC -  -  -  -  ; ***************************************************************************************
    2 00:00FC -  -  -  -  ; ***************************************************************************************
    3 00:00FC -  -  -  -  ;
    4 00:00FC -  -  -  -  ;		Name : 		dim.asm
    5 00:00FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:00FC -  -  -  -  ;		Date : 		4th June 2022
    7 00:00FC -  -  -  -  ;		Reviewed :	No
    8 00:00FC -  -  -  -  ;		Purpose :	Dim command
    9 00:00FC -  -  -  -  ;
   10 00:00FC -  -  -  -  ; ***************************************************************************************
   11 00:00FC -  -  -  -  ; ***************************************************************************************
   12 00:00FC -  -  -  -  
   13 00:00FC -  -  -  -  ; ***************************************************************************************
   14 00:00FC -  -  -  -  ;
   15 00:00FC -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 00:00FC -  -  -  -  ;	
   17 00:00FC -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 00:00FC -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 00:00FC -  -  -  -  ;								(can be comma chained)
   20 00:00FC -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 00:00FC -  -  -  -  ;
   22 00:00FC -  -  -  -  ; ***************************************************************************************
   23 00:00FC -  -  -  -  
   24 00:00FC -  -  -  -  Command_DIM: 	;; [dim]
   25 00:00FC -  -  -  -  		;
   26 00:00FC -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 00:00FC -  -  -  -  		; 		we cannot just get a l-value here.
   28 00:00FC -  -  -  -  		;
   29 00:00FC DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 00:00FE D1 -  -  -  		pop 	de
   31 00:00FF -  -  -  -  		;
   32 00:00FF DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 00:0102 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 00:0104 D2 98 04 00 		jp 		nc,SyntaxError 				; no identifier here
   35 00:0108 -  -  -  -  _DISkip:
   36 00:0108 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 00:010A DD 7E 00 -  		ld 		a,(ix+0)
   38 00:010D FE 26 -  -  		cp 		IDENTIFIER_END
   39 00:010F 38 F7 -  -  		jr 		c,_DISkip 					
   40 00:0111 -  -  -  -  		;
   41 00:0111 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 00:0114 FE 95 -  -  		cp 		KWD_LPAREN
   43 00:0116 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 00:0117 CC 78 01 00 		call 	z,DimensionArray 			; DE points to identifier.
   45 00:011B F1 -  -  -  		pop 	af
   46 00:011C C4 30 01 00 		call 	nz,DimensionAllocate
   47 00:0120 -  -  -  -  		;
   48 00:0120 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 00:0123 FE A6 -  -  		cp 		KWD_COMMA
   50 00:0125 C0 -  -  -  		ret 	nz
   51 00:0126 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 00:0128 18 D2 -  -  		jr 		Command_DIM
   53 00:012A -  -  -  -  
   54 00:012A -  -  -  -  _CDError:
   55 00:012A 3E 05 C3 2E 
              04 00 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 00:0130 -  -  -  -  
   57 00:0130 -  -  -  -  ; ***************************************************************************************
   58 00:0130 -  -  -  -  ;
   59 00:0130 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 00:0130 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 00:0130 -  -  -  -  ;
   62 00:0130 -  -  -  -  ; ***************************************************************************************
   63 00:0130 -  -  -  -  
   64 00:0130 -  -  -  -  DimensionAllocate:
   65 00:0130 D5 -  -  -  		push 	de 							; save start on stack
   66 00:0131 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 00:0133 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 00:0135 32 80 00 00 		ld 		(AllowAutoCreate),a
   69 00:0139 CD E7 0D 00 		call 	FindVariable 				; find/create the variable appropriately.
   70 00:013D CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 00:013F 28 E9 -  -  		jr 		z,_CDError
   72 00:0141 CB 41 -  -  		bit 	CIsString,c
   73 00:0143 20 E5 -  -  		jr 		nz,_CDError
   74 00:0145 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 00:0147 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 00:0148 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 00:014A CD 22 04 00 		call 	CheckNextA 					; check for [
   78 00:014E CD 61 06 00 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 00:0152 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 00:0154 CD 22 04 00 		call 	CheckNextA 					; check for ]
   81 00:0158 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 00:0159 7C -  -  -  		ld 		a,h
   83 00:015A B5 -  -  -  		or 		l
   84 00:015B 20 03 -  -  		jr 		nz,_DANoCarry
   85 00:015D D9 -  -  -  		exx
   86 00:015E 23 -  -  -  		inc 	hl
   87 00:015F D9 -  -  -  		exx
   88 00:0160 -  -  -  -  _DANoCarry:
   89 00:0160 D9 -  -  -  		exx 								; check if HL' is zero
   90 00:0161 7C -  -  -  		ld 		a,h
   91 00:0162 B5 -  -  -  		or 		l
   92 00:0163 D9 -  -  -  		exx
   93 00:0164 20 C4 -  -  		jr 		nz,_CDError
   94 00:0166 CD A0 0A 00 		call 	AllocateBytes 				; allocate that much memory.
   95 00:016A EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 00:016B E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 00:016C ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 00:0172 AF -  -  -  		xor 	a 							; autocreate off
   99 00:0173 32 80 00 00 		ld 		(AllowAutoCreate),a
  100 00:0177 C9 -  -  -  		ret
  101 00:0178 -  -  -  -  
  102 00:0178 -  -  -  -  ; ***************************************************************************************
  103 00:0178 -  -  -  -  ;
  104 00:0178 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 00:0178 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 00:0178 -  -  -  -  ;
  107 00:0178 -  -  -  -  ; ***************************************************************************************
  108 00:0178 -  -  -  -  
  109 00:0178 -  -  -  -  DimensionArray:
  110 00:0178 D5 -  -  -  		push 	de 							; save start on stack.
  111 00:0179 -  -  -  -  		;
  112 00:0179 CD 61 06 00 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 00:017D 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 00:017E E6 FC -  -  		and 	$FC
  115 00:0180 D9 -  -  -  		exx
  116 00:0181 B4 -  -  -  		or 		h
  117 00:0182 B5 -  -  -  		or 		l
  118 00:0183 D9 -  -  -  		exx
  119 00:0184 20 A4 -  -  		jr 		nz,_CDError
  120 00:0186 -  -  -  -  		;
  121 00:0186 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 00:0188 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 00:0189 -  -  -  -  		;
  124 00:0189 CD 74 0E 00 		call 	VariableInformation 		; get information about this array
  125 00:018D CD B0 0E 00 		call 	VariableSearchList 			; look to see if already present.
  126 00:0191 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 00:0193 -  -  -  -  		;
  128 00:0193 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 00:0194 E5 -  -  -  		push 	hl
  130 00:0195 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 00:0196 23 -  -  -  		inc 	hl 							; add one for size word.
  132 00:0197 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 00:0198 29 -  -  -  		add 	hl,hl
  134 00:0199 CD A4 0D 00 		call 	VariableCreate 				; create the array, completely blank.
  135 00:019D -  -  -  -  		;
  136 00:019D D1 -  -  -  		pop 	de 							; get last index into DE
  137 00:019E 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 00:01A2 09 -  -  -  		add 	hl,bc
  139 00:01A3 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 00:01A9 DD E1 -  -  		pop 	ix 							; restore end position
  141 00:01AB C9 -  -  -  		ret		
  142 00:01AC -  -  -  -  
  143 00:01AC -  -  -  -  
  144 00:01AC -  -  -  -  ; ***************************************************************************************
  145 00:01AC -  -  -  -  ;
  146 00:01AC -  -  -  -  ;									Changes and Updates
  147 00:01AC -  -  -  -  ;
  148 00:01AC -  -  -  -  ; ***************************************************************************************
  149 00:01AC -  -  -  -  ;
  150 00:01AC -  -  -  -  ;		Date			Notes
  151 00:01AC -  -  -  -  ;		==== 			=====
  152 00:01AC -  -  -  -  ;
  153 00:01AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 00:01AC -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 00:01AC -  -  -  -  ; ***************************************************************************************
    2 00:01AC -  -  -  -  ; ***************************************************************************************
    3 00:01AC -  -  -  -  ;
    4 00:01AC -  -  -  -  ;		Name : 		end.asm
    5 00:01AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01AC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01AC -  -  -  -  ;		Reviewed :	No
    8 00:01AC -  -  -  -  ;		Purpose :	End command
    9 00:01AC -  -  -  -  ;
   10 00:01AC -  -  -  -  ; ***************************************************************************************
   11 00:01AC -  -  -  -  ; ***************************************************************************************
   12 00:01AC -  -  -  -  
   13 00:01AC -  -  -  -  ; ***************************************************************************************
   14 00:01AC -  -  -  -  ;
   15 00:01AC -  -  -  -  ;										END command
   16 00:01AC -  -  -  -  ;
   17 00:01AC -  -  -  -  ; ***************************************************************************************
   18 00:01AC -  -  -  -  
   19 00:01AC -  -  -  -  Command_END: 	;; [end]
   20 00:01AC 3E 00 C3 2E 
              04 00 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 00:01B2 -  -  -  -  
   22 00:01B2 -  -  -  -  ; ***************************************************************************************
   23 00:01B2 -  -  -  -  ;
   24 00:01B2 -  -  -  -  ;									Changes and Updates
   25 00:01B2 -  -  -  -  ;
   26 00:01B2 -  -  -  -  ; ***************************************************************************************
   27 00:01B2 -  -  -  -  ;
   28 00:01B2 -  -  -  -  ;		Date			Notes
   29 00:01B2 -  -  -  -  ;		==== 			=====
   30 00:01B2 -  -  -  -  ;
   31 00:01B2 -  -  -  -  ; ***************************************************************************************
   32 00:01B2 -  -  -  -  		
Listing for file "_build.asm"
   19 00:01B2 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 00:01B2 -  -  -  -  ; ***************************************************************************************
    2 00:01B2 -  -  -  -  ; ***************************************************************************************
    3 00:01B2 -  -  -  -  ;
    4 00:01B2 -  -  -  -  ;		Name : 		endofline.asm
    5 00:01B2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01B2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:01B2 -  -  -  -  ;		Reviewed :	None
    8 00:01B2 -  -  -  -  ;		Purpose :	Handle end of line.
    9 00:01B2 -  -  -  -  ;
   10 00:01B2 -  -  -  -  ; ***************************************************************************************
   11 00:01B2 -  -  -  -  ; ***************************************************************************************
   12 00:01B2 -  -  -  -  
   13 00:01B2 -  -  -  -  ; ***************************************************************************************
   14 00:01B2 -  -  -  -  ;
   15 00:01B2 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 00:01B2 -  -  -  -  ;
   17 00:01B2 -  -  -  -  ; ***************************************************************************************
   18 00:01B2 -  -  -  -  
   19 00:01B2 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 00:01B2 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 00:01B7 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 00:01BB DD 5E 00 -  		ld 		e,(ix+0)
   23 00:01BE DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 00:01C0 -  -  -  -  		;
   25 00:01C0 ED 7B 60 00 
              00 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 00:01C5 C3 C9 02 00 		jp 		CRNewLine 					; and start running a new line.
   27 00:01C9 -  -  -  -  
   28 00:01C9 -  -  -  -  ; ***************************************************************************************
   29 00:01C9 -  -  -  -  ;
   30 00:01C9 -  -  -  -  ;									Changes and Updates
   31 00:01C9 -  -  -  -  ;
   32 00:01C9 -  -  -  -  ; ***************************************************************************************
   33 00:01C9 -  -  -  -  ;
   34 00:01C9 -  -  -  -  ;		Date			Notes
   35 00:01C9 -  -  -  -  ;		==== 			=====
   36 00:01C9 -  -  -  -  ;
   37 00:01C9 -  -  -  -  ; ***************************************************************************************
   38 00:01C9 -  -  -  -  		
Listing for file "_build.asm"
   20 00:01C9 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 00:01C9 -  -  -  -  ; ***************************************************************************************
    2 00:01C9 -  -  -  -  ; ***************************************************************************************
    3 00:01C9 -  -  -  -  ;
    4 00:01C9 -  -  -  -  ;		Name : 		let.asm
    5 00:01C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:01C9 -  -  -  -  ;		Date : 		4th June 2022
    7 00:01C9 -  -  -  -  ;		Reviewed :	No
    8 00:01C9 -  -  -  -  ;		Purpose :	Assignment statement
    9 00:01C9 -  -  -  -  ;
   10 00:01C9 -  -  -  -  ; ***************************************************************************************
   11 00:01C9 -  -  -  -  ; ***************************************************************************************
   12 00:01C9 -  -  -  -  
   13 00:01C9 -  -  -  -  ; ***************************************************************************************
   14 00:01C9 -  -  -  -  ;
   15 00:01C9 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 00:01C9 -  -  -  -  ;
   17 00:01C9 -  -  -  -  ; ***************************************************************************************
   18 00:01C9 -  -  -  -  
   19 00:01C9 -  -  -  -  Command_LET: 	;; [let]
   20 00:01C9 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 00:01CC FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 00:01CE 28 2F -  -  		jr 		z,_CLString
   23 00:01D0 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 00:01D2 30 06 -  -  		jr 		nc,_CLNoAuto
   25 00:01D4 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 00:01D6 32 80 00 00 		ld 		(AllowAutoCreate),a
   27 00:01DA -  -  -  -  _CLNoAuto:
   28 00:01DA 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 00:01DC CD E3 05 00 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 00:01E0 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 00:01E2 CA 98 04 00 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 00:01E6 E5 -  -  -  		push 	hl 							; save address on stack
   33 00:01E7 C5 -  -  -  		push 	bc 							; save type on stack
   34 00:01E8 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 00:01E9 32 80 00 00 		ld 		(AllowAutoCreate),a 		
   36 00:01ED 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 00:01EF CD 22 04 00 		call 	CheckNextA
   38 00:01F3 -  -  -  -  
   39 00:01F3 CD 59 06 00 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 00:01F7 -  -  -  -  
   41 00:01F7 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 00:01F8 43 -  -  -  		ld 		b,e 						
   43 00:01F9 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 00:01FA -  -  -  -  		;
   45 00:01FA -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 00:01FA -  -  -  -  		;
   47 00:01FA CD 18 02 00 		call 	WriteHLToDE
   48 00:01FE C9 -  -  -  		ret
   49 00:01FF -  -  -  -  		;
   50 00:01FF -  -  -  -  		; 		String assignment code.
   51 00:01FF -  -  -  -  		;
   52 00:01FF -  -  -  -  _CLString:
   53 00:01FF CD 4A 06 00 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 00:0203 E5 -  -  -  		push 	hl 							; save target expression
   55 00:0204 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 00:0206 CD 22 04 00 		call 	CheckNextA
   57 00:020A CD 7B 06 00 		call 	EvaluateString 				; get the thing to copy
   58 00:020E D1 -  -  -  		pop 	de 							; target in DE.
   59 00:020F -  -  -  -  _CLCopy:
   60 00:020F 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 00:0210 12 -  -  -  		ld 		(de),a
   62 00:0211 23 -  -  -  		inc 	hl
   63 00:0212 13 -  -  -  		inc 	de
   64 00:0213 FE 20 -  -  		cp 		$20 						; until control character
   65 00:0215 30 F8 -  -  		jr 		nc,_CLCopy
   66 00:0217 C9 -  -  -  		ret
   67 00:0218 -  -  -  -  
   68 00:0218 -  -  -  -  ; ***************************************************************************************
   69 00:0218 -  -  -  -  ;
   70 00:0218 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 00:0218 -  -  -  -  ;
   72 00:0218 -  -  -  -  ; ***************************************************************************************
   73 00:0218 -  -  -  -  
   74 00:0218 -  -  -  -  WriteHLToDE:
   75 00:0218 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 00:021A C2 8C 04 00 		jp 		nz,TypeMismatch
   77 00:021E -  -  -  -  		;
   78 00:021E -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 00:021E -  -  -  -  		;		
   80 00:021E -  -  -  -  _WHDWriteNumber:
   81 00:021E EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 00:021F D9 -  -  -  		exx
   83 00:0220 EB -  -  -  		ex 		de,hl
   84 00:0221 D9 -  -  -  		exx
   85 00:0222 -  -  -  -  
   86 00:0222 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 00:0223 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 00:0224 72 -  -  -  		ld 		(hl),d
   89 00:0225 23 -  -  -  		inc 	hl
   90 00:0226 E5 -  -  -  		push 	hl
   91 00:0227 D9 -  -  -  		exx
   92 00:0228 E1 -  -  -  		pop 	hl
   93 00:0229 73 -  -  -  		ld 		(hl),e
   94 00:022A 23 -  -  -  		inc 	hl
   95 00:022B 72 -  -  -  		ld 		(hl),d
   96 00:022C D9 -  -  -  		exx
   97 00:022D -  -  -  -  
   98 00:022D C9 -  -  -  		ret
   99 00:022E -  -  -  -  
  100 00:022E -  -  -  -  ; ***************************************************************************************
  101 00:022E -  -  -  -  ;
  102 00:022E -  -  -  -  ;									Changes and Updates
  103 00:022E -  -  -  -  ;
  104 00:022E -  -  -  -  ; ***************************************************************************************
  105 00:022E -  -  -  -  ;
  106 00:022E -  -  -  -  ;		Date			Notes
  107 00:022E -  -  -  -  ;		==== 			=====
  108 00:022E -  -  -  -  ;
  109 00:022E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 00:022E -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 00:022E -  -  -  -  ; ***************************************************************************************
    2 00:022E -  -  -  -  ; ***************************************************************************************
    3 00:022E -  -  -  -  ;
    4 00:022E -  -  -  -  ;		Name : 		print.asm
    5 00:022E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:022E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:022E -  -  -  -  ;		Reviewed :	No
    8 00:022E -  -  -  -  ;		Purpose :	Print command
    9 00:022E -  -  -  -  ;
   10 00:022E -  -  -  -  ; ***************************************************************************************
   11 00:022E -  -  -  -  ; ***************************************************************************************
   12 00:022E -  -  -  -  
   13 00:022E -  -  -  -  ; ***************************************************************************************
   14 00:022E -  -  -  -  ;
   15 00:022E -  -  -  -  ;										PRINT command
   16 00:022E -  -  -  -  ;
   17 00:022E -  -  -  -  ; ***************************************************************************************
   18 00:022E -  -  -  -  
   19 00:022E -  -  -  -  Command_PRINT: 	;; [print]
   20 00:022E 3E F6 -  -  		ld 		a,-10 						; default base.
   21 00:0230 32 82 00 00 		ld 		(PrintBase),a
   22 00:0234 -  -  -  -  		;
   23 00:0234 -  -  -  -  		;		Main loop
   24 00:0234 -  -  -  -  		;
   25 00:0234 -  -  -  -  _CPRLoop:
   26 00:0234 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 00:0237 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 00:0239 28 59 -  -  		jr 		z,_CPRExitNL
   29 00:023B FE A7 -  -  		cp 		KWD_COLON 	
   30 00:023D 28 55 -  -  		jr 		z,_CPRExitNL
   31 00:023F FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 00:0241 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 00:0243 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 00:0245 28 34 -  -  		jr 		z,_CPRTab
   35 00:0247 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 00:0249 28 2A -  -  		jr 		z,_CPRNewLine
   37 00:024B FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 00:024D 28 1C -  -  		jr 		z,_CPRHexMode
   39 00:024F -  -  -  -  		;
   40 00:024F CD 59 06 00 		call 	EvaluateValue 				; so it must be an expression.		
   41 00:0253 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 00:0255 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 00:0257 -  -  -  -  		;
   44 00:0257 3A 82 00 00 		ld 		a,(PrintBase)				; current print mode.
   45 00:025B -  -  -  -  _CPRPrintNumber:
   46 00:025B 01 A6 00 00 		ld  	bc,ConvertBuffer
   47 00:025F C5 -  -  -  		push 	bc
   48 00:0260 CD 1D 14 00 		call 	Int32ToString 				; convert to string
   49 00:0264 E1 -  -  -  		pop 	hl
   50 00:0265 -  -  -  -  		;
   51 00:0265 -  -  -  -  		; 		Print text at HL.
   52 00:0265 -  -  -  -  		;
   53 00:0265 -  -  -  -  _CPRPrintHL:
   54 00:0265 CD 99 0D 00 		call 	PrintStringAtHL 			; print string out
   55 00:0269 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 00:026B -  -  -  -  		;
   57 00:026B -  -  -  -  		;		Hex mode (~)
   58 00:026B -  -  -  -  		;
   59 00:026B -  -  -  -  _CPRHexMode:		
   60 00:026B 3E 10 -  -  		ld 		a,16
   61 00:026D 32 82 00 00 		ld 		(PrintBase),a
   62 00:0271 DD 23 -  -  		inc 	ix
   63 00:0273 18 BF -  -  		jr 		_CPRLoop
   64 00:0275 -  -  -  -  		;
   65 00:0275 -  -  -  -  		; 		New line (')
   66 00:0275 -  -  -  -  		;
   67 00:0275 -  -  -  -  _CPRNewLine:
   68 00:0275 CD 6D 14 00 		call 	SYSPrintCRLF
   69 00:0279 18 0C -  -  		jr 		_CPRCheckNext
   70 00:027B -  -  -  -  		;
   71 00:027B -  -  -  -  		; 		Tab command (,)
   72 00:027B -  -  -  -  		;
   73 00:027B -  -  -  -  _CPRTab:
   74 00:027B 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 00:027D CD 6C 14 00 		call 	SYSPrintChar
   76 00:0281 -  -  -  -  		;
   77 00:0281 -  -  -  -  		;		Set to base 10 then check next character
   78 00:0281 -  -  -  -  		;
   79 00:0281 -  -  -  -  _CPRCheckNext10:		
   80 00:0281 3E F6 -  -  		ld 		a,-10
   81 00:0283 32 82 00 00 		ld 		(PrintBase),a
   82 00:0287 -  -  -  -  		;
   83 00:0287 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 00:0287 -  -  -  -  		;		
   85 00:0287 -  -  -  -  _CPRCheckNext:
   86 00:0287 DD 23 -  -  		inc 	ix 							; consume current
   87 00:0289 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 00:028C FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 00:028E C8 -  -  -  		ret 	z
   90 00:028F FE A7 -  -  		cp 		KWD_COLON
   91 00:0291 C8 -  -  -  		ret 	z
   92 00:0292 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 00:0294 -  -  -  -  		;
   94 00:0294 -  -  -  -  		;		Found EOL or : not after ; ,
   95 00:0294 -  -  -  -  		;
   96 00:0294 -  -  -  -  _CPRExitNL:
   97 00:0294 CD 6D 14 00 		call 	SYSPrintCRLF 				; do CR/LF
   98 00:0298 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 00:0299 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 00:0299 -  -  -  -  ; ***************************************************************************************
    2 00:0299 -  -  -  -  ; ***************************************************************************************
    3 00:0299 -  -  -  -  ;
    4 00:0299 -  -  -  -  ;		Name : 		rem.asm
    5 00:0299 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0299 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0299 -  -  -  -  ;		Reviewed :	No
    8 00:0299 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0299 -  -  -  -  ;
   10 00:0299 -  -  -  -  ; ***************************************************************************************
   11 00:0299 -  -  -  -  ; ***************************************************************************************
   12 00:0299 -  -  -  -  
   13 00:0299 -  -  -  -  ; ***************************************************************************************
   14 00:0299 -  -  -  -  ;
   15 00:0299 -  -  -  -  ;							Comment command, can be ' or REM
   16 00:0299 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 00:0299 -  -  -  -  ;
   18 00:0299 -  -  -  -  ; ***************************************************************************************
   19 00:0299 -  -  -  -  
   20 00:0299 -  -  -  -  Command_REM: 	;; [rem]
   21 00:0299 -  -  -  -  Command_REM2: 	;; [']
   22 00:0299 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 00:029C FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 00:029E C8 -  -  -  		ret 	z
   25 00:029F DD 23 -  -  		inc 	ix
   26 00:02A1 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 00:02A3 C8 -  -  -  		ret 	z
   28 00:02A4 FE 3F -  -  		cp 		STRING_MARKER
   29 00:02A6 C2 98 04 00 		jp 		nz,SyntaxError
   30 00:02AA -  -  -  -  		;		
   31 00:02AA 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 00:02AE DD 5E 00 -  		ld 		e,(ix+0)
   33 00:02B1 13 -  -  -  		inc 	de 
   34 00:02B2 13 -  -  -  		inc 	de
   35 00:02B3 DD 19 -  -  		add 	ix,de 						; skip string
   36 00:02B5 C9 -  -  -  		ret
   37 00:02B6 -  -  -  -  
   38 00:02B6 -  -  -  -  ; ***************************************************************************************
   39 00:02B6 -  -  -  -  ;
   40 00:02B6 -  -  -  -  ;									Changes and Updates
   41 00:02B6 -  -  -  -  ;
   42 00:02B6 -  -  -  -  ; ***************************************************************************************
   43 00:02B6 -  -  -  -  ;
   44 00:02B6 -  -  -  -  ;		Date			Notes
   45 00:02B6 -  -  -  -  ;		==== 			=====
   46 00:02B6 -  -  -  -  ;
   47 00:02B6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 00:02B6 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 00:02B6 -  -  -  -  ; ***************************************************************************************
    2 00:02B6 -  -  -  -  ; ***************************************************************************************
    3 00:02B6 -  -  -  -  ;
    4 00:02B6 -  -  -  -  ;		Name : 		run.asm
    5 00:02B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:02B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:02B6 -  -  -  -  ;		Reviewed :	No
    8 00:02B6 -  -  -  -  ;		Purpose :	Run command
    9 00:02B6 -  -  -  -  ;
   10 00:02B6 -  -  -  -  ; ***************************************************************************************
   11 00:02B6 -  -  -  -  ; ***************************************************************************************
   12 00:02B6 -  -  -  -  
   13 00:02B6 -  -  -  -  ; ***************************************************************************************
   14 00:02B6 -  -  -  -  ;
   15 00:02B6 -  -  -  -  ;										RUN command
   16 00:02B6 -  -  -  -  ;
   17 00:02B6 -  -  -  -  ; ***************************************************************************************
   18 00:02B6 -  -  -  -  
   19 00:02B6 -  -  -  -  Command_RUN: 	;; [run]
   20 00:02B6 CD C2 0A 00 		call 	Command_CLEAR 				; clear all variables, stack
   21 00:02BA -  -  -  -  
   22 00:02BA DD 2A 38 00 
              00 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 00:02BF ED 73 60 00 
              00 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 00:02C4 AF -  -  -  		xor 	a
   25 00:02C5 32 80 00 00 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 00:02C9 -  -  -  -  		;
   27 00:02C9 -  -  -  -  		; 		New line at IX.
   28 00:02C9 -  -  -  -  		;
   29 00:02C9 -  -  -  -  CRNewLine:
   30 00:02C9 DD 22 5C 00 
              00 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 00:02CE -  -  -  -  		;
   32 00:02CE DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 00:02D1 B7 -  -  -  		or 		a
   34 00:02D2 CA AC 01 00 		jp 		z,Command_END 				; if so, do an END, warm start
   35 00:02D6 -  -  -  -  		;
   36 00:02D6 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 00:02D8 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 00:02DA DD 23 -  -  		inc 	ix
   39 00:02DC -  -  -  -  		;
   40 00:02DC -  -  -  -  		; 		New command at IX
   41 00:02DC -  -  -  -  		;
   42 00:02DC -  -  -  -  _CRNewCommand:	
   43 00:02DC DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 00:02DF B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 00:02E0 F2 1B 03 00 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 00:02E4 -  -  -  -  		;
   47 00:02E4 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 00:02E6 30 06 -  -  		jr  	nc,_CRDoCommand
   49 00:02E8 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 00:02EA D2 0B 03 00 		jp 		nc,_CRAlternateLets
   51 00:02EE -  -  -  -  		;
   52 00:02EE -  -  -  -  _CRDoCommand:		
   53 00:02EE E6 7F 21 00 
              00 00 6F 29 
              29 11 26 11 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 00:0303 DD 23 -  -  		inc 	ix 							; skip over token.
   55 00:0305 CD 64 00 00 		call 	JumpCode 					; call the routine.
   56 00:0309 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 00:030B -  -  -  -  		;
   58 00:030B -  -  -  -  		; 		Do CALL (HL)
   59 00:030B -  -  -  -  		;
   60 00:030B -  -  -  -  		;
   61 00:030B -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 00:030B -  -  -  -  		;		
   63 00:030B -  -  -  -  _CRAlternateLets:		
   64 00:030B FE 83 -  -  		cp 		KWD_PLING
   65 00:030D 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 00:030F FE 84 -  -  		cp 		KWD_QMARK
   67 00:0311 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 00:0313 FE 96 -  -  		cp 		KWD_DOLLAR
   69 00:0315 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 00:0317 C3 98 04 00 		jp 		SyntaxError
   71 00:031B -  -  -  -  		;
   72 00:031B -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 00:031B -  -  -  -  		;
   74 00:031B -  -  -  -  _CRAssignmentHandler:		
   75 00:031B FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 00:031D D2 98 04 00 		jp 		nc,SyntaxError
   77 00:0321 -  -  -  -  _CRAssignmentLet:		
   78 00:0321 CD C9 01 00 		call	Command_LET 				; do LET.
   79 00:0325 C3 DC 02 00 		jp 		_CRNewCommand
   80 00:0329 -  -  -  -  
   81 00:0329 -  -  -  -  ; ***************************************************************************************
   82 00:0329 -  -  -  -  ;
   83 00:0329 -  -  -  -  ;									Changes and Updates
   84 00:0329 -  -  -  -  ;
   85 00:0329 -  -  -  -  ; ***************************************************************************************
   86 00:0329 -  -  -  -  ;
   87 00:0329 -  -  -  -  ;		Date			Notes
   88 00:0329 -  -  -  -  ;		==== 			=====
   89 00:0329 -  -  -  -  ;
   90 00:0329 -  -  -  -  ; ***************************************************************************************
   91 00:0329 -  -  -  -  		
Listing for file "_build.asm"
   24 00:0329 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 00:0329 -  -  -  -  ; ***************************************************************************************
    2 00:0329 -  -  -  -  ; ***************************************************************************************
    3 00:0329 -  -  -  -  ;
    4 00:0329 -  -  -  -  ;		Name : 		stop.asm
    5 00:0329 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0329 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0329 -  -  -  -  ;		Reviewed :	No
    8 00:0329 -  -  -  -  ;		Purpose :	Stop command
    9 00:0329 -  -  -  -  ;
   10 00:0329 -  -  -  -  ; ***************************************************************************************
   11 00:0329 -  -  -  -  ; ***************************************************************************************
   12 00:0329 -  -  -  -  
   13 00:0329 -  -  -  -  ; ***************************************************************************************
   14 00:0329 -  -  -  -  ;
   15 00:0329 -  -  -  -  ;										STOP command
   16 00:0329 -  -  -  -  ;
   17 00:0329 -  -  -  -  ; ***************************************************************************************
   18 00:0329 -  -  -  -  
   19 00:0329 -  -  -  -  Command_STOP: 	;; [stop]
   20 00:0329 3E 17 C3 2E 
              04 00 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 00:032F -  -  -  -  
   22 00:032F -  -  -  -  ; ***************************************************************************************
   23 00:032F -  -  -  -  ;
   24 00:032F -  -  -  -  ;									Changes and Updates
   25 00:032F -  -  -  -  ;
   26 00:032F -  -  -  -  ; ***************************************************************************************
   27 00:032F -  -  -  -  ;
   28 00:032F -  -  -  -  ;		Date			Notes
   29 00:032F -  -  -  -  ;		==== 			=====
   30 00:032F -  -  -  -  ;
   31 00:032F -  -  -  -  ; ***************************************************************************************
   32 00:032F -  -  -  -  		
Listing for file "_build.asm"
   25 00:032F -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 00:032F -  -  -  -  ; ***************************************************************************************
    2 00:032F -  -  -  -  ; ***************************************************************************************
    3 00:032F -  -  -  -  ;
    4 00:032F -  -  -  -  ;		Name : 		vdu.asm
    5 00:032F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:032F -  -  -  -  ;		Date : 		8th June 2022
    7 00:032F -  -  -  -  ;		Reviewed :	No
    8 00:032F -  -  -  -  ;		Purpose :	Vdu command
    9 00:032F -  -  -  -  ;
   10 00:032F -  -  -  -  ; ***************************************************************************************
   11 00:032F -  -  -  -  ; ***************************************************************************************
   12 00:032F -  -  -  -  
   13 00:032F -  -  -  -  ; ***************************************************************************************
   14 00:032F -  -  -  -  ;
   15 00:032F -  -  -  -  ;										END command
   16 00:032F -  -  -  -  ;
   17 00:032F -  -  -  -  ; ***************************************************************************************
   18 00:032F -  -  -  -  
   19 00:032F -  -  -  -  Command_VDU: 	;; [vdu]
   20 00:032F DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 00:0332 FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 00:0334 C8 -  -  -  		ret 	z
   23 00:0335 FE A7 -  -  		cp 		KWD_COLON
   24 00:0337 C8 -  -  -  		ret 	z
   25 00:0338 -  -  -  -  		;
   26 00:0338 CD 61 06 00 		call 	EvaluateInteger 			; evaluate integer value
   27 00:033C D9 -  -  -  		exx 								; check 0-FFFF
   28 00:033D 7C -  -  -  		ld 		a,h
   29 00:033E B5 -  -  -  		or 		l
   30 00:033F D9 -  -  -  		exx
   31 00:0340 C2 92 04 00 		jp  	nz,BadValue
   32 00:0344 E5 -  -  -  		push 	hl 							; save on stack
   33 00:0345 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 00:0346 CD 6C 14 00 		call 	SYSPrintChar
   35 00:034A E1 -  -  -  		pop 	hl 							; get upper back
   36 00:034B DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 00:034E DD 23 -  -  		inc 	ix 
   38 00:0350 FE A6 -  -  		cp 		KWD_COMMA 					
   39 00:0352 28 DB -  -  		jr 		z,Command_VDU
   40 00:0354 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 00:0356 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 00:0358 DD 2B -  -  		dec 	ix 							; go back and try again
   43 00:035A 18 D3 -  -  		jr 		Command_VDU
   44 00:035C -  -  -  -  
   45 00:035C -  -  -  -  _VDUUpper:
   46 00:035C 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 00:035D CD 6C 14 00 		call 	SYSPrintChar
   48 00:0361 18 CC -  -  		jr 		Command_VDU		
   49 00:0363 -  -  -  -  
   50 00:0363 -  -  -  -  ; ***************************************************************************************
   51 00:0363 -  -  -  -  ;
   52 00:0363 -  -  -  -  ;									Changes and Updates
   53 00:0363 -  -  -  -  ;
   54 00:0363 -  -  -  -  ; ***************************************************************************************
   55 00:0363 -  -  -  -  ;
   56 00:0363 -  -  -  -  ;		Date			Notes
   57 00:0363 -  -  -  -  ;		==== 			=====
   58 00:0363 -  -  -  -  ;
   59 00:0363 -  -  -  -  ; ***************************************************************************************
   60 00:0363 -  -  -  -  		
Listing for file "_build.asm"
   26 00:0363 -  -  -  -  #include "core/data/read.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
    1 00:0363 -  -  -  -  ; ***************************************************************************************
    2 00:0363 -  -  -  -  ; ***************************************************************************************
    3 00:0363 -  -  -  -  ;
    4 00:0363 -  -  -  -  ;		Name : 		read.asm
    5 00:0363 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0363 -  -  -  -  ;		Date : 		9th June 2022
    7 00:0363 -  -  -  -  ;		Reviewed :	No
    8 00:0363 -  -  -  -  ;		Purpose :	READ command
    9 00:0363 -  -  -  -  ;
   10 00:0363 -  -  -  -  ; ***************************************************************************************
   11 00:0363 -  -  -  -  
   12 00:0363 -  -  -  -  ; ***************************************************************************************
   13 00:0363 -  -  -  -  ;
   14 00:0363 -  -  -  -  ;									Read Command
   15 00:0363 -  -  -  -  ;
   16 00:0363 -  -  -  -  ; ***************************************************************************************
   17 00:0363 -  -  -  -  
   18 00:0363 -  -  -  -  Command_READ: ;; [read]
   19 00:0363 -  -  -  -  			;
   20 00:0363 -  -  -  -  			;		READ loop
   21 00:0363 -  -  -  -  			;
   22 00:0363 -  -  -  -  _CRLoop:	
   23 00:0363 21 88 00 00 			ld 		hl,DataScanRequired 	; check and clear scan required flag
   24 00:0367 7E -  -  -  			ld 		a,(hl)
   25 00:0368 36 00 -  -  			ld 		(hl),0 
   26 00:036A B7 -  -  -  			or 		a
   27 00:036B C4 AB 03 00 			call 	nz,CRScanForward 		; if required, scan forward to the first data
   28 00:036F -  -  -  -  			;
   29 00:036F 3E FF -  -  			ld 		a,$FF 					; we can autocreate READ variables
   30 00:0371 32 80 00 00 			ld 		(AllowAutoCreate),a
   31 00:0375 CD E7 0D 00 			call 	FindVariable 			; locate the variable, address in UHL now.
   32 00:0379 AF -  -  -  			xor 	a 						
   33 00:037A 32 80 00 00 			ld 		(AllowAutoCreate),a
   34 00:037E DD E5 -  -  			push 	ix 						; save position in program
   35 00:0380 E5 -  -  -  			push 	hl						; save variable target address.
   36 00:0381 -  -  -  -  			;
   37 00:0381 -  -  -  -  _CRLocateData:			
   38 00:0381 DD 2A 84 00 
              00 -  -  -  			ld 		ix,(ReadDataPointer) 	; current read position
   39 00:0386 CD 61 06 00 			call 	EvaluateInteger 		; should be an integer there.
   40 00:038A D1 -  -  -  			pop 	de 						; target address in DE
   41 00:038B CD 94 09 00 			call 	_LCVWrite32HL 			; function to write HL'HL to DE
   42 00:038F -  -  -  -  			;
   43 00:038F DD 7E 00 -  			ld 		a,(ix+0) 				; get following.
   44 00:0392 DD 23 -  -  			inc 	ix
   45 00:0394 DD 22 84 00 
              00 -  -  -  			ld 		(ReadDataPointer),ix 	; skip over it. It should be , EOS or :
   46 00:0399 -  -  -  -  			;
   47 00:0399 EE A6 -  -  			xor 	KWD_COMMA 				; will be zero if a comma, hence no scan required
   48 00:039B 32 88 00 00 			ld 		(DataScanRequired),a 	; update the flag accordingly.
   49 00:039F -  -  -  -  			;
   50 00:039F DD E1 -  -  			pop 	ix						; get program position back
   51 00:03A1 DD 7E 00 -  			ld 		a,(ix+0) 				; is it followed by a comma
   52 00:03A4 FE A6 -  -  			cp 		KWD_COMMA
   53 00:03A6 C0 -  -  -  			ret 	nz 						; no, end of READ
   54 00:03A7 DD 23 -  -  			inc 	ix 						; skip comma
   55 00:03A9 18 B8 -  -  			jr 		_CRLoop 				; go round again.
   56 00:03AB -  -  -  -  
   57 00:03AB -  -  -  -  ; ***************************************************************************************
   58 00:03AB -  -  -  -  ;
   59 00:03AB -  -  -  -  ;			Scan the data pointer forward to the next data statement, error if none.
   60 00:03AB -  -  -  -  ;
   61 00:03AB -  -  -  -  ; ***************************************************************************************
   62 00:03AB -  -  -  -  
   63 00:03AB -  -  -  -  CRScanForward:
   64 00:03AB DD E5 -  -  			push 	ix
   65 00:03AD DD 2A 84 00 
              00 -  -  -  			ld 		ix,(ReadDataPointer)
   66 00:03B2 -  -  -  -  _CRScanLoop:
   67 00:03B2 06 C8 -  -  			ld 		b,KWD_DATA 				; want to search for DATA or EOL
   68 00:03B4 0E 80 -  -  			ld 		c,KWC_EOL_MARKER
   69 00:03B6 CD FE 0C 00 			call 	SearchForwardTokens 	; look for DATA or EOL in current line.
   70 00:03BA FE C8 -  -  			cp 		KWD_DATA 				; DATA found, we can exit
   71 00:03BC 28 12 -  -  			jr 		z,_CRScanExit
   72 00:03BE -  -  -  -  			;
   73 00:03BE DD 7E 00 -  			ld 		a,(ix+0) 				; get offset
   74 00:03C1 DD 23 -  -  			inc 	ix 						; point to start of next line.
   75 00:03C3 DD 23 -  -  			inc 	ix
   76 00:03C5 DD 23 -  -  			inc 	ix
   77 00:03C7 B7 -  -  -  			or 		a 						; if offset non zero try that line.
   78 00:03C8 20 E8 -  -  			jr 		nz,_CRScanLoop
   79 00:03CA 3E 04 C3 2E 
              04 00 -  -  			ERR_DATA 						; we have no data.
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
   80 00:03D0 -  -  -  -  
   81 00:03D0 -  -  -  -  _CRScanExit:
   82 00:03D0 DD 22 84 00 
              00 -  -  -  			ld 		(ReadDataPointer),ix 	; update pointer at new DATA.
   83 00:03D5 DD E1 -  -  			pop 	ix
   84 00:03D7 C9 -  -  -  			ret
   85 00:03D8 -  -  -  -  
   86 00:03D8 -  -  -  -  ; ***************************************************************************************
   87 00:03D8 -  -  -  -  ;
   88 00:03D8 -  -  -  -  ;									Changes and Updates
   89 00:03D8 -  -  -  -  ;
   90 00:03D8 -  -  -  -  ; ***************************************************************************************
   91 00:03D8 -  -  -  -  ;
   92 00:03D8 -  -  -  -  ;		Date			Notes
   93 00:03D8 -  -  -  -  ;		==== 			=====
   94 00:03D8 -  -  -  -  ;
   95 00:03D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 00:03D8 -  -  -  -  #include "core/data/restore.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/restore.asm"
    1 00:03D8 -  -  -  -  ; ***************************************************************************************
    2 00:03D8 -  -  -  -  ; ***************************************************************************************
    3 00:03D8 -  -  -  -  ;
    4 00:03D8 -  -  -  -  ;		Name : 		restore.asm
    5 00:03D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03D8 -  -  -  -  ;		Date : 		9th June 2022
    7 00:03D8 -  -  -  -  ;		Reviewed :	No
    8 00:03D8 -  -  -  -  ;		Purpose :	RESTORE command
    9 00:03D8 -  -  -  -  ;
   10 00:03D8 -  -  -  -  ; ***************************************************************************************
   11 00:03D8 -  -  -  -  
   12 00:03D8 -  -  -  -  ; ***************************************************************************************
   13 00:03D8 -  -  -  -  ;
   14 00:03D8 -  -  -  -  ;									Restore Command
   15 00:03D8 -  -  -  -  ;
   16 00:03D8 -  -  -  -  ; ***************************************************************************************
   17 00:03D8 -  -  -  -  
   18 00:03D8 -  -  -  -  Command_RESTORE: ;; [restore]
   19 00:03D8 2A 38 00 00 			ld 		hl,(CodeAddress)		; HL+3 is the first token.
   20 00:03DC 23 -  -  -  			inc 	hl
   21 00:03DD 23 -  -  -  			inc 	hl
   22 00:03DE 23 -  -  -  			inc 	hl
   23 00:03DF 22 84 00 00 			ld 		(ReadDataPointer),hl 	; scan from here.
   24 00:03E3 3E FF -  -  			ld 		a,$FF 					; scan required first time out.
   25 00:03E5 32 88 00 00 			ld 		(DataScanRequired),a
   26 00:03E9 C9 -  -  -  			ret 					
   27 00:03EA -  -  -  -  
   28 00:03EA -  -  -  -  ; ***************************************************************************************
   29 00:03EA -  -  -  -  ;
   30 00:03EA -  -  -  -  ;									Changes and Updates
   31 00:03EA -  -  -  -  ;
   32 00:03EA -  -  -  -  ; ***************************************************************************************
   33 00:03EA -  -  -  -  ;
   34 00:03EA -  -  -  -  ;		Date			Notes
   35 00:03EA -  -  -  -  ;		==== 			=====
   36 00:03EA -  -  -  -  ;
   37 00:03EA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 00:03EA -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 00:03EA -  -  -  -  ; ***************************************************************************************
    2 00:03EA -  -  -  -  ; ***************************************************************************************
    3 00:03EA -  -  -  -  ;
    4 00:03EA -  -  -  -  ;		Name : 		charcheck.asm
    5 00:03EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:03EA -  -  -  -  ;		Date : 		3rd June 2022
    7 00:03EA -  -  -  -  ;		Reviewed :	No
    8 00:03EA -  -  -  -  ;		Purpose :	Check next character type functions.
    9 00:03EA -  -  -  -  ;
   10 00:03EA -  -  -  -  ; ***************************************************************************************
   11 00:03EA -  -  -  -  ; ***************************************************************************************
   12 00:03EA -  -  -  -  
   13 00:03EA -  -  -  -  ; ***************************************************************************************
   14 00:03EA -  -  -  -  ;
   15 00:03EA -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 00:03EA -  -  -  -  ;
   17 00:03EA -  -  -  -  ; ***************************************************************************************
   18 00:03EA -  -  -  -  
   19 00:03EA -  -  -  -  #macro 	checknext(ch,errorid)
   20 00:03EA             		ld 		a,(ix+0) 					; get next character and skip it
   21 00:03EA             		inc 	ix
   22 00:03EA             		cp 		ch 							; exit if matches
   23 00:03EA             		ret 	z
   24 00:03EA             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 00:03EA             		jp 		ErrorHandler
   26 00:03EA             #endmacro
   27 00:03EA -  -  -  -  
   28 00:03EA -  -  -  -  CheckLeftBracket:
   29 00:03EA DD 7E 00 DD 
              23 FE 95 C8 
              3E 0F C3 2E 
              04 00 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 00:03F8 -  -  -  -  
   31 00:03F8 -  -  -  -  CheckRightBracket:
   32 00:03F8 DD 7E 00 DD 
              23 FE A5 C8 
              3E 11 C3 2E 
              04 00 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 00:0406 -  -  -  -  
   34 00:0406 -  -  -  -  CheckDollar:
   35 00:0406 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0E C3 2E 
              04 00 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 00:0414 -  -  -  -  		
   37 00:0414 -  -  -  -  CheckComma:
   38 00:0414 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0D C3 2E 
              04 00 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 00:0422 -  -  -  -  
   40 00:0422 -  -  -  -  ; ***************************************************************************************
   41 00:0422 -  -  -  -  ;
   42 00:0422 -  -  -  -  ; 							Check A, gives Syntax Error
   43 00:0422 -  -  -  -  ;
   44 00:0422 -  -  -  -  ; ***************************************************************************************
   45 00:0422 -  -  -  -  
   46 00:0422 -  -  -  -  CheckNextA:
   47 00:0422 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 00:0425 DD 23 -  -  		inc 	ix 							; skip character
   49 00:0427 C8 -  -  -  		ret 	z 							; yes, okay
   50 00:0428 3E 18 C3 2E 
              04 00 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 00:042E -  -  -  -  		
   52 00:042E -  -  -  -  ; ***************************************************************************************
   53 00:042E -  -  -  -  ;
   54 00:042E -  -  -  -  ;									Changes and Updates
   55 00:042E -  -  -  -  ;
   56 00:042E -  -  -  -  ; ***************************************************************************************
   57 00:042E -  -  -  -  ;
   58 00:042E -  -  -  -  ;		Date			Notes
   59 00:042E -  -  -  -  ;		==== 			=====
   60 00:042E -  -  -  -  ;
   61 00:042E -  -  -  -  ; ***************************************************************************************
   62 00:042E -  -  -  -  		
Listing for file "_build.asm"
   29 00:042E -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 00:042E -  -  -  -  ; ***************************************************************************************
    2 00:042E -  -  -  -  ; ***************************************************************************************
    3 00:042E -  -  -  -  ;
    4 00:042E -  -  -  -  ;		Name : 		errors.asm
    5 00:042E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:042E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:042E -  -  -  -  ;		Reviewed :	No
    8 00:042E -  -  -  -  ;		Purpose :	ErrorHandler
    9 00:042E -  -  -  -  ;
   10 00:042E -  -  -  -  ; ***************************************************************************************
   11 00:042E -  -  -  -  ; ***************************************************************************************
   12 00:042E -  -  -  -  
   13 00:042E -  -  -  -  ; ***************************************************************************************
   14 00:042E -  -  -  -  ;
   15 00:042E -  -  -  -  ;								Error handler, message A 
   16 00:042E -  -  -  -  ;
   17 00:042E -  -  -  -  ; ***************************************************************************************
   18 00:042E -  -  -  -  
   19 00:042E -  -  -  -  ErrorHandler:
   20 00:042E F5 -  -  -  		push 	af 						; save error ID
   21 00:042F -  -  -  -  
   22 00:042F 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 00:0433 6F -  -  -  		ld 		l,a
   24 00:0434 29 -  -  -  		add 	hl,hl 					; x 4
   25 00:0435 29 -  -  -  		add 	hl,hl 		
   26 00:0436 11 11 0F 00 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 00:043A 19 -  -  -  		add 	hl,de
   28 00:043B ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 00:043D CD 99 0D 00 		call 	PrintStringAtHL
   30 00:0441 -  -  -  -  		;
   31 00:0441 F1 -  -  -  		pop 	af 						; restore error ID
   32 00:0442 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 00:0443 28 2F -  -  		jr 		z,_EHExit
   34 00:0445 -  -  -  -  		;
   35 00:0445 DD 2A 5C 00 
              00 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 00:044A DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 00:044D B7 -  -  -  		or 		a
   38 00:044E 28 24 -  -  		jr 		z,_EHExit
   39 00:0450 -  -  -  -  
   40 00:0450 21 7C 04 00 		ld 		hl,_EHAtText 			; print "at line"
   41 00:0454 CD 99 0D 00 		call 	PrintStringAtHL 
   42 00:0458 -  -  -  -  		
   43 00:0458 D9 -  -  -  		exx								; HL'HL = line number
   44 00:0459 21 00 00 00 		ld 		hl,$0000 		
   45 00:045D D9 -  -  -  		exx 
   46 00:045E DD 6E 01 -  		ld 		l,(ix+1)
   47 00:0461 DD 66 02 -  		ld 		h,(ix+2)
   48 00:0464 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 00:0466 01 A6 00 00 		ld 		bc,ConvertBuffer
   50 00:046A CD 1D 14 00 		call 	Int32ToString
   51 00:046E C5 -  -  -  		push 	bc
   52 00:046F E1 -  -  -  		pop 	hl
   53 00:0470 CD 99 0D 00 		call 	PrintStringAtHL			; print error line number.
   54 00:0474 -  -  -  -  _EHExit:		
   55 00:0474 CD 6D 14 00 		call 	SYSPrintCRLF 			; print carriage return
   56 00:0478 C3 1A 00 00 		jp 		WarmStart
   57 00:047C -  -  -  -  
   58 00:047C -  -  -  -  _EHAtText:
   59 00:047C 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 00:0486 -  -  -  -  
   61 00:0486 -  -  -  -  NotImplemented:
   62 00:0486 3E 06 C3 2E 
              04 00 -  -  		ERR_DISABLED
   63 00:048C -  -  -  -  TypeMismatch:
   64 00:048C 3E 02 C3 2E 
              04 00 -  -  		ERR_BADTYPE
   65 00:0492 -  -  -  -  BadValue:
   66 00:0492 3E 03 C3 2E 
              04 00 -  -  		ERR_BADVALUE
   67 00:0498 -  -  -  -  SyntaxError:
   68 00:0498 3E 18 C3 2E 
              04 00 -  -  		ERR_SYNTAX
   69 00:049E -  -  -  -  						
   70 00:049E -  -  -  -  ; ***************************************************************************************
   71 00:049E -  -  -  -  ;
   72 00:049E -  -  -  -  ;									Changes and Updates
   73 00:049E -  -  -  -  ;
   74 00:049E -  -  -  -  ; ***************************************************************************************
   75 00:049E -  -  -  -  ;
   76 00:049E -  -  -  -  ;		Date			Notes
   77 00:049E -  -  -  -  ;		==== 			=====
   78 00:049E -  -  -  -  ;
   79 00:049E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 00:049E -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 00:049E -  -  -  -  ; ***************************************************************************************
    2 00:049E -  -  -  -  ; ***************************************************************************************
    3 00:049E -  -  -  -  ;
    4 00:049E -  -  -  -  ;		Name : 		basicmath.asm
    5 00:049E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:049E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:049E -  -  -  -  ;		Reviewed :	No
    8 00:049E -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 00:049E -  -  -  -  ;
   10 00:049E -  -  -  -  ; ***************************************************************************************
   11 00:049E -  -  -  -  ; ***************************************************************************************
   12 00:049E -  -  -  -  
   13 00:049E -  -  -  -  ; ***************************************************************************************
   14 00:049E -  -  -  -  ;
   15 00:049E -  -  -  -  ; 									Addition
   16 00:049E -  -  -  -  ;
   17 00:049E -  -  -  -  ; ***************************************************************************************
   18 00:049E -  -  -  -  
   19 00:049E -  -  -  -  ALUAdd: 		;; [+]
   20 00:049E CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 9C 
              13 00 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 00:04AC -  -  -  -  
   22 00:04AC -  -  -  -  ; ***************************************************************************************
   23 00:04AC -  -  -  -  ;
   24 00:04AC -  -  -  -  ; 									Subtraction
   25 00:04AC -  -  -  -  ;
   26 00:04AC -  -  -  -  ; ***************************************************************************************
   27 00:04AC -  -  -  -  
   28 00:04AC -  -  -  -  ALUSubtract: 	;; [-]
   29 00:04AC CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 A4 
              13 00 -  -  		IntegerDispatch(Int32Subtract)
   30 00:04BA -  -  -  -  
   31 00:04BA -  -  -  -  ; ***************************************************************************************
   32 00:04BA -  -  -  -  ;
   33 00:04BA -  -  -  -  ; 									  Multiply
   34 00:04BA -  -  -  -  ;
   35 00:04BA -  -  -  -  ; ***************************************************************************************
   36 00:04BA -  -  -  -  
   37 00:04BA -  -  -  -  ALUMultiply: 	;; [*]
   38 00:04BA CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 63 
              13 00 -  -  		IntegerDispatch(Int32Multiply)
   39 00:04C8 -  -  -  -  
   40 00:04C8 -  -  -  -  ; ***************************************************************************************
   41 00:04C8 -  -  -  -  ;
   42 00:04C8 -  -  -  -  ; 									  Divide
   43 00:04C8 -  -  -  -  ;
   44 00:04C8 -  -  -  -  ; ***************************************************************************************
   45 00:04C8 -  -  -  -  
   46 00:04C8 -  -  -  -  ALUDivide: 	;; [/]
   47 00:04C8 -  -  -  -  ALUDivide2:	;; [div]
   48 00:04C8 CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 63 
              12 00 -  -  		IntegerDispatch(Int32SDivide)
   49 00:04D6 -  -  -  -  
   50 00:04D6 -  -  -  -  ; ***************************************************************************************
   51 00:04D6 -  -  -  -  ;
   52 00:04D6 -  -  -  -  ; 									  Modulus
   53 00:04D6 -  -  -  -  ;
   54 00:04D6 -  -  -  -  ; ***************************************************************************************
   55 00:04D6 -  -  -  -  
   56 00:04D6 -  -  -  -  ALUModulus: 	;; [mod]
   57 00:04D6 CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 66 
              12 00 -  -  		IntegerDispatch(Int32Modulus)
   58 00:04E4 -  -  -  -  
   59 00:04E4 -  -  -  -  ; ***************************************************************************************
   60 00:04E4 -  -  -  -  ;
   61 00:04E4 -  -  -  -  ; 									  Logical
   62 00:04E4 -  -  -  -  ;
   63 00:04E4 -  -  -  -  ; ***************************************************************************************
   64 00:04E4 -  -  -  -  
   65 00:04E4 -  -  -  -  ALUAnd: 		;; [and]
   66 00:04E4 CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 AE 
              13 00 -  -  		IntegerDispatch(Int32And)
   67 00:04F2 -  -  -  -  
   68 00:04F2 -  -  -  -  ALUOr: 			;; [or]
   69 00:04F2 CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 BB 
              13 00 -  -  		IntegerDispatch(Int32Or)
   70 00:0500 -  -  -  -  
   71 00:0500 -  -  -  -  ALUXor: 		;; [eor]
   72 00:0500 CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 C8 
              13 00 -  -  		IntegerDispatch(Int32Xor)
   73 00:050E -  -  -  -  
   74 00:050E -  -  -  -  ; ***************************************************************************************
   75 00:050E -  -  -  -  ;
   76 00:050E -  -  -  -  ;									Changes and Updates
   77 00:050E -  -  -  -  ;
   78 00:050E -  -  -  -  ; ***************************************************************************************
   79 00:050E -  -  -  -  ;
   80 00:050E -  -  -  -  ;		Date			Notes
   81 00:050E -  -  -  -  ;		==== 			=====
   82 00:050E -  -  -  -  ;
   83 00:050E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 00:050E -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 00:050E -  -  -  -  ; ***************************************************************************************
    2 00:050E -  -  -  -  ; ***************************************************************************************
    3 00:050E -  -  -  -  ;
    4 00:050E -  -  -  -  ;		Name : 		binrefs.asm
    5 00:050E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:050E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:050E -  -  -  -  ;		Reviewed :	No
    8 00:050E -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 00:050E -  -  -  -  ;
   10 00:050E -  -  -  -  ; ***************************************************************************************
   11 00:050E -  -  -  -  ; ***************************************************************************************
   12 00:050E -  -  -  -  
   13 00:050E -  -  -  -  ; ***************************************************************************************
   14 00:050E -  -  -  -  ;
   15 00:050E -  -  -  -  ; 									<l> <op> <r>
   16 00:050E -  -  -  -  ;
   17 00:050E -  -  -  -  ; ***************************************************************************************
   18 00:050E -  -  -  -  
   19 00:050E -  -  -  -  ALULongReference:			;; [!]
   20 00:050E CD 1E 05 00 		call 	BRGetAddress 				; calculate address
   21 00:0512 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 00:0514 CB F9 -  -  		set 	CIsReference,c
   23 00:0516 C9 -  -  -  		ret
   24 00:0517 -  -  -  -  
   25 00:0517 -  -  -  -  ALUByteReference: 			;; [?]
   26 00:0517 CD 0E 05 00 		call 	ALULongReference
   27 00:051B CB F1 -  -  		set 	CIsByteReference,c
   28 00:051D C9 -  -  -  		ret
   29 00:051E -  -  -  -  
   30 00:051E -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 00:051E CD BB 05 00 
              78 B1 C2 8C 
              04 00 C3 2C 
              05 00 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 00:052C -  -  -  -  _BRGAMain:		
   33 00:052C CD 9C 13 00 		call 	Int32Add 					; address in HL'HL
   34 00:0530 CD C1 06 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 00:0534 C9 -  -  -  		ret
   36 00:0535 -  -  -  -  
   37 00:0535 -  -  -  -  ; ***************************************************************************************
   38 00:0535 -  -  -  -  ;
   39 00:0535 -  -  -  -  ;									Changes and Updates
   40 00:0535 -  -  -  -  ;
   41 00:0535 -  -  -  -  ; ***************************************************************************************
   42 00:0535 -  -  -  -  ;
   43 00:0535 -  -  -  -  ;		Date			Notes
   44 00:0535 -  -  -  -  ;		==== 			=====
   45 00:0535 -  -  -  -  ;
   46 00:0535 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 00:0535 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 00:0535 -  -  -  -  ; ***************************************************************************************
    2 00:0535 -  -  -  -  ; ***************************************************************************************
    3 00:0535 -  -  -  -  ;
    4 00:0535 -  -  -  -  ;		Name : 		compare.asm
    5 00:0535 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0535 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0535 -  -  -  -  ;		Reviewed :	No
    8 00:0535 -  -  -  -  ;		Purpose :	Comparison code
    9 00:0535 -  -  -  -  ;
   10 00:0535 -  -  -  -  ; ***************************************************************************************
   11 00:0535 -  -  -  -  ; ***************************************************************************************
   12 00:0535 -  -  -  -  
   13 00:0535 -  -  -  -  #macro compare_equals(n)
   14 00:0535             		call 	CompareBaseCode
   15 00:0535             		cp 		n
   16 00:0535             		jr 		z,UnaryInt32True
   17 00:0535             		jr 		UnaryInt32False
   18 00:0535             #endmacro
   19 00:0535 -  -  -  -  
   20 00:0535 -  -  -  -  #macro compare_not_equals(n)
   21 00:0535             		call 	CompareBaseCode
   22 00:0535             		cp 		n
   23 00:0535             		jr 		nz,UnaryInt32True
   24 00:0535             		jr 		UnaryInt32False
   25 00:0535             #endmacro
   26 00:0535 -  -  -  -  
   27 00:0535 -  -  -  -  ; ***************************************************************************************
   28 00:0535 -  -  -  -  ;
   29 00:0535 -  -  -  -  ; 								Return True/False
   30 00:0535 -  -  -  -  ;
   31 00:0535 -  -  -  -  ; ***************************************************************************************
   32 00:0535 -  -  -  -  
   33 00:0535 -  -  -  -  UnaryInt32True:	;; [true]
   34 00:0535 3E FF -  -  		ld 		a,255
   35 00:0537 18 01 -  -  		jr 		_Int32Logical
   36 00:0539 -  -  -  -  UnaryInt32False: ;; [false]
   37 00:0539 AF -  -  -  		xor 	a
   38 00:053A -  -  -  -  _Int32Logical:
   39 00:053A 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 00:053B 67 -  -  -  		ld 		h,a
   41 00:053C D9 -  -  -  		exx
   42 00:053D 6F -  -  -  		ld 		l,a
   43 00:053E 67 -  -  -  		ld 		h,a
   44 00:053F D9 -  -  -  		exx
   45 00:0540 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 00:0542 C9 -  -  -  		ret
   47 00:0543 -  -  -  -  
   48 00:0543 -  -  -  -  ; ***************************************************************************************
   49 00:0543 -  -  -  -  ;
   50 00:0543 -  -  -  -  ; 										> = < (compare == value)
   51 00:0543 -  -  -  -  ;
   52 00:0543 -  -  -  -  ; ***************************************************************************************
   53 00:0543 -  -  -  -  
   54 00:0543 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 00:0543 CD 7F 05 00 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 00:054D -  -  -  -  
   57 00:054D -  -  -  -  ALUCompareLess: 			;; [<]
   58 00:054D CD 7F 05 00 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 00:0557 -  -  -  -  
   60 00:0557 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 00:0557 CD 7F 05 00 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 00:0561 -  -  -  -  
   63 00:0561 -  -  -  -  ; ***************************************************************************************
   64 00:0561 -  -  -  -  ;
   65 00:0561 -  -  -  -  ; 										> = < (compare <> value)
   66 00:0561 -  -  -  -  ;
   67 00:0561 -  -  -  -  ; ***************************************************************************************
   68 00:0561 -  -  -  -  
   69 00:0561 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 00:0561 CD 7F 05 00 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 00:056B -  -  -  -  
   72 00:056B -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 00:056B CD 7F 05 00 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 00:0575 -  -  -  -  
   75 00:0575 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 00:0575 CD 7F 05 00 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 00:057F -  -  -  -  
   78 00:057F -  -  -  -  ; ***************************************************************************************
   79 00:057F -  -  -  -  ;
   80 00:057F -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 00:057F -  -  -  -  ;
   82 00:057F -  -  -  -  ; ***************************************************************************************
   83 00:057F -  -  -  -  
   84 00:057F -  -  -  -  CompareBaseCode:
   85 00:057F CD BB 05 00 		call 	DereferenceBoth 			; dereference both L & R
   86 00:0583 -  -  -  -  
   87 00:0583 78 -  -  -  		ld 		a,b 						; check if both string.
   88 00:0584 A1 -  -  -  		and 	c
   89 00:0585 CB 47 -  -  		bit 	CIsString,a 
   90 00:0587 C2 99 05 00 		jp 		nz,StringCompare
   91 00:058B -  -  -  -  
   92 00:058B 78 -  -  -  		ld 		a,b 						; check if either is string
   93 00:058C B1 -  -  -  		or 		c
   94 00:058D CB 47 -  -  		bit 	CIsString,a 
   95 00:058F CA DC 13 00 		jp 		z,Int32Compare 				; if not do as integer
   96 00:0593 -  -  -  -  
   97 00:0593 3E 02 C3 2E 
              04 00 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 00:0599 -  -  -  -  ;
   99 00:0599 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 00:0599 -  -  -  -  ;
  101 00:0599 -  -  -  -  StringCompare:
  102 00:0599 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 00:059A BE -  -  -  		cp 		(hl)
  104 00:059B 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 00:059D 20 08 -  -  		jr 		nz,_SCLess
  106 00:059F 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 00:05A0 23 -  -  -  		inc 	hl
  108 00:05A1 FE 20 -  -  		cp 		' '
  109 00:05A3 30 F4 -  -  		jr 		nc,StringCompare
  110 00:05A5 AF -  -  -  		xor 	a 							; return 0.
  111 00:05A6 C9 -  -  -  		ret
  112 00:05A7 -  -  -  -  
  113 00:05A7 -  -  -  -  _SCLess:
  114 00:05A7 3E FF -  -  		ld 		a,$FF
  115 00:05A9 C9 -  -  -  		ret
  116 00:05AA -  -  -  -  _SCGreater:
  117 00:05AA 3E 01 -  -  		ld 		a,1
  118 00:05AC C9 -  -  -  		ret
  119 00:05AD -  -  -  -  
  120 00:05AD 3E 19 C3 2E 
              04 00 -  -  		ERR_TODO()
  121 00:05B3 -  -  -  -  
  122 00:05B3 -  -  -  -  ; ***************************************************************************************
  123 00:05B3 -  -  -  -  ;
  124 00:05B3 -  -  -  -  ;									Changes and Updates
  125 00:05B3 -  -  -  -  ;
  126 00:05B3 -  -  -  -  ; ***************************************************************************************
  127 00:05B3 -  -  -  -  ;
  128 00:05B3 -  -  -  -  ;		Date			Notes
  129 00:05B3 -  -  -  -  ;		==== 			=====
  130 00:05B3 -  -  -  -  ;
  131 00:05B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 00:05B3 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 00:05B3 -  -  -  -  ; ***************************************************************************************
    2 00:05B3 -  -  -  -  ; ***************************************************************************************
    3 00:05B3 -  -  -  -  ;
    4 00:05B3 -  -  -  -  ;		Name : 		utility.asm
    5 00:05B3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05B3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05B3 -  -  -  -  ;		Reviewed :	No
    8 00:05B3 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 00:05B3 -  -  -  -  ;
   10 00:05B3 -  -  -  -  ; ***************************************************************************************
   11 00:05B3 -  -  -  -  ; ***************************************************************************************
   12 00:05B3 -  -  -  -  
   13 00:05B3 -  -  -  -  ; ***************************************************************************************
   14 00:05B3 -  -  -  -  ;
   15 00:05B3 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 00:05B3 -  -  -  -  ;
   17 00:05B3 -  -  -  -  ; ***************************************************************************************
   18 00:05B3 -  -  -  -  
   19 00:05B3 -  -  -  -  SwapHLDE:
   20 00:05B3 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 00:05B4 D9 -  -  -  			exx
   22 00:05B5 EB -  -  -  			ex 		de,hl
   23 00:05B6 D9 -  -  -  			exx
   24 00:05B7 78 -  -  -  			ld 		a,b 					; swap B & C
   25 00:05B8 41 -  -  -  			ld 		b,c
   26 00:05B9 4F -  -  -  			ld 		c,a
   27 00:05BA C9 -  -  -  			ret
   28 00:05BB -  -  -  -  
   29 00:05BB -  -  -  -  ; ***************************************************************************************
   30 00:05BB -  -  -  -  ;
   31 00:05BB -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 00:05BB -  -  -  -  ;
   33 00:05BB -  -  -  -  ; ***************************************************************************************
   34 00:05BB -  -  -  -  
   35 00:05BB -  -  -  -  DereferenceBoth:
   36 00:05BB CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 00:05BD C4 94 06 00 			call 	nz,Dereference 			; Deref C:HL'HL
   38 00:05C1 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 00:05C3 C8 -  -  -  			ret 	z
   40 00:05C4 CD B3 05 00 			call 	SwapHLDE 				; swap HL and DE over.
   41 00:05C8 CD 94 06 00 			call 	Dereference 			; dereference what was B:DE'DE
   42 00:05CC CD B3 05 00 			call 	SwapHLDE 				; swap HL and DE over.
   43 00:05D0 C9 -  -  -  			ret
   44 00:05D1 -  -  -  -  
   45 00:05D1 -  -  -  -  ; ***************************************************************************************
   46 00:05D1 -  -  -  -  ;
   47 00:05D1 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 00:05D1 -  -  -  -  ;
   49 00:05D1 -  -  -  -  ; ***************************************************************************************
   50 00:05D1 -  -  -  -  
   51 00:05D1 -  -  -  -  NegateHLHL:	
   52 00:05D1 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 00:05D3 C2 8C 04 00 			jp 		nz,TypeMismatch
   54 00:05D7 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 00:05D9 C4 94 06 00 			call 	nz,Dereference 			; if required.
   56 00:05DD CD 06 14 00 			call 	Int32Negate
   57 00:05E1 C9 -  -  -  			ret
Listing for file "_build.asm"
   34 00:05E2 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 00:05E2 -  -  -  -  ; ***************************************************************************************
    2 00:05E2 -  -  -  -  ; ***************************************************************************************
    3 00:05E2 -  -  -  -  ;
    4 00:05E2 -  -  -  -  ;		Name : 		expression.asm
    5 00:05E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:05E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:05E2 -  -  -  -  ;		Reviewed :	None
    8 00:05E2 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 00:05E2 -  -  -  -  ;
   10 00:05E2 -  -  -  -  ; ***************************************************************************************
   11 00:05E2 -  -  -  -  ; ***************************************************************************************
   12 00:05E2 -  -  -  -  
   13 00:05E2 -  -  -  -  ; ***************************************************************************************
   14 00:05E2 -  -  -  -  ;
   15 00:05E2 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 00:05E2 -  -  -  -  ;
   17 00:05E2 -  -  -  -  ; ***************************************************************************************
   18 00:05E2 -  -  -  -  
   19 00:05E2 -  -  -  -  EvaluateAtPrecedence0:
   20 00:05E2 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 00:05E3 -  -  -  -  EvaluateAtPrecedence:
   22 00:05E3 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 00:05E4 -  -  -  -  		;
   24 00:05E4 -  -  -  -  		; 		Get a term into C:HL'HL
   25 00:05E4 -  -  -  -  		;
   26 00:05E4 CD F0 06 00 		call 	EvaluateTerm 				; get term
   27 00:05E8 -  -  -  -  		;
   28 00:05E8 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 00:05E8 -  -  -  -  		;
   30 00:05E8 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 00:05E9 -  -  -  -  _EAPLoop:
   32 00:05E9 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 00:05EC FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 00:05EE D8 -  -  -  		ret 	c
   35 00:05EF FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 00:05F1 D0 -  -  -  		ret 	nc
   37 00:05F2 -  -  -  -  		;
   38 00:05F2 -  -  -  -  		; 		Get the precedence.
   39 00:05F2 -  -  -  -  		;
   40 00:05F2 E5 -  -  -  		push 	hl 							; want to use HL
   41 00:05F3 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 00:05F5 21 00 0F 00 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 00:05F9 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 00:05FA 6F -  -  -  		ld 		l,a
   45 00:05FB 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 00:05FC E1 -  -  -  		pop 	hl 							; restore HL
   47 00:05FD -  -  -  -  		;
   48 00:05FD -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 00:05FD -  -  -  -  		;
   50 00:05FD 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 00:05FE BB -  -  -  		cp 		e
   52 00:05FF D0 -  -  -  		ret 	nc
   53 00:0600 -  -  -  -  
   54 00:0600 -  -  -  -  		;
   55 00:0600 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 00:0600 -  -  -  -  		;
   57 00:0600 D5 -  -  -  		push 	de 							; save precedence information.
   58 00:0601 -  -  -  -  		;
   59 00:0601 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 00:0604 F5 -  -  -  		push 	af
   61 00:0605 -  -  -  -  		;
   62 00:0605 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 00:0606 D9 -  -  -  		exx 								; save HL'
   64 00:0607 E5 -  -  -  		push 	hl
   65 00:0608 D9 -  -  -  		exx 								
   66 00:0609 E5 -  -  -  		push 	hl 							; save HL
   67 00:060A -  -  -  -  		;
   68 00:060A DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 00:060C -  -  -  -  		;
   70 00:060C -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 00:060C -  -  -  -  		;
   72 00:060C 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 00:060D CD E3 05 00 		call 	EvaluateAtPrecedence 		; this goes into R
   74 00:0611 -  -  -  -  		;
   75 00:0611 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 00:0611 -  -  -  -  		;
   77 00:0611 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 00:0612 -  -  -  -  
   79 00:0612 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 00:0613 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 00:0614 D9 -  -  -  		exx
   82 00:0615 EB -  -  -  		ex 		de,hl
   83 00:0616 E1 -  -  -  		pop 	hl
   84 00:0617 D9 -  -  -  		exx
   85 00:0618 C1 -  -  -  		pop  	bc 							; get the type into C
   86 00:0619 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 00:061A -  -  -  -  		;
   88 00:061A -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 00:061A -  -  -  -  		; 		is in B (type) DE'DE
   90 00:061A -  -  -  -  		;
   91 00:061A F1 -  -  -  		pop 	af 							; get operator in A
   92 00:061B -  -  -  -  		;
   93 00:061B -  -  -  -  		; 		Call the binary operator in A.
   94 00:061B -  -  -  -  		;
   95 00:061B D5 -  -  -  		push 	de
   96 00:061C E5 -  -  -  		push 	hl 							; save DE/HL
   97 00:061D E6 7F 21 00 
              00 00 6F 29 
              29 11 26 11 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 00:0632 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 00:0633 D1 -  -  -  		pop 	de 							; restore DE
  100 00:0634 CD 64 00 00 		call 	JumpCode 					; call the routine set up in dispatch.
  101 00:0638 -  -  -  -  		;
  102 00:0638 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 00:0639 -  -  -  -  		;
  104 00:0639 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 00:063B -  -  -  -  
  106 00:063B -  -  -  -  ; ***************************************************************************************
  107 00:063B -  -  -  -  ;
  108 00:063B -  -  -  -  ;									Changes and Updates
  109 00:063B -  -  -  -  ;
  110 00:063B -  -  -  -  ; ***************************************************************************************
  111 00:063B -  -  -  -  ;
  112 00:063B -  -  -  -  ;		Date			Notes
  113 00:063B -  -  -  -  ;		==== 			=====
  114 00:063B -  -  -  -  ;
  115 00:063B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 00:063B -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 00:063B -  -  -  -  ; ***************************************************************************************
    2 00:063B -  -  -  -  ; ***************************************************************************************
    3 00:063B -  -  -  -  ;
    4 00:063B -  -  -  -  ;		Name : 		exprhelper.asm
    5 00:063B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:063B -  -  -  -  ;		Date : 		3rd June 2022
    7 00:063B -  -  -  -  ;		Reviewed :	No
    8 00:063B -  -  -  -  ;		Purpose :	Expression support functions
    9 00:063B -  -  -  -  ;
   10 00:063B -  -  -  -  ; ***************************************************************************************
   11 00:063B -  -  -  -  ; ***************************************************************************************
   12 00:063B -  -  -  -  
   13 00:063B -  -  -  -  ; ***************************************************************************************
   14 00:063B -  -  -  -  ;
   15 00:063B -  -  -  -  ; 								Evaluate an integer term
   16 00:063B -  -  -  -  ;
   17 00:063B -  -  -  -  ; ***************************************************************************************
   18 00:063B -  -  -  -  
   19 00:063B -  -  -  -  EvaluateIntegerTerm:
   20 00:063B CD F0 06 00 		call 	EvaluateTerm
   21 00:063F CD 94 06 00 		call 	DeReference
   22 00:0643 CB 41 -  -  		bit 	CIsString,c
   23 00:0645 C8 -  -  -  		ret 	z
   24 00:0646 C3 8C 04 00 		jp 		TypeMismatch
   25 00:064A -  -  -  -  
   26 00:064A -  -  -  -  ; ***************************************************************************************
   27 00:064A -  -  -  -  ;
   28 00:064A -  -  -  -  ; 								Evaluate a string term
   29 00:064A -  -  -  -  ;
   30 00:064A -  -  -  -  ; ***************************************************************************************
   31 00:064A -  -  -  -  
   32 00:064A -  -  -  -  EvaluateStringTerm:
   33 00:064A CD F0 06 00 		call 	EvaluateTerm
   34 00:064E CD 94 06 00 		call 	DeReference
   35 00:0652 CB 41 -  -  		bit 	CIsString,c
   36 00:0654 C0 -  -  -  		ret 	nz
   37 00:0655 C3 8C 04 00 		jp 		TypeMismatch
   38 00:0659 -  -  -  -  
   39 00:0659 -  -  -  -  ; ***************************************************************************************
   40 00:0659 -  -  -  -  ;
   41 00:0659 -  -  -  -  ; 						Evaluate and dereference an expression
   42 00:0659 -  -  -  -  ;
   43 00:0659 -  -  -  -  ; ***************************************************************************************
   44 00:0659 -  -  -  -  
   45 00:0659 -  -  -  -  EvaluateValue:
   46 00:0659 CD E2 05 00 		call 	EvaluateAtPrecedence0
   47 00:065D C3 94 06 00 		jp 		Dereference
   48 00:0661 -  -  -  -  
   49 00:0661 -  -  -  -  ; ***************************************************************************************
   50 00:0661 -  -  -  -  ;
   51 00:0661 -  -  -  -  ; 									Evaluate a number
   52 00:0661 -  -  -  -  ;
   53 00:0661 -  -  -  -  ; ***************************************************************************************
   54 00:0661 -  -  -  -  
   55 00:0661 -  -  -  -  EvaluateInteger:
   56 00:0661 CD 59 06 00 		call 	EvaluateValue
   57 00:0665 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 00:0667 C8 -  -  -  		ret 	z
   59 00:0668 C3 8C 04 00 		jp 		TypeMismatch
   60 00:066C -  -  -  -  
   61 00:066C -  -  -  -  ; ***************************************************************************************
   62 00:066C -  -  -  -  ;
   63 00:066C -  -  -  -  ; 									Evaluate an 8 bit integer
   64 00:066C -  -  -  -  ;
   65 00:066C -  -  -  -  ; ***************************************************************************************
   66 00:066C -  -  -  -  
   67 00:066C -  -  -  -  Evaluate8BitInteger:
   68 00:066C CD 61 06 00 		call 	EvaluateInteger
   69 00:0670 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 00:0671 7C -  -  -  		ld 		a,h
   71 00:0672 B5 -  -  -  		or 		l
   72 00:0673 D9 -  -  -  		exx 	
   73 00:0674 B4 -  -  -  		or 		h
   74 00:0675 C2 92 04 00 		jp 		nz,BadValue
   75 00:0679 7D -  -  -  		ld 		a,l 						; return integer in A
   76 00:067A C9 -  -  -  		ret
   77 00:067B -  -  -  -  		
   78 00:067B -  -  -  -  ; ***************************************************************************************
   79 00:067B -  -  -  -  ;
   80 00:067B -  -  -  -  ; 									Evaluate a string
   81 00:067B -  -  -  -  ;
   82 00:067B -  -  -  -  ; ***************************************************************************************
   83 00:067B -  -  -  -  
   84 00:067B -  -  -  -  EvaluateString:
   85 00:067B CD 59 06 00 		call 	EvaluateValue
   86 00:067F CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 00:0681 CA 8C 04 00 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 00:0685 C9 -  -  -  		ret
   89 00:0686 -  -  -  -  
   90 00:0686 -  -  -  -  ; ***************************************************************************************
   91 00:0686 -  -  -  -  ;
   92 00:0686 -  -  -  -  ; 								Return 8/16 bit constant
   93 00:0686 -  -  -  -  ;
   94 00:0686 -  -  -  -  ; ***************************************************************************************
   95 00:0686 -  -  -  -  
   96 00:0686 -  -  -  -  Return8BitConstant:
   97 00:0686 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 00:068A 6F -  -  -  		ld 		l,a
   99 00:068B -  -  -  -  Return16BitConstant:
  100 00:068B D9 -  -  -  		exx 								; clear HL'
  101 00:068C 21 00 00 00 		ld 		hl,0
  102 00:0690 D9 -  -  -  		exx
  103 00:0691 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 00:0693 C9 -  -  -  		ret
  105 00:0694 -  -  -  -  
  106 00:0694 -  -  -  -  ; ***************************************************************************************
  107 00:0694 -  -  -  -  ;
  108 00:0694 -  -  -  -  ;									Changes and Updates
  109 00:0694 -  -  -  -  ;
  110 00:0694 -  -  -  -  ; ***************************************************************************************
  111 00:0694 -  -  -  -  ;
  112 00:0694 -  -  -  -  ;		Date			Notes
  113 00:0694 -  -  -  -  ;		==== 			=====
  114 00:0694 -  -  -  -  ;
  115 00:0694 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 00:0694 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 00:0694 -  -  -  -  ; ***************************************************************************************
    2 00:0694 -  -  -  -  ; ***************************************************************************************
    3 00:0694 -  -  -  -  ;
    4 00:0694 -  -  -  -  ;		Name : 		reference.asm
    5 00:0694 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0694 -  -  -  -  ;		Date : 		1st May 2022
    7 00:0694 -  -  -  -  ;		Reviewed :	No
    8 00:0694 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 00:0694 -  -  -  -  ;
   10 00:0694 -  -  -  -  ; ***************************************************************************************
   11 00:0694 -  -  -  -  ; ***************************************************************************************
   12 00:0694 -  -  -  -  
   13 00:0694 -  -  -  -  ; ***************************************************************************************
   14 00:0694 -  -  -  -  ;
   15 00:0694 -  -  -  -  ; 									Dereference HL'HL C
   16 00:0694 -  -  -  -  ;
   17 00:0694 -  -  -  -  ; ***************************************************************************************
   18 00:0694 -  -  -  -  
   19 00:0694 -  -  -  -  Dereference:
   20 00:0694 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 00:0696 C8 -  -  -  		ret 	z
   22 00:0697 -  -  -  -  
   23 00:0697 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 00:0699 -  -  -  -  		
   25 00:0699 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 00:069B 20 1E -  -  		jr 		nz,_DRInternal
   27 00:069D -  -  -  -  
   28 00:069D CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 00:069F 20 0B -  -  		jr 		nz,_DeRefByte 
   30 00:06A1 -  -  -  -  
   31 00:06A1 E5 -  -  -  		push 	hl 							; save address on stack.
   32 00:06A2 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 00:06A4 D9 -  -  -  		exx
   34 00:06A5 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 00:06A6 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 00:06A7 23 -  -  -  		inc  	hl
   37 00:06A8 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 00:06AA D9 -  -  -  		exx 								; fix back
   39 00:06AB C9 -  -  -  		ret
   40 00:06AC -  -  -  -  
   41 00:06AC -  -  -  -  _DeRefByte:		
   42 00:06AC 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 00:06AD 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 00:06B1 6F -  -  -  		ld	 	l,a
   45 00:06B2 D9 -  -  -  		exx
   46 00:06B3 21 00 00 00 		ld 		hl,$0000
   47 00:06B7 D9 -  -  -  		exx
   48 00:06B8 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 00:06BA C9 -  -  -  		ret
   50 00:06BB -  -  -  -  
   51 00:06BB -  -  -  -  _DRInternal:
   52 00:06BB 3E 06 C3 2E 
              04 00 -  -  		ERR_DISABLED
   53 00:06C1 -  -  -  -  
   54 00:06C1 -  -  -  -  ; ***************************************************************************************
   55 00:06C1 -  -  -  -  ;
   56 00:06C1 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 00:06C1 -  -  -  -  ;
   58 00:06C1 -  -  -  -  ; ***************************************************************************************
   59 00:06C1 -  -  -  -  
   60 00:06C1 -  -  -  -  DRConvertHLHLToAddress:
   61 00:06C1 -  -  -  -  		#ifdef EZ80
   62 00:06C1 22 6A 00 00 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 00:06C5 D9 -  -  -  		exx
   64 00:06C6 22 6C 00 00 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 00:06CA 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 00:06CE D9 -  -  -  		exx
   67 00:06CF 2A 6A 00 00 		ld 		hl,(AConvert) 				; load UHL
   68 00:06D3 -  -  -  -  		#endif
   69 00:06D3 C9 -  -  -  		ret
   70 00:06D4 -  -  -  -  
   71 00:06D4 -  -  -  -  ; ***************************************************************************************
   72 00:06D4 -  -  -  -  ;
   73 00:06D4 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 00:06D4 -  -  -  -  ;
   75 00:06D4 -  -  -  -  ; ***************************************************************************************
   76 00:06D4 -  -  -  -  
   77 00:06D4 -  -  -  -  DRConvertAddressToHLHL:
   78 00:06D4 -  -  -  -  		#ifdef EZ80
   79 00:06D4 22 6A 00 00 		ld 		(AConvert),hl
   80 00:06D8 21 00 00 00 		ld 		hl,$0000
   81 00:06DC 22 6D 00 00 		ld 		(AConvert+3),hl
   82 00:06E0 D9 -  -  -  		exx
   83 00:06E1 2A 6C 00 00 		ld 		hl,(AConvert+2)
   84 00:06E5 D9 -  -  -  		exx
   85 00:06E6 AF -  -  -  		xor 	a
   86 00:06E7 32 6C 00 00 		ld 		(AConvert+2),a
   87 00:06EB 2A 6A 00 00 		ld 		hl,(AConvert)
   88 00:06EF -  -  -  -  		#endif
   89 00:06EF C9 -  -  -  		ret
   90 00:06F0 -  -  -  -  
   91 00:06F0 -  -  -  -  ; ***************************************************************************************
   92 00:06F0 -  -  -  -  ;
   93 00:06F0 -  -  -  -  ;									Changes and Updates
   94 00:06F0 -  -  -  -  ;
   95 00:06F0 -  -  -  -  ; ***************************************************************************************
   96 00:06F0 -  -  -  -  ;
   97 00:06F0 -  -  -  -  ;		Date			Notes
   98 00:06F0 -  -  -  -  ;		==== 			=====
   99 00:06F0 -  -  -  -  ;
  100 00:06F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 00:06F0 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 00:06F0 -  -  -  -  ; ***************************************************************************************
    2 00:06F0 -  -  -  -  ; ***************************************************************************************
    3 00:06F0 -  -  -  -  ;
    4 00:06F0 -  -  -  -  ;		Name : 		term.asm
    5 00:06F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:06F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:06F0 -  -  -  -  ;		Reviewed :	No
    8 00:06F0 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 00:06F0 -  -  -  -  ;
   10 00:06F0 -  -  -  -  ; ***************************************************************************************
   11 00:06F0 -  -  -  -  ; ***************************************************************************************
   12 00:06F0 -  -  -  -  
   13 00:06F0 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 00:06F0             		add_hlhl_16
   15 00:06F0             		exx
   16 00:06F0             		adc_hlhl_16
   17 00:06F0             		exx
   18 00:06F0             #endmacro
   19 00:06F0 -  -  -  -  
   20 00:06F0 -  -  -  -  ; ***************************************************************************************
   21 00:06F0 -  -  -  -  ;
   22 00:06F0 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 00:06F0 -  -  -  -  ;
   24 00:06F0 -  -  -  -  ; ***************************************************************************************
   25 00:06F0 -  -  -  -  ;
   26 00:06F0 -  -  -  -  ; 		Terms can be:
   27 00:06F0 -  -  -  -  ;
   28 00:06F0 -  -  -  -  ;			<integer> 			42 						not negative
   29 00:06F0 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 00:06F0 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 00:06F0 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 00:06F0 -  -  -  -  ; 														binary equivalents so are handled differently
   33 00:06F0 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 00:06F0 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 00:06F0 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 00:06F0 -  -  -  -  ; 														reference of some sort.
   37 00:06F0 -  -  -  -  ;
   38 00:06F0 -  -  -  -  ; ***************************************************************************************
   39 00:06F0 -  -  -  -  
   40 00:06F0 -  -  -  -  EvaluateTerm:		
   41 00:06F0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 00:06F2 D9 -  -  -  		exx
   43 00:06F3 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 00:06F7 D9 -  -  -  		exx
   45 00:06F8 21 00 00 00 		ld 		hl,$0000		
   46 00:06FC -  -  -  -  		;
   47 00:06FC DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 00:06FF FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 00:0701 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 00:0703 DA BB 07 00 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 00:0707 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 00:0709 C2 5F 07 00 		jp 		nz,_ETFoundKeyword 
   53 00:070D -  -  -  -  		;
   54 00:070D -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 00:070D -  -  -  -  		;
   56 00:070D -  -  -  -  _ETIntegerConstant:
   57 00:070D -  -  -  -  		;
   58 00:070D -  -  -  -  _ETIntegerLoop:		
   59 00:070D DD 7E 00 -  		ld 		a,(ix+0)
   60 00:0710 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 00:0712 B5 -  -  -  		or 		l 							; or into L
   62 00:0713 6F -  -  -  		ld 		l,a
   63 00:0714 DD 23 -  -  		inc 	ix 							; look at next character.
   64 00:0716 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 00:0719 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 00:071B FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 00:071D D8 -  -  -  		ret 	c
   68 00:071E -  -  -  -  
   69 00:071E 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 00:0725 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 00:072C 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 00:0733 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 00:073A 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 00:0741 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 00:0748 -  -  -  -  
   76 00:0748 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 00:074A -  -  -  -  		;
   78 00:074A -  -  -  -  		; 		Found the $3F string marker.
   79 00:074A -  -  -  -  		;
   80 00:074A -  -  -  -  _ETStringMarker:		
   81 00:074A DD 23 -  -  		inc 	ix 							; skip string marker
   82 00:074C DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 00:074E DD E5 -  -  		push 	ix 							; put address in UHL
   84 00:0750 E1 -  -  -  		pop 	hl
   85 00:0751 11 00 00 00 		ld 		de,$0000
   86 00:0755 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 00:0758 DD 19 -  -  		add 	ix,de
   88 00:075A DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 00:075C 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 00:075E C9 -  -  -  		ret
   91 00:075F -  -  -  -  		;
   92 00:075F -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 00:075F -  -  -  -  		;
   94 00:075F -  -  -  -  _ETFoundKeyword:
   95 00:075F DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 00:0761 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 00:0763 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 00:0765 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 00:0767 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 00:0769 -  -  -  -  		;
  101 00:0769 -  -  -  -  		;		Unary group 0
  102 00:0769 -  -  -  -  		;
  103 00:0769 E6 7F 21 00 
              00 00 6F 29 
              29 11 26 11 
              00 19 ED 17 
              ED 53 65 00 
              00 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 00:077E C3 64 00 00 		jp 		JumpCode 					; and go there.
  105 00:0782 -  -  -  -  
  106 00:0782 -  -  -  -  _ETNotUnaryFunction0:	
  107 00:0782 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 00:0784 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 00:0786 -  -  -  -  		;
  110 00:0786 -  -  -  -  		; 		- term
  111 00:0786 -  -  -  -  		;
  112 00:0786 CD 3B 06 00 		call 	EvaluateIntegerTerm 		; evaluate term
  113 00:078A CD D1 05 00 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 00:078E C9 -  -  -  		ret
  115 00:078F -  -  -  -  		;
  116 00:078F -  -  -  -  		;		! ? indirection check
  117 00:078F -  -  -  -  		;
  118 00:078F -  -  -  -  _ETCheckIndirection:	
  119 00:078F FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 00:0791 28 06 -  -  		jr 		z,_ETIndirection
  121 00:0793 FE 83 -  -  		cp 		KWD_PLING
  122 00:0795 C2 98 04 00 		jp 		nz,SyntaxError 				; give up otherwise.
  123 00:0799 -  -  -  -  		;
  124 00:0799 -  -  -  -  		; 		! ? indirection
  125 00:0799 -  -  -  -  		;
  126 00:0799 -  -  -  -  _ETIndirection:
  127 00:0799 F5 -  -  -  		push 	af 							; check type of indirection.
  128 00:079A CD F0 06 00 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 00:079E CD 94 06 00 		call 	Dereference 				; dereference it so it's a value.
  130 00:07A2 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 00:07A4 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 00:07A6 CD C1 06 00 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 00:07AA F1 -  -  -  		pop 	af 							; get type back
  134 00:07AB 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 00:07AD CB F9 -  -  		set 	CIsReference,c
  136 00:07AF FE 83 -  -  		cp 		KWD_PLING
  137 00:07B1 C8 -  -  -  		ret 	z
  138 00:07B2 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 00:07B4 C9 -  -  -  		ret
  140 00:07B5 -  -  -  -  _ETStringIndirect:
  141 00:07B5 3E 02 C3 2E 
              04 00 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 00:07BB -  -  -  -  		;
  143 00:07BB -  -  -  -  		; 		Found an identifier.
  144 00:07BB -  -  -  -  		;
  145 00:07BB -  -  -  -  _ETVariable:
  146 00:07BB CD E7 0D 00 		call 	FindVariable 				; find the variable.
  147 00:07BF D0 -  -  -  		ret 	nc 							; return if found.
  148 00:07C0 3E 1A C3 2E 
              04 00 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 00:07C6 -  -  -  -  		
  150 00:07C6 -  -  -  -  ; ***************************************************************************************
  151 00:07C6 -  -  -  -  ;
  152 00:07C6 -  -  -  -  ;									Changes and Updates
  153 00:07C6 -  -  -  -  ;
  154 00:07C6 -  -  -  -  ; ***************************************************************************************
  155 00:07C6 -  -  -  -  ;
  156 00:07C6 -  -  -  -  ;		Date			Notes
  157 00:07C6 -  -  -  -  ;		==== 			=====
  158 00:07C6 -  -  -  -  ;
  159 00:07C6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 00:07C6 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 00:07C6 -  -  -  -  ; ***************************************************************************************
    2 00:07C6 -  -  -  -  ; ***************************************************************************************
    3 00:07C6 -  -  -  -  ;
    4 00:07C6 -  -  -  -  ;		Name : 		abs.asm
    5 00:07C6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07C6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07C6 -  -  -  -  ;		Reviewed :	No
    8 00:07C6 -  -  -  -  ;		Purpose :	Absolute value 
    9 00:07C6 -  -  -  -  ;
   10 00:07C6 -  -  -  -  ; ***************************************************************************************
   11 00:07C6 -  -  -  -  ; ***************************************************************************************
   12 00:07C6 -  -  -  -  
   13 00:07C6 -  -  -  -  ; ***************************************************************************************
   14 00:07C6 -  -  -  -  ;
   15 00:07C6 -  -  -  -  ;								abs( unary function
   16 00:07C6 -  -  -  -  ;
   17 00:07C6 -  -  -  -  ; ***************************************************************************************
   18 00:07C6 -  -  -  -  
   19 00:07C6 -  -  -  -  Unary_Abs:	;; [abs]	
   20 00:07C6 CD 3B 06 00 		call	EvaluateIntegerTerm 		; get int term
   21 00:07CA D9 -  -  -  		exx 								; test MSB
   22 00:07CB CB 7C -  -  		bit 	7,h
   23 00:07CD D9 -  -  -  		exx
   24 00:07CE C4 D1 05 00 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 00:07D2 C9 -  -  -  		ret
   26 00:07D3 -  -  -  -  
   27 00:07D3 -  -  -  -  ; ***************************************************************************************
   28 00:07D3 -  -  -  -  ;
   29 00:07D3 -  -  -  -  ;									Changes and Updates
   30 00:07D3 -  -  -  -  ;
   31 00:07D3 -  -  -  -  ; ***************************************************************************************
   32 00:07D3 -  -  -  -  ;
   33 00:07D3 -  -  -  -  ;		Date			Notes
   34 00:07D3 -  -  -  -  ;		==== 			=====
   35 00:07D3 -  -  -  -  ;
   36 00:07D3 -  -  -  -  ; ***************************************************************************************
   37 00:07D3 -  -  -  -  		
Listing for file "_build.asm"
   39 00:07D3 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 00:07D3 -  -  -  -  ; ***************************************************************************************
    2 00:07D3 -  -  -  -  ; ***************************************************************************************
    3 00:07D3 -  -  -  -  ;
    4 00:07D3 -  -  -  -  ;		Name : 		asc.asm
    5 00:07D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07D3 -  -  -  -  ;		Reviewed :	No
    8 00:07D3 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 00:07D3 -  -  -  -  ;
   10 00:07D3 -  -  -  -  ; ***************************************************************************************
   11 00:07D3 -  -  -  -  ; ***************************************************************************************
   12 00:07D3 -  -  -  -  
   13 00:07D3 -  -  -  -  ; ***************************************************************************************
   14 00:07D3 -  -  -  -  ;
   15 00:07D3 -  -  -  -  ;								Asc unary function
   16 00:07D3 -  -  -  -  ;
   17 00:07D3 -  -  -  -  ; ***************************************************************************************
   18 00:07D3 -  -  -  -  
   19 00:07D3 -  -  -  -  Unary_Asc:	;; [asc]
   20 00:07D3 CD 4A 06 00 		call	EvaluateStringTerm			; Get string
   21 00:07D7 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 00:07D8 C3 86 06 00 		jp 		Return8BitConstant
   23 00:07DC -  -  -  -  
   24 00:07DC -  -  -  -  ; ***************************************************************************************
   25 00:07DC -  -  -  -  ;
   26 00:07DC -  -  -  -  ;									Changes and Updates
   27 00:07DC -  -  -  -  ;
   28 00:07DC -  -  -  -  ; ***************************************************************************************
   29 00:07DC -  -  -  -  ;
   30 00:07DC -  -  -  -  ;		Date			Notes
   31 00:07DC -  -  -  -  ;		==== 			=====
   32 00:07DC -  -  -  -  ;
   33 00:07DC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 00:07DC -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 00:07DC -  -  -  -  ; ***************************************************************************************
    2 00:07DC -  -  -  -  ; ***************************************************************************************
    3 00:07DC -  -  -  -  ;
    4 00:07DC -  -  -  -  ;		Name : 		chr.asm
    5 00:07DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07DC -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07DC -  -  -  -  ;		Reviewed :	No
    8 00:07DC -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 00:07DC -  -  -  -  ;
   10 00:07DC -  -  -  -  ; ***************************************************************************************
   11 00:07DC -  -  -  -  ; ***************************************************************************************
   12 00:07DC -  -  -  -  
   13 00:07DC -  -  -  -  ; ***************************************************************************************
   14 00:07DC -  -  -  -  ;
   15 00:07DC -  -  -  -  ;								Chr$() unary function
   16 00:07DC -  -  -  -  ;
   17 00:07DC -  -  -  -  ; ***************************************************************************************
   18 00:07DC -  -  -  -  
   19 00:07DC -  -  -  -  Unary_Chr:	;; [chr]
   20 00:07DC CD 06 04 00 		call 	CheckDollar
   21 00:07E0 CD 3B 06 00 		call 	EvaluateIntegerTerm
   22 00:07E4 7D -  -  -  		ld 		a,l 						; get character
   23 00:07E5 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 00:07E7 21 A5 00 00 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 00:07EB 36 0D -  -  		ld 		(hl),13
   26 00:07ED 2B -  -  -  		dec 	hl
   27 00:07EE 77 -  -  -  		ld 		(hl),a
   28 00:07EF C9 -  -  -  		ret
   29 00:07F0 -  -  -  -  
   30 00:07F0 -  -  -  -  ; ***************************************************************************************
   31 00:07F0 -  -  -  -  ;
   32 00:07F0 -  -  -  -  ;									Changes and Updates
   33 00:07F0 -  -  -  -  ;
   34 00:07F0 -  -  -  -  ; ***************************************************************************************
   35 00:07F0 -  -  -  -  ;
   36 00:07F0 -  -  -  -  ;		Date			Notes
   37 00:07F0 -  -  -  -  ;		==== 			=====
   38 00:07F0 -  -  -  -  ;
   39 00:07F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 00:07F0 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 00:07F0 -  -  -  -  ; ***************************************************************************************
    2 00:07F0 -  -  -  -  ; ***************************************************************************************
    3 00:07F0 -  -  -  -  ;
    4 00:07F0 -  -  -  -  ;		Name : 		len.asm
    5 00:07F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:07F0 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:07F0 -  -  -  -  ;		Reviewed :	None
    8 00:07F0 -  -  -  -  ;		Purpose :	String Length
    9 00:07F0 -  -  -  -  ;
   10 00:07F0 -  -  -  -  ; ***************************************************************************************
   11 00:07F0 -  -  -  -  ; ***************************************************************************************
   12 00:07F0 -  -  -  -  
   13 00:07F0 -  -  -  -  ; ***************************************************************************************
   14 00:07F0 -  -  -  -  ;
   15 00:07F0 -  -  -  -  ;								Len unary function
   16 00:07F0 -  -  -  -  ;
   17 00:07F0 -  -  -  -  ; ***************************************************************************************
   18 00:07F0 -  -  -  -  
   19 00:07F0 -  -  -  -  Unary_Len:	;; [len]
   20 00:07F0 CD 4A 06 00 		call	EvaluateStringTerm			; Get string address into UHL
   21 00:07F4 EB -  -  -  		ex 		de,hl 						; put in DE
   22 00:07F5 CD 39 05 00 		call 	UnaryInt32False 			; zero HL'HL
   23 00:07F9 -  -  -  -  _ULCount:
   24 00:07F9 1A -  -  -  		ld 		a,(de) 						; next char
   25 00:07FA FE 20 -  -  		cp 		$20 						; if < space return.
   26 00:07FC D8 -  -  -  		ret 	c
   27 00:07FD 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 00:07FE 13 -  -  -  		inc 	de
   29 00:07FF 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 00:0801 -  -  -  -  
   31 00:0801 -  -  -  -  ; ***************************************************************************************
   32 00:0801 -  -  -  -  ;
   33 00:0801 -  -  -  -  ;									Changes and Updates
   34 00:0801 -  -  -  -  ;
   35 00:0801 -  -  -  -  ; ***************************************************************************************
   36 00:0801 -  -  -  -  ;
   37 00:0801 -  -  -  -  ;		Date			Notes
   38 00:0801 -  -  -  -  ;		==== 			=====
   39 00:0801 -  -  -  -  ;
   40 00:0801 -  -  -  -  ; ***************************************************************************************
   41 00:0801 -  -  -  -  		
Listing for file "_build.asm"
   42 00:0801 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 00:0801 -  -  -  -  ; ***************************************************************************************
    2 00:0801 -  -  -  -  ; ***************************************************************************************
    3 00:0801 -  -  -  -  ;
    4 00:0801 -  -  -  -  ;		Name : 		makestring.asm
    5 00:0801 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0801 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0801 -  -  -  -  ;		Reviewed :	No
    8 00:0801 -  -  -  -  ;		Purpose :	Make string from constant address
    9 00:0801 -  -  -  -  ;
   10 00:0801 -  -  -  -  ; ***************************************************************************************
   11 00:0801 -  -  -  -  ; ***************************************************************************************
   12 00:0801 -  -  -  -  
   13 00:0801 -  -  -  -  ; ***************************************************************************************
   14 00:0801 -  -  -  -  ;
   15 00:0801 -  -  -  -  ;								Str$() unary function
   16 00:0801 -  -  -  -  ;
   17 00:0801 -  -  -  -  ; ***************************************************************************************
   18 00:0801 -  -  -  -  
   19 00:0801 -  -  -  -  Unary_MkStr:	;; [$]
   20 00:0801 CD 3B 06 00 		call 	EvaluateIntegerTerm 		; get an integer
   21 00:0805 CD C1 06 00 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 00:0809 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 00:080B C9 -  -  -  		ret
   24 00:080C -  -  -  -  
   25 00:080C -  -  -  -  ; ***************************************************************************************
   26 00:080C -  -  -  -  ;
   27 00:080C -  -  -  -  ;									Changes and Updates
   28 00:080C -  -  -  -  ;
   29 00:080C -  -  -  -  ; ***************************************************************************************
   30 00:080C -  -  -  -  ;
   31 00:080C -  -  -  -  ;		Date			Notes
   32 00:080C -  -  -  -  ;		==== 			=====
   33 00:080C -  -  -  -  ;
   34 00:080C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 00:080C -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 00:080C -  -  -  -  ; ***************************************************************************************
    2 00:080C -  -  -  -  ; ***************************************************************************************
    3 00:080C -  -  -  -  ;
    4 00:080C -  -  -  -  ;		Name : 		not.asm
    5 00:080C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:080C -  -  -  -  ;		Date : 		5th June 2023
    7 00:080C -  -  -  -  ;		Reviewed :	No
    8 00:080C -  -  -  -  ;		Purpose :	Logical not
    9 00:080C -  -  -  -  ;
   10 00:080C -  -  -  -  ; ***************************************************************************************
   11 00:080C -  -  -  -  ; ***************************************************************************************
   12 00:080C -  -  -  -  
   13 00:080C -  -  -  -  ; ***************************************************************************************
   14 00:080C -  -  -  -  ;
   15 00:080C -  -  -  -  ;							not(x) e.g. one's complement
   16 00:080C -  -  -  -  ;
   17 00:080C -  -  -  -  ; ***************************************************************************************
   18 00:080C -  -  -  -  
   19 00:080C -  -  -  -  Unary_Not:		;; [not]
   20 00:080C CD 3B 06 00 		call 	EvaluateIntegerTerm 		; only an integer
   21 00:0810 CD 19 08 00 		call 	__UNSwap 					; not and swap twice.
   22 00:0814 CD 19 08 00 		call 	__UNSwap		
   23 00:0818 C9 -  -  -  		ret
   24 00:0819 -  -  -  -  
   25 00:0819 -  -  -  -  __UNSwap:
   26 00:0819 7C -  -  -  		ld 		a,h
   27 00:081A 2F -  -  -  		cpl
   28 00:081B 67 -  -  -  		ld 		h,a
   29 00:081C 7D -  -  -  		ld 		a,l
   30 00:081D 2F -  -  -  		cpl 	
   31 00:081E 6F -  -  -  		ld 		l,a
   32 00:081F D9 -  -  -  		exx
   33 00:0820 C9 -  -  -  		ret
   34 00:0821 -  -  -  -  
   35 00:0821 -  -  -  -  ; ***************************************************************************************
   36 00:0821 -  -  -  -  ;
   37 00:0821 -  -  -  -  ;									Changes and Updates
   38 00:0821 -  -  -  -  ;
   39 00:0821 -  -  -  -  ; ***************************************************************************************
   40 00:0821 -  -  -  -  ;
   41 00:0821 -  -  -  -  ;		Date			Notes
   42 00:0821 -  -  -  -  ;		==== 			=====
   43 00:0821 -  -  -  -  ;
   44 00:0821 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 00:0821 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 00:0821 -  -  -  -  ; ***************************************************************************************
    2 00:0821 -  -  -  -  ; ***************************************************************************************
    3 00:0821 -  -  -  -  ;
    4 00:0821 -  -  -  -  ;		Name : 		page.asm
    5 00:0821 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0821 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0821 -  -  -  -  ;		Reviewed :	No
    8 00:0821 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0821 -  -  -  -  ;
   10 00:0821 -  -  -  -  ; ***************************************************************************************
   11 00:0821 -  -  -  -  ; ***************************************************************************************
   12 00:0821 -  -  -  -  
   13 00:0821 -  -  -  -  ; ***************************************************************************************
   14 00:0821 -  -  -  -  ;
   15 00:0821 -  -  -  -  ;							page unary function (no bracket)
   16 00:0821 -  -  -  -  ;
   17 00:0821 -  -  -  -  ; ***************************************************************************************
   18 00:0821 -  -  -  -  
   19 00:0821 -  -  -  -  Unary_Page:	;; [page]
   20 00:0821 2A 38 00 00 			ld 		hl,(CodeAddress) 		; get address of code
   21 00:0825 D9 -  -  -  			exx
   22 00:0826 2A 3A 00 00 			ld 		hl,(CodeAddress+2)
   23 00:082A D9 -  -  -  			exx
   24 00:082B 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:082D C9 -  -  -  			ret
   26 00:082E -  -  -  -  
   27 00:082E -  -  -  -  ; ***************************************************************************************
   28 00:082E -  -  -  -  ;
   29 00:082E -  -  -  -  ;									Changes and Updates
   30 00:082E -  -  -  -  ;
   31 00:082E -  -  -  -  ; ***************************************************************************************
   32 00:082E -  -  -  -  ;
   33 00:082E -  -  -  -  ;		Date			Notes
   34 00:082E -  -  -  -  ;		==== 			=====
   35 00:082E -  -  -  -  ;
   36 00:082E -  -  -  -  ; ***************************************************************************************
   37 00:082E -  -  -  -  			
Listing for file "_build.asm"
   45 00:082E -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 00:082E -  -  -  -  ; ***************************************************************************************
    2 00:082E -  -  -  -  ; ***************************************************************************************
    3 00:082E -  -  -  -  ;
    4 00:082E -  -  -  -  ;		Name : 		random.asm
    5 00:082E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:082E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:082E -  -  -  -  ;		Reviewed :	No
    8 00:082E -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 00:082E -  -  -  -  ;
   10 00:082E -  -  -  -  ; ***************************************************************************************
   11 00:082E -  -  -  -  ; ***************************************************************************************
   12 00:082E -  -  -  -  
   13 00:082E -  -  -  -  ; ***************************************************************************************
   14 00:082E -  -  -  -  ;
   15 00:082E -  -  -  -  ;								Random unary function
   16 00:082E -  -  -  -  ;
   17 00:082E -  -  -  -  ; ***************************************************************************************
   18 00:082E -  -  -  -  
   19 00:082E -  -  -  -  Unary_Random:	;; [rnd]
   20 00:082E F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 00:0836 CD 3B 06 00 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 00:083A D9 -  -  -  		exx 								; is it -ve
   23 00:083B CB 7C -  -  		bit 	7,h
   24 00:083D D9 -  -  -  		exx
   25 00:083E 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 00:0840 22 70 00 00 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 00:0844 D9 -  -  -  		exx
   28 00:0845 22 74 00 00 		ld 		(RandomSeed+4),hl
   29 00:0849 D9 -  -  -  		exx
   30 00:084A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 00:084C C9 -  -  -  		ret
   32 00:084D -  -  -  -  _URDontSeed:		
   33 00:084D -  -  -  -  
   34 00:084D CD D5 13 00 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 00:0851 28 1C -  -  		jr 		z,_URFail
   36 00:0853 E5 -  -  -  		push 	hl 							; save range on stack.
   37 00:0854 D9 -  -  -  		exx
   38 00:0855 E5 -  -  -  		push 	hl
   39 00:0856 D9 -  -  -  		exx
   40 00:0857 -  -  -  -  		;
   41 00:0857 CD 80 08 00 		call 	URandomHL 					; get random HL'HL
   42 00:085B D9 -  -  -  		exx
   43 00:085C CD 80 08 00 		call 	URandomHL
   44 00:0860 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 00:0862 D9 -  -  -  		exx
   46 00:0863 -  -  -  -  		;
   47 00:0863 D9 -  -  -  		exx 								; restore range.
   48 00:0864 D1 -  -  -  		pop 	de
   49 00:0865 D9 -  -  -  		exx
   50 00:0866 D1 -  -  -  		pop 	de
   51 00:0867 -  -  -  -  		;
   52 00:0867 CD 66 12 00 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 00:086B 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 00:086C 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 00:086E C9 -  -  -  		ret
   56 00:086F -  -  -  -  _URFail:
   57 00:086F 3E 03 C3 2E 
              04 00 -  -  		ERR_BADVALUE
   58 00:0875 -  -  -  -  ; ***************************************************************************************
   59 00:0875 -  -  -  -  ;
   60 00:0875 -  -  -  -  ; 									Push RNG off zero
   61 00:0875 -  -  -  -  ;
   62 00:0875 -  -  -  -  ; ***************************************************************************************
   63 00:0875 -  -  -  -  
   64 00:0875 -  -  -  -  UnaryRandomInitialise:
   65 00:0875 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 00:0877 -  -  -  -  _URILoop:
   67 00:0877 C5 -  -  -  		push 	bc
   68 00:0878 CD 80 08 00 		call 	URandomHL
   69 00:087C C1 -  -  -  		pop 	bc
   70 00:087D 10 F8 -  -  		djnz 	_URILoop
   71 00:087F C9 -  -  -  		ret
   72 00:0880 -  -  -  -  
   73 00:0880 -  -  -  -  ; ***************************************************************************************
   74 00:0880 -  -  -  -  ;
   75 00:0880 -  -  -  -  ;							16 bit random number generator
   76 00:0880 -  -  -  -  ;
   77 00:0880 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 00:0880 -  -  -  -  ;		Actual author unspecified.
   79 00:0880 -  -  -  -  ;
   80 00:0880 -  -  -  -  ; ***************************************************************************************
   81 00:0880 -  -  -  -  
   82 00:0880 -  -  -  -  URandomHL:
   83 00:0880 2A 70 00 00 	    ld 		hl,(RandomSeed)
   84 00:0884 ED 5B 74 00 
              00 -  -  -  	    ld 		de,(RandomSeed+4)
   85 00:0889 44 -  -  -  	    ld 		b,h
   86 00:088A 4D -  -  -  	    ld 		c,l
   87 00:088B 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 00:0890 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 00:0895 2C -  -  -  	    inc 	l
   90 00:0896 09 -  -  -  	    add 	hl,bc
   91 00:0897 22 70 00 00 	    ld 		(RandomSeed),hl
   92 00:089B 2A 74 00 00 	    ld 		hl,(RandomSeed+4)
   93 00:089F ED 5A -  -  	    adc 	hl,de
   94 00:08A1 22 74 00 00 	    ld 		(RandomSeed+4),hl
   95 00:08A5 EB -  -  -  	    ex 		de,hl
   96 00:08A6 2A 78 00 00 	    ld 		hl,(RandomSeed+8)
   97 00:08AA ED 4B 7C 00 
              00 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 00:08AF 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 00:08B4 ED 43 7C 00 
              00 -  -  -  	    ld 		(RandomSeed+12),bc
  100 00:08B9 9F -  -  -  	    sbc 	a,a
  101 00:08BA E6 C5 -  -  	    and 	%11000101
  102 00:08BC AD -  -  -  	    xor 	l
  103 00:08BD 6F -  -  -  	    ld 		l,a
  104 00:08BE 22 78 00 00 	    ld 		(RandomSeed+8),hl
  105 00:08C2 EB -  -  -  	    ex 		de,hl
  106 00:08C3 09 -  -  -  	    add 	hl,bc
  107 00:08C4 C9 -  -  -  	    ret		
  108 00:08C5 -  -  -  -  
  109 00:08C5 -  -  -  -  ; ***************************************************************************************
  110 00:08C5 -  -  -  -  ;
  111 00:08C5 -  -  -  -  ;									Changes and Updates
  112 00:08C5 -  -  -  -  ;
  113 00:08C5 -  -  -  -  ; ***************************************************************************************
  114 00:08C5 -  -  -  -  ;
  115 00:08C5 -  -  -  -  ;		Date			Notes
  116 00:08C5 -  -  -  -  ;		==== 			=====
  117 00:08C5 -  -  -  -  ;
  118 00:08C5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 00:08C5 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 00:08C5 -  -  -  -  ; ***************************************************************************************
    2 00:08C5 -  -  -  -  ; ***************************************************************************************
    3 00:08C5 -  -  -  -  ;
    4 00:08C5 -  -  -  -  ;		Name : 		sgn.asm
    5 00:08C5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08C5 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08C5 -  -  -  -  ;		Reviewed :	No
    8 00:08C5 -  -  -  -  ;		Purpose :	Sign of Integer
    9 00:08C5 -  -  -  -  ;
   10 00:08C5 -  -  -  -  ; ***************************************************************************************
   11 00:08C5 -  -  -  -  ; ***************************************************************************************
   12 00:08C5 -  -  -  -  
   13 00:08C5 -  -  -  -  ; ***************************************************************************************
   14 00:08C5 -  -  -  -  ;
   15 00:08C5 -  -  -  -  ;								sgn unary function
   16 00:08C5 -  -  -  -  ;
   17 00:08C5 -  -  -  -  ; ***************************************************************************************
   18 00:08C5 -  -  -  -  
   19 00:08C5 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 00:08C5 CD 3B 06 00 		call	EvaluateIntegerTerm 		; get value
   21 00:08C9 CD D5 13 00 		call 	Int32Zero 					; integer sgn() code
   22 00:08CD CA 39 05 00 		jp 		z,UnaryInt32False
   23 00:08D1 D9 -  -  -  		exx
   24 00:08D2 CB 7C -  -  		bit 	7,h
   25 00:08D4 D9 -  -  -  		exx
   26 00:08D5 C2 35 05 00 		jp 		nz,UnaryInt32True
   27 00:08D9 3E 01 -  -  		ld 		a,1
   28 00:08DB C3 86 06 00 		jp 		Return8BitConstant
   29 00:08DF -  -  -  -  
   30 00:08DF -  -  -  -  ; ***************************************************************************************
   31 00:08DF -  -  -  -  ;
   32 00:08DF -  -  -  -  ;									Changes and Updates
   33 00:08DF -  -  -  -  ;
   34 00:08DF -  -  -  -  ; ***************************************************************************************
   35 00:08DF -  -  -  -  ;
   36 00:08DF -  -  -  -  ;		Date			Notes
   37 00:08DF -  -  -  -  ;		==== 			=====
   38 00:08DF -  -  -  -  ;
   39 00:08DF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 00:08DF -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 00:08DF -  -  -  -  ; ***************************************************************************************
    2 00:08DF -  -  -  -  ; ***************************************************************************************
    3 00:08DF -  -  -  -  ;
    4 00:08DF -  -  -  -  ;		Name : 		simple.asm
    5 00:08DF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08DF -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08DF -  -  -  -  ;		Reviewed :	No
    8 00:08DF -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 00:08DF -  -  -  -  ;
   10 00:08DF -  -  -  -  ; ***************************************************************************************
   11 00:08DF -  -  -  -  ; ***************************************************************************************
   12 00:08DF -  -  -  -  
   13 00:08DF -  -  -  -  ; ***************************************************************************************
   14 00:08DF -  -  -  -  ;
   15 00:08DF -  -  -  -  ;								( unary function (think about it)
   16 00:08DF -  -  -  -  ;
   17 00:08DF -  -  -  -  ; ***************************************************************************************
   18 00:08DF -  -  -  -  
   19 00:08DF -  -  -  -  Unary_Brackets:	;; [(]
   20 00:08DF CD E2 05 00 		call 	EvaluateAtPrecedence0
   21 00:08E3 C3 F8 03 00 		jp  	CheckRightBracket
   22 00:08E7 -  -  -  -  
   23 00:08E7 -  -  -  -  ; ***************************************************************************************
   24 00:08E7 -  -  -  -  ;
   25 00:08E7 -  -  -  -  ;									Handle &x
   26 00:08E7 -  -  -  -  ;
   27 00:08E7 -  -  -  -  ; ***************************************************************************************
   28 00:08E7 -  -  -  -  
   29 00:08E7 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 00:08E7 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 00:08EA E6 C0 -  -  		and 		$C0
   32 00:08EC FE 40 -  -  		cp 			$40
   33 00:08EE C2 98 04 00 		jp 			nz,SyntaxError 			; no then error
   34 00:08F2 C3 F0 06 00 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 00:08F6 -  -  -  -  
   36 00:08F6 -  -  -  -  ; ***************************************************************************************
   37 00:08F6 -  -  -  -  ;
   38 00:08F6 -  -  -  -  ;									Changes and Updates
   39 00:08F6 -  -  -  -  ;
   40 00:08F6 -  -  -  -  ; ***************************************************************************************
   41 00:08F6 -  -  -  -  ;
   42 00:08F6 -  -  -  -  ;		Date			Notes
   43 00:08F6 -  -  -  -  ;		==== 			=====
   44 00:08F6 -  -  -  -  ;
   45 00:08F6 -  -  -  -  ; ***************************************************************************************
   46 00:08F6 -  -  -  -  		
Listing for file "_build.asm"
   48 00:08F6 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 00:08F6 -  -  -  -  ; ***************************************************************************************
    2 00:08F6 -  -  -  -  ; ***************************************************************************************
    3 00:08F6 -  -  -  -  ;
    4 00:08F6 -  -  -  -  ;		Name : 		str.asm
    5 00:08F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:08F6 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:08F6 -  -  -  -  ;		Reviewed :	No
    8 00:08F6 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 00:08F6 -  -  -  -  ;
   10 00:08F6 -  -  -  -  ; ***************************************************************************************
   11 00:08F6 -  -  -  -  ; ***************************************************************************************
   12 00:08F6 -  -  -  -  
   13 00:08F6 -  -  -  -  ; ***************************************************************************************
   14 00:08F6 -  -  -  -  ;
   15 00:08F6 -  -  -  -  ;								Str$() unary function
   16 00:08F6 -  -  -  -  ;
   17 00:08F6 -  -  -  -  ; ***************************************************************************************
   18 00:08F6 -  -  -  -  
   19 00:08F6 -  -  -  -  Unary_Str:	;; [str]
   20 00:08F6 CD 06 04 00 		call 	CheckDollar
   21 00:08FA DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 00:08FD EE AC -  -  		xor		KWD_TILDE
   23 00:08FF F5 -  -  -  		push 	af
   24 00:0900 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 00:0902 DD 23 -  -  		inc 	ix
   26 00:0904 -  -  -  -  _USNotHex:		
   27 00:0904 CD 3B 06 00 		call 	EvaluateIntegerTerm 		; get an integer
   28 00:0908 01 94 00 00 		ld 		bc,_USBuffer 				; point to buffer.
   29 00:090C F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 00:090D 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 00:090F 20 02 -  -  		jr 		nz,_USNotHex2
   32 00:0911 3E 10 -  -  		ld 		a,16
   33 00:0913 -  -  -  -  _USNotHex2:		
   34 00:0913 CD 1D 14 00 		call 	Int32ToString 				
   35 00:0917 21 94 00 00 		ld 		hl,_USBuffer 				; string address.
   36 00:091B 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 00:091D C9 -  -  -  		ret
   38 00:091E -  -  -  -  
   39 00:091E -  -  -  -  ; ***************************************************************************************
   40 00:091E -  -  -  -  ;
   41 00:091E -  -  -  -  ;									Changes and Updates
   42 00:091E -  -  -  -  ;
   43 00:091E -  -  -  -  ; ***************************************************************************************
   44 00:091E -  -  -  -  ;
   45 00:091E -  -  -  -  ;		Date			Notes
   46 00:091E -  -  -  -  ;		==== 			=====
   47 00:091E -  -  -  -  ;
   48 00:091E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 00:091E -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 00:091E -  -  -  -  ; ***************************************************************************************
    2 00:091E -  -  -  -  ; ***************************************************************************************
    3 00:091E -  -  -  -  ;
    4 00:091E -  -  -  -  ;		Name : 		time.asm
    5 00:091E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:091E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:091E -  -  -  -  ;		Reviewed :	No
    8 00:091E -  -  -  -  ;		Purpose :	Get time in ms.
    9 00:091E -  -  -  -  ;
   10 00:091E -  -  -  -  ; ***************************************************************************************
   11 00:091E -  -  -  -  ; ***************************************************************************************
   12 00:091E -  -  -  -  
   13 00:091E -  -  -  -  ; ***************************************************************************************
   14 00:091E -  -  -  -  ;
   15 00:091E -  -  -  -  ;							Get system time in ms
   16 00:091E -  -  -  -  ;
   17 00:091E -  -  -  -  ; ***************************************************************************************
   18 00:091E -  -  -  -  
   19 00:091E -  -  -  -  Unary_Time:	;; [time]
   20 00:091E CD 6E 14 00 			call 	SYSGetTimer
   21 00:0922 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 00:0924 C9 -  -  -  			ret
   23 00:0925 -  -  -  -  
   24 00:0925 -  -  -  -  ; ***************************************************************************************
   25 00:0925 -  -  -  -  ;
   26 00:0925 -  -  -  -  ;									Changes and Updates
   27 00:0925 -  -  -  -  ;
   28 00:0925 -  -  -  -  ; ***************************************************************************************
   29 00:0925 -  -  -  -  ;
   30 00:0925 -  -  -  -  ;		Date			Notes
   31 00:0925 -  -  -  -  ;		==== 			=====
   32 00:0925 -  -  -  -  ;
   33 00:0925 -  -  -  -  ; ***************************************************************************************
   34 00:0925 -  -  -  -  			
Listing for file "_build.asm"
   50 00:0925 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 00:0925 -  -  -  -  ; ***************************************************************************************
    2 00:0925 -  -  -  -  ; ***************************************************************************************
    3 00:0925 -  -  -  -  ;
    4 00:0925 -  -  -  -  ;		Name : 		top.asm
    5 00:0925 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0925 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0925 -  -  -  -  ;		Reviewed :	No
    8 00:0925 -  -  -  -  ;		Purpose :	Various constants.
    9 00:0925 -  -  -  -  ;
   10 00:0925 -  -  -  -  ; ***************************************************************************************
   11 00:0925 -  -  -  -  ; ***************************************************************************************
   12 00:0925 -  -  -  -  
   13 00:0925 -  -  -  -  ; ***************************************************************************************
   14 00:0925 -  -  -  -  ;
   15 00:0925 -  -  -  -  ;							page unary function (no bracket)
   16 00:0925 -  -  -  -  ;
   17 00:0925 -  -  -  -  ; ***************************************************************************************
   18 00:0925 -  -  -  -  
   19 00:0925 -  -  -  -  Unary_Top:	;; [top]
   20 00:0925 2A 54 00 00 			ld 		hl,(TopMemory) 			; get address of code
   21 00:0929 D9 -  -  -  			exx
   22 00:092A 2A 56 00 00 			ld 		hl,(TopMemory+2)
   23 00:092E D9 -  -  -  			exx
   24 00:092F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 00:0931 C9 -  -  -  			ret
   26 00:0932 -  -  -  -  
   27 00:0932 -  -  -  -  ; ***************************************************************************************
   28 00:0932 -  -  -  -  ;
   29 00:0932 -  -  -  -  ;									Changes and Updates
   30 00:0932 -  -  -  -  ;
   31 00:0932 -  -  -  -  ; ***************************************************************************************
   32 00:0932 -  -  -  -  ;
   33 00:0932 -  -  -  -  ;		Date			Notes
   34 00:0932 -  -  -  -  ;		==== 			=====
   35 00:0932 -  -  -  -  ;
   36 00:0932 -  -  -  -  ; ***************************************************************************************
   37 00:0932 -  -  -  -  			
Listing for file "_build.asm"
   51 00:0932 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 00:0932 -  -  -  -  ; ***************************************************************************************
    2 00:0932 -  -  -  -  ; ***************************************************************************************
    3 00:0932 -  -  -  -  ;
    4 00:0932 -  -  -  -  ;		Name : 		val.asm
    5 00:0932 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0932 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0932 -  -  -  -  ;		Reviewed :	No
    8 00:0932 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 00:0932 -  -  -  -  ;
   10 00:0932 -  -  -  -  ; ***************************************************************************************
   11 00:0932 -  -  -  -  ; ***************************************************************************************
   12 00:0932 -  -  -  -  
   13 00:0932 -  -  -  -  ; ***************************************************************************************
   14 00:0932 -  -  -  -  ;
   15 00:0932 -  -  -  -  ;								val( unary function
   16 00:0932 -  -  -  -  ;
   17 00:0932 -  -  -  -  ; ***************************************************************************************
   18 00:0932 -  -  -  -  
   19 00:0932 -  -  -  -  Unary_Val:	;; [val]
   20 00:0932 CD 4A 06 00 		call 	EvaluateStringTerm 			; get the string into UHL
   21 00:0936 E5 -  -  -  		push 	hl 							; copy to BC
   22 00:0937 C1 -  -  -  		pop 	bc
   23 00:0938 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 00:093A CD FB 12 00 		call 	Int32FromString 			; get the integer part.
   25 00:093E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 00:0940 C8 -  -  -  		ret		z 							; okay
   27 00:0941 3E 03 C3 2E 
              04 00 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 00:0947 -  -  -  -  
   29 00:0947 -  -  -  -  ; ***************************************************************************************
   30 00:0947 -  -  -  -  ;
   31 00:0947 -  -  -  -  ;									Changes and Updates
   32 00:0947 -  -  -  -  ;
   33 00:0947 -  -  -  -  ; ***************************************************************************************
   34 00:0947 -  -  -  -  ;
   35 00:0947 -  -  -  -  ;		Date			Notes
   36 00:0947 -  -  -  -  ;		==== 			=====
   37 00:0947 -  -  -  -  ;
   38 00:0947 -  -  -  -  ; ***************************************************************************************
   39 00:0947 -  -  -  -  		
Listing for file "_build.asm"
   52 00:0947 -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 00:0947 -  -  -  -  ; ***************************************************************************************
    2 00:0947 -  -  -  -  ; ***************************************************************************************
    3 00:0947 -  -  -  -  ;
    4 00:0947 -  -  -  -  ;		Name : 		locals.asm
    5 00:0947 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0947 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0947 -  -  -  -  ;		Reviewed :	No
    8 00:0947 -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 00:0947 -  -  -  -  ;
   10 00:0947 -  -  -  -  ; ***************************************************************************************
   11 00:0947 -  -  -  -  ; ***************************************************************************************
   12 00:0947 -  -  -  -  
   13 00:0947 -  -  -  -  ; ***************************************************************************************
   14 00:0947 -  -  -  -  ;
   15 00:0947 -  -  -  -  ;									Locals command
   16 00:0947 -  -  -  -  ;
   17 00:0947 -  -  -  -  ; ***************************************************************************************
   18 00:0947 -  -  -  -  
   19 00:0947 -  -  -  -  Command_LOCAL:	;; [local]
   20 00:0947 21 00 00 00 		ld 		hl,0 						; set HL'HL, the default value, to zero
   21 00:094B D9 -  -  -  		exx
   22 00:094C 21 00 00 00 		ld 		hl,0
   23 00:0950 D9 -  -  -  		exx
   24 00:0951 CD 5F 09 00 		call 	LocalCreateVariable 		; create a variable
   25 00:0955 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a comma ?
   26 00:0958 FE A6 -  -  		cp 		KWD_COMMA
   27 00:095A C0 -  -  -  		ret 	nz 							; exit if not
   28 00:095B DD 23 -  -  		inc 	ix 							; skip comma
   29 00:095D 18 E8 -  -  		jr 		Command_LOCAL 				; and go try the next one.
   30 00:095F -  -  -  -  		
   31 00:095F -  -  -  -  ; ***************************************************************************************
   32 00:095F -  -  -  -  ;
   33 00:095F -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   34 00:095F -  -  -  -  ;						(used for parameters and locals)
   35 00:095F -  -  -  -  ;
   36 00:095F -  -  -  -  ; ***************************************************************************************
   37 00:095F -  -  -  -  
   38 00:095F -  -  -  -  LocalCreateVariable:
   39 00:095F E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   40 00:0960 D9 -  -  -  		exx
   41 00:0961 E5 -  -  -  		push 	hl
   42 00:0962 D9 -  -  -  		exx
   43 00:0963 -  -  -  -  
   44 00:0963 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   45 00:0965 32 80 00 00 		ld 		(AllowAutoCreate),a
   46 00:0969 CD E7 0D 00 		call 	FindVariable 				; locate the variable, address in UHL now.
   47 00:096D E5 -  -  -  		push 	hl 							; save variable address.
   48 00:096E -  -  -  -  
   49 00:096E 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   50 00:0970 CD 24 0D 00 		call 	StackOpenFrame
   51 00:0974 -  -  -  -  
   52 00:0974 2A 58 00 00 		ld 		hl,(BasicSP) 				; point to SP+1
   53 00:0978 23 -  -  -  		inc 	hl
   54 00:0979 D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   55 00:097A D5 -  -  -  		push 	de
   56 00:097B ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   57 00:0981 -  -  -  -  		;
   58 00:0981 EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   59 00:0982 CD A4 09 00 		call 	_LCVRead32HL 				; read HL current value into HL'HL
   60 00:0986 CD 94 09 00 		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   61 00:098A -  -  -  -  		;
   62 00:098A D1 -  -  -  		pop 	de 							; the address of the variable itself.
   63 00:098B -  -  -  -  		;
   64 00:098B D9 -  -  -  		exx 								; restore the value being initialised to.
   65 00:098C E1 -  -  -  		pop 	hl
   66 00:098D D9 -  -  -  		exx
   67 00:098E E1 -  -  -  		pop 	hl
   68 00:098F CD 94 09 00 		call 	_LCVWrite32HL 				; write HL'HL to DE.
   69 00:0993 C9 -  -  -  		ret
   70 00:0994 -  -  -  -  
   71 00:0994 -  -  -  -  ; ***************************************************************************************
   72 00:0994 -  -  -  -  ;
   73 00:0994 -  -  -  -  ;									Write HL'HL to DE.
   74 00:0994 -  -  -  -  ;
   75 00:0994 -  -  -  -  ; ***************************************************************************************
   76 00:0994 -  -  -  -  
   77 00:0994 -  -  -  -  _LCVWrite32HL:
   78 00:0994 7D -  -  -  		ld 		a,l
   79 00:0995 12 -  -  -  		ld 		(de),a
   80 00:0996 13 -  -  -  		inc 	de
   81 00:0997 7C -  -  -  		ld 		a,h
   82 00:0998 12 -  -  -  		ld 		(de),a
   83 00:0999 13 -  -  -  		inc 	de
   84 00:099A D5 -  -  -  		push 	de
   85 00:099B D9 -  -  -  		exx
   86 00:099C D1 -  -  -  		pop 	de
   87 00:099D 7D -  -  -  		ld 		a,l
   88 00:099E 12 -  -  -  		ld 		(de),a
   89 00:099F 13 -  -  -  		inc 	de
   90 00:09A0 7C -  -  -  		ld 		a,h
   91 00:09A1 12 -  -  -  		ld 		(de),a
   92 00:09A2 D9 -  -  -  		exx
   93 00:09A3 C9 -  -  -  		ret
   94 00:09A4 -  -  -  -  
   95 00:09A4 -  -  -  -  ; ***************************************************************************************
   96 00:09A4 -  -  -  -  ;
   97 00:09A4 -  -  -  -  ;									Read (HL) to HL'HL
   98 00:09A4 -  -  -  -  ;
   99 00:09A4 -  -  -  -  ; ***************************************************************************************
  100 00:09A4 -  -  -  -  
  101 00:09A4 -  -  -  -  _LCVRead32HL:
  102 00:09A4 E5 -  -  -  		push 	hl
  103 00:09A5 ED 27 -  -  		ld_ind_hl
  104 00:09A7 D9 -  -  -  		exx
  105 00:09A8 E1 -  -  -  		pop 	hl
  106 00:09A9 23 -  -  -  		inc 	hl
  107 00:09AA 23 -  -  -  		inc 	hl
  108 00:09AB ED 27 -  -  		ld_ind_hl
  109 00:09AD D9 -  -  -  		exx
  110 00:09AE C9 -  -  -  		ret
  111 00:09AF -  -  -  -  
  112 00:09AF -  -  -  -  ; ***************************************************************************************
  113 00:09AF -  -  -  -  ;
  114 00:09AF -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
  115 00:09AF -  -  -  -  ;			or parameter
  116 00:09AF -  -  -  -  ;
  117 00:09AF -  -  -  -  ; ***************************************************************************************
  118 00:09AF -  -  -  -  
  119 00:09AF -  -  -  -  PopLocals:
  120 00:09AF 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  121 00:09B1 CD 5C 0D 00 		call 	StackCheckFrame
  122 00:09B5 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  123 00:09B6 -  -  -  -  
  124 00:09B6 2A 58 00 00 		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  125 00:09BA 23 -  -  -  		inc 	hl
  126 00:09BB E5 -  -  -  		push 	hl 							; save it
  127 00:09BC ED 27 -  -  		ld_ind_hl 							; read address into HL
  128 00:09BE EB -  -  -  		ex 		de,hl 						; target address is in DE.
  129 00:09BF -  -  -  -  		;
  130 00:09BF E1 -  -  -  		pop 	hl 							; address of old value
  131 00:09C0 23 -  -  -  		inc 	hl
  132 00:09C1 23 -  -  -  		inc 	hl
  133 00:09C2 23 -  -  -  		inc 	hl
  134 00:09C3 23 -  -  -  		inc 	hl
  135 00:09C4 CD A4 09 00 		call 	_LCVRead32HL 				; value into HL'HL
  136 00:09C8 CD 94 09 00 		call 	_LCVWrite32HL 				; and write it out again to var address
  137 00:09CC -  -  -  -  
  138 00:09CC CD 49 0D 00 		call 	StackCloseFrame 			; remove the local/parameter
  139 00:09D0 18 DD -  -  		jr 		PopLocals 					; check any more ?
  140 00:09D2 -  -  -  -  
  141 00:09D2 -  -  -  -  ; ***************************************************************************************
  142 00:09D2 -  -  -  -  ;
  143 00:09D2 -  -  -  -  ;									Changes and Updates
  144 00:09D2 -  -  -  -  ;
  145 00:09D2 -  -  -  -  ; ***************************************************************************************
  146 00:09D2 -  -  -  -  ;
  147 00:09D2 -  -  -  -  ;		Date			Notes
  148 00:09D2 -  -  -  -  ;		==== 			=====
  149 00:09D2 -  -  -  -  ;
  150 00:09D2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 00:09D2 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 00:09D2 -  -  -  -  ; ***************************************************************************************
    2 00:09D2 -  -  -  -  ; ***************************************************************************************
    3 00:09D2 -  -  -  -  ;
    4 00:09D2 -  -  -  -  ;		Name : 		proc.asm
    5 00:09D2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:09D2 -  -  -  -  ;		Date : 		8th June 2022
    7 00:09D2 -  -  -  -  ;		Reviewed :	No
    8 00:09D2 -  -  -  -  ;		Purpose :	Proc command
    9 00:09D2 -  -  -  -  ;
   10 00:09D2 -  -  -  -  ; ***************************************************************************************
   11 00:09D2 -  -  -  -  ; ***************************************************************************************
   12 00:09D2 -  -  -  -  
   13 00:09D2 -  -  -  -  ; ***************************************************************************************
   14 00:09D2 -  -  -  -  ;
   15 00:09D2 -  -  -  -  ;										PROC Command
   16 00:09D2 -  -  -  -  ;
   17 00:09D2 -  -  -  -  ; ***************************************************************************************
   18 00:09D2 -  -  -  -  
   19 00:09D2 -  -  -  -  Command_PROC: 	;; [proc]
   20 00:09D2 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 00:09D4 CD 24 0D 00 			call 	StackOpenFrame 			; marker position.
   22 00:09D8 -  -  -  -  			;
   23 00:09D8 DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 00:09DB FE 26 -  -  			cp 		IDENTIFIER_END
   25 00:09DD D2 98 04 00 			jp 		nc,SyntaxError 			; no , no call possible.
   26 00:09E1 CD 57 0A 00 			call 	SearchProcedure 		; find procedure referenced at IX.
   27 00:09E5 -  -  -  -  			;
   28 00:09E5 -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 00:09E5 -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 00:09E5 -  -  -  -  			;
   31 00:09E5 D5 -  -  -  			push 	de 						; save start of line
   32 00:09E6 DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 00:09E9 FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 00:09EB CC 02 0A 00 			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 00:09EF -  -  -  -  			;
   36 00:09EF E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 00:09F0 -  -  -  -  			;
   38 00:09F0 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 00:09F2 CD 24 0D 00 			call 	StackOpenFrame 
   40 00:09F6 CD 62 0D 00 			call 	StackSavePosition 		; and save the return address on the stack.
   41 00:09FA -  -  -  -  
   42 00:09FA DD E1 -  -  			pop 	ix 						; new position in code
   43 00:09FC E1 -  -  -  			pop 	hl 						; start of line
   44 00:09FD 22 5C 00 00 			ld 		(CurrentLineStart),hl 	; save start of line
   45 00:0A01 C9 -  -  -  			ret
   46 00:0A02 -  -  -  -  
   47 00:0A02 -  -  -  -  ; ***************************************************************************************
   48 00:0A02 -  -  -  -  ;
   49 00:0A02 -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 00:0A02 -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 00:0A02 -  -  -  -  ;
   52 00:0A02 -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 00:0A02 -  -  -  -  ;			final ) on the parameter lists.
   54 00:0A02 -  -  -  -  ;
   55 00:0A02 -  -  -  -  ; ***************************************************************************************
   56 00:0A02 -  -  -  -  
   57 00:0A02 -  -  -  -  ProcDoParameterList:
   58 00:0A02 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 00:0A03 DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 00:0A06 20 1E -  -  			jr 		nz,_ParamError
   61 00:0A08 -  -  -  -  			;
   62 00:0A08 DD 23 -  -  			inc 	ix 						; skip over it
   63 00:0A0A 23 -  -  -  			inc 	hl
   64 00:0A0B FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 00:0A0D C8 -  -  -  			ret 	z
   66 00:0A0E -  -  -  -  			;
   67 00:0A0E FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 00:0A10 28 04 -  -  			jr 		z,_PDPFound
   69 00:0A12 FE A6 -  -  			cp 		KWD_COMMA
   70 00:0A14 20 10 -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 00:0A16 -  -  -  -  			;
   72 00:0A16 -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 00:0A16 -  -  -  -  			;
   74 00:0A16 -  -  -  -  _PDPFound:			
   75 00:0A16 E5 -  -  -  			push 	hl 						; save callee on stack
   76 00:0A17 CD 61 06 00 			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 00:0A1B DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 00:0A1D CD 5F 09 00 			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 00:0A21 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 00:0A23 E1 -  -  -  			pop 	hl 						; and HL the callee
   81 00:0A24 18 DC -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 00:0A26 -  -  -  -  
   83 00:0A26 -  -  -  -  _ParamError:
   84 00:0A26 3E 13 C3 2E 
              04 00 -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 00:0A2C -  -  -  -  
   86 00:0A2C -  -  -  -  ; ***************************************************************************************
   87 00:0A2C -  -  -  -  ;
   88 00:0A2C -  -  -  -  ;										ENDPROC Command
   89 00:0A2C -  -  -  -  ;
   90 00:0A2C -  -  -  -  ; ***************************************************************************************
   91 00:0A2C -  -  -  -  
   92 00:0A2C -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 00:0A2C CD AF 09 00 			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 00:0A30 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 00:0A32 CD 5C 0D 00 			call 	StackCheckFrame
   96 00:0A36 20 19 -  -  			jr 		nz,_EndProcError
   97 00:0A38 CD 7D 0D 00 			call 	StackLoadPosition 		; restore position into IX/SOL
   98 00:0A3C CD 49 0D 00 			call 	StackCloseFrame 		
   99 00:0A40 -  -  -  -  
  100 00:0A40 CD AF 09 00 			call 	PopLocals 				; restore any locals (parameters)
  101 00:0A44 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 00:0A46 CD 5C 0D 00 			call 	StackCheckFrame
  103 00:0A4A 20 05 -  -  			jr 		nz,_EndProcError
  104 00:0A4C CD 49 0D 00 			call 	StackCloseFrame 		
  105 00:0A50 C9 -  -  -  			ret
  106 00:0A51 -  -  -  -  _EndProcError:
  107 00:0A51 3E 10 C3 2E 
              04 00 -  -  			ERR_NOPROC
  108 00:0A57 -  -  -  -  
  109 00:0A57 -  -  -  -  ; ***************************************************************************************
  110 00:0A57 -  -  -  -  ;
  111 00:0A57 -  -  -  -  ;									Changes and Updates
  112 00:0A57 -  -  -  -  ;
  113 00:0A57 -  -  -  -  ; ***************************************************************************************
  114 00:0A57 -  -  -  -  ;
  115 00:0A57 -  -  -  -  ;		Date			Notes
  116 00:0A57 -  -  -  -  ;		==== 			=====
  117 00:0A57 -  -  -  -  ;
  118 00:0A57 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 00:0A57 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 00:0A57 -  -  -  -  ; ***************************************************************************************
    2 00:0A57 -  -  -  -  ; ***************************************************************************************
    3 00:0A57 -  -  -  -  ;
    4 00:0A57 -  -  -  -  ;		Name : 		search.asm
    5 00:0A57 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0A57 -  -  -  -  ;		Date : 		8th June 2022
    7 00:0A57 -  -  -  -  ;		Reviewed :	No
    8 00:0A57 -  -  -  -  ;		Purpose :	Search program for procedures
    9 00:0A57 -  -  -  -  ;
   10 00:0A57 -  -  -  -  ; ***************************************************************************************
   11 00:0A57 -  -  -  -  ; ***************************************************************************************
   12 00:0A57 -  -  -  -  
   13 00:0A57 -  -  -  -  ; ***************************************************************************************
   14 00:0A57 -  -  -  -  ;
   15 00:0A57 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 00:0A57 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 00:0A57 -  -  -  -  ;
   18 00:0A57 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 00:0A57 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 00:0A57 -  -  -  -  ;
   21 00:0A57 -  -  -  -  ; ***************************************************************************************
   22 00:0A57 -  -  -  -  
   23 00:0A57 -  -  -  -  SearchProcedure:
   24 00:0A57 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 00:0A5A -  -  -  -  
   26 00:0A5A 2A 38 00 00 			ld 		hl,(CodeAddress) 		; start of program space
   27 00:0A5E -  -  -  -  			;
   28 00:0A5E -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 00:0A5E -  -  -  -  			;
   30 00:0A5E 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 00:0A5F B7 -  -  -  			or 		a
   32 00:0A60 28 38 -  -  			jr 		z,_SPFail
   33 00:0A62 E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 00:0A63 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 00:0A64 23 -  -  -  			inc 	hl
   36 00:0A65 23 -  -  -  			inc 	hl
   37 00:0A66 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 00:0A67 FE B6 -  -  			cp 		KWD_DEF 				
   39 00:0A69 20 0B -  -  			jr 		nz,_SPNext
   40 00:0A6B 23 -  -  -  			inc 	hl 				
   41 00:0A6C 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 00:0A6D FE B7 -  -  			cp 		KWD_PROC
   43 00:0A6F 20 05 -  -  			jr 		nz,_SPNext
   44 00:0A71 23 -  -  -  			inc 	hl
   45 00:0A72 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 00:0A73 B9 -  -  -  			cp 		c
   47 00:0A74 28 09 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 00:0A76 -  -  -  -  			;
   49 00:0A76 -  -  -  -  			;		Advance to next entry.
   50 00:0A76 -  -  -  -  			;			
   51 00:0A76 E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 00:0A77 11 00 00 00 			ld 		de,0 					; offset into UDE
   53 00:0A7B 5E -  -  -  			ld 		e,(hl)
   54 00:0A7C 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 00:0A7D 18 DF -  -  			jr 		_SPLoop
   56 00:0A7F -  -  -  -  			;
   57 00:0A7F -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 00:0A7F -  -  -  -  			; 		DEF PROC line.
   59 00:0A7F -  -  -  -  			;		
   60 00:0A7F -  -  -  -  			;		Already know the first characters match
   61 00:0A7F -  -  -  -  			;
   62 00:0A7F -  -  -  -  _SPFullCheck:
   63 00:0A7F DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 00:0A81 -  -  -  -  _SPCheckLoop:
   65 00:0A81 DD 23 -  -  			inc 	ix 						; look at next character.
   66 00:0A83 23 -  -  -  			inc 	hl
   67 00:0A84 DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 00:0A87 FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 00:0A89 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 00:0A8B BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 00:0A8C 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 00:0A8E -  -  -  -  			;
   73 00:0A8E -  -  -  -  			;		Full check failed.
   74 00:0A8E -  -  -  -  			;
   75 00:0A8E -  -  -  -  _SPFullCheckFailed:			
   76 00:0A8E DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 00:0A90 18 E4 -  -  			jr 		_SPNext 				; do the next line.
   78 00:0A92 -  -  -  -  			;
   79 00:0A92 -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 00:0A92 -  -  -  -  			;
   81 00:0A92 -  -  -  -  _SPCheckBothEnd:
   82 00:0A92 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 00:0A93 FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 00:0A95 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 00:0A97 -  -  -  -  			;
   86 00:0A97 -  -  -  -  			;	 	We found it.
   87 00:0A97 -  -  -  -  			;
   88 00:0A97 C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 00:0A98 D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 00:0A99 C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 00:0A9A -  -  -  -  
   92 00:0A9A -  -  -  -  _SPFail: 									; come here when not found.
   93 00:0A9A 3E 14 C3 2E 
              04 00 -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 00:0AA0 -  -  -  -  
   95 00:0AA0 -  -  -  -  ; ***************************************************************************************
   96 00:0AA0 -  -  -  -  ;
   97 00:0AA0 -  -  -  -  ;									Changes and Updates
   98 00:0AA0 -  -  -  -  ;
   99 00:0AA0 -  -  -  -  ; ***************************************************************************************
  100 00:0AA0 -  -  -  -  ;
  101 00:0AA0 -  -  -  -  ;		Date			Notes
  102 00:0AA0 -  -  -  -  ;		==== 			=====
  103 00:0AA0 -  -  -  -  ;
  104 00:0AA0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 00:0AA0 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 00:0AA0 -  -  -  -  ; ***************************************************************************************
    2 00:0AA0 -  -  -  -  ; ***************************************************************************************
    3 00:0AA0 -  -  -  -  ;
    4 00:0AA0 -  -  -  -  ;		Name : 		allocate.asm
    5 00:0AA0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AA0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0AA0 -  -  -  -  ;		Reviewed :	No
    8 00:0AA0 -  -  -  -  ;		Purpose :	Allocate memory
    9 00:0AA0 -  -  -  -  ;
   10 00:0AA0 -  -  -  -  ; ***************************************************************************************
   11 00:0AA0 -  -  -  -  ; ***************************************************************************************
   12 00:0AA0 -  -  -  -  
   13 00:0AA0 -  -  -  -  ; ***************************************************************************************
   14 00:0AA0 -  -  -  -  ;
   15 00:0AA0 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 00:0AA0 -  -  -  -  ;
   17 00:0AA0 -  -  -  -  ; ***************************************************************************************
   18 00:0AA0 -  -  -  -  
   19 00:0AA0 -  -  -  -  AllocateBytes:
   20 00:0AA0 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 00:0AA1 21 00 00 00 		ld 		hl,$000000
   22 00:0AA5 62 -  -  -  		ld 		h,d
   23 00:0AA6 6B -  -  -  		ld 		l,e
   24 00:0AA7 -  -  -  -  		;
   25 00:0AA7 ED 5B 50 00 
              00 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 00:0AAC D5 -  -  -  		push 	de 							; save on stack
   27 00:0AAD 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 00:0AAE 22 50 00 00 		ld 		(LowAllocMemory),hl 		; update it
   29 00:0AB2 -  -  -  -  		;
   30 00:0AB2 EB -  -  -  		ex 		de,hl 						; put in DE
   31 00:0AB3 2A 4C 00 00 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 00:0AB7 AF -  -  -  		xor 	a
   33 00:0AB8 ED 52 -  -  		sbc 	hl,de
   34 00:0ABA E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 00:0ABB D0 -  -  -  		ret 	nc 							; return if high >= low
   36 00:0ABC 3E 0B C3 2E 
              04 00 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 00:0AC2 -  -  -  -  
   38 00:0AC2 -  -  -  -  ; ***************************************************************************************
   39 00:0AC2 -  -  -  -  ;
   40 00:0AC2 -  -  -  -  ;									Changes and Updates
   41 00:0AC2 -  -  -  -  ;
   42 00:0AC2 -  -  -  -  ; ***************************************************************************************
   43 00:0AC2 -  -  -  -  ;
   44 00:0AC2 -  -  -  -  ;		Date			Notes
   45 00:0AC2 -  -  -  -  ;		==== 			=====
   46 00:0AC2 -  -  -  -  ;
   47 00:0AC2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 00:0AC2 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 00:0AC2 -  -  -  -  ; ***************************************************************************************
    2 00:0AC2 -  -  -  -  ; ***************************************************************************************
    3 00:0AC2 -  -  -  -  ;
    4 00:0AC2 -  -  -  -  ;		Name : 		clear.asm
    5 00:0AC2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0AC2 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0AC2 -  -  -  -  ;		Reviewed :	No
    8 00:0AC2 -  -  -  -  ;		Purpose :	Clear command.
    9 00:0AC2 -  -  -  -  ;
   10 00:0AC2 -  -  -  -  ; ***************************************************************************************
   11 00:0AC2 -  -  -  -  ; ***************************************************************************************
   12 00:0AC2 -  -  -  -  
   13 00:0AC2 -  -  -  -  ; ***************************************************************************************
   14 00:0AC2 -  -  -  -  ;
   15 00:0AC2 -  -  -  -  ;										CLEAR command
   16 00:0AC2 -  -  -  -  ;
   17 00:0AC2 -  -  -  -  ; ***************************************************************************************
   18 00:0AC2 -  -  -  -  
   19 00:0AC2 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 00:0AC2 -  -  -  -  		;
   21 00:0AC2 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 00:0AC2 -  -  -  -  		;
   23 00:0AC2 2A 30 00 00 		ld 		hl,(LowMemory) 				; base memory
   24 00:0AC6 -  -  -  -  _CCFindLow:
   25 00:0AC6 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 00:0ACA 5E -  -  -  		ld 		e,(hl)		
   27 00:0ACB 19 -  -  -  		add 	hl,de
   28 00:0ACC 7B -  -  -  		ld 		a,e
   29 00:0ACD B7 -  -  -  		or 		a
   30 00:0ACE 20 F6 -  -  		jr 		nz,_CCFindLow
   31 00:0AD0 23 -  -  -  		inc 	hl 							; one past the last $00
   32 00:0AD1 22 54 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 00:0AD5 23 -  -  -  		inc 	hl 							; one for luck
   34 00:0AD6 22 50 00 00 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 00:0ADA -  -  -  -  		;
   36 00:0ADA -  -  -  -  		; 	 		Reset the language stack
   37 00:0ADA -  -  -  -  		;
   38 00:0ADA 2A 34 00 00 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 00:0ADE -  -  -  -  		;
   40 00:0ADE 22 3C 00 00 		ld 		(LanguageStack),hl 			; going down from here		
   41 00:0AE2 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 00:0AE6 19 -  -  -  		add 	hl,de
   43 00:0AE7 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 00:0AE9 22 40 00 00 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 00:0AED -  -  -  -  		;
   46 00:0AED 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 00:0AF1 19 -  -  -  		add 	hl,de
   48 00:0AF2 22 44 00 00 		ld 		(StandardIntegers),hl
   49 00:0AF6 -  -  -  -  		;
   50 00:0AF6 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 00:0AF6 -  -  -  -  		;
   52 00:0AF6 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 00:0AFA -  -  -  -  _CCFClearHT:
   54 00:0AFA 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 00:0AFB 36 00 -  -  		ld 		(hl),0
   56 00:0AFD 1B -  -  -  		dec 	de
   57 00:0AFE 7A -  -  -  		ld 		a,d
   58 00:0AFF B3 -  -  -  		or 		e
   59 00:0B00 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 00:0B02 22 48 00 00 		ld 		(HashTableBase),hl 			; save table base
   61 00:0B06 -  -  -  -  		;
   62 00:0B06 -  -  -  -  		; 		Save highest byte that can be allocate
   63 00:0B06 -  -  -  -  		;
   64 00:0B06 22 4C 00 00 		ld 		(HighAllocMemory),hl 		; set high memory
   65 00:0B0A -  -  -  -  		;
   66 00:0B0A -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 00:0B0A -  -  -  -  		;
   68 00:0B0A CD 75 08 00 		call 	UnaryRandomInitialise
   69 00:0B0E -  -  -  -  		;
   70 00:0B0E -  -  -  -  		;		Erase the stack
   71 00:0B0E -  -  -  -  		;
   72 00:0B0E CD 18 0D 00 		call 	StackReset 					; reset the basic stack to empty
   73 00:0B12 -  -  -  -  		;
   74 00:0B12 -  -  -  -  		;		Reset READ/DATA
   75 00:0B12 -  -  -  -  		;
   76 00:0B12 CD D8 03 00 		call 	Command_RESTORE
   77 00:0B16 C9 -  -  -  		ret
   78 00:0B17 -  -  -  -  
   79 00:0B17 -  -  -  -  ; ***************************************************************************************
   80 00:0B17 -  -  -  -  ;
   81 00:0B17 -  -  -  -  ;									Changes and Updates
   82 00:0B17 -  -  -  -  ;
   83 00:0B17 -  -  -  -  ; ***************************************************************************************
   84 00:0B17 -  -  -  -  ;
   85 00:0B17 -  -  -  -  ;		Date			Notes
   86 00:0B17 -  -  -  -  ;		==== 			=====
   87 00:0B17 -  -  -  -  ;
   88 00:0B17 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 00:0B17 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 00:0B17 -  -  -  -  ; ***************************************************************************************
    2 00:0B17 -  -  -  -  ; ***************************************************************************************
    3 00:0B17 -  -  -  -  ;
    4 00:0B17 -  -  -  -  ;		Name : 		instance.asm
    5 00:0B17 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B17 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B17 -  -  -  -  ;		Reviewed :	No
    8 00:0B17 -  -  -  -  ;		Purpose :	Instance handling
    9 00:0B17 -  -  -  -  ;
   10 00:0B17 -  -  -  -  ; ***************************************************************************************
   11 00:0B17 -  -  -  -  ; ***************************************************************************************
   12 00:0B17 -  -  -  -  
   13 00:0B17 -  -  -  -  ; ***************************************************************************************
   14 00:0B17 -  -  -  -  ;
   15 00:0B17 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 00:0B17 -  -  -  -  ;
   17 00:0B17 -  -  -  -  ; ***************************************************************************************
   18 00:0B17 -  -  -  -  
   19 00:0B17 -  -  -  -  SetCurrentInstance:
   20 00:0B17 ED 53 30 00 
              00 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 00:0B1C 22 34 00 00 		ld 		(HighMemory),hl 
   22 00:0B20 ED 53 38 00 
              00 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 00:0B25 -  -  -  -  
   24 00:0B25 C9 -  -  -  		ret
   25 00:0B26 -  -  -  -  
   26 00:0B26 -  -  -  -  
   27 00:0B26 -  -  -  -  ; ***************************************************************************************
   28 00:0B26 -  -  -  -  ;
   29 00:0B26 -  -  -  -  ;									Changes and Updates
   30 00:0B26 -  -  -  -  ;
   31 00:0B26 -  -  -  -  ; ***************************************************************************************
   32 00:0B26 -  -  -  -  ;
   33 00:0B26 -  -  -  -  ;		Date			Notes
   34 00:0B26 -  -  -  -  ;		==== 			=====
   35 00:0B26 -  -  -  -  ;
   36 00:0B26 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 00:0B26 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 00:0B26 -  -  -  -  ; ***************************************************************************************
    2 00:0B26 -  -  -  -  ; ***************************************************************************************
    3 00:0B26 -  -  -  -  ;
    4 00:0B26 -  -  -  -  ;		Name : 		new.asm
    5 00:0B26 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B26 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0B26 -  -  -  -  ;		Reviewed :	No
    8 00:0B26 -  -  -  -  ;		Purpose :	New command.
    9 00:0B26 -  -  -  -  ;
   10 00:0B26 -  -  -  -  ; ***************************************************************************************
   11 00:0B26 -  -  -  -  ; ***************************************************************************************
   12 00:0B26 -  -  -  -  
   13 00:0B26 -  -  -  -  ; ***************************************************************************************
   14 00:0B26 -  -  -  -  ;
   15 00:0B26 -  -  -  -  ;										NEW command
   16 00:0B26 -  -  -  -  ;
   17 00:0B26 -  -  -  -  ; ***************************************************************************************
   18 00:0B26 -  -  -  -  
   19 00:0B26 -  -  -  -  Command_NEW: 	;; [new]
   20 00:0B26 2A 38 00 00 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 00:0B2A 36 00 -  -  		ld 		(hl),0
   22 00:0B2C CD C2 0A 00 		call 	Command_CLEAR 				; clear all variables
   23 00:0B30 3E 00 C3 2E 
              04 00 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 00:0B36 -  -  -  -  
   25 00:0B36 -  -  -  -  ; ***************************************************************************************
   26 00:0B36 -  -  -  -  ;
   27 00:0B36 -  -  -  -  ;									Changes and Updates
   28 00:0B36 -  -  -  -  ;
   29 00:0B36 -  -  -  -  ; ***************************************************************************************
   30 00:0B36 -  -  -  -  ;
   31 00:0B36 -  -  -  -  ;		Date			Notes
   32 00:0B36 -  -  -  -  ;		==== 			=====
   33 00:0B36 -  -  -  -  ;
   34 00:0B36 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 00:0B36 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 00:0B36 -  -  -  -  ; ***************************************************************************************
    2 00:0B36 -  -  -  -  ; ***************************************************************************************
    3 00:0B36 -  -  -  -  ;
    4 00:0B36 -  -  -  -  ;		Name : 		for.asm
    5 00:0B36 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0B36 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0B36 -  -  -  -  ;		Reviewed :	No
    8 00:0B36 -  -  -  -  ;		Purpose :	For/Next command
    9 00:0B36 -  -  -  -  ;
   10 00:0B36 -  -  -  -  ; ***************************************************************************************
   11 00:0B36 -  -  -  -  
   12 00:0B36 -  -  -  -  ; ***************************************************************************************
   13 00:0B36 -  -  -  -  ;
   14 00:0B36 -  -  -  -  ;									For Command
   15 00:0B36 -  -  -  -  ;
   16 00:0B36 -  -  -  -  ; ***************************************************************************************
   17 00:0B36 -  -  -  -  
   18 00:0B36 -  -  -  -  Command_FOR: ;; [for]
   19 00:0B36 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 00:0B38 CD 24 0D 00 			call 	StackOpenFrame
   21 00:0B3C -  -  -  -  			;
   22 00:0B3C -  -  -  -  			;		Variable Reference to increment
   23 00:0B3C -  -  -  -  			;
   24 00:0B3C DD E5 -  -  			push	ix 						; save start position
   25 00:0B3E 3E FF -  -  			ld 		a,255 					; FOR can create
   26 00:0B40 32 80 00 00 			ld 		(AllowAutoCreate),a
   27 00:0B44 CD F0 06 00 			call 	EvaluateTerm 			; get term
   28 00:0B48 AF -  -  -  			xor 	a 						; autocreate off.
   29 00:0B49 32 80 00 00 			ld 		(AllowAutoCreate),a
   30 00:0B4D DD E1 -  -  			pop 	ix 						; get start position
   31 00:0B4F E5 -  -  -  			push 	hl 						; save reference address.
   32 00:0B50 -  -  -  -  			;
   33 00:0B50 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 00:0B52 C2 98 04 00 			jp 		nz,SyntaxError
   35 00:0B56 EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 00:0B57 -  -  -  -  			;
   37 00:0B57 2A 58 00 00 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 00:0B5B 01 06 00 00 			ld 		bc,6
   39 00:0B5F 09 -  -  -  			add 	hl,bc 
   40 00:0B60 D1 -  -  -  			pop 	de 						; get reference.
   41 00:0B61 ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 00:0B67 -  -  -  -  			;
   43 00:0B67 -  -  -  -  			;		var = value
   44 00:0B67 -  -  -  -  			;
   45 00:0B67 CD C9 01 00 			call 	Command_LET 			; so we do I = 1 or whatever.
   46 00:0B6B -  -  -  -  			; 		
   47 00:0B6B -  -  -  -  			; 		TO
   48 00:0B6B -  -  -  -  			;
   49 00:0B6B 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 00:0B6D CD 22 04 00 			call 	CheckNextA
   51 00:0B71 -  -  -  -  			;
   52 00:0B71 -  -  -  -  			;		value
   53 00:0B71 -  -  -  -  			;
   54 00:0B71 CD 61 06 00 			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 00:0B75 3E 0A -  -  			ld 		a,10
   56 00:0B77 CD B2 0B 00 			call 	CFWriteHLHLToA 
   57 00:0B7B -  -  -  -  			;
   58 00:0B7B -  -  -  -  			;		Check STEP ?
   59 00:0B7B -  -  -  -  			;
   60 00:0B7B 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   61 00:0B7F D9 -  -  -  			exx
   62 00:0B80 21 00 00 00 			ld 		hl,0
   63 00:0B84 D9 -  -  -  			exx			
   64 00:0B85 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 00:0B88 FE B4 -  -  			cp 		KWD_STEP 				
   66 00:0B8A 20 06 -  -  			jr 		nz,_CFDefaultStep
   67 00:0B8C -  -  -  -  			;
   68 00:0B8C DD 23 -  -  			inc 	ix 						; get step
   69 00:0B8E CD 61 06 00 			call 	EvaluateInteger
   70 00:0B92 -  -  -  -  _CFDefaultStep:			
   71 00:0B92 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 00:0B94 CD B2 0B 00 			call 	CFWriteHLHLToA 
   73 00:0B98 CD 62 0D 00 			call 	StackSavePosition 		; save loop address
   74 00:0B9C C9 -  -  -  			ret
   75 00:0B9D -  -  -  -  
   76 00:0B9D -  -  -  -  ; ***************************************************************************************
   77 00:0B9D -  -  -  -  ;
   78 00:0B9D -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 00:0B9D -  -  -  -  ;
   80 00:0B9D -  -  -  -  ; ***************************************************************************************
   81 00:0B9D -  -  -  -  
   82 00:0B9D -  -  -  -  CFReadAToHLHL:
   83 00:0B9D 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   84 00:0BA1 4F -  -  -  			ld 		c,a
   85 00:0BA2 2A 58 00 00 			ld 		hl,(BasicSP) 			; add stack base
   86 00:0BA6 09 -  -  -  			add 	hl,bc
   87 00:0BA7 -  -  -  -  
   88 00:0BA7 -  -  -  -  CFReadHLToHLHL:
   89 00:0BA7 E5 -  -  -  			push 	hl
   90 00:0BA8 ED 27 -  -  			ld_ind_hl 						; get low word
   91 00:0BAA D9 -  -  -  			exx
   92 00:0BAB -  -  -  -  
   93 00:0BAB E1 -  -  -  			pop 	hl 						; get high word
   94 00:0BAC 23 -  -  -  			inc 	hl
   95 00:0BAD 23 -  -  -  			inc 	hl
   96 00:0BAE ED 27 -  -  			ld_ind_hl
   97 00:0BB0 D9 -  -  -  			exx
   98 00:0BB1 -  -  -  -  
   99 00:0BB1 C9 -  -  -  			ret
  100 00:0BB2 -  -  -  -  
  101 00:0BB2 -  -  -  -  ; ***************************************************************************************
  102 00:0BB2 -  -  -  -  ;
  103 00:0BB2 -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 00:0BB2 -  -  -  -  ;
  105 00:0BB2 -  -  -  -  ; ***************************************************************************************
  106 00:0BB2 -  -  -  -  
  107 00:0BB2 -  -  -  -  CFWriteHLHLToA:
  108 00:0BB2 EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 00:0BB3 D9 -  -  -  			exx
  110 00:0BB4 EB -  -  -  			ex 		de,hl
  111 00:0BB5 D9 -  -  -  			exx
  112 00:0BB6 -  -  -  -  
  113 00:0BB6 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  114 00:0BBA 4F -  -  -  			ld 		c,a
  115 00:0BBB 2A 58 00 00 			ld 		hl,(BasicSP) 			; add stack base
  116 00:0BBF 09 -  -  -  			add 	hl,bc
  117 00:0BC0 -  -  -  -  
  118 00:0BC0 -  -  -  -  CFWriteDEDEToHL:
  119 00:0BC0 73 -  -  -  			ld 		(hl),e 					; write low word
  120 00:0BC1 23 -  -  -  			inc 	hl
  121 00:0BC2 72 -  -  -  			ld 		(hl),d
  122 00:0BC3 23 -  -  -  			inc 	hl
  123 00:0BC4 -  -  -  -  
  124 00:0BC4 E5 -  -  -  			push 	hl 						; write high word
  125 00:0BC5 D9 -  -  -  			exx
  126 00:0BC6 E1 -  -  -  			pop 	hl
  127 00:0BC7 73 -  -  -  			ld 		(hl),e
  128 00:0BC8 23 -  -  -  			inc 	hl
  129 00:0BC9 72 -  -  -  			ld 		(hl),d
  130 00:0BCA D9 -  -  -  			exx
  131 00:0BCB C9 -  -  -  			ret			
  132 00:0BCC -  -  -  -  
  133 00:0BCC -  -  -  -  ; ***************************************************************************************
  134 00:0BCC -  -  -  -  ;
  135 00:0BCC -  -  -  -  ;									Next Command
  136 00:0BCC -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 00:0BCC -  -  -  -  ;
  138 00:0BCC -  -  -  -  ; ***************************************************************************************
  139 00:0BCC -  -  -  -  
  140 00:0BCC -  -  -  -  Command_Next:	;; [next]
  141 00:0BCC 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 00:0BCE CD 5C 0D 00 			call 	StackCheckFrame
  143 00:0BD2 -  -  -  -  			;
  144 00:0BD2 -  -  -  -  			;		Get address of FOR variable
  145 00:0BD2 -  -  -  -  			;
  146 00:0BD2 2A 58 00 00 			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 00:0BD6 01 06 00 00 			ld 		bc,6
  148 00:0BDA 09 -  -  -  			add 	hl,bc
  149 00:0BDB ED 27 -  -  			ld_ind_hl
  150 00:0BDD -  -  -  -  			;
  151 00:0BDD -  -  -  -  			; 		Save reference, read value into DE.
  152 00:0BDD -  -  -  -  			;
  153 00:0BDD E5 -  -  -  			push 	hl 						; save index address
  154 00:0BDE CD A7 0B 00 			call 	CFReadHLToHLHL 			; read the index value.
  155 00:0BE2 -  -  -  -  
  156 00:0BE2 EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 00:0BE3 D9 -  -  -  			exx
  158 00:0BE4 EB -  -  -  			ex 		de,hl
  159 00:0BE5 D9 -  -  -  			exx
  160 00:0BE6 -  -  -  -  			;
  161 00:0BE6 -  -  -  -  			; 		Read step and Add
  162 00:0BE6 -  -  -  -  			;
  163 00:0BE6 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 00:0BE8 CD 9D 0B 00 			call 	CFReadAToHLHL
  165 00:0BEC D9 -  -  -  			exx 							; msb of step on stack
  166 00:0BED 7C -  -  -  			ld 		a,h
  167 00:0BEE D9 -  -  -  			exx
  168 00:0BEF F5 -  -  -  			push 	af
  169 00:0BF0 CD 9C 13 00 			call 	Int32Add 				; add step to offset => HL'HL
  170 00:0BF4 -  -  -  -  			;
  171 00:0BF4 -  -  -  -  			;		Put result in DE and write back out
  172 00:0BF4 -  -  -  -  			;
  173 00:0BF4 EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 00:0BF5 D9 -  -  -  			exx
  175 00:0BF6 EB -  -  -  			ex 		de,hl
  176 00:0BF7 D9 -  -  -  			exx
  177 00:0BF8 F1 -  -  -  			pop 	af 						; get msb of step
  178 00:0BF9 E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 00:0BFA F5 -  -  -  			push 	af 						; push msb of step back.
  180 00:0BFB CD C0 0B 00 			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 00:0BFF -  -  -  -  			;
  182 00:0BFF -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 00:0BFF -  -  -  -  			;
  184 00:0BFF 3E 0A -  -  			ld 		a,10 					; load limit
  185 00:0C01 CD 9D 0B 00 			call 	CFReadAToHLHL
  186 00:0C05 CD DC 13 00 			call 	Int32Compare 			; compare limit to index.
  187 00:0C09 C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 00:0C0A B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 00:0C0B 28 0A -  -  			jr 		z,_CNXLoopBack
  190 00:0C0D CB 78 -  -  			bit 	7,b 					; was step -ve
  191 00:0C0F 28 02 -  -  			jr 		z,_CNXNotMStep
  192 00:0C11 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 00:0C13 -  -  -  -  _CNXNotMStep:			
  194 00:0C13 E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 00:0C15 20 04 -  -  			jr 		nz,_CNXLoopOver
  196 00:0C17 -  -  -  -  			;
  197 00:0C17 -  -  -  -  			;		For loop goes round again.
  198 00:0C17 -  -  -  -  			;
  199 00:0C17 -  -  -  -  _CNXLoopBack:			
  200 00:0C17 C3 7D 0D 00 			jp 		StackLoadPosition
  201 00:0C1B -  -  -  -  			;
  202 00:0C1B -  -  -  -  			;		For loop completed
  203 00:0C1B -  -  -  -  			;
  204 00:0C1B -  -  -  -  _CNXLoopOver:
  205 00:0C1B C3 49 0D 00 			jp 		StackCloseFrame
  206 00:0C1F F5 3E 02 32 
              FF FF FF F1 			debug
  207 00:0C27 -  -  -  -  
  208 00:0C27 -  -  -  -  ; ***************************************************************************************
  209 00:0C27 -  -  -  -  ;
  210 00:0C27 -  -  -  -  ;									Changes and Updates
  211 00:0C27 -  -  -  -  ;
  212 00:0C27 -  -  -  -  ; ***************************************************************************************
  213 00:0C27 -  -  -  -  ;
  214 00:0C27 -  -  -  -  ;		Date			Notes
  215 00:0C27 -  -  -  -  ;		==== 			=====
  216 00:0C27 -  -  -  -  ;
  217 00:0C27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 00:0C27 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 00:0C27 -  -  -  -  ; ***************************************************************************************
    2 00:0C27 -  -  -  -  ; ***************************************************************************************
    3 00:0C27 -  -  -  -  ;
    4 00:0C27 -  -  -  -  ;		Name : 		gosub.asm
    5 00:0C27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C27 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0C27 -  -  -  -  ;		Reviewed :	No
    8 00:0C27 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 00:0C27 -  -  -  -  ;
   10 00:0C27 -  -  -  -  ; ***************************************************************************************
   11 00:0C27 -  -  -  -  
   12 00:0C27 -  -  -  -  ; ***************************************************************************************
   13 00:0C27 -  -  -  -  ;
   14 00:0C27 -  -  -  -  ;									Gosub Command
   15 00:0C27 -  -  -  -  ;
   16 00:0C27 -  -  -  -  ; ***************************************************************************************
   17 00:0C27 -  -  -  -  
   18 00:0C27 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 00:0C27 3E 13 -  -  			ld		a,STM_GOSUB
   20 00:0C29 CD 24 0D 00 			call 	StackOpenFrame
   21 00:0C2D CD 5C 0C 00 			call 	GoGetLineNumber
   22 00:0C31 E5 -  -  -  			push 	hl
   23 00:0C32 CD 62 0D 00 			call 	StackSavePosition
   24 00:0C36 E1 -  -  -  			pop 	hl
   25 00:0C37 CD 69 0C 00 			call	TransferToLineHL
   26 00:0C3B C9 -  -  -  			ret
   27 00:0C3C -  -  -  -  
   28 00:0C3C -  -  -  -  ; ***************************************************************************************
   29 00:0C3C -  -  -  -  ;
   30 00:0C3C -  -  -  -  ;									Return command
   31 00:0C3C -  -  -  -  ;
   32 00:0C3C -  -  -  -  ; ***************************************************************************************
   33 00:0C3C -  -  -  -  
   34 00:0C3C -  -  -  -  Command_Return: ;; [return]
   35 00:0C3C 3E 13 -  -  			ld		a,STM_GOSUB
   36 00:0C3E CD 5C 0D 00 			call 	StackCheckFrame
   37 00:0C42 20 09 -  -  			jr 		nz,_ReturnError
   38 00:0C44 CD 7D 0D 00 			call 	StackLoadPosition
   39 00:0C48 CD 49 0D 00 			call 	StackCloseFrame
   40 00:0C4C C9 -  -  -  			ret
   41 00:0C4D -  -  -  -  _ReturnError:
   42 00:0C4D 3E 08 C3 2E 
              04 00 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 00:0C53 -  -  -  -  
   44 00:0C53 -  -  -  -  ; ***************************************************************************************
   45 00:0C53 -  -  -  -  ;
   46 00:0C53 -  -  -  -  ;									Changes and Updates
   47 00:0C53 -  -  -  -  ;
   48 00:0C53 -  -  -  -  ; ***************************************************************************************
   49 00:0C53 -  -  -  -  ;
   50 00:0C53 -  -  -  -  ;		Date			Notes
   51 00:0C53 -  -  -  -  ;		==== 			=====
   52 00:0C53 -  -  -  -  ;
   53 00:0C53 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 00:0C53 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 00:0C53 -  -  -  -  ; ***************************************************************************************
    2 00:0C53 -  -  -  -  ; ***************************************************************************************
    3 00:0C53 -  -  -  -  ;
    4 00:0C53 -  -  -  -  ;		Name : 		goto.asm
    5 00:0C53 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C53 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0C53 -  -  -  -  ;		Reviewed :	No
    8 00:0C53 -  -  -  -  ;		Purpose :	Goto command
    9 00:0C53 -  -  -  -  ;
   10 00:0C53 -  -  -  -  ; ***************************************************************************************
   11 00:0C53 -  -  -  -  
   12 00:0C53 -  -  -  -  ; ***************************************************************************************
   13 00:0C53 -  -  -  -  ;
   14 00:0C53 -  -  -  -  ;									Goto Command
   15 00:0C53 -  -  -  -  ;
   16 00:0C53 -  -  -  -  ; ***************************************************************************************
   17 00:0C53 -  -  -  -  
   18 00:0C53 -  -  -  -  Command_GOTO: ;; [goto]
   19 00:0C53 CD 5C 0C 00 			call 	GoGetLineNumber
   20 00:0C57 CD 69 0C 00 			call	TransferToLineHL
   21 00:0C5B C9 -  -  -  			ret
   22 00:0C5C -  -  -  -  
   23 00:0C5C -  -  -  -  ; ***************************************************************************************
   24 00:0C5C -  -  -  -  ;
   25 00:0C5C -  -  -  -  ;							Get and validate a line number in HL
   26 00:0C5C -  -  -  -  ;
   27 00:0C5C -  -  -  -  ; ***************************************************************************************
   28 00:0C5C -  -  -  -  
   29 00:0C5C -  -  -  -  GoGetLineNumber:
   30 00:0C5C CD 61 06 00 			call 	EvaluateInteger
   31 00:0C60 D9 -  -  -  			exx
   32 00:0C61 7C -  -  -  			ld 		a,h
   33 00:0C62 B5 -  -  -  			or 		l
   34 00:0C63 D9 -  -  -  			exx
   35 00:0C64 C8 -  -  -  			ret 	z
   36 00:0C65 C3 92 04 00 			jp 		BadValue
   37 00:0C69 -  -  -  -  
   38 00:0C69 -  -  -  -  ; ***************************************************************************************
   39 00:0C69 -  -  -  -  ;
   40 00:0C69 -  -  -  -  ;							Transfer to Line Number HL
   41 00:0C69 -  -  -  -  ;
   42 00:0C69 -  -  -  -  ; ***************************************************************************************
   43 00:0C69 -  -  -  -  
   44 00:0C69 -  -  -  -  TransferToLineHL:
   45 00:0C69 EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 00:0C6A 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 00:0C6E DD 2A 38 00 
              00 -  -  -  			ld 		ix,(CodeAddress)
   48 00:0C73 -  -  -  -  _TLSearch:	
   49 00:0C73 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 00:0C75 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 00:0C78 B7 -  -  -  			or 		a 						; if zero
   52 00:0C79 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 00:0C7B 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 00:0C7C -  -  -  -  
   55 00:0C7C 7B -  -  -  			ld 		a,e						; compare line address
   56 00:0C7D DD BE 01 -  			cp 		(ix+1)
   57 00:0C80 20 F1 -  -  			jr 		nz,_TLSearch
   58 00:0C82 7A -  -  -  			ld 		a,d
   59 00:0C83 DD BE 02 -  			cp 		(ix+2)
   60 00:0C86 20 EB -  -  			jr 		nz,_TLSearch
   61 00:0C88 -  -  -  -  			;
   62 00:0C88 DD 22 5C 00 
              00 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 00:0C8D DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 00:0C8F DD 23 -  -  			inc 	ix
   65 00:0C91 DD 23 -  -  			inc 	ix
   66 00:0C93 -  -  -  -  
   67 00:0C93 C9 -  -  -  			ret
   68 00:0C94 -  -  -  -  
   69 00:0C94 -  -  -  -  _TLNotFound:
   70 00:0C94 3E 0A C3 2E 
              04 00 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 00:0C9A -  -  -  -  
   72 00:0C9A -  -  -  -  ; ***************************************************************************************
   73 00:0C9A -  -  -  -  ;
   74 00:0C9A -  -  -  -  ;									Changes and Updates
   75 00:0C9A -  -  -  -  ;
   76 00:0C9A -  -  -  -  ; ***************************************************************************************
   77 00:0C9A -  -  -  -  ;
   78 00:0C9A -  -  -  -  ;		Date			Notes
   79 00:0C9A -  -  -  -  ;		==== 			=====
   80 00:0C9A -  -  -  -  ;
   81 00:0C9A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 00:0C9A -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 00:0C9A -  -  -  -  ; ***************************************************************************************
    2 00:0C9A -  -  -  -  ; ***************************************************************************************
    3 00:0C9A -  -  -  -  ;
    4 00:0C9A -  -  -  -  ;		Name : 		if.asm
    5 00:0C9A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0C9A -  -  -  -  ;		Date : 		8th June 2022
    7 00:0C9A -  -  -  -  ;		Reviewed :	No
    8 00:0C9A -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 00:0C9A -  -  -  -  ;
   10 00:0C9A -  -  -  -  ; ***************************************************************************************
   11 00:0C9A -  -  -  -  
   12 00:0C9A -  -  -  -  ; ***************************************************************************************
   13 00:0C9A -  -  -  -  ;
   14 00:0C9A -  -  -  -  ;									If Command
   15 00:0C9A -  -  -  -  ;
   16 00:0C9A -  -  -  -  ; ***************************************************************************************
   17 00:0C9A -  -  -  -  
   18 00:0C9A -  -  -  -  Command_IF: ;; [if]
   19 00:0C9A CD 61 06 00 		call 	EvaluateInteger 			; work out the test.
   20 00:0C9E CD D5 13 00 		call 	Int32Zero 					; test if zero
   21 00:0CA2 28 1D -  -  		jr 		z,_IFFail
   22 00:0CA4 -  -  -  -  		;
   23 00:0CA4 -  -  -  -  		;	 	Passed
   24 00:0CA4 -  -  -  -  		;
   25 00:0CA4 DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 00:0CA7 DD 23 -  -  		inc 	ix
   27 00:0CA9 FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 00:0CAB CA 53 0C 00 		jp 		z,Command_GOTO
   29 00:0CAF FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 00:0CB1 C2 98 04 00 		jp 		nz,SyntaxError
   31 00:0CB5 DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 00:0CB8 E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 00:0CBA FE 40 -  -  		cp 		$40
   34 00:0CBC CA 53 0C 00 		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 00:0CC0 C9 -  -  -  		ret 								; otherwise carry on.
   36 00:0CC1 -  -  -  -  		;
   37 00:0CC1 -  -  -  -  		;		Failed.
   38 00:0CC1 -  -  -  -  		;
   39 00:0CC1 -  -  -  -  _IFFail:
   40 00:0CC1 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 00:0CC3 0E B1 -  -  		ld 		c,KWD_ELSE
   42 00:0CC5 CD FE 0C 00 		call 	SearchForwardTokens 		; searching forward.
   43 00:0CC9 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 00:0CCB CA B2 01 00 		jp 		z,EOLHandler 				; do the next line code.
   45 00:0CCF C9 -  -  -  		ret 								; otherwise carry on.
   46 00:0CD0 -  -  -  -  
   47 00:0CD0 -  -  -  -  ; ***************************************************************************************
   48 00:0CD0 -  -  -  -  ;
   49 00:0CD0 -  -  -  -  ;						Else command => Progress to next line
   50 00:0CD0 -  -  -  -  ;
   51 00:0CD0 -  -  -  -  ; ***************************************************************************************
   52 00:0CD0 -  -  -  -  
   53 00:0CD0 -  -  -  -  Command_Else: ;; [else]
   54 00:0CD0 C3 B2 01 00 		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 00:0CD4 -  -  -  -  
   56 00:0CD4 -  -  -  -  ; ***************************************************************************************
   57 00:0CD4 -  -  -  -  ;
   58 00:0CD4 -  -  -  -  ;									Changes and Updates
   59 00:0CD4 -  -  -  -  ;
   60 00:0CD4 -  -  -  -  ; ***************************************************************************************
   61 00:0CD4 -  -  -  -  ;
   62 00:0CD4 -  -  -  -  ;		Date			Notes
   63 00:0CD4 -  -  -  -  ;		==== 			=====
   64 00:0CD4 -  -  -  -  ;
   65 00:0CD4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 00:0CD4 -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 00:0CD4 -  -  -  -  ; ***************************************************************************************
    2 00:0CD4 -  -  -  -  ; ***************************************************************************************
    3 00:0CD4 -  -  -  -  ;
    4 00:0CD4 -  -  -  -  ;		Name : 		repeat.asm
    5 00:0CD4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CD4 -  -  -  -  ;		Date : 		7th June 2022
    7 00:0CD4 -  -  -  -  ;		Reviewed :	No
    8 00:0CD4 -  -  -  -  ;		Purpose :	Repeat/Until command
    9 00:0CD4 -  -  -  -  ;
   10 00:0CD4 -  -  -  -  ; ***************************************************************************************
   11 00:0CD4 -  -  -  -  
   12 00:0CD4 -  -  -  -  ; ***************************************************************************************
   13 00:0CD4 -  -  -  -  ;
   14 00:0CD4 -  -  -  -  ;									Repeat Command
   15 00:0CD4 -  -  -  -  ;
   16 00:0CD4 -  -  -  -  ; ***************************************************************************************
   17 00:0CD4 -  -  -  -  
   18 00:0CD4 -  -  -  -  Command_REPEAT: ;; [repeat]
   19 00:0CD4 3E 23 -  -  			ld		a,STM_REPEAT
   20 00:0CD6 CD 24 0D 00 			call 	StackOpenFrame
   21 00:0CDA CD 62 0D 00 			call 	StackSavePosition
   22 00:0CDE C9 -  -  -  			ret
   23 00:0CDF -  -  -  -  
   24 00:0CDF -  -  -  -  ; ***************************************************************************************
   25 00:0CDF -  -  -  -  ;
   26 00:0CDF -  -  -  -  ;									Until command
   27 00:0CDF -  -  -  -  ;
   28 00:0CDF -  -  -  -  ; ***************************************************************************************
   29 00:0CDF -  -  -  -  
   30 00:0CDF -  -  -  -  Command_Until: ;; [until]
   31 00:0CDF 3E 23 -  -  			ld		a,STM_REPEAT
   32 00:0CE1 CD 5C 0D 00 			call 	StackCheckFrame
   33 00:0CE5 20 11 -  -  			jr 		nz,_UntilError
   34 00:0CE7 CD 61 06 00 			call	EvaluateInteger 		; until what
   35 00:0CEB CD D5 13 00 			call 	Int32Zero 				; check zero
   36 00:0CEF CA 7D 0D 00 			jp 		z,StackLoadPosition 	; if zero loop back
   37 00:0CF3 CD 49 0D 00 			call 	StackCloseFrame 		; otherwise end frame.
   38 00:0CF7 C9 -  -  -  			ret
   39 00:0CF8 -  -  -  -  _UntilError:
   40 00:0CF8 3E 15 C3 2E 
              04 00 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 00:0CFE -  -  -  -  
   42 00:0CFE -  -  -  -  ; ***************************************************************************************
   43 00:0CFE -  -  -  -  ;
   44 00:0CFE -  -  -  -  ;									Changes and Updates
   45 00:0CFE -  -  -  -  ;
   46 00:0CFE -  -  -  -  ; ***************************************************************************************
   47 00:0CFE -  -  -  -  ;
   48 00:0CFE -  -  -  -  ;		Date			Notes
   49 00:0CFE -  -  -  -  ;		==== 			=====
   50 00:0CFE -  -  -  -  ;
   51 00:0CFE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 00:0CFE -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 00:0CFE -  -  -  -  ; ***************************************************************************************
    2 00:0CFE -  -  -  -  ; ***************************************************************************************
    3 00:0CFE -  -  -  -  ;
    4 00:0CFE -  -  -  -  ;		Name : 		search.asm
    5 00:0CFE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0CFE -  -  -  -  ;		Date : 		8th June 2022
    7 00:0CFE -  -  -  -  ;		Reviewed :	No
    8 00:0CFE -  -  -  -  ;		Purpose :	Search forward for token
    9 00:0CFE -  -  -  -  ;
   10 00:0CFE -  -  -  -  ; ***************************************************************************************
   11 00:0CFE -  -  -  -  
   12 00:0CFE -  -  -  -  ; ***************************************************************************************
   13 00:0CFE -  -  -  -  ;
   14 00:0CFE -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 00:0CFE -  -  -  -  ; 		and IX points to next byte.
   16 00:0CFE -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 00:0CFE -  -  -  -  ;
   18 00:0CFE -  -  -  -  ; ***************************************************************************************
   19 00:0CFE -  -  -  -  
   20 00:0CFE -  -  -  -  SearchForwardTokens:
   21 00:0CFE DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 00:0D01 DD 23 -  -  		inc 	ix
   23 00:0D03 B8 -  -  -  		cp 		b 							; exit if either found.
   24 00:0D04 C8 -  -  -  		ret 	z
   25 00:0D05 B9 -  -  -  		cp 		c
   26 00:0D06 C8 -  -  -  		ret 	z
   27 00:0D07 -  -  -  -  		;
   28 00:0D07 FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 00:0D09 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 00:0D0B -  -  -  -  
   31 00:0D0B 11 00 00 00 		ld 		de,0 						; put length into DE
   32 00:0D0F DD 5E 00 -  		ld 		e,(ix+0)
   33 00:0D12 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 00:0D13 13 -  -  -  		inc 	de
   35 00:0D14 DD 19 -  -  		add 	ix,de 						; jump forward
   36 00:0D16 18 E6 -  -  		jr 		SearchForwardTokens
   37 00:0D18 -  -  -  -  
   38 00:0D18 -  -  -  -  ; ***************************************************************************************
   39 00:0D18 -  -  -  -  ;
   40 00:0D18 -  -  -  -  ;									Changes and Updates
   41 00:0D18 -  -  -  -  ;
   42 00:0D18 -  -  -  -  ; ***************************************************************************************
   43 00:0D18 -  -  -  -  ;
   44 00:0D18 -  -  -  -  ;		Date			Notes
   45 00:0D18 -  -  -  -  ;		==== 			=====
   46 00:0D18 -  -  -  -  ;
   47 00:0D18 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 00:0D18 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 00:0D18 -  -  -  -  ; ***************************************************************************************
    2 00:0D18 -  -  -  -  ; ***************************************************************************************
    3 00:0D18 -  -  -  -  ;
    4 00:0D18 -  -  -  -  ;		Name : 		stack.asm
    5 00:0D18 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D18 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0D18 -  -  -  -  ;		Reviewed :	No
    8 00:0D18 -  -  -  -  ;		Purpose :	Rem / ' command
    9 00:0D18 -  -  -  -  ;
   10 00:0D18 -  -  -  -  ; ***************************************************************************************
   11 00:0D18 -  -  -  -  ; ***************************************************************************************
   12 00:0D18 -  -  -  -  ;
   13 00:0D18 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 00:0D18 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 00:0D18 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 00:0D18 -  -  -  -  ;
   17 00:0D18 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 00:0D18 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 00:0D18 -  -  -  -  ;
   20 00:0D18 -  -  -  -  ; ***************************************************************************************
   21 00:0D18 -  -  -  -  ;
   22 00:0D18 -  -  -  -  ;								Clear the stack
   23 00:0D18 -  -  -  -  ;
   24 00:0D18 -  -  -  -  ; ***************************************************************************************
   25 00:0D18 -  -  -  -  
   26 00:0D18 -  -  -  -  StackReset:
   27 00:0D18 2A 3C 00 00 		ld 		hl,(LanguageStack) 			; top of language stack
   28 00:0D1C 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 00:0D1D 22 58 00 00 		ld 		(BasicSP),hl 				; write out current position
   30 00:0D21 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 00:0D23 C9 -  -  -  		ret
   32 00:0D24 -  -  -  -  
   33 00:0D24 -  -  -  -  ; ***************************************************************************************
   34 00:0D24 -  -  -  -  ;
   35 00:0D24 -  -  -  -  ;								Open a stack frame type A
   36 00:0D24 -  -  -  -  ;
   37 00:0D24 -  -  -  -  ; ***************************************************************************************
   38 00:0D24 -  -  -  -  
   39 00:0D24 -  -  -  -  StackOpenFrame:
   40 00:0D24 F5 -  -  -  		push 	af 							; save frame type
   41 00:0D25 E6 0F -  -  		and 	$0F 						; get size of frame
   42 00:0D27 87 -  -  -  		add 	a,a 						; double it
   43 00:0D28 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 00:0D2C 5F -  -  -  		ld 		e,a
   45 00:0D2D 2A 58 00 00 		ld 		hl,(BasicSP) 				; get stack pointer
   46 00:0D31 AF -  -  -  		xor 	a
   47 00:0D32 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 00:0D34 22 58 00 00 		ld 		(BasicSP),hl
   49 00:0D38 F1 -  -  -  		pop 	af 							; copy out frame type
   50 00:0D39 77 -  -  -  		ld 		(hl),a
   51 00:0D3A ED 5B 40 00 
              00 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 00:0D3F AF -  -  -  		xor 	a
   53 00:0D40 ED 52 -  -  		sbc 	hl,de
   54 00:0D42 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 00:0D43 3E 16 C3 2E 
              04 00 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 00:0D49 -  -  -  -  
   57 00:0D49 -  -  -  -  ; ***************************************************************************************
   58 00:0D49 -  -  -  -  ;
   59 00:0D49 -  -  -  -  ;								Close Stack Frame
   60 00:0D49 -  -  -  -  ;
   61 00:0D49 -  -  -  -  ; ***************************************************************************************
   62 00:0D49 -  -  -  -  
   63 00:0D49 -  -  -  -  StackCloseFrame:
   64 00:0D49 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   65 00:0D4D 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 00:0D4E E6 0F -  -  		and 	$0F 						; put into UDE
   67 00:0D50 87 -  -  -  		add 	a,a 						; double it
   68 00:0D51 11 00 00 00 		ld 		de,$000000
   69 00:0D55 5F -  -  -  		ld 		e,a
   70 00:0D56 19 -  -  -  		add 	hl,de 						; close it
   71 00:0D57 22 58 00 00 		ld 		(BasicSP),hl 				; write it back
   72 00:0D5B C9 -  -  -  		ret
   73 00:0D5C -  -  -  -  
   74 00:0D5C -  -  -  -  ; ***************************************************************************************
   75 00:0D5C -  -  -  -  ;
   76 00:0D5C -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 00:0D5C -  -  -  -  ;
   78 00:0D5C -  -  -  -  ; ***************************************************************************************
   79 00:0D5C -  -  -  -  
   80 00:0D5C -  -  -  -  StackCheckFrame:
   81 00:0D5C 2A 58 00 00 		ld 		hl,(BasicSP)				; get stack frame
   82 00:0D60 BE -  -  -  		cp 		(hl) 						; get stack marker
   83 00:0D61 C9 -  -  -  		ret
   84 00:0D62 -  -  -  -  
   85 00:0D62 -  -  -  -  ; ***************************************************************************************
   86 00:0D62 -  -  -  -  ;
   87 00:0D62 -  -  -  -  ;								Save position on stack
   88 00:0D62 -  -  -  -  ;
   89 00:0D62 -  -  -  -  ; ***************************************************************************************
   90 00:0D62 -  -  -  -  
   91 00:0D62 -  -  -  -  StackSavePosition:
   92 00:0D62 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 00:0D66 23 -  -  -  		inc 	hl
   94 00:0D67 ED 5B 5C 00 
              00 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 00:0D6C ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 00:0D72 -  -  -  -  		;
   97 00:0D72 E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 00:0D73 DD E5 -  -  		push 	ix 							; HL = current position
   99 00:0D75 E1 -  -  -  		pop 	hl
  100 00:0D76 AF -  -  -  		xor 	a 							; calculate offset
  101 00:0D77 ED 52 -  -  		sbc 	hl,de
  102 00:0D79 7D -  -  -  		ld 		a,l 						; into A
  103 00:0D7A E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 00:0D7B 77 -  -  -  		ld 		(hl),a
  105 00:0D7C C9 -  -  -  		ret
  106 00:0D7D -  -  -  -  
  107 00:0D7D -  -  -  -  ; ***************************************************************************************
  108 00:0D7D -  -  -  -  ;
  109 00:0D7D -  -  -  -  ;								Load position off stack
  110 00:0D7D -  -  -  -  ;
  111 00:0D7D -  -  -  -  ; ***************************************************************************************
  112 00:0D7D -  -  -  -  
  113 00:0D7D -  -  -  -  StackLoadPosition:
  114 00:0D7D 2A 58 00 00 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 00:0D81 23 -  -  -  		inc 	hl
  116 00:0D82 E5 -  -  -  		push 	hl 							; save on stack
  117 00:0D83 ED 27 -  -  		ld_ind_hl 							; get start of line
  118 00:0D85 22 5C 00 00 		ld 		(CurrentLineStart),hl 		; write it back
  119 00:0D89 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 00:0D8A 13 -  -  -  		inc 	de
  121 00:0D8B 13 -  -  -  		inc 	de
  122 00:0D8C 13 -  -  -  		inc 	de
  123 00:0D8D 13 -  -  -  		inc 	de
  124 00:0D8E 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 00:0D8F 11 00 00 00 		ld 		de,$000000
  126 00:0D93 5F -  -  -  		ld 		e,a
  127 00:0D94 19 -  -  -  		add 	hl,de 						; add to start => position
  128 00:0D95 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 00:0D96 DD E1 -  -  		pop 	ix
  130 00:0D98 C9 -  -  -  		ret
  131 00:0D99 -  -  -  -  
  132 00:0D99 -  -  -  -  ; ***************************************************************************************
  133 00:0D99 -  -  -  -  ;
  134 00:0D99 -  -  -  -  ;									Changes and Updates
  135 00:0D99 -  -  -  -  ;
  136 00:0D99 -  -  -  -  ; ***************************************************************************************
  137 00:0D99 -  -  -  -  ;
  138 00:0D99 -  -  -  -  ;		Date			Notes
  139 00:0D99 -  -  -  -  ;		==== 			=====
  140 00:0D99 -  -  -  -  ;
  141 00:0D99 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 00:0D99 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 00:0D99 -  -  -  -  ; ***************************************************************************************
    2 00:0D99 -  -  -  -  ; ***************************************************************************************
    3 00:0D99 -  -  -  -  ;
    4 00:0D99 -  -  -  -  ;		Name : 		utility.asm
    5 00:0D99 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0D99 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0D99 -  -  -  -  ;		Reviewed :	No
    8 00:0D99 -  -  -  -  ;		Purpose :	Utility routines
    9 00:0D99 -  -  -  -  ;
   10 00:0D99 -  -  -  -  ; ***************************************************************************************
   11 00:0D99 -  -  -  -  ; ***************************************************************************************
   12 00:0D99 -  -  -  -  
   13 00:0D99 -  -  -  -  ; ***************************************************************************************
   14 00:0D99 -  -  -  -  ;
   15 00:0D99 -  -  -  -  ;							Print ASCII string at HL
   16 00:0D99 -  -  -  -  ;
   17 00:0D99 -  -  -  -  ; ***************************************************************************************
   18 00:0D99 -  -  -  -  
   19 00:0D99 -  -  -  -  PrintStringAtHL:
   20 00:0D99 7E -  -  -  		ld 		a,(hl)
   21 00:0D9A FE 20 -  -  		cp 		$20		
   22 00:0D9C D8 -  -  -  		ret 	c
   23 00:0D9D CD 6C 14 00 		call 	SYSPrintChar
   24 00:0DA1 23 -  -  -  		inc 	hl
   25 00:0DA2 18 F5 -  -  		jr 		PrintStringAtHL
   26 00:0DA4 -  -  -  -  
   27 00:0DA4 -  -  -  -  ; ***************************************************************************************
   28 00:0DA4 -  -  -  -  ;
   29 00:0DA4 -  -  -  -  ;									Changes and Updates
   30 00:0DA4 -  -  -  -  ;
   31 00:0DA4 -  -  -  -  ; ***************************************************************************************
   32 00:0DA4 -  -  -  -  ;
   33 00:0DA4 -  -  -  -  ;		Date			Notes
   34 00:0DA4 -  -  -  -  ;		==== 			=====
   35 00:0DA4 -  -  -  -  ;
   36 00:0DA4 -  -  -  -  ; ***************************************************************************************
   37 00:0DA4 -  -  -  -  		
Listing for file "_build.asm"
   67 00:0DA4 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 00:0DA4 -  -  -  -  ; ***************************************************************************************
    2 00:0DA4 -  -  -  -  ; ***************************************************************************************
    3 00:0DA4 -  -  -  -  ;
    4 00:0DA4 -  -  -  -  ;		Name : 		create.asm
    5 00:0DA4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DA4 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0DA4 -  -  -  -  ;		Reviewed :	No
    8 00:0DA4 -  -  -  -  ;		Purpose :	Create a variable.
    9 00:0DA4 -  -  -  -  ;
   10 00:0DA4 -  -  -  -  ; ***************************************************************************************
   11 00:0DA4 -  -  -  -  ; ***************************************************************************************
   12 00:0DA4 -  -  -  -  
   13 00:0DA4 -  -  -  -  ; ***************************************************************************************
   14 00:0DA4 -  -  -  -  ;
   15 00:0DA4 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 00:0DA4 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 00:0DA4 -  -  -  -  ;
   18 00:0DA4 -  -  -  -  ; ***************************************************************************************
   19 00:0DA4 -  -  -  -  
   20 00:0DA4 -  -  -  -  VariableCreate:		
   21 00:0DA4 -  -  -  -  		;
   22 00:0DA4 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 00:0DA4 -  -  -  -  		;
   24 00:0DA4 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 00:0DA8 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 00:0DA9 E5 -  -  -  		push 	hl 							; save count.
   27 00:0DAA CD A0 0A 00 		call 	AllocateBytes 				; claim that many bytes
   28 00:0DAE C1 -  -  -  		pop 	bc 							; restore count to BC
   29 00:0DAF -  -  -  -  		;
   30 00:0DAF -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 00:0DAF -  -  -  -  		;
   32 00:0DAF E5 -  -  -  		push	hl 							; save start address on stack
   33 00:0DB0 -  -  -  -  _VCClear:
   34 00:0DB0 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 00:0DB2 23 -  -  -  		inc 	hl
   36 00:0DB3 0B -  -  -  		dec 	bc
   37 00:0DB4 78 -  -  -  		ld		a,b
   38 00:0DB5 B1 -  -  -  		or 		c
   39 00:0DB6 20 F8 -  -  		jr 		nz,_VCClear
   40 00:0DB8 E1 -  -  -  		pop 	hl							; restore start address
   41 00:0DB9 -  -  -  -  		;
   42 00:0DB9 -  -  -  -  		;		Now start to create the data.
   43 00:0DB9 -  -  -  -  		;
   44 00:0DB9 E5 -  -  -  		push 	hl 							; save start
   45 00:0DBA -  -  -  -  		;
   46 00:0DBA -  -  -  -  		;		Write hash to +0
   47 00:0DBA -  -  -  -  		;
   48 00:0DBA 3A 8E 00 00 		ld 		a,(VarHash) 				; write Hash to +0
   49 00:0DBE 77 -  -  -  		ld 		(hl),a
   50 00:0DBF 23 -  -  -  		inc 	hl
   51 00:0DC0 -  -  -  -  		;
   52 00:0DC0 -  -  -  -  		;		Write list head to +1
   53 00:0DC0 -  -  -  -  		;
   54 00:0DC0 E5 -  -  -  		push 	hl 							; save write position
   55 00:0DC1 2A 90 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 00:0DC5 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 00:0DC7 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 00:0DC8 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 00:0DC9 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 00:0DCF -  -  -  -  		;
   61 00:0DCF -  -  -  -  		;		Write variable name to +5
   62 00:0DCF -  -  -  -  		;
   63 00:0DCF ED 5B 8A 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 00:0DD4 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 00:0DDA -  -  -  -  		;
   66 00:0DDA D1 -  -  -  		pop 	de 							; get the start address back
   67 00:0DDB 2A 90 00 00 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 00:0DDF ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 00:0DE5 -  -  -  -  		;
   70 00:0DE5 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 00:0DE6 C9 -  -  -  		ret
   72 00:0DE7 -  -  -  -  
   73 00:0DE7 -  -  -  -  ; ***************************************************************************************
   74 00:0DE7 -  -  -  -  ;
   75 00:0DE7 -  -  -  -  ;									Changes and Updates
   76 00:0DE7 -  -  -  -  ;
   77 00:0DE7 -  -  -  -  ; ***************************************************************************************
   78 00:0DE7 -  -  -  -  ;
   79 00:0DE7 -  -  -  -  ;		Date			Notes
   80 00:0DE7 -  -  -  -  ;		==== 			=====
   81 00:0DE7 -  -  -  -  ;
   82 00:0DE7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 00:0DE7 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 00:0DE7 -  -  -  -  ; ***************************************************************************************
    2 00:0DE7 -  -  -  -  ; ***************************************************************************************
    3 00:0DE7 -  -  -  -  ;
    4 00:0DE7 -  -  -  -  ;		Name : 		find.asm
    5 00:0DE7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0DE7 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0DE7 -  -  -  -  ;		Reviewed :	No
    8 00:0DE7 -  -  -  -  ;		Purpose :	Find a variable.
    9 00:0DE7 -  -  -  -  ;
   10 00:0DE7 -  -  -  -  ; ***************************************************************************************
   11 00:0DE7 -  -  -  -  ; ***************************************************************************************
   12 00:0DE7 -  -  -  -  
   13 00:0DE7 -  -  -  -  ; ***************************************************************************************
   14 00:0DE7 -  -  -  -  ;
   15 00:0DE7 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 00:0DE7 -  -  -  -  ; 		variable information at (IX)
   17 00:0DE7 -  -  -  -  ;
   18 00:0DE7 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 00:0DE7 -  -  -  -  ;		Don't autocreate arrays.
   20 00:0DE7 -  -  -  -  ;
   21 00:0DE7 -  -  -  -  ; ***************************************************************************************
   22 00:0DE7 -  -  -  -  
   23 00:0DE7 -  -  -  -  FindVariable:
   24 00:0DE7 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 00:0DEA FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 00:0DEC D2 98 04 00 		jp 		nc,SyntaxError 		
   27 00:0DF0 -  -  -  -  
   28 00:0DF0 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 00:0DF3 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 00:0DF5 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 00:0DF7 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 00:0DF9 28 13 -  -  		jr 		z,_FVNotSimple
   33 00:0DFB -  -  -  -  		;
   34 00:0DFB -  -  -  -  		; 		Code for A-Z fixed integers.
   35 00:0DFB -  -  -  -  		;
   36 00:0DFB 2A 44 00 00 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 00:0DFF DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 00:0E02 87 -  -  -  		add 	a,a 						; x4
   39 00:0E03 87 -  -  -  		add 	a,a
   40 00:0E04 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 00:0E05 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 00:0E06 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 00:0E08 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 00:0E0A DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 00:0E0C AF -  -  -  		xor 	a 							; clear carry and return
   46 00:0E0D C9 -  -  -  		ret
   47 00:0E0E -  -  -  -  		;
   48 00:0E0E -  -  -  -  		;		Not a standard simple variable.
   49 00:0E0E -  -  -  -  		;
   50 00:0E0E -  -  -  -  _FVNotSimple:
   51 00:0E0E CD 74 0E 00 		call 	VariableInformation 		; get information about the variable.
   52 00:0E12 CD B0 0E 00 		call 	VariableSearchList 			; search the linked list
   53 00:0E16 38 14 -  -  		jr 		c,_FVNotFound  				
   54 00:0E18 -  -  -  -  		;
   55 00:0E18 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 00:0E18 -  -  -  -  		;
   57 00:0E18 -  -  -  -  _FVExitReference:		
   58 00:0E18 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 00:0E1C 19 -  -  -  		add 	hl,de 
   60 00:0E1D -  -  -  -  		;
   61 00:0E1D -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 00:0E1D -  -  -  -  		;
   63 00:0E1D DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 00:0E20 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 00:0E22 CC 4B 0E 00 		call 	z,ArrayLookup 				; array access required.
   66 00:0E26 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 00:0E28 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 00:0E2A AF -  -  -  		xor 	a 							; clear carry and return
   69 00:0E2B C9 -  -  -  		ret
   70 00:0E2C -  -  -  -  		;
   71 00:0E2C -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 00:0E2C -  -  -  -  		;
   73 00:0E2C -  -  -  -  _FVNotFound:		
   74 00:0E2C 3A 80 00 00 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 00:0E30 B7 -  -  -  		or 		a
   76 00:0E31 28 11 -  -  		jr 		z,_FVFail
   77 00:0E33 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 00:0E36 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 00:0E38 28 0A -  -  		jr 		z,_FVFail
   80 00:0E3A 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 00:0E3E CD A4 0D 00 		call 	VariableCreate 				; create a new variable.
   82 00:0E42 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 00:0E44 -  -  -  -  
   84 00:0E44 -  -  -  -  _FVFail:
   85 00:0E44 DD 2A 8A 00 
              00 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 00:0E49 37 -  -  -  		scf
   87 00:0E4A C9 -  -  -  		ret
   88 00:0E4B -  -  -  -  
   89 00:0E4B -  -  -  -  ; ***************************************************************************************
   90 00:0E4B -  -  -  -  ;
   91 00:0E4B -  -  -  -  ;									 Array lookup
   92 00:0E4B -  -  -  -  ;
   93 00:0E4B -  -  -  -  ; ***************************************************************************************
   94 00:0E4B -  -  -  -  
   95 00:0E4B -  -  -  -  ArrayLookup:
   96 00:0E4B E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 00:0E4C CD 3B 06 00 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 00:0E50 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 00:0E51 7C -  -  -  		ld 		a,h
  100 00:0E52 B5 -  -  -  		or 		l
  101 00:0E53 D9 -  -  -  		exx
  102 00:0E54 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 00:0E56 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 00:0E5A 54 -  -  -  		ld 		d,h
  105 00:0E5B 5D -  -  -  		ld 		e,l
  106 00:0E5C E1 -  -  -  		pop 	hl 							; get the array base back
  107 00:0E5D E5 -  -  -  		push 	hl
  108 00:0E5E ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 00:0E60 AF -  -  -  		xor  	a							; subtract maximum from index
  110 00:0E61 ED 52 -  -  		sbc 	hl,de
  111 00:0E63 DA 6E 0E 00 		jp 		c,_ALBadValue 				; if max < index then error
  112 00:0E67 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 00:0E68 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 00:0E69 29 -  -  -  		add 	hl,hl 						; x 4
  115 00:0E6A 29 -  -  -  		add 	hl,hl
  116 00:0E6B D1 -  -  -  		pop 	de 							; get array base back
  117 00:0E6C 19 -  -  -  		add 	hl,de 						; add offset to it
  118 00:0E6D C9 -  -  -  		ret
  119 00:0E6E -  -  -  -  
  120 00:0E6E -  -  -  -  _ALBadValue:
  121 00:0E6E 3E 09 C3 2E 
              04 00 -  -  		ERR_INDEX
  122 00:0E74 -  -  -  -  		
  123 00:0E74 -  -  -  -  ; ***************************************************************************************
  124 00:0E74 -  -  -  -  ;
  125 00:0E74 -  -  -  -  ;									Changes and Updates
  126 00:0E74 -  -  -  -  ;
  127 00:0E74 -  -  -  -  ; ***************************************************************************************
  128 00:0E74 -  -  -  -  ;
  129 00:0E74 -  -  -  -  ;		Date			Notes
  130 00:0E74 -  -  -  -  ;		==== 			=====
  131 00:0E74 -  -  -  -  ;
  132 00:0E74 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 00:0E74 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 00:0E74 -  -  -  -  ; ***************************************************************************************
    2 00:0E74 -  -  -  -  ; ***************************************************************************************
    3 00:0E74 -  -  -  -  ;
    4 00:0E74 -  -  -  -  ;		Name : 		info.asm
    5 00:0E74 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0E74 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0E74 -  -  -  -  ;		Reviewed :	No
    8 00:0E74 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 00:0E74 -  -  -  -  ;
   10 00:0E74 -  -  -  -  ; ***************************************************************************************
   11 00:0E74 -  -  -  -  ; ***************************************************************************************
   12 00:0E74 -  -  -  -  
   13 00:0E74 -  -  -  -  ; ***************************************************************************************
   14 00:0E74 -  -  -  -  ;
   15 00:0E74 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 00:0E74 -  -  -  -  ; 		after the identifier.
   17 00:0E74 -  -  -  -  ;
   18 00:0E74 -  -  -  -  ; ***************************************************************************************
   19 00:0E74 -  -  -  -  
   20 00:0E74 -  -  -  -  VariableInformation:
   21 00:0E74 DD 22 8A 00 
              00 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 00:0E79 -  -  -  -  		;
   23 00:0E79 -  -  -  -  		; 		Calculate hash, find end.
   24 00:0E79 -  -  -  -  		;
   25 00:0E79 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 00:0E7B -  -  -  -  _VICalculateHash:
   27 00:0E7B DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 00:0E7E FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 00:0E80 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 00:0E82 80 -  -  -  		add 	a,b 						; add to hash
   31 00:0E83 07 -  -  -  		rlca
   32 00:0E84 07 -  -  -  		rlca
   33 00:0E85 80 -  -  -  		add 	a,b
   34 00:0E86 47 -  -  -  		ld 		b,a 						; update hash
   35 00:0E87 DD 23 -  -  		inc 	ix 							; next character
   36 00:0E89 18 F0 -  -  		jr 		_VICalculateHash				
   37 00:0E8B -  -  -  -  		;
   38 00:0E8B -  -  -  -  _VIHashDone:
   39 00:0E8B 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 00:0E8C -  -  -  -  		;
   41 00:0E8C -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 00:0E8C -  -  -  -  		;
   43 00:0E8C 32 8E 00 00 		ld 		(VarHash),a
   44 00:0E90 -  -  -  -  		;
   45 00:0E90 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 00:0E90 -  -  -  -  		;		
   47 00:0E90 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 00:0E92 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 00:0E96 6F -  -  -  		ld 		l,a
   50 00:0E97 29 -  -  -  		add 	hl,hl 						; x 4
   51 00:0E98 29 -  -  -  		add 	hl,hl
   52 00:0E99 -  -  -  -  		;
   53 00:0E99 ED 5B 48 00 
              00 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 00:0E9E 19 -  -  -  		add 	hl,de
   55 00:0E9F -  -  -  -  		;
   56 00:0E9F DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 00:0EA2 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 00:0EA4 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 00:0EA6 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 00:0EAA 19 -  -  -  		add 	hl,de 						; for hash tables
   61 00:0EAB -  -  -  -  _VINotArray:
   62 00:0EAB 22 90 00 00 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 00:0EAF C9 -  -  -  		ret
   64 00:0EB0 -  -  -  -  
   65 00:0EB0 -  -  -  -  ; ***************************************************************************************
   66 00:0EB0 -  -  -  -  ;
   67 00:0EB0 -  -  -  -  ;									Changes and Updates
   68 00:0EB0 -  -  -  -  ;
   69 00:0EB0 -  -  -  -  ; ***************************************************************************************
   70 00:0EB0 -  -  -  -  ;
   71 00:0EB0 -  -  -  -  ;		Date			Notes
   72 00:0EB0 -  -  -  -  ;		==== 			=====
   73 00:0EB0 -  -  -  -  ;
   74 00:0EB0 -  -  -  -  ; ***************************************************************************************
   75 00:0EB0 -  -  -  -  
Listing for file "_build.asm"
   70 00:0EB0 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 00:0EB0 -  -  -  -  ; ***************************************************************************************
    2 00:0EB0 -  -  -  -  ; ***************************************************************************************
    3 00:0EB0 -  -  -  -  ;
    4 00:0EB0 -  -  -  -  ;		Name : 		search.asm
    5 00:0EB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0EB0 -  -  -  -  ;		Date : 		4th June 2022
    7 00:0EB0 -  -  -  -  ;		Reviewed :	No
    8 00:0EB0 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 00:0EB0 -  -  -  -  ;
   10 00:0EB0 -  -  -  -  ; ***************************************************************************************
   11 00:0EB0 -  -  -  -  ; ***************************************************************************************
   12 00:0EB0 -  -  -  -  
   13 00:0EB0 -  -  -  -  ; ***************************************************************************************
   14 00:0EB0 -  -  -  -  ;
   15 00:0EB0 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 00:0EB0 -  -  -  -  ;		CS if failed.
   17 00:0EB0 -  -  -  -  ;
   18 00:0EB0 -  -  -  -  ; ***************************************************************************************
   19 00:0EB0 -  -  -  -  
   20 00:0EB0 -  -  -  -  VariableSearchList:
   21 00:0EB0 2A 90 00 00 		ld 		hl,(VarHashListPtr)			; first link.
   22 00:0EB4 -  -  -  -  		;
   23 00:0EB4 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 00:0EB4 -  -  -  -  		;		the address of the hash record
   25 00:0EB4 -  -  -  -  		;
   26 00:0EB4 -  -  -  -  _VSLLoop:
   27 00:0EB4 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 00:0EB6 -  -  -  -  		;
   29 00:0EB6 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 00:0EB7 AF -  -  -  		xor 	a
   31 00:0EB8 ED 6A -  -  		adc 	hl,hl
   32 00:0EBA E1 -  -  -  		pop 	hl
   33 00:0EBB 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 00:0EBD 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 00:0EBE C8 -  -  -  		ret 	z
   36 00:0EBF -  -  -  -  _VSLRecord:
   37 00:0EBF -  -  -  -  		;
   38 00:0EBF -  -  -  -  		;		Check if they actually match. First do the hash.
   39 00:0EBF -  -  -  -  		;
   40 00:0EBF 3A 8E 00 00 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 00:0EC3 BE -  -  -  		cp 		(hl) 						; check against HL
   42 00:0EC4 23 -  -  -  		inc 	hl 							; points to link back
   43 00:0EC5 20 ED -  -  		jr 		nz,_VSLLoop
   44 00:0EC7 -  -  -  -  		;
   45 00:0EC7 -  -  -  -  		;		Now check the name
   46 00:0EC7 -  -  -  -  		;
   47 00:0EC7 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 00:0EC8 23 -  -  -  		inc 	hl 							; advance to the name address
   49 00:0EC9 23 -  -  -  		inc 	hl
   50 00:0ECA 23 -  -  -  		inc 	hl
   51 00:0ECB 23 -  -  -  		inc 	hl
   52 00:0ECC ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 00:0ECE ED 5B 8A 00 
              00 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 00:0ED3 -  -  -  -  		;
   55 00:0ED3 -  -  -  -  		;		Check individual characters
   56 00:0ED3 -  -  -  -  		;
   57 00:0ED3 -  -  -  -  _VSLCharacter:
   58 00:0ED3 1A -  -  -  		ld 		a,(de) 						; get next character
   59 00:0ED4 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 00:0ED6 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 00:0ED8 BE -  -  -  		cp 		(hl) 						; compare them
   62 00:0ED9 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 00:0EDA 13 -  -  -  		inc 	de
   64 00:0EDB 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 00:0EDD -  -  -  -  		;
   66 00:0EDD -  -  -  -  _VSLFailed:
   67 00:0EDD E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 00:0EDE 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 00:0EE0 -  -  -  -  		;
   70 00:0EE0 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 00:0EE0 -  -  -  -  		;		
   72 00:0EE0 -  -  -  -  _VSLEndIdentifier:
   73 00:0EE0 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 00:0EE1 FE 26 -  -  		cp 		IDENTIFIER_END
   75 00:0EE3 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 00:0EE5 -  -  -  -  		;
   77 00:0EE5 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 00:0EE6 2B -  -  -  		dec 	hl 							; now start of record
   79 00:0EE7 AF -  -  -  		xor 	a 							; clear carry
   80 00:0EE8 C9 -  -  -  		ret
   81 00:0EE9 -  -  -  -  
   82 00:0EE9 -  -  -  -  ; ***************************************************************************************
   83 00:0EE9 -  -  -  -  ;
   84 00:0EE9 -  -  -  -  ;									Changes and Updates
   85 00:0EE9 -  -  -  -  ;
   86 00:0EE9 -  -  -  -  ; ***************************************************************************************
   87 00:0EE9 -  -  -  -  ;
   88 00:0EE9 -  -  -  -  ;		Date			Notes
   89 00:0EE9 -  -  -  -  ;		==== 			=====
   90 00:0EE9 -  -  -  -  ;
   91 00:0EE9 -  -  -  -  ; ***************************************************************************************
   92 00:0EE9 -  -  -  -  		
Listing for file "_build.asm"
   71 00:0EE9 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 00:0EE9 -  -  -  -  ;
    2 00:0EE9 -  -  -  -  ;	This file is automatically generated.
    3 00:0EE9 -  -  -  -  ;
    4 00:0EE9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 00:0F00 -  -  -  -  PrecedenceTable:
    6 00:0F00 06 -  -  -  	.db	6	; $0083 !
    7 00:0F01 06 -  -  -  	.db	6	; $0084 ?
    8 00:0F02 05 -  -  -  	.db	5	; $0085 *
    9 00:0F03 05 -  -  -  	.db	5	; $0086 /
   10 00:0F04 05 -  -  -  	.db	5	; $0087 mod
   11 00:0F05 05 -  -  -  	.db	5	; $0088 div
   12 00:0F06 04 -  -  -  	.db	4	; $0089 +
   13 00:0F07 04 -  -  -  	.db	4	; $008a -
   14 00:0F08 03 -  -  -  	.db	3	; $008b >=
   15 00:0F09 03 -  -  -  	.db	3	; $008c <=
   16 00:0F0A 03 -  -  -  	.db	3	; $008d >
   17 00:0F0B 03 -  -  -  	.db	3	; $008e <
   18 00:0F0C 03 -  -  -  	.db	3	; $008f =
   19 00:0F0D 03 -  -  -  	.db	3	; $0090 <>
   20 00:0F0E 02 -  -  -  	.db	2	; $0091 and
   21 00:0F0F 01 -  -  -  	.db	1	; $0092 or
   22 00:0F10 01 -  -  -  	.db	1	; $0093 eor
   23 00:0F11 -  -  -  -  
Listing for file "_build.asm"
   72 00:0F11 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 00:0F11 -  -  -  -  ;
    2 00:0F11 -  -  -  -  ;	This is automatically generated.
    3 00:0F11 -  -  -  -  ;
    4 00:0F11 -  -  -  -  ErrorIDTable:
    5 00:0F11 7D 0F 00 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 00:0F15 83 0F 00 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 00:0F19 94 0F 00 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 00:0F1D A2 0F 00 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 00:0F21 AC 0F 00 00 	.dw	ErrText_data & $FFFF,ErrText_data >> 16
   10 00:0F25 B8 0F 00 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   11 00:0F29 C2 0F 00 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   12 00:0F2D DC 0F 00 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   13 00:0F31 ED 0F 00 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   14 00:0F35 02 10 00 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   15 00:0F39 12 10 00 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   16 00:0F3D 27 10 00 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   17 00:0F41 35 10 00 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   18 00:0F45 46 10 00 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   19 00:0F49 54 10 00 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   20 00:0F4D 5E 10 00 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   21 00:0F51 73 10 00 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   22 00:0F55 88 10 00 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   23 00:0F59 9E 10 00 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   24 00:0F5D AC 10 00 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   25 00:0F61 BF 10 00 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   26 00:0F65 D1 10 00 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   27 00:0F69 E6 10 00 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   28 00:0F6D F2 10 00 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   29 00:0F71 F7 10 00 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   30 00:0F75 04 11 00 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   31 00:0F79 15 11 00 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   32 00:0F7D -  -  -  -  
   33 00:0F7D -  -  -  -  ErrText_warmstart:
   34 00:0F7D 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   35 00:0F83 -  -  -  -  ErrText_assert:
   36 00:0F83 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   37 00:0F94 -  -  -  -  ErrText_badtype:
   38 00:0F94 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   39 00:0FA2 -  -  -  -  ErrText_badvalue:
   40 00:0FA2 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   41 00:0FAC -  -  -  -  ErrText_data:
   42 00:0FAC 4F 75 74 20 
              6F 66 20 44 
              61 74 61 00 	.db "Out of Data",0
   43 00:0FB8 -  -  -  -  ErrText_dim:
   44 00:0FB8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   45 00:0FC2 -  -  -  -  ErrText_disabled:
   46 00:0FC2 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   47 00:0FDC -  -  -  -  ErrText_divzero:
   48 00:0FDC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   49 00:0FED -  -  -  -  ErrText_gosub:
   50 00:0FED 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   51 00:1002 -  -  -  -  ErrText_index:
   52 00:1002 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   53 00:1012 -  -  -  -  ErrText_lineno:
   54 00:1012 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   55 00:1027 -  -  -  -  ErrText_memory:
   56 00:1027 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   57 00:1035 -  -  -  -  ErrText_next:
   58 00:1035 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   59 00:1046 -  -  -  -  ErrText_nocomma:
   60 00:1046 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   61 00:1054 -  -  -  -  ErrText_nodollar:
   62 00:1054 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   63 00:105E -  -  -  -  ErrText_nolbracket:
   64 00:105E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   65 00:1073 -  -  -  -  ErrText_noproc:
   66 00:1073 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   67 00:1088 -  -  -  -  ErrText_norbracket:
   68 00:1088 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   69 00:109E -  -  -  -  ErrText_notref:
   70 00:109E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   71 00:10AC -  -  -  -  ErrText_param:
   72 00:10AC 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   73 00:10BF -  -  -  -  ErrText_proc:
   74 00:10BF 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   75 00:10D1 -  -  -  -  ErrText_repeat:
   76 00:10D1 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   77 00:10E6 -  -  -  -  ErrText_stack:
   78 00:10E6 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   79 00:10F2 -  -  -  -  ErrText_stop:
   80 00:10F2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   81 00:10F7 -  -  -  -  ErrText_syntax:
   82 00:10F7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   83 00:1104 -  -  -  -  ErrText_todo:
   84 00:1104 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   85 00:1115 -  -  -  -  ErrText_unknownvar:
   86 00:1115 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   73 00:1126 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 00:1126 -  -  -  -  ;
    2 00:1126 -  -  -  -  ;	Vectors for set 0
    3 00:1126 -  -  -  -  ;
    4 00:1126 -  -  -  -  VectorsSet0:
    5 00:1126 B2 01 00 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 00:112A 24 00 00 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 00:112E 24 00 00 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 00:1132 0E 05 00 00 	addr(ALULongReference)           ; $0083 !
    9 00:1136 17 05 00 00 	addr(ALUByteReference)           ; $0084 ?
   10 00:113A BA 04 00 00 	addr(ALUMultiply)                ; $0085 *
   11 00:113E C8 04 00 00 	addr(ALUDivide)                  ; $0086 /
   12 00:1142 D6 04 00 00 	addr(ALUModulus)                 ; $0087 mod
   13 00:1146 C8 04 00 00 	addr(ALUDivide2)                 ; $0088 div
   14 00:114A 9E 04 00 00 	addr(ALUAdd)                     ; $0089 +
   15 00:114E AC 04 00 00 	addr(ALUSubtract)                ; $008a -
   16 00:1152 75 05 00 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 00:1156 6B 05 00 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 00:115A 57 05 00 00 	addr(ALUCompareGreater)          ; $008d >
   19 00:115E 4D 05 00 00 	addr(ALUCompareLess)             ; $008e <
   20 00:1162 43 05 00 00 	addr(ALUCompareEqual)            ; $008f =
   21 00:1166 61 05 00 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 00:116A E4 04 00 00 	addr(ALUAnd)                     ; $0091 and
   23 00:116E F2 04 00 00 	addr(ALUOr)                      ; $0092 or
   24 00:1172 00 05 00 00 	addr(ALUXor)                     ; $0093 eor
   25 00:1176 E7 08 00 00 	addr(Unary_Ampersand)            ; $0094 &
   26 00:117A DF 08 00 00 	addr(Unary_Brackets)             ; $0095 (
   27 00:117E 01 08 00 00 	addr(Unary_MkStr)                ; $0096 $
   28 00:1182 2E 08 00 00 	addr(Unary_Random)               ; $0097 rnd
   29 00:1186 F0 07 00 00 	addr(Unary_Len)                  ; $0098 len
   30 00:118A C6 07 00 00 	addr(Unary_Abs)                  ; $0099 abs
   31 00:118E C5 08 00 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 00:1192 F6 08 00 00 	addr(Unary_Str)                  ; $009b str
   33 00:1196 DC 07 00 00 	addr(Unary_Chr)                  ; $009c chr
   34 00:119A D3 07 00 00 	addr(Unary_Asc)                  ; $009d asc
   35 00:119E 0C 08 00 00 	addr(Unary_Not)                  ; $009e not
   36 00:11A2 21 08 00 00 	addr(Unary_Page)                 ; $009f page
   37 00:11A6 1E 09 00 00 	addr(Unary_Time)                 ; $00a0 time
   38 00:11AA 25 09 00 00 	addr(Unary_Top)                  ; $00a1 top
   39 00:11AE 32 09 00 00 	addr(Unary_Val)                  ; $00a2 val
   40 00:11B2 35 05 00 00 	addr(UnaryInt32True)             ; $00a3 true
   41 00:11B6 39 05 00 00 	addr(UnaryInt32False)            ; $00a4 false
   42 00:11BA F7 00 00 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 00:11BE F7 00 00 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 00:11C2 FB 00 00 00 	addr(Command_Colon)              ; $00a7 :
   45 00:11C6 F7 00 00 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 00:11CA 99 02 00 00 	addr(Command_REM2)               ; $00a9 '
   47 00:11CE F7 00 00 00 	addr(BadCmd_LSBracket)           ; $00aa [
   48 00:11D2 F7 00 00 00 	addr(BadCmd_RSBracket)           ; $00ab ]
   49 00:11D6 F7 00 00 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 00:11DA D4 0C 00 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 00:11DE DF 0C 00 00 	addr(Command_Until)              ; $00ae until
   52 00:11E2 9A 0C 00 00 	addr(Command_IF)                 ; $00af if
   53 00:11E6 F7 00 00 00 	addr(BadCmd_Then)                ; $00b0 then
   54 00:11EA D0 0C 00 00 	addr(Command_Else)               ; $00b1 else
   55 00:11EE 36 0B 00 00 	addr(Command_FOR)                ; $00b2 for
   56 00:11F2 F7 00 00 00 	addr(BadCmd_To)                  ; $00b3 to
   57 00:11F6 F7 00 00 00 	addr(BadCmd_Step)                ; $00b4 step
   58 00:11FA CC 0B 00 00 	addr(Command_Next)               ; $00b5 next
   59 00:11FE F7 00 00 00 	addr(BadCmd_Def)                 ; $00b6 def
   60 00:1202 D2 09 00 00 	addr(Command_PROC)               ; $00b7 proc
   61 00:1206 2C 0A 00 00 	addr(Command_ENDPROC)            ; $00b8 endproc
   62 00:120A 27 0C 00 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 00:120E 3C 0C 00 00 	addr(Command_Return)             ; $00ba return
   64 00:1212 53 0C 00 00 	addr(Command_GOTO)               ; $00bb goto
   65 00:1216 47 09 00 00 	addr(Command_LOCAL)              ; $00bc local
   66 00:121A FC 00 00 00 	addr(Command_DIM)                ; $00bd dim
   67 00:121E 99 02 00 00 	addr(Command_REM)                ; $00be rem
   68 00:1222 C9 01 00 00 	addr(Command_LET)                ; $00bf let
   69 00:1226 2F 03 00 00 	addr(Command_VDU)                ; $00c0 vdu
   70 00:122A 2E 02 00 00 	addr(Command_PRINT)              ; $00c1 print
   71 00:122E 24 00 00 00 	addr(Unimplemented)              ; $00c2 load
   72 00:1232 24 00 00 00 	addr(Unimplemented)              ; $00c3 save
   73 00:1236 24 00 00 00 	addr(Unimplemented)              ; $00c4 list
   74 00:123A 26 0B 00 00 	addr(Command_NEW)                ; $00c5 new
   75 00:123E B6 02 00 00 	addr(Command_RUN)                ; $00c6 run
   76 00:1242 63 03 00 00 	addr(Command_READ)               ; $00c7 read
   77 00:1246 F7 00 00 00 	addr(BadCmd_Data)                ; $00c8 data
   78 00:124A D8 03 00 00 	addr(Command_RESTORE)            ; $00c9 restore
   79 00:124E E6 00 00 00 	addr(Command_ASSERT)             ; $00ca assert
   80 00:1252 C2 0A 00 00 	addr(Command_CLEAR)              ; $00cb clear
   81 00:1256 AC 01 00 00 	addr(Command_END)                ; $00cc end
   82 00:125A 29 03 00 00 	addr(Command_STOP)               ; $00cd stop
   83 00:125E -  -  -  -  ;
   84 00:125E -  -  -  -  ;	Vectors for set 1
   85 00:125E -  -  -  -  ;
   86 00:125E -  -  -  -  VectorsSet1:
   87 00:125E -  -  -  -  ;
   88 00:125E -  -  -  -  ;	Vectors for set 2
   89 00:125E -  -  -  -  ;
   90 00:125E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   74 00:125E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 00:125E -  -  -  -  ; ***************************************************************************************
    2 00:125E -  -  -  -  ; ***************************************************************************************
    3 00:125E -  -  -  -  ;
    4 00:125E -  -  -  -  ;		Name : 		idivide.asm
    5 00:125E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:125E -  -  -  -  ;		Date : 		3rd June 2022
    7 00:125E -  -  -  -  ;		Reviewed :	No
    8 00:125E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 00:125E -  -  -  -  ;
   10 00:125E -  -  -  -  ; ***************************************************************************************
   11 00:125E -  -  -  -  ; ***************************************************************************************
   12 00:125E -  -  -  -  
   13 00:125E -  -  -  -  ; ***************************************************************************************
   14 00:125E -  -  -  -  ;
   15 00:125E -  -  -  -  ;								Unsigned integer divide
   16 00:125E -  -  -  -  ;
   17 00:125E -  -  -  -  ; ***************************************************************************************
   18 00:125E -  -  -  -  
   19 00:125E -  -  -  -  Int32UDivide:
   20 00:125E 37 -  -  -  		scf
   21 00:125F C3 A3 12 00 		jp 		_I32UnsignedDivide		
   22 00:1263 -  -  -  -  
   23 00:1263 -  -  -  -  ; ***************************************************************************************
   24 00:1263 -  -  -  -  ;
   25 00:1263 -  -  -  -  ;							Signed integer divide/Modulus
   26 00:1263 -  -  -  -  ;
   27 00:1263 -  -  -  -  ; ***************************************************************************************
   28 00:1263 -  -  -  -  
   29 00:1263 -  -  -  -  Int32SDivide:
   30 00:1263 37 -  -  -  		scf
   31 00:1264 18 01 -  -  		jr 		_I32SDivide
   32 00:1266 -  -  -  -  Int32Modulus:
   33 00:1266 AF -  -  -  		xor 	a
   34 00:1267 -  -  -  -  _I32SDivide:
   35 00:1267 08 -  -  -  		ex 		af,af' 						; push AF'
   36 00:1268 F5 -  -  -  		push 	af
   37 00:1269 08 -  -  -  		ex 		af,af'
   38 00:126A -  -  -  -  
   39 00:126A D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 00:126B D9 -  -  -  		exx
   41 00:126C D5 -  -  -  		push 	de
   42 00:126D D9 -  -  -  		exx
   43 00:126E -  -  -  -  
   44 00:126E F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 00:126F AF -  -  -  		xor 	a 							; clear sign count.
   46 00:1270 CD 90 12 00 		call 	_I32CheckHLSignSwap
   47 00:1274 CD 90 12 00 		call 	_I32CheckHLSignSwap
   48 00:1278 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 00:1279 F1 -  -  -  		pop 	af 							; get/save function flag
   50 00:127A F5 -  -  -  		push 	af
   51 00:127B CD A3 12 00 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 00:127F F1 -  -  -  		pop 	af 							; get function back
   53 00:1280 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 00:1282 08 -  -  -  		ex 	 	af,af' 						; get count
   55 00:1283 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 00:1285 C4 06 14 00 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 00:1289 -  -  -  -  _I32SDExit:
   58 00:1289 D9 -  -  -  		exx 								; restore DE'DE
   59 00:128A D1 -  -  -  		pop 	de
   60 00:128B D9 -  -  -  		exx
   61 00:128C D1 -  -  -  		pop 	de
   62 00:128D F1 -  -  -  		pop 	af 							; restore AF'	
   63 00:128E 08 -  -  -  		ex 		af,af'
   64 00:128F C9 -  -  -  		ret
   65 00:1290 -  -  -  -  
   66 00:1290 -  -  -  -  
   67 00:1290 -  -  -  -  _I32CheckHLSignSwap:
   68 00:1290 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 00:1291 CB 7C -  -  		bit 	7,h
   70 00:1293 D9 -  -  -  		exx
   71 00:1294 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 00:1296 -  -  -  -  		;
   73 00:1296 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 00:1298 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 00:1299 CD 06 14 00 		call 	Int32Negate 				
   76 00:129D F1 -  -  -  		pop 	af
   77 00:129E -  -  -  -  _I32CHSPositive:
   78 00:129E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 00:129F EB -  -  -  		ex 		de,hl
   80 00:12A0 D9 -  -  -  		exx		
   81 00:12A1 EB -  -  -  		ex 		de,hl
   82 00:12A2 C9 -  -  -  		ret
   83 00:12A3 -  -  -  -  
   84 00:12A3 -  -  -  -  ; ***************************************************************************************
   85 00:12A3 -  -  -  -  ;
   86 00:12A3 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 00:12A3 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 00:12A3 -  -  -  -  ;
   89 00:12A3 -  -  -  -  ; ***************************************************************************************
   90 00:12A3 -  -  -  -  
   91 00:12A3 -  -  -  -  _I32UnsignedDivide:
   92 00:12A3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 00:12A4 D5 -  -  -  		push 	de
   94 00:12A5 D9 -  -  -  		exx
   95 00:12A6 C5 -  -  -  		push 	bc
   96 00:12A7 D5 -  -  -  		push 	de 							
   97 00:12A8 D9 -  -  -  		exx
   98 00:12A9 -  -  -  -  
   99 00:12A9 F5 -  -  -  		push 	af 							; save CS for exit check
  100 00:12AA -  -  -  -  
  101 00:12AA 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 00:12AB B3 -  -  -  		or 		e
  103 00:12AC D9 -  -  -  		exx
  104 00:12AD B2 -  -  -  		or 		d
  105 00:12AE B3 -  -  -  		or 		e
  106 00:12AF D9 -  -  -  		exx
  107 00:12B0 CA 2A 00 00 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 00:12B4 -  -  -  -  
  109 00:12B4 -  -  -  -  
  110 00:12B4 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 00:12B5 4D -  -  -  		ld		c,l
  112 00:12B6 21 00 00 00 		ld 		hl,$0000
  113 00:12BA D9 -  -  -  		exx
  114 00:12BB 44 -  -  -  		ld 		b,h
  115 00:12BC 4D -  -  -  		ld		c,l
  116 00:12BD 21 00 00 00 		ld 		hl,$0000
  117 00:12C1 D9 -  -  -  		exx
  118 00:12C2 -  -  -  -  
  119 00:12C2 3E 20 -  -  		ld 		a,32 						; loop counter
  120 00:12C4 -  -  -  -  _I32DivideLoop:
  121 00:12C4 F5 -  -  -  		push 	af
  122 00:12C5 -  -  -  -  
  123 00:12C5 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 00:12C7 CB 10 -  -  		rl 		b
  125 00:12C9 D9 -  -  -  		exx
  126 00:12CA CB 11 -  -  		rl 		c
  127 00:12CC CB 10 -  -  		rl 		b
  128 00:12CE D9 -  -  -  		exx
  129 00:12CF CB 15 -  -  		rl 		l
  130 00:12D1 CB 14 -  -  		rl 		h
  131 00:12D3 D9 -  -  -  		exx
  132 00:12D4 CB 15 -  -  		rl 		l
  133 00:12D6 CB 14 -  -  		rl 		h
  134 00:12D8 D9 -  -  -  		exx
  135 00:12D9 -  -  -  -  
  136 00:12D9 CD A4 13 00 		call 	Int32Subtract 				; A = A - M
  137 00:12DD 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 00:12DF -  -  -  -  
  139 00:12DF 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 00:12E0 18 04 -  -  		jr 		_I32Next
  141 00:12E2 -  -  -  -  
  142 00:12E2 -  -  -  -  _I32Borrow:
  143 00:12E2 CD 9C 13 00 		call 	Int32Add 					; A = A + M
  144 00:12E6 -  -  -  -  _I32Next:
  145 00:12E6 F1 -  -  -  		pop 	af
  146 00:12E7 3D -  -  -  		dec 	a
  147 00:12E8 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 00:12EA -  -  -  -  
  149 00:12EA F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 00:12EB -  -  -  -  
  151 00:12EB 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 00:12EC 30 06 -  -  		jr 		nc,_I32Modulus1
  153 00:12EE -  -  -  -  
  154 00:12EE 60 -  -  -  		ld  	h,b
  155 00:12EF 69 -  -  -  		ld 		l,c
  156 00:12F0 D9 -  -  -  		exx
  157 00:12F1 60 -  -  -  		ld  	h,b
  158 00:12F2 69 -  -  -  		ld 		l,c
  159 00:12F3 D9 -  -  -  		exx
  160 00:12F4 -  -  -  -  _I32Modulus1:		
  161 00:12F4 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 00:12F5 D1 -  -  -  		pop 	de
  163 00:12F6 C1 -  -  -  		pop 	bc
  164 00:12F7 D9 -  -  -  		exx
  165 00:12F8 D1 -  -  -  		pop 	de
  166 00:12F9 C1 -  -  -  		pop 	bc
  167 00:12FA C9 -  -  -  		ret
  168 00:12FB -  -  -  -  
  169 00:12FB -  -  -  -  ; ***************************************************************************************
  170 00:12FB -  -  -  -  ;
  171 00:12FB -  -  -  -  ;									Changes and Updates
  172 00:12FB -  -  -  -  ;
  173 00:12FB -  -  -  -  ; ***************************************************************************************
  174 00:12FB -  -  -  -  ;
  175 00:12FB -  -  -  -  ;		Date			Notes
  176 00:12FB -  -  -  -  ;		==== 			=====
  177 00:12FB -  -  -  -  ;
  178 00:12FB -  -  -  -  ; ***************************************************************************************
  179 00:12FB -  -  -  -  		
Listing for file "_build.asm"
   75 00:12FB -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 00:12FB -  -  -  -  ; ***************************************************************************************
    2 00:12FB -  -  -  -  ; ***************************************************************************************
    3 00:12FB -  -  -  -  ;
    4 00:12FB -  -  -  -  ;		Name : 		ifromstring.asm
    5 00:12FB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:12FB -  -  -  -  ;		Date : 		3rd June 2022
    7 00:12FB -  -  -  -  ;		Reviewed :	No
    8 00:12FB -  -  -  -  ;		Purpose :	Convert string to integer.
    9 00:12FB -  -  -  -  ;
   10 00:12FB -  -  -  -  ; ***************************************************************************************
   11 00:12FB -  -  -  -  ; ***************************************************************************************
   12 00:12FB -  -  -  -  
   13 00:12FB -  -  -  -  ; ***************************************************************************************
   14 00:12FB -  -  -  -  ;
   15 00:12FB -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 00:12FB -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 00:12FB -  -  -  -  ;
   18 00:12FB -  -  -  -  ; ***************************************************************************************
   19 00:12FB -  -  -  -  
   20 00:12FB -  -  -  -  Int32FromString:
   21 00:12FB C5 -  -  -   		push 	bc 							; save BC on stack
   22 00:12FC D9 -  -  -  		exx 								; push DE'DE on the stack
   23 00:12FD D5 -  -  -  		push 	de
   24 00:12FE D9 -  -  -  		exx
   25 00:12FF D5 -  -  -  		push 	de
   26 00:1300 -  -  -  -  
   27 00:1300 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 00:1304 11 00 00 00 		ld 		de,$0000
   29 00:1308 D9 -  -  -  		exx
   30 00:1309 21 00 00 00 		ld 		hl,$0000
   31 00:130D 11 00 00 00 		ld 		de,$0000
   32 00:1311 D9 -  -  -  		exx
   33 00:1312 -  -  -  -  
   34 00:1312 5F -  -  -  		ld 		e,a 						; base in E
   35 00:1313 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 00:1315 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 00:1317 ED 44 -  -  		neg 		 						; fix up the base
   38 00:1319 5F -  -  -  		ld 		e,a 						; save in E.
   39 00:131A -  -  -  -  		;
   40 00:131A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 00:131B F5 -  -  -  		push 	af
   42 00:131C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 00:131E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 00:131F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 00:1321 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 00:1322 18 01 -  -  		jr 		_I32FSMain
   47 00:1324 -  -  -  -  _I32FSNotSigned:		
   48 00:1324 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 00:1325 -  -  -  -  		;
   50 00:1325 -  -  -  -  		; 		Main conversion loop.
   51 00:1325 -  -  -  -  		; 		
   52 00:1325 -  -  -  -  _I32FSMain:		
   53 00:1325 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 00:1326 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 00:1328 38 02 -  -  		jr 		c,_I32FSNotLower
   56 00:132A D6 20 -  -  		sub 	32
   57 00:132C -  -  -  -  _I32FSNotLower:
   58 00:132C FE 30 -  -  		cp 		'0' 						; check in range
   59 00:132E 38 23 -  -  		jr 		c,_I32FSExit
   60 00:1330 FE 3A -  -  		cp 		'9'+1
   61 00:1332 38 0A -  -  		jr 		c,_I32FSOkay
   62 00:1334 FE 41 -  -  		cp 		'A'
   63 00:1336 38 1B -  -  		jr 		c,_I32FSExit
   64 00:1338 FE 47 -  -  		cp 		'F'+1
   65 00:133A 30 17 -  -  		jr 		nc,_I32FSExit
   66 00:133C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 00:133E -  -  -  -  _I32FSOkay:
   68 00:133E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 00:1340 BB -  -  -  		cp 		e 							; fail if >= base
   70 00:1341 30 10 -  -  		jr 		nc,_I32FSExit 
   71 00:1343 03 -  -  -  		inc 	bc 							; consume character
   72 00:1344 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 00:1345 F5 -  -  -  		push 	af 							; save additive on stack
   74 00:1346 CD 63 13 00 		call 	Int32Multiply 				; result *= base
   75 00:134A F1 -  -  -  		pop 	af 							; additive in DE
   76 00:134B 5F -  -  -  		ld 		e,a
   77 00:134C CD 9C 13 00 		call 	Int32Add 					; and add it.
   78 00:1350 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 00:1351 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 00:1353 -  -  -  -  
   81 00:1353 -  -  -  -  _I32FSExit:
   82 00:1353 F1 -  -  -  		pop 	af 							; get sign back
   83 00:1354 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 00:1356 CC 06 14 00 		call 	z,Int32Negate
   85 00:135A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 00:135B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 00:135C D9 -  -  -  		exx
   88 00:135D D1 -  -  -  		pop 	de
   89 00:135E D9 -  -  -  		exx
   90 00:135F C1 -  -  -  		pop 	bc
   91 00:1360 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 00:1362 C9 -  -  -  		ret				
   93 00:1363 -  -  -  -  
   94 00:1363 -  -  -  -  ; ***************************************************************************************
   95 00:1363 -  -  -  -  ;
   96 00:1363 -  -  -  -  ;									Changes and Updates
   97 00:1363 -  -  -  -  ;
   98 00:1363 -  -  -  -  ; ***************************************************************************************
   99 00:1363 -  -  -  -  ;
  100 00:1363 -  -  -  -  ;		Date			Notes
  101 00:1363 -  -  -  -  ;		==== 			=====
  102 00:1363 -  -  -  -  ;
  103 00:1363 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   76 00:1363 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 00:1363 -  -  -  -  ; ***************************************************************************************
    2 00:1363 -  -  -  -  ; ***************************************************************************************
    3 00:1363 -  -  -  -  ;
    4 00:1363 -  -  -  -  ;		Name : 		imultiply.asm
    5 00:1363 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:1363 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:1363 -  -  -  -  ;		Reviewed :	No
    8 00:1363 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 00:1363 -  -  -  -  ;
   10 00:1363 -  -  -  -  ; ***************************************************************************************
   11 00:1363 -  -  -  -  ; ***************************************************************************************
   12 00:1363 -  -  -  -  
   13 00:1363 -  -  -  -  Int32Multiply:
   14 00:1363 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 00:1364 D5 -  -  -  		push 	de
   16 00:1365 44 -  -  -  		ld 		b,h
   17 00:1366 4D -  -  -  		ld 		c,l
   18 00:1367 21 00 00 00 		ld 		hl,$0000
   19 00:136B -  -  -  -  
   20 00:136B D9 -  -  -  		exx
   21 00:136C C5 -  -  -  		push 	bc
   22 00:136D D5 -  -  -  		push 	de
   23 00:136E 44 -  -  -  		ld 		b,h
   24 00:136F 4D -  -  -  		ld 		c,l
   25 00:1370 21 00 00 00 		ld 		hl,$0000		
   26 00:1374 D9 -  -  -  		exx
   27 00:1375 -  -  -  -  
   28 00:1375 -  -  -  -  _I32MultiplyLoop:
   29 00:1375 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 00:1377 C4 9C 13 00 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 00:137B -  -  -  -  		;
   32 00:137B D9 -  -  -  		exx 								; shift BC'BC right.
   33 00:137C CB 38 -  -  		srl 	b
   34 00:137E CB 19 -  -  		rr 		c
   35 00:1380 D9 -  -  -  		exx
   36 00:1381 CB 18 -  -  		rr 		b
   37 00:1383 CB 19 -  -  		rr 		c
   38 00:1385 -  -  -  -  		;
   39 00:1385 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 00:1387 CB 12 -  -  		rl 		d
   41 00:1389 D9 -  -  -  		exx
   42 00:138A CB 13 -  -  		rl 		e
   43 00:138C CB 12 -  -  		rl 		d
   44 00:138E -  -  -  -  
   45 00:138E 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 00:138F B1 -  -  -  		or 		c
   47 00:1390 D9 -  -  -  		exx
   48 00:1391 B0 -  -  -  		or 		b
   49 00:1392 B1 -  -  -  		or 		c
   50 00:1393 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 00:1395 -  -  -  -  
   52 00:1395 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 00:1396 D1 -  -  -  		pop 	de
   54 00:1397 C1 -  -  -  		pop 	bc
   55 00:1398 D9 -  -  -  		exx
   56 00:1399 D1 -  -  -  		pop 	de
   57 00:139A C1 -  -  -  		pop 	bc
   58 00:139B C9 -  -  -  		ret
   59 00:139C -  -  -  -  
   60 00:139C -  -  -  -  ; ***************************************************************************************
   61 00:139C -  -  -  -  ;
   62 00:139C -  -  -  -  ;									Changes and Updates
   63 00:139C -  -  -  -  ;
   64 00:139C -  -  -  -  ; ***************************************************************************************
   65 00:139C -  -  -  -  ;
   66 00:139C -  -  -  -  ;		Date			Notes
   67 00:139C -  -  -  -  ;		==== 			=====
   68 00:139C -  -  -  -  ;
   69 00:139C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 00:139C -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 00:139C -  -  -  -  ; ***************************************************************************************
    2 00:139C -  -  -  -  ; ***************************************************************************************
    3 00:139C -  -  -  -  ;
    4 00:139C -  -  -  -  ;		Name : 		isimple.asm
    5 00:139C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:139C -  -  -  -  ;		Date : 		3rd June 2022
    7 00:139C -  -  -  -  ;		Reviewed :	No
    8 00:139C -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 00:139C -  -  -  -  ;
   10 00:139C -  -  -  -  ; ***************************************************************************************
   11 00:139C -  -  -  -  ; ***************************************************************************************
   12 00:139C -  -  -  -  
   13 00:139C -  -  -  -  ; ***************************************************************************************
   14 00:139C -  -  -  -  ;
   15 00:139C -  -  -  -  ;								Add DE'DE to HL'HL
   16 00:139C -  -  -  -  ;
   17 00:139C -  -  -  -  ; ***************************************************************************************
   18 00:139C -  -  -  -  
   19 00:139C -  -  -  -  Int32Add:
   20 00:139C 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 00:139E D9 -  -  -  		exx
   22 00:139F 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 00:13A2 D9 -  -  -  		exx
   24 00:13A3 C9 -  -  -  		ret
   25 00:13A4 -  -  -  -  
   26 00:13A4 -  -  -  -  ; ***************************************************************************************
   27 00:13A4 -  -  -  -  ;
   28 00:13A4 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 00:13A4 -  -  -  -  ;
   30 00:13A4 -  -  -  -  ; ***************************************************************************************
   31 00:13A4 -  -  -  -  
   32 00:13A4 -  -  -  -  Int32Subtract:
   33 00:13A4 AF -  -  -  		xor 	a 							; clear carry
   34 00:13A5 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 00:13A8 D9 -  -  -  		exx
   36 00:13A9 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 00:13AC D9 -  -  -  		exx
   38 00:13AD C9 -  -  -  		ret
   39 00:13AE -  -  -  -  
   40 00:13AE -  -  -  -  ; ***************************************************************************************
   41 00:13AE -  -  -  -  ;
   42 00:13AE -  -  -  -  ;								And DE'DE into HL'HL
   43 00:13AE -  -  -  -  ;
   44 00:13AE -  -  -  -  ; ***************************************************************************************
   45 00:13AE -  -  -  -  
   46 00:13AE -  -  -  -  Int32And:
   47 00:13AE D9 -  -  -  		exx
   48 00:13AF CD B4 13 00 		call 	_I32AndHLDE
   49 00:13B3 D9 -  -  -  		exx
   50 00:13B4 -  -  -  -  _I32AndHLDE:		
   51 00:13B4 7C -  -  -  		ld 		a,h
   52 00:13B5 A2 -  -  -  		and 	d
   53 00:13B6 67 -  -  -  		ld 		h,a
   54 00:13B7 7D -  -  -  		ld 		a,l
   55 00:13B8 A3 -  -  -  		and 	e
   56 00:13B9 6F -  -  -  		ld 		l,a
   57 00:13BA C9 -  -  -  		ret
   58 00:13BB -  -  -  -  
   59 00:13BB -  -  -  -  ; ***************************************************************************************
   60 00:13BB -  -  -  -  ;
   61 00:13BB -  -  -  -  ;								Or DE'DE into HL'HL
   62 00:13BB -  -  -  -  ;
   63 00:13BB -  -  -  -  ; ***************************************************************************************
   64 00:13BB -  -  -  -  
   65 00:13BB -  -  -  -  Int32Or:
   66 00:13BB D9 -  -  -  		exx
   67 00:13BC CD C1 13 00 		call 	_I32OrHLDE
   68 00:13C0 D9 -  -  -  		exx
   69 00:13C1 -  -  -  -  _I32OrHLDE:		
   70 00:13C1 7C -  -  -  		ld 		a,h
   71 00:13C2 B2 -  -  -  		or 		d
   72 00:13C3 67 -  -  -  		ld 		h,a
   73 00:13C4 7D -  -  -  		ld 		a,l
   74 00:13C5 B3 -  -  -  		or 		e
   75 00:13C6 6F -  -  -  		ld 		l,a
   76 00:13C7 C9 -  -  -  		ret
   77 00:13C8 -  -  -  -  
   78 00:13C8 -  -  -  -  ; ***************************************************************************************
   79 00:13C8 -  -  -  -  ;
   80 00:13C8 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 00:13C8 -  -  -  -  ;
   82 00:13C8 -  -  -  -  ; ***************************************************************************************
   83 00:13C8 -  -  -  -  
   84 00:13C8 -  -  -  -  Int32Xor:
   85 00:13C8 D9 -  -  -  		exx
   86 00:13C9 CD CE 13 00 		call 	_I32XorHLDE
   87 00:13CD D9 -  -  -  		exx
   88 00:13CE -  -  -  -  _I32XorHLDE:		
   89 00:13CE 7C -  -  -  		ld 		a,h
   90 00:13CF AA -  -  -  		xor 	d
   91 00:13D0 67 -  -  -  		ld 		h,a
   92 00:13D1 7D -  -  -  		ld 		a,l
   93 00:13D2 AB -  -  -  		xor 	e
   94 00:13D3 6F -  -  -  		ld 		l,a
   95 00:13D4 C9 -  -  -  		ret
   96 00:13D5 -  -  -  -  
   97 00:13D5 -  -  -  -  ; ***************************************************************************************
   98 00:13D5 -  -  -  -  ;
   99 00:13D5 -  -  -  -  ;								 Check if HL'HL zero
  100 00:13D5 -  -  -  -  ;
  101 00:13D5 -  -  -  -  ; ***************************************************************************************
  102 00:13D5 -  -  -  -  
  103 00:13D5 -  -  -  -  Int32Zero:
  104 00:13D5 D9 -  -  -  		exx
  105 00:13D6 7D -  -  -  		ld 		a,l
  106 00:13D7 B4 -  -  -  		or 		h
  107 00:13D8 D9 -  -  -  		exx
  108 00:13D9 B5 -  -  -  		or 		l
  109 00:13DA B4 -  -  -  		or 		h
  110 00:13DB C9 -  -  -  		ret
  111 00:13DC -  -  -  -  
  112 00:13DC -  -  -  -  ; ***************************************************************************************
  113 00:13DC -  -  -  -  ;
  114 00:13DC -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 00:13DC -  -  -  -  ;
  116 00:13DC -  -  -  -  ; ***************************************************************************************
  117 00:13DC -  -  -  -  
  118 00:13DC -  -  -  -  Int32Compare:
  119 00:13DC E5 -  -  -  		push 	hl 							; save HL
  120 00:13DD AF -  -  -  		xor 	a 							; clear carry
  121 00:13DE 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 00:13E1 D9 -  -  -  		exx
  123 00:13E2 E5 -  -  -  		push 	hl 							; save HL'
  124 00:13E3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 00:13E6 -  -  -  -  		;
  126 00:13E6 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 00:13E7 E2 EF 13 00 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 00:13EB 78 -  -  -  		ld 		a,b
  129 00:13EC EE 80 -  -  		xor 	$80
  130 00:13EE 47 -  -  -  		ld 		b,a
  131 00:13EF -  -  -  -  _I32CNoOverflow:
  132 00:13EF 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 00:13F0 B5 -  -  -  		or 		l
  134 00:13F1 D9 -  -  -  		exx 
  135 00:13F2 B4 -  -  -  		or 		h
  136 00:13F3 B5 -  -  -  		or 		l
  137 00:13F4 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 00:13F6 -  -  -  -  		;
  139 00:13F6 D9 -  -  -  		exx 								; is B' -ve 	
  140 00:13F7 CB 78 -  -  		bit 	7,b
  141 00:13F9 D9 -  -  -  		exx
  142 00:13FA 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 00:13FC 28 02 -  -  		jr 		z,_I32NotPos
  144 00:13FE 3E FF -  -  		ld 		a,$FF
  145 00:1400 -  -  -  -  _I32NotPos:
  146 00:1400 D9 -  -  -  		exx
  147 00:1401 E1 -  -  -  		pop 	hl 							; restore HL'
  148 00:1402 D9 -  -  -  		exx
  149 00:1403 E1 -  -  -  		pop 	hl 							; restore HL
  150 00:1404 B7 -  -  -  		or 		a 							; set flags and exit		
  151 00:1405 C9 -  -  -  		ret
  152 00:1406 -  -  -  -  
  153 00:1406 -  -  -  -  ; ***************************************************************************************
  154 00:1406 -  -  -  -  ;
  155 00:1406 -  -  -  -  ;										Negate HL'HL
  156 00:1406 -  -  -  -  ;
  157 00:1406 -  -  -  -  ; ***************************************************************************************
  158 00:1406 -  -  -  -  
  159 00:1406 -  -  -  -  Int32Negate:
  160 00:1406 AF -  -  -  		xor 	a
  161 00:1407 CD 12 14 00 		call 	_I32NSubtract
  162 00:140B D9 -  -  -  		exx
  163 00:140C CD 12 14 00 		call 	_I32NSubtract
  164 00:1410 D9 -  -  -  		exx
  165 00:1411 C9 -  -  -  		ret
  166 00:1412 -  -  -  -  _I32NSubtract:
  167 00:1412 D5 -  -  -  		push 	de
  168 00:1413 EB -  -  -  		ex 		de,hl
  169 00:1414 21 00 00 00 		ld 		hl,$0000
  170 00:1418 52 ED 52 -  		zm_sbc_hlde_16		
  171 00:141B D1 -  -  -  		pop 	de
  172 00:141C C9 -  -  -  		ret
  173 00:141D -  -  -  -  		
  174 00:141D -  -  -  -  ; ***************************************************************************************
  175 00:141D -  -  -  -  ;
  176 00:141D -  -  -  -  ;									Changes and Updates
  177 00:141D -  -  -  -  ;
  178 00:141D -  -  -  -  ; ***************************************************************************************
  179 00:141D -  -  -  -  ;
  180 00:141D -  -  -  -  ;		Date			Notes
  181 00:141D -  -  -  -  ;		==== 			=====
  182 00:141D -  -  -  -  ;
  183 00:141D -  -  -  -  ; ***************************************************************************************
  184 00:141D -  -  -  -  		
Listing for file "_build.asm"
   78 00:141D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 00:141D -  -  -  -  ; ***************************************************************************************
    2 00:141D -  -  -  -  ; ***************************************************************************************
    3 00:141D -  -  -  -  ;
    4 00:141D -  -  -  -  ;		Name : 		itostring.asm
    5 00:141D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:141D -  -  -  -  ;		Date : 		3rd June 2022
    7 00:141D -  -  -  -  ;		Reviewed :	No
    8 00:141D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 00:141D -  -  -  -  ;
   10 00:141D -  -  -  -  ; ***************************************************************************************
   11 00:141D -  -  -  -  ;
   12 00:141D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 00:141D -  -  -  -  ;
   14 00:141D -  -  -  -  ; ***************************************************************************************
   15 00:141D -  -  -  -  
   16 00:141D -  -  -  -  Int32ToString:
   17 00:141D C5 -  -  -  		push 	bc 							; save string start
   18 00:141E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 00:141F E5 -  -  -  		push 	hl
   20 00:1420 11 00 00 00 		ld	 	de,$0000
   21 00:1424 D9 -  -  -  		exx
   22 00:1425 D5 -  -  -  		push 	de
   23 00:1426 E5 -  -  -  		push 	hl
   24 00:1427 11 00 00 00 		ld 		de,$000
   25 00:142B D9 -  -  -  		exx
   26 00:142C 5F -  -  -  		ld 		e,a 						; put base in E
   27 00:142D -  -  -  -  		;
   28 00:142D CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 00:142F 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 00:1431 ED 44 -  -  		neg 								; negate base and put in E
   31 00:1433 5F -  -  -  		ld 		e,a
   32 00:1434 -  -  -  -  		;
   33 00:1434 D9 -  -  -  		exx 								; is it -ve ?
   34 00:1435 CB 7C -  -  		bit 	7,h
   35 00:1437 D9 -  -  -  		exx
   36 00:1438 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 00:143A -  -  -  -  		;
   38 00:143A CD 06 14 00 		call 	Int32Negate 				; yes, negate HL'HL
   39 00:143E -  -  -  -  		;
   40 00:143E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 00:1440 02 -  -  -  		ld 		(bc),a
   42 00:1441 03 -  -  -  		inc 	bc
   43 00:1442 -  -  -  -  _I32TSNotNegative:	
   44 00:1442 CD 51 14 00 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 00:1446 -  -  -  -  _I32TSExit:
   46 00:1446 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 00:1448 02 -  -  -  		ld 		(bc),a 
   48 00:1449 -  -  -  -  
   49 00:1449 D9 -  -  -  		exx 								; restore registers and exit.
   50 00:144A E1 -  -  -  		pop 	hl
   51 00:144B D1 -  -  -  		pop 	de
   52 00:144C D9 -  -  -  		exx
   53 00:144D E1 -  -  -  		pop 	hl
   54 00:144E D1 -  -  -  		pop 	de
   55 00:144F C1 -  -  -  		pop 	bc
   56 00:1450 C9 -  -  -  		ret
   57 00:1451 -  -  -  -  
   58 00:1451 -  -  -  -  _I32RecursiveConvert:
   59 00:1451 CD 5E 12 00 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 00:1455 F5 -  -  -  		push 	af 							; save remainder
   61 00:1456 CD D5 13 00 		call 	Int32Zero		 			; check result is non zero
   62 00:145A C4 51 14 00 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 00:145E F1 -  -  -  		pop 	af 							; restore remainder
   64 00:145F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 00:1461 38 02 -  -  		jr 		c,_I32NotHex
   66 00:1463 C6 07 -  -  		add 	a,7
   67 00:1465 -  -  -  -  _I32NotHex:
   68 00:1465 C6 30 -  -  		add 	a,48
   69 00:1467 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 00:1468 03 -  -  -  		inc 	bc
   71 00:1469 C9 -  -  -  		ret		
   72 00:146A -  -  -  -  
   73 00:146A -  -  -  -  ; ***************************************************************************************
   74 00:146A -  -  -  -  ;
   75 00:146A -  -  -  -  ;									Changes and Updates
   76 00:146A -  -  -  -  ;
   77 00:146A -  -  -  -  ; ***************************************************************************************
   78 00:146A -  -  -  -  ;
   79 00:146A -  -  -  -  ;		Date			Notes
   80 00:146A -  -  -  -  ;		==== 			=====
   81 00:146A -  -  -  -  ;
   82 00:146A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 00:146A -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 00:146A -  -  -  -  ; ***************************************************************************************
    2 00:146A -  -  -  -  ; ***************************************************************************************
    3 00:146A -  -  -  -  ;
    4 00:146A -  -  -  -  ;		Name : 		aquarius_io.asm
    5 00:146A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:146A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:146A -  -  -  -  ;		Reviewed :	No
    8 00:146A -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 00:146A -  -  -  -  ;
   10 00:146A -  -  -  -  ; ***************************************************************************************
   11 00:146A -  -  -  -  ; ***************************************************************************************
   12 00:146A -  -  -  -  
   13 00:146A -  -  -  -  #ifdef AQUARIUS
   14 00:146A             
   15 00:146A             ; ***************************************************************************************
   16 00:146A             ;
   17 00:146A             ;								Initialise system stuff
   18 00:146A             ;
   19 00:146A             ; ***************************************************************************************
   20 00:146A             
   21 00:146A             SYSInitialise:
   22 00:146A             	ld 		a,$0b 								; Aquarius clear screen
   23 00:146A             	call 	SYSPrintChar
   24 00:146A             	ret
   25 00:146A             
   26 00:146A             ; ***************************************************************************************
   27 00:146A             ;
   28 00:146A             ;								Terminate system stuff
   29 00:146A             ;
   30 00:146A             ; ***************************************************************************************
   31 00:146A             
   32 00:146A             SYSTerminate:
   33 00:146A             	jr 		SYSTerminate
   34 00:146A             
   35 00:146A             ; ***************************************************************************************
   36 00:146A             ;
   37 00:146A             ;						Print A character (note 13,10 required for CRLF)
   38 00:146A             ;
   39 00:146A             ; ***************************************************************************************
   40 00:146A             
   41 00:146A             SYSPrintChar:
   42 00:146A             	push 	af 									; we stack everything including alt registers
   43 00:146A             	push 	bc
   44 00:146A             	push 	de
   45 00:146A             	push 	hl
   46 00:146A             	push 	ix
   47 00:146A             	push 	iy
   48 00:146A             	exx
   49 00:146A             	push 	bc
   50 00:146A             	push 	de
   51 00:146A             	push 	hl
   52 00:146A             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 00:146A             	pop 	hl
   54 00:146A             	pop 	de
   55 00:146A             	pop 	bc
   56 00:146A             	exx
   57 00:146A             	pop 	iy
   58 00:146A             	pop 	ix
   59 00:146A             	pop 	hl
   60 00:146A             	pop 	de
   61 00:146A             	pop 	bc
   62 00:146A             	pop 	af
   63 00:146A             	ret		
   64 00:146A             
   65 00:146A             ; ***************************************************************************************
   66 00:146A             ;
   67 00:146A             ;									Print Newline
   68 00:146A             ;
   69 00:146A             ; ***************************************************************************************
   70 00:146A             
   71 00:146A             SYSPrintCRLF:
   72 00:146A             	push 	af
   73 00:146A             	ld 		a,13
   74 00:146A             	call 	SYSPrintChar
   75 00:146A             	ld 		a,10
   76 00:146A             	call 	SYSPrintChar
   77 00:146A             	pop 	af
   78 00:146A             	ret
   79 00:146A             
   80 00:146A             ; ***************************************************************************************
   81 00:146A             ;
   82 00:146A             ;									Get time into HL'HL
   83 00:146A             ;
   84 00:146A             ; ***************************************************************************************
   85 00:146A             
   86 00:146A             SYSGetTimer:
   87 00:146A              	in 		a,($00)
   88 00:146A              	ld 		l,a
   89 00:146A              	in 		a,($01)
   90 00:146A              	ld 		h,a
   91 00:146A              	exx
   92 00:146A              	in 		a,($02)
   93 00:146A              	ld 		l,a
   94 00:146A              	in 		a,($03)
   95 00:146A              	ld 		h,a
   96 00:146A              	exx
   97 00:146A             	ret 	
   98 00:146A             	
   99 00:146A             #endif
  100 00:146A -  -  -  -  
  101 00:146A -  -  -  -  ; ***************************************************************************************
  102 00:146A -  -  -  -  ;
  103 00:146A -  -  -  -  ;									Changes and Updates
  104 00:146A -  -  -  -  ;
  105 00:146A -  -  -  -  ; ***************************************************************************************
  106 00:146A -  -  -  -  ;
  107 00:146A -  -  -  -  ;		Date			Notes
  108 00:146A -  -  -  -  ;		==== 			=====
  109 00:146A -  -  -  -  ;
  110 00:146A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 00:146A -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 00:146A -  -  -  -  ; ***************************************************************************************
    2 00:146A -  -  -  -  ; ***************************************************************************************
    3 00:146A -  -  -  -  ;
    4 00:146A -  -  -  -  ;		Name : 		dummy_io.asm
    5 00:146A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:146A -  -  -  -  ;		Date : 		3rd June 2022
    7 00:146A -  -  -  -  ;		Reviewed :	No
    8 00:146A -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 00:146A -  -  -  -  ;
   10 00:146A -  -  -  -  ; ***************************************************************************************
   11 00:146A -  -  -  -  ; ***************************************************************************************
   12 00:146A -  -  -  -  
   13 00:146A -  -  -  -  #ifdef CLEANEZ80
   14 00:146A -  -  -  -  
   15 00:146A -  -  -  -  ; ***************************************************************************************
   16 00:146A -  -  -  -  ;
   17 00:146A -  -  -  -  ;								Initialise system stuff
   18 00:146A -  -  -  -  ;
   19 00:146A -  -  -  -  ; ***************************************************************************************
   20 00:146A -  -  -  -  
   21 00:146A -  -  -  -  SYSInitialise:
   22 00:146A C9 -  -  -  	ret
   23 00:146B -  -  -  -  
   24 00:146B -  -  -  -  ; ***************************************************************************************
   25 00:146B -  -  -  -  ;
   26 00:146B -  -  -  -  ;								Terminate system stuff
   27 00:146B -  -  -  -  ;
   28 00:146B -  -  -  -  ; ***************************************************************************************
   29 00:146B -  -  -  -  
   30 00:146B -  -  -  -  SYSTerminate:
   31 00:146B C9 -  -  -  	ret
   32 00:146C -  -  -  -  
   33 00:146C -  -  -  -  ; ***************************************************************************************
   34 00:146C -  -  -  -  ;
   35 00:146C -  -  -  -  ;								Print A character
   36 00:146C -  -  -  -  ;
   37 00:146C -  -  -  -  ; ***************************************************************************************
   38 00:146C -  -  -  -  
   39 00:146C -  -  -  -  SYSPrintChar:
   40 00:146C C9 -  -  -  	ret		
   41 00:146D -  -  -  -  
   42 00:146D -  -  -  -  ; ***************************************************************************************
   43 00:146D -  -  -  -  ;
   44 00:146D -  -  -  -  ;									Print Newline
   45 00:146D -  -  -  -  ;
   46 00:146D -  -  -  -  ; ***************************************************************************************
   47 00:146D -  -  -  -  
   48 00:146D -  -  -  -  SYSPrintCRLF:
   49 00:146D C9 -  -  -  	ret
   50 00:146E -  -  -  -  
   51 00:146E -  -  -  -  ; ***************************************************************************************
   52 00:146E -  -  -  -  ;
   53 00:146E -  -  -  -  ;									Get time into HL'HL
   54 00:146E -  -  -  -  ;
   55 00:146E -  -  -  -  ; ***************************************************************************************
   56 00:146E -  -  -  -  
   57 00:146E -  -  -  -  SYSGetTimer:
   58 00:146E C9 -  -  -  	ret
   59 00:146F -  -  -  -  
   60 00:146F -  -  -  -  #endif
   61 00:146F -  -  -  -  
   62 00:146F -  -  -  -  ; ***************************************************************************************
   63 00:146F -  -  -  -  ;
   64 00:146F -  -  -  -  ;									Changes and Updates
   65 00:146F -  -  -  -  ;
   66 00:146F -  -  -  -  ; ***************************************************************************************
   67 00:146F -  -  -  -  ;
   68 00:146F -  -  -  -  ;		Date			Notes
   69 00:146F -  -  -  -  ;		==== 			=====
   70 00:146F -  -  -  -  ;
   71 00:146F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 00:146F -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 00:146F -  -  -  -  ; ***************************************************************************************
    2 00:146F -  -  -  -  ; ***************************************************************************************
    3 00:146F -  -  -  -  ;
    4 00:146F -  -  -  -  ;		Name : 		ti84_io.asm
    5 00:146F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:146F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:146F -  -  -  -  ;		Reviewed :	No
    8 00:146F -  -  -  -  ;		Purpose :	TI84 specific code
    9 00:146F -  -  -  -  ;
   10 00:146F -  -  -  -  ; ***************************************************************************************
   11 00:146F -  -  -  -  ; ***************************************************************************************
   12 00:146F -  -  -  -  
   13 00:146F -  -  -  -  #ifdef TI84
   14 00:146F             
   15 00:146F             ; ***************************************************************************************
   16 00:146F             ;
   17 00:146F             ;								Initialise system stuff
   18 00:146F             ;
   19 00:146F             ; ***************************************************************************************
   20 00:146F             
   21 00:146F             SYSInitialise:
   22 00:146F             	di
   23 00:146F             	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 00:146F             	ld 		(_IYTemp84),iy
   25 00:146F             	ret
   26 00:146F             
   27 00:146F             ; ***************************************************************************************
   28 00:146F             ;
   29 00:146F             ;								Terminate system stuff
   30 00:146F             ;
   31 00:146F             ; ***************************************************************************************
   32 00:146F             
   33 00:146F             SYSTerminate:
   34 00:146F             	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 00:146F             	pop 	iy 									; throw return address from SYSInitialise call
   36 00:146F             	ld 		iy,(_IYTemp84) 						; restore IY
   37 00:146F             	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 00:146F             	ei
   39 00:146F             	ret 										; and exit.
   40 00:146F             
   41 00:146F             _StackTemp84:									; temp var for TI84 only.
   42 00:146F             	.dw 	0,0
   43 00:146F             _IYTemp84:
   44 00:146F             	.dw 	0,0		
   45 00:146F             
   46 00:146F             ; ***************************************************************************************
   47 00:146F             ;
   48 00:146F             ;								Print A character
   49 00:146F             ;
   50 00:146F             ; ***************************************************************************************
   51 00:146F             
   52 00:146F             SYSPrintChar:
   53 00:146F             	push 	af 									; we stack everything including alt registers
   54 00:146F             	push 	bc
   55 00:146F             	push 	de
   56 00:146F             	push 	hl
   57 00:146F             	push 	ix
   58 00:146F             	push 	iy
   59 00:146F             	exx
   60 00:146F             	push 	bc
   61 00:146F             	push 	de
   62 00:146F             	push 	hl
   63 00:146F             
   64 00:146F             	ld 		iy,(_IYTemp84)
   65 00:146F             	call 	_PutC 								; print A as character
   66 00:146F             	di
   67 00:146F             	ld 		(_IYTemp84),iy
   68 00:146F             
   69 00:146F             	pop 	hl
   70 00:146F             	pop 	de
   71 00:146F             	pop 	bc
   72 00:146F             	exx
   73 00:146F             	pop 	iy
   74 00:146F             	pop 	ix
   75 00:146F             	pop 	hl
   76 00:146F             	pop 	de
   77 00:146F             	pop 	bc
   78 00:146F             	pop 	af
   79 00:146F             	ret		
   80 00:146F             
   81 00:146F             ; ***************************************************************************************
   82 00:146F             ;
   83 00:146F             ;									Print Newline
   84 00:146F             ;
   85 00:146F             ; ***************************************************************************************
   86 00:146F             
   87 00:146F             SYSPrintCRLF:
   88 00:146F             	push 	af 									; we stack everything including alt registers
   89 00:146F             	push 	bc
   90 00:146F             	push 	de
   91 00:146F             	push 	hl
   92 00:146F             	push 	ix
   93 00:146F             	push 	iy
   94 00:146F             	exx
   95 00:146F             	push 	bc
   96 00:146F             	push 	de
   97 00:146F             	push 	hl
   98 00:146F             
   99 00:146F             	ld 		iy,(_IYTemp84)
  100 00:146F             	call 	_newline
  101 00:146F             	di
  102 00:146F             	ld 		(_IYTemp84),iy
  103 00:146F             
  104 00:146F             	pop 	hl
  105 00:146F             	pop 	de
  106 00:146F             	pop 	bc
  107 00:146F             	exx
  108 00:146F             	pop 	iy
  109 00:146F             	pop 	ix
  110 00:146F             	pop 	hl
  111 00:146F             	pop 	de
  112 00:146F             	pop 	bc
  113 00:146F             	pop 	af
  114 00:146F             	ret
  115 00:146F             
  116 00:146F             ; ***************************************************************************************
  117 00:146F             ;
  118 00:146F             ;									Get time into HL'HL
  119 00:146F             ;
  120 00:146F             ; ***************************************************************************************
  121 00:146F             
  122 00:146F             SYSGetTimer:
  123 00:146F             	ld 		hl,$1234
  124 00:146F             	exx
  125 00:146F             	ld 		hl,$5678
  126 00:146F             	exx
  127 00:146F             	ret
  128 00:146F             
  129 00:146F             #endif
  130 00:146F -  -  -  -  
  131 00:146F -  -  -  -  ; ***************************************************************************************
  132 00:146F -  -  -  -  ;
  133 00:146F -  -  -  -  ;									Changes and Updates
  134 00:146F -  -  -  -  ;
  135 00:146F -  -  -  -  ; ***************************************************************************************
  136 00:146F -  -  -  -  ;
  137 00:146F -  -  -  -  ;		Date			Notes
  138 00:146F -  -  -  -  ;		==== 			=====
  139 00:146F -  -  -  -  ;
  140 00:146F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   82 00:146F -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 00:146F -  -  -  -  ; ***************************************************************************************
    2 00:146F -  -  -  -  ; ***************************************************************************************
    3 00:146F -  -  -  -  ;
    4 00:146F -  -  -  -  ;		Name : 		basic.asm
    5 00:146F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:146F -  -  -  -  ;		Date : 		3rd June 2022
    7 00:146F -  -  -  -  ;		Reviewed :	No
    8 00:146F -  -  -  -  ;		Purpose :	Main program.
    9 00:146F -  -  -  -  ;
   10 00:146F -  -  -  -  ; ***************************************************************************************
   11 00:146F -  -  -  -  ; ***************************************************************************************
   12 00:146F -  -  -  -  
   13 00:146F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 00:1800 -  -  -  -  TestInstance:
   15 00:1800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 00:1800 -  -  -  -  ;
    2 00:1800 -  -  -  -  ;	This code automatically generated.
    3 00:1800 -  -  -  -  ;
    4 00:1800 -  -  -  -  TestProgram:
    5 00:1800 0D 01 00 C1 
              3F 05 62 65 
              67 69 6E 0D 
              80 0C 02 00 
              B2 0A 8F 41 
              B3 42 5C 50 
              80 05 03 00 
              B5 80 0B 04 
              00 C1 3F 03 
              65 6E 64 0D 
              80 00 -  -  	.db	$0d,$01,$00,$c1,$3f,$05,$62,$65,$67,$69,$6e,$0d,$80,$0c,$02,$00,$b2,$0a,$8f,$41,$b3,$42,$5c,$50,$80,$05,$03,$00,$b5,$80,$0b,$04,$00,$c1,$3f,$03,$65,$6e,$64,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 00:182A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 00:282A -  -  -  -  EndTestInstance:
   18 00:282A -  -  -  -  		
   19 00:282A -  -  -  -  ; ***************************************************************************************
   20 00:282A -  -  -  -  ;
   21 00:282A -  -  -  -  ;									Changes and Updates
   22 00:282A -  -  -  -  ;
   23 00:282A -  -  -  -  ; ***************************************************************************************
   24 00:282A -  -  -  -  ;
   25 00:282A -  -  -  -  ;		Date			Notes
   26 00:282A -  -  -  -  ;		==== 			=====
   27 00:282A -  -  -  -  ;
   28 00:282A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   83 00:282A -  -  -  -  FinalAddress:
