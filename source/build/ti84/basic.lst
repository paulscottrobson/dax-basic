    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a4
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_INT                             	$009b ; int
   37 00:0000 -  -  -  -  #define KWD_STR                             	$009c ; str
   38 00:0000 -  -  -  -  #define KWD_CHR                             	$009d ; chr
   39 00:0000 -  -  -  -  #define KWD_ASC                             	$009e ; asc
   40 00:0000 -  -  -  -  #define KWD_NOT                             	$009f ; not
   41 00:0000 -  -  -  -  #define KWD_PAGE                            	$00a0 ; page
   42 00:0000 -  -  -  -  #define KWD_STRING                          	$00a1 ; string
   43 00:0000 -  -  -  -  #define KWD_TIME                            	$00a2 ; time
   44 00:0000 -  -  -  -  #define KWD_TOP                             	$00a3 ; top
   45 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a4 ; )
   46 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a5 ; ,
   47 00:0000 -  -  -  -  #define KWD_COLON                           	$00a6 ; :
   48 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a7 ; ;
   49 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a8 ; '
   50 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a9 ; repeat
   51 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00aa ; until
   52 00:0000 -  -  -  -  #define KWD_IF                              	$00ab ; if
   53 00:0000 -  -  -  -  #define KWD_THEN                            	$00ac ; then
   54 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ad ; else
   55 00:0000 -  -  -  -  #define KWD_FOR                             	$00ae ; for
   56 00:0000 -  -  -  -  #define KWD_TO                              	$00af ; to
   57 00:0000 -  -  -  -  #define KWD_STEP                            	$00b0 ; step
   58 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b1 ; next
   59 00:0000 -  -  -  -  #define KWD_DEF                             	$00b2 ; def
   60 00:0000 -  -  -  -  #define KWD_PROC                            	$00b3 ; proc
   61 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b4 ; endproc
   62 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b5 ; local
   63 00:0000 -  -  -  -  #define KWD_DIM                             	$00b6 ; dim
   64 00:0000 -  -  -  -  #define KWD_REM                             	$00b7 ; rem
   65 00:0000 -  -  -  -  #define KWD_LET                             	$00b8 ; let
   66 00:0000 -  -  -  -  #define KWD_VDU                             	$00b9 ; vdu
   67 00:0000 -  -  -  -  #define KWD_PRINT                           	$00ba ; print
   68 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bb ; load
   69 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bc ; save
   70 00:0000 -  -  -  -  #define KWD_LIST                            	$00bd ; list
   71 00:0000 -  -  -  -  #define KWD_NEW                             	$00be ; new
   72 00:0000 -  -  -  -  #define KWD_RUN                             	$00bf ; run
   73 00:0000 -  -  -  -  #define KWD_READ                            	$00c0 ; read
   74 00:0000 -  -  -  -  #define KWD_DATA                            	$00c1 ; data
   75 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c2 ; restore
   76 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c3 ; assert
   77 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c4 ; clear
   78 00:0000 -  -  -  -  #define KWD_END                             	$00c5 ; end
   79 00:0000 -  -  -  -  #define KWD_STOP                            	$00c6 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 7D B3 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B4 D1 		ld 		de,TestInstance
   45 D1:A889 21 0D D3 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD F5 AD D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D9 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 85 A9 D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD A3 B3 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 89 B3 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 1F 
              AA D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 1F 
              AA D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  		
   59 D1:A8CD -  -  -  -  TopAddress: 								; first free location after PAGE.
   60 D1:A8CD 00 00 00 00 		.dw 	0,0
   61 D1:A8D1 -  -  -  -  
   62 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   63 D1:A8D1 -  -  -  -  ;
   64 D1:A8D1 -  -  -  -  ;										Run variables
   65 D1:A8D1 -  -  -  -  ;
   66 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   67 D1:A8D1 -  -  -  -  
   68 D1:A8D1 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  		
   71 D1:A8D5 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 D1:A8D5 00 00 00 00 		.dw 	0,0
   73 D1:A8D9 -  -  -  -  
   74 D1:A8D9 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 D1:A8D9 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8DF -  -  -  -  
   77 D1:A8DF -  -  -  -  AConvert: 									; used for address conversions.
   78 D1:A8DF 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 D1:A8E5 -  -  -  -  		
   80 D1:A8E5 -  -  -  -  RandomSeed: 								; random number seeds.
   81 D1:A8E5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 D1:A8F5 -  -  -  -  
   83 D1:A8F5 -  -  -  -  s; ***************************************************************************************
   84 D1:A8F5 -  -  -  -  ;
   85 D1:A8F5 -  -  -  -  ;										  Buffers
   86 D1:A8F5 -  -  -  -  ;
   87 D1:A8F5 -  -  -  -  ; ***************************************************************************************
   88 D1:A8F5 -  -  -  -  
   89 D1:A8F5 -  -  -  -  ConvertBuffer:
   90 D1:A8F5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   91 D1:A935 -  -  -  -  
   92 D1:A935 -  -  -  -  ; ***************************************************************************************
   93 D1:A935 -  -  -  -  ;
   94 D1:A935 -  -  -  -  ;									Changes and Updates
   95 D1:A935 -  -  -  -  ;
   96 D1:A935 -  -  -  -  ; ***************************************************************************************
   97 D1:A935 -  -  -  -  ;
   98 D1:A935 -  -  -  -  ;		Date			Notes
   99 D1:A935 -  -  -  -  ;		==== 			=====
  100 D1:A935 -  -  -  -  ;
  101 D1:A935 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A935 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A935 -  -  -  -  ; ***************************************************************************************
    2 D1:A935 -  -  -  -  ; ***************************************************************************************
    3 D1:A935 -  -  -  -  ;
    4 D1:A935 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A935 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A935 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A935 -  -  -  -  ;		Reviewed :	No
    8 D1:A935 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A935 -  -  -  -  ;
   10 D1:A935 -  -  -  -  ; ***************************************************************************************
   11 D1:A935 -  -  -  -  ; ***************************************************************************************
   12 D1:A935 -  -  -  -  
   13 D1:A935 -  -  -  -  ; ***************************************************************************************
   14 D1:A935 -  -  -  -  ;
   15 D1:A935 -  -  -  -  ;									ASSERT command
   16 D1:A935 -  -  -  -  ;
   17 D1:A935 -  -  -  -  ; ***************************************************************************************
   18 D1:A935 -  -  -  -  
   19 D1:A935 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A935 CD 34 AC D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A939 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A93F C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A940 3E 01 C3 1F 
              AA D1 -  -  		ERR_ASSERT
   24 D1:A946 -  -  -  -  
   25 D1:A946 -  -  -  -  ; ***************************************************************************************
   26 D1:A946 -  -  -  -  ;
   27 D1:A946 -  -  -  -  ;									Changes and Updates
   28 D1:A946 -  -  -  -  ;
   29 D1:A946 -  -  -  -  ; ***************************************************************************************
   30 D1:A946 -  -  -  -  ;
   31 D1:A946 -  -  -  -  ;		Date			Notes
   32 D1:A946 -  -  -  -  ;		==== 			=====
   33 D1:A946 -  -  -  -  ;
   34 D1:A946 -  -  -  -  ; ***************************************************************************************
   35 D1:A946 -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A946 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A946 -  -  -  -  ; ***************************************************************************************
    2 D1:A946 -  -  -  -  ; ***************************************************************************************
    3 D1:A946 -  -  -  -  ;
    4 D1:A946 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A946 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A946 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A946 -  -  -  -  ;		Reviewed :	No
    8 D1:A946 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A946 -  -  -  -  ;
   10 D1:A946 -  -  -  -  ; ***************************************************************************************
   11 D1:A946 -  -  -  -  ; ***************************************************************************************
   12 D1:A946 -  -  -  -  
   13 D1:A946 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A946 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A946 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A946 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A946 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A946 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A946 C3 89 AA D1 		jp 		SyntaxError
   20 D1:A94A -  -  -  -  
   21 D1:A94A -  -  -  -  ; ***************************************************************************************
   22 D1:A94A -  -  -  -  ;
   23 D1:A94A -  -  -  -  ;									Changes and Updates
   24 D1:A94A -  -  -  -  ;
   25 D1:A94A -  -  -  -  ; ***************************************************************************************
   26 D1:A94A -  -  -  -  ;
   27 D1:A94A -  -  -  -  ;		Date			Notes
   28 D1:A94A -  -  -  -  ;		==== 			=====
   29 D1:A94A -  -  -  -  ;
   30 D1:A94A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A94A -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A94A -  -  -  -  ; ***************************************************************************************
    2 D1:A94A -  -  -  -  ; ***************************************************************************************
    3 D1:A94A -  -  -  -  ;
    4 D1:A94A -  -  -  -  ;		Name : 		colon.asm
    5 D1:A94A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A94A -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A94A -  -  -  -  ;		Reviewed :	No
    8 D1:A94A -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A94A -  -  -  -  ;
   10 D1:A94A -  -  -  -  ; ***************************************************************************************
   11 D1:A94A -  -  -  -  ; ***************************************************************************************
   12 D1:A94A -  -  -  -  
   13 D1:A94A -  -  -  -  ; ***************************************************************************************
   14 D1:A94A -  -  -  -  ;
   15 D1:A94A -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A94A -  -  -  -  ;
   17 D1:A94A -  -  -  -  ; ***************************************************************************************
   18 D1:A94A -  -  -  -  
   19 D1:A94A -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A94A C9 -  -  -  		ret
   21 D1:A94B -  -  -  -  
   22 D1:A94B -  -  -  -  ; ***************************************************************************************
   23 D1:A94B -  -  -  -  ;
   24 D1:A94B -  -  -  -  ;									Changes and Updates
   25 D1:A94B -  -  -  -  ;
   26 D1:A94B -  -  -  -  ; ***************************************************************************************
   27 D1:A94B -  -  -  -  ;
   28 D1:A94B -  -  -  -  ;		Date			Notes
   29 D1:A94B -  -  -  -  ;		==== 			=====
   30 D1:A94B -  -  -  -  ;
   31 D1:A94B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A94B -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A94B -  -  -  -  ; ***************************************************************************************
    2 D1:A94B -  -  -  -  ; ***************************************************************************************
    3 D1:A94B -  -  -  -  ;
    4 D1:A94B -  -  -  -  ;		Name : 		end.asm
    5 D1:A94B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A94B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A94B -  -  -  -  ;		Reviewed :	No
    8 D1:A94B -  -  -  -  ;		Purpose :	End command
    9 D1:A94B -  -  -  -  ;
   10 D1:A94B -  -  -  -  ; ***************************************************************************************
   11 D1:A94B -  -  -  -  ; ***************************************************************************************
   12 D1:A94B -  -  -  -  
   13 D1:A94B -  -  -  -  ; ***************************************************************************************
   14 D1:A94B -  -  -  -  ;
   15 D1:A94B -  -  -  -  ;										END command
   16 D1:A94B -  -  -  -  ;
   17 D1:A94B -  -  -  -  ; ***************************************************************************************
   18 D1:A94B -  -  -  -  
   19 D1:A94B -  -  -  -  Command_END: 	;; [end]
   20 D1:A94B 3E 00 C3 1F 
              AA D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A951 -  -  -  -  
   22 D1:A951 -  -  -  -  ; ***************************************************************************************
   23 D1:A951 -  -  -  -  ;
   24 D1:A951 -  -  -  -  ;									Changes and Updates
   25 D1:A951 -  -  -  -  ;
   26 D1:A951 -  -  -  -  ; ***************************************************************************************
   27 D1:A951 -  -  -  -  ;
   28 D1:A951 -  -  -  -  ;		Date			Notes
   29 D1:A951 -  -  -  -  ;		==== 			=====
   30 D1:A951 -  -  -  -  ;
   31 D1:A951 -  -  -  -  ; ***************************************************************************************
   32 D1:A951 -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A951 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A951 -  -  -  -  ; ***************************************************************************************
    2 D1:A951 -  -  -  -  ; ***************************************************************************************
    3 D1:A951 -  -  -  -  ;
    4 D1:A951 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A951 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A951 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A951 -  -  -  -  ;		Reviewed :	None
    8 D1:A951 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A951 -  -  -  -  ;
   10 D1:A951 -  -  -  -  ; ***************************************************************************************
   11 D1:A951 -  -  -  -  ; ***************************************************************************************
   12 D1:A951 -  -  -  -  
   13 D1:A951 -  -  -  -  ; ***************************************************************************************
   14 D1:A951 -  -  -  -  ;
   15 D1:A951 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A951 -  -  -  -  ;
   17 D1:A951 -  -  -  -  ; ***************************************************************************************
   18 D1:A951 -  -  -  -  
   19 D1:A951 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A951 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A956 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A95A DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A95D DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A95F -  -  -  -  		;
   25 D1:A95F ED 7B D5 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A964 C3 93 A9 D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A968 -  -  -  -  
   28 D1:A968 -  -  -  -  ; ***************************************************************************************
   29 D1:A968 -  -  -  -  ;
   30 D1:A968 -  -  -  -  ;									Changes and Updates
   31 D1:A968 -  -  -  -  ;
   32 D1:A968 -  -  -  -  ; ***************************************************************************************
   33 D1:A968 -  -  -  -  ;
   34 D1:A968 -  -  -  -  ;		Date			Notes
   35 D1:A968 -  -  -  -  ;		==== 			=====
   36 D1:A968 -  -  -  -  ;
   37 D1:A968 -  -  -  -  ; ***************************************************************************************
   38 D1:A968 -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A968 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:A968 -  -  -  -  ; ***************************************************************************************
    2 D1:A968 -  -  -  -  ; ***************************************************************************************
    3 D1:A968 -  -  -  -  ;
    4 D1:A968 -  -  -  -  ;		Name : 		rem.asm
    5 D1:A968 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A968 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A968 -  -  -  -  ;		Reviewed :	No
    8 D1:A968 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:A968 -  -  -  -  ;
   10 D1:A968 -  -  -  -  ; ***************************************************************************************
   11 D1:A968 -  -  -  -  ; ***************************************************************************************
   12 D1:A968 -  -  -  -  
   13 D1:A968 -  -  -  -  ; ***************************************************************************************
   14 D1:A968 -  -  -  -  ;
   15 D1:A968 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:A968 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:A968 -  -  -  -  ;
   18 D1:A968 -  -  -  -  ; ***************************************************************************************
   19 D1:A968 -  -  -  -  
   20 D1:A968 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:A968 -  -  -  -  Command_REM2: 	;; [']
   22 D1:A968 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:A96B DD 23 -  -  		inc 	ix
   24 D1:A96D FE A6 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:A96F C8 -  -  -  		ret 	z
   26 D1:A970 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:A972 C8 -  -  -  		ret 	z
   28 D1:A973 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:A975 C2 89 AA D1 		jp 		nz,SyntaxError
   30 D1:A979 -  -  -  -  		;		
   31 D1:A979 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:A97D DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:A980 13 -  -  -  		inc 	de 
   34 D1:A981 13 -  -  -  		inc 	de
   35 D1:A982 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:A984 C9 -  -  -  		ret
   37 D1:A985 -  -  -  -  
   38 D1:A985 -  -  -  -  ; ***************************************************************************************
   39 D1:A985 -  -  -  -  ;
   40 D1:A985 -  -  -  -  ;									Changes and Updates
   41 D1:A985 -  -  -  -  ;
   42 D1:A985 -  -  -  -  ; ***************************************************************************************
   43 D1:A985 -  -  -  -  ;
   44 D1:A985 -  -  -  -  ;		Date			Notes
   45 D1:A985 -  -  -  -  ;		==== 			=====
   46 D1:A985 -  -  -  -  ;
   47 D1:A985 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 D1:A985 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:A985 -  -  -  -  ; ***************************************************************************************
    2 D1:A985 -  -  -  -  ; ***************************************************************************************
    3 D1:A985 -  -  -  -  ;
    4 D1:A985 -  -  -  -  ;		Name : 		run.asm
    5 D1:A985 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A985 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A985 -  -  -  -  ;		Reviewed :	No
    8 D1:A985 -  -  -  -  ;		Purpose :	Run command
    9 D1:A985 -  -  -  -  ;
   10 D1:A985 -  -  -  -  ; ***************************************************************************************
   11 D1:A985 -  -  -  -  ; ***************************************************************************************
   12 D1:A985 -  -  -  -  
   13 D1:A985 -  -  -  -  ; ***************************************************************************************
   14 D1:A985 -  -  -  -  ;
   15 D1:A985 -  -  -  -  ;										RUN command
   16 D1:A985 -  -  -  -  ;
   17 D1:A985 -  -  -  -  ; ***************************************************************************************
   18 D1:A985 -  -  -  -  
   19 D1:A985 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:A985 CD BE AD D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:A989 -  -  -  -  
   22 D1:A989 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:A98E ED 73 D5 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:A993 -  -  -  -  		;
   25 D1:A993 -  -  -  -  		; 		New line at IX.
   26 D1:A993 -  -  -  -  		;
   27 D1:A993 -  -  -  -  CRNewLine:
   28 D1:A993 DD 22 D1 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 D1:A998 -  -  -  -  		;
   30 D1:A998 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 D1:A99B B7 -  -  -  		or 		a
   32 D1:A99C CA 4B A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   33 D1:A9A0 -  -  -  -  		;
   34 D1:A9A0 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 D1:A9A2 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 D1:A9A4 DD 23 -  -  		inc 	ix
   37 D1:A9A6 -  -  -  -  		;
   38 D1:A9A6 -  -  -  -  		; 		New command at IX
   39 D1:A9A6 -  -  -  -  		;
   40 D1:A9A6 -  -  -  -  _CRNewCommand:	
   41 D1:A9A6 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 D1:A9A9 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 D1:A9AA F2 E1 A9 D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 D1:A9AE -  -  -  -  		;
   45 D1:A9AE FE A4 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 D1:A9B0 30 06 -  -  		jr  	nc,_CRDoCommand
   47 D1:A9B2 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 D1:A9B4 D2 D5 A9 D1 		jp 		nc,_CRAlternateLets
   49 D1:A9B8 -  -  -  -  		;
   50 D1:A9B8 -  -  -  -  _CRDoCommand:		
   51 D1:A9B8 E6 7F 21 00 
              00 00 6F 29 
              29 11 57 B0 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 D1:A9CD DD 23 -  -  		inc 	ix 							; skip over token.
   53 D1:A9CF CD D9 A8 D1 		call 	JumpCode 					; call the routine.
   54 D1:A9D3 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 D1:A9D5 -  -  -  -  		;
   56 D1:A9D5 -  -  -  -  		; 		Do CALL (HL)
   57 D1:A9D5 -  -  -  -  		;
   58 D1:A9D5 -  -  -  -  		;
   59 D1:A9D5 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 D1:A9D5 -  -  -  -  		;		
   61 D1:A9D5 -  -  -  -  _CRAlternateLets:		
   62 D1:A9D5 FE 83 -  -  		cp 		KWD_PLING
   63 D1:A9D7 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 D1:A9D9 FE 84 -  -  		cp 		KWD_QMARK
   65 D1:A9DB 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 D1:A9DD C3 89 AA D1 		jp 		SyntaxError
   67 D1:A9E1 -  -  -  -  		;
   68 D1:A9E1 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 D1:A9E1 -  -  -  -  		;
   70 D1:A9E1 -  -  -  -  _CRAssignmentHandler:		
   71 D1:A9E1 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 D1:A9E3 D2 89 AA D1 		jp 		nc,SyntaxError
   73 D1:A9E7 -  -  -  -  _CRAssignmentLet:		
   74 D1:A9E7 3E 0C C3 1F 
              AA D1 -  -  		ERR_TODO
   75 D1:A9ED -  -  -  -  		;call	Command_LET
   76 D1:A9ED C3 A6 A9 D1 		jp 		_CRNewCommand
   77 D1:A9F1 -  -  -  -  
   78 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   79 D1:A9F1 -  -  -  -  ;
   80 D1:A9F1 -  -  -  -  ;									Changes and Updates
   81 D1:A9F1 -  -  -  -  ;
   82 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   83 D1:A9F1 -  -  -  -  ;
   84 D1:A9F1 -  -  -  -  ;		Date			Notes
   85 D1:A9F1 -  -  -  -  ;		==== 			=====
   86 D1:A9F1 -  -  -  -  ;
   87 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   88 D1:A9F1 -  -  -  -  		
Listing for file "_build.asm"
   20 D1:A9F1 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:A9F1 -  -  -  -  ; ***************************************************************************************
    2 D1:A9F1 -  -  -  -  ; ***************************************************************************************
    3 D1:A9F1 -  -  -  -  ;
    4 D1:A9F1 -  -  -  -  ;		Name : 		stop.asm
    5 D1:A9F1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9F1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9F1 -  -  -  -  ;		Reviewed :	No
    8 D1:A9F1 -  -  -  -  ;		Purpose :	Stop command
    9 D1:A9F1 -  -  -  -  ;
   10 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   11 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   12 D1:A9F1 -  -  -  -  
   13 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   14 D1:A9F1 -  -  -  -  ;
   15 D1:A9F1 -  -  -  -  ;										STOP command
   16 D1:A9F1 -  -  -  -  ;
   17 D1:A9F1 -  -  -  -  ; ***************************************************************************************
   18 D1:A9F1 -  -  -  -  
   19 D1:A9F1 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:A9F1 3E 0A C3 1F 
              AA D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:A9F7 -  -  -  -  
   22 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   23 D1:A9F7 -  -  -  -  ;
   24 D1:A9F7 -  -  -  -  ;									Changes and Updates
   25 D1:A9F7 -  -  -  -  ;
   26 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   27 D1:A9F7 -  -  -  -  ;
   28 D1:A9F7 -  -  -  -  ;		Date			Notes
   29 D1:A9F7 -  -  -  -  ;		==== 			=====
   30 D1:A9F7 -  -  -  -  ;
   31 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   32 D1:A9F7 -  -  -  -  		
Listing for file "_build.asm"
   21 D1:A9F7 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:A9F7 -  -  -  -  ; ***************************************************************************************
    2 D1:A9F7 -  -  -  -  ; ***************************************************************************************
    3 D1:A9F7 -  -  -  -  ;
    4 D1:A9F7 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:A9F7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9F7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9F7 -  -  -  -  ;		Reviewed :	No
    8 D1:A9F7 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:A9F7 -  -  -  -  ;
   10 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   11 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   12 D1:A9F7 -  -  -  -  
   13 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   14 D1:A9F7 -  -  -  -  ;
   15 D1:A9F7 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:A9F7 -  -  -  -  ;
   17 D1:A9F7 -  -  -  -  ; ***************************************************************************************
   18 D1:A9F7 -  -  -  -  
   19 D1:A9F7 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:A9F7             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:A9F7             		inc 	ix
   22 D1:A9F7             		cp 		ch 							; exit if matches
   23 D1:A9F7             		ret 	z
   24 D1:A9F7             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:A9F7             		jp 		ErrorHandler
   26 D1:A9F7             #endmacro
   27 D1:A9F7 -  -  -  -  
   28 D1:A9F7 -  -  -  -  CheckRightBracket:
   29 D1:A9F7 DD 7E 00 DD 
              23 FE A4 C8 
              3E 08 C3 1F 
              AA D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AA05 -  -  -  -  
   31 D1:AA05 -  -  -  -  CheckComma:
   32 D1:AA05 DD 7E 00 DD 
              23 FE A5 C8 
              3E 07 C3 1F 
              AA D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 D1:AA13 -  -  -  -  
   34 D1:AA13 -  -  -  -  ; ***************************************************************************************
   35 D1:AA13 -  -  -  -  ;
   36 D1:AA13 -  -  -  -  ; 							Check A, gives Syntax Error
   37 D1:AA13 -  -  -  -  ;
   38 D1:AA13 -  -  -  -  ; ***************************************************************************************
   39 D1:AA13 -  -  -  -  
   40 D1:AA13 -  -  -  -  CheckNextA:
   41 D1:AA13 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 D1:AA16 DD 23 -  -  		inc 	ix 							; skip character
   43 D1:AA18 C8 -  -  -  		ret 	z 							; yes, okay
   44 D1:AA19 3E 0B C3 1F 
              AA D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 D1:AA1F -  -  -  -  		
   46 D1:AA1F -  -  -  -  ; ***************************************************************************************
   47 D1:AA1F -  -  -  -  ;
   48 D1:AA1F -  -  -  -  ;									Changes and Updates
   49 D1:AA1F -  -  -  -  ;
   50 D1:AA1F -  -  -  -  ; ***************************************************************************************
   51 D1:AA1F -  -  -  -  ;
   52 D1:AA1F -  -  -  -  ;		Date			Notes
   53 D1:AA1F -  -  -  -  ;		==== 			=====
   54 D1:AA1F -  -  -  -  ;
   55 D1:AA1F -  -  -  -  ; ***************************************************************************************
   56 D1:AA1F -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AA1F -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AA1F -  -  -  -  ; ***************************************************************************************
    2 D1:AA1F -  -  -  -  ; ***************************************************************************************
    3 D1:AA1F -  -  -  -  ;
    4 D1:AA1F -  -  -  -  ;		Name : 		errors.asm
    5 D1:AA1F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA1F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA1F -  -  -  -  ;		Reviewed :	No
    8 D1:AA1F -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AA1F -  -  -  -  ;
   10 D1:AA1F -  -  -  -  ; ***************************************************************************************
   11 D1:AA1F -  -  -  -  ; ***************************************************************************************
   12 D1:AA1F -  -  -  -  
   13 D1:AA1F -  -  -  -  ; ***************************************************************************************
   14 D1:AA1F -  -  -  -  ;
   15 D1:AA1F -  -  -  -  ;								Error handler, message A 
   16 D1:AA1F -  -  -  -  ;
   17 D1:AA1F -  -  -  -  ; ***************************************************************************************
   18 D1:AA1F -  -  -  -  
   19 D1:AA1F -  -  -  -  ErrorHandler:
   20 D1:AA1F F5 -  -  -  		push 	af 						; save error ID
   21 D1:AA20 -  -  -  -  
   22 D1:AA20 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AA24 6F -  -  -  		ld 		l,a
   24 D1:AA25 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AA26 29 -  -  -  		add 	hl,hl 		
   26 D1:AA27 11 51 AF D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AA2B 19 -  -  -  		add 	hl,de
   28 D1:AA2C ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AA2E CD 14 AE D1 		call 	PrintStringAtHL
   30 D1:AA32 -  -  -  -  		;
   31 D1:AA32 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AA33 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AA34 28 2F -  -  		jr 		z,_EHExit
   34 D1:AA36 -  -  -  -  		;
   35 D1:AA36 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AA3B DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AA3E B7 -  -  -  		or 		a
   38 D1:AA3F 28 24 -  -  		jr 		z,_EHExit
   39 D1:AA41 -  -  -  -  
   40 D1:AA41 21 6D AA D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AA45 CD 14 AE D1 		call 	PrintStringAtHL 
   42 D1:AA49 -  -  -  -  		
   43 D1:AA49 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AA4A 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AA4E D9 -  -  -  		exx 
   46 D1:AA4F DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AA52 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AA55 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AA57 01 F5 A8 D1 		ld 		bc,ConvertBuffer
   50 D1:AA5B CD 31 B3 D1 		call 	Int32ToString
   51 D1:AA5F C5 -  -  -  		push 	bc
   52 D1:AA60 E1 -  -  -  		pop 	hl
   53 D1:AA61 CD 14 AE D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AA65 -  -  -  -  _EHExit:		
   55 D1:AA65 CD CB B3 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AA69 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AA6D -  -  -  -  
   58 D1:AA6D -  -  -  -  _EHAtText:
   59 D1:AA6D 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AA77 -  -  -  -  
   61 D1:AA77 -  -  -  -  NotImplemented:
   62 D1:AA77 3E 04 C3 1F 
              AA D1 -  -  		ERR_DISABLED
   63 D1:AA7D -  -  -  -  TypeMismatch:
   64 D1:AA7D 3E 02 C3 1F 
              AA D1 -  -  		ERR_BADTYPE
   65 D1:AA83 -  -  -  -  BadValue:
   66 D1:AA83 3E 03 C3 1F 
              AA D1 -  -  		ERR_BADVALUE
   67 D1:AA89 -  -  -  -  SyntaxError:
   68 D1:AA89 3E 0B C3 1F 
              AA D1 -  -  		ERR_SYNTAX
   69 D1:AA8F -  -  -  -  						
   70 D1:AA8F -  -  -  -  ; ***************************************************************************************
   71 D1:AA8F -  -  -  -  ;
   72 D1:AA8F -  -  -  -  ;									Changes and Updates
   73 D1:AA8F -  -  -  -  ;
   74 D1:AA8F -  -  -  -  ; ***************************************************************************************
   75 D1:AA8F -  -  -  -  ;
   76 D1:AA8F -  -  -  -  ;		Date			Notes
   77 D1:AA8F -  -  -  -  ;		==== 			=====
   78 D1:AA8F -  -  -  -  ;
   79 D1:AA8F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AA8F -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AA8F -  -  -  -  ; ***************************************************************************************
    2 D1:AA8F -  -  -  -  ; ***************************************************************************************
    3 D1:AA8F -  -  -  -  ;
    4 D1:AA8F -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AA8F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA8F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA8F -  -  -  -  ;		Reviewed :	No
    8 D1:AA8F -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AA8F -  -  -  -  ;
   10 D1:AA8F -  -  -  -  ; ***************************************************************************************
   11 D1:AA8F -  -  -  -  ; ***************************************************************************************
   12 D1:AA8F -  -  -  -  
   13 D1:AA8F -  -  -  -  ; ***************************************************************************************
   14 D1:AA8F -  -  -  -  ;
   15 D1:AA8F -  -  -  -  ; 									Addition
   16 D1:AA8F -  -  -  -  ;
   17 D1:AA8F -  -  -  -  ; ***************************************************************************************
   18 D1:AA8F -  -  -  -  
   19 D1:AA8F -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AA8F CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 B0 
              B2 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AA9D -  -  -  -  
   22 D1:AA9D -  -  -  -  ; ***************************************************************************************
   23 D1:AA9D -  -  -  -  ;
   24 D1:AA9D -  -  -  -  ; 									Subtraction
   25 D1:AA9D -  -  -  -  ;
   26 D1:AA9D -  -  -  -  ; ***************************************************************************************
   27 D1:AA9D -  -  -  -  
   28 D1:AA9D -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AA9D CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 B8 
              B2 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AAAB -  -  -  -  
   31 D1:AAAB -  -  -  -  ; ***************************************************************************************
   32 D1:AAAB -  -  -  -  ;
   33 D1:AAAB -  -  -  -  ; 									  Multiply
   34 D1:AAAB -  -  -  -  ;
   35 D1:AAAB -  -  -  -  ; ***************************************************************************************
   36 D1:AAAB -  -  -  -  
   37 D1:AAAB -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AAAB CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 77 
              B2 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AAB9 -  -  -  -  
   40 D1:AAB9 -  -  -  -  ; ***************************************************************************************
   41 D1:AAB9 -  -  -  -  ;
   42 D1:AAB9 -  -  -  -  ; 									  Divide
   43 D1:AAB9 -  -  -  -  ;
   44 D1:AAB9 -  -  -  -  ; ***************************************************************************************
   45 D1:AAB9 -  -  -  -  
   46 D1:AAB9 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AAB9 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AAB9 CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 78 
              B1 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AAC7 -  -  -  -  
   50 D1:AAC7 -  -  -  -  ; ***************************************************************************************
   51 D1:AAC7 -  -  -  -  ;
   52 D1:AAC7 -  -  -  -  ; 									  Modulus
   53 D1:AAC7 -  -  -  -  ;
   54 D1:AAC7 -  -  -  -  ; ***************************************************************************************
   55 D1:AAC7 -  -  -  -  
   56 D1:AAC7 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AAC7 CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 7B 
              B1 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AAD5 -  -  -  -  
   59 D1:AAD5 -  -  -  -  ; ***************************************************************************************
   60 D1:AAD5 -  -  -  -  ;
   61 D1:AAD5 -  -  -  -  ; 									  Logical
   62 D1:AAD5 -  -  -  -  ;
   63 D1:AAD5 -  -  -  -  ; ***************************************************************************************
   64 D1:AAD5 -  -  -  -  
   65 D1:AAD5 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AAD5 CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 C2 
              B2 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AAE3 -  -  -  -  
   68 D1:AAE3 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AAE3 CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 CF 
              B2 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AAF1 -  -  -  -  
   71 D1:AAF1 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AAF1 CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 DC 
              B2 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AAFF -  -  -  -  
   74 D1:AAFF -  -  -  -  ; ***************************************************************************************
   75 D1:AAFF -  -  -  -  ;
   76 D1:AAFF -  -  -  -  ;									Changes and Updates
   77 D1:AAFF -  -  -  -  ;
   78 D1:AAFF -  -  -  -  ; ***************************************************************************************
   79 D1:AAFF -  -  -  -  ;
   80 D1:AAFF -  -  -  -  ;		Date			Notes
   81 D1:AAFF -  -  -  -  ;		==== 			=====
   82 D1:AAFF -  -  -  -  ;
   83 D1:AAFF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 D1:AAFF -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AAFF -  -  -  -  ; ***************************************************************************************
    2 D1:AAFF -  -  -  -  ; ***************************************************************************************
    3 D1:AAFF -  -  -  -  ;
    4 D1:AAFF -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AAFF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAFF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAFF -  -  -  -  ;		Reviewed :	No
    8 D1:AAFF -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AAFF -  -  -  -  ;
   10 D1:AAFF -  -  -  -  ; ***************************************************************************************
   11 D1:AAFF -  -  -  -  ; ***************************************************************************************
   12 D1:AAFF -  -  -  -  
   13 D1:AAFF -  -  -  -  ; ***************************************************************************************
   14 D1:AAFF -  -  -  -  ;
   15 D1:AAFF -  -  -  -  ; 									<l> <op> <r>
   16 D1:AAFF -  -  -  -  ;
   17 D1:AAFF -  -  -  -  ; ***************************************************************************************
   18 D1:AAFF -  -  -  -  
   19 D1:AAFF -  -  -  -  ALULongReference:			;; [!]
   20 D1:AAFF CD 0F AB D1 		call 	BRGetAddress 				; calculate address
   21 D1:AB03 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AB05 CB F9 -  -  		set 	CIsReference,c
   23 D1:AB07 C9 -  -  -  		ret
   24 D1:AB08 -  -  -  -  
   25 D1:AB08 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AB08 CD FF AA D1 		call 	ALULongReference
   27 D1:AB0C CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AB0E C9 -  -  -  		ret
   29 D1:AB0F -  -  -  -  
   30 D1:AB0F -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AB0F CD AC AB D1 
              78 B1 C2 7D 
              AA D1 C3 1D 
              AB D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AB1D -  -  -  -  _BRGAMain:		
   33 D1:AB1D CD B0 B2 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AB21 CD 94 AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AB25 C9 -  -  -  		ret
   36 D1:AB26 -  -  -  -  
   37 D1:AB26 -  -  -  -  ; ***************************************************************************************
   38 D1:AB26 -  -  -  -  ;
   39 D1:AB26 -  -  -  -  ;									Changes and Updates
   40 D1:AB26 -  -  -  -  ;
   41 D1:AB26 -  -  -  -  ; ***************************************************************************************
   42 D1:AB26 -  -  -  -  ;
   43 D1:AB26 -  -  -  -  ;		Date			Notes
   44 D1:AB26 -  -  -  -  ;		==== 			=====
   45 D1:AB26 -  -  -  -  ;
   46 D1:AB26 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB26 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AB26 -  -  -  -  ; ***************************************************************************************
    2 D1:AB26 -  -  -  -  ; ***************************************************************************************
    3 D1:AB26 -  -  -  -  ;
    4 D1:AB26 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AB26 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB26 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB26 -  -  -  -  ;		Reviewed :	No
    8 D1:AB26 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AB26 -  -  -  -  ;
   10 D1:AB26 -  -  -  -  ; ***************************************************************************************
   11 D1:AB26 -  -  -  -  ; ***************************************************************************************
   12 D1:AB26 -  -  -  -  
   13 D1:AB26 -  -  -  -  #macro compare_equals(n)
   14 D1:AB26             		call 	CompareBaseCode
   15 D1:AB26             		cp 		n
   16 D1:AB26             		jr 		z,UnaryInt32True
   17 D1:AB26             		jr 		UnaryInt32False
   18 D1:AB26             #endmacro
   19 D1:AB26 -  -  -  -  
   20 D1:AB26 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AB26             		call 	CompareBaseCode
   22 D1:AB26             		cp 		n
   23 D1:AB26             		jr 		nz,UnaryInt32True
   24 D1:AB26             		jr 		UnaryInt32False
   25 D1:AB26             #endmacro
   26 D1:AB26 -  -  -  -  
   27 D1:AB26 -  -  -  -  ; ***************************************************************************************
   28 D1:AB26 -  -  -  -  ;
   29 D1:AB26 -  -  -  -  ; 								Return True/False
   30 D1:AB26 -  -  -  -  ;
   31 D1:AB26 -  -  -  -  ; ***************************************************************************************
   32 D1:AB26 -  -  -  -  
   33 D1:AB26 -  -  -  -  UnaryInt32True:	
   34 D1:AB26 3E FF -  -  		ld 		a,255
   35 D1:AB28 18 01 -  -  		jr 		_Int32Logical
   36 D1:AB2A -  -  -  -  UnaryInt32False: 
   37 D1:AB2A AF -  -  -  		xor 	a
   38 D1:AB2B -  -  -  -  _Int32Logical:
   39 D1:AB2B 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AB2C 67 -  -  -  		ld 		h,a
   41 D1:AB2D D9 -  -  -  		exx
   42 D1:AB2E 6F -  -  -  		ld 		l,a
   43 D1:AB2F 67 -  -  -  		ld 		h,a
   44 D1:AB30 D9 -  -  -  		exx
   45 D1:AB31 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AB33 C9 -  -  -  		ret
   47 D1:AB34 -  -  -  -  
   48 D1:AB34 -  -  -  -  ; ***************************************************************************************
   49 D1:AB34 -  -  -  -  ;
   50 D1:AB34 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AB34 -  -  -  -  ;
   52 D1:AB34 -  -  -  -  ; ***************************************************************************************
   53 D1:AB34 -  -  -  -  
   54 D1:AB34 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AB34 CD 70 AB D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AB3E -  -  -  -  
   57 D1:AB3E -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AB3E CD 70 AB D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AB48 -  -  -  -  
   60 D1:AB48 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AB48 CD 70 AB D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AB52 -  -  -  -  
   63 D1:AB52 -  -  -  -  ; ***************************************************************************************
   64 D1:AB52 -  -  -  -  ;
   65 D1:AB52 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AB52 -  -  -  -  ;
   67 D1:AB52 -  -  -  -  ; ***************************************************************************************
   68 D1:AB52 -  -  -  -  
   69 D1:AB52 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AB52 CD 70 AB D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AB5C -  -  -  -  
   72 D1:AB5C -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AB5C CD 70 AB D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AB66 -  -  -  -  
   75 D1:AB66 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AB66 CD 70 AB D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AB70 -  -  -  -  
   78 D1:AB70 -  -  -  -  ; ***************************************************************************************
   79 D1:AB70 -  -  -  -  ;
   80 D1:AB70 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AB70 -  -  -  -  ;
   82 D1:AB70 -  -  -  -  ; ***************************************************************************************
   83 D1:AB70 -  -  -  -  
   84 D1:AB70 -  -  -  -  CompareBaseCode:
   85 D1:AB70 CD AC AB D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AB74 -  -  -  -  
   87 D1:AB74 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AB75 A1 -  -  -  		and 	c
   89 D1:AB76 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AB78 C2 8A AB D1 		jp 		nz,StringCompare
   91 D1:AB7C -  -  -  -  
   92 D1:AB7C 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AB7D B1 -  -  -  		or 		c
   94 D1:AB7E CB 47 -  -  		bit 	CIsString,a 
   95 D1:AB80 CA F0 B2 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AB84 -  -  -  -  
   97 D1:AB84 3E 02 C3 1F 
              AA D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AB8A -  -  -  -  ;
   99 D1:AB8A -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AB8A -  -  -  -  ;
  101 D1:AB8A -  -  -  -  StringCompare:
  102 D1:AB8A 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AB8B BE -  -  -  		cp 		(hl)
  104 D1:AB8C 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AB8E 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AB90 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AB91 23 -  -  -  		inc 	hl
  108 D1:AB92 FE 20 -  -  		cp 		' '
  109 D1:AB94 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AB96 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AB97 C9 -  -  -  		ret
  112 D1:AB98 -  -  -  -  
  113 D1:AB98 -  -  -  -  _SCLess:
  114 D1:AB98 3E FF -  -  		ld 		a,$FF
  115 D1:AB9A C9 -  -  -  		ret
  116 D1:AB9B -  -  -  -  _SCGreater:
  117 D1:AB9B 3E 01 -  -  		ld 		a,1
  118 D1:AB9D C9 -  -  -  		ret
  119 D1:AB9E -  -  -  -  
  120 D1:AB9E 3E 0C C3 1F 
              AA D1 -  -  		ERR_TODO()
  121 D1:ABA4 -  -  -  -  
  122 D1:ABA4 -  -  -  -  ; ***************************************************************************************
  123 D1:ABA4 -  -  -  -  ;
  124 D1:ABA4 -  -  -  -  ;									Changes and Updates
  125 D1:ABA4 -  -  -  -  ;
  126 D1:ABA4 -  -  -  -  ; ***************************************************************************************
  127 D1:ABA4 -  -  -  -  ;
  128 D1:ABA4 -  -  -  -  ;		Date			Notes
  129 D1:ABA4 -  -  -  -  ;		==== 			=====
  130 D1:ABA4 -  -  -  -  ;
  131 D1:ABA4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:ABA4 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:ABA4 -  -  -  -  ; ***************************************************************************************
    2 D1:ABA4 -  -  -  -  ; ***************************************************************************************
    3 D1:ABA4 -  -  -  -  ;
    4 D1:ABA4 -  -  -  -  ;		Name : 		utility.asm
    5 D1:ABA4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABA4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABA4 -  -  -  -  ;		Reviewed :	No
    8 D1:ABA4 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:ABA4 -  -  -  -  ;
   10 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   11 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   12 D1:ABA4 -  -  -  -  
   13 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   14 D1:ABA4 -  -  -  -  ;
   15 D1:ABA4 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:ABA4 -  -  -  -  ;
   17 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   18 D1:ABA4 -  -  -  -  
   19 D1:ABA4 -  -  -  -  SwapHLDE:
   20 D1:ABA4 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ABA5 D9 -  -  -  			exx
   22 D1:ABA6 EB -  -  -  			ex 		de,hl
   23 D1:ABA7 D9 -  -  -  			exx
   24 D1:ABA8 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ABA9 41 -  -  -  			ld 		b,c
   26 D1:ABAA 4F -  -  -  			ld 		c,a
   27 D1:ABAB C9 -  -  -  			ret
   28 D1:ABAC -  -  -  -  
   29 D1:ABAC -  -  -  -  ; ***************************************************************************************
   30 D1:ABAC -  -  -  -  ;
   31 D1:ABAC -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ABAC -  -  -  -  ;
   33 D1:ABAC -  -  -  -  ; ***************************************************************************************
   34 D1:ABAC -  -  -  -  
   35 D1:ABAC -  -  -  -  DereferenceBoth:
   36 D1:ABAC CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ABAE C4 67 AC D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ABB2 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ABB4 C8 -  -  -  			ret 	z
   40 D1:ABB5 CD A4 AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ABB9 CD 67 AC D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ABBD CD A4 AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ABC1 C9 -  -  -  			ret
   44 D1:ABC2 -  -  -  -  
   45 D1:ABC2 -  -  -  -  ; ***************************************************************************************
   46 D1:ABC2 -  -  -  -  ;
   47 D1:ABC2 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ABC2 -  -  -  -  ;
   49 D1:ABC2 -  -  -  -  ; ***************************************************************************************
   50 D1:ABC2 -  -  -  -  
   51 D1:ABC2 -  -  -  -  NegateHLHL:	
   52 D1:ABC2 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ABC4 C2 7D AA D1 			jp 		nz,TypeMismatch
   54 D1:ABC8 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ABCA C4 67 AC D1 			call 	nz,Dereference 			; if required.
   56 D1:ABCE CD 1A B3 D1 			call 	Int32Negate
   57 D1:ABD2 C9 -  -  -  			ret
Listing for file "_build.asm"
   27 D1:ABD3 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ABD3 -  -  -  -  ; ***************************************************************************************
    2 D1:ABD3 -  -  -  -  ; ***************************************************************************************
    3 D1:ABD3 -  -  -  -  ;
    4 D1:ABD3 -  -  -  -  ;		Name : 		expression.asm
    5 D1:ABD3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABD3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABD3 -  -  -  -  ;		Reviewed :	None
    8 D1:ABD3 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ABD3 -  -  -  -  ;
   10 D1:ABD3 -  -  -  -  ; ***************************************************************************************
   11 D1:ABD3 -  -  -  -  ; ***************************************************************************************
   12 D1:ABD3 -  -  -  -  
   13 D1:ABD3 -  -  -  -  ; ***************************************************************************************
   14 D1:ABD3 -  -  -  -  ;
   15 D1:ABD3 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ABD3 -  -  -  -  ;
   17 D1:ABD3 -  -  -  -  ; ***************************************************************************************
   18 D1:ABD3 -  -  -  -  
   19 D1:ABD3 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ABD3 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ABD4 -  -  -  -  EvaluateAtPrecedence:
   22 D1:ABD4 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ABD5 -  -  -  -  		;
   24 D1:ABD5 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ABD5 -  -  -  -  		;
   26 D1:ABD5 CD C3 AC D1 		call 	EvaluateTerm 				; get term
   27 D1:ABD9 -  -  -  -  		;
   28 D1:ABD9 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ABD9 -  -  -  -  		;
   30 D1:ABD9 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ABDA -  -  -  -  _EAPLoop:
   32 D1:ABDA DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ABDD FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ABDF D8 -  -  -  		ret 	c
   35 D1:ABE0 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ABE2 D0 -  -  -  		ret 	nc
   37 D1:ABE3 -  -  -  -  		;
   38 D1:ABE3 -  -  -  -  		; 		Get the precedence.
   39 D1:ABE3 -  -  -  -  		;
   40 D1:ABE3 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ABE4 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ABE6 21 40 AF D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ABEA B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ABEB 6F -  -  -  		ld 		l,a
   45 D1:ABEC 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ABED E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ABEE -  -  -  -  		;
   48 D1:ABEE -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ABEE -  -  -  -  		;
   50 D1:ABEE 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ABEF BB -  -  -  		cp 		e
   52 D1:ABF0 D0 -  -  -  		ret 	nc
   53 D1:ABF1 -  -  -  -  
   54 D1:ABF1 -  -  -  -  		;
   55 D1:ABF1 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ABF1 -  -  -  -  		;
   57 D1:ABF1 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ABF2 -  -  -  -  		;
   59 D1:ABF2 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ABF5 F5 -  -  -  		push 	af
   61 D1:ABF6 -  -  -  -  		;
   62 D1:ABF6 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ABF7 D9 -  -  -  		exx 								; save HL'
   64 D1:ABF8 E5 -  -  -  		push 	hl
   65 D1:ABF9 D9 -  -  -  		exx 								
   66 D1:ABFA E5 -  -  -  		push 	hl 							; save HL
   67 D1:ABFB -  -  -  -  		;
   68 D1:ABFB DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ABFD -  -  -  -  		;
   70 D1:ABFD -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ABFD -  -  -  -  		;
   72 D1:ABFD 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ABFE CD D4 AB D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AC02 -  -  -  -  		;
   75 D1:AC02 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AC02 -  -  -  -  		;
   77 D1:AC02 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AC03 -  -  -  -  
   79 D1:AC03 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AC04 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AC05 D9 -  -  -  		exx
   82 D1:AC06 EB -  -  -  		ex 		de,hl
   83 D1:AC07 E1 -  -  -  		pop 	hl
   84 D1:AC08 D9 -  -  -  		exx
   85 D1:AC09 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AC0A 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AC0B -  -  -  -  		;
   88 D1:AC0B -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AC0B -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AC0B -  -  -  -  		;
   91 D1:AC0B F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AC0C -  -  -  -  		;
   93 D1:AC0C -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AC0C -  -  -  -  		;
   95 D1:AC0C D5 -  -  -  		push 	de
   96 D1:AC0D E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AC0E E6 7F 21 00 
              00 00 6F 29 
              29 11 57 B0 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AC23 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AC24 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AC25 CD D9 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AC29 -  -  -  -  		;
  102 D1:AC29 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AC2A -  -  -  -  		;
  104 D1:AC2A 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AC2C -  -  -  -  
  106 D1:AC2C -  -  -  -  ; ***************************************************************************************
  107 D1:AC2C -  -  -  -  ;
  108 D1:AC2C -  -  -  -  ;									Changes and Updates
  109 D1:AC2C -  -  -  -  ;
  110 D1:AC2C -  -  -  -  ; ***************************************************************************************
  111 D1:AC2C -  -  -  -  ;
  112 D1:AC2C -  -  -  -  ;		Date			Notes
  113 D1:AC2C -  -  -  -  ;		==== 			=====
  114 D1:AC2C -  -  -  -  ;
  115 D1:AC2C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC2C -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AC2C -  -  -  -  ; ***************************************************************************************
    2 D1:AC2C -  -  -  -  ; ***************************************************************************************
    3 D1:AC2C -  -  -  -  ;
    4 D1:AC2C -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AC2C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC2C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC2C -  -  -  -  ;		Reviewed :	No
    8 D1:AC2C -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AC2C -  -  -  -  ;
   10 D1:AC2C -  -  -  -  ; ***************************************************************************************
   11 D1:AC2C -  -  -  -  ; ***************************************************************************************
   12 D1:AC2C -  -  -  -  
   13 D1:AC2C -  -  -  -  ; ***************************************************************************************
   14 D1:AC2C -  -  -  -  ;
   15 D1:AC2C -  -  -  -  ; 						Evaluate and dereference an expression
   16 D1:AC2C -  -  -  -  ;
   17 D1:AC2C -  -  -  -  ; ***************************************************************************************
   18 D1:AC2C -  -  -  -  
   19 D1:AC2C -  -  -  -  EvaluateValue:
   20 D1:AC2C CD D3 AB D1 		call 	EvaluateAtPrecedence0
   21 D1:AC30 C3 67 AC D1 		jp 		Dereference
   22 D1:AC34 -  -  -  -  
   23 D1:AC34 -  -  -  -  ; ***************************************************************************************
   24 D1:AC34 -  -  -  -  ;
   25 D1:AC34 -  -  -  -  ; 									Evaluate a number
   26 D1:AC34 -  -  -  -  ;
   27 D1:AC34 -  -  -  -  ; ***************************************************************************************
   28 D1:AC34 -  -  -  -  
   29 D1:AC34 -  -  -  -  EvaluateInteger:
   30 D1:AC34 CD 2C AC D1 		call 	EvaluateValue
   31 D1:AC38 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   32 D1:AC3A C8 -  -  -  		ret 	z
   33 D1:AC3B C3 7D AA D1 		jp 		TypeMismatch
   34 D1:AC3F -  -  -  -  
   35 D1:AC3F -  -  -  -  ; ***************************************************************************************
   36 D1:AC3F -  -  -  -  ;
   37 D1:AC3F -  -  -  -  ; 									Evaluate an 8 bit integer
   38 D1:AC3F -  -  -  -  ;
   39 D1:AC3F -  -  -  -  ; ***************************************************************************************
   40 D1:AC3F -  -  -  -  
   41 D1:AC3F -  -  -  -  Evaluate8BitInteger:
   42 D1:AC3F CD 34 AC D1 		call 	EvaluateInteger
   43 D1:AC43 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   44 D1:AC44 7C -  -  -  		ld 		a,h
   45 D1:AC45 B5 -  -  -  		or 		l
   46 D1:AC46 D9 -  -  -  		exx 	
   47 D1:AC47 B4 -  -  -  		or 		h
   48 D1:AC48 C2 83 AA D1 		jp 		nz,BadValue
   49 D1:AC4C 7D -  -  -  		ld 		a,l 						; return integer in A
   50 D1:AC4D C9 -  -  -  		ret
   51 D1:AC4E -  -  -  -  		
   52 D1:AC4E -  -  -  -  ; ***************************************************************************************
   53 D1:AC4E -  -  -  -  ;
   54 D1:AC4E -  -  -  -  ; 									Evaluate a string
   55 D1:AC4E -  -  -  -  ;
   56 D1:AC4E -  -  -  -  ; ***************************************************************************************
   57 D1:AC4E -  -  -  -  
   58 D1:AC4E -  -  -  -  EvaluateStringOnly:
   59 D1:AC4E CD 2C AC D1 		call 	EvaluateValue
   60 D1:AC52 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   61 D1:AC54 CA 7D AA D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   62 D1:AC58 C9 -  -  -  		ret
   63 D1:AC59 -  -  -  -  
   64 D1:AC59 -  -  -  -  ; ***************************************************************************************
   65 D1:AC59 -  -  -  -  ;
   66 D1:AC59 -  -  -  -  ; 								Return 8/16 bit constant
   67 D1:AC59 -  -  -  -  ;
   68 D1:AC59 -  -  -  -  ; ***************************************************************************************
   69 D1:AC59 -  -  -  -  
   70 D1:AC59 -  -  -  -  Return8BitConstant:
   71 D1:AC59 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   72 D1:AC5D 6F -  -  -  		ld 		l,a
   73 D1:AC5E -  -  -  -  Return16BitConstant:
   74 D1:AC5E D9 -  -  -  		exx 								; clear HL'
   75 D1:AC5F 21 00 00 00 		ld 		hl,0
   76 D1:AC63 D9 -  -  -  		exx
   77 D1:AC64 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
   78 D1:AC66 C9 -  -  -  		ret
   79 D1:AC67 -  -  -  -  
   80 D1:AC67 -  -  -  -  ; ***************************************************************************************
   81 D1:AC67 -  -  -  -  ;
   82 D1:AC67 -  -  -  -  ;									Changes and Updates
   83 D1:AC67 -  -  -  -  ;
   84 D1:AC67 -  -  -  -  ; ***************************************************************************************
   85 D1:AC67 -  -  -  -  ;
   86 D1:AC67 -  -  -  -  ;		Date			Notes
   87 D1:AC67 -  -  -  -  ;		==== 			=====
   88 D1:AC67 -  -  -  -  ;
   89 D1:AC67 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AC67 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AC67 -  -  -  -  ; ***************************************************************************************
    2 D1:AC67 -  -  -  -  ; ***************************************************************************************
    3 D1:AC67 -  -  -  -  ;
    4 D1:AC67 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AC67 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC67 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AC67 -  -  -  -  ;		Reviewed :	No
    8 D1:AC67 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AC67 -  -  -  -  ;
   10 D1:AC67 -  -  -  -  ; ***************************************************************************************
   11 D1:AC67 -  -  -  -  ; ***************************************************************************************
   12 D1:AC67 -  -  -  -  
   13 D1:AC67 -  -  -  -  ; ***************************************************************************************
   14 D1:AC67 -  -  -  -  ;
   15 D1:AC67 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AC67 -  -  -  -  ;
   17 D1:AC67 -  -  -  -  ; ***************************************************************************************
   18 D1:AC67 -  -  -  -  
   19 D1:AC67 -  -  -  -  Dereference:
   20 D1:AC67 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AC69 C8 -  -  -  		ret 	z
   22 D1:AC6A -  -  -  -  
   23 D1:AC6A CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AC6C -  -  -  -  		
   25 D1:AC6C CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AC6E 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AC70 -  -  -  -  
   28 D1:AC70 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AC72 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AC74 -  -  -  -  
   31 D1:AC74 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AC75 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AC77 D9 -  -  -  		exx
   34 D1:AC78 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AC79 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AC7A 23 -  -  -  		inc  	hl
   37 D1:AC7B ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AC7D D9 -  -  -  		exx 								; fix back
   39 D1:AC7E C9 -  -  -  		ret
   40 D1:AC7F -  -  -  -  
   41 D1:AC7F -  -  -  -  _DeRefByte:		
   42 D1:AC7F 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AC80 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AC84 6F -  -  -  		ld	 	l,a
   45 D1:AC85 D9 -  -  -  		exx
   46 D1:AC86 21 00 00 00 		ld 		hl,$0000
   47 D1:AC8A D9 -  -  -  		exx
   48 D1:AC8B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AC8D C9 -  -  -  		ret
   50 D1:AC8E -  -  -  -  
   51 D1:AC8E -  -  -  -  _DRInternal:
   52 D1:AC8E 3E 04 C3 1F 
              AA D1 -  -  		ERR_DISABLED
   53 D1:AC94 -  -  -  -  
   54 D1:AC94 -  -  -  -  ; ***************************************************************************************
   55 D1:AC94 -  -  -  -  ;
   56 D1:AC94 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AC94 -  -  -  -  ;
   58 D1:AC94 -  -  -  -  ; ***************************************************************************************
   59 D1:AC94 -  -  -  -  
   60 D1:AC94 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AC94 -  -  -  -  		#ifdef EZ80
   62 D1:AC94 22 DF A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AC98 D9 -  -  -  		exx
   64 D1:AC99 22 E1 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AC9D 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:ACA1 D9 -  -  -  		exx
   67 D1:ACA2 2A DF A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ACA6 -  -  -  -  		#endif
   69 D1:ACA6 C9 -  -  -  		ret
   70 D1:ACA7 -  -  -  -  
   71 D1:ACA7 -  -  -  -  ; ***************************************************************************************
   72 D1:ACA7 -  -  -  -  ;
   73 D1:ACA7 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ACA7 -  -  -  -  ;
   75 D1:ACA7 -  -  -  -  ; ***************************************************************************************
   76 D1:ACA7 -  -  -  -  
   77 D1:ACA7 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ACA7 -  -  -  -  		#ifdef EZ80
   79 D1:ACA7 22 DF A8 D1 		ld 		(AConvert),hl
   80 D1:ACAB 21 00 00 00 		ld 		hl,$0000
   81 D1:ACAF 22 E2 A8 D1 		ld 		(AConvert+3),hl
   82 D1:ACB3 D9 -  -  -  		exx
   83 D1:ACB4 2A E1 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:ACB8 D9 -  -  -  		exx
   85 D1:ACB9 AF -  -  -  		xor 	a
   86 D1:ACBA 32 E1 A8 D1 		ld 		(AConvert+2),a
   87 D1:ACBE 2A DF A8 D1 		ld 		hl,(AConvert)
   88 D1:ACC2 -  -  -  -  		#endif
   89 D1:ACC2 C9 -  -  -  		ret
   90 D1:ACC3 -  -  -  -  
   91 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   92 D1:ACC3 -  -  -  -  ;
   93 D1:ACC3 -  -  -  -  ;									Changes and Updates
   94 D1:ACC3 -  -  -  -  ;
   95 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   96 D1:ACC3 -  -  -  -  ;
   97 D1:ACC3 -  -  -  -  ;		Date			Notes
   98 D1:ACC3 -  -  -  -  ;		==== 			=====
   99 D1:ACC3 -  -  -  -  ;
  100 D1:ACC3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:ACC3 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:ACC3 -  -  -  -  ; ***************************************************************************************
    2 D1:ACC3 -  -  -  -  ; ***************************************************************************************
    3 D1:ACC3 -  -  -  -  ;
    4 D1:ACC3 -  -  -  -  ;		Name : 		term.asm
    5 D1:ACC3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACC3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACC3 -  -  -  -  ;		Reviewed :	No
    8 D1:ACC3 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:ACC3 -  -  -  -  ;
   10 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   11 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   12 D1:ACC3 -  -  -  -  
   13 D1:ACC3 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:ACC3             		add_hlhl_16
   15 D1:ACC3             		exx
   16 D1:ACC3             		adc_hlhl_16
   17 D1:ACC3             		exx
   18 D1:ACC3             #endmacro
   19 D1:ACC3 -  -  -  -  
   20 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   21 D1:ACC3 -  -  -  -  ;
   22 D1:ACC3 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:ACC3 -  -  -  -  ;
   24 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   25 D1:ACC3 -  -  -  -  ;
   26 D1:ACC3 -  -  -  -  ; 		Terms can be:
   27 D1:ACC3 -  -  -  -  ;
   28 D1:ACC3 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:ACC3 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:ACC3 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:ACC3 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:ACC3 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:ACC3 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:ACC3 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:ACC3 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:ACC3 -  -  -  -  ; 														reference of some sort.
   37 D1:ACC3 -  -  -  -  ;
   38 D1:ACC3 -  -  -  -  ; ***************************************************************************************
   39 D1:ACC3 -  -  -  -  
   40 D1:ACC3 -  -  -  -  EvaluateTerm:		
   41 D1:ACC3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:ACC5 D9 -  -  -  		exx
   43 D1:ACC6 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:ACCA D9 -  -  -  		exx
   45 D1:ACCB 21 00 00 00 		ld 		hl,$0000		
   46 D1:ACCF -  -  -  -  		;
   47 D1:ACCF DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:ACD2 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:ACD4 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:ACD6 DA 8E AD D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:ACDA CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:ACDC C2 32 AD D1 		jp 		nz,_ETFoundKeyword 
   53 D1:ACE0 -  -  -  -  		;
   54 D1:ACE0 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:ACE0 -  -  -  -  		;
   56 D1:ACE0 -  -  -  -  _ETIntegerConstant:
   57 D1:ACE0 -  -  -  -  		;
   58 D1:ACE0 -  -  -  -  _ETIntegerLoop:		
   59 D1:ACE0 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:ACE3 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:ACE5 B5 -  -  -  		or 		l 							; or into L
   62 D1:ACE6 6F -  -  -  		ld 		l,a
   63 D1:ACE7 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:ACE9 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:ACEC C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:ACEE FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:ACF0 D8 -  -  -  		ret 	c
   68 D1:ACF1 -  -  -  -  
   69 D1:ACF1 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:ACF8 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:ACFF 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AD06 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AD0D 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AD14 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AD1B -  -  -  -  
   76 D1:AD1B 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AD1D -  -  -  -  		;
   78 D1:AD1D -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AD1D -  -  -  -  		;
   80 D1:AD1D -  -  -  -  _ETStringMarker:		
   81 D1:AD1D DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AD1F DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AD21 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AD23 E1 -  -  -  		pop 	hl
   85 D1:AD24 11 00 00 00 		ld 		de,$0000
   86 D1:AD28 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AD2B DD 19 -  -  		add 	ix,de
   88 D1:AD2D DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AD2F 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AD31 C9 -  -  -  		ret
   91 D1:AD32 -  -  -  -  		;
   92 D1:AD32 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AD32 -  -  -  -  		;
   94 D1:AD32 -  -  -  -  _ETFoundKeyword:
   95 D1:AD32 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AD34 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AD36 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AD38 FE A4 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AD3A 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AD3C -  -  -  -  		;
  101 D1:AD3C -  -  -  -  		;		Unary group 0
  102 D1:AD3C -  -  -  -  		;
  103 D1:AD3C E6 7F 21 00 
              00 00 6F 29 
              29 11 57 B0 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AD51 C3 D9 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AD55 -  -  -  -  
  106 D1:AD55 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AD55 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AD57 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AD59 -  -  -  -  		;
  110 D1:AD59 -  -  -  -  		; 		- term
  111 D1:AD59 -  -  -  -  		;
  112 D1:AD59 CD C3 AC D1 		call 	EvaluateTerm 				; evaluate term
  113 D1:AD5D CD C2 AB D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AD61 C9 -  -  -  		ret
  115 D1:AD62 -  -  -  -  		;
  116 D1:AD62 -  -  -  -  		;		! ? indirection check
  117 D1:AD62 -  -  -  -  		;
  118 D1:AD62 -  -  -  -  _ETCheckIndirection:	
  119 D1:AD62 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AD64 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AD66 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AD68 C2 89 AA D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AD6C -  -  -  -  		;
  124 D1:AD6C -  -  -  -  		; 		! ? indirection
  125 D1:AD6C -  -  -  -  		;
  126 D1:AD6C -  -  -  -  _ETIndirection:
  127 D1:AD6C F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AD6D CD C3 AC D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AD71 CD 67 AC D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AD75 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AD77 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AD79 CD 94 AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AD7D F1 -  -  -  		pop 	af 							; get type back
  134 D1:AD7E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AD80 CB F9 -  -  		set 	CIsReference,c
  136 D1:AD82 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AD84 C8 -  -  -  		ret 	z
  138 D1:AD85 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AD87 C9 -  -  -  		ret
  140 D1:AD88 -  -  -  -  _ETStringIndirect:
  141 D1:AD88 3E 02 C3 1F 
              AA D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AD8E -  -  -  -  		;
  143 D1:AD8E -  -  -  -  		; 		Found an identifier.
  144 D1:AD8E -  -  -  -  		;
  145 D1:AD8E -  -  -  -  _ETVariable:
  146 D1:AD8E 3E 0C C3 1F 
              AA D1 -  -  		ERR_TODO
  147 D1:AD94 3E 0D C3 1F 
              AA D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 D1:AD9A -  -  -  -  		
  149 D1:AD9A -  -  -  -  ; ***************************************************************************************
  150 D1:AD9A -  -  -  -  ;
  151 D1:AD9A -  -  -  -  ;									Changes and Updates
  152 D1:AD9A -  -  -  -  ;
  153 D1:AD9A -  -  -  -  ; ***************************************************************************************
  154 D1:AD9A -  -  -  -  ;
  155 D1:AD9A -  -  -  -  ;		Date			Notes
  156 D1:AD9A -  -  -  -  ;		==== 			=====
  157 D1:AD9A -  -  -  -  ;
  158 D1:AD9A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD9A -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AD9A -  -  -  -  ; ***************************************************************************************
    2 D1:AD9A -  -  -  -  ; ***************************************************************************************
    3 D1:AD9A -  -  -  -  ;
    4 D1:AD9A -  -  -  -  ;		Name : 		page.asm
    5 D1:AD9A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD9A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD9A -  -  -  -  ;		Reviewed :	No
    8 D1:AD9A -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AD9A -  -  -  -  ;
   10 D1:AD9A -  -  -  -  ; ***************************************************************************************
   11 D1:AD9A -  -  -  -  ; ***************************************************************************************
   12 D1:AD9A -  -  -  -  
   13 D1:AD9A -  -  -  -  ; ***************************************************************************************
   14 D1:AD9A -  -  -  -  ;
   15 D1:AD9A -  -  -  -  ;							page unary function (no bracket)
   16 D1:AD9A -  -  -  -  ;
   17 D1:AD9A -  -  -  -  ; ***************************************************************************************
   18 D1:AD9A -  -  -  -  
   19 D1:AD9A -  -  -  -  Unary_Page:	;; [page]
   20 D1:AD9A 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AD9E D9 -  -  -  			exx
   22 D1:AD9F 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:ADA3 D9 -  -  -  			exx
   24 D1:ADA4 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:ADA6 C9 -  -  -  			ret
   26 D1:ADA7 -  -  -  -  
   27 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   28 D1:ADA7 -  -  -  -  ;
   29 D1:ADA7 -  -  -  -  ;									Changes and Updates
   30 D1:ADA7 -  -  -  -  ;
   31 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   32 D1:ADA7 -  -  -  -  ;
   33 D1:ADA7 -  -  -  -  ;		Date			Notes
   34 D1:ADA7 -  -  -  -  ;		==== 			=====
   35 D1:ADA7 -  -  -  -  ;
   36 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   37 D1:ADA7 -  -  -  -  			
Listing for file "_build.asm"
   32 D1:ADA7 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:ADA7 -  -  -  -  ; ***************************************************************************************
    2 D1:ADA7 -  -  -  -  ; ***************************************************************************************
    3 D1:ADA7 -  -  -  -  ;
    4 D1:ADA7 -  -  -  -  ;		Name : 		simple.asm
    5 D1:ADA7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADA7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADA7 -  -  -  -  ;		Reviewed :	No
    8 D1:ADA7 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:ADA7 -  -  -  -  ;
   10 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   11 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   12 D1:ADA7 -  -  -  -  
   13 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   14 D1:ADA7 -  -  -  -  ;
   15 D1:ADA7 -  -  -  -  ;								( unary function (think about it)
   16 D1:ADA7 -  -  -  -  ;
   17 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   18 D1:ADA7 -  -  -  -  
   19 D1:ADA7 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:ADA7 CD D3 AB D1 		call 	EvaluateAtPrecedence0
   21 D1:ADAB C3 F7 A9 D1 		jp  	CheckRightBracket
   22 D1:ADAF -  -  -  -  
   23 D1:ADAF -  -  -  -  ; ***************************************************************************************
   24 D1:ADAF -  -  -  -  ;
   25 D1:ADAF -  -  -  -  ;									Handle &x
   26 D1:ADAF -  -  -  -  ;
   27 D1:ADAF -  -  -  -  ; ***************************************************************************************
   28 D1:ADAF -  -  -  -  
   29 D1:ADAF -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:ADAF DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:ADB2 E6 C0 -  -  		and 		$C0
   32 D1:ADB4 FE 40 -  -  		cp 			$40
   33 D1:ADB6 C2 89 AA D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:ADBA C3 C3 AC D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:ADBE -  -  -  -  
   36 D1:ADBE -  -  -  -  ; ***************************************************************************************
   37 D1:ADBE -  -  -  -  ;
   38 D1:ADBE -  -  -  -  ;									Changes and Updates
   39 D1:ADBE -  -  -  -  ;
   40 D1:ADBE -  -  -  -  ; ***************************************************************************************
   41 D1:ADBE -  -  -  -  ;
   42 D1:ADBE -  -  -  -  ;		Date			Notes
   43 D1:ADBE -  -  -  -  ;		==== 			=====
   44 D1:ADBE -  -  -  -  ;
   45 D1:ADBE -  -  -  -  ; ***************************************************************************************
   46 D1:ADBE -  -  -  -  		
Listing for file "_build.asm"
   33 D1:ADBE -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:ADBE -  -  -  -  ; ***************************************************************************************
    2 D1:ADBE -  -  -  -  ; ***************************************************************************************
    3 D1:ADBE -  -  -  -  ;
    4 D1:ADBE -  -  -  -  ;		Name : 		clear.asm
    5 D1:ADBE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADBE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADBE -  -  -  -  ;		Reviewed :	No
    8 D1:ADBE -  -  -  -  ;		Purpose :	Clear command.
    9 D1:ADBE -  -  -  -  ;
   10 D1:ADBE -  -  -  -  ; ***************************************************************************************
   11 D1:ADBE -  -  -  -  ; ***************************************************************************************
   12 D1:ADBE -  -  -  -  
   13 D1:ADBE -  -  -  -  ; ***************************************************************************************
   14 D1:ADBE -  -  -  -  ;
   15 D1:ADBE -  -  -  -  ;										CLEAR command
   16 D1:ADBE -  -  -  -  ;
   17 D1:ADBE -  -  -  -  ; ***************************************************************************************
   18 D1:ADBE -  -  -  -  
   19 D1:ADBE -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:ADBE -  -  -  -  		;
   21 D1:ADBE -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:ADBE -  -  -  -  		;
   23 D1:ADBE 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:ADC2 -  -  -  -  _CCFindLow:
   25 D1:ADC2 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:ADC6 5E -  -  -  		ld 		e,(hl)		
   27 D1:ADC7 19 -  -  -  		add 	hl,de
   28 D1:ADC8 7B -  -  -  		ld 		a,e
   29 D1:ADC9 B7 -  -  -  		or 		a
   30 D1:ADCA 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:ADCC 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:ADCD 22 00 00 00 		ld 		(TopMemory),hl 				; save TOP
   33 D1:ADD1 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:ADD2 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   35 D1:ADD6 -  -  -  -  		;
   36 D1:ADD6 -  -  -  -  		; 	 		Reset the language stack
   37 D1:ADD6 -  -  -  -  		;
   38 D1:ADD6 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:ADDA -  -  -  -  		;
   40 D1:ADDA 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:ADDC 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:ADE0 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:ADE4 19 -  -  -  		add 	hl,de
   44 D1:ADE5 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:ADE7 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:ADEB -  -  -  -  		;
   47 D1:ADEB 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:ADEF 19 -  -  -  		add 	hl,de
   49 D1:ADF0 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:ADF4 -  -  -  -  		;
   51 D1:ADF4 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 D1:ADF4 -  -  -  -  		;
   53 D1:ADF4 -  -  -  -  
   54 D1:ADF4 -  -  -  -  		;
   55 D1:ADF4 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 D1:ADF4 -  -  -  -  		;
   57 D1:ADF4 -  -  -  -  
   58 D1:ADF4 -  -  -  -  		;
   59 D1:ADF4 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 D1:ADF4 -  -  -  -  		;
   61 D1:ADF4 C9 -  -  -  		ret
   62 D1:ADF5 -  -  -  -  
   63 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   64 D1:ADF5 -  -  -  -  ;
   65 D1:ADF5 -  -  -  -  ;									Changes and Updates
   66 D1:ADF5 -  -  -  -  ;
   67 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   68 D1:ADF5 -  -  -  -  ;
   69 D1:ADF5 -  -  -  -  ;		Date			Notes
   70 D1:ADF5 -  -  -  -  ;		==== 			=====
   71 D1:ADF5 -  -  -  -  ;
   72 D1:ADF5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:ADF5 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:ADF5 -  -  -  -  ; ***************************************************************************************
    2 D1:ADF5 -  -  -  -  ; ***************************************************************************************
    3 D1:ADF5 -  -  -  -  ;
    4 D1:ADF5 -  -  -  -  ;		Name : 		instance.asm
    5 D1:ADF5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADF5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADF5 -  -  -  -  ;		Reviewed :	No
    8 D1:ADF5 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:ADF5 -  -  -  -  ;
   10 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   11 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   12 D1:ADF5 -  -  -  -  
   13 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   14 D1:ADF5 -  -  -  -  ;
   15 D1:ADF5 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:ADF5 -  -  -  -  ;
   17 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   18 D1:ADF5 -  -  -  -  
   19 D1:ADF5 -  -  -  -  SetCurrentInstance:
   20 D1:ADF5 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:ADFA 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:ADFE ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:AE03 -  -  -  -  
   24 D1:AE03 C9 -  -  -  		ret
   25 D1:AE04 -  -  -  -  
   26 D1:AE04 -  -  -  -  
   27 D1:AE04 -  -  -  -  ; ***************************************************************************************
   28 D1:AE04 -  -  -  -  ;
   29 D1:AE04 -  -  -  -  ;									Changes and Updates
   30 D1:AE04 -  -  -  -  ;
   31 D1:AE04 -  -  -  -  ; ***************************************************************************************
   32 D1:AE04 -  -  -  -  ;
   33 D1:AE04 -  -  -  -  ;		Date			Notes
   34 D1:AE04 -  -  -  -  ;		==== 			=====
   35 D1:AE04 -  -  -  -  ;
   36 D1:AE04 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AE04 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:AE04 -  -  -  -  ; ***************************************************************************************
    2 D1:AE04 -  -  -  -  ; ***************************************************************************************
    3 D1:AE04 -  -  -  -  ;
    4 D1:AE04 -  -  -  -  ;		Name : 		new.asm
    5 D1:AE04 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE04 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE04 -  -  -  -  ;		Reviewed :	No
    8 D1:AE04 -  -  -  -  ;		Purpose :	New command.
    9 D1:AE04 -  -  -  -  ;
   10 D1:AE04 -  -  -  -  ; ***************************************************************************************
   11 D1:AE04 -  -  -  -  ; ***************************************************************************************
   12 D1:AE04 -  -  -  -  
   13 D1:AE04 -  -  -  -  ; ***************************************************************************************
   14 D1:AE04 -  -  -  -  ;
   15 D1:AE04 -  -  -  -  ;										NEW command
   16 D1:AE04 -  -  -  -  ;
   17 D1:AE04 -  -  -  -  ; ***************************************************************************************
   18 D1:AE04 -  -  -  -  
   19 D1:AE04 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:AE04 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:AE08 36 00 -  -  		ld 		(hl),0
   22 D1:AE0A CD BE AD D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:AE0E 3E 00 C3 1F 
              AA D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:AE14 -  -  -  -  
   25 D1:AE14 -  -  -  -  ; ***************************************************************************************
   26 D1:AE14 -  -  -  -  ;
   27 D1:AE14 -  -  -  -  ;									Changes and Updates
   28 D1:AE14 -  -  -  -  ;
   29 D1:AE14 -  -  -  -  ; ***************************************************************************************
   30 D1:AE14 -  -  -  -  ;
   31 D1:AE14 -  -  -  -  ;		Date			Notes
   32 D1:AE14 -  -  -  -  ;		==== 			=====
   33 D1:AE14 -  -  -  -  ;
   34 D1:AE14 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AE14 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:AE14 -  -  -  -  ; ***************************************************************************************
    2 D1:AE14 -  -  -  -  ; ***************************************************************************************
    3 D1:AE14 -  -  -  -  ;
    4 D1:AE14 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AE14 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE14 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE14 -  -  -  -  ;		Reviewed :	No
    8 D1:AE14 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:AE14 -  -  -  -  ;
   10 D1:AE14 -  -  -  -  ; ***************************************************************************************
   11 D1:AE14 -  -  -  -  ; ***************************************************************************************
   12 D1:AE14 -  -  -  -  
   13 D1:AE14 -  -  -  -  ; ***************************************************************************************
   14 D1:AE14 -  -  -  -  ;
   15 D1:AE14 -  -  -  -  ;							Print ASCIIZ string at HL
   16 D1:AE14 -  -  -  -  ;
   17 D1:AE14 -  -  -  -  ; ***************************************************************************************
   18 D1:AE14 -  -  -  -  
   19 D1:AE14 -  -  -  -  PrintStringAtHL:
   20 D1:AE14 7E -  -  -  		ld 		a,(hl)
   21 D1:AE15 B7 -  -  -  		or 		a
   22 D1:AE16 C8 -  -  -  		ret 	z
   23 D1:AE17 CD A3 B3 D1 		call 	SYSPrintChar
   24 D1:AE1B 23 -  -  -  		inc 	hl
   25 D1:AE1C 18 F6 -  -  		jr 		PrintStringAtHL
   26 D1:AE1E -  -  -  -  
   27 D1:AE1E -  -  -  -  ; ***************************************************************************************
   28 D1:AE1E -  -  -  -  ;
   29 D1:AE1E -  -  -  -  ;									Changes and Updates
   30 D1:AE1E -  -  -  -  ;
   31 D1:AE1E -  -  -  -  ; ***************************************************************************************
   32 D1:AE1E -  -  -  -  ;
   33 D1:AE1E -  -  -  -  ;		Date			Notes
   34 D1:AE1E -  -  -  -  ;		==== 			=====
   35 D1:AE1E -  -  -  -  ;
   36 D1:AE1E -  -  -  -  ; ***************************************************************************************
   37 D1:AE1E -  -  -  -  		
Listing for file "_build.asm"
   37 D1:AE1E -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:AE1E -  -  -  -  ;
    2 D1:AE1E -  -  -  -  ;	This file is automatically generated.
    3 D1:AE1E -  -  -  -  ;
    4 D1:AE1E -  -  -  -  ;
    5 D1:AE1E -  -  -  -  ;	Keywords for set 0
    6 D1:AE1E -  -  -  -  ;
    7 D1:AE1E -  -  -  -  KeywordsSet0:
    8 D1:AE1E 01 20 -  -  	.db	1," "              ; $0080
    9 D1:AE20 01 20 -  -  	.db	1," "              ; $0081
   10 D1:AE22 01 20 -  -  	.db	1," "              ; $0082
   11 D1:AE24 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:AE26 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:AE28 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:AE2A 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:AE2C 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:AE30 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 D1:AE34 01 2B -  -  	.db	1,"+"              ; $0089
   18 D1:AE36 01 2D -  -  	.db	1,"-"              ; $008a
   19 D1:AE38 02 3E 3D -  	.db	2,">="             ; $008b
   20 D1:AE3B 02 3C 3D -  	.db	2,"<="             ; $008c
   21 D1:AE3E 01 3E -  -  	.db	1,">"              ; $008d
   22 D1:AE40 01 3C -  -  	.db	1,"<"              ; $008e
   23 D1:AE42 01 3D -  -  	.db	1,"="              ; $008f
   24 D1:AE44 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 D1:AE47 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 D1:AE4B 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 D1:AE4E 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 D1:AE52 01 26 -  -  	.db	1,"&"              ; $0094
   29 D1:AE54 01 28 -  -  	.db	1,"("              ; $0095
   30 D1:AE56 01 24 -  -  	.db	1,"$"              ; $0096
   31 D1:AE58 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 D1:AE5C 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 D1:AE60 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 D1:AE64 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 D1:AE68 03 49 4E 54 	.db	3,"INT"            ; $009b
   36 D1:AE6C 03 53 54 52 	.db	3,"STR"            ; $009c
   37 D1:AE70 03 43 48 52 	.db	3,"CHR"            ; $009d
   38 D1:AE74 03 41 53 43 	.db	3,"ASC"            ; $009e
   39 D1:AE78 03 4E 4F 54 	.db	3,"NOT"            ; $009f
   40 D1:AE7C 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $00a0
   41 D1:AE81 06 53 54 52 
              49 4E 47 -  	.db	6,"STRING"         ; $00a1
   42 D1:AE88 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a2
   43 D1:AE8D 03 54 4F 50 	.db	3,"TOP"            ; $00a3
   44 D1:AE91 01 29 -  -  	.db	1,")"              ; $00a4
   45 D1:AE93 01 2C -  -  	.db	1,","              ; $00a5
   46 D1:AE95 01 3A -  -  	.db	1,":"              ; $00a6
   47 D1:AE97 01 3B -  -  	.db	1,";"              ; $00a7
   48 D1:AE99 01 27 -  -  	.db	1,"'"              ; $00a8
   49 D1:AE9B 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a9
   50 D1:AEA2 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00aa
   51 D1:AEA8 02 49 46 -  	.db	2,"IF"             ; $00ab
   52 D1:AEAB 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ac
   53 D1:AEB0 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ad
   54 D1:AEB5 03 46 4F 52 	.db	3,"FOR"            ; $00ae
   55 D1:AEB9 02 54 4F -  	.db	2,"TO"             ; $00af
   56 D1:AEBC 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b0
   57 D1:AEC1 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b1
   58 D1:AEC6 03 44 45 46 	.db	3,"DEF"            ; $00b2
   59 D1:AECA 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b3
   60 D1:AECF 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b4
   61 D1:AED7 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b5
   62 D1:AEDD 03 44 49 4D 	.db	3,"DIM"            ; $00b6
   63 D1:AEE1 03 52 45 4D 	.db	3,"REM"            ; $00b7
   64 D1:AEE5 03 4C 45 54 	.db	3,"LET"            ; $00b8
   65 D1:AEE9 03 56 44 55 	.db	3,"VDU"            ; $00b9
   66 D1:AEED 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00ba
   67 D1:AEF3 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bb
   68 D1:AEF8 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bc
   69 D1:AEFD 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bd
   70 D1:AF02 03 4E 45 57 	.db	3,"NEW"            ; $00be
   71 D1:AF06 03 52 55 4E 	.db	3,"RUN"            ; $00bf
   72 D1:AF0A 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c0
   73 D1:AF0F 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c1
   74 D1:AF14 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c2
   75 D1:AF1C 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c3
   76 D1:AF23 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c4
   77 D1:AF29 03 45 4E 44 	.db	3,"END"            ; $00c5
   78 D1:AF2D 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c6
   79 D1:AF32 00 -  -  -  	.db	0
   80 D1:AF33 -  -  -  -  ;
   81 D1:AF33 -  -  -  -  ;	Keywords for set 1
   82 D1:AF33 -  -  -  -  ;
   83 D1:AF33 -  -  -  -  KeywordsSet1:
   84 D1:AF33 00 -  -  -  	.db	0
   85 D1:AF34 -  -  -  -  ;
   86 D1:AF34 -  -  -  -  ;	Keywords for set 2
   87 D1:AF34 -  -  -  -  ;
   88 D1:AF34 -  -  -  -  KeywordsSet2:
   89 D1:AF34 00 -  -  -  	.db	0
Listing for file "_build.asm"
   38 D1:AF35 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:AF35 -  -  -  -  ;
    2 D1:AF35 -  -  -  -  ;	This file is automatically generated.
    3 D1:AF35 -  -  -  -  ;
    4 D1:AF35 00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 D1:AF40 -  -  -  -  PrecedenceTable:
    6 D1:AF40 06 -  -  -  	.db	6	; $0083 !
    7 D1:AF41 06 -  -  -  	.db	6	; $0084 ?
    8 D1:AF42 05 -  -  -  	.db	5	; $0085 *
    9 D1:AF43 05 -  -  -  	.db	5	; $0086 /
   10 D1:AF44 05 -  -  -  	.db	5	; $0087 mod
   11 D1:AF45 05 -  -  -  	.db	5	; $0088 div
   12 D1:AF46 04 -  -  -  	.db	4	; $0089 +
   13 D1:AF47 04 -  -  -  	.db	4	; $008a -
   14 D1:AF48 03 -  -  -  	.db	3	; $008b >=
   15 D1:AF49 03 -  -  -  	.db	3	; $008c <=
   16 D1:AF4A 03 -  -  -  	.db	3	; $008d >
   17 D1:AF4B 03 -  -  -  	.db	3	; $008e <
   18 D1:AF4C 03 -  -  -  	.db	3	; $008f =
   19 D1:AF4D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:AF4E 02 -  -  -  	.db	2	; $0091 and
   21 D1:AF4F 01 -  -  -  	.db	1	; $0092 or
   22 D1:AF50 01 -  -  -  	.db	1	; $0093 eor
   23 D1:AF51 -  -  -  -  
Listing for file "_build.asm"
   39 D1:AF51 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:AF51 -  -  -  -  ;
    2 D1:AF51 -  -  -  -  ;	This is automatically generated.
    3 D1:AF51 -  -  -  -  ;
    4 D1:AF51 -  -  -  -  ErrorIDTable:
    5 D1:AF51 89 AF D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:AF55 8F AF D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:AF59 A0 AF D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:AF5D AE AF D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:AF61 B8 AF D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:AF65 D2 AF D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:AF69 E3 AF D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:AF6D F1 AF D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:AF71 FF AF D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 D1:AF75 15 B0 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 D1:AF79 23 B0 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 D1:AF7D 28 B0 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 D1:AF81 35 B0 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 D1:AF85 46 B0 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 D1:AF89 -  -  -  -  
   20 D1:AF89 -  -  -  -  ErrText_warmstart:
   21 D1:AF89 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 D1:AF8F -  -  -  -  ErrText_assert:
   23 D1:AF8F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 D1:AFA0 -  -  -  -  ErrText_badtype:
   25 D1:AFA0 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 D1:AFAE -  -  -  -  ErrText_badvalue:
   27 D1:AFAE 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 D1:AFB8 -  -  -  -  ErrText_disabled:
   29 D1:AFB8 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 D1:AFD2 -  -  -  -  ErrText_divzero:
   31 D1:AFD2 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 D1:AFE3 -  -  -  -  ErrText_memory:
   33 D1:AFE3 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 D1:AFF1 -  -  -  -  ErrText_nocomma:
   35 D1:AFF1 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 D1:AFFF -  -  -  -  ErrText_norbracket:
   37 D1:AFFF 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 D1:B015 -  -  -  -  ErrText_notref:
   39 D1:B015 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 D1:B023 -  -  -  -  ErrText_stop:
   41 D1:B023 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 D1:B028 -  -  -  -  ErrText_syntax:
   43 D1:B028 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 D1:B035 -  -  -  -  ErrText_todo:
   45 D1:B035 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 D1:B046 -  -  -  -  ErrText_unknownvar:
   47 D1:B046 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   40 D1:B057 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B057 -  -  -  -  ;
    2 D1:B057 -  -  -  -  ;	Vectors for set 0
    3 D1:B057 -  -  -  -  ;
    4 D1:B057 -  -  -  -  VectorsSet0:
    5 D1:B057 51 A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B05B A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B05F A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B063 FF AA D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B067 08 AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B06B AB AA D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B06F B9 AA D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B073 C7 AA D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B077 B9 AA D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B07B 8F AA D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B07F 9D AA D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B083 66 AB D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B087 5C AB D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B08B 48 AB D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B08F 3E AB D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B093 34 AB D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B097 52 AB D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B09B D5 AA D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B09F E3 AA D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B0A3 F1 AA D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B0A7 AF AD D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B0AB A7 AD D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B0AF A5 A8 D1 00 	addr(Unimplemented)              ; $0096 $
   28 D1:B0B3 A5 A8 D1 00 	addr(Unimplemented)              ; $0097 rnd
   29 D1:B0B7 A5 A8 D1 00 	addr(Unimplemented)              ; $0098 len
   30 D1:B0BB A5 A8 D1 00 	addr(Unimplemented)              ; $0099 abs
   31 D1:B0BF A5 A8 D1 00 	addr(Unimplemented)              ; $009a sgn
   32 D1:B0C3 A5 A8 D1 00 	addr(Unimplemented)              ; $009b int
   33 D1:B0C7 A5 A8 D1 00 	addr(Unimplemented)              ; $009c str
   34 D1:B0CB A5 A8 D1 00 	addr(Unimplemented)              ; $009d chr
   35 D1:B0CF A5 A8 D1 00 	addr(Unimplemented)              ; $009e asc
   36 D1:B0D3 A5 A8 D1 00 	addr(Unimplemented)              ; $009f not
   37 D1:B0D7 9A AD D1 00 	addr(Unary_Page)                 ; $00a0 page
   38 D1:B0DB A5 A8 D1 00 	addr(Unimplemented)              ; $00a1 string
   39 D1:B0DF A5 A8 D1 00 	addr(Unimplemented)              ; $00a2 time
   40 D1:B0E3 A5 A8 D1 00 	addr(Unimplemented)              ; $00a3 top
   41 D1:B0E7 46 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a4 )
   42 D1:B0EB 46 A9 D1 00 	addr(BadCmd_Comma)               ; $00a5 ,
   43 D1:B0EF 4A A9 D1 00 	addr(Command_Colon)              ; $00a6 :
   44 D1:B0F3 46 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a7 ;
   45 D1:B0F7 68 A9 D1 00 	addr(Command_REM2)               ; $00a8 '
   46 D1:B0FB A5 A8 D1 00 	addr(Unimplemented)              ; $00a9 repeat
   47 D1:B0FF A5 A8 D1 00 	addr(Unimplemented)              ; $00aa until
   48 D1:B103 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab if
   49 D1:B107 46 A9 D1 00 	addr(BadCmd_Then)                ; $00ac then
   50 D1:B10B A5 A8 D1 00 	addr(Unimplemented)              ; $00ad else
   51 D1:B10F A5 A8 D1 00 	addr(Unimplemented)              ; $00ae for
   52 D1:B113 46 A9 D1 00 	addr(BadCmd_To)                  ; $00af to
   53 D1:B117 A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 step
   54 D1:B11B A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 next
   55 D1:B11F 46 A9 D1 00 	addr(BadCmd_Defproc)             ; $00b2 def
   56 D1:B123 A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 proc
   57 D1:B127 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 endproc
   58 D1:B12B A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 local
   59 D1:B12F A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 dim
   60 D1:B133 68 A9 D1 00 	addr(Command_REM)                ; $00b7 rem
   61 D1:B137 A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 let
   62 D1:B13B A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 vdu
   63 D1:B13F A5 A8 D1 00 	addr(Unimplemented)              ; $00ba print
   64 D1:B143 A5 A8 D1 00 	addr(Unimplemented)              ; $00bb load
   65 D1:B147 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc save
   66 D1:B14B A5 A8 D1 00 	addr(Unimplemented)              ; $00bd list
   67 D1:B14F 04 AE D1 00 	addr(Command_NEW)                ; $00be new
   68 D1:B153 85 A9 D1 00 	addr(Command_RUN)                ; $00bf run
   69 D1:B157 A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 read
   70 D1:B15B A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 data
   71 D1:B15F A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 restore
   72 D1:B163 35 A9 D1 00 	addr(Command_ASSERT)             ; $00c3 assert
   73 D1:B167 BE AD D1 00 	addr(Command_CLEAR)              ; $00c4 clear
   74 D1:B16B 4B A9 D1 00 	addr(Command_END)                ; $00c5 end
   75 D1:B16F F1 A9 D1 00 	addr(Command_STOP)               ; $00c6 stop
   76 D1:B173 -  -  -  -  ;
   77 D1:B173 -  -  -  -  ;	Vectors for set 1
   78 D1:B173 -  -  -  -  ;
   79 D1:B173 -  -  -  -  VectorsSet1:
   80 D1:B173 -  -  -  -  ;
   81 D1:B173 -  -  -  -  ;	Vectors for set 2
   82 D1:B173 -  -  -  -  ;
   83 D1:B173 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   41 D1:B173 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B173 -  -  -  -  ; ***************************************************************************************
    2 D1:B173 -  -  -  -  ; ***************************************************************************************
    3 D1:B173 -  -  -  -  ;
    4 D1:B173 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B173 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B173 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B173 -  -  -  -  ;		Reviewed :	No
    8 D1:B173 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B173 -  -  -  -  ;
   10 D1:B173 -  -  -  -  ; ***************************************************************************************
   11 D1:B173 -  -  -  -  ; ***************************************************************************************
   12 D1:B173 -  -  -  -  
   13 D1:B173 -  -  -  -  ; ***************************************************************************************
   14 D1:B173 -  -  -  -  ;
   15 D1:B173 -  -  -  -  ;								Unsigned integer divide
   16 D1:B173 -  -  -  -  ;
   17 D1:B173 -  -  -  -  ; ***************************************************************************************
   18 D1:B173 -  -  -  -  
   19 D1:B173 -  -  -  -  Int32UDivide:
   20 D1:B173 37 -  -  -  		scf
   21 D1:B174 C3 B8 B1 D1 		jp 		_I32UnsignedDivide		
   22 D1:B178 -  -  -  -  
   23 D1:B178 -  -  -  -  ; ***************************************************************************************
   24 D1:B178 -  -  -  -  ;
   25 D1:B178 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B178 -  -  -  -  ;
   27 D1:B178 -  -  -  -  ; ***************************************************************************************
   28 D1:B178 -  -  -  -  
   29 D1:B178 -  -  -  -  Int32SDivide:
   30 D1:B178 37 -  -  -  		scf
   31 D1:B179 18 01 -  -  		jr 		_I32SDivide
   32 D1:B17B -  -  -  -  Int32Modulus:
   33 D1:B17B AF -  -  -  		xor 	a
   34 D1:B17C -  -  -  -  _I32SDivide:
   35 D1:B17C 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B17D F5 -  -  -  		push 	af
   37 D1:B17E 08 -  -  -  		ex 		af,af'
   38 D1:B17F -  -  -  -  
   39 D1:B17F D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B180 D9 -  -  -  		exx
   41 D1:B181 D5 -  -  -  		push 	de
   42 D1:B182 D9 -  -  -  		exx
   43 D1:B183 -  -  -  -  
   44 D1:B183 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B184 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B185 CD A5 B1 D1 		call 	_I32CheckHLSignSwap
   47 D1:B189 CD A5 B1 D1 		call 	_I32CheckHLSignSwap
   48 D1:B18D 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B18E F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B18F F5 -  -  -  		push 	af
   51 D1:B190 CD B8 B1 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B194 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B195 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B197 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B198 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B19A C4 1A B3 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B19E -  -  -  -  _I32SDExit:
   58 D1:B19E D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B19F D1 -  -  -  		pop 	de
   60 D1:B1A0 D9 -  -  -  		exx
   61 D1:B1A1 D1 -  -  -  		pop 	de
   62 D1:B1A2 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B1A3 08 -  -  -  		ex 		af,af'
   64 D1:B1A4 C9 -  -  -  		ret
   65 D1:B1A5 -  -  -  -  
   66 D1:B1A5 -  -  -  -  
   67 D1:B1A5 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B1A5 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B1A6 CB 7C -  -  		bit 	7,h
   70 D1:B1A8 D9 -  -  -  		exx
   71 D1:B1A9 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B1AB -  -  -  -  		;
   73 D1:B1AB C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B1AD F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B1AE CD 1A B3 D1 		call 	Int32Negate 				
   76 D1:B1B2 F1 -  -  -  		pop 	af
   77 D1:B1B3 -  -  -  -  _I32CHSPositive:
   78 D1:B1B3 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B1B4 EB -  -  -  		ex 		de,hl
   80 D1:B1B5 D9 -  -  -  		exx		
   81 D1:B1B6 EB -  -  -  		ex 		de,hl
   82 D1:B1B7 C9 -  -  -  		ret
   83 D1:B1B8 -  -  -  -  
   84 D1:B1B8 -  -  -  -  ; ***************************************************************************************
   85 D1:B1B8 -  -  -  -  ;
   86 D1:B1B8 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B1B8 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B1B8 -  -  -  -  ;
   89 D1:B1B8 -  -  -  -  ; ***************************************************************************************
   90 D1:B1B8 -  -  -  -  
   91 D1:B1B8 -  -  -  -  _I32UnsignedDivide:
   92 D1:B1B8 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B1B9 D5 -  -  -  		push 	de
   94 D1:B1BA D9 -  -  -  		exx
   95 D1:B1BB C5 -  -  -  		push 	bc
   96 D1:B1BC D5 -  -  -  		push 	de 							
   97 D1:B1BD D9 -  -  -  		exx
   98 D1:B1BE -  -  -  -  
   99 D1:B1BE F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B1BF -  -  -  -  
  101 D1:B1BF 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B1C0 B3 -  -  -  		or 		e
  103 D1:B1C1 D9 -  -  -  		exx
  104 D1:B1C2 B2 -  -  -  		or 		d
  105 D1:B1C3 B3 -  -  -  		or 		e
  106 D1:B1C4 D9 -  -  -  		exx
  107 D1:B1C5 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B1C9 -  -  -  -  
  109 D1:B1C9 -  -  -  -  
  110 D1:B1C9 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B1CA 4D -  -  -  		ld		c,l
  112 D1:B1CB 21 00 00 00 		ld 		hl,$0000
  113 D1:B1CF D9 -  -  -  		exx
  114 D1:B1D0 44 -  -  -  		ld 		b,h
  115 D1:B1D1 4D -  -  -  		ld		c,l
  116 D1:B1D2 21 00 00 00 		ld 		hl,$0000
  117 D1:B1D6 D9 -  -  -  		exx
  118 D1:B1D7 -  -  -  -  
  119 D1:B1D7 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B1D9 -  -  -  -  _I32DivideLoop:
  121 D1:B1D9 F5 -  -  -  		push 	af
  122 D1:B1DA -  -  -  -  
  123 D1:B1DA CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B1DC CB 10 -  -  		rl 		b
  125 D1:B1DE D9 -  -  -  		exx
  126 D1:B1DF CB 11 -  -  		rl 		c
  127 D1:B1E1 CB 10 -  -  		rl 		b
  128 D1:B1E3 D9 -  -  -  		exx
  129 D1:B1E4 CB 15 -  -  		rl 		l
  130 D1:B1E6 CB 14 -  -  		rl 		h
  131 D1:B1E8 D9 -  -  -  		exx
  132 D1:B1E9 CB 15 -  -  		rl 		l
  133 D1:B1EB CB 14 -  -  		rl 		h
  134 D1:B1ED D9 -  -  -  		exx
  135 D1:B1EE -  -  -  -  
  136 D1:B1EE CD B8 B2 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B1F2 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B1F4 -  -  -  -  
  139 D1:B1F4 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B1F5 18 04 -  -  		jr 		_I32Next
  141 D1:B1F7 -  -  -  -  
  142 D1:B1F7 -  -  -  -  _I32Borrow:
  143 D1:B1F7 CD B0 B2 D1 		call 	Int32Add 					; A = A + M
  144 D1:B1FB -  -  -  -  _I32Next:
  145 D1:B1FB F1 -  -  -  		pop 	af
  146 D1:B1FC 3D -  -  -  		dec 	a
  147 D1:B1FD 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B1FF -  -  -  -  
  149 D1:B1FF F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B200 -  -  -  -  
  151 D1:B200 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B201 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B203 -  -  -  -  
  154 D1:B203 60 -  -  -  		ld  	h,b
  155 D1:B204 69 -  -  -  		ld 		l,c
  156 D1:B205 D9 -  -  -  		exx
  157 D1:B206 60 -  -  -  		ld  	h,b
  158 D1:B207 69 -  -  -  		ld 		l,c
  159 D1:B208 D9 -  -  -  		exx
  160 D1:B209 -  -  -  -  _I32Modulus1:		
  161 D1:B209 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B20A D1 -  -  -  		pop 	de
  163 D1:B20B C1 -  -  -  		pop 	bc
  164 D1:B20C D9 -  -  -  		exx
  165 D1:B20D D1 -  -  -  		pop 	de
  166 D1:B20E C1 -  -  -  		pop 	bc
  167 D1:B20F C9 -  -  -  		ret
  168 D1:B210 -  -  -  -  
  169 D1:B210 -  -  -  -  ; ***************************************************************************************
  170 D1:B210 -  -  -  -  ;
  171 D1:B210 -  -  -  -  ;									Changes and Updates
  172 D1:B210 -  -  -  -  ;
  173 D1:B210 -  -  -  -  ; ***************************************************************************************
  174 D1:B210 -  -  -  -  ;
  175 D1:B210 -  -  -  -  ;		Date			Notes
  176 D1:B210 -  -  -  -  ;		==== 			=====
  177 D1:B210 -  -  -  -  ;
  178 D1:B210 -  -  -  -  ; ***************************************************************************************
  179 D1:B210 -  -  -  -  		
Listing for file "_build.asm"
   42 D1:B210 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B210 -  -  -  -  ; ***************************************************************************************
    2 D1:B210 -  -  -  -  ; ***************************************************************************************
    3 D1:B210 -  -  -  -  ;
    4 D1:B210 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B210 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B210 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B210 -  -  -  -  ;		Reviewed :	No
    8 D1:B210 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B210 -  -  -  -  ;
   10 D1:B210 -  -  -  -  ; ***************************************************************************************
   11 D1:B210 -  -  -  -  ; ***************************************************************************************
   12 D1:B210 -  -  -  -  
   13 D1:B210 -  -  -  -  ; ***************************************************************************************
   14 D1:B210 -  -  -  -  ;
   15 D1:B210 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B210 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B210 -  -  -  -  ;
   18 D1:B210 -  -  -  -  ; ***************************************************************************************
   19 D1:B210 -  -  -  -  
   20 D1:B210 -  -  -  -  Int32FromString:
   21 D1:B210 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B211 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B212 D5 -  -  -  		push 	de
   24 D1:B213 D9 -  -  -  		exx
   25 D1:B214 D5 -  -  -  		push 	de
   26 D1:B215 -  -  -  -  
   27 D1:B215 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B219 11 00 00 00 		ld 		de,$0000
   29 D1:B21D D9 -  -  -  		exx
   30 D1:B21E 21 00 00 00 		ld 		hl,$0000
   31 D1:B222 11 00 00 00 		ld 		de,$0000
   32 D1:B226 D9 -  -  -  		exx
   33 D1:B227 -  -  -  -  
   34 D1:B227 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B228 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B22A 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B22C ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B22E 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B22F -  -  -  -  		;
   40 D1:B22F 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B230 F5 -  -  -  		push 	af
   42 D1:B231 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B233 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B234 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B236 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B237 18 01 -  -  		jr 		_I32FSMain
   47 D1:B239 -  -  -  -  _I32FSNotSigned:		
   48 D1:B239 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B23A -  -  -  -  		;
   50 D1:B23A -  -  -  -  		; 		Main conversion loop.
   51 D1:B23A -  -  -  -  		; 		
   52 D1:B23A -  -  -  -  _I32FSMain:		
   53 D1:B23A 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B23B FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B23D 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B23F D6 20 -  -  		sub 	32
   57 D1:B241 -  -  -  -  _I32FSNotLower:
   58 D1:B241 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B243 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B245 FE 3A -  -  		cp 		'9'+1
   61 D1:B247 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B249 FE 41 -  -  		cp 		'A'
   63 D1:B24B 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B24D FE 47 -  -  		cp 		'F'+1
   65 D1:B24F 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B251 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B253 -  -  -  -  _I32FSOkay:
   68 D1:B253 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B255 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B256 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B258 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B259 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B25A F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B25B CD 77 B2 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B25F F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B260 5F -  -  -  		ld 		e,a
   77 D1:B261 CD B0 B2 D1 		call 	Int32Add 					; and add it.
   78 D1:B265 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B266 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B268 -  -  -  -  
   81 D1:B268 -  -  -  -  _I32FSExit:
   82 D1:B268 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B269 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B26B CC 1A B3 D1 		call 	z,Int32Negate
   85 D1:B26F 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B270 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B271 D9 -  -  -  		exx
   88 D1:B272 D1 -  -  -  		pop 	de
   89 D1:B273 D9 -  -  -  		exx
   90 D1:B274 C1 -  -  -  		pop 	bc
   91 D1:B275 B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 D1:B276 C9 -  -  -  		ret				
   93 D1:B277 -  -  -  -  
   94 D1:B277 -  -  -  -  ; ***************************************************************************************
   95 D1:B277 -  -  -  -  ;
   96 D1:B277 -  -  -  -  ;									Changes and Updates
   97 D1:B277 -  -  -  -  ;
   98 D1:B277 -  -  -  -  ; ***************************************************************************************
   99 D1:B277 -  -  -  -  ;
  100 D1:B277 -  -  -  -  ;		Date			Notes
  101 D1:B277 -  -  -  -  ;		==== 			=====
  102 D1:B277 -  -  -  -  ;
  103 D1:B277 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B277 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B277 -  -  -  -  ; ***************************************************************************************
    2 D1:B277 -  -  -  -  ; ***************************************************************************************
    3 D1:B277 -  -  -  -  ;
    4 D1:B277 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B277 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B277 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B277 -  -  -  -  ;		Reviewed :	No
    8 D1:B277 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B277 -  -  -  -  ;
   10 D1:B277 -  -  -  -  ; ***************************************************************************************
   11 D1:B277 -  -  -  -  ; ***************************************************************************************
   12 D1:B277 -  -  -  -  
   13 D1:B277 -  -  -  -  Int32Multiply:
   14 D1:B277 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B278 D5 -  -  -  		push 	de
   16 D1:B279 44 -  -  -  		ld 		b,h
   17 D1:B27A 4D -  -  -  		ld 		c,l
   18 D1:B27B 21 00 00 00 		ld 		hl,$0000
   19 D1:B27F -  -  -  -  
   20 D1:B27F D9 -  -  -  		exx
   21 D1:B280 C5 -  -  -  		push 	bc
   22 D1:B281 D5 -  -  -  		push 	de
   23 D1:B282 44 -  -  -  		ld 		b,h
   24 D1:B283 4D -  -  -  		ld 		c,l
   25 D1:B284 21 00 00 00 		ld 		hl,$0000		
   26 D1:B288 D9 -  -  -  		exx
   27 D1:B289 -  -  -  -  
   28 D1:B289 -  -  -  -  _I32MultiplyLoop:
   29 D1:B289 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B28B C4 B0 B2 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B28F -  -  -  -  		;
   32 D1:B28F D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B290 CB 38 -  -  		srl 	b
   34 D1:B292 CB 19 -  -  		rr 		c
   35 D1:B294 D9 -  -  -  		exx
   36 D1:B295 CB 18 -  -  		rr 		b
   37 D1:B297 CB 19 -  -  		rr 		c
   38 D1:B299 -  -  -  -  		;
   39 D1:B299 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B29B CB 12 -  -  		rl 		d
   41 D1:B29D D9 -  -  -  		exx
   42 D1:B29E CB 13 -  -  		rl 		e
   43 D1:B2A0 CB 12 -  -  		rl 		d
   44 D1:B2A2 -  -  -  -  
   45 D1:B2A2 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B2A3 B1 -  -  -  		or 		c
   47 D1:B2A4 D9 -  -  -  		exx
   48 D1:B2A5 B0 -  -  -  		or 		b
   49 D1:B2A6 B1 -  -  -  		or 		c
   50 D1:B2A7 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B2A9 -  -  -  -  
   52 D1:B2A9 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B2AA D1 -  -  -  		pop 	de
   54 D1:B2AB C1 -  -  -  		pop 	bc
   55 D1:B2AC D9 -  -  -  		exx
   56 D1:B2AD D1 -  -  -  		pop 	de
   57 D1:B2AE C1 -  -  -  		pop 	bc
   58 D1:B2AF C9 -  -  -  		ret
   59 D1:B2B0 -  -  -  -  
   60 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   61 D1:B2B0 -  -  -  -  ;
   62 D1:B2B0 -  -  -  -  ;									Changes and Updates
   63 D1:B2B0 -  -  -  -  ;
   64 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   65 D1:B2B0 -  -  -  -  ;
   66 D1:B2B0 -  -  -  -  ;		Date			Notes
   67 D1:B2B0 -  -  -  -  ;		==== 			=====
   68 D1:B2B0 -  -  -  -  ;
   69 D1:B2B0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B2B0 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B2B0 -  -  -  -  ; ***************************************************************************************
    2 D1:B2B0 -  -  -  -  ; ***************************************************************************************
    3 D1:B2B0 -  -  -  -  ;
    4 D1:B2B0 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B2B0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2B0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B2B0 -  -  -  -  ;		Reviewed :	No
    8 D1:B2B0 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B2B0 -  -  -  -  ;
   10 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   11 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   12 D1:B2B0 -  -  -  -  
   13 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   14 D1:B2B0 -  -  -  -  ;
   15 D1:B2B0 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B2B0 -  -  -  -  ;
   17 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   18 D1:B2B0 -  -  -  -  
   19 D1:B2B0 -  -  -  -  Int32Add:
   20 D1:B2B0 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B2B2 D9 -  -  -  		exx
   22 D1:B2B3 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B2B6 D9 -  -  -  		exx
   24 D1:B2B7 C9 -  -  -  		ret
   25 D1:B2B8 -  -  -  -  
   26 D1:B2B8 -  -  -  -  ; ***************************************************************************************
   27 D1:B2B8 -  -  -  -  ;
   28 D1:B2B8 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B2B8 -  -  -  -  ;
   30 D1:B2B8 -  -  -  -  ; ***************************************************************************************
   31 D1:B2B8 -  -  -  -  
   32 D1:B2B8 -  -  -  -  Int32Subtract:
   33 D1:B2B8 AF -  -  -  		xor 	a 							; clear carry
   34 D1:B2B9 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B2BC D9 -  -  -  		exx
   36 D1:B2BD 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B2C0 D9 -  -  -  		exx
   38 D1:B2C1 C9 -  -  -  		ret
   39 D1:B2C2 -  -  -  -  
   40 D1:B2C2 -  -  -  -  ; ***************************************************************************************
   41 D1:B2C2 -  -  -  -  ;
   42 D1:B2C2 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B2C2 -  -  -  -  ;
   44 D1:B2C2 -  -  -  -  ; ***************************************************************************************
   45 D1:B2C2 -  -  -  -  
   46 D1:B2C2 -  -  -  -  Int32And:
   47 D1:B2C2 D9 -  -  -  		exx
   48 D1:B2C3 CD C8 B2 D1 		call 	_I32AndHLDE
   49 D1:B2C7 D9 -  -  -  		exx
   50 D1:B2C8 -  -  -  -  _I32AndHLDE:		
   51 D1:B2C8 7C -  -  -  		ld 		a,h
   52 D1:B2C9 A2 -  -  -  		and 	d
   53 D1:B2CA 67 -  -  -  		ld 		h,a
   54 D1:B2CB 7D -  -  -  		ld 		a,l
   55 D1:B2CC A3 -  -  -  		and 	e
   56 D1:B2CD 6F -  -  -  		ld 		l,a
   57 D1:B2CE C9 -  -  -  		ret
   58 D1:B2CF -  -  -  -  
   59 D1:B2CF -  -  -  -  ; ***************************************************************************************
   60 D1:B2CF -  -  -  -  ;
   61 D1:B2CF -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B2CF -  -  -  -  ;
   63 D1:B2CF -  -  -  -  ; ***************************************************************************************
   64 D1:B2CF -  -  -  -  
   65 D1:B2CF -  -  -  -  Int32Or:
   66 D1:B2CF D9 -  -  -  		exx
   67 D1:B2D0 CD D5 B2 D1 		call 	_I32OrHLDE
   68 D1:B2D4 D9 -  -  -  		exx
   69 D1:B2D5 -  -  -  -  _I32OrHLDE:		
   70 D1:B2D5 7C -  -  -  		ld 		a,h
   71 D1:B2D6 B2 -  -  -  		or 		d
   72 D1:B2D7 67 -  -  -  		ld 		h,a
   73 D1:B2D8 7D -  -  -  		ld 		a,l
   74 D1:B2D9 B3 -  -  -  		or 		e
   75 D1:B2DA 6F -  -  -  		ld 		l,a
   76 D1:B2DB C9 -  -  -  		ret
   77 D1:B2DC -  -  -  -  
   78 D1:B2DC -  -  -  -  ; ***************************************************************************************
   79 D1:B2DC -  -  -  -  ;
   80 D1:B2DC -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B2DC -  -  -  -  ;
   82 D1:B2DC -  -  -  -  ; ***************************************************************************************
   83 D1:B2DC -  -  -  -  
   84 D1:B2DC -  -  -  -  Int32Xor:
   85 D1:B2DC D9 -  -  -  		exx
   86 D1:B2DD CD E2 B2 D1 		call 	_I32XorHLDE
   87 D1:B2E1 D9 -  -  -  		exx
   88 D1:B2E2 -  -  -  -  _I32XorHLDE:		
   89 D1:B2E2 7C -  -  -  		ld 		a,h
   90 D1:B2E3 AA -  -  -  		xor 	d
   91 D1:B2E4 67 -  -  -  		ld 		h,a
   92 D1:B2E5 7D -  -  -  		ld 		a,l
   93 D1:B2E6 AB -  -  -  		xor 	e
   94 D1:B2E7 6F -  -  -  		ld 		l,a
   95 D1:B2E8 C9 -  -  -  		ret
   96 D1:B2E9 -  -  -  -  
   97 D1:B2E9 -  -  -  -  ; ***************************************************************************************
   98 D1:B2E9 -  -  -  -  ;
   99 D1:B2E9 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B2E9 -  -  -  -  ;
  101 D1:B2E9 -  -  -  -  ; ***************************************************************************************
  102 D1:B2E9 -  -  -  -  
  103 D1:B2E9 -  -  -  -  Int32Zero:
  104 D1:B2E9 D9 -  -  -  		exx
  105 D1:B2EA 7D -  -  -  		ld 		a,l
  106 D1:B2EB B4 -  -  -  		or 		h
  107 D1:B2EC D9 -  -  -  		exx
  108 D1:B2ED B5 -  -  -  		or 		l
  109 D1:B2EE B4 -  -  -  		or 		h
  110 D1:B2EF C9 -  -  -  		ret
  111 D1:B2F0 -  -  -  -  
  112 D1:B2F0 -  -  -  -  ; ***************************************************************************************
  113 D1:B2F0 -  -  -  -  ;
  114 D1:B2F0 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B2F0 -  -  -  -  ;
  116 D1:B2F0 -  -  -  -  ; ***************************************************************************************
  117 D1:B2F0 -  -  -  -  
  118 D1:B2F0 -  -  -  -  Int32Compare:
  119 D1:B2F0 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B2F1 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B2F2 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B2F5 D9 -  -  -  		exx
  123 D1:B2F6 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B2F7 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B2FA -  -  -  -  		;
  126 D1:B2FA 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B2FB E2 03 B3 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B2FF 78 -  -  -  		ld 		a,b
  129 D1:B300 EE 80 -  -  		xor 	$80
  130 D1:B302 47 -  -  -  		ld 		b,a
  131 D1:B303 -  -  -  -  _I32CNoOverflow:
  132 D1:B303 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B304 B5 -  -  -  		or 		l
  134 D1:B305 D9 -  -  -  		exx 
  135 D1:B306 B4 -  -  -  		or 		h
  136 D1:B307 B5 -  -  -  		or 		l
  137 D1:B308 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B30A -  -  -  -  		;
  139 D1:B30A D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B30B CB 78 -  -  		bit 	7,b
  141 D1:B30D D9 -  -  -  		exx
  142 D1:B30E 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B310 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B312 3E FF -  -  		ld 		a,$FF
  145 D1:B314 -  -  -  -  _I32NotPos:
  146 D1:B314 D9 -  -  -  		exx
  147 D1:B315 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B316 D9 -  -  -  		exx
  149 D1:B317 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B318 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B319 C9 -  -  -  		ret
  152 D1:B31A -  -  -  -  
  153 D1:B31A -  -  -  -  ; ***************************************************************************************
  154 D1:B31A -  -  -  -  ;
  155 D1:B31A -  -  -  -  ;										Negate HL'HL
  156 D1:B31A -  -  -  -  ;
  157 D1:B31A -  -  -  -  ; ***************************************************************************************
  158 D1:B31A -  -  -  -  
  159 D1:B31A -  -  -  -  Int32Negate:
  160 D1:B31A AF -  -  -  		xor 	a
  161 D1:B31B CD 26 B3 D1 		call 	_I32NSubtract
  162 D1:B31F D9 -  -  -  		exx
  163 D1:B320 CD 26 B3 D1 		call 	_I32NSubtract
  164 D1:B324 D9 -  -  -  		exx
  165 D1:B325 C9 -  -  -  		ret
  166 D1:B326 -  -  -  -  _I32NSubtract:
  167 D1:B326 D5 -  -  -  		push 	de
  168 D1:B327 EB -  -  -  		ex 		de,hl
  169 D1:B328 21 00 00 00 		ld 		hl,$0000
  170 D1:B32C 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B32F D1 -  -  -  		pop 	de
  172 D1:B330 C9 -  -  -  		ret
  173 D1:B331 -  -  -  -  		
  174 D1:B331 -  -  -  -  ; ***************************************************************************************
  175 D1:B331 -  -  -  -  ;
  176 D1:B331 -  -  -  -  ;									Changes and Updates
  177 D1:B331 -  -  -  -  ;
  178 D1:B331 -  -  -  -  ; ***************************************************************************************
  179 D1:B331 -  -  -  -  ;
  180 D1:B331 -  -  -  -  ;		Date			Notes
  181 D1:B331 -  -  -  -  ;		==== 			=====
  182 D1:B331 -  -  -  -  ;
  183 D1:B331 -  -  -  -  ; ***************************************************************************************
  184 D1:B331 -  -  -  -  		
Listing for file "_build.asm"
   45 D1:B331 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B331 -  -  -  -  ; ***************************************************************************************
    2 D1:B331 -  -  -  -  ; ***************************************************************************************
    3 D1:B331 -  -  -  -  ;
    4 D1:B331 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B331 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B331 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B331 -  -  -  -  ;		Reviewed :	No
    8 D1:B331 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B331 -  -  -  -  ;
   10 D1:B331 -  -  -  -  ; ***************************************************************************************
   11 D1:B331 -  -  -  -  ;
   12 D1:B331 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B331 -  -  -  -  ;
   14 D1:B331 -  -  -  -  ; ***************************************************************************************
   15 D1:B331 -  -  -  -  
   16 D1:B331 -  -  -  -  Int32ToString:
   17 D1:B331 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B332 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B333 E5 -  -  -  		push 	hl
   20 D1:B334 11 00 00 00 		ld	 	de,$0000
   21 D1:B338 D9 -  -  -  		exx
   22 D1:B339 D5 -  -  -  		push 	de
   23 D1:B33A E5 -  -  -  		push 	hl
   24 D1:B33B 11 00 00 00 		ld 		de,$000
   25 D1:B33F D9 -  -  -  		exx
   26 D1:B340 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B341 -  -  -  -  		;
   28 D1:B341 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B343 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B345 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B347 5F -  -  -  		ld 		e,a
   32 D1:B348 -  -  -  -  		;
   33 D1:B348 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B349 CB 7C -  -  		bit 	7,h
   35 D1:B34B D9 -  -  -  		exx
   36 D1:B34C 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B34E -  -  -  -  		;
   38 D1:B34E CD 1A B3 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B352 -  -  -  -  		;
   40 D1:B352 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B354 02 -  -  -  		ld 		(bc),a
   42 D1:B355 03 -  -  -  		inc 	bc
   43 D1:B356 -  -  -  -  _I32TSNotNegative:	
   44 D1:B356 CD 64 B3 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B35A -  -  -  -  _I32TSExit:
   46 D1:B35A AF -  -  -  		xor 	a  							; write the end of string code
   47 D1:B35B 02 -  -  -  		ld 		(bc),a 
   48 D1:B35C -  -  -  -  
   49 D1:B35C D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B35D E1 -  -  -  		pop 	hl
   51 D1:B35E D1 -  -  -  		pop 	de
   52 D1:B35F D9 -  -  -  		exx
   53 D1:B360 E1 -  -  -  		pop 	hl
   54 D1:B361 D1 -  -  -  		pop 	de
   55 D1:B362 C1 -  -  -  		pop 	bc
   56 D1:B363 C9 -  -  -  		ret
   57 D1:B364 -  -  -  -  
   58 D1:B364 -  -  -  -  _I32RecursiveConvert:
   59 D1:B364 CD 73 B1 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B368 F5 -  -  -  		push 	af 							; save remainder
   61 D1:B369 CD E9 B2 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B36D C4 64 B3 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B371 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B372 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B374 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B376 C6 07 -  -  		add 	a,7
   67 D1:B378 -  -  -  -  _I32NotHex:
   68 D1:B378 C6 30 -  -  		add 	a,48
   69 D1:B37A 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B37B 03 -  -  -  		inc 	bc
   71 D1:B37C C9 -  -  -  		ret		
   72 D1:B37D -  -  -  -  
   73 D1:B37D -  -  -  -  ; ***************************************************************************************
   74 D1:B37D -  -  -  -  ;
   75 D1:B37D -  -  -  -  ;									Changes and Updates
   76 D1:B37D -  -  -  -  ;
   77 D1:B37D -  -  -  -  ; ***************************************************************************************
   78 D1:B37D -  -  -  -  ;
   79 D1:B37D -  -  -  -  ;		Date			Notes
   80 D1:B37D -  -  -  -  ;		==== 			=====
   81 D1:B37D -  -  -  -  ;
   82 D1:B37D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:B37D -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B37D -  -  -  -  ; ***************************************************************************************
    2 D1:B37D -  -  -  -  ; ***************************************************************************************
    3 D1:B37D -  -  -  -  ;
    4 D1:B37D -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B37D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B37D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B37D -  -  -  -  ;		Reviewed :	No
    8 D1:B37D -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B37D -  -  -  -  ;
   10 D1:B37D -  -  -  -  ; ***************************************************************************************
   11 D1:B37D -  -  -  -  ; ***************************************************************************************
   12 D1:B37D -  -  -  -  
   13 D1:B37D -  -  -  -  #ifdef AQUARIUS
   14 D1:B37D             
   15 D1:B37D             ; ***************************************************************************************
   16 D1:B37D             ;
   17 D1:B37D             ;								Initialise system stuff
   18 D1:B37D             ;
   19 D1:B37D             ; ***************************************************************************************
   20 D1:B37D             
   21 D1:B37D             SYSInitialise:
   22 D1:B37D             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B37D             	call 	SYSPrintChar
   24 D1:B37D             	ret
   25 D1:B37D             
   26 D1:B37D             ; ***************************************************************************************
   27 D1:B37D             ;
   28 D1:B37D             ;								Terminate system stuff
   29 D1:B37D             ;
   30 D1:B37D             ; ***************************************************************************************
   31 D1:B37D             
   32 D1:B37D             SYSTerminate:
   33 D1:B37D             	jr 		SYSTerminate
   34 D1:B37D             
   35 D1:B37D             ; ***************************************************************************************
   36 D1:B37D             ;
   37 D1:B37D             ;								Print A character
   38 D1:B37D             ;
   39 D1:B37D             ; ***************************************************************************************
   40 D1:B37D             
   41 D1:B37D             SYSPrintChar:
   42 D1:B37D             	push 	af 									; we stack everything including alt registers
   43 D1:B37D             	push 	bc
   44 D1:B37D             	push 	de
   45 D1:B37D             	push 	hl
   46 D1:B37D             	push 	ix
   47 D1:B37D             	push 	iy
   48 D1:B37D             	exx
   49 D1:B37D             	push 	bc
   50 D1:B37D             	push 	de
   51 D1:B37D             	push 	hl
   52 D1:B37D             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B37D             	pop 	hl
   54 D1:B37D             	pop 	de
   55 D1:B37D             	pop 	bc
   56 D1:B37D             	exx
   57 D1:B37D             	pop 	iy
   58 D1:B37D             	pop 	ix
   59 D1:B37D             	pop 	hl
   60 D1:B37D             	pop 	de
   61 D1:B37D             	pop 	bc
   62 D1:B37D             	pop 	af
   63 D1:B37D             	ret		
   64 D1:B37D             
   65 D1:B37D             ; ***************************************************************************************
   66 D1:B37D             ;
   67 D1:B37D             ;									Print Newline
   68 D1:B37D             ;
   69 D1:B37D             ; ***************************************************************************************
   70 D1:B37D             
   71 D1:B37D             SYSPrintCRLF:
   72 D1:B37D             	push 	af
   73 D1:B37D             	ld 		a,13
   74 D1:B37D             	call 	SYSPrintChar
   75 D1:B37D             	ld 		a,10
   76 D1:B37D             	call 	SYSPrintChar
   77 D1:B37D             	pop 	af
   78 D1:B37D             	ret
   79 D1:B37D             
   80 D1:B37D             #endif
   81 D1:B37D -  -  -  -  
   82 D1:B37D -  -  -  -  ; ***************************************************************************************
   83 D1:B37D -  -  -  -  ;
   84 D1:B37D -  -  -  -  ;									Changes and Updates
   85 D1:B37D -  -  -  -  ;
   86 D1:B37D -  -  -  -  ; ***************************************************************************************
   87 D1:B37D -  -  -  -  ;
   88 D1:B37D -  -  -  -  ;		Date			Notes
   89 D1:B37D -  -  -  -  ;		==== 			=====
   90 D1:B37D -  -  -  -  ;
   91 D1:B37D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:B37D -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B37D -  -  -  -  ; ***************************************************************************************
    2 D1:B37D -  -  -  -  ; ***************************************************************************************
    3 D1:B37D -  -  -  -  ;
    4 D1:B37D -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B37D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B37D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B37D -  -  -  -  ;		Reviewed :	No
    8 D1:B37D -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B37D -  -  -  -  ;
   10 D1:B37D -  -  -  -  ; ***************************************************************************************
   11 D1:B37D -  -  -  -  ; ***************************************************************************************
   12 D1:B37D -  -  -  -  
   13 D1:B37D -  -  -  -  #ifdef CLEANEZ80
   14 D1:B37D             
   15 D1:B37D             ; ***************************************************************************************
   16 D1:B37D             ;
   17 D1:B37D             ;								Initialise system stuff
   18 D1:B37D             ;
   19 D1:B37D             ; ***************************************************************************************
   20 D1:B37D             
   21 D1:B37D             SYSInitialise:
   22 D1:B37D             	ret
   23 D1:B37D             
   24 D1:B37D             ; ***************************************************************************************
   25 D1:B37D             ;
   26 D1:B37D             ;								Terminate system stuff
   27 D1:B37D             ;
   28 D1:B37D             ; ***************************************************************************************
   29 D1:B37D             
   30 D1:B37D             SYSTerminate:
   31 D1:B37D             	ret
   32 D1:B37D             
   33 D1:B37D             ; ***************************************************************************************
   34 D1:B37D             ;
   35 D1:B37D             ;								Print A character
   36 D1:B37D             ;
   37 D1:B37D             ; ***************************************************************************************
   38 D1:B37D             
   39 D1:B37D             SYSPrintChar:
   40 D1:B37D             	ret		
   41 D1:B37D             
   42 D1:B37D             ; ***************************************************************************************
   43 D1:B37D             ;
   44 D1:B37D             ;									Print Newline
   45 D1:B37D             ;
   46 D1:B37D             ; ***************************************************************************************
   47 D1:B37D             
   48 D1:B37D             SYSPrintCRLF:
   49 D1:B37D             	ret
   50 D1:B37D             
   51 D1:B37D             #endif
   52 D1:B37D -  -  -  -  
   53 D1:B37D -  -  -  -  ; ***************************************************************************************
   54 D1:B37D -  -  -  -  ;
   55 D1:B37D -  -  -  -  ;									Changes and Updates
   56 D1:B37D -  -  -  -  ;
   57 D1:B37D -  -  -  -  ; ***************************************************************************************
   58 D1:B37D -  -  -  -  ;
   59 D1:B37D -  -  -  -  ;		Date			Notes
   60 D1:B37D -  -  -  -  ;		==== 			=====
   61 D1:B37D -  -  -  -  ;
   62 D1:B37D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:B37D -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B37D -  -  -  -  ; ***************************************************************************************
    2 D1:B37D -  -  -  -  ; ***************************************************************************************
    3 D1:B37D -  -  -  -  ;
    4 D1:B37D -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B37D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B37D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B37D -  -  -  -  ;		Reviewed :	No
    8 D1:B37D -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B37D -  -  -  -  ;
   10 D1:B37D -  -  -  -  ; ***************************************************************************************
   11 D1:B37D -  -  -  -  ; ***************************************************************************************
   12 D1:B37D -  -  -  -  
   13 D1:B37D -  -  -  -  #ifdef TI84
   14 D1:B37D -  -  -  -  
   15 D1:B37D -  -  -  -  ; ***************************************************************************************
   16 D1:B37D -  -  -  -  ;
   17 D1:B37D -  -  -  -  ;								Initialise system stuff
   18 D1:B37D -  -  -  -  ;
   19 D1:B37D -  -  -  -  ; ***************************************************************************************
   20 D1:B37D -  -  -  -  
   21 D1:B37D -  -  -  -  SYSInitialise:
   22 D1:B37D F3 -  -  -  	di
   23 D1:B37E ED 73 9B B3 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B383 FD 22 9F B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B388 C9 -  -  -  	ret
   26 D1:B389 -  -  -  -  
   27 D1:B389 -  -  -  -  ; ***************************************************************************************
   28 D1:B389 -  -  -  -  ;
   29 D1:B389 -  -  -  -  ;								Terminate system stuff
   30 D1:B389 -  -  -  -  ;
   31 D1:B389 -  -  -  -  ; ***************************************************************************************
   32 D1:B389 -  -  -  -  
   33 D1:B389 -  -  -  -  SYSTerminate:
   34 D1:B389 ED 7B 9B B3 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B38E FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B390 FD 2A 9F B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B395 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B399 FB -  -  -  	ei
   39 D1:B39A C9 -  -  -  	ret 										; and exit.
   40 D1:B39B -  -  -  -  
   41 D1:B39B -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B39B 00 00 00 00 	.dw 	0,0
   43 D1:B39F -  -  -  -  _IYTemp84:
   44 D1:B39F 00 00 00 00 	.dw 	0,0		
   45 D1:B3A3 -  -  -  -  
   46 D1:B3A3 -  -  -  -  ; ***************************************************************************************
   47 D1:B3A3 -  -  -  -  ;
   48 D1:B3A3 -  -  -  -  ;								Print A character
   49 D1:B3A3 -  -  -  -  ;
   50 D1:B3A3 -  -  -  -  ; ***************************************************************************************
   51 D1:B3A3 -  -  -  -  
   52 D1:B3A3 -  -  -  -  SYSPrintChar:
   53 D1:B3A3 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B3A4 C5 -  -  -  	push 	bc
   55 D1:B3A5 D5 -  -  -  	push 	de
   56 D1:B3A6 E5 -  -  -  	push 	hl
   57 D1:B3A7 DD E5 -  -  	push 	ix
   58 D1:B3A9 FD E5 -  -  	push 	iy
   59 D1:B3AB D9 -  -  -  	exx
   60 D1:B3AC C5 -  -  -  	push 	bc
   61 D1:B3AD D5 -  -  -  	push 	de
   62 D1:B3AE E5 -  -  -  	push 	hl
   63 D1:B3AF -  -  -  -  
   64 D1:B3AF FD 2A 9F B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B3B4 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B3B8 F3 -  -  -  	di
   67 D1:B3B9 FD 22 9F B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B3BE -  -  -  -  
   69 D1:B3BE E1 -  -  -  	pop 	hl
   70 D1:B3BF D1 -  -  -  	pop 	de
   71 D1:B3C0 C1 -  -  -  	pop 	bc
   72 D1:B3C1 D9 -  -  -  	exx
   73 D1:B3C2 FD E1 -  -  	pop 	iy
   74 D1:B3C4 DD E1 -  -  	pop 	ix
   75 D1:B3C6 E1 -  -  -  	pop 	hl
   76 D1:B3C7 D1 -  -  -  	pop 	de
   77 D1:B3C8 C1 -  -  -  	pop 	bc
   78 D1:B3C9 F1 -  -  -  	pop 	af
   79 D1:B3CA C9 -  -  -  	ret		
   80 D1:B3CB -  -  -  -  
   81 D1:B3CB -  -  -  -  ; ***************************************************************************************
   82 D1:B3CB -  -  -  -  ;
   83 D1:B3CB -  -  -  -  ;									Print Newline
   84 D1:B3CB -  -  -  -  ;
   85 D1:B3CB -  -  -  -  ; ***************************************************************************************
   86 D1:B3CB -  -  -  -  
   87 D1:B3CB -  -  -  -  SYSPrintCRLF:
   88 D1:B3CB F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B3CC C5 -  -  -  	push 	bc
   90 D1:B3CD D5 -  -  -  	push 	de
   91 D1:B3CE E5 -  -  -  	push 	hl
   92 D1:B3CF DD E5 -  -  	push 	ix
   93 D1:B3D1 FD E5 -  -  	push 	iy
   94 D1:B3D3 D9 -  -  -  	exx
   95 D1:B3D4 C5 -  -  -  	push 	bc
   96 D1:B3D5 D5 -  -  -  	push 	de
   97 D1:B3D6 E5 -  -  -  	push 	hl
   98 D1:B3D7 -  -  -  -  
   99 D1:B3D7 FD 2A 9F B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B3DC CD F0 07 02 	call 	_newline
  101 D1:B3E0 F3 -  -  -  	di
  102 D1:B3E1 FD 22 9F B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B3E6 -  -  -  -  
  104 D1:B3E6 E1 -  -  -  	pop 	hl
  105 D1:B3E7 D1 -  -  -  	pop 	de
  106 D1:B3E8 C1 -  -  -  	pop 	bc
  107 D1:B3E9 D9 -  -  -  	exx
  108 D1:B3EA FD E1 -  -  	pop 	iy
  109 D1:B3EC DD E1 -  -  	pop 	ix
  110 D1:B3EE E1 -  -  -  	pop 	hl
  111 D1:B3EF D1 -  -  -  	pop 	de
  112 D1:B3F0 C1 -  -  -  	pop 	bc
  113 D1:B3F1 F1 -  -  -  	pop 	af
  114 D1:B3F2 C9 -  -  -  	ret
  115 D1:B3F3 -  -  -  -  
  116 D1:B3F3 -  -  -  -  #endif
  117 D1:B3F3 -  -  -  -  
  118 D1:B3F3 -  -  -  -  ; ***************************************************************************************
  119 D1:B3F3 -  -  -  -  ;
  120 D1:B3F3 -  -  -  -  ;									Changes and Updates
  121 D1:B3F3 -  -  -  -  ;
  122 D1:B3F3 -  -  -  -  ; ***************************************************************************************
  123 D1:B3F3 -  -  -  -  ;
  124 D1:B3F3 -  -  -  -  ;		Date			Notes
  125 D1:B3F3 -  -  -  -  ;		==== 			=====
  126 D1:B3F3 -  -  -  -  ;
  127 D1:B3F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B3F3 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B3F3 -  -  -  -  ; ***************************************************************************************
    2 D1:B3F3 -  -  -  -  ; ***************************************************************************************
    3 D1:B3F3 -  -  -  -  ;
    4 D1:B3F3 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B3F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B3F3 -  -  -  -  ;		Reviewed :	No
    8 D1:B3F3 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B3F3 -  -  -  -  ;
   10 D1:B3F3 -  -  -  -  ; ***************************************************************************************
   11 D1:B3F3 -  -  -  -  ; ***************************************************************************************
   12 D1:B3F3 -  -  -  -  
   13 D1:B3F3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:B400 -  -  -  -  TestInstance:
   15 D1:B400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B400 -  -  -  -  ;
    2 D1:B400 -  -  -  -  ;	This code automatically generated.
    3 D1:B400 -  -  -  -  ;
    4 D1:B400 -  -  -  -  TestProgram:
    5 D1:B400 22 01 00 B7 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B7 3F 0C 
              53 65 65 64 
              20 3D 20 34 
              33 31 35 31 
              0D 80 12 03 
              00 C3 8A 8A 
              66 44 66 6B 
              5A 8F 66 44 
              66 6B 5A 80 
              14 04 00 C3 
              8A 41 5A 4C 
              59 4E 68 8F 
              8A 41 5A 4C 
              59 4E 68 80 
              14 05 00 C3 
              8A 41 47 53 
              51 66 42 8F 
              8A 41 47 53 
              51 66 42 80 
              14 06 00 C3 
              8A 41 6A 6F 
              66 7E 73 8F 
              8A 41 6A 6F 
              66 7E 73 80 
              12 07 00 C3 
              8A 8A 7A 4D 
              63 4A 7E 8F 
              7A 4D 63 4A 
              7E 80 14 08 
              00 C3 8A 41 
              44 53 70 43 
              64 8F 8A 41 
              44 53 70 43 
              64 80 12 09 
              00 C3 8A 8A 
              42 58 6C 43 
              7F 8F 42 58 
              6C 43 7F 80 
              12 0A 00 C3 
              8A 8A 74 6C 
              5A 73 62 8F 
              74 6C 5A 73 
              62 80 14 0B 
              00 C3 8A 41 
              79 6D 7E 71 
              52 8F 8A 41 
              79 6D 7E 71 
              52 80 14 0C 
              00 C3 8A 8A 
              41 6A 51 71 
              7C 50 8F 41 
              6A 51 71 7C 
              50 80 14 0D 
              00 C3 8A 8A 
              41 7F 54 62 
              60 5D 8F 41 
              7F 54 62 60 
              5D 80 14 0E 
              00 C3 8A 8A 
              41 56 43 6D 
              6A 6B 8F 41 
              56 43 6D 6A 
              6B 80 12 0F 
              00 C3 8A 8A 
              41 48 58 6F 
              55 8F 41 48 
              58 6F 55 80 
              14 10 00 C3 
              8A 41 46 60 
              45 54 76 8F 
              8A 41 46 60 
              45 54 76 80 
              12 11 00 C3 
              8A 8A 71 71 
              57 73 4C 8F 
              71 71 57 73 
              4C 80 14 12 
              00 C3 8A 8A 
              41 5E 66 70 
              71 65 8F 41 
              5E 66 70 71 
              65 80 12 13 
              00 C3 8A 64 
              72 6F 7C 55 
              8F 8A 64 72 
              6F 7C 55 80 
              14 14 00 C3 
              8A 8A 41 64 
              5B 4C 6E 68 
              8F 41 64 5B 
              4C 6E 68 80 
              12 15 00 C3 
              8A 72 4F 54 
              67 74 8F 8A 
              72 4F 54 67 
              74 80 14 16 
              00 C3 8A 41 
              74 5C 54 75 
              6C 8F 8A 41 
              74 5C 54 75 
              6C 80 12 17 
              00 C3 8A 8A 
              47 5A 7F 4C 
              68 8F 47 5A 
              7F 4C 68 80 
              14 18 00 C3 
              8A 41 41 50 
              78 4F 5E 8F 
              8A 41 41 50 
              78 4F 5E 80 
              14 19 00 C3 
              8A 8A 41 72 
              62 40 44 7E 
              8F 41 72 62 
              40 44 7E 80 
              12 1A 00 C3 
              8A 58 75 51 
              4C 78 8F 8A 
              58 75 51 4C 
              78 80 12 1B 
              00 C3 8A 8A 
              4E 6D 7C 79 
              51 8F 4E 6D 
              7C 79 51 80 
              14 1C 00 C3 
              8A 41 67 7A 
              47 72 53 8F 
              8A 41 67 7A 
              47 72 53 80 
              14 1D 00 C3 
              8A 8A 41 42 
              68 4B 49 42 
              8F 41 42 68 
              4B 49 42 80 
              12 1E 00 C3 
              8A 69 68 40 
              70 47 8F 8A 
              69 68 40 70 
              47 80 14 1F 
              00 C3 8A 8A 
              41 72 7C 4F 
              55 79 8F 41 
              72 7C 4F 55 
              79 80 12 20 
              00 C3 8A 8A 
              7B 5E 64 45 
              52 8F 7B 5E 
              64 45 52 80 
              14 21 00 C3 
              8A 8A 41 5A 
              68 44 40 6C 
              8F 41 5A 68 
              44 40 6C 80 
              14 22 00 C3 
              8A 41 52 65 
              52 5E 42 8F 
              8A 41 52 65 
              52 5E 42 80 
              14 23 00 C3 
              8A 8A 41 7D 
              78 7B 4B 4B 
              8F 41 7D 78 
              7B 4B 4B 80 
              12 24 00 C3 
              8A 8A 45 78 
              56 5B 47 8F 
              45 78 56 5B 
              47 80 12 25 
              00 C3 8A 70 
              45 69 4E 4C 
              8F 8A 70 45 
              69 4E 4C 80 
              12 26 00 C3 
              8A 8A 6F 5C 
              71 5B 7C 8F 
              6F 5C 71 5B 
              7C 80 14 27 
              00 C3 8A 8A 
              41 46 6A 47 
              6C 56 8F 41 
              46 6A 47 6C 
              56 80 14 28 
              00 C3 8A 41 
              59 51 6D 45 
              6C 8F 8A 41 
              59 51 6D 45 
              6C 80 14 29 
              00 C3 8A 41 
              72 5E 71 7F 
              5A 8F 8A 41 
              72 5E 71 7F 
              5A 80 12 2A 
              00 C3 8A 8A 
              54 41 69 7B 
              4F 8F 54 41 
              69 7B 4F 80 
              14 2B 00 C3 
              8A 41 44 5E 
              55 6D 42 8F 
              8A 41 44 5E 
              55 6D 42 80 
              12 2C 00 C3 
              8A 8A 4A 47 
              68 49 54 8F 
              4A 47 68 49 
              54 80 12 2D 
              00 C3 8A 73 
              71 48 5E 44 
              8F 8A 73 71 
              48 5E 44 80 
              12 2E 00 C3 
              8A 8A 71 4B 
              67 77 7F 8F 
              71 4B 67 77 
              7F 80 12 2F 
              00 C3 8A 79 
              4B 40 74 5F 
              8F 8A 79 4B 
              40 74 5F 80 
              14 30 00 C3 
              8A 41 5A 71 
              58 42 46 8F 
              8A 41 5A 71 
              58 42 46 80 
              12 31 00 C3 
              8A 8A 69 68 
              41 48 7C 8F 
              69 68 41 48 
              7C 80 14 32 
              00 C3 8A 41 
              6D 4F 67 62 
              72 8F 8A 41 
              6D 4F 67 62 
              72 80 14 33 
              00 C3 8A 8A 
              41 6C 5B 79 
              4D 70 8F 41 
              6C 5B 79 4D 
              70 80 12 34 
              00 C3 8A 6A 
              42 50 7F 71 
              8F 8A 6A 42 
              50 7F 71 80 
              12 35 00 C3 
              8A 8A 70 7D 
              50 7D 57 8F 
              70 7D 50 7D 
              57 80 12 36 
              00 C3 8A 51 
              78 68 57 60 
              8F 8A 51 78 
              68 57 60 80 
              12 37 00 C3 
              8A 6C 73 51 
              6F 46 8F 8A 
              6C 73 51 6F 
              46 80 12 38 
              00 C3 8A 8A 
              4E 45 68 57 
              5C 8F 4E 45 
              68 57 5C 80 
              14 39 00 C3 
              8A 8A 41 52 
              42 4D 71 72 
              8F 41 52 42 
              4D 71 72 80 
              14 3A 00 C3 
              8A 41 65 57 
              52 64 7D 8F 
              8A 41 65 57 
              52 64 7D 80 
              14 3B 00 C3 
              8A 41 76 6E 
              44 78 58 8F 
              8A 41 76 6E 
              44 78 58 80 
              14 3C 00 C3 
              8A 8A 41 77 
              62 5E 50 79 
              8F 41 77 62 
              5E 50 79 80 
              12 3D 00 C3 
              8A 7E 6F 4E 
              79 40 8F 8A 
              7E 6F 4E 79 
              40 80 12 3E 
              00 C3 8A 46 
              64 47 71 5B 
              8F 8A 46 64 
              47 71 5B 80 
              12 3F 00 C3 
              8A 8A 67 52 
              61 7F 54 8F 
              67 52 61 7F 
              54 80 14 40 
              00 C3 8A 41 
              44 6E 7D 44 
              63 8F 8A 41 
              44 6E 7D 44 
              63 80 14 41 
              00 C3 8A 8A 
              41 6C 57 6D 
              75 4A 8F 41 
              6C 57 6D 75 
              4A 80 12 42 
              00 C3 8A 8A 
              74 4D 66 68 
              6E 8F 74 4D 
              66 68 6E 80 
              14 43 00 C3 
              8A 8A 41 5F 
              5D 42 6F 7A 
              8F 41 5F 5D 
              42 6F 7A 80 
              10 44 00 C3 
              8A 8A 4E 4A 
              66 5F 8F 4E 
              4A 66 5F 80 
              14 45 00 C3 
              8A 8A 41 50 
              64 7F 7E 7E 
              8F 41 50 64 
              7F 7E 7E 80 
              12 46 00 C3 
              8A 7C 41 59 
              78 69 8F 8A 
              7C 41 59 78 
              69 80 12 47 
              00 C3 8A 6F 
              6A 6A 5A 63 
              8F 8A 6F 6A 
              6A 5A 63 80 
              14 48 00 C3 
              8A 8A 41 43 
              58 43 6A 6B 
              8F 41 43 58 
              43 6A 6B 80 
              12 49 00 C3 
              8A 7E 6C 76 
              58 55 8F 8A 
              7E 6C 76 58 
              55 80 12 4A 
              00 C3 8A 8A 
              73 4B 7A 75 
              66 8F 73 4B 
              7A 75 66 80 
              12 4B 00 C3 
              8A 56 6C 4F 
              74 4E 8F 8A 
              56 6C 4F 74 
              4E 80 12 4C 
              00 C3 8A 8A 
              5F 51 6C 60 
              40 8F 5F 51 
              6C 60 40 80 
              12 4D 00 C3 
              8A 8A 62 6A 
              44 6D 50 8F 
              62 6A 44 6D 
              50 80 12 4E 
              00 C3 8A 8A 
              4F 51 76 6E 
              52 8F 4F 51 
              76 6E 52 80 
              14 4F 00 C3 
              8A 41 7D 40 
              53 70 4E 8F 
              8A 41 7D 40 
              53 70 4E 80 
              12 50 00 C3 
              8A 8A 49 47 
              4A 69 64 8F 
              49 47 4A 69 
              64 80 12 51 
              00 C3 8A 5A 
              75 7F 7E 43 
              8F 8A 5A 75 
              7F 7E 43 80 
              14 52 00 C3 
              8A 8A 41 51 
              67 54 42 7B 
              8F 41 51 67 
              54 42 7B 80 
              12 53 00 C3 
              8A 8A 48 5C 
              7F 72 60 8F 
              48 5C 7F 72 
              60 80 14 54 
              00 C3 8A 8A 
              41 61 4E 7D 
              78 76 8F 41 
              61 4E 7D 78 
              76 80 12 55 
              00 C3 8A 8A 
              70 4F 48 4C 
              6F 8F 70 4F 
              48 4C 6F 80 
              14 56 00 C3 
              8A 41 57 50 
              46 45 6C 8F 
              8A 41 57 50 
              46 45 6C 80 
              12 57 00 C3 
              8A 8A 6F 4D 
              74 62 7E 8F 
              6F 4D 74 62 
              7E 80 12 58 
              00 C3 8A 61 
              6A 68 6A 4E 
              8F 8A 61 6A 
              68 6A 4E 80 
              14 59 00 C3 
              8A 41 55 54 
              7A 45 5A 8F 
              8A 41 55 54 
              7A 45 5A 80 
              12 5A 00 C3 
              8A 8A 42 4C 
              53 78 77 8F 
              42 4C 53 78 
              77 80 14 5B 
              00 C3 8A 41 
              47 63 69 6D 
              49 8F 8A 41 
              47 63 69 6D 
              49 80 14 5C 
              00 C3 8A 8A 
              41 7C 55 46 
              48 6B 8F 41 
              7C 55 46 48 
              6B 80 14 5D 
              00 C3 8A 41 
              6E 47 77 4E 
              55 8F 8A 41 
              6E 47 77 4E 
              55 80 12 5E 
              00 C3 8A 56 
              56 63 64 76 
              8F 8A 56 56 
              63 64 76 80 
              14 5F 00 C3 
              8A 8A 41 57 
              7E 6A 52 55 
              8F 41 57 7E 
              6A 52 55 80 
              14 60 00 C3 
              8A 41 78 61 
              62 56 5D 8F 
              8A 41 78 61 
              62 56 5D 80 
              14 61 00 C3 
              8A 41 5A 4D 
              75 7D 48 8F 
              8A 41 5A 4D 
              75 7D 48 80 
              14 62 00 C3 
              8A 8A 41 67 
              54 7D 64 5A 
              8F 41 67 54 
              7D 64 5A 80 
              12 63 00 C3 
              8A 68 6B 5E 
              73 5A 8F 8A 
              68 6B 5E 73 
              5A 80 14 64 
              00 C3 8A 8A 
              41 5F 6C 5C 
              40 57 8F 41 
              5F 6C 5C 40 
              57 80 12 65 
              00 C3 8A 8A 
              7F 79 7A 6E 
              65 8F 7F 79 
              7A 6E 65 80 
              14 66 00 C3 
              8A 41 66 61 
              57 4F 76 8F 
              8A 41 66 61 
              57 4F 76 80 
              12 67 00 C3 
              8A 66 64 65 
              54 45 8F 8A 
              66 64 65 54 
              45 80 14 68 
              00 C3 8A 41 
              5E 4C 79 4E 
              57 8F 8A 41 
              5E 4C 79 4E 
              57 80 14 69 
              00 C3 8A 41 
              57 57 43 69 
              74 8F 8A 41 
              57 57 43 69 
              74 80 14 6A 
              00 C3 8A 8A 
              41 50 65 53 
              6B 6D 8F 41 
              50 65 53 6B 
              6D 80 12 6B 
              00 C3 8A 69 
              4B 55 6E 50 
              8F 8A 69 4B 
              55 6E 50 80 
              12 6C 00 C3 
              8A 6C 63 54 
              78 6C 8F 8A 
              6C 63 54 78 
              6C 80 12 6D 
              00 C3 8A 56 
              60 69 71 46 
              8F 8A 56 60 
              69 71 46 80 
              12 6E 00 C3 
              8A 56 6F 6E 
              5F 5F 8F 8A 
              56 6F 6E 5F 
              5F 80 14 6F 
              00 C3 8A 41 
              4B 5C 4D 47 
              48 8F 8A 41 
              4B 5C 4D 47 
              48 80 12 70 
              00 C3 8A 8A 
              6B 76 4B 7F 
              70 8F 6B 76 
              4B 7F 70 80 
              14 71 00 C3 
              8A 41 40 76 
              59 44 66 8F 
              8A 41 40 76 
              59 44 66 80 
              12 72 00 C3 
              8A 4F 5D 77 
              6F 71 8F 8A 
              4F 5D 77 6F 
              71 80 12 73 
              00 C3 8A 8A 
              51 49 49 4C 
              7F 8F 51 49 
              49 4C 7F 80 
              14 74 00 C3 
              8A 41 5F 52 
              4A 4E 72 8F 
              8A 41 5F 52 
              4A 4E 72 80 
              12 75 00 C3 
              8A 8A 63 7F 
              6C 46 67 8F 
              63 7F 6C 46 
              67 80 12 76 
              00 C3 8A 8A 
              68 74 59 4E 
              5F 8F 68 74 
              59 4E 5F 80 
              12 77 00 C3 
              8A 53 7E 5C 
              66 7E 8F 8A 
              53 7E 5C 66 
              7E 80 12 78 
              00 C3 8A 49 
              53 7A 5A 56 
              8F 8A 49 53 
              7A 5A 56 80 
              12 79 00 C3 
              8A 45 55 68 
              5E 6A 8F 8A 
              45 55 68 5E 
              6A 80 12 7A 
              00 C3 8A 8A 
              5E 47 54 74 
              4B 8F 5E 47 
              54 74 4B 80 
              12 7B 00 C3 
              8A 8A 4B 49 
              5C 62 40 8F 
              4B 49 5C 62 
              40 80 14 7C 
              00 C3 8A 8A 
              41 7F 6D 58 
              51 74 8F 41 
              7F 6D 58 51 
              74 80 14 7D 
              00 C3 8A 41 
              54 53 4E 44 
              54 8F 8A 41 
              54 53 4E 44 
              54 80 12 7E 
              00 C3 8A 62 
              40 46 61 79 
              8F 8A 62 40 
              46 61 79 80 
              12 7F 00 C3 
              8A 79 76 40 
              48 77 8F 8A 
              79 76 40 48 
              77 80 14 80 
              00 C3 8A 8A 
              41 42 74 59 
              75 5C 8F 41 
              42 74 59 75 
              5C 80 14 81 
              00 C3 8A 41 
              6E 4E 5C 4C 
              78 8F 8A 41 
              6E 4E 5C 4C 
              78 80 12 82 
              00 C3 8A 5E 
              59 60 50 5B 
              8F 8A 5E 59 
              60 50 5B 80 
              14 83 00 C3 
              8A 8A 41 61 
              5E 7C 40 70 
              8F 41 61 5E 
              7C 40 70 80 
              12 84 00 C3 
              8A 8A 64 4B 
              6B 6B 6B 8F 
              64 4B 6B 6B 
              6B 80 14 85 
              00 C3 8A 41 
              7B 7C 7F 6D 
              40 8F 8A 41 
              7B 7C 7F 6D 
              40 80 14 86 
              00 C3 8A 41 
              40 58 7A 7F 
              40 8F 8A 41 
              40 58 7A 7F 
              40 80 14 87 
              00 C3 8A 41 
              7F 65 70 46 
              6A 8F 8A 41 
              7F 65 70 46 
              6A 80 14 88 
              00 C3 8A 41 
              5A 73 4D 69 
              6D 8F 8A 41 
              5A 73 4D 69 
              6D 80 12 89 
              00 C3 8A 8A 
              54 4B 6A 44 
              5E 8F 54 4B 
              6A 44 5E 80 
              14 8A 00 C3 
              8A 41 4B 4E 
              69 4A 58 8F 
              8A 41 4B 4E 
              69 4A 58 80 
              12 8B 00 C3 
              8A 55 46 6E 
              51 5B 8F 8A 
              55 46 6E 51 
              5B 80 14 8C 
              00 C3 8A 8A 
              41 75 4C 42 
              68 5D 8F 41 
              75 4C 42 68 
              5D 80 14 8D 
              00 C3 8A 41 
              69 78 5D 58 
              56 8F 8A 41 
              69 78 5D 58 
              56 80 14 8E 
              00 C3 8A 41 
              5E 63 7A 79 
              46 8F 8A 41 
              5E 63 7A 79 
              46 80 14 8F 
              00 C3 8A 41 
              6D 54 75 5A 
              56 8F 8A 41 
              6D 54 75 5A 
              56 80 12 90 
              00 C3 8A 8A 
              5C 75 65 66 
              43 8F 5C 75 
              65 66 43 80 
              12 91 00 C3 
              8A 8A 50 6A 
              53 67 64 8F 
              50 6A 53 67 
              64 80 12 92 
              00 C3 8A 8A 
              46 5B 68 67 
              49 8F 46 5B 
              68 67 49 80 
              12 93 00 C3 
              8A 45 58 7A 
              47 60 8F 8A 
              45 58 7A 47 
              60 80 12 94 
              00 C3 8A 5B 
              69 61 5B 54 
              8F 8A 5B 69 
              61 5B 54 80 
              12 95 00 C3 
              8A 8A 41 6C 
              7E 6D 74 8F 
              41 6C 7E 6D 
              74 80 14 96 
              00 C3 8A 8A 
              41 72 79 63 
              54 5A 8F 41 
              72 79 63 54 
              5A 80 14 97 
              00 C3 8A 41 
              6B 74 58 55 
              6F 8F 8A 41 
              6B 74 58 55 
              6F 80 12 98 
              00 C3 8A 8A 
              7F 4E 67 74 
              41 8F 7F 4E 
              67 74 41 80 
              14 99 00 C3 
              8A 41 4A 53 
              5B 70 61 8F 
              8A 41 4A 53 
              5B 70 61 80 
              12 9A 00 C3 
              8A 41 5E 50 
              6F 77 8F 8A 
              41 5E 50 6F 
              77 80 14 9B 
              00 C3 8A 41 
              54 7D 55 6D 
              43 8F 8A 41 
              54 7D 55 6D 
              43 80 14 9C 
              00 C3 8A 8A 
              41 53 51 48 
              7C 51 8F 41 
              53 51 48 7C 
              51 80 12 9D 
              00 C3 8A 8A 
              4E 53 70 4A 
              46 8F 4E 53 
              70 4A 46 80 
              12 9E 00 C3 
              8A 77 58 66 
              62 6E 8F 8A 
              77 58 66 62 
              6E 80 14 9F 
              00 C3 8A 41 
              57 4E 6C 4F 
              74 8F 8A 41 
              57 4E 6C 4F 
              74 80 12 A0 
              00 C3 8A 59 
              4D 78 46 63 
              8F 8A 59 4D 
              78 46 63 80 
              12 A1 00 C3 
              8A 78 67 45 
              6A 7D 8F 8A 
              78 67 45 6A 
              7D 80 14 A2 
              00 C3 8A 8A 
              41 58 74 7D 
              50 55 8F 41 
              58 74 7D 50 
              55 80 14 A3 
              00 C3 8A 41 
              6B 5B 6B 71 
              77 8F 8A 41 
              6B 5B 6B 71 
              77 80 14 A4 
              00 C3 8A 41 
              71 7B 65 47 
              50 8F 8A 41 
              71 7B 65 47 
              50 80 12 A5 
              00 C3 8A 7E 
              65 74 59 73 
              8F 8A 7E 65 
              74 59 73 80 
              14 A6 00 C3 
              8A 8A 41 7B 
              77 7C 68 50 
              8F 41 7B 77 
              7C 68 50 80 
              12 A7 00 C3 
              8A 8A 6B 6C 
              57 4B 79 8F 
              6B 6C 57 4B 
              79 80 12 A8 
              00 C3 8A 8A 
              65 59 6B 46 
              6F 8F 65 59 
              6B 46 6F 80 
              14 A9 00 C3 
              8A 41 72 6A 
              47 72 5B 8F 
              8A 41 72 6A 
              47 72 5B 80 
              12 AA 00 C3 
              8A 4F 4D 52 
              41 57 8F 8A 
              4F 4D 52 41 
              57 80 12 AB 
              00 C3 8A 8A 
              4D 4A 59 50 
              5B 8F 4D 4A 
              59 50 5B 80 
              12 AC 00 C3 
              8A 8A 51 6A 
              5E 75 54 8F 
              51 6A 5E 75 
              54 80 14 AD 
              00 C3 8A 8A 
              41 6A 7B 46 
              55 4C 8F 41 
              6A 7B 46 55 
              4C 80 14 AE 
              00 C3 8A 41 
              54 61 61 44 
              40 8F 8A 41 
              54 61 61 44 
              40 80 10 AF 
              00 C3 8A 8A 
              69 6A 7D 59 
              8F 69 6A 7D 
              59 80 14 B0 
              00 C3 8A 41 
              77 69 57 4D 
              61 8F 8A 41 
              77 69 57 4D 
              61 80 14 B1 
              00 C3 8A 41 
              78 79 7A 6E 
              45 8F 8A 41 
              78 79 7A 6E 
              45 80 14 B2 
              00 C3 8A 41 
              4E 63 40 5D 
              6B 8F 8A 41 
              4E 63 40 5D 
              6B 80 14 B3 
              00 C3 8A 8A 
              41 41 66 4A 
              40 74 8F 41 
              41 66 4A 40 
              74 80 14 B4 
              00 C3 8A 41 
              48 77 70 61 
              49 8F 8A 41 
              48 77 70 61 
              49 80 12 B5 
              00 C3 8A 8A 
              79 53 7D 70 
              56 8F 79 53 
              7D 70 56 80 
              12 B6 00 C3 
              8A 74 72 65 
              6A 59 8F 8A 
              74 72 65 6A 
              59 80 14 B7 
              00 C3 8A 8A 
              41 68 5F 55 
              70 5A 8F 41 
              68 5F 55 70 
              5A 80 12 B8 
              00 C3 8A 65 
              48 48 5B 54 
              8F 8A 65 48 
              48 5B 54 80 
              14 B9 00 C3 
              8A 41 72 7D 
              61 6C 55 8F 
              8A 41 72 7D 
              61 6C 55 80 
              14 BA 00 C3 
              8A 41 73 71 
              57 66 69 8F 
              8A 41 73 71 
              57 66 69 80 
              12 BB 00 C3 
              8A 8A 76 78 
              6A 75 5B 8F 
              76 78 6A 75 
              5B 80 14 BC 
              00 C3 8A 8A 
              41 7B 5A 64 
              52 5F 8F 41 
              7B 5A 64 52 
              5F 80 12 BD 
              00 C3 8A 8A 
              54 64 44 67 
              4B 8F 54 64 
              44 67 4B 80 
              12 BE 00 C3 
              8A 44 50 7B 
              6E 41 8F 8A 
              44 50 7B 6E 
              41 80 14 BF 
              00 C3 8A 8A 
              41 5A 67 46 
              58 63 8F 41 
              5A 67 46 58 
              63 80 14 C0 
              00 C3 8A 8A 
              41 56 5C 42 
              78 5F 8F 41 
              56 5C 42 78 
              5F 80 14 C1 
              00 C3 8A 41 
              68 4C 69 56 
              5F 8F 8A 41 
              68 4C 69 56 
              5F 80 12 C2 
              00 C3 8A 8A 
              7A 6F 60 5C 
              58 8F 7A 6F 
              60 5C 58 80 
              14 C3 00 C3 
              8A 41 5A 68 
              41 67 56 8F 
              8A 41 5A 68 
              41 67 56 80 
              12 C4 00 C3 
              8A 71 6D 5B 
              44 6A 8F 8A 
              71 6D 5B 44 
              6A 80 12 C5 
              00 C3 8A 8A 
              77 7C 60 44 
              76 8F 77 7C 
              60 44 76 80 
              14 C6 00 C3 
              8A 41 43 53 
              6F 5F 6E 8F 
              8A 41 43 53 
              6F 5F 6E 80 
              14 C7 00 C3 
              8A 41 43 5B 
              4D 60 68 8F 
              8A 41 43 5B 
              4D 60 68 80 
              14 C8 00 C3 
              8A 8A 41 43 
              65 7F 49 70 
              8F 41 43 65 
              7F 49 70 80 
              14 C9 00 C3 
              8A 8A 41 78 
              64 65 44 7A 
              8F 41 78 64 
              65 44 7A 80 
              14 CA 00 C3 
              8A 8A 41 55 
              4D 5D 7E 7A 
              8F 41 55 4D 
              5D 7E 7A 80 
              00 -  -  -  	.db	$22,$01,$00,$b7,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b7,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$34,$33,$31,$35,$31,$0d,$80,$12,$03,$00,$c3,$8a,$8a,$66,$44,$66,$6b,$5a,$8f,$66,$44,$66,$6b,$5a,$80,$14,$04,$00,$c3,$8a,$41,$5a,$4c,$59,$4e,$68,$8f,$8a,$41,$5a,$4c,$59,$4e,$68,$80,$14,$05,$00,$c3,$8a,$41,$47,$53,$51,$66,$42,$8f,$8a,$41,$47,$53,$51,$66,$42,$80,$14,$06,$00,$c3,$8a,$41,$6a,$6f,$66,$7e,$73,$8f,$8a,$41,$6a,$6f,$66,$7e,$73,$80,$12,$07,$00,$c3,$8a,$8a,$7a,$4d,$63,$4a,$7e,$8f,$7a,$4d,$63,$4a,$7e,$80,$14,$08,$00,$c3,$8a,$41,$44,$53,$70,$43,$64,$8f,$8a,$41,$44,$53,$70,$43,$64,$80,$12,$09,$00,$c3,$8a,$8a,$42,$58,$6c,$43,$7f,$8f,$42,$58,$6c,$43,$7f,$80,$12,$0a,$00,$c3,$8a,$8a,$74,$6c,$5a,$73,$62,$8f,$74,$6c,$5a,$73,$62,$80,$14,$0b,$00,$c3,$8a,$41,$79,$6d,$7e,$71,$52,$8f,$8a,$41,$79,$6d,$7e,$71,$52,$80,$14,$0c,$00,$c3,$8a,$8a,$41,$6a,$51,$71,$7c,$50,$8f,$41,$6a,$51,$71,$7c,$50,$80,$14,$0d,$00,$c3,$8a,$8a,$41,$7f,$54,$62,$60,$5d,$8f,$41,$7f,$54,$62,$60,$5d,$80,$14,$0e,$00,$c3,$8a,$8a,$41,$56,$43,$6d,$6a,$6b,$8f,$41,$56,$43,$6d,$6a,$6b,$80,$12,$0f,$00,$c3,$8a,$8a,$41,$48,$58,$6f,$55,$8f,$41,$48,$58,$6f,$55,$80,$14,$10,$00,$c3,$8a,$41,$46,$60,$45,$54,$76,$8f,$8a,$41,$46,$60,$45,$54,$76,$80,$12,$11,$00,$c3,$8a,$8a,$71,$71,$57,$73,$4c,$8f,$71,$71,$57,$73,$4c,$80,$14,$12,$00,$c3,$8a,$8a,$41,$5e,$66,$70,$71,$65,$8f,$41,$5e,$66,$70,$71,$65,$80,$12,$13,$00,$c3,$8a,$64,$72,$6f,$7c,$55,$8f,$8a,$64,$72,$6f,$7c,$55,$80,$14,$14,$00,$c3,$8a,$8a,$41,$64,$5b,$4c,$6e,$68,$8f,$41,$64,$5b,$4c,$6e,$68,$80,$12,$15,$00,$c3,$8a,$72,$4f,$54,$67,$74,$8f,$8a,$72,$4f,$54,$67,$74,$80,$14,$16,$00,$c3,$8a,$41,$74,$5c,$54,$75,$6c,$8f,$8a,$41,$74,$5c,$54,$75,$6c,$80,$12,$17,$00,$c3,$8a,$8a,$47,$5a,$7f,$4c,$68,$8f,$47,$5a,$7f,$4c,$68,$80,$14,$18,$00,$c3,$8a,$41,$41,$50,$78,$4f,$5e,$8f,$8a,$41,$41,$50,$78,$4f,$5e,$80,$14,$19,$00,$c3,$8a,$8a,$41,$72,$62,$40,$44,$7e,$8f,$41,$72,$62,$40,$44,$7e,$80,$12,$1a,$00,$c3,$8a,$58,$75,$51,$4c,$78,$8f,$8a,$58,$75,$51,$4c,$78,$80,$12,$1b,$00,$c3,$8a,$8a,$4e,$6d,$7c,$79,$51,$8f,$4e,$6d,$7c,$79,$51,$80,$14,$1c,$00,$c3,$8a,$41,$67,$7a,$47,$72,$53,$8f,$8a,$41,$67,$7a,$47,$72,$53,$80,$14,$1d,$00,$c3,$8a,$8a,$41,$42,$68,$4b,$49,$42,$8f,$41,$42,$68,$4b,$49,$42,$80,$12,$1e,$00,$c3,$8a,$69,$68,$40,$70,$47,$8f,$8a,$69,$68,$40,$70,$47,$80,$14,$1f,$00,$c3,$8a,$8a,$41,$72,$7c,$4f,$55,$79,$8f,$41,$72,$7c,$4f,$55,$79,$80,$12,$20,$00,$c3,$8a,$8a,$7b,$5e,$64,$45,$52,$8f,$7b,$5e,$64,$45,$52,$80,$14,$21,$00,$c3,$8a,$8a,$41,$5a,$68,$44,$40,$6c,$8f,$41,$5a,$68,$44,$40,$6c,$80,$14,$22,$00,$c3,$8a,$41,$52,$65,$52,$5e,$42,$8f,$8a,$41,$52,$65,$52,$5e,$42,$80,$14,$23,$00,$c3,$8a,$8a,$41,$7d,$78,$7b,$4b,$4b,$8f,$41,$7d,$78,$7b,$4b,$4b,$80,$12,$24,$00,$c3,$8a,$8a,$45,$78,$56,$5b,$47,$8f,$45,$78,$56,$5b,$47,$80,$12,$25,$00,$c3,$8a,$70,$45,$69,$4e,$4c,$8f,$8a,$70,$45,$69,$4e,$4c,$80,$12,$26,$00,$c3,$8a,$8a,$6f,$5c,$71,$5b,$7c,$8f,$6f,$5c,$71,$5b,$7c,$80,$14,$27,$00,$c3,$8a,$8a,$41,$46,$6a,$47,$6c,$56,$8f,$41,$46,$6a,$47,$6c,$56,$80,$14,$28,$00,$c3,$8a,$41,$59,$51,$6d,$45,$6c,$8f,$8a,$41,$59,$51,$6d,$45,$6c,$80,$14,$29,$00,$c3,$8a,$41,$72,$5e,$71,$7f,$5a,$8f,$8a,$41,$72,$5e,$71,$7f,$5a,$80,$12,$2a,$00,$c3,$8a,$8a,$54,$41,$69,$7b,$4f,$8f,$54,$41,$69,$7b,$4f,$80,$14,$2b,$00,$c3,$8a,$41,$44,$5e,$55,$6d,$42,$8f,$8a,$41,$44,$5e,$55,$6d,$42,$80,$12,$2c,$00,$c3,$8a,$8a,$4a,$47,$68,$49,$54,$8f,$4a,$47,$68,$49,$54,$80,$12,$2d,$00,$c3,$8a,$73,$71,$48,$5e,$44,$8f,$8a,$73,$71,$48,$5e,$44,$80,$12,$2e,$00,$c3,$8a,$8a,$71,$4b,$67,$77,$7f,$8f,$71,$4b,$67,$77,$7f,$80,$12,$2f,$00,$c3,$8a,$79,$4b,$40,$74,$5f,$8f,$8a,$79,$4b,$40,$74,$5f,$80,$14,$30,$00,$c3,$8a,$41,$5a,$71,$58,$42,$46,$8f,$8a,$41,$5a,$71,$58,$42,$46,$80,$12,$31,$00,$c3,$8a,$8a,$69,$68,$41,$48,$7c,$8f,$69,$68,$41,$48,$7c,$80,$14,$32,$00,$c3,$8a,$41,$6d,$4f,$67,$62,$72,$8f,$8a,$41,$6d,$4f,$67,$62,$72,$80,$14,$33,$00,$c3,$8a,$8a,$41,$6c,$5b,$79,$4d,$70,$8f,$41,$6c,$5b,$79,$4d,$70,$80,$12,$34,$00,$c3,$8a,$6a,$42,$50,$7f,$71,$8f,$8a,$6a,$42,$50,$7f,$71,$80,$12,$35,$00,$c3,$8a,$8a,$70,$7d,$50,$7d,$57,$8f,$70,$7d,$50,$7d,$57,$80,$12,$36,$00,$c3,$8a,$51,$78,$68,$57,$60,$8f,$8a,$51,$78,$68,$57,$60,$80,$12,$37,$00,$c3,$8a,$6c,$73,$51,$6f,$46,$8f,$8a,$6c,$73,$51,$6f,$46,$80,$12,$38,$00,$c3,$8a,$8a,$4e,$45,$68,$57,$5c,$8f,$4e,$45,$68,$57,$5c,$80,$14,$39,$00,$c3,$8a,$8a,$41,$52,$42,$4d,$71,$72,$8f,$41,$52,$42,$4d,$71,$72,$80,$14,$3a,$00,$c3,$8a,$41,$65,$57,$52,$64,$7d,$8f,$8a,$41,$65,$57,$52,$64,$7d,$80,$14,$3b,$00,$c3,$8a,$41,$76,$6e,$44,$78,$58,$8f,$8a,$41,$76,$6e,$44,$78,$58,$80,$14,$3c,$00,$c3,$8a,$8a,$41,$77,$62,$5e,$50,$79,$8f,$41,$77,$62,$5e,$50,$79,$80,$12,$3d,$00,$c3,$8a,$7e,$6f,$4e,$79,$40,$8f,$8a,$7e,$6f,$4e,$79,$40,$80,$12,$3e,$00,$c3,$8a,$46,$64,$47,$71,$5b,$8f,$8a,$46,$64,$47,$71,$5b,$80,$12,$3f,$00,$c3,$8a,$8a,$67,$52,$61,$7f,$54,$8f,$67,$52,$61,$7f,$54,$80,$14,$40,$00,$c3,$8a,$41,$44,$6e,$7d,$44,$63,$8f,$8a,$41,$44,$6e,$7d,$44,$63,$80,$14,$41,$00,$c3,$8a,$8a,$41,$6c,$57,$6d,$75,$4a,$8f,$41,$6c,$57,$6d,$75,$4a,$80,$12,$42,$00,$c3,$8a,$8a,$74,$4d,$66,$68,$6e,$8f,$74,$4d,$66,$68,$6e,$80,$14,$43,$00,$c3,$8a,$8a,$41,$5f,$5d,$42,$6f,$7a,$8f,$41,$5f,$5d,$42,$6f,$7a,$80,$10,$44,$00,$c3,$8a,$8a,$4e,$4a,$66,$5f,$8f,$4e,$4a,$66,$5f,$80,$14,$45,$00,$c3,$8a,$8a,$41,$50,$64,$7f,$7e,$7e,$8f,$41,$50,$64,$7f,$7e,$7e,$80,$12,$46,$00,$c3,$8a,$7c,$41,$59,$78,$69,$8f,$8a,$7c,$41,$59,$78,$69,$80,$12,$47,$00,$c3,$8a,$6f,$6a,$6a,$5a,$63,$8f,$8a,$6f,$6a,$6a,$5a,$63,$80,$14,$48,$00,$c3,$8a,$8a,$41,$43,$58,$43,$6a,$6b,$8f,$41,$43,$58,$43,$6a,$6b,$80,$12,$49,$00,$c3,$8a,$7e,$6c,$76,$58,$55,$8f,$8a,$7e,$6c,$76,$58,$55,$80,$12,$4a,$00,$c3,$8a,$8a,$73,$4b,$7a,$75,$66,$8f,$73,$4b,$7a,$75,$66,$80,$12,$4b,$00,$c3,$8a,$56,$6c,$4f,$74,$4e,$8f,$8a,$56,$6c,$4f,$74,$4e,$80,$12,$4c,$00,$c3,$8a,$8a,$5f,$51,$6c,$60,$40,$8f,$5f,$51,$6c,$60,$40,$80,$12,$4d,$00,$c3,$8a,$8a,$62,$6a,$44,$6d,$50,$8f,$62,$6a,$44,$6d,$50,$80,$12,$4e,$00,$c3,$8a,$8a,$4f,$51,$76,$6e,$52,$8f,$4f,$51,$76,$6e,$52,$80,$14,$4f,$00,$c3,$8a,$41,$7d,$40,$53,$70,$4e,$8f,$8a,$41,$7d,$40,$53,$70,$4e,$80,$12,$50,$00,$c3,$8a,$8a,$49,$47,$4a,$69,$64,$8f,$49,$47,$4a,$69,$64,$80,$12,$51,$00,$c3,$8a,$5a,$75,$7f,$7e,$43,$8f,$8a,$5a,$75,$7f,$7e,$43,$80,$14,$52,$00,$c3,$8a,$8a,$41,$51,$67,$54,$42,$7b,$8f,$41,$51,$67,$54,$42,$7b,$80,$12,$53,$00,$c3,$8a,$8a,$48,$5c,$7f,$72,$60,$8f,$48,$5c,$7f,$72,$60,$80,$14,$54,$00,$c3,$8a,$8a,$41,$61,$4e,$7d,$78,$76,$8f,$41,$61,$4e,$7d,$78,$76,$80,$12,$55,$00,$c3,$8a,$8a,$70,$4f,$48,$4c,$6f,$8f,$70,$4f,$48,$4c,$6f,$80,$14,$56,$00,$c3,$8a,$41,$57,$50,$46,$45,$6c,$8f,$8a,$41,$57,$50,$46,$45,$6c,$80,$12,$57,$00,$c3,$8a,$8a,$6f,$4d,$74,$62,$7e,$8f,$6f,$4d,$74,$62,$7e,$80,$12,$58,$00,$c3,$8a,$61,$6a,$68,$6a,$4e,$8f,$8a,$61,$6a,$68,$6a,$4e,$80,$14,$59,$00,$c3,$8a,$41,$55,$54,$7a,$45,$5a,$8f,$8a,$41,$55,$54,$7a,$45,$5a,$80,$12,$5a,$00,$c3,$8a,$8a,$42,$4c,$53,$78,$77,$8f,$42,$4c,$53,$78,$77,$80,$14,$5b,$00,$c3,$8a,$41,$47,$63,$69,$6d,$49,$8f,$8a,$41,$47,$63,$69,$6d,$49,$80,$14,$5c,$00,$c3,$8a,$8a,$41,$7c,$55,$46,$48,$6b,$8f,$41,$7c,$55,$46,$48,$6b,$80,$14,$5d,$00,$c3,$8a,$41,$6e,$47,$77,$4e,$55,$8f,$8a,$41,$6e,$47,$77,$4e,$55,$80,$12,$5e,$00,$c3,$8a,$56,$56,$63,$64,$76,$8f,$8a,$56,$56,$63,$64,$76,$80,$14,$5f,$00,$c3,$8a,$8a,$41,$57,$7e,$6a,$52,$55,$8f,$41,$57,$7e,$6a,$52,$55,$80,$14,$60,$00,$c3,$8a,$41,$78,$61,$62,$56,$5d,$8f,$8a,$41,$78,$61,$62,$56,$5d,$80,$14,$61,$00,$c3,$8a,$41,$5a,$4d,$75,$7d,$48,$8f,$8a,$41,$5a,$4d,$75,$7d,$48,$80,$14,$62,$00,$c3,$8a,$8a,$41,$67,$54,$7d,$64,$5a,$8f,$41,$67,$54,$7d,$64,$5a,$80,$12,$63,$00,$c3,$8a,$68,$6b,$5e,$73,$5a,$8f,$8a,$68,$6b,$5e,$73,$5a,$80,$14,$64,$00,$c3,$8a,$8a,$41,$5f,$6c,$5c,$40,$57,$8f,$41,$5f,$6c,$5c,$40,$57,$80,$12,$65,$00,$c3,$8a,$8a,$7f,$79,$7a,$6e,$65,$8f,$7f,$79,$7a,$6e,$65,$80,$14,$66,$00,$c3,$8a,$41,$66,$61,$57,$4f,$76,$8f,$8a,$41,$66,$61,$57,$4f,$76,$80,$12,$67,$00,$c3,$8a,$66,$64,$65,$54,$45,$8f,$8a,$66,$64,$65,$54,$45,$80,$14,$68,$00,$c3,$8a,$41,$5e,$4c,$79,$4e,$57,$8f,$8a,$41,$5e,$4c,$79,$4e,$57,$80,$14,$69,$00,$c3,$8a,$41,$57,$57,$43,$69,$74,$8f,$8a,$41,$57,$57,$43,$69,$74,$80,$14,$6a,$00,$c3,$8a,$8a,$41,$50,$65,$53,$6b,$6d,$8f,$41,$50,$65,$53,$6b,$6d,$80,$12,$6b,$00,$c3,$8a,$69,$4b,$55,$6e,$50,$8f,$8a,$69,$4b,$55,$6e,$50,$80,$12,$6c,$00,$c3,$8a,$6c,$63,$54,$78,$6c,$8f,$8a,$6c,$63,$54,$78,$6c,$80,$12,$6d,$00,$c3,$8a,$56,$60,$69,$71,$46,$8f,$8a,$56,$60,$69,$71,$46,$80,$12,$6e,$00,$c3,$8a,$56,$6f,$6e,$5f,$5f,$8f,$8a,$56,$6f,$6e,$5f,$5f,$80,$14,$6f,$00,$c3,$8a,$41,$4b,$5c,$4d,$47,$48,$8f,$8a,$41,$4b,$5c,$4d,$47,$48,$80,$12,$70,$00,$c3,$8a,$8a,$6b,$76,$4b,$7f,$70,$8f,$6b,$76,$4b,$7f,$70,$80,$14,$71,$00,$c3,$8a,$41,$40,$76,$59,$44,$66,$8f,$8a,$41,$40,$76,$59,$44,$66,$80,$12,$72,$00,$c3,$8a,$4f,$5d,$77,$6f,$71,$8f,$8a,$4f,$5d,$77,$6f,$71,$80,$12,$73,$00,$c3,$8a,$8a,$51,$49,$49,$4c,$7f,$8f,$51,$49,$49,$4c,$7f,$80,$14,$74,$00,$c3,$8a,$41,$5f,$52,$4a,$4e,$72,$8f,$8a,$41,$5f,$52,$4a,$4e,$72,$80,$12,$75,$00,$c3,$8a,$8a,$63,$7f,$6c,$46,$67,$8f,$63,$7f,$6c,$46,$67,$80,$12,$76,$00,$c3,$8a,$8a,$68,$74,$59,$4e,$5f,$8f,$68,$74,$59,$4e,$5f,$80,$12,$77,$00,$c3,$8a,$53,$7e,$5c,$66,$7e,$8f,$8a,$53,$7e,$5c,$66,$7e,$80,$12,$78,$00,$c3,$8a,$49,$53,$7a,$5a,$56,$8f,$8a,$49,$53,$7a,$5a,$56,$80,$12,$79,$00,$c3,$8a,$45,$55,$68,$5e,$6a,$8f,$8a,$45,$55,$68,$5e,$6a,$80,$12,$7a,$00,$c3,$8a,$8a,$5e,$47,$54,$74,$4b,$8f,$5e,$47,$54,$74,$4b,$80,$12,$7b,$00,$c3,$8a,$8a,$4b,$49,$5c,$62,$40,$8f,$4b,$49,$5c,$62,$40,$80,$14,$7c,$00,$c3,$8a,$8a,$41,$7f,$6d,$58,$51,$74,$8f,$41,$7f,$6d,$58,$51,$74,$80,$14,$7d,$00,$c3,$8a,$41,$54,$53,$4e,$44,$54,$8f,$8a,$41,$54,$53,$4e,$44,$54,$80,$12,$7e,$00,$c3,$8a,$62,$40,$46,$61,$79,$8f,$8a,$62,$40,$46,$61,$79,$80,$12,$7f,$00,$c3,$8a,$79,$76,$40,$48,$77,$8f,$8a,$79,$76,$40,$48,$77,$80,$14,$80,$00,$c3,$8a,$8a,$41,$42,$74,$59,$75,$5c,$8f,$41,$42,$74,$59,$75,$5c,$80,$14,$81,$00,$c3,$8a,$41,$6e,$4e,$5c,$4c,$78,$8f,$8a,$41,$6e,$4e,$5c,$4c,$78,$80,$12,$82,$00,$c3,$8a,$5e,$59,$60,$50,$5b,$8f,$8a,$5e,$59,$60,$50,$5b,$80,$14,$83,$00,$c3,$8a,$8a,$41,$61,$5e,$7c,$40,$70,$8f,$41,$61,$5e,$7c,$40,$70,$80,$12,$84,$00,$c3,$8a,$8a,$64,$4b,$6b,$6b,$6b,$8f,$64,$4b,$6b,$6b,$6b,$80,$14,$85,$00,$c3,$8a,$41,$7b,$7c,$7f,$6d,$40,$8f,$8a,$41,$7b,$7c,$7f,$6d,$40,$80,$14,$86,$00,$c3,$8a,$41,$40,$58,$7a,$7f,$40,$8f,$8a,$41,$40,$58,$7a,$7f,$40,$80,$14,$87,$00,$c3,$8a,$41,$7f,$65,$70,$46,$6a,$8f,$8a,$41,$7f,$65,$70,$46,$6a,$80,$14,$88,$00,$c3,$8a,$41,$5a,$73,$4d,$69,$6d,$8f,$8a,$41,$5a,$73,$4d,$69,$6d,$80,$12,$89,$00,$c3,$8a,$8a,$54,$4b,$6a,$44,$5e,$8f,$54,$4b,$6a,$44,$5e,$80,$14,$8a,$00,$c3,$8a,$41,$4b,$4e,$69,$4a,$58,$8f,$8a,$41,$4b,$4e,$69,$4a,$58,$80,$12,$8b,$00,$c3,$8a,$55,$46,$6e,$51,$5b,$8f,$8a,$55,$46,$6e,$51,$5b,$80,$14,$8c,$00,$c3,$8a,$8a,$41,$75,$4c,$42,$68,$5d,$8f,$41,$75,$4c,$42,$68,$5d,$80,$14,$8d,$00,$c3,$8a,$41,$69,$78,$5d,$58,$56,$8f,$8a,$41,$69,$78,$5d,$58,$56,$80,$14,$8e,$00,$c3,$8a,$41,$5e,$63,$7a,$79,$46,$8f,$8a,$41,$5e,$63,$7a,$79,$46,$80,$14,$8f,$00,$c3,$8a,$41,$6d,$54,$75,$5a,$56,$8f,$8a,$41,$6d,$54,$75,$5a,$56,$80,$12,$90,$00,$c3,$8a,$8a,$5c,$75,$65,$66,$43,$8f,$5c,$75,$65,$66,$43,$80,$12,$91,$00,$c3,$8a,$8a,$50,$6a,$53,$67,$64,$8f,$50,$6a,$53,$67,$64,$80,$12,$92,$00,$c3,$8a,$8a,$46,$5b,$68,$67,$49,$8f,$46,$5b,$68,$67,$49,$80,$12,$93,$00,$c3,$8a,$45,$58,$7a,$47,$60,$8f,$8a,$45,$58,$7a,$47,$60,$80,$12,$94,$00,$c3,$8a,$5b,$69,$61,$5b,$54,$8f,$8a,$5b,$69,$61,$5b,$54,$80,$12,$95,$00,$c3,$8a,$8a,$41,$6c,$7e,$6d,$74,$8f,$41,$6c,$7e,$6d,$74,$80,$14,$96,$00,$c3,$8a,$8a,$41,$72,$79,$63,$54,$5a,$8f,$41,$72,$79,$63,$54,$5a,$80,$14,$97,$00,$c3,$8a,$41,$6b,$74,$58,$55,$6f,$8f,$8a,$41,$6b,$74,$58,$55,$6f,$80,$12,$98,$00,$c3,$8a,$8a,$7f,$4e,$67,$74,$41,$8f,$7f,$4e,$67,$74,$41,$80,$14,$99,$00,$c3,$8a,$41,$4a,$53,$5b,$70,$61,$8f,$8a,$41,$4a,$53,$5b,$70,$61,$80,$12,$9a,$00,$c3,$8a,$41,$5e,$50,$6f,$77,$8f,$8a,$41,$5e,$50,$6f,$77,$80,$14,$9b,$00,$c3,$8a,$41,$54,$7d,$55,$6d,$43,$8f,$8a,$41,$54,$7d,$55,$6d,$43,$80,$14,$9c,$00,$c3,$8a,$8a,$41,$53,$51,$48,$7c,$51,$8f,$41,$53,$51,$48,$7c,$51,$80,$12,$9d,$00,$c3,$8a,$8a,$4e,$53,$70,$4a,$46,$8f,$4e,$53,$70,$4a,$46,$80,$12,$9e,$00,$c3,$8a,$77,$58,$66,$62,$6e,$8f,$8a,$77,$58,$66,$62,$6e,$80,$14,$9f,$00,$c3,$8a,$41,$57,$4e,$6c,$4f,$74,$8f,$8a,$41,$57,$4e,$6c,$4f,$74,$80,$12,$a0,$00,$c3,$8a,$59,$4d,$78,$46,$63,$8f,$8a,$59,$4d,$78,$46,$63,$80,$12,$a1,$00,$c3,$8a,$78,$67,$45,$6a,$7d,$8f,$8a,$78,$67,$45,$6a,$7d,$80,$14,$a2,$00,$c3,$8a,$8a,$41,$58,$74,$7d,$50,$55,$8f,$41,$58,$74,$7d,$50,$55,$80,$14,$a3,$00,$c3,$8a,$41,$6b,$5b,$6b,$71,$77,$8f,$8a,$41,$6b,$5b,$6b,$71,$77,$80,$14,$a4,$00,$c3,$8a,$41,$71,$7b,$65,$47,$50,$8f,$8a,$41,$71,$7b,$65,$47,$50,$80,$12,$a5,$00,$c3,$8a,$7e,$65,$74,$59,$73,$8f,$8a,$7e,$65,$74,$59,$73,$80,$14,$a6,$00,$c3,$8a,$8a,$41,$7b,$77,$7c,$68,$50,$8f,$41,$7b,$77,$7c,$68,$50,$80,$12,$a7,$00,$c3,$8a,$8a,$6b,$6c,$57,$4b,$79,$8f,$6b,$6c,$57,$4b,$79,$80,$12,$a8,$00,$c3,$8a,$8a,$65,$59,$6b,$46,$6f,$8f,$65,$59,$6b,$46,$6f,$80,$14,$a9,$00,$c3,$8a,$41,$72,$6a,$47,$72,$5b,$8f,$8a,$41,$72,$6a,$47,$72,$5b,$80,$12,$aa,$00,$c3,$8a,$4f,$4d,$52,$41,$57,$8f,$8a,$4f,$4d,$52,$41,$57,$80,$12,$ab,$00,$c3,$8a,$8a,$4d,$4a,$59,$50,$5b,$8f,$4d,$4a,$59,$50,$5b,$80,$12,$ac,$00,$c3,$8a,$8a,$51,$6a,$5e,$75,$54,$8f,$51,$6a,$5e,$75,$54,$80,$14,$ad,$00,$c3,$8a,$8a,$41,$6a,$7b,$46,$55,$4c,$8f,$41,$6a,$7b,$46,$55,$4c,$80,$14,$ae,$00,$c3,$8a,$41,$54,$61,$61,$44,$40,$8f,$8a,$41,$54,$61,$61,$44,$40,$80,$10,$af,$00,$c3,$8a,$8a,$69,$6a,$7d,$59,$8f,$69,$6a,$7d,$59,$80,$14,$b0,$00,$c3,$8a,$41,$77,$69,$57,$4d,$61,$8f,$8a,$41,$77,$69,$57,$4d,$61,$80,$14,$b1,$00,$c3,$8a,$41,$78,$79,$7a,$6e,$45,$8f,$8a,$41,$78,$79,$7a,$6e,$45,$80,$14,$b2,$00,$c3,$8a,$41,$4e,$63,$40,$5d,$6b,$8f,$8a,$41,$4e,$63,$40,$5d,$6b,$80,$14,$b3,$00,$c3,$8a,$8a,$41,$41,$66,$4a,$40,$74,$8f,$41,$41,$66,$4a,$40,$74,$80,$14,$b4,$00,$c3,$8a,$41,$48,$77,$70,$61,$49,$8f,$8a,$41,$48,$77,$70,$61,$49,$80,$12,$b5,$00,$c3,$8a,$8a,$79,$53,$7d,$70,$56,$8f,$79,$53,$7d,$70,$56,$80,$12,$b6,$00,$c3,$8a,$74,$72,$65,$6a,$59,$8f,$8a,$74,$72,$65,$6a,$59,$80,$14,$b7,$00,$c3,$8a,$8a,$41,$68,$5f,$55,$70,$5a,$8f,$41,$68,$5f,$55,$70,$5a,$80,$12,$b8,$00,$c3,$8a,$65,$48,$48,$5b,$54,$8f,$8a,$65,$48,$48,$5b,$54,$80,$14,$b9,$00,$c3,$8a,$41,$72,$7d,$61,$6c,$55,$8f,$8a,$41,$72,$7d,$61,$6c,$55,$80,$14,$ba,$00,$c3,$8a,$41,$73,$71,$57,$66,$69,$8f,$8a,$41,$73,$71,$57,$66,$69,$80,$12,$bb,$00,$c3,$8a,$8a,$76,$78,$6a,$75,$5b,$8f,$76,$78,$6a,$75,$5b,$80,$14,$bc,$00,$c3,$8a,$8a,$41,$7b,$5a,$64,$52,$5f,$8f,$41,$7b,$5a,$64,$52,$5f,$80,$12,$bd,$00,$c3,$8a,$8a,$54,$64,$44,$67,$4b,$8f,$54,$64,$44,$67,$4b,$80,$12,$be,$00,$c3,$8a,$44,$50,$7b,$6e,$41,$8f,$8a,$44,$50,$7b,$6e,$41,$80,$14,$bf,$00,$c3,$8a,$8a,$41,$5a,$67,$46,$58,$63,$8f,$41,$5a,$67,$46,$58,$63,$80,$14,$c0,$00,$c3,$8a,$8a,$41,$56,$5c,$42,$78,$5f,$8f,$41,$56,$5c,$42,$78,$5f,$80,$14,$c1,$00,$c3,$8a,$41,$68,$4c,$69,$56,$5f,$8f,$8a,$41,$68,$4c,$69,$56,$5f,$80,$12,$c2,$00,$c3,$8a,$8a,$7a,$6f,$60,$5c,$58,$8f,$7a,$6f,$60,$5c,$58,$80,$14,$c3,$00,$c3,$8a,$41,$5a,$68,$41,$67,$56,$8f,$8a,$41,$5a,$68,$41,$67,$56,$80,$12,$c4,$00,$c3,$8a,$71,$6d,$5b,$44,$6a,$8f,$8a,$71,$6d,$5b,$44,$6a,$80,$12,$c5,$00,$c3,$8a,$8a,$77,$7c,$60,$44,$76,$8f,$77,$7c,$60,$44,$76,$80,$14,$c6,$00,$c3,$8a,$41,$43,$53,$6f,$5f,$6e,$8f,$8a,$41,$43,$53,$6f,$5f,$6e,$80,$14,$c7,$00,$c3,$8a,$41,$43,$5b,$4d,$60,$68,$8f,$8a,$41,$43,$5b,$4d,$60,$68,$80,$14,$c8,$00,$c3,$8a,$8a,$41,$43,$65,$7f,$49,$70,$8f,$41,$43,$65,$7f,$49,$70,$80,$14,$c9,$00,$c3,$8a,$8a,$41,$78,$64,$65,$44,$7a,$8f,$41,$78,$64,$65,$44,$7a,$80,$14,$ca,$00,$c3,$8a,$8a,$41,$55,$4d,$5d,$7e,$7a,$8f,$41,$55,$4d,$5d,$7e,$7a,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C30D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D30D -  -  -  -  EndTestInstance:
   18 D1:D30D -  -  -  -  		
   19 D1:D30D -  -  -  -  ; ***************************************************************************************
   20 D1:D30D -  -  -  -  ;
   21 D1:D30D -  -  -  -  ;									Changes and Updates
   22 D1:D30D -  -  -  -  ;
   23 D1:D30D -  -  -  -  ; ***************************************************************************************
   24 D1:D30D -  -  -  -  ;
   25 D1:D30D -  -  -  -  ;		Date			Notes
   26 D1:D30D -  -  -  -  ;		==== 			=====
   27 D1:D30D -  -  -  -  ;
   28 D1:D30D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:D30D -  -  -  -  FinalAddress:
