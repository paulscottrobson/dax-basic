    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DATA = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DATA
   35 00:0000             	ld a,ERRID_DATA
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIM = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIM
   42 00:0000             	ld a,ERRID_DIM
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DISABLED = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DISABLED
   49 00:0000             	ld a,ERRID_DISABLED
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_DIVZERO = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_DIVZERO
   56 00:0000             	ld a,ERRID_DIVZERO
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_GOSUB = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_GOSUB
   63 00:0000             	ld a,ERRID_GOSUB
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_INDEX = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_INDEX
   70 00:0000             	ld a,ERRID_INDEX
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_LINENO = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_LINENO
   77 00:0000             	ld a,ERRID_LINENO
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_MEMORY = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_MEMORY
   84 00:0000             	ld a,ERRID_MEMORY
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NEXT = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NEXT
   91 00:0000             	ld a,ERRID_NEXT
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOCOMMA = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   98 00:0000             	ld a,ERRID_NOCOMMA
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NODOLLAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NODOLLAR
  105 00:0000             	ld a,ERRID_NODOLLAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOLBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  112 00:0000             	ld a,ERRID_NOLBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOPROC = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOPROC
  119 00:0000             	ld a,ERRID_NOPROC
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NORBRACKET = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  126 00:0000             	ld a,ERRID_NORBRACKET
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_NOTREF = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_NOTREF
  133 00:0000             	ld a,ERRID_NOTREF
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PARAM = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PARAM
  140 00:0000             	ld a,ERRID_PARAM
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_PROC = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_PROC
  147 00:0000             	ld a,ERRID_PROC
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_REPEAT = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_REPEAT
  154 00:0000             	ld a,ERRID_REPEAT
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STACK = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STACK
  161 00:0000             	ld a,ERRID_STACK
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_STOP = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_STOP
  168 00:0000             	ld a,ERRID_STOP
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_SYNTAX = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_SYNTAX
  175 00:0000             	ld a,ERRID_SYNTAX
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_TODO = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_TODO
  182 00:0000             	ld a,ERRID_TODO
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
  186 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 26
  187 00:0000 -  -  -  -  
  188 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  189 00:0000             	ld a,ERRID_UNKNOWNVAR
  190 00:0000             	jp ErrorHandler
  191 00:0000             #endmacro
  192 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 D1:A881             		ld 		sp,$BFFF
   41 D1:A881             #endif
   42 D1:A881             
   43 D1:A881             #endif
   44 D1:A881 CD AA BD D1 		call 	SYSInitialise
   45 D1:A885 11 00 C4 D1 		ld 		de,TestInstance
   46 D1:A889 21 B3 D4 D1 		ld 		hl,EndTestInstance
   47 D1:A88D CD 6C B4 D1 		call 	SetCurrentInstance
   48 D1:A891 -  -  -  -  
   49 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 D1:A893 32 E5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 D1:A897 -  -  -  -  		
   52 D1:A897 C3 0B AC D1 		jp 		Command_RUN
   53 D1:A89B -  -  -  -  
   54 D1:A89B -  -  -  -  WarmStart:		
   55 D1:A89B 3E 2A -  -  		ld 		a,'*'
   56 D1:A89D CD D0 BD D1 		call 	SYSPrintChar
   57 D1:A8A1 CD B6 BD D1 		call 	SYSTerminate
   58 D1:A8A5 -  -  -  -  
   59 D1:A8A5 -  -  -  -  Unimplemented:
   60 D1:A8A5 3E 06 C3 83 
              AD D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   62 D1:A8AB 3E 07 C3 83 
              AD D1 -  -  		ERR_DIVZERO
   63 D1:A8B1 -  -  -  -  
   64 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   65 D1:A8B1 -  -  -  -  ;
   66 D1:A8B1 -  -  -  -  ;									Changes and Updates
   67 D1:A8B1 -  -  -  -  ;
   68 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   69 D1:A8B1 -  -  -  -  ;
   70 D1:A8B1 -  -  -  -  ;		Date			Notes
   71 D1:A8B1 -  -  -  -  ;		==== 			=====
   72 D1:A8B1 -  -  -  -  ;
   73 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  
   78 D1:A8DD -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  		
   81 D1:A8E1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 D1:A8E1 00 00 00 00 		.dw 	0,0
   83 D1:A8E5 -  -  -  -  
   84 D1:A8E5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 D1:A8E5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8EB -  -  -  -  
   87 D1:A8EB -  -  -  -  AConvert: 									; used for address conversions.
   88 D1:A8EB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 D1:A8F1 -  -  -  -  		
   90 D1:A8F1 -  -  -  -  RandomSeed: 								; random number seeds.
   91 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 D1:A901 -  -  -  -  
   93 D1:A901 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 D1:A901 00 00 -  -  		.dw 	0
   95 D1:A903 -  -  -  -  
   96 D1:A903 -  -  -  -  PrintBase: 									; current base for PRINT
   97 D1:A903 00 00 -  -  		.dw 	0 
   98 D1:A905 -  -  -  -  
   99 D1:A905 -  -  -  -  ReadDataPointer: 							; pointer for READ/DATA.
  100 D1:A905 00 00 00 00 		.dw 	0,0
  101 D1:A909 -  -  -  -  
  102 D1:A909 -  -  -  -  DataScanRequired: 							; flag set when scan forward for DATA required.
  103 D1:A909 00 00 -  -  		.dw 	0		
  104 D1:A90B -  -  -  -  
  105 D1:A90B -  -  -  -  ; ***************************************************************************************
  106 D1:A90B -  -  -  -  ;
  107 D1:A90B -  -  -  -  ;									Variable Information
  108 D1:A90B -  -  -  -  ;
  109 D1:A90B -  -  -  -  ; ***************************************************************************************
  110 D1:A90B -  -  -  -  
  111 D1:A90B -  -  -  -  VarNameStart: 								; first byte of name
  112 D1:A90B 00 00 00 00 		.dw 	0,0
  113 D1:A90F -  -  -  -  VarHash: 									; name hash value
  114 D1:A90F 00 00 -  -  		.dw 	0		
  115 D1:A911 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  116 D1:A911 00 00 00 00 		.dw 	0,0
  117 D1:A915 -  -  -  -  		
  118 D1:A915 -  -  -  -  ; ***************************************************************************************
  119 D1:A915 -  -  -  -  ;
  120 D1:A915 -  -  -  -  ;										  Buffers
  121 D1:A915 -  -  -  -  ;
  122 D1:A915 -  -  -  -  ; ***************************************************************************************
  123 D1:A915 -  -  -  -  
  124 D1:A915 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  125 D1:A915 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  126 D1:A925 -  -  -  -  
  127 D1:A925 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  128 D1:A925 00 00 -  -  		.dw 	0
  129 D1:A927 -  -  -  -  
  130 D1:A927 -  -  -  -  ConvertBuffer: 								; general usage for int/hex conversions.
  131 D1:A927 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  132 D1:A937 -  -  -  -  
  133 D1:A937 -  -  -  -  ; ***************************************************************************************
  134 D1:A937 -  -  -  -  ;
  135 D1:A937 -  -  -  -  ;								Tokenising/Detokenising
  136 D1:A937 -  -  -  -  ;
  137 D1:A937 -  -  -  -  ; ***************************************************************************************
  138 D1:A937 -  -  -  -  
  139 D1:A937 -  -  -  -  TokenBuffer: 								; buffer to use
  140 D1:A937 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	256
  141 D1:AA37 -  -  -  -  
  142 D1:AA37 -  -  -  -  TWPointer;
  143 D1:AA37 00 00 00 00 		.dw 	0,0 						; next free slot.
  144 D1:AA3B -  -  -  -  
  145 D1:AA3B -  -  -  -  ; ***************************************************************************************
  146 D1:AA3B -  -  -  -  ;
  147 D1:AA3B -  -  -  -  ;									Changes and Updates
  148 D1:AA3B -  -  -  -  ;
  149 D1:AA3B -  -  -  -  ; ***************************************************************************************
  150 D1:AA3B -  -  -  -  ;
  151 D1:AA3B -  -  -  -  ;		Date			Notes
  152 D1:AA3B -  -  -  -  ;		==== 			=====
  153 D1:AA3B -  -  -  -  ;
  154 D1:AA3B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 D1:AA3B -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:AA3B -  -  -  -  ; ***************************************************************************************
    2 D1:AA3B -  -  -  -  ; ***************************************************************************************
    3 D1:AA3B -  -  -  -  ;
    4 D1:AA3B -  -  -  -  ;		Name : 		assert.asm
    5 D1:AA3B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA3B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA3B -  -  -  -  ;		Reviewed :	No
    8 D1:AA3B -  -  -  -  ;		Purpose :	Assert command
    9 D1:AA3B -  -  -  -  ;
   10 D1:AA3B -  -  -  -  ; ***************************************************************************************
   11 D1:AA3B -  -  -  -  ; ***************************************************************************************
   12 D1:AA3B -  -  -  -  
   13 D1:AA3B -  -  -  -  ; ***************************************************************************************
   14 D1:AA3B -  -  -  -  ;
   15 D1:AA3B -  -  -  -  ;									ASSERT command
   16 D1:AA3B -  -  -  -  ;
   17 D1:AA3B -  -  -  -  ; ***************************************************************************************
   18 D1:AA3B -  -  -  -  
   19 D1:AA3B -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:AA3B CD B6 AF D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:AA3F 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:AA45 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:AA46 3E 01 C3 83 
              AD D1 -  -  		ERR_ASSERT
   24 D1:AA4C -  -  -  -  
   25 D1:AA4C -  -  -  -  ; ***************************************************************************************
   26 D1:AA4C -  -  -  -  ;
   27 D1:AA4C -  -  -  -  ;									Changes and Updates
   28 D1:AA4C -  -  -  -  ;
   29 D1:AA4C -  -  -  -  ; ***************************************************************************************
   30 D1:AA4C -  -  -  -  ;
   31 D1:AA4C -  -  -  -  ;		Date			Notes
   32 D1:AA4C -  -  -  -  ;		==== 			=====
   33 D1:AA4C -  -  -  -  ;
   34 D1:AA4C -  -  -  -  ; ***************************************************************************************
   35 D1:AA4C -  -  -  -  		
Listing for file "_build.asm"
   15 D1:AA4C -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:AA4C -  -  -  -  ; ***************************************************************************************
    2 D1:AA4C -  -  -  -  ; ***************************************************************************************
    3 D1:AA4C -  -  -  -  ;
    4 D1:AA4C -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:AA4C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA4C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA4C -  -  -  -  ;		Reviewed :	No
    8 D1:AA4C -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:AA4C -  -  -  -  ;
   10 D1:AA4C -  -  -  -  ; ***************************************************************************************
   11 D1:AA4C -  -  -  -  ; ***************************************************************************************
   12 D1:AA4C -  -  -  -  
   13 D1:AA4C -  -  -  -  BadCmd_Def: 		;; [def]
   14 D1:AA4C -  -  -  -  BadCmd_Data: 		;; [data]
   15 D1:AA4C -  -  -  -  BadCmd_Then: 		;; [then]
   16 D1:AA4C -  -  -  -  BadCmd_RBracket: 	;; [)]
   17 D1:AA4C -  -  -  -  BadCmd_LSBracket: 	;; [[]
   18 D1:AA4C -  -  -  -  BadCmd_RSBracket: 	;; []]
   19 D1:AA4C -  -  -  -  BadCmd_Comma: 		;; [,]
   20 D1:AA4C -  -  -  -  BadCmd_Comma: 		;; [~]
   21 D1:AA4C -  -  -  -  BadCmd_SemiColon: 	;; [;]
   22 D1:AA4C -  -  -  -  BadCmd_To: 			;; [to]
   23 D1:AA4C -  -  -  -  BadCmd_Step: 		;; [step]
   24 D1:AA4C C3 ED AD D1 		jp 		SyntaxError
   25 D1:AA50 -  -  -  -  
   26 D1:AA50 -  -  -  -  ; ***************************************************************************************
   27 D1:AA50 -  -  -  -  ;
   28 D1:AA50 -  -  -  -  ;									Changes and Updates
   29 D1:AA50 -  -  -  -  ;
   30 D1:AA50 -  -  -  -  ; ***************************************************************************************
   31 D1:AA50 -  -  -  -  ;
   32 D1:AA50 -  -  -  -  ;		Date			Notes
   33 D1:AA50 -  -  -  -  ;		==== 			=====
   34 D1:AA50 -  -  -  -  ;
   35 D1:AA50 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:AA50 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:AA50 -  -  -  -  ; ***************************************************************************************
    2 D1:AA50 -  -  -  -  ; ***************************************************************************************
    3 D1:AA50 -  -  -  -  ;
    4 D1:AA50 -  -  -  -  ;		Name : 		colon.asm
    5 D1:AA50 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA50 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:AA50 -  -  -  -  ;		Reviewed :	No
    8 D1:AA50 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:AA50 -  -  -  -  ;
   10 D1:AA50 -  -  -  -  ; ***************************************************************************************
   11 D1:AA50 -  -  -  -  ; ***************************************************************************************
   12 D1:AA50 -  -  -  -  
   13 D1:AA50 -  -  -  -  ; ***************************************************************************************
   14 D1:AA50 -  -  -  -  ;
   15 D1:AA50 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:AA50 -  -  -  -  ;
   17 D1:AA50 -  -  -  -  ; ***************************************************************************************
   18 D1:AA50 -  -  -  -  
   19 D1:AA50 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:AA50 C9 -  -  -  		ret
   21 D1:AA51 -  -  -  -  
   22 D1:AA51 -  -  -  -  ; ***************************************************************************************
   23 D1:AA51 -  -  -  -  ;
   24 D1:AA51 -  -  -  -  ;									Changes and Updates
   25 D1:AA51 -  -  -  -  ;
   26 D1:AA51 -  -  -  -  ; ***************************************************************************************
   27 D1:AA51 -  -  -  -  ;
   28 D1:AA51 -  -  -  -  ;		Date			Notes
   29 D1:AA51 -  -  -  -  ;		==== 			=====
   30 D1:AA51 -  -  -  -  ;
   31 D1:AA51 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:AA51 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:AA51 -  -  -  -  ; ***************************************************************************************
    2 D1:AA51 -  -  -  -  ; ***************************************************************************************
    3 D1:AA51 -  -  -  -  ;
    4 D1:AA51 -  -  -  -  ;		Name : 		dim.asm
    5 D1:AA51 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA51 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA51 -  -  -  -  ;		Reviewed :	No
    8 D1:AA51 -  -  -  -  ;		Purpose :	Dim command
    9 D1:AA51 -  -  -  -  ;
   10 D1:AA51 -  -  -  -  ; ***************************************************************************************
   11 D1:AA51 -  -  -  -  ; ***************************************************************************************
   12 D1:AA51 -  -  -  -  
   13 D1:AA51 -  -  -  -  ; ***************************************************************************************
   14 D1:AA51 -  -  -  -  ;
   15 D1:AA51 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:AA51 -  -  -  -  ;	
   17 D1:AA51 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:AA51 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:AA51 -  -  -  -  ;								(can be comma chained)
   20 D1:AA51 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:AA51 -  -  -  -  ;
   22 D1:AA51 -  -  -  -  ; ***************************************************************************************
   23 D1:AA51 -  -  -  -  
   24 D1:AA51 -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:AA51 -  -  -  -  		;
   26 D1:AA51 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:AA51 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:AA51 -  -  -  -  		;
   29 D1:AA51 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:AA53 D1 -  -  -  		pop 	de
   31 D1:AA54 -  -  -  -  		;
   32 D1:AA54 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:AA57 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:AA59 D2 ED AD D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:AA5D -  -  -  -  _DISkip:
   36 D1:AA5D DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:AA5F DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:AA62 FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:AA64 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:AA66 -  -  -  -  		;
   41 D1:AA66 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:AA69 FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:AA6B F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:AA6C CC CD AA D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:AA70 F1 -  -  -  		pop 	af
   46 D1:AA71 C4 85 AA D1 		call 	nz,DimensionAllocate
   47 D1:AA75 -  -  -  -  		;
   48 D1:AA75 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:AA78 FE A6 -  -  		cp 		KWD_COMMA
   50 D1:AA7A C0 -  -  -  		ret 	nz
   51 D1:AA7B DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:AA7D 18 D2 -  -  		jr 		Command_DIM
   53 D1:AA7F -  -  -  -  
   54 D1:AA7F -  -  -  -  _CDError:
   55 D1:AA7F 3E 05 C3 83 
              AD D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:AA85 -  -  -  -  
   57 D1:AA85 -  -  -  -  ; ***************************************************************************************
   58 D1:AA85 -  -  -  -  ;
   59 D1:AA85 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:AA85 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:AA85 -  -  -  -  ;
   62 D1:AA85 -  -  -  -  ; ***************************************************************************************
   63 D1:AA85 -  -  -  -  
   64 D1:AA85 -  -  -  -  DimensionAllocate:
   65 D1:AA85 D5 -  -  -  		push 	de 							; save start on stack
   66 D1:AA86 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:AA88 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:AA8A 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   69 D1:AA8E CD 3C B7 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:AA92 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:AA94 28 E9 -  -  		jr 		z,_CDError
   72 D1:AA96 CB 41 -  -  		bit 	CIsString,c
   73 D1:AA98 20 E5 -  -  		jr 		nz,_CDError
   74 D1:AA9A DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:AA9C E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:AA9D 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:AA9F CD 77 AD D1 		call 	CheckNextA 					; check for [
   78 D1:AAA3 CD B6 AF D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:AAA7 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:AAA9 CD 77 AD D1 		call 	CheckNextA 					; check for ]
   81 D1:AAAD 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:AAAE 7C -  -  -  		ld 		a,h
   83 D1:AAAF B5 -  -  -  		or 		l
   84 D1:AAB0 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:AAB2 D9 -  -  -  		exx
   86 D1:AAB3 23 -  -  -  		inc 	hl
   87 D1:AAB4 D9 -  -  -  		exx
   88 D1:AAB5 -  -  -  -  _DANoCarry:
   89 D1:AAB5 D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:AAB6 7C -  -  -  		ld 		a,h
   91 D1:AAB7 B5 -  -  -  		or 		l
   92 D1:AAB8 D9 -  -  -  		exx
   93 D1:AAB9 20 C4 -  -  		jr 		nz,_CDError
   94 D1:AABB CD F5 B3 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:AABF EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:AAC0 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:AAC1 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:AAC7 AF -  -  -  		xor 	a 							; autocreate off
   99 D1:AAC8 32 01 A9 D1 		ld 		(AllowAutoCreate),a
  100 D1:AACC C9 -  -  -  		ret
  101 D1:AACD -  -  -  -  
  102 D1:AACD -  -  -  -  ; ***************************************************************************************
  103 D1:AACD -  -  -  -  ;
  104 D1:AACD -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:AACD -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:AACD -  -  -  -  ;
  107 D1:AACD -  -  -  -  ; ***************************************************************************************
  108 D1:AACD -  -  -  -  
  109 D1:AACD -  -  -  -  DimensionArray:
  110 D1:AACD D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:AACE -  -  -  -  		;
  112 D1:AACE CD B6 AF D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:AAD2 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:AAD3 E6 FC -  -  		and 	$FC
  115 D1:AAD5 D9 -  -  -  		exx
  116 D1:AAD6 B4 -  -  -  		or 		h
  117 D1:AAD7 B5 -  -  -  		or 		l
  118 D1:AAD8 D9 -  -  -  		exx
  119 D1:AAD9 20 A4 -  -  		jr 		nz,_CDError
  120 D1:AADB -  -  -  -  		;
  121 D1:AADB DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:AADD E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:AADE -  -  -  -  		;
  124 D1:AADE CD C9 B7 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AAE2 CD 05 B8 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AAE6 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AAE8 -  -  -  -  		;
  128 D1:AAE8 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AAE9 E5 -  -  -  		push 	hl
  130 D1:AAEA 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AAEB 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AAEC 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AAED 29 -  -  -  		add 	hl,hl
  134 D1:AAEE CD F9 B6 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AAF2 -  -  -  -  		;
  136 D1:AAF2 D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AAF3 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AAF7 09 -  -  -  		add 	hl,bc
  139 D1:AAF8 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AAFE DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AB00 C9 -  -  -  		ret		
  142 D1:AB01 -  -  -  -  
  143 D1:AB01 -  -  -  -  
  144 D1:AB01 -  -  -  -  ; ***************************************************************************************
  145 D1:AB01 -  -  -  -  ;
  146 D1:AB01 -  -  -  -  ;									Changes and Updates
  147 D1:AB01 -  -  -  -  ;
  148 D1:AB01 -  -  -  -  ; ***************************************************************************************
  149 D1:AB01 -  -  -  -  ;
  150 D1:AB01 -  -  -  -  ;		Date			Notes
  151 D1:AB01 -  -  -  -  ;		==== 			=====
  152 D1:AB01 -  -  -  -  ;
  153 D1:AB01 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 D1:AB01 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AB01 -  -  -  -  ; ***************************************************************************************
    2 D1:AB01 -  -  -  -  ; ***************************************************************************************
    3 D1:AB01 -  -  -  -  ;
    4 D1:AB01 -  -  -  -  ;		Name : 		end.asm
    5 D1:AB01 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB01 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB01 -  -  -  -  ;		Reviewed :	No
    8 D1:AB01 -  -  -  -  ;		Purpose :	End command
    9 D1:AB01 -  -  -  -  ;
   10 D1:AB01 -  -  -  -  ; ***************************************************************************************
   11 D1:AB01 -  -  -  -  ; ***************************************************************************************
   12 D1:AB01 -  -  -  -  
   13 D1:AB01 -  -  -  -  ; ***************************************************************************************
   14 D1:AB01 -  -  -  -  ;
   15 D1:AB01 -  -  -  -  ;										END command
   16 D1:AB01 -  -  -  -  ;
   17 D1:AB01 -  -  -  -  ; ***************************************************************************************
   18 D1:AB01 -  -  -  -  
   19 D1:AB01 -  -  -  -  Command_END: 	;; [end]
   20 D1:AB01 3E 00 C3 83 
              AD D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AB07 -  -  -  -  
   22 D1:AB07 -  -  -  -  ; ***************************************************************************************
   23 D1:AB07 -  -  -  -  ;
   24 D1:AB07 -  -  -  -  ;									Changes and Updates
   25 D1:AB07 -  -  -  -  ;
   26 D1:AB07 -  -  -  -  ; ***************************************************************************************
   27 D1:AB07 -  -  -  -  ;
   28 D1:AB07 -  -  -  -  ;		Date			Notes
   29 D1:AB07 -  -  -  -  ;		==== 			=====
   30 D1:AB07 -  -  -  -  ;
   31 D1:AB07 -  -  -  -  ; ***************************************************************************************
   32 D1:AB07 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AB07 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AB07 -  -  -  -  ; ***************************************************************************************
    2 D1:AB07 -  -  -  -  ; ***************************************************************************************
    3 D1:AB07 -  -  -  -  ;
    4 D1:AB07 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AB07 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB07 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB07 -  -  -  -  ;		Reviewed :	None
    8 D1:AB07 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AB07 -  -  -  -  ;
   10 D1:AB07 -  -  -  -  ; ***************************************************************************************
   11 D1:AB07 -  -  -  -  ; ***************************************************************************************
   12 D1:AB07 -  -  -  -  
   13 D1:AB07 -  -  -  -  ; ***************************************************************************************
   14 D1:AB07 -  -  -  -  ;
   15 D1:AB07 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AB07 -  -  -  -  ;
   17 D1:AB07 -  -  -  -  ; ***************************************************************************************
   18 D1:AB07 -  -  -  -  
   19 D1:AB07 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AB07 DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AB0C 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AB10 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AB13 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AB15 -  -  -  -  		;
   25 D1:AB15 ED 7B E1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AB1A C3 1E AC D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AB1E -  -  -  -  
   28 D1:AB1E -  -  -  -  ; ***************************************************************************************
   29 D1:AB1E -  -  -  -  ;
   30 D1:AB1E -  -  -  -  ;									Changes and Updates
   31 D1:AB1E -  -  -  -  ;
   32 D1:AB1E -  -  -  -  ; ***************************************************************************************
   33 D1:AB1E -  -  -  -  ;
   34 D1:AB1E -  -  -  -  ;		Date			Notes
   35 D1:AB1E -  -  -  -  ;		==== 			=====
   36 D1:AB1E -  -  -  -  ;
   37 D1:AB1E -  -  -  -  ; ***************************************************************************************
   38 D1:AB1E -  -  -  -  		
Listing for file "_build.asm"
   20 D1:AB1E -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AB1E -  -  -  -  ; ***************************************************************************************
    2 D1:AB1E -  -  -  -  ; ***************************************************************************************
    3 D1:AB1E -  -  -  -  ;
    4 D1:AB1E -  -  -  -  ;		Name : 		let.asm
    5 D1:AB1E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB1E -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AB1E -  -  -  -  ;		Reviewed :	No
    8 D1:AB1E -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AB1E -  -  -  -  ;
   10 D1:AB1E -  -  -  -  ; ***************************************************************************************
   11 D1:AB1E -  -  -  -  ; ***************************************************************************************
   12 D1:AB1E -  -  -  -  
   13 D1:AB1E -  -  -  -  ; ***************************************************************************************
   14 D1:AB1E -  -  -  -  ;
   15 D1:AB1E -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AB1E -  -  -  -  ;
   17 D1:AB1E -  -  -  -  ; ***************************************************************************************
   18 D1:AB1E -  -  -  -  
   19 D1:AB1E -  -  -  -  Command_LET: 	;; [let]
   20 D1:AB1E DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AB21 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AB23 28 2F -  -  		jr 		z,_CLString
   23 D1:AB25 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AB27 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AB29 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AB2B 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   27 D1:AB2F -  -  -  -  _CLNoAuto:
   28 D1:AB2F 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AB31 CD 38 AF D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AB35 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AB37 CA ED AD D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AB3B E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AB3C C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AB3D AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AB3E 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AB42 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AB44 CD 77 AD D1 		call 	CheckNextA
   38 D1:AB48 -  -  -  -  
   39 D1:AB48 CD AE AF D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AB4C -  -  -  -  
   41 D1:AB4C D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AB4D 43 -  -  -  		ld 		b,e 						
   43 D1:AB4E D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AB4F -  -  -  -  		;
   45 D1:AB4F -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AB4F -  -  -  -  		;
   47 D1:AB4F CD 6D AB D1 		call 	WriteHLToDE
   48 D1:AB53 C9 -  -  -  		ret
   49 D1:AB54 -  -  -  -  		;
   50 D1:AB54 -  -  -  -  		; 		String assignment code.
   51 D1:AB54 -  -  -  -  		;
   52 D1:AB54 -  -  -  -  _CLString:
   53 D1:AB54 CD 9F AF D1 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 D1:AB58 E5 -  -  -  		push 	hl 							; save target expression
   55 D1:AB59 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 D1:AB5B CD 77 AD D1 		call 	CheckNextA
   57 D1:AB5F CD D0 AF D1 		call 	EvaluateString 				; get the thing to copy
   58 D1:AB63 D1 -  -  -  		pop 	de 							; target in DE.
   59 D1:AB64 -  -  -  -  _CLCopy:
   60 D1:AB64 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 D1:AB65 12 -  -  -  		ld 		(de),a
   62 D1:AB66 23 -  -  -  		inc 	hl
   63 D1:AB67 13 -  -  -  		inc 	de
   64 D1:AB68 FE 20 -  -  		cp 		$20 						; until control character
   65 D1:AB6A 30 F8 -  -  		jr 		nc,_CLCopy
   66 D1:AB6C C9 -  -  -  		ret
   67 D1:AB6D -  -  -  -  
   68 D1:AB6D -  -  -  -  ; ***************************************************************************************
   69 D1:AB6D -  -  -  -  ;
   70 D1:AB6D -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 D1:AB6D -  -  -  -  ;
   72 D1:AB6D -  -  -  -  ; ***************************************************************************************
   73 D1:AB6D -  -  -  -  
   74 D1:AB6D -  -  -  -  WriteHLToDE:
   75 D1:AB6D CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 D1:AB6F C2 E1 AD D1 		jp 		nz,TypeMismatch
   77 D1:AB73 -  -  -  -  		;
   78 D1:AB73 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 D1:AB73 -  -  -  -  		;		
   80 D1:AB73 -  -  -  -  _WHDWriteNumber:
   81 D1:AB73 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 D1:AB74 D9 -  -  -  		exx
   83 D1:AB75 EB -  -  -  		ex 		de,hl
   84 D1:AB76 D9 -  -  -  		exx
   85 D1:AB77 -  -  -  -  
   86 D1:AB77 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 D1:AB78 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 D1:AB79 72 -  -  -  		ld 		(hl),d
   89 D1:AB7A 23 -  -  -  		inc 	hl
   90 D1:AB7B E5 -  -  -  		push 	hl
   91 D1:AB7C D9 -  -  -  		exx
   92 D1:AB7D E1 -  -  -  		pop 	hl
   93 D1:AB7E 73 -  -  -  		ld 		(hl),e
   94 D1:AB7F 23 -  -  -  		inc 	hl
   95 D1:AB80 72 -  -  -  		ld 		(hl),d
   96 D1:AB81 D9 -  -  -  		exx
   97 D1:AB82 -  -  -  -  
   98 D1:AB82 C9 -  -  -  		ret
   99 D1:AB83 -  -  -  -  
  100 D1:AB83 -  -  -  -  ; ***************************************************************************************
  101 D1:AB83 -  -  -  -  ;
  102 D1:AB83 -  -  -  -  ;									Changes and Updates
  103 D1:AB83 -  -  -  -  ;
  104 D1:AB83 -  -  -  -  ; ***************************************************************************************
  105 D1:AB83 -  -  -  -  ;
  106 D1:AB83 -  -  -  -  ;		Date			Notes
  107 D1:AB83 -  -  -  -  ;		==== 			=====
  108 D1:AB83 -  -  -  -  ;
  109 D1:AB83 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AB83 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AB83 -  -  -  -  ; ***************************************************************************************
    2 D1:AB83 -  -  -  -  ; ***************************************************************************************
    3 D1:AB83 -  -  -  -  ;
    4 D1:AB83 -  -  -  -  ;		Name : 		print.asm
    5 D1:AB83 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB83 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB83 -  -  -  -  ;		Reviewed :	No
    8 D1:AB83 -  -  -  -  ;		Purpose :	Print command
    9 D1:AB83 -  -  -  -  ;
   10 D1:AB83 -  -  -  -  ; ***************************************************************************************
   11 D1:AB83 -  -  -  -  ; ***************************************************************************************
   12 D1:AB83 -  -  -  -  
   13 D1:AB83 -  -  -  -  ; ***************************************************************************************
   14 D1:AB83 -  -  -  -  ;
   15 D1:AB83 -  -  -  -  ;										PRINT command
   16 D1:AB83 -  -  -  -  ;
   17 D1:AB83 -  -  -  -  ; ***************************************************************************************
   18 D1:AB83 -  -  -  -  
   19 D1:AB83 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AB83 3E F6 -  -  		ld 		a,-10 						; default base.
   21 D1:AB85 32 03 A9 D1 		ld 		(PrintBase),a
   22 D1:AB89 -  -  -  -  		;
   23 D1:AB89 -  -  -  -  		;		Main loop
   24 D1:AB89 -  -  -  -  		;
   25 D1:AB89 -  -  -  -  _CPRLoop:
   26 D1:AB89 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 D1:AB8C FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 D1:AB8E 28 59 -  -  		jr 		z,_CPRExitNL
   29 D1:AB90 FE A7 -  -  		cp 		KWD_COLON 	
   30 D1:AB92 28 55 -  -  		jr 		z,_CPRExitNL
   31 D1:AB94 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 D1:AB96 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 D1:AB98 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 D1:AB9A 28 34 -  -  		jr 		z,_CPRTab
   35 D1:AB9C FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 D1:AB9E 28 2A -  -  		jr 		z,_CPRNewLine
   37 D1:ABA0 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 D1:ABA2 28 1C -  -  		jr 		z,_CPRHexMode
   39 D1:ABA4 -  -  -  -  		;
   40 D1:ABA4 CD AE AF D1 		call 	EvaluateValue 				; so it must be an expression.		
   41 D1:ABA8 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 D1:ABAA 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 D1:ABAC -  -  -  -  		;
   44 D1:ABAC 3A 03 A9 D1 		ld 		a,(PrintBase)				; current print mode.
   45 D1:ABB0 -  -  -  -  _CPRPrintNumber:
   46 D1:ABB0 01 27 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:ABB4 C5 -  -  -  		push 	bc
   48 D1:ABB5 CD 5D BD D1 		call 	Int32ToString 				; convert to string
   49 D1:ABB9 E1 -  -  -  		pop 	hl
   50 D1:ABBA -  -  -  -  		;
   51 D1:ABBA -  -  -  -  		; 		Print text at HL.
   52 D1:ABBA -  -  -  -  		;
   53 D1:ABBA -  -  -  -  _CPRPrintHL:
   54 D1:ABBA CD EE B6 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:ABBE 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:ABC0 -  -  -  -  		;
   57 D1:ABC0 -  -  -  -  		;		Hex mode (~)
   58 D1:ABC0 -  -  -  -  		;
   59 D1:ABC0 -  -  -  -  _CPRHexMode:		
   60 D1:ABC0 3E 10 -  -  		ld 		a,16
   61 D1:ABC2 32 03 A9 D1 		ld 		(PrintBase),a
   62 D1:ABC6 DD 23 -  -  		inc 	ix
   63 D1:ABC8 18 BF -  -  		jr 		_CPRLoop
   64 D1:ABCA -  -  -  -  		;
   65 D1:ABCA -  -  -  -  		; 		New line (')
   66 D1:ABCA -  -  -  -  		;
   67 D1:ABCA -  -  -  -  _CPRNewLine:
   68 D1:ABCA CD F8 BD D1 		call 	SYSPrintCRLF
   69 D1:ABCE 18 0C -  -  		jr 		_CPRCheckNext
   70 D1:ABD0 -  -  -  -  		;
   71 D1:ABD0 -  -  -  -  		; 		Tab command (,)
   72 D1:ABD0 -  -  -  -  		;
   73 D1:ABD0 -  -  -  -  _CPRTab:
   74 D1:ABD0 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 D1:ABD2 CD D0 BD D1 		call 	SYSPrintChar
   76 D1:ABD6 -  -  -  -  		;
   77 D1:ABD6 -  -  -  -  		;		Set to base 10 then check next character
   78 D1:ABD6 -  -  -  -  		;
   79 D1:ABD6 -  -  -  -  _CPRCheckNext10:		
   80 D1:ABD6 3E F6 -  -  		ld 		a,-10
   81 D1:ABD8 32 03 A9 D1 		ld 		(PrintBase),a
   82 D1:ABDC -  -  -  -  		;
   83 D1:ABDC -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 D1:ABDC -  -  -  -  		;		
   85 D1:ABDC -  -  -  -  _CPRCheckNext:
   86 D1:ABDC DD 23 -  -  		inc 	ix 							; consume current
   87 D1:ABDE DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 D1:ABE1 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 D1:ABE3 C8 -  -  -  		ret 	z
   90 D1:ABE4 FE A7 -  -  		cp 		KWD_COLON
   91 D1:ABE6 C8 -  -  -  		ret 	z
   92 D1:ABE7 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 D1:ABE9 -  -  -  -  		;
   94 D1:ABE9 -  -  -  -  		;		Found EOL or : not after ; ,
   95 D1:ABE9 -  -  -  -  		;
   96 D1:ABE9 -  -  -  -  _CPRExitNL:
   97 D1:ABE9 CD F8 BD D1 		call 	SYSPrintCRLF 				; do CR/LF
   98 D1:ABED C9 -  -  -  		ret
Listing for file "_build.asm"
   22 D1:ABEE -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:ABEE -  -  -  -  ; ***************************************************************************************
    2 D1:ABEE -  -  -  -  ; ***************************************************************************************
    3 D1:ABEE -  -  -  -  ;
    4 D1:ABEE -  -  -  -  ;		Name : 		rem.asm
    5 D1:ABEE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABEE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABEE -  -  -  -  ;		Reviewed :	No
    8 D1:ABEE -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:ABEE -  -  -  -  ;
   10 D1:ABEE -  -  -  -  ; ***************************************************************************************
   11 D1:ABEE -  -  -  -  ; ***************************************************************************************
   12 D1:ABEE -  -  -  -  
   13 D1:ABEE -  -  -  -  ; ***************************************************************************************
   14 D1:ABEE -  -  -  -  ;
   15 D1:ABEE -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:ABEE -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:ABEE -  -  -  -  ;
   18 D1:ABEE -  -  -  -  ; ***************************************************************************************
   19 D1:ABEE -  -  -  -  
   20 D1:ABEE -  -  -  -  Command_REM: 	;; [rem]
   21 D1:ABEE -  -  -  -  Command_REM2: 	;; [']
   22 D1:ABEE DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:ABF1 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 D1:ABF3 C8 -  -  -  		ret 	z
   25 D1:ABF4 DD 23 -  -  		inc 	ix
   26 D1:ABF6 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 D1:ABF8 C8 -  -  -  		ret 	z
   28 D1:ABF9 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:ABFB C2 ED AD D1 		jp 		nz,SyntaxError
   30 D1:ABFF -  -  -  -  		;		
   31 D1:ABFF 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AC03 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AC06 13 -  -  -  		inc 	de 
   34 D1:AC07 13 -  -  -  		inc 	de
   35 D1:AC08 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AC0A C9 -  -  -  		ret
   37 D1:AC0B -  -  -  -  
   38 D1:AC0B -  -  -  -  ; ***************************************************************************************
   39 D1:AC0B -  -  -  -  ;
   40 D1:AC0B -  -  -  -  ;									Changes and Updates
   41 D1:AC0B -  -  -  -  ;
   42 D1:AC0B -  -  -  -  ; ***************************************************************************************
   43 D1:AC0B -  -  -  -  ;
   44 D1:AC0B -  -  -  -  ;		Date			Notes
   45 D1:AC0B -  -  -  -  ;		==== 			=====
   46 D1:AC0B -  -  -  -  ;
   47 D1:AC0B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AC0B -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AC0B -  -  -  -  ; ***************************************************************************************
    2 D1:AC0B -  -  -  -  ; ***************************************************************************************
    3 D1:AC0B -  -  -  -  ;
    4 D1:AC0B -  -  -  -  ;		Name : 		run.asm
    5 D1:AC0B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC0B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC0B -  -  -  -  ;		Reviewed :	No
    8 D1:AC0B -  -  -  -  ;		Purpose :	Run command
    9 D1:AC0B -  -  -  -  ;
   10 D1:AC0B -  -  -  -  ; ***************************************************************************************
   11 D1:AC0B -  -  -  -  ; ***************************************************************************************
   12 D1:AC0B -  -  -  -  
   13 D1:AC0B -  -  -  -  ; ***************************************************************************************
   14 D1:AC0B -  -  -  -  ;
   15 D1:AC0B -  -  -  -  ;										RUN command
   16 D1:AC0B -  -  -  -  ;
   17 D1:AC0B -  -  -  -  ; ***************************************************************************************
   18 D1:AC0B -  -  -  -  
   19 D1:AC0B -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AC0B CD 17 B4 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AC0F -  -  -  -  
   22 D1:AC0F DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AC14 ED 73 E1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AC19 AF -  -  -  		xor 	a
   25 D1:AC1A 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AC1E -  -  -  -  		;
   27 D1:AC1E -  -  -  -  		; 		New line at IX.
   28 D1:AC1E -  -  -  -  		;
   29 D1:AC1E -  -  -  -  CRNewLine:
   30 D1:AC1E DD 22 DD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AC23 -  -  -  -  		;
   32 D1:AC23 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AC26 B7 -  -  -  		or 		a
   34 D1:AC27 CA 01 AB D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AC2B -  -  -  -  		;
   36 D1:AC2B DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AC2D DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AC2F DD 23 -  -  		inc 	ix
   39 D1:AC31 -  -  -  -  		;
   40 D1:AC31 -  -  -  -  		; 		New command at IX
   41 D1:AC31 -  -  -  -  		;
   42 D1:AC31 -  -  -  -  _CRNewCommand:	
   43 D1:AC31 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AC34 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AC35 F2 70 AC D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AC39 -  -  -  -  		;
   47 D1:AC39 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AC3B 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AC3D FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AC3F D2 60 AC D1 		jp 		nc,_CRAlternateLets
   51 D1:AC43 -  -  -  -  		;
   52 D1:AC43 -  -  -  -  _CRDoCommand:		
   53 D1:AC43 E6 7F 21 00 
              00 00 6F 29 
              29 11 66 BA 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AC58 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AC5A CD E5 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AC5E 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AC60 -  -  -  -  		;
   58 D1:AC60 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AC60 -  -  -  -  		;
   60 D1:AC60 -  -  -  -  		;
   61 D1:AC60 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AC60 -  -  -  -  		;		
   63 D1:AC60 -  -  -  -  _CRAlternateLets:		
   64 D1:AC60 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AC62 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AC64 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AC66 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AC68 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AC6A 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AC6C C3 ED AD D1 		jp 		SyntaxError
   71 D1:AC70 -  -  -  -  		;
   72 D1:AC70 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AC70 -  -  -  -  		;
   74 D1:AC70 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AC70 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AC72 D2 ED AD D1 		jp 		nc,SyntaxError
   77 D1:AC76 -  -  -  -  _CRAssignmentLet:		
   78 D1:AC76 CD 1E AB D1 		call	Command_LET 				; do LET.
   79 D1:AC7A C3 31 AC D1 		jp 		_CRNewCommand
   80 D1:AC7E -  -  -  -  
   81 D1:AC7E -  -  -  -  ; ***************************************************************************************
   82 D1:AC7E -  -  -  -  ;
   83 D1:AC7E -  -  -  -  ;									Changes and Updates
   84 D1:AC7E -  -  -  -  ;
   85 D1:AC7E -  -  -  -  ; ***************************************************************************************
   86 D1:AC7E -  -  -  -  ;
   87 D1:AC7E -  -  -  -  ;		Date			Notes
   88 D1:AC7E -  -  -  -  ;		==== 			=====
   89 D1:AC7E -  -  -  -  ;
   90 D1:AC7E -  -  -  -  ; ***************************************************************************************
   91 D1:AC7E -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AC7E -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AC7E -  -  -  -  ; ***************************************************************************************
    2 D1:AC7E -  -  -  -  ; ***************************************************************************************
    3 D1:AC7E -  -  -  -  ;
    4 D1:AC7E -  -  -  -  ;		Name : 		stop.asm
    5 D1:AC7E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC7E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC7E -  -  -  -  ;		Reviewed :	No
    8 D1:AC7E -  -  -  -  ;		Purpose :	Stop command
    9 D1:AC7E -  -  -  -  ;
   10 D1:AC7E -  -  -  -  ; ***************************************************************************************
   11 D1:AC7E -  -  -  -  ; ***************************************************************************************
   12 D1:AC7E -  -  -  -  
   13 D1:AC7E -  -  -  -  ; ***************************************************************************************
   14 D1:AC7E -  -  -  -  ;
   15 D1:AC7E -  -  -  -  ;										STOP command
   16 D1:AC7E -  -  -  -  ;
   17 D1:AC7E -  -  -  -  ; ***************************************************************************************
   18 D1:AC7E -  -  -  -  
   19 D1:AC7E -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AC7E 3E 17 C3 83 
              AD D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AC84 -  -  -  -  
   22 D1:AC84 -  -  -  -  ; ***************************************************************************************
   23 D1:AC84 -  -  -  -  ;
   24 D1:AC84 -  -  -  -  ;									Changes and Updates
   25 D1:AC84 -  -  -  -  ;
   26 D1:AC84 -  -  -  -  ; ***************************************************************************************
   27 D1:AC84 -  -  -  -  ;
   28 D1:AC84 -  -  -  -  ;		Date			Notes
   29 D1:AC84 -  -  -  -  ;		==== 			=====
   30 D1:AC84 -  -  -  -  ;
   31 D1:AC84 -  -  -  -  ; ***************************************************************************************
   32 D1:AC84 -  -  -  -  		
Listing for file "_build.asm"
   25 D1:AC84 -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 D1:AC84 -  -  -  -  ; ***************************************************************************************
    2 D1:AC84 -  -  -  -  ; ***************************************************************************************
    3 D1:AC84 -  -  -  -  ;
    4 D1:AC84 -  -  -  -  ;		Name : 		vdu.asm
    5 D1:AC84 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC84 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:AC84 -  -  -  -  ;		Reviewed :	No
    8 D1:AC84 -  -  -  -  ;		Purpose :	Vdu command
    9 D1:AC84 -  -  -  -  ;
   10 D1:AC84 -  -  -  -  ; ***************************************************************************************
   11 D1:AC84 -  -  -  -  ; ***************************************************************************************
   12 D1:AC84 -  -  -  -  
   13 D1:AC84 -  -  -  -  ; ***************************************************************************************
   14 D1:AC84 -  -  -  -  ;
   15 D1:AC84 -  -  -  -  ;										END command
   16 D1:AC84 -  -  -  -  ;
   17 D1:AC84 -  -  -  -  ; ***************************************************************************************
   18 D1:AC84 -  -  -  -  
   19 D1:AC84 -  -  -  -  Command_VDU: 	;; [vdu]
   20 D1:AC84 DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 D1:AC87 FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 D1:AC89 C8 -  -  -  		ret 	z
   23 D1:AC8A FE A7 -  -  		cp 		KWD_COLON
   24 D1:AC8C C8 -  -  -  		ret 	z
   25 D1:AC8D -  -  -  -  		;
   26 D1:AC8D CD B6 AF D1 		call 	EvaluateInteger 			; evaluate integer value
   27 D1:AC91 D9 -  -  -  		exx 								; check 0-FFFF
   28 D1:AC92 7C -  -  -  		ld 		a,h
   29 D1:AC93 B5 -  -  -  		or 		l
   30 D1:AC94 D9 -  -  -  		exx
   31 D1:AC95 C2 E7 AD D1 		jp  	nz,BadValue
   32 D1:AC99 E5 -  -  -  		push 	hl 							; save on stack
   33 D1:AC9A 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 D1:AC9B CD D0 BD D1 		call 	SYSPrintChar
   35 D1:AC9F E1 -  -  -  		pop 	hl 							; get upper back
   36 D1:ACA0 DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 D1:ACA3 DD 23 -  -  		inc 	ix 
   38 D1:ACA5 FE A6 -  -  		cp 		KWD_COMMA 					
   39 D1:ACA7 28 DB -  -  		jr 		z,Command_VDU
   40 D1:ACA9 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 D1:ACAB 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 D1:ACAD DD 2B -  -  		dec 	ix 							; go back and try again
   43 D1:ACAF 18 D3 -  -  		jr 		Command_VDU
   44 D1:ACB1 -  -  -  -  
   45 D1:ACB1 -  -  -  -  _VDUUpper:
   46 D1:ACB1 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 D1:ACB2 CD D0 BD D1 		call 	SYSPrintChar
   48 D1:ACB6 18 CC -  -  		jr 		Command_VDU		
   49 D1:ACB8 -  -  -  -  
   50 D1:ACB8 -  -  -  -  ; ***************************************************************************************
   51 D1:ACB8 -  -  -  -  ;
   52 D1:ACB8 -  -  -  -  ;									Changes and Updates
   53 D1:ACB8 -  -  -  -  ;
   54 D1:ACB8 -  -  -  -  ; ***************************************************************************************
   55 D1:ACB8 -  -  -  -  ;
   56 D1:ACB8 -  -  -  -  ;		Date			Notes
   57 D1:ACB8 -  -  -  -  ;		==== 			=====
   58 D1:ACB8 -  -  -  -  ;
   59 D1:ACB8 -  -  -  -  ; ***************************************************************************************
   60 D1:ACB8 -  -  -  -  		
Listing for file "_build.asm"
   26 D1:ACB8 -  -  -  -  #include "core/data/read.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
    1 D1:ACB8 -  -  -  -  ; ***************************************************************************************
    2 D1:ACB8 -  -  -  -  ; ***************************************************************************************
    3 D1:ACB8 -  -  -  -  ;
    4 D1:ACB8 -  -  -  -  ;		Name : 		read.asm
    5 D1:ACB8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACB8 -  -  -  -  ;		Date : 		9th June 2022
    7 D1:ACB8 -  -  -  -  ;		Reviewed :	No
    8 D1:ACB8 -  -  -  -  ;		Purpose :	READ command
    9 D1:ACB8 -  -  -  -  ;
   10 D1:ACB8 -  -  -  -  ; ***************************************************************************************
   11 D1:ACB8 -  -  -  -  
   12 D1:ACB8 -  -  -  -  ; ***************************************************************************************
   13 D1:ACB8 -  -  -  -  ;
   14 D1:ACB8 -  -  -  -  ;									Read Command
   15 D1:ACB8 -  -  -  -  ;
   16 D1:ACB8 -  -  -  -  ; ***************************************************************************************
   17 D1:ACB8 -  -  -  -  
   18 D1:ACB8 -  -  -  -  Command_READ: ;; [read]
   19 D1:ACB8 -  -  -  -  			;
   20 D1:ACB8 -  -  -  -  			;		READ loop
   21 D1:ACB8 -  -  -  -  			;
   22 D1:ACB8 -  -  -  -  _CRLoop:	
   23 D1:ACB8 21 09 A9 D1 			ld 		hl,DataScanRequired 	; check and clear scan required flag
   24 D1:ACBC 7E -  -  -  			ld 		a,(hl)
   25 D1:ACBD 36 00 -  -  			ld 		(hl),0 
   26 D1:ACBF B7 -  -  -  			or 		a
   27 D1:ACC0 C4 00 AD D1 			call 	nz,CRScanForward 		; if required, scan forward to the first data
   28 D1:ACC4 -  -  -  -  			;
   29 D1:ACC4 3E FF -  -  			ld 		a,$FF 					; we can autocreate READ variables
   30 D1:ACC6 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   31 D1:ACCA CD 3C B7 D1 			call 	FindVariable 			; locate the variable, address in UHL now.
   32 D1:ACCE AF -  -  -  			xor 	a 						
   33 D1:ACCF 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   34 D1:ACD3 DD E5 -  -  			push 	ix 						; save position in program
   35 D1:ACD5 E5 -  -  -  			push 	hl						; save variable target address.
   36 D1:ACD6 -  -  -  -  			;
   37 D1:ACD6 -  -  -  -  _CRLocateData:			
   38 D1:ACD6 DD 2A 05 A9 
              D1 -  -  -  			ld 		ix,(ReadDataPointer) 	; current read position
   39 D1:ACDB CD B6 AF D1 			call 	EvaluateInteger 		; should be an integer there.
   40 D1:ACDF D1 -  -  -  			pop 	de 						; target address in DE
   41 D1:ACE0 CD E9 B2 D1 			call 	_LCVWrite32HL 			; function to write HL'HL to DE
   42 D1:ACE4 -  -  -  -  			;
   43 D1:ACE4 DD 7E 00 -  			ld 		a,(ix+0) 				; get following.
   44 D1:ACE7 DD 23 -  -  			inc 	ix
   45 D1:ACE9 DD 22 05 A9 
              D1 -  -  -  			ld 		(ReadDataPointer),ix 	; skip over it. It should be , EOS or :
   46 D1:ACEE -  -  -  -  			;
   47 D1:ACEE EE A6 -  -  			xor 	KWD_COMMA 				; will be zero if a comma, hence no scan required
   48 D1:ACF0 32 09 A9 D1 			ld 		(DataScanRequired),a 	; update the flag accordingly.
   49 D1:ACF4 -  -  -  -  			;
   50 D1:ACF4 DD E1 -  -  			pop 	ix						; get program position back
   51 D1:ACF6 DD 7E 00 -  			ld 		a,(ix+0) 				; is it followed by a comma
   52 D1:ACF9 FE A6 -  -  			cp 		KWD_COMMA
   53 D1:ACFB C0 -  -  -  			ret 	nz 						; no, end of READ
   54 D1:ACFC DD 23 -  -  			inc 	ix 						; skip comma
   55 D1:ACFE 18 B8 -  -  			jr 		_CRLoop 				; go round again.
   56 D1:AD00 -  -  -  -  
   57 D1:AD00 -  -  -  -  ; ***************************************************************************************
   58 D1:AD00 -  -  -  -  ;
   59 D1:AD00 -  -  -  -  ;			Scan the data pointer forward to the next data statement, error if none.
   60 D1:AD00 -  -  -  -  ;
   61 D1:AD00 -  -  -  -  ; ***************************************************************************************
   62 D1:AD00 -  -  -  -  
   63 D1:AD00 -  -  -  -  CRScanForward:
   64 D1:AD00 DD E5 -  -  			push 	ix
   65 D1:AD02 DD 2A 05 A9 
              D1 -  -  -  			ld 		ix,(ReadDataPointer)
   66 D1:AD07 -  -  -  -  _CRScanLoop:
   67 D1:AD07 06 C8 -  -  			ld 		b,KWD_DATA 				; want to search for DATA or EOL
   68 D1:AD09 0E 80 -  -  			ld 		c,KWC_EOL_MARKER
   69 D1:AD0B CD 53 B6 D1 			call 	SearchForwardTokens 	; look for DATA or EOL in current line.
   70 D1:AD0F FE C8 -  -  			cp 		KWD_DATA 				; DATA found, we can exit
   71 D1:AD11 28 12 -  -  			jr 		z,_CRScanExit
   72 D1:AD13 -  -  -  -  			;
   73 D1:AD13 DD 7E 00 -  			ld 		a,(ix+0) 				; get offset
   74 D1:AD16 DD 23 -  -  			inc 	ix 						; point to start of next line.
   75 D1:AD18 DD 23 -  -  			inc 	ix
   76 D1:AD1A DD 23 -  -  			inc 	ix
   77 D1:AD1C B7 -  -  -  			or 		a 						; if offset non zero try that line.
   78 D1:AD1D 20 E8 -  -  			jr 		nz,_CRScanLoop
   79 D1:AD1F 3E 04 C3 83 
              AD D1 -  -  			ERR_DATA 						; we have no data.
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
   80 D1:AD25 -  -  -  -  
   81 D1:AD25 -  -  -  -  _CRScanExit:
   82 D1:AD25 DD 22 05 A9 
              D1 -  -  -  			ld 		(ReadDataPointer),ix 	; update pointer at new DATA.
   83 D1:AD2A DD E1 -  -  			pop 	ix
   84 D1:AD2C C9 -  -  -  			ret
   85 D1:AD2D -  -  -  -  
   86 D1:AD2D -  -  -  -  ; ***************************************************************************************
   87 D1:AD2D -  -  -  -  ;
   88 D1:AD2D -  -  -  -  ;									Changes and Updates
   89 D1:AD2D -  -  -  -  ;
   90 D1:AD2D -  -  -  -  ; ***************************************************************************************
   91 D1:AD2D -  -  -  -  ;
   92 D1:AD2D -  -  -  -  ;		Date			Notes
   93 D1:AD2D -  -  -  -  ;		==== 			=====
   94 D1:AD2D -  -  -  -  ;
   95 D1:AD2D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AD2D -  -  -  -  #include "core/data/restore.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/restore.asm"
    1 D1:AD2D -  -  -  -  ; ***************************************************************************************
    2 D1:AD2D -  -  -  -  ; ***************************************************************************************
    3 D1:AD2D -  -  -  -  ;
    4 D1:AD2D -  -  -  -  ;		Name : 		restore.asm
    5 D1:AD2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD2D -  -  -  -  ;		Date : 		9th June 2022
    7 D1:AD2D -  -  -  -  ;		Reviewed :	No
    8 D1:AD2D -  -  -  -  ;		Purpose :	RESTORE command
    9 D1:AD2D -  -  -  -  ;
   10 D1:AD2D -  -  -  -  ; ***************************************************************************************
   11 D1:AD2D -  -  -  -  
   12 D1:AD2D -  -  -  -  ; ***************************************************************************************
   13 D1:AD2D -  -  -  -  ;
   14 D1:AD2D -  -  -  -  ;									Restore Command
   15 D1:AD2D -  -  -  -  ;
   16 D1:AD2D -  -  -  -  ; ***************************************************************************************
   17 D1:AD2D -  -  -  -  
   18 D1:AD2D -  -  -  -  Command_RESTORE: ;; [restore]
   19 D1:AD2D 2A B9 A8 D1 			ld 		hl,(CodeAddress)		; HL+3 is the first token.
   20 D1:AD31 23 -  -  -  			inc 	hl
   21 D1:AD32 23 -  -  -  			inc 	hl
   22 D1:AD33 23 -  -  -  			inc 	hl
   23 D1:AD34 22 05 A9 D1 			ld 		(ReadDataPointer),hl 	; scan from here.
   24 D1:AD38 3E FF -  -  			ld 		a,$FF 					; scan required first time out.
   25 D1:AD3A 32 09 A9 D1 			ld 		(DataScanRequired),a
   26 D1:AD3E C9 -  -  -  			ret 					
   27 D1:AD3F -  -  -  -  
   28 D1:AD3F -  -  -  -  ; ***************************************************************************************
   29 D1:AD3F -  -  -  -  ;
   30 D1:AD3F -  -  -  -  ;									Changes and Updates
   31 D1:AD3F -  -  -  -  ;
   32 D1:AD3F -  -  -  -  ; ***************************************************************************************
   33 D1:AD3F -  -  -  -  ;
   34 D1:AD3F -  -  -  -  ;		Date			Notes
   35 D1:AD3F -  -  -  -  ;		==== 			=====
   36 D1:AD3F -  -  -  -  ;
   37 D1:AD3F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AD3F -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AD3F -  -  -  -  ; ***************************************************************************************
    2 D1:AD3F -  -  -  -  ; ***************************************************************************************
    3 D1:AD3F -  -  -  -  ;
    4 D1:AD3F -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AD3F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD3F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD3F -  -  -  -  ;		Reviewed :	No
    8 D1:AD3F -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AD3F -  -  -  -  ;
   10 D1:AD3F -  -  -  -  ; ***************************************************************************************
   11 D1:AD3F -  -  -  -  ; ***************************************************************************************
   12 D1:AD3F -  -  -  -  
   13 D1:AD3F -  -  -  -  ; ***************************************************************************************
   14 D1:AD3F -  -  -  -  ;
   15 D1:AD3F -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AD3F -  -  -  -  ;
   17 D1:AD3F -  -  -  -  ; ***************************************************************************************
   18 D1:AD3F -  -  -  -  
   19 D1:AD3F -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AD3F             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AD3F             		inc 	ix
   22 D1:AD3F             		cp 		ch 							; exit if matches
   23 D1:AD3F             		ret 	z
   24 D1:AD3F             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AD3F             		jp 		ErrorHandler
   26 D1:AD3F             #endmacro
   27 D1:AD3F -  -  -  -  
   28 D1:AD3F -  -  -  -  CheckLeftBracket:
   29 D1:AD3F DD 7E 00 DD 
              23 FE 95 C8 
              3E 0F C3 83 
              AD D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AD4D -  -  -  -  
   31 D1:AD4D -  -  -  -  CheckRightBracket:
   32 D1:AD4D DD 7E 00 DD 
              23 FE A5 C8 
              3E 11 C3 83 
              AD D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AD5B -  -  -  -  
   34 D1:AD5B -  -  -  -  CheckDollar:
   35 D1:AD5B DD 7E 00 DD 
              23 FE 96 C8 
              3E 0E C3 83 
              AD D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AD69 -  -  -  -  		
   37 D1:AD69 -  -  -  -  CheckComma:
   38 D1:AD69 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0D C3 83 
              AD D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AD77 -  -  -  -  
   40 D1:AD77 -  -  -  -  ; ***************************************************************************************
   41 D1:AD77 -  -  -  -  ;
   42 D1:AD77 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AD77 -  -  -  -  ;
   44 D1:AD77 -  -  -  -  ; ***************************************************************************************
   45 D1:AD77 -  -  -  -  
   46 D1:AD77 -  -  -  -  CheckNextA:
   47 D1:AD77 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AD7A DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AD7C C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AD7D 3E 18 C3 83 
              AD D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AD83 -  -  -  -  		
   52 D1:AD83 -  -  -  -  ; ***************************************************************************************
   53 D1:AD83 -  -  -  -  ;
   54 D1:AD83 -  -  -  -  ;									Changes and Updates
   55 D1:AD83 -  -  -  -  ;
   56 D1:AD83 -  -  -  -  ; ***************************************************************************************
   57 D1:AD83 -  -  -  -  ;
   58 D1:AD83 -  -  -  -  ;		Date			Notes
   59 D1:AD83 -  -  -  -  ;		==== 			=====
   60 D1:AD83 -  -  -  -  ;
   61 D1:AD83 -  -  -  -  ; ***************************************************************************************
   62 D1:AD83 -  -  -  -  		
Listing for file "_build.asm"
   29 D1:AD83 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AD83 -  -  -  -  ; ***************************************************************************************
    2 D1:AD83 -  -  -  -  ; ***************************************************************************************
    3 D1:AD83 -  -  -  -  ;
    4 D1:AD83 -  -  -  -  ;		Name : 		errors.asm
    5 D1:AD83 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD83 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD83 -  -  -  -  ;		Reviewed :	No
    8 D1:AD83 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AD83 -  -  -  -  ;
   10 D1:AD83 -  -  -  -  ; ***************************************************************************************
   11 D1:AD83 -  -  -  -  ; ***************************************************************************************
   12 D1:AD83 -  -  -  -  
   13 D1:AD83 -  -  -  -  ; ***************************************************************************************
   14 D1:AD83 -  -  -  -  ;
   15 D1:AD83 -  -  -  -  ;								Error handler, message A 
   16 D1:AD83 -  -  -  -  ;
   17 D1:AD83 -  -  -  -  ; ***************************************************************************************
   18 D1:AD83 -  -  -  -  
   19 D1:AD83 -  -  -  -  ErrorHandler:
   20 D1:AD83 F5 -  -  -  		push 	af 						; save error ID
   21 D1:AD84 -  -  -  -  
   22 D1:AD84 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AD88 6F -  -  -  		ld 		l,a
   24 D1:AD89 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AD8A 29 -  -  -  		add 	hl,hl 		
   26 D1:AD8B 11 51 B8 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AD8F 19 -  -  -  		add 	hl,de
   28 D1:AD90 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AD92 CD EE B6 D1 		call 	PrintStringAtHL
   30 D1:AD96 -  -  -  -  		;
   31 D1:AD96 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AD97 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AD98 28 2F -  -  		jr 		z,_EHExit
   34 D1:AD9A -  -  -  -  		;
   35 D1:AD9A DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AD9F DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:ADA2 B7 -  -  -  		or 		a
   38 D1:ADA3 28 24 -  -  		jr 		z,_EHExit
   39 D1:ADA5 -  -  -  -  
   40 D1:ADA5 21 D1 AD D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:ADA9 CD EE B6 D1 		call 	PrintStringAtHL 
   42 D1:ADAD -  -  -  -  		
   43 D1:ADAD D9 -  -  -  		exx								; HL'HL = line number
   44 D1:ADAE 21 00 00 00 		ld 		hl,$0000 		
   45 D1:ADB2 D9 -  -  -  		exx 
   46 D1:ADB3 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:ADB6 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:ADB9 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:ADBB 01 27 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:ADBF CD 5D BD D1 		call 	Int32ToString
   51 D1:ADC3 C5 -  -  -  		push 	bc
   52 D1:ADC4 E1 -  -  -  		pop 	hl
   53 D1:ADC5 CD EE B6 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:ADC9 -  -  -  -  _EHExit:		
   55 D1:ADC9 CD F8 BD D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:ADCD C3 9B A8 D1 		jp 		WarmStart
   57 D1:ADD1 -  -  -  -  
   58 D1:ADD1 -  -  -  -  _EHAtText:
   59 D1:ADD1 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:ADDB -  -  -  -  
   61 D1:ADDB -  -  -  -  NotImplemented:
   62 D1:ADDB 3E 06 C3 83 
              AD D1 -  -  		ERR_DISABLED
   63 D1:ADE1 -  -  -  -  TypeMismatch:
   64 D1:ADE1 3E 02 C3 83 
              AD D1 -  -  		ERR_BADTYPE
   65 D1:ADE7 -  -  -  -  BadValue:
   66 D1:ADE7 3E 03 C3 83 
              AD D1 -  -  		ERR_BADVALUE
   67 D1:ADED -  -  -  -  SyntaxError:
   68 D1:ADED 3E 18 C3 83 
              AD D1 -  -  		ERR_SYNTAX
   69 D1:ADF3 -  -  -  -  						
   70 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   71 D1:ADF3 -  -  -  -  ;
   72 D1:ADF3 -  -  -  -  ;									Changes and Updates
   73 D1:ADF3 -  -  -  -  ;
   74 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   75 D1:ADF3 -  -  -  -  ;
   76 D1:ADF3 -  -  -  -  ;		Date			Notes
   77 D1:ADF3 -  -  -  -  ;		==== 			=====
   78 D1:ADF3 -  -  -  -  ;
   79 D1:ADF3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:ADF3 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:ADF3 -  -  -  -  ; ***************************************************************************************
    2 D1:ADF3 -  -  -  -  ; ***************************************************************************************
    3 D1:ADF3 -  -  -  -  ;
    4 D1:ADF3 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:ADF3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADF3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADF3 -  -  -  -  ;		Reviewed :	No
    8 D1:ADF3 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:ADF3 -  -  -  -  ;
   10 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   11 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   12 D1:ADF3 -  -  -  -  
   13 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   14 D1:ADF3 -  -  -  -  ;
   15 D1:ADF3 -  -  -  -  ; 									Addition
   16 D1:ADF3 -  -  -  -  ;
   17 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   18 D1:ADF3 -  -  -  -  
   19 D1:ADF3 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:ADF3 CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 DC 
              BC D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AE01 -  -  -  -  
   22 D1:AE01 -  -  -  -  ; ***************************************************************************************
   23 D1:AE01 -  -  -  -  ;
   24 D1:AE01 -  -  -  -  ; 									Subtraction
   25 D1:AE01 -  -  -  -  ;
   26 D1:AE01 -  -  -  -  ; ***************************************************************************************
   27 D1:AE01 -  -  -  -  
   28 D1:AE01 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AE01 CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 E4 
              BC D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AE0F -  -  -  -  
   31 D1:AE0F -  -  -  -  ; ***************************************************************************************
   32 D1:AE0F -  -  -  -  ;
   33 D1:AE0F -  -  -  -  ; 									  Multiply
   34 D1:AE0F -  -  -  -  ;
   35 D1:AE0F -  -  -  -  ; ***************************************************************************************
   36 D1:AE0F -  -  -  -  
   37 D1:AE0F -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AE0F CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 A3 
              BC D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AE1D -  -  -  -  
   40 D1:AE1D -  -  -  -  ; ***************************************************************************************
   41 D1:AE1D -  -  -  -  ;
   42 D1:AE1D -  -  -  -  ; 									  Divide
   43 D1:AE1D -  -  -  -  ;
   44 D1:AE1D -  -  -  -  ; ***************************************************************************************
   45 D1:AE1D -  -  -  -  
   46 D1:AE1D -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AE1D -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AE1D CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 A3 
              BB D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AE2B -  -  -  -  
   50 D1:AE2B -  -  -  -  ; ***************************************************************************************
   51 D1:AE2B -  -  -  -  ;
   52 D1:AE2B -  -  -  -  ; 									  Modulus
   53 D1:AE2B -  -  -  -  ;
   54 D1:AE2B -  -  -  -  ; ***************************************************************************************
   55 D1:AE2B -  -  -  -  
   56 D1:AE2B -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AE2B CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 A6 
              BB D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AE39 -  -  -  -  
   59 D1:AE39 -  -  -  -  ; ***************************************************************************************
   60 D1:AE39 -  -  -  -  ;
   61 D1:AE39 -  -  -  -  ; 									  Logical
   62 D1:AE39 -  -  -  -  ;
   63 D1:AE39 -  -  -  -  ; ***************************************************************************************
   64 D1:AE39 -  -  -  -  
   65 D1:AE39 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AE39 CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 EE 
              BC D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AE47 -  -  -  -  
   68 D1:AE47 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AE47 CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 FB 
              BC D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AE55 -  -  -  -  
   71 D1:AE55 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AE55 CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 08 
              BD D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AE63 -  -  -  -  
   74 D1:AE63 -  -  -  -  ; ***************************************************************************************
   75 D1:AE63 -  -  -  -  ;
   76 D1:AE63 -  -  -  -  ;									Changes and Updates
   77 D1:AE63 -  -  -  -  ;
   78 D1:AE63 -  -  -  -  ; ***************************************************************************************
   79 D1:AE63 -  -  -  -  ;
   80 D1:AE63 -  -  -  -  ;		Date			Notes
   81 D1:AE63 -  -  -  -  ;		==== 			=====
   82 D1:AE63 -  -  -  -  ;
   83 D1:AE63 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AE63 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AE63 -  -  -  -  ; ***************************************************************************************
    2 D1:AE63 -  -  -  -  ; ***************************************************************************************
    3 D1:AE63 -  -  -  -  ;
    4 D1:AE63 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AE63 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE63 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE63 -  -  -  -  ;		Reviewed :	No
    8 D1:AE63 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AE63 -  -  -  -  ;
   10 D1:AE63 -  -  -  -  ; ***************************************************************************************
   11 D1:AE63 -  -  -  -  ; ***************************************************************************************
   12 D1:AE63 -  -  -  -  
   13 D1:AE63 -  -  -  -  ; ***************************************************************************************
   14 D1:AE63 -  -  -  -  ;
   15 D1:AE63 -  -  -  -  ; 									<l> <op> <r>
   16 D1:AE63 -  -  -  -  ;
   17 D1:AE63 -  -  -  -  ; ***************************************************************************************
   18 D1:AE63 -  -  -  -  
   19 D1:AE63 -  -  -  -  ALULongReference:			;; [!]
   20 D1:AE63 CD 73 AE D1 		call 	BRGetAddress 				; calculate address
   21 D1:AE67 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AE69 CB F9 -  -  		set 	CIsReference,c
   23 D1:AE6B C9 -  -  -  		ret
   24 D1:AE6C -  -  -  -  
   25 D1:AE6C -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AE6C CD 63 AE D1 		call 	ALULongReference
   27 D1:AE70 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AE72 C9 -  -  -  		ret
   29 D1:AE73 -  -  -  -  
   30 D1:AE73 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AE73 CD 10 AF D1 
              78 B1 C2 E1 
              AD D1 C3 81 
              AE D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AE81 -  -  -  -  _BRGAMain:		
   33 D1:AE81 CD DC BC D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AE85 CD 16 B0 D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AE89 C9 -  -  -  		ret
   36 D1:AE8A -  -  -  -  
   37 D1:AE8A -  -  -  -  ; ***************************************************************************************
   38 D1:AE8A -  -  -  -  ;
   39 D1:AE8A -  -  -  -  ;									Changes and Updates
   40 D1:AE8A -  -  -  -  ;
   41 D1:AE8A -  -  -  -  ; ***************************************************************************************
   42 D1:AE8A -  -  -  -  ;
   43 D1:AE8A -  -  -  -  ;		Date			Notes
   44 D1:AE8A -  -  -  -  ;		==== 			=====
   45 D1:AE8A -  -  -  -  ;
   46 D1:AE8A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AE8A -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AE8A -  -  -  -  ; ***************************************************************************************
    2 D1:AE8A -  -  -  -  ; ***************************************************************************************
    3 D1:AE8A -  -  -  -  ;
    4 D1:AE8A -  -  -  -  ;		Name : 		compare.asm
    5 D1:AE8A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE8A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE8A -  -  -  -  ;		Reviewed :	No
    8 D1:AE8A -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AE8A -  -  -  -  ;
   10 D1:AE8A -  -  -  -  ; ***************************************************************************************
   11 D1:AE8A -  -  -  -  ; ***************************************************************************************
   12 D1:AE8A -  -  -  -  
   13 D1:AE8A -  -  -  -  #macro compare_equals(n)
   14 D1:AE8A             		call 	CompareBaseCode
   15 D1:AE8A             		cp 		n
   16 D1:AE8A             		jr 		z,UnaryInt32True
   17 D1:AE8A             		jr 		UnaryInt32False
   18 D1:AE8A             #endmacro
   19 D1:AE8A -  -  -  -  
   20 D1:AE8A -  -  -  -  #macro compare_not_equals(n)
   21 D1:AE8A             		call 	CompareBaseCode
   22 D1:AE8A             		cp 		n
   23 D1:AE8A             		jr 		nz,UnaryInt32True
   24 D1:AE8A             		jr 		UnaryInt32False
   25 D1:AE8A             #endmacro
   26 D1:AE8A -  -  -  -  
   27 D1:AE8A -  -  -  -  ; ***************************************************************************************
   28 D1:AE8A -  -  -  -  ;
   29 D1:AE8A -  -  -  -  ; 								Return True/False
   30 D1:AE8A -  -  -  -  ;
   31 D1:AE8A -  -  -  -  ; ***************************************************************************************
   32 D1:AE8A -  -  -  -  
   33 D1:AE8A -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AE8A 3E FF -  -  		ld 		a,255
   35 D1:AE8C 18 01 -  -  		jr 		_Int32Logical
   36 D1:AE8E -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:AE8E AF -  -  -  		xor 	a
   38 D1:AE8F -  -  -  -  _Int32Logical:
   39 D1:AE8F 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AE90 67 -  -  -  		ld 		h,a
   41 D1:AE91 D9 -  -  -  		exx
   42 D1:AE92 6F -  -  -  		ld 		l,a
   43 D1:AE93 67 -  -  -  		ld 		h,a
   44 D1:AE94 D9 -  -  -  		exx
   45 D1:AE95 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AE97 C9 -  -  -  		ret
   47 D1:AE98 -  -  -  -  
   48 D1:AE98 -  -  -  -  ; ***************************************************************************************
   49 D1:AE98 -  -  -  -  ;
   50 D1:AE98 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AE98 -  -  -  -  ;
   52 D1:AE98 -  -  -  -  ; ***************************************************************************************
   53 D1:AE98 -  -  -  -  
   54 D1:AE98 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AE98 CD D4 AE D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AEA2 -  -  -  -  
   57 D1:AEA2 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AEA2 CD D4 AE D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AEAC -  -  -  -  
   60 D1:AEAC -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AEAC CD D4 AE D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AEB6 -  -  -  -  
   63 D1:AEB6 -  -  -  -  ; ***************************************************************************************
   64 D1:AEB6 -  -  -  -  ;
   65 D1:AEB6 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AEB6 -  -  -  -  ;
   67 D1:AEB6 -  -  -  -  ; ***************************************************************************************
   68 D1:AEB6 -  -  -  -  
   69 D1:AEB6 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AEB6 CD D4 AE D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AEC0 -  -  -  -  
   72 D1:AEC0 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AEC0 CD D4 AE D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AECA -  -  -  -  
   75 D1:AECA -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AECA CD D4 AE D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AED4 -  -  -  -  
   78 D1:AED4 -  -  -  -  ; ***************************************************************************************
   79 D1:AED4 -  -  -  -  ;
   80 D1:AED4 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AED4 -  -  -  -  ;
   82 D1:AED4 -  -  -  -  ; ***************************************************************************************
   83 D1:AED4 -  -  -  -  
   84 D1:AED4 -  -  -  -  CompareBaseCode:
   85 D1:AED4 CD 10 AF D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AED8 -  -  -  -  
   87 D1:AED8 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AED9 A1 -  -  -  		and 	c
   89 D1:AEDA CB 47 -  -  		bit 	CIsString,a 
   90 D1:AEDC C2 EE AE D1 		jp 		nz,StringCompare
   91 D1:AEE0 -  -  -  -  
   92 D1:AEE0 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AEE1 B1 -  -  -  		or 		c
   94 D1:AEE2 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AEE4 CA 1C BD D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AEE8 -  -  -  -  
   97 D1:AEE8 3E 02 C3 83 
              AD D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AEEE -  -  -  -  ;
   99 D1:AEEE -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AEEE -  -  -  -  ;
  101 D1:AEEE -  -  -  -  StringCompare:
  102 D1:AEEE 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AEEF BE -  -  -  		cp 		(hl)
  104 D1:AEF0 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AEF2 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AEF4 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AEF5 23 -  -  -  		inc 	hl
  108 D1:AEF6 FE 20 -  -  		cp 		' '
  109 D1:AEF8 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AEFA AF -  -  -  		xor 	a 							; return 0.
  111 D1:AEFB C9 -  -  -  		ret
  112 D1:AEFC -  -  -  -  
  113 D1:AEFC -  -  -  -  _SCLess:
  114 D1:AEFC 3E FF -  -  		ld 		a,$FF
  115 D1:AEFE C9 -  -  -  		ret
  116 D1:AEFF -  -  -  -  _SCGreater:
  117 D1:AEFF 3E 01 -  -  		ld 		a,1
  118 D1:AF01 C9 -  -  -  		ret
  119 D1:AF02 -  -  -  -  
  120 D1:AF02 3E 19 C3 83 
              AD D1 -  -  		ERR_TODO()
  121 D1:AF08 -  -  -  -  
  122 D1:AF08 -  -  -  -  ; ***************************************************************************************
  123 D1:AF08 -  -  -  -  ;
  124 D1:AF08 -  -  -  -  ;									Changes and Updates
  125 D1:AF08 -  -  -  -  ;
  126 D1:AF08 -  -  -  -  ; ***************************************************************************************
  127 D1:AF08 -  -  -  -  ;
  128 D1:AF08 -  -  -  -  ;		Date			Notes
  129 D1:AF08 -  -  -  -  ;		==== 			=====
  130 D1:AF08 -  -  -  -  ;
  131 D1:AF08 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AF08 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AF08 -  -  -  -  ; ***************************************************************************************
    2 D1:AF08 -  -  -  -  ; ***************************************************************************************
    3 D1:AF08 -  -  -  -  ;
    4 D1:AF08 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AF08 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF08 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF08 -  -  -  -  ;		Reviewed :	No
    8 D1:AF08 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AF08 -  -  -  -  ;
   10 D1:AF08 -  -  -  -  ; ***************************************************************************************
   11 D1:AF08 -  -  -  -  ; ***************************************************************************************
   12 D1:AF08 -  -  -  -  
   13 D1:AF08 -  -  -  -  ; ***************************************************************************************
   14 D1:AF08 -  -  -  -  ;
   15 D1:AF08 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AF08 -  -  -  -  ;
   17 D1:AF08 -  -  -  -  ; ***************************************************************************************
   18 D1:AF08 -  -  -  -  
   19 D1:AF08 -  -  -  -  SwapHLDE:
   20 D1:AF08 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AF09 D9 -  -  -  			exx
   22 D1:AF0A EB -  -  -  			ex 		de,hl
   23 D1:AF0B D9 -  -  -  			exx
   24 D1:AF0C 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AF0D 41 -  -  -  			ld 		b,c
   26 D1:AF0E 4F -  -  -  			ld 		c,a
   27 D1:AF0F C9 -  -  -  			ret
   28 D1:AF10 -  -  -  -  
   29 D1:AF10 -  -  -  -  ; ***************************************************************************************
   30 D1:AF10 -  -  -  -  ;
   31 D1:AF10 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AF10 -  -  -  -  ;
   33 D1:AF10 -  -  -  -  ; ***************************************************************************************
   34 D1:AF10 -  -  -  -  
   35 D1:AF10 -  -  -  -  DereferenceBoth:
   36 D1:AF10 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AF12 C4 E9 AF D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AF16 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AF18 C8 -  -  -  			ret 	z
   40 D1:AF19 CD 08 AF D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AF1D CD E9 AF D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AF21 CD 08 AF D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AF25 C9 -  -  -  			ret
   44 D1:AF26 -  -  -  -  
   45 D1:AF26 -  -  -  -  ; ***************************************************************************************
   46 D1:AF26 -  -  -  -  ;
   47 D1:AF26 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AF26 -  -  -  -  ;
   49 D1:AF26 -  -  -  -  ; ***************************************************************************************
   50 D1:AF26 -  -  -  -  
   51 D1:AF26 -  -  -  -  NegateHLHL:	
   52 D1:AF26 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AF28 C2 E1 AD D1 			jp 		nz,TypeMismatch
   54 D1:AF2C CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AF2E C4 E9 AF D1 			call 	nz,Dereference 			; if required.
   56 D1:AF32 CD 46 BD D1 			call 	Int32Negate
   57 D1:AF36 C9 -  -  -  			ret
Listing for file "_build.asm"
   34 D1:AF37 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AF37 -  -  -  -  ; ***************************************************************************************
    2 D1:AF37 -  -  -  -  ; ***************************************************************************************
    3 D1:AF37 -  -  -  -  ;
    4 D1:AF37 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AF37 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF37 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF37 -  -  -  -  ;		Reviewed :	None
    8 D1:AF37 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AF37 -  -  -  -  ;
   10 D1:AF37 -  -  -  -  ; ***************************************************************************************
   11 D1:AF37 -  -  -  -  ; ***************************************************************************************
   12 D1:AF37 -  -  -  -  
   13 D1:AF37 -  -  -  -  ; ***************************************************************************************
   14 D1:AF37 -  -  -  -  ;
   15 D1:AF37 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AF37 -  -  -  -  ;
   17 D1:AF37 -  -  -  -  ; ***************************************************************************************
   18 D1:AF37 -  -  -  -  
   19 D1:AF37 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AF37 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AF38 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AF38 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AF39 -  -  -  -  		;
   24 D1:AF39 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AF39 -  -  -  -  		;
   26 D1:AF39 CD 45 B0 D1 		call 	EvaluateTerm 				; get term
   27 D1:AF3D -  -  -  -  		;
   28 D1:AF3D -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AF3D -  -  -  -  		;
   30 D1:AF3D D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AF3E -  -  -  -  _EAPLoop:
   32 D1:AF3E DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AF41 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AF43 D8 -  -  -  		ret 	c
   35 D1:AF44 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AF46 D0 -  -  -  		ret 	nc
   37 D1:AF47 -  -  -  -  		;
   38 D1:AF47 -  -  -  -  		; 		Get the precedence.
   39 D1:AF47 -  -  -  -  		;
   40 D1:AF47 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AF48 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AF4A 21 40 B8 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AF4E B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AF4F 6F -  -  -  		ld 		l,a
   45 D1:AF50 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AF51 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AF52 -  -  -  -  		;
   48 D1:AF52 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AF52 -  -  -  -  		;
   50 D1:AF52 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AF53 BB -  -  -  		cp 		e
   52 D1:AF54 D0 -  -  -  		ret 	nc
   53 D1:AF55 -  -  -  -  
   54 D1:AF55 -  -  -  -  		;
   55 D1:AF55 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AF55 -  -  -  -  		;
   57 D1:AF55 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AF56 -  -  -  -  		;
   59 D1:AF56 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AF59 F5 -  -  -  		push 	af
   61 D1:AF5A -  -  -  -  		;
   62 D1:AF5A C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AF5B D9 -  -  -  		exx 								; save HL'
   64 D1:AF5C E5 -  -  -  		push 	hl
   65 D1:AF5D D9 -  -  -  		exx 								
   66 D1:AF5E E5 -  -  -  		push 	hl 							; save HL
   67 D1:AF5F -  -  -  -  		;
   68 D1:AF5F DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AF61 -  -  -  -  		;
   70 D1:AF61 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AF61 -  -  -  -  		;
   72 D1:AF61 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AF62 CD 38 AF D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AF66 -  -  -  -  		;
   75 D1:AF66 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AF66 -  -  -  -  		;
   77 D1:AF66 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AF67 -  -  -  -  
   79 D1:AF67 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AF68 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AF69 D9 -  -  -  		exx
   82 D1:AF6A EB -  -  -  		ex 		de,hl
   83 D1:AF6B E1 -  -  -  		pop 	hl
   84 D1:AF6C D9 -  -  -  		exx
   85 D1:AF6D C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AF6E 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AF6F -  -  -  -  		;
   88 D1:AF6F -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AF6F -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AF6F -  -  -  -  		;
   91 D1:AF6F F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AF70 -  -  -  -  		;
   93 D1:AF70 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AF70 -  -  -  -  		;
   95 D1:AF70 D5 -  -  -  		push 	de
   96 D1:AF71 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AF72 E6 7F 21 00 
              00 00 6F 29 
              29 11 66 BA 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AF87 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AF88 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AF89 CD E5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AF8D -  -  -  -  		;
  102 D1:AF8D D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AF8E -  -  -  -  		;
  104 D1:AF8E 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AF90 -  -  -  -  
  106 D1:AF90 -  -  -  -  ; ***************************************************************************************
  107 D1:AF90 -  -  -  -  ;
  108 D1:AF90 -  -  -  -  ;									Changes and Updates
  109 D1:AF90 -  -  -  -  ;
  110 D1:AF90 -  -  -  -  ; ***************************************************************************************
  111 D1:AF90 -  -  -  -  ;
  112 D1:AF90 -  -  -  -  ;		Date			Notes
  113 D1:AF90 -  -  -  -  ;		==== 			=====
  114 D1:AF90 -  -  -  -  ;
  115 D1:AF90 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AF90 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AF90 -  -  -  -  ; ***************************************************************************************
    2 D1:AF90 -  -  -  -  ; ***************************************************************************************
    3 D1:AF90 -  -  -  -  ;
    4 D1:AF90 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AF90 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF90 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF90 -  -  -  -  ;		Reviewed :	No
    8 D1:AF90 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AF90 -  -  -  -  ;
   10 D1:AF90 -  -  -  -  ; ***************************************************************************************
   11 D1:AF90 -  -  -  -  ; ***************************************************************************************
   12 D1:AF90 -  -  -  -  
   13 D1:AF90 -  -  -  -  ; ***************************************************************************************
   14 D1:AF90 -  -  -  -  ;
   15 D1:AF90 -  -  -  -  ; 								Evaluate an integer term
   16 D1:AF90 -  -  -  -  ;
   17 D1:AF90 -  -  -  -  ; ***************************************************************************************
   18 D1:AF90 -  -  -  -  
   19 D1:AF90 -  -  -  -  EvaluateIntegerTerm:
   20 D1:AF90 CD 45 B0 D1 		call 	EvaluateTerm
   21 D1:AF94 CD E9 AF D1 		call 	DeReference
   22 D1:AF98 CB 41 -  -  		bit 	CIsString,c
   23 D1:AF9A C8 -  -  -  		ret 	z
   24 D1:AF9B C3 E1 AD D1 		jp 		TypeMismatch
   25 D1:AF9F -  -  -  -  
   26 D1:AF9F -  -  -  -  ; ***************************************************************************************
   27 D1:AF9F -  -  -  -  ;
   28 D1:AF9F -  -  -  -  ; 								Evaluate a string term
   29 D1:AF9F -  -  -  -  ;
   30 D1:AF9F -  -  -  -  ; ***************************************************************************************
   31 D1:AF9F -  -  -  -  
   32 D1:AF9F -  -  -  -  EvaluateStringTerm:
   33 D1:AF9F CD 45 B0 D1 		call 	EvaluateTerm
   34 D1:AFA3 CD E9 AF D1 		call 	DeReference
   35 D1:AFA7 CB 41 -  -  		bit 	CIsString,c
   36 D1:AFA9 C0 -  -  -  		ret 	nz
   37 D1:AFAA C3 E1 AD D1 		jp 		TypeMismatch
   38 D1:AFAE -  -  -  -  
   39 D1:AFAE -  -  -  -  ; ***************************************************************************************
   40 D1:AFAE -  -  -  -  ;
   41 D1:AFAE -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AFAE -  -  -  -  ;
   43 D1:AFAE -  -  -  -  ; ***************************************************************************************
   44 D1:AFAE -  -  -  -  
   45 D1:AFAE -  -  -  -  EvaluateValue:
   46 D1:AFAE CD 37 AF D1 		call 	EvaluateAtPrecedence0
   47 D1:AFB2 C3 E9 AF D1 		jp 		Dereference
   48 D1:AFB6 -  -  -  -  
   49 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   50 D1:AFB6 -  -  -  -  ;
   51 D1:AFB6 -  -  -  -  ; 									Evaluate a number
   52 D1:AFB6 -  -  -  -  ;
   53 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   54 D1:AFB6 -  -  -  -  
   55 D1:AFB6 -  -  -  -  EvaluateInteger:
   56 D1:AFB6 CD AE AF D1 		call 	EvaluateValue
   57 D1:AFBA CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AFBC C8 -  -  -  		ret 	z
   59 D1:AFBD C3 E1 AD D1 		jp 		TypeMismatch
   60 D1:AFC1 -  -  -  -  
   61 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   62 D1:AFC1 -  -  -  -  ;
   63 D1:AFC1 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AFC1 -  -  -  -  ;
   65 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   66 D1:AFC1 -  -  -  -  
   67 D1:AFC1 -  -  -  -  Evaluate8BitInteger:
   68 D1:AFC1 CD B6 AF D1 		call 	EvaluateInteger
   69 D1:AFC5 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AFC6 7C -  -  -  		ld 		a,h
   71 D1:AFC7 B5 -  -  -  		or 		l
   72 D1:AFC8 D9 -  -  -  		exx 	
   73 D1:AFC9 B4 -  -  -  		or 		h
   74 D1:AFCA C2 E7 AD D1 		jp 		nz,BadValue
   75 D1:AFCE 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AFCF C9 -  -  -  		ret
   77 D1:AFD0 -  -  -  -  		
   78 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   79 D1:AFD0 -  -  -  -  ;
   80 D1:AFD0 -  -  -  -  ; 									Evaluate a string
   81 D1:AFD0 -  -  -  -  ;
   82 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   83 D1:AFD0 -  -  -  -  
   84 D1:AFD0 -  -  -  -  EvaluateString:
   85 D1:AFD0 CD AE AF D1 		call 	EvaluateValue
   86 D1:AFD4 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AFD6 CA E1 AD D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AFDA C9 -  -  -  		ret
   89 D1:AFDB -  -  -  -  
   90 D1:AFDB -  -  -  -  ; ***************************************************************************************
   91 D1:AFDB -  -  -  -  ;
   92 D1:AFDB -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AFDB -  -  -  -  ;
   94 D1:AFDB -  -  -  -  ; ***************************************************************************************
   95 D1:AFDB -  -  -  -  
   96 D1:AFDB -  -  -  -  Return8BitConstant:
   97 D1:AFDB 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AFDF 6F -  -  -  		ld 		l,a
   99 D1:AFE0 -  -  -  -  Return16BitConstant:
  100 D1:AFE0 D9 -  -  -  		exx 								; clear HL'
  101 D1:AFE1 21 00 00 00 		ld 		hl,0
  102 D1:AFE5 D9 -  -  -  		exx
  103 D1:AFE6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AFE8 C9 -  -  -  		ret
  105 D1:AFE9 -  -  -  -  
  106 D1:AFE9 -  -  -  -  ; ***************************************************************************************
  107 D1:AFE9 -  -  -  -  ;
  108 D1:AFE9 -  -  -  -  ;									Changes and Updates
  109 D1:AFE9 -  -  -  -  ;
  110 D1:AFE9 -  -  -  -  ; ***************************************************************************************
  111 D1:AFE9 -  -  -  -  ;
  112 D1:AFE9 -  -  -  -  ;		Date			Notes
  113 D1:AFE9 -  -  -  -  ;		==== 			=====
  114 D1:AFE9 -  -  -  -  ;
  115 D1:AFE9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AFE9 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AFE9 -  -  -  -  ; ***************************************************************************************
    2 D1:AFE9 -  -  -  -  ; ***************************************************************************************
    3 D1:AFE9 -  -  -  -  ;
    4 D1:AFE9 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AFE9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFE9 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AFE9 -  -  -  -  ;		Reviewed :	No
    8 D1:AFE9 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AFE9 -  -  -  -  ;
   10 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   11 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   12 D1:AFE9 -  -  -  -  
   13 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   14 D1:AFE9 -  -  -  -  ;
   15 D1:AFE9 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AFE9 -  -  -  -  ;
   17 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   18 D1:AFE9 -  -  -  -  
   19 D1:AFE9 -  -  -  -  Dereference:
   20 D1:AFE9 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AFEB C8 -  -  -  		ret 	z
   22 D1:AFEC -  -  -  -  
   23 D1:AFEC CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AFEE -  -  -  -  		
   25 D1:AFEE CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AFF0 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AFF2 -  -  -  -  
   28 D1:AFF2 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AFF4 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AFF6 -  -  -  -  
   31 D1:AFF6 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AFF7 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AFF9 D9 -  -  -  		exx
   34 D1:AFFA E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AFFB 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AFFC 23 -  -  -  		inc  	hl
   37 D1:AFFD ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AFFF D9 -  -  -  		exx 								; fix back
   39 D1:B000 C9 -  -  -  		ret
   40 D1:B001 -  -  -  -  
   41 D1:B001 -  -  -  -  _DeRefByte:		
   42 D1:B001 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:B002 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:B006 6F -  -  -  		ld	 	l,a
   45 D1:B007 D9 -  -  -  		exx
   46 D1:B008 21 00 00 00 		ld 		hl,$0000
   47 D1:B00C D9 -  -  -  		exx
   48 D1:B00D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:B00F C9 -  -  -  		ret
   50 D1:B010 -  -  -  -  
   51 D1:B010 -  -  -  -  _DRInternal:
   52 D1:B010 3E 06 C3 83 
              AD D1 -  -  		ERR_DISABLED
   53 D1:B016 -  -  -  -  
   54 D1:B016 -  -  -  -  ; ***************************************************************************************
   55 D1:B016 -  -  -  -  ;
   56 D1:B016 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:B016 -  -  -  -  ;
   58 D1:B016 -  -  -  -  ; ***************************************************************************************
   59 D1:B016 -  -  -  -  
   60 D1:B016 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:B016 -  -  -  -  		#ifdef EZ80
   62 D1:B016 22 EB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:B01A D9 -  -  -  		exx
   64 D1:B01B 22 ED A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:B01F 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:B023 D9 -  -  -  		exx
   67 D1:B024 2A EB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:B028 -  -  -  -  		#endif
   69 D1:B028 C9 -  -  -  		ret
   70 D1:B029 -  -  -  -  
   71 D1:B029 -  -  -  -  ; ***************************************************************************************
   72 D1:B029 -  -  -  -  ;
   73 D1:B029 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:B029 -  -  -  -  ;
   75 D1:B029 -  -  -  -  ; ***************************************************************************************
   76 D1:B029 -  -  -  -  
   77 D1:B029 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:B029 -  -  -  -  		#ifdef EZ80
   79 D1:B029 22 EB A8 D1 		ld 		(AConvert),hl
   80 D1:B02D 21 00 00 00 		ld 		hl,$0000
   81 D1:B031 22 EE A8 D1 		ld 		(AConvert+3),hl
   82 D1:B035 D9 -  -  -  		exx
   83 D1:B036 2A ED A8 D1 		ld 		hl,(AConvert+2)
   84 D1:B03A D9 -  -  -  		exx
   85 D1:B03B AF -  -  -  		xor 	a
   86 D1:B03C 32 ED A8 D1 		ld 		(AConvert+2),a
   87 D1:B040 2A EB A8 D1 		ld 		hl,(AConvert)
   88 D1:B044 -  -  -  -  		#endif
   89 D1:B044 C9 -  -  -  		ret
   90 D1:B045 -  -  -  -  
   91 D1:B045 -  -  -  -  ; ***************************************************************************************
   92 D1:B045 -  -  -  -  ;
   93 D1:B045 -  -  -  -  ;									Changes and Updates
   94 D1:B045 -  -  -  -  ;
   95 D1:B045 -  -  -  -  ; ***************************************************************************************
   96 D1:B045 -  -  -  -  ;
   97 D1:B045 -  -  -  -  ;		Date			Notes
   98 D1:B045 -  -  -  -  ;		==== 			=====
   99 D1:B045 -  -  -  -  ;
  100 D1:B045 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:B045 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:B045 -  -  -  -  ; ***************************************************************************************
    2 D1:B045 -  -  -  -  ; ***************************************************************************************
    3 D1:B045 -  -  -  -  ;
    4 D1:B045 -  -  -  -  ;		Name : 		term.asm
    5 D1:B045 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B045 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B045 -  -  -  -  ;		Reviewed :	No
    8 D1:B045 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:B045 -  -  -  -  ;
   10 D1:B045 -  -  -  -  ; ***************************************************************************************
   11 D1:B045 -  -  -  -  ; ***************************************************************************************
   12 D1:B045 -  -  -  -  
   13 D1:B045 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:B045             		add_hlhl_16
   15 D1:B045             		exx
   16 D1:B045             		adc_hlhl_16
   17 D1:B045             		exx
   18 D1:B045             #endmacro
   19 D1:B045 -  -  -  -  
   20 D1:B045 -  -  -  -  ; ***************************************************************************************
   21 D1:B045 -  -  -  -  ;
   22 D1:B045 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:B045 -  -  -  -  ;
   24 D1:B045 -  -  -  -  ; ***************************************************************************************
   25 D1:B045 -  -  -  -  ;
   26 D1:B045 -  -  -  -  ; 		Terms can be:
   27 D1:B045 -  -  -  -  ;
   28 D1:B045 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:B045 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:B045 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:B045 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:B045 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:B045 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:B045 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:B045 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:B045 -  -  -  -  ; 														reference of some sort.
   37 D1:B045 -  -  -  -  ;
   38 D1:B045 -  -  -  -  ; ***************************************************************************************
   39 D1:B045 -  -  -  -  
   40 D1:B045 -  -  -  -  EvaluateTerm:		
   41 D1:B045 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:B047 D9 -  -  -  		exx
   43 D1:B048 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:B04C D9 -  -  -  		exx
   45 D1:B04D 21 00 00 00 		ld 		hl,$0000		
   46 D1:B051 -  -  -  -  		;
   47 D1:B051 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:B054 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:B056 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:B058 DA 10 B1 D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:B05C CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:B05E C2 B4 B0 D1 		jp 		nz,_ETFoundKeyword 
   53 D1:B062 -  -  -  -  		;
   54 D1:B062 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:B062 -  -  -  -  		;
   56 D1:B062 -  -  -  -  _ETIntegerConstant:
   57 D1:B062 -  -  -  -  		;
   58 D1:B062 -  -  -  -  _ETIntegerLoop:		
   59 D1:B062 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:B065 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:B067 B5 -  -  -  		or 		l 							; or into L
   62 D1:B068 6F -  -  -  		ld 		l,a
   63 D1:B069 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:B06B DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:B06E C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:B070 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:B072 D8 -  -  -  		ret 	c
   68 D1:B073 -  -  -  -  
   69 D1:B073 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:B07A 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:B081 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:B088 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:B08F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:B096 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:B09D -  -  -  -  
   76 D1:B09D 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:B09F -  -  -  -  		;
   78 D1:B09F -  -  -  -  		; 		Found the $3F string marker.
   79 D1:B09F -  -  -  -  		;
   80 D1:B09F -  -  -  -  _ETStringMarker:		
   81 D1:B09F DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:B0A1 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:B0A3 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:B0A5 E1 -  -  -  		pop 	hl
   85 D1:B0A6 11 00 00 00 		ld 		de,$0000
   86 D1:B0AA DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:B0AD DD 19 -  -  		add 	ix,de
   88 D1:B0AF DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:B0B1 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:B0B3 C9 -  -  -  		ret
   91 D1:B0B4 -  -  -  -  		;
   92 D1:B0B4 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:B0B4 -  -  -  -  		;
   94 D1:B0B4 -  -  -  -  _ETFoundKeyword:
   95 D1:B0B4 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:B0B6 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:B0B8 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:B0BA FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:B0BC 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:B0BE -  -  -  -  		;
  101 D1:B0BE -  -  -  -  		;		Unary group 0
  102 D1:B0BE -  -  -  -  		;
  103 D1:B0BE E6 7F 21 00 
              00 00 6F 29 
              29 11 66 BA 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:B0D3 C3 E5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:B0D7 -  -  -  -  
  106 D1:B0D7 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:B0D7 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:B0D9 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:B0DB -  -  -  -  		;
  110 D1:B0DB -  -  -  -  		; 		- term
  111 D1:B0DB -  -  -  -  		;
  112 D1:B0DB CD 90 AF D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:B0DF CD 26 AF D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:B0E3 C9 -  -  -  		ret
  115 D1:B0E4 -  -  -  -  		;
  116 D1:B0E4 -  -  -  -  		;		! ? indirection check
  117 D1:B0E4 -  -  -  -  		;
  118 D1:B0E4 -  -  -  -  _ETCheckIndirection:	
  119 D1:B0E4 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:B0E6 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:B0E8 FE 83 -  -  		cp 		KWD_PLING
  122 D1:B0EA C2 ED AD D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:B0EE -  -  -  -  		;
  124 D1:B0EE -  -  -  -  		; 		! ? indirection
  125 D1:B0EE -  -  -  -  		;
  126 D1:B0EE -  -  -  -  _ETIndirection:
  127 D1:B0EE F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:B0EF CD 45 B0 D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:B0F3 CD E9 AF D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:B0F7 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:B0F9 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:B0FB CD 16 B0 D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:B0FF F1 -  -  -  		pop 	af 							; get type back
  134 D1:B100 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:B102 CB F9 -  -  		set 	CIsReference,c
  136 D1:B104 FE 83 -  -  		cp 		KWD_PLING
  137 D1:B106 C8 -  -  -  		ret 	z
  138 D1:B107 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:B109 C9 -  -  -  		ret
  140 D1:B10A -  -  -  -  _ETStringIndirect:
  141 D1:B10A 3E 02 C3 83 
              AD D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:B110 -  -  -  -  		;
  143 D1:B110 -  -  -  -  		; 		Found an identifier.
  144 D1:B110 -  -  -  -  		;
  145 D1:B110 -  -  -  -  _ETVariable:
  146 D1:B110 CD 3C B7 D1 		call 	FindVariable 				; find the variable.
  147 D1:B114 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:B115 3E 1A C3 83 
              AD D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:B11B -  -  -  -  		
  150 D1:B11B -  -  -  -  ; ***************************************************************************************
  151 D1:B11B -  -  -  -  ;
  152 D1:B11B -  -  -  -  ;									Changes and Updates
  153 D1:B11B -  -  -  -  ;
  154 D1:B11B -  -  -  -  ; ***************************************************************************************
  155 D1:B11B -  -  -  -  ;
  156 D1:B11B -  -  -  -  ;		Date			Notes
  157 D1:B11B -  -  -  -  ;		==== 			=====
  158 D1:B11B -  -  -  -  ;
  159 D1:B11B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:B11B -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:B11B -  -  -  -  ; ***************************************************************************************
    2 D1:B11B -  -  -  -  ; ***************************************************************************************
    3 D1:B11B -  -  -  -  ;
    4 D1:B11B -  -  -  -  ;		Name : 		abs.asm
    5 D1:B11B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B11B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B11B -  -  -  -  ;		Reviewed :	No
    8 D1:B11B -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:B11B -  -  -  -  ;
   10 D1:B11B -  -  -  -  ; ***************************************************************************************
   11 D1:B11B -  -  -  -  ; ***************************************************************************************
   12 D1:B11B -  -  -  -  
   13 D1:B11B -  -  -  -  ; ***************************************************************************************
   14 D1:B11B -  -  -  -  ;
   15 D1:B11B -  -  -  -  ;								abs( unary function
   16 D1:B11B -  -  -  -  ;
   17 D1:B11B -  -  -  -  ; ***************************************************************************************
   18 D1:B11B -  -  -  -  
   19 D1:B11B -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:B11B CD 90 AF D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:B11F D9 -  -  -  		exx 								; test MSB
   22 D1:B120 CB 7C -  -  		bit 	7,h
   23 D1:B122 D9 -  -  -  		exx
   24 D1:B123 C4 26 AF D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:B127 C9 -  -  -  		ret
   26 D1:B128 -  -  -  -  
   27 D1:B128 -  -  -  -  ; ***************************************************************************************
   28 D1:B128 -  -  -  -  ;
   29 D1:B128 -  -  -  -  ;									Changes and Updates
   30 D1:B128 -  -  -  -  ;
   31 D1:B128 -  -  -  -  ; ***************************************************************************************
   32 D1:B128 -  -  -  -  ;
   33 D1:B128 -  -  -  -  ;		Date			Notes
   34 D1:B128 -  -  -  -  ;		==== 			=====
   35 D1:B128 -  -  -  -  ;
   36 D1:B128 -  -  -  -  ; ***************************************************************************************
   37 D1:B128 -  -  -  -  		
Listing for file "_build.asm"
   39 D1:B128 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:B128 -  -  -  -  ; ***************************************************************************************
    2 D1:B128 -  -  -  -  ; ***************************************************************************************
    3 D1:B128 -  -  -  -  ;
    4 D1:B128 -  -  -  -  ;		Name : 		asc.asm
    5 D1:B128 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B128 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B128 -  -  -  -  ;		Reviewed :	No
    8 D1:B128 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:B128 -  -  -  -  ;
   10 D1:B128 -  -  -  -  ; ***************************************************************************************
   11 D1:B128 -  -  -  -  ; ***************************************************************************************
   12 D1:B128 -  -  -  -  
   13 D1:B128 -  -  -  -  ; ***************************************************************************************
   14 D1:B128 -  -  -  -  ;
   15 D1:B128 -  -  -  -  ;								Asc unary function
   16 D1:B128 -  -  -  -  ;
   17 D1:B128 -  -  -  -  ; ***************************************************************************************
   18 D1:B128 -  -  -  -  
   19 D1:B128 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:B128 CD 9F AF D1 		call	EvaluateStringTerm			; Get string
   21 D1:B12C 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:B12D C3 DB AF D1 		jp 		Return8BitConstant
   23 D1:B131 -  -  -  -  
   24 D1:B131 -  -  -  -  ; ***************************************************************************************
   25 D1:B131 -  -  -  -  ;
   26 D1:B131 -  -  -  -  ;									Changes and Updates
   27 D1:B131 -  -  -  -  ;
   28 D1:B131 -  -  -  -  ; ***************************************************************************************
   29 D1:B131 -  -  -  -  ;
   30 D1:B131 -  -  -  -  ;		Date			Notes
   31 D1:B131 -  -  -  -  ;		==== 			=====
   32 D1:B131 -  -  -  -  ;
   33 D1:B131 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:B131 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:B131 -  -  -  -  ; ***************************************************************************************
    2 D1:B131 -  -  -  -  ; ***************************************************************************************
    3 D1:B131 -  -  -  -  ;
    4 D1:B131 -  -  -  -  ;		Name : 		chr.asm
    5 D1:B131 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B131 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B131 -  -  -  -  ;		Reviewed :	No
    8 D1:B131 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:B131 -  -  -  -  ;
   10 D1:B131 -  -  -  -  ; ***************************************************************************************
   11 D1:B131 -  -  -  -  ; ***************************************************************************************
   12 D1:B131 -  -  -  -  
   13 D1:B131 -  -  -  -  ; ***************************************************************************************
   14 D1:B131 -  -  -  -  ;
   15 D1:B131 -  -  -  -  ;								Chr$() unary function
   16 D1:B131 -  -  -  -  ;
   17 D1:B131 -  -  -  -  ; ***************************************************************************************
   18 D1:B131 -  -  -  -  
   19 D1:B131 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:B131 CD 5B AD D1 		call 	CheckDollar
   21 D1:B135 CD 90 AF D1 		call 	EvaluateIntegerTerm
   22 D1:B139 7D -  -  -  		ld 		a,l 						; get character
   23 D1:B13A 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:B13C 21 26 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:B140 36 0D -  -  		ld 		(hl),13
   26 D1:B142 2B -  -  -  		dec 	hl
   27 D1:B143 77 -  -  -  		ld 		(hl),a
   28 D1:B144 C9 -  -  -  		ret
   29 D1:B145 -  -  -  -  
   30 D1:B145 -  -  -  -  ; ***************************************************************************************
   31 D1:B145 -  -  -  -  ;
   32 D1:B145 -  -  -  -  ;									Changes and Updates
   33 D1:B145 -  -  -  -  ;
   34 D1:B145 -  -  -  -  ; ***************************************************************************************
   35 D1:B145 -  -  -  -  ;
   36 D1:B145 -  -  -  -  ;		Date			Notes
   37 D1:B145 -  -  -  -  ;		==== 			=====
   38 D1:B145 -  -  -  -  ;
   39 D1:B145 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:B145 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:B145 -  -  -  -  ; ***************************************************************************************
    2 D1:B145 -  -  -  -  ; ***************************************************************************************
    3 D1:B145 -  -  -  -  ;
    4 D1:B145 -  -  -  -  ;		Name : 		len.asm
    5 D1:B145 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B145 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B145 -  -  -  -  ;		Reviewed :	None
    8 D1:B145 -  -  -  -  ;		Purpose :	String Length
    9 D1:B145 -  -  -  -  ;
   10 D1:B145 -  -  -  -  ; ***************************************************************************************
   11 D1:B145 -  -  -  -  ; ***************************************************************************************
   12 D1:B145 -  -  -  -  
   13 D1:B145 -  -  -  -  ; ***************************************************************************************
   14 D1:B145 -  -  -  -  ;
   15 D1:B145 -  -  -  -  ;								Len unary function
   16 D1:B145 -  -  -  -  ;
   17 D1:B145 -  -  -  -  ; ***************************************************************************************
   18 D1:B145 -  -  -  -  
   19 D1:B145 -  -  -  -  Unary_Len:	;; [len]
   20 D1:B145 CD 9F AF D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:B149 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:B14A CD 8E AE D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:B14E -  -  -  -  _ULCount:
   24 D1:B14E 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:B14F FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:B151 D8 -  -  -  		ret 	c
   27 D1:B152 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:B153 13 -  -  -  		inc 	de
   29 D1:B154 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:B156 -  -  -  -  
   31 D1:B156 -  -  -  -  ; ***************************************************************************************
   32 D1:B156 -  -  -  -  ;
   33 D1:B156 -  -  -  -  ;									Changes and Updates
   34 D1:B156 -  -  -  -  ;
   35 D1:B156 -  -  -  -  ; ***************************************************************************************
   36 D1:B156 -  -  -  -  ;
   37 D1:B156 -  -  -  -  ;		Date			Notes
   38 D1:B156 -  -  -  -  ;		==== 			=====
   39 D1:B156 -  -  -  -  ;
   40 D1:B156 -  -  -  -  ; ***************************************************************************************
   41 D1:B156 -  -  -  -  		
Listing for file "_build.asm"
   42 D1:B156 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:B156 -  -  -  -  ; ***************************************************************************************
    2 D1:B156 -  -  -  -  ; ***************************************************************************************
    3 D1:B156 -  -  -  -  ;
    4 D1:B156 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:B156 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B156 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B156 -  -  -  -  ;		Reviewed :	No
    8 D1:B156 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:B156 -  -  -  -  ;
   10 D1:B156 -  -  -  -  ; ***************************************************************************************
   11 D1:B156 -  -  -  -  ; ***************************************************************************************
   12 D1:B156 -  -  -  -  
   13 D1:B156 -  -  -  -  ; ***************************************************************************************
   14 D1:B156 -  -  -  -  ;
   15 D1:B156 -  -  -  -  ;								Str$() unary function
   16 D1:B156 -  -  -  -  ;
   17 D1:B156 -  -  -  -  ; ***************************************************************************************
   18 D1:B156 -  -  -  -  
   19 D1:B156 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:B156 CD 90 AF D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:B15A CD 16 B0 D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:B15E 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:B160 C9 -  -  -  		ret
   24 D1:B161 -  -  -  -  
   25 D1:B161 -  -  -  -  ; ***************************************************************************************
   26 D1:B161 -  -  -  -  ;
   27 D1:B161 -  -  -  -  ;									Changes and Updates
   28 D1:B161 -  -  -  -  ;
   29 D1:B161 -  -  -  -  ; ***************************************************************************************
   30 D1:B161 -  -  -  -  ;
   31 D1:B161 -  -  -  -  ;		Date			Notes
   32 D1:B161 -  -  -  -  ;		==== 			=====
   33 D1:B161 -  -  -  -  ;
   34 D1:B161 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B161 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:B161 -  -  -  -  ; ***************************************************************************************
    2 D1:B161 -  -  -  -  ; ***************************************************************************************
    3 D1:B161 -  -  -  -  ;
    4 D1:B161 -  -  -  -  ;		Name : 		not.asm
    5 D1:B161 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B161 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:B161 -  -  -  -  ;		Reviewed :	No
    8 D1:B161 -  -  -  -  ;		Purpose :	Logical not
    9 D1:B161 -  -  -  -  ;
   10 D1:B161 -  -  -  -  ; ***************************************************************************************
   11 D1:B161 -  -  -  -  ; ***************************************************************************************
   12 D1:B161 -  -  -  -  
   13 D1:B161 -  -  -  -  ; ***************************************************************************************
   14 D1:B161 -  -  -  -  ;
   15 D1:B161 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:B161 -  -  -  -  ;
   17 D1:B161 -  -  -  -  ; ***************************************************************************************
   18 D1:B161 -  -  -  -  
   19 D1:B161 -  -  -  -  Unary_Not:		;; [not]
   20 D1:B161 CD 90 AF D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:B165 CD 6E B1 D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:B169 CD 6E B1 D1 		call 	__UNSwap		
   23 D1:B16D C9 -  -  -  		ret
   24 D1:B16E -  -  -  -  
   25 D1:B16E -  -  -  -  __UNSwap:
   26 D1:B16E 7C -  -  -  		ld 		a,h
   27 D1:B16F 2F -  -  -  		cpl
   28 D1:B170 67 -  -  -  		ld 		h,a
   29 D1:B171 7D -  -  -  		ld 		a,l
   30 D1:B172 2F -  -  -  		cpl 	
   31 D1:B173 6F -  -  -  		ld 		l,a
   32 D1:B174 D9 -  -  -  		exx
   33 D1:B175 C9 -  -  -  		ret
   34 D1:B176 -  -  -  -  
   35 D1:B176 -  -  -  -  ; ***************************************************************************************
   36 D1:B176 -  -  -  -  ;
   37 D1:B176 -  -  -  -  ;									Changes and Updates
   38 D1:B176 -  -  -  -  ;
   39 D1:B176 -  -  -  -  ; ***************************************************************************************
   40 D1:B176 -  -  -  -  ;
   41 D1:B176 -  -  -  -  ;		Date			Notes
   42 D1:B176 -  -  -  -  ;		==== 			=====
   43 D1:B176 -  -  -  -  ;
   44 D1:B176 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B176 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:B176 -  -  -  -  ; ***************************************************************************************
    2 D1:B176 -  -  -  -  ; ***************************************************************************************
    3 D1:B176 -  -  -  -  ;
    4 D1:B176 -  -  -  -  ;		Name : 		page.asm
    5 D1:B176 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B176 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B176 -  -  -  -  ;		Reviewed :	No
    8 D1:B176 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B176 -  -  -  -  ;
   10 D1:B176 -  -  -  -  ; ***************************************************************************************
   11 D1:B176 -  -  -  -  ; ***************************************************************************************
   12 D1:B176 -  -  -  -  
   13 D1:B176 -  -  -  -  ; ***************************************************************************************
   14 D1:B176 -  -  -  -  ;
   15 D1:B176 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B176 -  -  -  -  ;
   17 D1:B176 -  -  -  -  ; ***************************************************************************************
   18 D1:B176 -  -  -  -  
   19 D1:B176 -  -  -  -  Unary_Page:	;; [page]
   20 D1:B176 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:B17A D9 -  -  -  			exx
   22 D1:B17B 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:B17F D9 -  -  -  			exx
   24 D1:B180 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B182 C9 -  -  -  			ret
   26 D1:B183 -  -  -  -  
   27 D1:B183 -  -  -  -  ; ***************************************************************************************
   28 D1:B183 -  -  -  -  ;
   29 D1:B183 -  -  -  -  ;									Changes and Updates
   30 D1:B183 -  -  -  -  ;
   31 D1:B183 -  -  -  -  ; ***************************************************************************************
   32 D1:B183 -  -  -  -  ;
   33 D1:B183 -  -  -  -  ;		Date			Notes
   34 D1:B183 -  -  -  -  ;		==== 			=====
   35 D1:B183 -  -  -  -  ;
   36 D1:B183 -  -  -  -  ; ***************************************************************************************
   37 D1:B183 -  -  -  -  			
Listing for file "_build.asm"
   45 D1:B183 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:B183 -  -  -  -  ; ***************************************************************************************
    2 D1:B183 -  -  -  -  ; ***************************************************************************************
    3 D1:B183 -  -  -  -  ;
    4 D1:B183 -  -  -  -  ;		Name : 		random.asm
    5 D1:B183 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B183 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B183 -  -  -  -  ;		Reviewed :	No
    8 D1:B183 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:B183 -  -  -  -  ;
   10 D1:B183 -  -  -  -  ; ***************************************************************************************
   11 D1:B183 -  -  -  -  ; ***************************************************************************************
   12 D1:B183 -  -  -  -  
   13 D1:B183 -  -  -  -  ; ***************************************************************************************
   14 D1:B183 -  -  -  -  ;
   15 D1:B183 -  -  -  -  ;								Random unary function
   16 D1:B183 -  -  -  -  ;
   17 D1:B183 -  -  -  -  ; ***************************************************************************************
   18 D1:B183 -  -  -  -  
   19 D1:B183 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:B183 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:B18B CD 90 AF D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:B18F D9 -  -  -  		exx 								; is it -ve
   23 D1:B190 CB 7C -  -  		bit 	7,h
   24 D1:B192 D9 -  -  -  		exx
   25 D1:B193 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:B195 22 F1 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:B199 D9 -  -  -  		exx
   28 D1:B19A 22 F5 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:B19E D9 -  -  -  		exx
   30 D1:B19F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:B1A1 C9 -  -  -  		ret
   32 D1:B1A2 -  -  -  -  _URDontSeed:		
   33 D1:B1A2 -  -  -  -  
   34 D1:B1A2 CD 15 BD D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:B1A6 28 1C -  -  		jr 		z,_URFail
   36 D1:B1A8 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:B1A9 D9 -  -  -  		exx
   38 D1:B1AA E5 -  -  -  		push 	hl
   39 D1:B1AB D9 -  -  -  		exx
   40 D1:B1AC -  -  -  -  		;
   41 D1:B1AC CD D5 B1 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:B1B0 D9 -  -  -  		exx
   43 D1:B1B1 CD D5 B1 D1 		call 	URandomHL
   44 D1:B1B5 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:B1B7 D9 -  -  -  		exx
   46 D1:B1B8 -  -  -  -  		;
   47 D1:B1B8 D9 -  -  -  		exx 								; restore range.
   48 D1:B1B9 D1 -  -  -  		pop 	de
   49 D1:B1BA D9 -  -  -  		exx
   50 D1:B1BB D1 -  -  -  		pop 	de
   51 D1:B1BC -  -  -  -  		;
   52 D1:B1BC CD A6 BB D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B1C0 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B1C1 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B1C3 C9 -  -  -  		ret
   56 D1:B1C4 -  -  -  -  _URFail:
   57 D1:B1C4 3E 03 C3 83 
              AD D1 -  -  		ERR_BADVALUE
   58 D1:B1CA -  -  -  -  ; ***************************************************************************************
   59 D1:B1CA -  -  -  -  ;
   60 D1:B1CA -  -  -  -  ; 									Push RNG off zero
   61 D1:B1CA -  -  -  -  ;
   62 D1:B1CA -  -  -  -  ; ***************************************************************************************
   63 D1:B1CA -  -  -  -  
   64 D1:B1CA -  -  -  -  UnaryRandomInitialise:
   65 D1:B1CA 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B1CC -  -  -  -  _URILoop:
   67 D1:B1CC C5 -  -  -  		push 	bc
   68 D1:B1CD CD D5 B1 D1 		call 	URandomHL
   69 D1:B1D1 C1 -  -  -  		pop 	bc
   70 D1:B1D2 10 F8 -  -  		djnz 	_URILoop
   71 D1:B1D4 C9 -  -  -  		ret
   72 D1:B1D5 -  -  -  -  
   73 D1:B1D5 -  -  -  -  ; ***************************************************************************************
   74 D1:B1D5 -  -  -  -  ;
   75 D1:B1D5 -  -  -  -  ;							16 bit random number generator
   76 D1:B1D5 -  -  -  -  ;
   77 D1:B1D5 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B1D5 -  -  -  -  ;		Actual author unspecified.
   79 D1:B1D5 -  -  -  -  ;
   80 D1:B1D5 -  -  -  -  ; ***************************************************************************************
   81 D1:B1D5 -  -  -  -  
   82 D1:B1D5 -  -  -  -  URandomHL:
   83 D1:B1D5 2A F1 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B1D9 ED 5B F5 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B1DE 44 -  -  -  	    ld 		b,h
   86 D1:B1DF 4D -  -  -  	    ld 		c,l
   87 D1:B1E0 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B1E5 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B1EA 2C -  -  -  	    inc 	l
   90 D1:B1EB 09 -  -  -  	    add 	hl,bc
   91 D1:B1EC 22 F1 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B1F0 2A F5 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B1F4 ED 5A -  -  	    adc 	hl,de
   94 D1:B1F6 22 F5 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B1FA EB -  -  -  	    ex 		de,hl
   96 D1:B1FB 2A F9 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B1FF ED 4B FD A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B204 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B209 ED 43 FD A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B20E 9F -  -  -  	    sbc 	a,a
  101 D1:B20F E6 C5 -  -  	    and 	%11000101
  102 D1:B211 AD -  -  -  	    xor 	l
  103 D1:B212 6F -  -  -  	    ld 		l,a
  104 D1:B213 22 F9 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B217 EB -  -  -  	    ex 		de,hl
  106 D1:B218 09 -  -  -  	    add 	hl,bc
  107 D1:B219 C9 -  -  -  	    ret		
  108 D1:B21A -  -  -  -  
  109 D1:B21A -  -  -  -  ; ***************************************************************************************
  110 D1:B21A -  -  -  -  ;
  111 D1:B21A -  -  -  -  ;									Changes and Updates
  112 D1:B21A -  -  -  -  ;
  113 D1:B21A -  -  -  -  ; ***************************************************************************************
  114 D1:B21A -  -  -  -  ;
  115 D1:B21A -  -  -  -  ;		Date			Notes
  116 D1:B21A -  -  -  -  ;		==== 			=====
  117 D1:B21A -  -  -  -  ;
  118 D1:B21A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:B21A -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B21A -  -  -  -  ; ***************************************************************************************
    2 D1:B21A -  -  -  -  ; ***************************************************************************************
    3 D1:B21A -  -  -  -  ;
    4 D1:B21A -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B21A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B21A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B21A -  -  -  -  ;		Reviewed :	No
    8 D1:B21A -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B21A -  -  -  -  ;
   10 D1:B21A -  -  -  -  ; ***************************************************************************************
   11 D1:B21A -  -  -  -  ; ***************************************************************************************
   12 D1:B21A -  -  -  -  
   13 D1:B21A -  -  -  -  ; ***************************************************************************************
   14 D1:B21A -  -  -  -  ;
   15 D1:B21A -  -  -  -  ;								sgn unary function
   16 D1:B21A -  -  -  -  ;
   17 D1:B21A -  -  -  -  ; ***************************************************************************************
   18 D1:B21A -  -  -  -  
   19 D1:B21A -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B21A CD 90 AF D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B21E CD 15 BD D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B222 CA 8E AE D1 		jp 		z,UnaryInt32False
   23 D1:B226 D9 -  -  -  		exx
   24 D1:B227 CB 7C -  -  		bit 	7,h
   25 D1:B229 D9 -  -  -  		exx
   26 D1:B22A C2 8A AE D1 		jp 		nz,UnaryInt32True
   27 D1:B22E 3E 01 -  -  		ld 		a,1
   28 D1:B230 C3 DB AF D1 		jp 		Return8BitConstant
   29 D1:B234 -  -  -  -  
   30 D1:B234 -  -  -  -  ; ***************************************************************************************
   31 D1:B234 -  -  -  -  ;
   32 D1:B234 -  -  -  -  ;									Changes and Updates
   33 D1:B234 -  -  -  -  ;
   34 D1:B234 -  -  -  -  ; ***************************************************************************************
   35 D1:B234 -  -  -  -  ;
   36 D1:B234 -  -  -  -  ;		Date			Notes
   37 D1:B234 -  -  -  -  ;		==== 			=====
   38 D1:B234 -  -  -  -  ;
   39 D1:B234 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:B234 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B234 -  -  -  -  ; ***************************************************************************************
    2 D1:B234 -  -  -  -  ; ***************************************************************************************
    3 D1:B234 -  -  -  -  ;
    4 D1:B234 -  -  -  -  ;		Name : 		simple.asm
    5 D1:B234 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B234 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B234 -  -  -  -  ;		Reviewed :	No
    8 D1:B234 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B234 -  -  -  -  ;
   10 D1:B234 -  -  -  -  ; ***************************************************************************************
   11 D1:B234 -  -  -  -  ; ***************************************************************************************
   12 D1:B234 -  -  -  -  
   13 D1:B234 -  -  -  -  ; ***************************************************************************************
   14 D1:B234 -  -  -  -  ;
   15 D1:B234 -  -  -  -  ;								( unary function (think about it)
   16 D1:B234 -  -  -  -  ;
   17 D1:B234 -  -  -  -  ; ***************************************************************************************
   18 D1:B234 -  -  -  -  
   19 D1:B234 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B234 CD 37 AF D1 		call 	EvaluateAtPrecedence0
   21 D1:B238 C3 4D AD D1 		jp  	CheckRightBracket
   22 D1:B23C -  -  -  -  
   23 D1:B23C -  -  -  -  ; ***************************************************************************************
   24 D1:B23C -  -  -  -  ;
   25 D1:B23C -  -  -  -  ;									Handle &x
   26 D1:B23C -  -  -  -  ;
   27 D1:B23C -  -  -  -  ; ***************************************************************************************
   28 D1:B23C -  -  -  -  
   29 D1:B23C -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B23C DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B23F E6 C0 -  -  		and 		$C0
   32 D1:B241 FE 40 -  -  		cp 			$40
   33 D1:B243 C2 ED AD D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B247 C3 45 B0 D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B24B -  -  -  -  
   36 D1:B24B -  -  -  -  ; ***************************************************************************************
   37 D1:B24B -  -  -  -  ;
   38 D1:B24B -  -  -  -  ;									Changes and Updates
   39 D1:B24B -  -  -  -  ;
   40 D1:B24B -  -  -  -  ; ***************************************************************************************
   41 D1:B24B -  -  -  -  ;
   42 D1:B24B -  -  -  -  ;		Date			Notes
   43 D1:B24B -  -  -  -  ;		==== 			=====
   44 D1:B24B -  -  -  -  ;
   45 D1:B24B -  -  -  -  ; ***************************************************************************************
   46 D1:B24B -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B24B -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B24B -  -  -  -  ; ***************************************************************************************
    2 D1:B24B -  -  -  -  ; ***************************************************************************************
    3 D1:B24B -  -  -  -  ;
    4 D1:B24B -  -  -  -  ;		Name : 		str.asm
    5 D1:B24B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B24B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B24B -  -  -  -  ;		Reviewed :	No
    8 D1:B24B -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B24B -  -  -  -  ;
   10 D1:B24B -  -  -  -  ; ***************************************************************************************
   11 D1:B24B -  -  -  -  ; ***************************************************************************************
   12 D1:B24B -  -  -  -  
   13 D1:B24B -  -  -  -  ; ***************************************************************************************
   14 D1:B24B -  -  -  -  ;
   15 D1:B24B -  -  -  -  ;								Str$() unary function
   16 D1:B24B -  -  -  -  ;
   17 D1:B24B -  -  -  -  ; ***************************************************************************************
   18 D1:B24B -  -  -  -  
   19 D1:B24B -  -  -  -  Unary_Str:	;; [str]
   20 D1:B24B CD 5B AD D1 		call 	CheckDollar
   21 D1:B24F DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B252 EE AC -  -  		xor		KWD_TILDE
   23 D1:B254 F5 -  -  -  		push 	af
   24 D1:B255 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B257 DD 23 -  -  		inc 	ix
   26 D1:B259 -  -  -  -  _USNotHex:		
   27 D1:B259 CD 90 AF D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B25D 01 15 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B261 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B262 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B264 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B266 3E 10 -  -  		ld 		a,16
   33 D1:B268 -  -  -  -  _USNotHex2:		
   34 D1:B268 CD 5D BD D1 		call 	Int32ToString 				
   35 D1:B26C 21 15 A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B270 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B272 C9 -  -  -  		ret
   38 D1:B273 -  -  -  -  
   39 D1:B273 -  -  -  -  ; ***************************************************************************************
   40 D1:B273 -  -  -  -  ;
   41 D1:B273 -  -  -  -  ;									Changes and Updates
   42 D1:B273 -  -  -  -  ;
   43 D1:B273 -  -  -  -  ; ***************************************************************************************
   44 D1:B273 -  -  -  -  ;
   45 D1:B273 -  -  -  -  ;		Date			Notes
   46 D1:B273 -  -  -  -  ;		==== 			=====
   47 D1:B273 -  -  -  -  ;
   48 D1:B273 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B273 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B273 -  -  -  -  ; ***************************************************************************************
    2 D1:B273 -  -  -  -  ; ***************************************************************************************
    3 D1:B273 -  -  -  -  ;
    4 D1:B273 -  -  -  -  ;		Name : 		time.asm
    5 D1:B273 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B273 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B273 -  -  -  -  ;		Reviewed :	No
    8 D1:B273 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B273 -  -  -  -  ;
   10 D1:B273 -  -  -  -  ; ***************************************************************************************
   11 D1:B273 -  -  -  -  ; ***************************************************************************************
   12 D1:B273 -  -  -  -  
   13 D1:B273 -  -  -  -  ; ***************************************************************************************
   14 D1:B273 -  -  -  -  ;
   15 D1:B273 -  -  -  -  ;							Get system time in ms
   16 D1:B273 -  -  -  -  ;
   17 D1:B273 -  -  -  -  ; ***************************************************************************************
   18 D1:B273 -  -  -  -  
   19 D1:B273 -  -  -  -  Unary_Time:	;; [time]
   20 D1:B273 CD 20 BE D1 			call 	SYSGetTimer
   21 D1:B277 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B279 C9 -  -  -  			ret
   23 D1:B27A -  -  -  -  
   24 D1:B27A -  -  -  -  ; ***************************************************************************************
   25 D1:B27A -  -  -  -  ;
   26 D1:B27A -  -  -  -  ;									Changes and Updates
   27 D1:B27A -  -  -  -  ;
   28 D1:B27A -  -  -  -  ; ***************************************************************************************
   29 D1:B27A -  -  -  -  ;
   30 D1:B27A -  -  -  -  ;		Date			Notes
   31 D1:B27A -  -  -  -  ;		==== 			=====
   32 D1:B27A -  -  -  -  ;
   33 D1:B27A -  -  -  -  ; ***************************************************************************************
   34 D1:B27A -  -  -  -  			
Listing for file "_build.asm"
   50 D1:B27A -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B27A -  -  -  -  ; ***************************************************************************************
    2 D1:B27A -  -  -  -  ; ***************************************************************************************
    3 D1:B27A -  -  -  -  ;
    4 D1:B27A -  -  -  -  ;		Name : 		top.asm
    5 D1:B27A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B27A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B27A -  -  -  -  ;		Reviewed :	No
    8 D1:B27A -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B27A -  -  -  -  ;
   10 D1:B27A -  -  -  -  ; ***************************************************************************************
   11 D1:B27A -  -  -  -  ; ***************************************************************************************
   12 D1:B27A -  -  -  -  
   13 D1:B27A -  -  -  -  ; ***************************************************************************************
   14 D1:B27A -  -  -  -  ;
   15 D1:B27A -  -  -  -  ;							page unary function (no bracket)
   16 D1:B27A -  -  -  -  ;
   17 D1:B27A -  -  -  -  ; ***************************************************************************************
   18 D1:B27A -  -  -  -  
   19 D1:B27A -  -  -  -  Unary_Top:	;; [top]
   20 D1:B27A 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B27E D9 -  -  -  			exx
   22 D1:B27F 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B283 D9 -  -  -  			exx
   24 D1:B284 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B286 C9 -  -  -  			ret
   26 D1:B287 -  -  -  -  
   27 D1:B287 -  -  -  -  ; ***************************************************************************************
   28 D1:B287 -  -  -  -  ;
   29 D1:B287 -  -  -  -  ;									Changes and Updates
   30 D1:B287 -  -  -  -  ;
   31 D1:B287 -  -  -  -  ; ***************************************************************************************
   32 D1:B287 -  -  -  -  ;
   33 D1:B287 -  -  -  -  ;		Date			Notes
   34 D1:B287 -  -  -  -  ;		==== 			=====
   35 D1:B287 -  -  -  -  ;
   36 D1:B287 -  -  -  -  ; ***************************************************************************************
   37 D1:B287 -  -  -  -  			
Listing for file "_build.asm"
   51 D1:B287 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B287 -  -  -  -  ; ***************************************************************************************
    2 D1:B287 -  -  -  -  ; ***************************************************************************************
    3 D1:B287 -  -  -  -  ;
    4 D1:B287 -  -  -  -  ;		Name : 		val.asm
    5 D1:B287 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B287 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B287 -  -  -  -  ;		Reviewed :	No
    8 D1:B287 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B287 -  -  -  -  ;
   10 D1:B287 -  -  -  -  ; ***************************************************************************************
   11 D1:B287 -  -  -  -  ; ***************************************************************************************
   12 D1:B287 -  -  -  -  
   13 D1:B287 -  -  -  -  ; ***************************************************************************************
   14 D1:B287 -  -  -  -  ;
   15 D1:B287 -  -  -  -  ;								val( unary function
   16 D1:B287 -  -  -  -  ;
   17 D1:B287 -  -  -  -  ; ***************************************************************************************
   18 D1:B287 -  -  -  -  
   19 D1:B287 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B287 CD 9F AF D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B28B E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B28C C1 -  -  -  		pop 	bc
   23 D1:B28D 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B28F CD 3B BC D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B293 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B295 C8 -  -  -  		ret		z 							; okay
   27 D1:B296 3E 03 C3 83 
              AD D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B29C -  -  -  -  
   29 D1:B29C -  -  -  -  ; ***************************************************************************************
   30 D1:B29C -  -  -  -  ;
   31 D1:B29C -  -  -  -  ;									Changes and Updates
   32 D1:B29C -  -  -  -  ;
   33 D1:B29C -  -  -  -  ; ***************************************************************************************
   34 D1:B29C -  -  -  -  ;
   35 D1:B29C -  -  -  -  ;		Date			Notes
   36 D1:B29C -  -  -  -  ;		==== 			=====
   37 D1:B29C -  -  -  -  ;
   38 D1:B29C -  -  -  -  ; ***************************************************************************************
   39 D1:B29C -  -  -  -  		
Listing for file "_build.asm"
   52 D1:B29C -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 D1:B29C -  -  -  -  ; ***************************************************************************************
    2 D1:B29C -  -  -  -  ; ***************************************************************************************
    3 D1:B29C -  -  -  -  ;
    4 D1:B29C -  -  -  -  ;		Name : 		locals.asm
    5 D1:B29C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B29C -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B29C -  -  -  -  ;		Reviewed :	No
    8 D1:B29C -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 D1:B29C -  -  -  -  ;
   10 D1:B29C -  -  -  -  ; ***************************************************************************************
   11 D1:B29C -  -  -  -  ; ***************************************************************************************
   12 D1:B29C -  -  -  -  
   13 D1:B29C -  -  -  -  ; ***************************************************************************************
   14 D1:B29C -  -  -  -  ;
   15 D1:B29C -  -  -  -  ;									Locals command
   16 D1:B29C -  -  -  -  ;
   17 D1:B29C -  -  -  -  ; ***************************************************************************************
   18 D1:B29C -  -  -  -  
   19 D1:B29C -  -  -  -  Command_LOCAL:	;; [local]
   20 D1:B29C 21 00 00 00 		ld 		hl,0 						; set HL'HL, the default value, to zero
   21 D1:B2A0 D9 -  -  -  		exx
   22 D1:B2A1 21 00 00 00 		ld 		hl,0
   23 D1:B2A5 D9 -  -  -  		exx
   24 D1:B2A6 CD B4 B2 D1 		call 	LocalCreateVariable 		; create a variable
   25 D1:B2AA DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a comma ?
   26 D1:B2AD FE A6 -  -  		cp 		KWD_COMMA
   27 D1:B2AF C0 -  -  -  		ret 	nz 							; exit if not
   28 D1:B2B0 DD 23 -  -  		inc 	ix 							; skip comma
   29 D1:B2B2 18 E8 -  -  		jr 		Command_LOCAL 				; and go try the next one.
   30 D1:B2B4 -  -  -  -  		
   31 D1:B2B4 -  -  -  -  ; ***************************************************************************************
   32 D1:B2B4 -  -  -  -  ;
   33 D1:B2B4 -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   34 D1:B2B4 -  -  -  -  ;						(used for parameters and locals)
   35 D1:B2B4 -  -  -  -  ;
   36 D1:B2B4 -  -  -  -  ; ***************************************************************************************
   37 D1:B2B4 -  -  -  -  
   38 D1:B2B4 -  -  -  -  LocalCreateVariable:
   39 D1:B2B4 E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   40 D1:B2B5 D9 -  -  -  		exx
   41 D1:B2B6 E5 -  -  -  		push 	hl
   42 D1:B2B7 D9 -  -  -  		exx
   43 D1:B2B8 -  -  -  -  
   44 D1:B2B8 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   45 D1:B2BA 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   46 D1:B2BE CD 3C B7 D1 		call 	FindVariable 				; locate the variable, address in UHL now.
   47 D1:B2C2 E5 -  -  -  		push 	hl 							; save variable address.
   48 D1:B2C3 -  -  -  -  
   49 D1:B2C3 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   50 D1:B2C5 CD 79 B6 D1 		call 	StackOpenFrame
   51 D1:B2C9 -  -  -  -  
   52 D1:B2C9 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; point to SP+1
   53 D1:B2CD 23 -  -  -  		inc 	hl
   54 D1:B2CE D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   55 D1:B2CF D5 -  -  -  		push 	de
   56 D1:B2D0 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   57 D1:B2D6 -  -  -  -  		;
   58 D1:B2D6 EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   59 D1:B2D7 CD F9 B2 D1 		call 	_LCVRead32HL 				; read HL current value into HL'HL
   60 D1:B2DB CD E9 B2 D1 		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   61 D1:B2DF -  -  -  -  		;
   62 D1:B2DF D1 -  -  -  		pop 	de 							; the address of the variable itself.
   63 D1:B2E0 -  -  -  -  		;
   64 D1:B2E0 D9 -  -  -  		exx 								; restore the value being initialised to.
   65 D1:B2E1 E1 -  -  -  		pop 	hl
   66 D1:B2E2 D9 -  -  -  		exx
   67 D1:B2E3 E1 -  -  -  		pop 	hl
   68 D1:B2E4 CD E9 B2 D1 		call 	_LCVWrite32HL 				; write HL'HL to DE.
   69 D1:B2E8 C9 -  -  -  		ret
   70 D1:B2E9 -  -  -  -  
   71 D1:B2E9 -  -  -  -  ; ***************************************************************************************
   72 D1:B2E9 -  -  -  -  ;
   73 D1:B2E9 -  -  -  -  ;									Write HL'HL to DE.
   74 D1:B2E9 -  -  -  -  ;
   75 D1:B2E9 -  -  -  -  ; ***************************************************************************************
   76 D1:B2E9 -  -  -  -  
   77 D1:B2E9 -  -  -  -  _LCVWrite32HL:
   78 D1:B2E9 7D -  -  -  		ld 		a,l
   79 D1:B2EA 12 -  -  -  		ld 		(de),a
   80 D1:B2EB 13 -  -  -  		inc 	de
   81 D1:B2EC 7C -  -  -  		ld 		a,h
   82 D1:B2ED 12 -  -  -  		ld 		(de),a
   83 D1:B2EE 13 -  -  -  		inc 	de
   84 D1:B2EF D5 -  -  -  		push 	de
   85 D1:B2F0 D9 -  -  -  		exx
   86 D1:B2F1 D1 -  -  -  		pop 	de
   87 D1:B2F2 7D -  -  -  		ld 		a,l
   88 D1:B2F3 12 -  -  -  		ld 		(de),a
   89 D1:B2F4 13 -  -  -  		inc 	de
   90 D1:B2F5 7C -  -  -  		ld 		a,h
   91 D1:B2F6 12 -  -  -  		ld 		(de),a
   92 D1:B2F7 D9 -  -  -  		exx
   93 D1:B2F8 C9 -  -  -  		ret
   94 D1:B2F9 -  -  -  -  
   95 D1:B2F9 -  -  -  -  ; ***************************************************************************************
   96 D1:B2F9 -  -  -  -  ;
   97 D1:B2F9 -  -  -  -  ;									Read (HL) to HL'HL
   98 D1:B2F9 -  -  -  -  ;
   99 D1:B2F9 -  -  -  -  ; ***************************************************************************************
  100 D1:B2F9 -  -  -  -  
  101 D1:B2F9 -  -  -  -  _LCVRead32HL:
  102 D1:B2F9 E5 -  -  -  		push 	hl
  103 D1:B2FA ED 27 -  -  		ld_ind_hl
  104 D1:B2FC D9 -  -  -  		exx
  105 D1:B2FD E1 -  -  -  		pop 	hl
  106 D1:B2FE 23 -  -  -  		inc 	hl
  107 D1:B2FF 23 -  -  -  		inc 	hl
  108 D1:B300 ED 27 -  -  		ld_ind_hl
  109 D1:B302 D9 -  -  -  		exx
  110 D1:B303 C9 -  -  -  		ret
  111 D1:B304 -  -  -  -  
  112 D1:B304 -  -  -  -  ; ***************************************************************************************
  113 D1:B304 -  -  -  -  ;
  114 D1:B304 -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
  115 D1:B304 -  -  -  -  ;			or parameter
  116 D1:B304 -  -  -  -  ;
  117 D1:B304 -  -  -  -  ; ***************************************************************************************
  118 D1:B304 -  -  -  -  
  119 D1:B304 -  -  -  -  PopLocals:
  120 D1:B304 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  121 D1:B306 CD B1 B6 D1 		call 	StackCheckFrame
  122 D1:B30A C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  123 D1:B30B -  -  -  -  
  124 D1:B30B 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  125 D1:B30F 23 -  -  -  		inc 	hl
  126 D1:B310 E5 -  -  -  		push 	hl 							; save it
  127 D1:B311 ED 27 -  -  		ld_ind_hl 							; read address into HL
  128 D1:B313 EB -  -  -  		ex 		de,hl 						; target address is in DE.
  129 D1:B314 -  -  -  -  		;
  130 D1:B314 E1 -  -  -  		pop 	hl 							; address of old value
  131 D1:B315 23 -  -  -  		inc 	hl
  132 D1:B316 23 -  -  -  		inc 	hl
  133 D1:B317 23 -  -  -  		inc 	hl
  134 D1:B318 23 -  -  -  		inc 	hl
  135 D1:B319 CD F9 B2 D1 		call 	_LCVRead32HL 				; value into HL'HL
  136 D1:B31D CD E9 B2 D1 		call 	_LCVWrite32HL 				; and write it out again to var address
  137 D1:B321 -  -  -  -  
  138 D1:B321 CD 9E B6 D1 		call 	StackCloseFrame 			; remove the local/parameter
  139 D1:B325 18 DD -  -  		jr 		PopLocals 					; check any more ?
  140 D1:B327 -  -  -  -  
  141 D1:B327 -  -  -  -  ; ***************************************************************************************
  142 D1:B327 -  -  -  -  ;
  143 D1:B327 -  -  -  -  ;									Changes and Updates
  144 D1:B327 -  -  -  -  ;
  145 D1:B327 -  -  -  -  ; ***************************************************************************************
  146 D1:B327 -  -  -  -  ;
  147 D1:B327 -  -  -  -  ;		Date			Notes
  148 D1:B327 -  -  -  -  ;		==== 			=====
  149 D1:B327 -  -  -  -  ;
  150 D1:B327 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 D1:B327 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 D1:B327 -  -  -  -  ; ***************************************************************************************
    2 D1:B327 -  -  -  -  ; ***************************************************************************************
    3 D1:B327 -  -  -  -  ;
    4 D1:B327 -  -  -  -  ;		Name : 		proc.asm
    5 D1:B327 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B327 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B327 -  -  -  -  ;		Reviewed :	No
    8 D1:B327 -  -  -  -  ;		Purpose :	Proc command
    9 D1:B327 -  -  -  -  ;
   10 D1:B327 -  -  -  -  ; ***************************************************************************************
   11 D1:B327 -  -  -  -  ; ***************************************************************************************
   12 D1:B327 -  -  -  -  
   13 D1:B327 -  -  -  -  ; ***************************************************************************************
   14 D1:B327 -  -  -  -  ;
   15 D1:B327 -  -  -  -  ;										PROC Command
   16 D1:B327 -  -  -  -  ;
   17 D1:B327 -  -  -  -  ; ***************************************************************************************
   18 D1:B327 -  -  -  -  
   19 D1:B327 -  -  -  -  Command_PROC: 	;; [proc]
   20 D1:B327 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 D1:B329 CD 79 B6 D1 			call 	StackOpenFrame 			; marker position.
   22 D1:B32D -  -  -  -  			;
   23 D1:B32D DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 D1:B330 FE 26 -  -  			cp 		IDENTIFIER_END
   25 D1:B332 D2 ED AD D1 			jp 		nc,SyntaxError 			; no , no call possible.
   26 D1:B336 CD AC B3 D1 			call 	SearchProcedure 		; find procedure referenced at IX.
   27 D1:B33A -  -  -  -  			;
   28 D1:B33A -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 D1:B33A -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 D1:B33A -  -  -  -  			;
   31 D1:B33A D5 -  -  -  			push 	de 						; save start of line
   32 D1:B33B DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 D1:B33E FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 D1:B340 CC 57 B3 D1 			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 D1:B344 -  -  -  -  			;
   36 D1:B344 E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 D1:B345 -  -  -  -  			;
   38 D1:B345 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 D1:B347 CD 79 B6 D1 			call 	StackOpenFrame 
   40 D1:B34B CD B7 B6 D1 			call 	StackSavePosition 		; and save the return address on the stack.
   41 D1:B34F -  -  -  -  
   42 D1:B34F DD E1 -  -  			pop 	ix 						; new position in code
   43 D1:B351 E1 -  -  -  			pop 	hl 						; start of line
   44 D1:B352 22 DD A8 D1 			ld 		(CurrentLineStart),hl 	; save start of line
   45 D1:B356 C9 -  -  -  			ret
   46 D1:B357 -  -  -  -  
   47 D1:B357 -  -  -  -  ; ***************************************************************************************
   48 D1:B357 -  -  -  -  ;
   49 D1:B357 -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 D1:B357 -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 D1:B357 -  -  -  -  ;
   52 D1:B357 -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 D1:B357 -  -  -  -  ;			final ) on the parameter lists.
   54 D1:B357 -  -  -  -  ;
   55 D1:B357 -  -  -  -  ; ***************************************************************************************
   56 D1:B357 -  -  -  -  
   57 D1:B357 -  -  -  -  ProcDoParameterList:
   58 D1:B357 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 D1:B358 DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 D1:B35B 20 1E -  -  			jr 		nz,_ParamError
   61 D1:B35D -  -  -  -  			;
   62 D1:B35D DD 23 -  -  			inc 	ix 						; skip over it
   63 D1:B35F 23 -  -  -  			inc 	hl
   64 D1:B360 FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 D1:B362 C8 -  -  -  			ret 	z
   66 D1:B363 -  -  -  -  			;
   67 D1:B363 FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 D1:B365 28 04 -  -  			jr 		z,_PDPFound
   69 D1:B367 FE A6 -  -  			cp 		KWD_COMMA
   70 D1:B369 20 10 -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 D1:B36B -  -  -  -  			;
   72 D1:B36B -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 D1:B36B -  -  -  -  			;
   74 D1:B36B -  -  -  -  _PDPFound:			
   75 D1:B36B E5 -  -  -  			push 	hl 						; save callee on stack
   76 D1:B36C CD B6 AF D1 			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 D1:B370 DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 D1:B372 CD B4 B2 D1 			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 D1:B376 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 D1:B378 E1 -  -  -  			pop 	hl 						; and HL the callee
   81 D1:B379 18 DC -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 D1:B37B -  -  -  -  
   83 D1:B37B -  -  -  -  _ParamError:
   84 D1:B37B 3E 13 C3 83 
              AD D1 -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 D1:B381 -  -  -  -  
   86 D1:B381 -  -  -  -  ; ***************************************************************************************
   87 D1:B381 -  -  -  -  ;
   88 D1:B381 -  -  -  -  ;										ENDPROC Command
   89 D1:B381 -  -  -  -  ;
   90 D1:B381 -  -  -  -  ; ***************************************************************************************
   91 D1:B381 -  -  -  -  
   92 D1:B381 -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 D1:B381 CD 04 B3 D1 			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 D1:B385 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 D1:B387 CD B1 B6 D1 			call 	StackCheckFrame
   96 D1:B38B 20 19 -  -  			jr 		nz,_EndProcError
   97 D1:B38D CD D2 B6 D1 			call 	StackLoadPosition 		; restore position into IX/SOL
   98 D1:B391 CD 9E B6 D1 			call 	StackCloseFrame 		
   99 D1:B395 -  -  -  -  
  100 D1:B395 CD 04 B3 D1 			call 	PopLocals 				; restore any locals (parameters)
  101 D1:B399 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 D1:B39B CD B1 B6 D1 			call 	StackCheckFrame
  103 D1:B39F 20 05 -  -  			jr 		nz,_EndProcError
  104 D1:B3A1 CD 9E B6 D1 			call 	StackCloseFrame 		
  105 D1:B3A5 C9 -  -  -  			ret
  106 D1:B3A6 -  -  -  -  _EndProcError:
  107 D1:B3A6 3E 10 C3 83 
              AD D1 -  -  			ERR_NOPROC
  108 D1:B3AC -  -  -  -  
  109 D1:B3AC -  -  -  -  ; ***************************************************************************************
  110 D1:B3AC -  -  -  -  ;
  111 D1:B3AC -  -  -  -  ;									Changes and Updates
  112 D1:B3AC -  -  -  -  ;
  113 D1:B3AC -  -  -  -  ; ***************************************************************************************
  114 D1:B3AC -  -  -  -  ;
  115 D1:B3AC -  -  -  -  ;		Date			Notes
  116 D1:B3AC -  -  -  -  ;		==== 			=====
  117 D1:B3AC -  -  -  -  ;
  118 D1:B3AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B3AC -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 D1:B3AC -  -  -  -  ; ***************************************************************************************
    2 D1:B3AC -  -  -  -  ; ***************************************************************************************
    3 D1:B3AC -  -  -  -  ;
    4 D1:B3AC -  -  -  -  ;		Name : 		search.asm
    5 D1:B3AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3AC -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B3AC -  -  -  -  ;		Reviewed :	No
    8 D1:B3AC -  -  -  -  ;		Purpose :	Search program for procedures
    9 D1:B3AC -  -  -  -  ;
   10 D1:B3AC -  -  -  -  ; ***************************************************************************************
   11 D1:B3AC -  -  -  -  ; ***************************************************************************************
   12 D1:B3AC -  -  -  -  
   13 D1:B3AC -  -  -  -  ; ***************************************************************************************
   14 D1:B3AC -  -  -  -  ;
   15 D1:B3AC -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 D1:B3AC -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 D1:B3AC -  -  -  -  ;
   18 D1:B3AC -  -  -  -  ;					A very simple search which may actually be good enough.
   19 D1:B3AC -  -  -  -  ;					Give consideration to a table w/index ? 
   20 D1:B3AC -  -  -  -  ;
   21 D1:B3AC -  -  -  -  ; ***************************************************************************************
   22 D1:B3AC -  -  -  -  
   23 D1:B3AC -  -  -  -  SearchProcedure:
   24 D1:B3AC DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 D1:B3AF -  -  -  -  
   26 D1:B3AF 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; start of program space
   27 D1:B3B3 -  -  -  -  			;
   28 D1:B3B3 -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 D1:B3B3 -  -  -  -  			;
   30 D1:B3B3 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 D1:B3B4 B7 -  -  -  			or 		a
   32 D1:B3B5 28 38 -  -  			jr 		z,_SPFail
   33 D1:B3B7 E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 D1:B3B8 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 D1:B3B9 23 -  -  -  			inc 	hl
   36 D1:B3BA 23 -  -  -  			inc 	hl
   37 D1:B3BB 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 D1:B3BC FE B6 -  -  			cp 		KWD_DEF 				
   39 D1:B3BE 20 0B -  -  			jr 		nz,_SPNext
   40 D1:B3C0 23 -  -  -  			inc 	hl 				
   41 D1:B3C1 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 D1:B3C2 FE B7 -  -  			cp 		KWD_PROC
   43 D1:B3C4 20 05 -  -  			jr 		nz,_SPNext
   44 D1:B3C6 23 -  -  -  			inc 	hl
   45 D1:B3C7 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 D1:B3C8 B9 -  -  -  			cp 		c
   47 D1:B3C9 28 09 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 D1:B3CB -  -  -  -  			;
   49 D1:B3CB -  -  -  -  			;		Advance to next entry.
   50 D1:B3CB -  -  -  -  			;			
   51 D1:B3CB E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 D1:B3CC 11 00 00 00 			ld 		de,0 					; offset into UDE
   53 D1:B3D0 5E -  -  -  			ld 		e,(hl)
   54 D1:B3D1 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 D1:B3D2 18 DF -  -  			jr 		_SPLoop
   56 D1:B3D4 -  -  -  -  			;
   57 D1:B3D4 -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 D1:B3D4 -  -  -  -  			; 		DEF PROC line.
   59 D1:B3D4 -  -  -  -  			;		
   60 D1:B3D4 -  -  -  -  			;		Already know the first characters match
   61 D1:B3D4 -  -  -  -  			;
   62 D1:B3D4 -  -  -  -  _SPFullCheck:
   63 D1:B3D4 DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 D1:B3D6 -  -  -  -  _SPCheckLoop:
   65 D1:B3D6 DD 23 -  -  			inc 	ix 						; look at next character.
   66 D1:B3D8 23 -  -  -  			inc 	hl
   67 D1:B3D9 DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 D1:B3DC FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 D1:B3DE 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 D1:B3E0 BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 D1:B3E1 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 D1:B3E3 -  -  -  -  			;
   73 D1:B3E3 -  -  -  -  			;		Full check failed.
   74 D1:B3E3 -  -  -  -  			;
   75 D1:B3E3 -  -  -  -  _SPFullCheckFailed:			
   76 D1:B3E3 DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 D1:B3E5 18 E4 -  -  			jr 		_SPNext 				; do the next line.
   78 D1:B3E7 -  -  -  -  			;
   79 D1:B3E7 -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 D1:B3E7 -  -  -  -  			;
   81 D1:B3E7 -  -  -  -  _SPCheckBothEnd:
   82 D1:B3E7 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 D1:B3E8 FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 D1:B3EA 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 D1:B3EC -  -  -  -  			;
   86 D1:B3EC -  -  -  -  			;	 	We found it.
   87 D1:B3EC -  -  -  -  			;
   88 D1:B3EC C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 D1:B3ED D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 D1:B3EE C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 D1:B3EF -  -  -  -  
   92 D1:B3EF -  -  -  -  _SPFail: 									; come here when not found.
   93 D1:B3EF 3E 14 C3 83 
              AD D1 -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 D1:B3F5 -  -  -  -  
   95 D1:B3F5 -  -  -  -  ; ***************************************************************************************
   96 D1:B3F5 -  -  -  -  ;
   97 D1:B3F5 -  -  -  -  ;									Changes and Updates
   98 D1:B3F5 -  -  -  -  ;
   99 D1:B3F5 -  -  -  -  ; ***************************************************************************************
  100 D1:B3F5 -  -  -  -  ;
  101 D1:B3F5 -  -  -  -  ;		Date			Notes
  102 D1:B3F5 -  -  -  -  ;		==== 			=====
  103 D1:B3F5 -  -  -  -  ;
  104 D1:B3F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B3F5 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B3F5 -  -  -  -  ; ***************************************************************************************
    2 D1:B3F5 -  -  -  -  ; ***************************************************************************************
    3 D1:B3F5 -  -  -  -  ;
    4 D1:B3F5 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B3F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3F5 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B3F5 -  -  -  -  ;		Reviewed :	No
    8 D1:B3F5 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B3F5 -  -  -  -  ;
   10 D1:B3F5 -  -  -  -  ; ***************************************************************************************
   11 D1:B3F5 -  -  -  -  ; ***************************************************************************************
   12 D1:B3F5 -  -  -  -  
   13 D1:B3F5 -  -  -  -  ; ***************************************************************************************
   14 D1:B3F5 -  -  -  -  ;
   15 D1:B3F5 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B3F5 -  -  -  -  ;
   17 D1:B3F5 -  -  -  -  ; ***************************************************************************************
   18 D1:B3F5 -  -  -  -  
   19 D1:B3F5 -  -  -  -  AllocateBytes:
   20 D1:B3F5 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B3F6 21 00 00 00 		ld 		hl,$000000
   22 D1:B3FA 62 -  -  -  		ld 		h,d
   23 D1:B3FB 6B -  -  -  		ld 		l,e
   24 D1:B3FC -  -  -  -  		;
   25 D1:B3FC ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 D1:B401 D5 -  -  -  		push 	de 							; save on stack
   27 D1:B402 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 D1:B403 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   29 D1:B407 -  -  -  -  		;
   30 D1:B407 EB -  -  -  		ex 		de,hl 						; put in DE
   31 D1:B408 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 D1:B40C AF -  -  -  		xor 	a
   33 D1:B40D ED 52 -  -  		sbc 	hl,de
   34 D1:B40F E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 D1:B410 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 D1:B411 3E 0B C3 83 
              AD D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 D1:B417 -  -  -  -  
   38 D1:B417 -  -  -  -  ; ***************************************************************************************
   39 D1:B417 -  -  -  -  ;
   40 D1:B417 -  -  -  -  ;									Changes and Updates
   41 D1:B417 -  -  -  -  ;
   42 D1:B417 -  -  -  -  ; ***************************************************************************************
   43 D1:B417 -  -  -  -  ;
   44 D1:B417 -  -  -  -  ;		Date			Notes
   45 D1:B417 -  -  -  -  ;		==== 			=====
   46 D1:B417 -  -  -  -  ;
   47 D1:B417 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B417 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B417 -  -  -  -  ; ***************************************************************************************
    2 D1:B417 -  -  -  -  ; ***************************************************************************************
    3 D1:B417 -  -  -  -  ;
    4 D1:B417 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B417 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B417 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B417 -  -  -  -  ;		Reviewed :	No
    8 D1:B417 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B417 -  -  -  -  ;
   10 D1:B417 -  -  -  -  ; ***************************************************************************************
   11 D1:B417 -  -  -  -  ; ***************************************************************************************
   12 D1:B417 -  -  -  -  
   13 D1:B417 -  -  -  -  ; ***************************************************************************************
   14 D1:B417 -  -  -  -  ;
   15 D1:B417 -  -  -  -  ;										CLEAR command
   16 D1:B417 -  -  -  -  ;
   17 D1:B417 -  -  -  -  ; ***************************************************************************************
   18 D1:B417 -  -  -  -  
   19 D1:B417 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B417 -  -  -  -  		;
   21 D1:B417 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B417 -  -  -  -  		;
   23 D1:B417 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B41B -  -  -  -  _CCFindLow:
   25 D1:B41B 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B41F 5E -  -  -  		ld 		e,(hl)		
   27 D1:B420 19 -  -  -  		add 	hl,de
   28 D1:B421 7B -  -  -  		ld 		a,e
   29 D1:B422 B7 -  -  -  		or 		a
   30 D1:B423 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B425 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B426 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B42A 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B42B 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B42F -  -  -  -  		;
   36 D1:B42F -  -  -  -  		; 	 		Reset the language stack
   37 D1:B42F -  -  -  -  		;
   38 D1:B42F 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B433 -  -  -  -  		;
   40 D1:B433 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:B437 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:B43B 19 -  -  -  		add 	hl,de
   43 D1:B43C 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:B43E 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:B442 -  -  -  -  		;
   46 D1:B442 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:B446 19 -  -  -  		add 	hl,de
   48 D1:B447 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:B44B -  -  -  -  		;
   50 D1:B44B -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 D1:B44B -  -  -  -  		;
   52 D1:B44B 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 D1:B44F -  -  -  -  _CCFClearHT:
   54 D1:B44F 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 D1:B450 36 00 -  -  		ld 		(hl),0
   56 D1:B452 1B -  -  -  		dec 	de
   57 D1:B453 7A -  -  -  		ld 		a,d
   58 D1:B454 B3 -  -  -  		or 		e
   59 D1:B455 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 D1:B457 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   61 D1:B45B -  -  -  -  		;
   62 D1:B45B -  -  -  -  		; 		Save highest byte that can be allocate
   63 D1:B45B -  -  -  -  		;
   64 D1:B45B 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   65 D1:B45F -  -  -  -  		;
   66 D1:B45F -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 D1:B45F -  -  -  -  		;
   68 D1:B45F CD CA B1 D1 		call 	UnaryRandomInitialise
   69 D1:B463 -  -  -  -  		;
   70 D1:B463 -  -  -  -  		;		Erase the stack
   71 D1:B463 -  -  -  -  		;
   72 D1:B463 CD 6D B6 D1 		call 	StackReset 					; reset the basic stack to empty
   73 D1:B467 -  -  -  -  		;
   74 D1:B467 -  -  -  -  		;		Reset READ/DATA
   75 D1:B467 -  -  -  -  		;
   76 D1:B467 CD 2D AD D1 		call 	Command_RESTORE
   77 D1:B46B C9 -  -  -  		ret
   78 D1:B46C -  -  -  -  
   79 D1:B46C -  -  -  -  ; ***************************************************************************************
   80 D1:B46C -  -  -  -  ;
   81 D1:B46C -  -  -  -  ;									Changes and Updates
   82 D1:B46C -  -  -  -  ;
   83 D1:B46C -  -  -  -  ; ***************************************************************************************
   84 D1:B46C -  -  -  -  ;
   85 D1:B46C -  -  -  -  ;		Date			Notes
   86 D1:B46C -  -  -  -  ;		==== 			=====
   87 D1:B46C -  -  -  -  ;
   88 D1:B46C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 D1:B46C -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B46C -  -  -  -  ; ***************************************************************************************
    2 D1:B46C -  -  -  -  ; ***************************************************************************************
    3 D1:B46C -  -  -  -  ;
    4 D1:B46C -  -  -  -  ;		Name : 		instance.asm
    5 D1:B46C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B46C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B46C -  -  -  -  ;		Reviewed :	No
    8 D1:B46C -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B46C -  -  -  -  ;
   10 D1:B46C -  -  -  -  ; ***************************************************************************************
   11 D1:B46C -  -  -  -  ; ***************************************************************************************
   12 D1:B46C -  -  -  -  
   13 D1:B46C -  -  -  -  ; ***************************************************************************************
   14 D1:B46C -  -  -  -  ;
   15 D1:B46C -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B46C -  -  -  -  ;
   17 D1:B46C -  -  -  -  ; ***************************************************************************************
   18 D1:B46C -  -  -  -  
   19 D1:B46C -  -  -  -  SetCurrentInstance:
   20 D1:B46C ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B471 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B475 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B47A -  -  -  -  
   24 D1:B47A C9 -  -  -  		ret
   25 D1:B47B -  -  -  -  
   26 D1:B47B -  -  -  -  
   27 D1:B47B -  -  -  -  ; ***************************************************************************************
   28 D1:B47B -  -  -  -  ;
   29 D1:B47B -  -  -  -  ;									Changes and Updates
   30 D1:B47B -  -  -  -  ;
   31 D1:B47B -  -  -  -  ; ***************************************************************************************
   32 D1:B47B -  -  -  -  ;
   33 D1:B47B -  -  -  -  ;		Date			Notes
   34 D1:B47B -  -  -  -  ;		==== 			=====
   35 D1:B47B -  -  -  -  ;
   36 D1:B47B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 D1:B47B -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B47B -  -  -  -  ; ***************************************************************************************
    2 D1:B47B -  -  -  -  ; ***************************************************************************************
    3 D1:B47B -  -  -  -  ;
    4 D1:B47B -  -  -  -  ;		Name : 		new.asm
    5 D1:B47B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B47B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B47B -  -  -  -  ;		Reviewed :	No
    8 D1:B47B -  -  -  -  ;		Purpose :	New command.
    9 D1:B47B -  -  -  -  ;
   10 D1:B47B -  -  -  -  ; ***************************************************************************************
   11 D1:B47B -  -  -  -  ; ***************************************************************************************
   12 D1:B47B -  -  -  -  
   13 D1:B47B -  -  -  -  ; ***************************************************************************************
   14 D1:B47B -  -  -  -  ;
   15 D1:B47B -  -  -  -  ;										NEW command
   16 D1:B47B -  -  -  -  ;
   17 D1:B47B -  -  -  -  ; ***************************************************************************************
   18 D1:B47B -  -  -  -  
   19 D1:B47B -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B47B 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B47F 36 00 -  -  		ld 		(hl),0
   22 D1:B481 CD 17 B4 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B485 3E 00 C3 83 
              AD D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B48B -  -  -  -  
   25 D1:B48B -  -  -  -  ; ***************************************************************************************
   26 D1:B48B -  -  -  -  ;
   27 D1:B48B -  -  -  -  ;									Changes and Updates
   28 D1:B48B -  -  -  -  ;
   29 D1:B48B -  -  -  -  ; ***************************************************************************************
   30 D1:B48B -  -  -  -  ;
   31 D1:B48B -  -  -  -  ;		Date			Notes
   32 D1:B48B -  -  -  -  ;		==== 			=====
   33 D1:B48B -  -  -  -  ;
   34 D1:B48B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 D1:B48B -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 D1:B48B -  -  -  -  ; ***************************************************************************************
    2 D1:B48B -  -  -  -  ; ***************************************************************************************
    3 D1:B48B -  -  -  -  ;
    4 D1:B48B -  -  -  -  ;		Name : 		for.asm
    5 D1:B48B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B48B -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B48B -  -  -  -  ;		Reviewed :	No
    8 D1:B48B -  -  -  -  ;		Purpose :	For/Next command
    9 D1:B48B -  -  -  -  ;
   10 D1:B48B -  -  -  -  ; ***************************************************************************************
   11 D1:B48B -  -  -  -  
   12 D1:B48B -  -  -  -  ; ***************************************************************************************
   13 D1:B48B -  -  -  -  ;
   14 D1:B48B -  -  -  -  ;									For Command
   15 D1:B48B -  -  -  -  ;
   16 D1:B48B -  -  -  -  ; ***************************************************************************************
   17 D1:B48B -  -  -  -  
   18 D1:B48B -  -  -  -  Command_FOR: ;; [for]
   19 D1:B48B 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 D1:B48D CD 79 B6 D1 			call 	StackOpenFrame
   21 D1:B491 -  -  -  -  			;
   22 D1:B491 -  -  -  -  			;		Variable Reference to increment
   23 D1:B491 -  -  -  -  			;
   24 D1:B491 DD E5 -  -  			push	ix 						; save start position
   25 D1:B493 3E FF -  -  			ld 		a,255 					; FOR can create
   26 D1:B495 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   27 D1:B499 CD 45 B0 D1 			call 	EvaluateTerm 			; get term
   28 D1:B49D AF -  -  -  			xor 	a 						; autocreate off.
   29 D1:B49E 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   30 D1:B4A2 DD E1 -  -  			pop 	ix 						; get start position
   31 D1:B4A4 E5 -  -  -  			push 	hl 						; save reference address.
   32 D1:B4A5 -  -  -  -  			;
   33 D1:B4A5 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 D1:B4A7 C2 ED AD D1 			jp 		nz,SyntaxError
   35 D1:B4AB EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 D1:B4AC -  -  -  -  			;
   37 D1:B4AC 2A D9 A8 D1 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 D1:B4B0 01 06 00 00 			ld 		bc,6
   39 D1:B4B4 09 -  -  -  			add 	hl,bc 
   40 D1:B4B5 D1 -  -  -  			pop 	de 						; get reference.
   41 D1:B4B6 ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 D1:B4BC -  -  -  -  			;
   43 D1:B4BC -  -  -  -  			;		var = value
   44 D1:B4BC -  -  -  -  			;
   45 D1:B4BC CD 1E AB D1 			call 	Command_LET 			; so we do I = 1 or whatever.
   46 D1:B4C0 -  -  -  -  			; 		
   47 D1:B4C0 -  -  -  -  			; 		TO
   48 D1:B4C0 -  -  -  -  			;
   49 D1:B4C0 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 D1:B4C2 CD 77 AD D1 			call 	CheckNextA
   51 D1:B4C6 -  -  -  -  			;
   52 D1:B4C6 -  -  -  -  			;		value
   53 D1:B4C6 -  -  -  -  			;
   54 D1:B4C6 CD B6 AF D1 			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 D1:B4CA 3E 0A -  -  			ld 		a,10
   56 D1:B4CC CD 07 B5 D1 			call 	CFWriteHLHLToA 
   57 D1:B4D0 -  -  -  -  			;
   58 D1:B4D0 -  -  -  -  			;		Check STEP ?
   59 D1:B4D0 -  -  -  -  			;
   60 D1:B4D0 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   61 D1:B4D4 D9 -  -  -  			exx
   62 D1:B4D5 21 00 00 00 			ld 		hl,0
   63 D1:B4D9 D9 -  -  -  			exx			
   64 D1:B4DA DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 D1:B4DD FE B4 -  -  			cp 		KWD_STEP 				
   66 D1:B4DF 20 06 -  -  			jr 		nz,_CFDefaultStep
   67 D1:B4E1 -  -  -  -  			;
   68 D1:B4E1 DD 23 -  -  			inc 	ix 						; get step
   69 D1:B4E3 CD B6 AF D1 			call 	EvaluateInteger
   70 D1:B4E7 -  -  -  -  _CFDefaultStep:			
   71 D1:B4E7 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 D1:B4E9 CD 07 B5 D1 			call 	CFWriteHLHLToA 
   73 D1:B4ED CD B7 B6 D1 			call 	StackSavePosition 		; save loop address
   74 D1:B4F1 C9 -  -  -  			ret
   75 D1:B4F2 -  -  -  -  
   76 D1:B4F2 -  -  -  -  ; ***************************************************************************************
   77 D1:B4F2 -  -  -  -  ;
   78 D1:B4F2 -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 D1:B4F2 -  -  -  -  ;
   80 D1:B4F2 -  -  -  -  ; ***************************************************************************************
   81 D1:B4F2 -  -  -  -  
   82 D1:B4F2 -  -  -  -  CFReadAToHLHL:
   83 D1:B4F2 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   84 D1:B4F6 4F -  -  -  			ld 		c,a
   85 D1:B4F7 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
   86 D1:B4FB 09 -  -  -  			add 	hl,bc
   87 D1:B4FC -  -  -  -  
   88 D1:B4FC -  -  -  -  CFReadHLToHLHL:
   89 D1:B4FC E5 -  -  -  			push 	hl
   90 D1:B4FD ED 27 -  -  			ld_ind_hl 						; get low word
   91 D1:B4FF D9 -  -  -  			exx
   92 D1:B500 -  -  -  -  
   93 D1:B500 E1 -  -  -  			pop 	hl 						; get high word
   94 D1:B501 23 -  -  -  			inc 	hl
   95 D1:B502 23 -  -  -  			inc 	hl
   96 D1:B503 ED 27 -  -  			ld_ind_hl
   97 D1:B505 D9 -  -  -  			exx
   98 D1:B506 -  -  -  -  
   99 D1:B506 C9 -  -  -  			ret
  100 D1:B507 -  -  -  -  
  101 D1:B507 -  -  -  -  ; ***************************************************************************************
  102 D1:B507 -  -  -  -  ;
  103 D1:B507 -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 D1:B507 -  -  -  -  ;
  105 D1:B507 -  -  -  -  ; ***************************************************************************************
  106 D1:B507 -  -  -  -  
  107 D1:B507 -  -  -  -  CFWriteHLHLToA:
  108 D1:B507 EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 D1:B508 D9 -  -  -  			exx
  110 D1:B509 EB -  -  -  			ex 		de,hl
  111 D1:B50A D9 -  -  -  			exx
  112 D1:B50B -  -  -  -  
  113 D1:B50B 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  114 D1:B50F 4F -  -  -  			ld 		c,a
  115 D1:B510 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
  116 D1:B514 09 -  -  -  			add 	hl,bc
  117 D1:B515 -  -  -  -  
  118 D1:B515 -  -  -  -  CFWriteDEDEToHL:
  119 D1:B515 73 -  -  -  			ld 		(hl),e 					; write low word
  120 D1:B516 23 -  -  -  			inc 	hl
  121 D1:B517 72 -  -  -  			ld 		(hl),d
  122 D1:B518 23 -  -  -  			inc 	hl
  123 D1:B519 -  -  -  -  
  124 D1:B519 E5 -  -  -  			push 	hl 						; write high word
  125 D1:B51A D9 -  -  -  			exx
  126 D1:B51B E1 -  -  -  			pop 	hl
  127 D1:B51C 73 -  -  -  			ld 		(hl),e
  128 D1:B51D 23 -  -  -  			inc 	hl
  129 D1:B51E 72 -  -  -  			ld 		(hl),d
  130 D1:B51F D9 -  -  -  			exx
  131 D1:B520 C9 -  -  -  			ret			
  132 D1:B521 -  -  -  -  
  133 D1:B521 -  -  -  -  ; ***************************************************************************************
  134 D1:B521 -  -  -  -  ;
  135 D1:B521 -  -  -  -  ;									Next Command
  136 D1:B521 -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 D1:B521 -  -  -  -  ;
  138 D1:B521 -  -  -  -  ; ***************************************************************************************
  139 D1:B521 -  -  -  -  
  140 D1:B521 -  -  -  -  Command_Next:	;; [next]
  141 D1:B521 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 D1:B523 CD B1 B6 D1 			call 	StackCheckFrame
  143 D1:B527 -  -  -  -  			;
  144 D1:B527 -  -  -  -  			;		Get address of FOR variable
  145 D1:B527 -  -  -  -  			;
  146 D1:B527 2A D9 A8 D1 			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 D1:B52B 01 06 00 00 			ld 		bc,6
  148 D1:B52F 09 -  -  -  			add 	hl,bc
  149 D1:B530 ED 27 -  -  			ld_ind_hl
  150 D1:B532 -  -  -  -  			;
  151 D1:B532 -  -  -  -  			; 		Save reference, read value into DE.
  152 D1:B532 -  -  -  -  			;
  153 D1:B532 E5 -  -  -  			push 	hl 						; save index address
  154 D1:B533 CD FC B4 D1 			call 	CFReadHLToHLHL 			; read the index value.
  155 D1:B537 -  -  -  -  
  156 D1:B537 EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 D1:B538 D9 -  -  -  			exx
  158 D1:B539 EB -  -  -  			ex 		de,hl
  159 D1:B53A D9 -  -  -  			exx
  160 D1:B53B -  -  -  -  			;
  161 D1:B53B -  -  -  -  			; 		Read step and Add
  162 D1:B53B -  -  -  -  			;
  163 D1:B53B 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 D1:B53D CD F2 B4 D1 			call 	CFReadAToHLHL
  165 D1:B541 D9 -  -  -  			exx 							; msb of step on stack
  166 D1:B542 7C -  -  -  			ld 		a,h
  167 D1:B543 D9 -  -  -  			exx
  168 D1:B544 F5 -  -  -  			push 	af
  169 D1:B545 CD DC BC D1 			call 	Int32Add 				; add step to offset => HL'HL
  170 D1:B549 -  -  -  -  			;
  171 D1:B549 -  -  -  -  			;		Put result in DE and write back out
  172 D1:B549 -  -  -  -  			;
  173 D1:B549 EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 D1:B54A D9 -  -  -  			exx
  175 D1:B54B EB -  -  -  			ex 		de,hl
  176 D1:B54C D9 -  -  -  			exx
  177 D1:B54D F1 -  -  -  			pop 	af 						; get msb of step
  178 D1:B54E E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 D1:B54F F5 -  -  -  			push 	af 						; push msb of step back.
  180 D1:B550 CD 15 B5 D1 			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 D1:B554 -  -  -  -  			;
  182 D1:B554 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 D1:B554 -  -  -  -  			;
  184 D1:B554 3E 0A -  -  			ld 		a,10 					; load limit
  185 D1:B556 CD F2 B4 D1 			call 	CFReadAToHLHL
  186 D1:B55A CD 1C BD D1 			call 	Int32Compare 			; compare limit to index.
  187 D1:B55E C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 D1:B55F B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 D1:B560 28 0A -  -  			jr 		z,_CNXLoopBack
  190 D1:B562 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 D1:B564 28 02 -  -  			jr 		z,_CNXNotMStep
  192 D1:B566 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 D1:B568 -  -  -  -  _CNXNotMStep:			
  194 D1:B568 E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 D1:B56A 20 04 -  -  			jr 		nz,_CNXLoopOver
  196 D1:B56C -  -  -  -  			;
  197 D1:B56C -  -  -  -  			;		For loop goes round again.
  198 D1:B56C -  -  -  -  			;
  199 D1:B56C -  -  -  -  _CNXLoopBack:			
  200 D1:B56C C3 D2 B6 D1 			jp 		StackLoadPosition
  201 D1:B570 -  -  -  -  			;
  202 D1:B570 -  -  -  -  			;		For loop completed
  203 D1:B570 -  -  -  -  			;
  204 D1:B570 -  -  -  -  _CNXLoopOver:
  205 D1:B570 C3 9E B6 D1 			jp 		StackCloseFrame
  206 D1:B574 F5 3E 02 32 
              FF FF FF F1 			debug
  207 D1:B57C -  -  -  -  
  208 D1:B57C -  -  -  -  ; ***************************************************************************************
  209 D1:B57C -  -  -  -  ;
  210 D1:B57C -  -  -  -  ;									Changes and Updates
  211 D1:B57C -  -  -  -  ;
  212 D1:B57C -  -  -  -  ; ***************************************************************************************
  213 D1:B57C -  -  -  -  ;
  214 D1:B57C -  -  -  -  ;		Date			Notes
  215 D1:B57C -  -  -  -  ;		==== 			=====
  216 D1:B57C -  -  -  -  ;
  217 D1:B57C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 D1:B57C -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 D1:B57C -  -  -  -  ; ***************************************************************************************
    2 D1:B57C -  -  -  -  ; ***************************************************************************************
    3 D1:B57C -  -  -  -  ;
    4 D1:B57C -  -  -  -  ;		Name : 		gosub.asm
    5 D1:B57C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B57C -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B57C -  -  -  -  ;		Reviewed :	No
    8 D1:B57C -  -  -  -  ;		Purpose :	Gosub/Return command
    9 D1:B57C -  -  -  -  ;
   10 D1:B57C -  -  -  -  ; ***************************************************************************************
   11 D1:B57C -  -  -  -  
   12 D1:B57C -  -  -  -  ; ***************************************************************************************
   13 D1:B57C -  -  -  -  ;
   14 D1:B57C -  -  -  -  ;									Gosub Command
   15 D1:B57C -  -  -  -  ;
   16 D1:B57C -  -  -  -  ; ***************************************************************************************
   17 D1:B57C -  -  -  -  
   18 D1:B57C -  -  -  -  Command_GOSUB: ;; [gosub]
   19 D1:B57C 3E 13 -  -  			ld		a,STM_GOSUB
   20 D1:B57E CD 79 B6 D1 			call 	StackOpenFrame
   21 D1:B582 CD B1 B5 D1 			call 	GoGetLineNumber
   22 D1:B586 E5 -  -  -  			push 	hl
   23 D1:B587 CD B7 B6 D1 			call 	StackSavePosition
   24 D1:B58B E1 -  -  -  			pop 	hl
   25 D1:B58C CD BE B5 D1 			call	TransferToLineHL
   26 D1:B590 C9 -  -  -  			ret
   27 D1:B591 -  -  -  -  
   28 D1:B591 -  -  -  -  ; ***************************************************************************************
   29 D1:B591 -  -  -  -  ;
   30 D1:B591 -  -  -  -  ;									Return command
   31 D1:B591 -  -  -  -  ;
   32 D1:B591 -  -  -  -  ; ***************************************************************************************
   33 D1:B591 -  -  -  -  
   34 D1:B591 -  -  -  -  Command_Return: ;; [return]
   35 D1:B591 3E 13 -  -  			ld		a,STM_GOSUB
   36 D1:B593 CD B1 B6 D1 			call 	StackCheckFrame
   37 D1:B597 20 09 -  -  			jr 		nz,_ReturnError
   38 D1:B599 CD D2 B6 D1 			call 	StackLoadPosition
   39 D1:B59D CD 9E B6 D1 			call 	StackCloseFrame
   40 D1:B5A1 C9 -  -  -  			ret
   41 D1:B5A2 -  -  -  -  _ReturnError:
   42 D1:B5A2 3E 08 C3 83 
              AD D1 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 D1:B5A8 -  -  -  -  
   44 D1:B5A8 -  -  -  -  ; ***************************************************************************************
   45 D1:B5A8 -  -  -  -  ;
   46 D1:B5A8 -  -  -  -  ;									Changes and Updates
   47 D1:B5A8 -  -  -  -  ;
   48 D1:B5A8 -  -  -  -  ; ***************************************************************************************
   49 D1:B5A8 -  -  -  -  ;
   50 D1:B5A8 -  -  -  -  ;		Date			Notes
   51 D1:B5A8 -  -  -  -  ;		==== 			=====
   52 D1:B5A8 -  -  -  -  ;
   53 D1:B5A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B5A8 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 D1:B5A8 -  -  -  -  ; ***************************************************************************************
    2 D1:B5A8 -  -  -  -  ; ***************************************************************************************
    3 D1:B5A8 -  -  -  -  ;
    4 D1:B5A8 -  -  -  -  ;		Name : 		goto.asm
    5 D1:B5A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5A8 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B5A8 -  -  -  -  ;		Reviewed :	No
    8 D1:B5A8 -  -  -  -  ;		Purpose :	Goto command
    9 D1:B5A8 -  -  -  -  ;
   10 D1:B5A8 -  -  -  -  ; ***************************************************************************************
   11 D1:B5A8 -  -  -  -  
   12 D1:B5A8 -  -  -  -  ; ***************************************************************************************
   13 D1:B5A8 -  -  -  -  ;
   14 D1:B5A8 -  -  -  -  ;									Goto Command
   15 D1:B5A8 -  -  -  -  ;
   16 D1:B5A8 -  -  -  -  ; ***************************************************************************************
   17 D1:B5A8 -  -  -  -  
   18 D1:B5A8 -  -  -  -  Command_GOTO: ;; [goto]
   19 D1:B5A8 CD B1 B5 D1 			call 	GoGetLineNumber
   20 D1:B5AC CD BE B5 D1 			call	TransferToLineHL
   21 D1:B5B0 C9 -  -  -  			ret
   22 D1:B5B1 -  -  -  -  
   23 D1:B5B1 -  -  -  -  ; ***************************************************************************************
   24 D1:B5B1 -  -  -  -  ;
   25 D1:B5B1 -  -  -  -  ;							Get and validate a line number in HL
   26 D1:B5B1 -  -  -  -  ;
   27 D1:B5B1 -  -  -  -  ; ***************************************************************************************
   28 D1:B5B1 -  -  -  -  
   29 D1:B5B1 -  -  -  -  GoGetLineNumber:
   30 D1:B5B1 CD B6 AF D1 			call 	EvaluateInteger
   31 D1:B5B5 D9 -  -  -  			exx
   32 D1:B5B6 7C -  -  -  			ld 		a,h
   33 D1:B5B7 B5 -  -  -  			or 		l
   34 D1:B5B8 D9 -  -  -  			exx
   35 D1:B5B9 C8 -  -  -  			ret 	z
   36 D1:B5BA C3 E7 AD D1 			jp 		BadValue
   37 D1:B5BE -  -  -  -  
   38 D1:B5BE -  -  -  -  ; ***************************************************************************************
   39 D1:B5BE -  -  -  -  ;
   40 D1:B5BE -  -  -  -  ;							Transfer to Line Number HL
   41 D1:B5BE -  -  -  -  ;
   42 D1:B5BE -  -  -  -  ; ***************************************************************************************
   43 D1:B5BE -  -  -  -  
   44 D1:B5BE -  -  -  -  TransferToLineHL:
   45 D1:B5BE EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 D1:B5BF 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 D1:B5C3 DD 2A B9 A8 
              D1 -  -  -  			ld 		ix,(CodeAddress)
   48 D1:B5C8 -  -  -  -  _TLSearch:	
   49 D1:B5C8 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 D1:B5CA DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 D1:B5CD B7 -  -  -  			or 		a 						; if zero
   52 D1:B5CE 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 D1:B5D0 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 D1:B5D1 -  -  -  -  
   55 D1:B5D1 7B -  -  -  			ld 		a,e						; compare line address
   56 D1:B5D2 DD BE 01 -  			cp 		(ix+1)
   57 D1:B5D5 20 F1 -  -  			jr 		nz,_TLSearch
   58 D1:B5D7 7A -  -  -  			ld 		a,d
   59 D1:B5D8 DD BE 02 -  			cp 		(ix+2)
   60 D1:B5DB 20 EB -  -  			jr 		nz,_TLSearch
   61 D1:B5DD -  -  -  -  			;
   62 D1:B5DD DD 22 DD A8 
              D1 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 D1:B5E2 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 D1:B5E4 DD 23 -  -  			inc 	ix
   65 D1:B5E6 DD 23 -  -  			inc 	ix
   66 D1:B5E8 -  -  -  -  
   67 D1:B5E8 C9 -  -  -  			ret
   68 D1:B5E9 -  -  -  -  
   69 D1:B5E9 -  -  -  -  _TLNotFound:
   70 D1:B5E9 3E 0A C3 83 
              AD D1 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 D1:B5EF -  -  -  -  
   72 D1:B5EF -  -  -  -  ; ***************************************************************************************
   73 D1:B5EF -  -  -  -  ;
   74 D1:B5EF -  -  -  -  ;									Changes and Updates
   75 D1:B5EF -  -  -  -  ;
   76 D1:B5EF -  -  -  -  ; ***************************************************************************************
   77 D1:B5EF -  -  -  -  ;
   78 D1:B5EF -  -  -  -  ;		Date			Notes
   79 D1:B5EF -  -  -  -  ;		==== 			=====
   80 D1:B5EF -  -  -  -  ;
   81 D1:B5EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B5EF -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 D1:B5EF -  -  -  -  ; ***************************************************************************************
    2 D1:B5EF -  -  -  -  ; ***************************************************************************************
    3 D1:B5EF -  -  -  -  ;
    4 D1:B5EF -  -  -  -  ;		Name : 		if.asm
    5 D1:B5EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5EF -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B5EF -  -  -  -  ;		Reviewed :	No
    8 D1:B5EF -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 D1:B5EF -  -  -  -  ;
   10 D1:B5EF -  -  -  -  ; ***************************************************************************************
   11 D1:B5EF -  -  -  -  
   12 D1:B5EF -  -  -  -  ; ***************************************************************************************
   13 D1:B5EF -  -  -  -  ;
   14 D1:B5EF -  -  -  -  ;									If Command
   15 D1:B5EF -  -  -  -  ;
   16 D1:B5EF -  -  -  -  ; ***************************************************************************************
   17 D1:B5EF -  -  -  -  
   18 D1:B5EF -  -  -  -  Command_IF: ;; [if]
   19 D1:B5EF CD B6 AF D1 		call 	EvaluateInteger 			; work out the test.
   20 D1:B5F3 CD 15 BD D1 		call 	Int32Zero 					; test if zero
   21 D1:B5F7 28 1D -  -  		jr 		z,_IFFail
   22 D1:B5F9 -  -  -  -  		;
   23 D1:B5F9 -  -  -  -  		;	 	Passed
   24 D1:B5F9 -  -  -  -  		;
   25 D1:B5F9 DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 D1:B5FC DD 23 -  -  		inc 	ix
   27 D1:B5FE FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 D1:B600 CA A8 B5 D1 		jp 		z,Command_GOTO
   29 D1:B604 FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 D1:B606 C2 ED AD D1 		jp 		nz,SyntaxError
   31 D1:B60A DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 D1:B60D E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 D1:B60F FE 40 -  -  		cp 		$40
   34 D1:B611 CA A8 B5 D1 		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 D1:B615 C9 -  -  -  		ret 								; otherwise carry on.
   36 D1:B616 -  -  -  -  		;
   37 D1:B616 -  -  -  -  		;		Failed.
   38 D1:B616 -  -  -  -  		;
   39 D1:B616 -  -  -  -  _IFFail:
   40 D1:B616 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 D1:B618 0E B1 -  -  		ld 		c,KWD_ELSE
   42 D1:B61A CD 53 B6 D1 		call 	SearchForwardTokens 		; searching forward.
   43 D1:B61E FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 D1:B620 CA 07 AB D1 		jp 		z,EOLHandler 				; do the next line code.
   45 D1:B624 C9 -  -  -  		ret 								; otherwise carry on.
   46 D1:B625 -  -  -  -  
   47 D1:B625 -  -  -  -  ; ***************************************************************************************
   48 D1:B625 -  -  -  -  ;
   49 D1:B625 -  -  -  -  ;						Else command => Progress to next line
   50 D1:B625 -  -  -  -  ;
   51 D1:B625 -  -  -  -  ; ***************************************************************************************
   52 D1:B625 -  -  -  -  
   53 D1:B625 -  -  -  -  Command_Else: ;; [else]
   54 D1:B625 C3 07 AB D1 		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 D1:B629 -  -  -  -  
   56 D1:B629 -  -  -  -  ; ***************************************************************************************
   57 D1:B629 -  -  -  -  ;
   58 D1:B629 -  -  -  -  ;									Changes and Updates
   59 D1:B629 -  -  -  -  ;
   60 D1:B629 -  -  -  -  ; ***************************************************************************************
   61 D1:B629 -  -  -  -  ;
   62 D1:B629 -  -  -  -  ;		Date			Notes
   63 D1:B629 -  -  -  -  ;		==== 			=====
   64 D1:B629 -  -  -  -  ;
   65 D1:B629 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B629 -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 D1:B629 -  -  -  -  ; ***************************************************************************************
    2 D1:B629 -  -  -  -  ; ***************************************************************************************
    3 D1:B629 -  -  -  -  ;
    4 D1:B629 -  -  -  -  ;		Name : 		repeat.asm
    5 D1:B629 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B629 -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B629 -  -  -  -  ;		Reviewed :	No
    8 D1:B629 -  -  -  -  ;		Purpose :	Repeat/Until command
    9 D1:B629 -  -  -  -  ;
   10 D1:B629 -  -  -  -  ; ***************************************************************************************
   11 D1:B629 -  -  -  -  
   12 D1:B629 -  -  -  -  ; ***************************************************************************************
   13 D1:B629 -  -  -  -  ;
   14 D1:B629 -  -  -  -  ;									Repeat Command
   15 D1:B629 -  -  -  -  ;
   16 D1:B629 -  -  -  -  ; ***************************************************************************************
   17 D1:B629 -  -  -  -  
   18 D1:B629 -  -  -  -  Command_REPEAT: ;; [repeat]
   19 D1:B629 3E 23 -  -  			ld		a,STM_REPEAT
   20 D1:B62B CD 79 B6 D1 			call 	StackOpenFrame
   21 D1:B62F CD B7 B6 D1 			call 	StackSavePosition
   22 D1:B633 C9 -  -  -  			ret
   23 D1:B634 -  -  -  -  
   24 D1:B634 -  -  -  -  ; ***************************************************************************************
   25 D1:B634 -  -  -  -  ;
   26 D1:B634 -  -  -  -  ;									Until command
   27 D1:B634 -  -  -  -  ;
   28 D1:B634 -  -  -  -  ; ***************************************************************************************
   29 D1:B634 -  -  -  -  
   30 D1:B634 -  -  -  -  Command_Until: ;; [until]
   31 D1:B634 3E 23 -  -  			ld		a,STM_REPEAT
   32 D1:B636 CD B1 B6 D1 			call 	StackCheckFrame
   33 D1:B63A 20 11 -  -  			jr 		nz,_UntilError
   34 D1:B63C CD B6 AF D1 			call	EvaluateInteger 		; until what
   35 D1:B640 CD 15 BD D1 			call 	Int32Zero 				; check zero
   36 D1:B644 CA D2 B6 D1 			jp 		z,StackLoadPosition 	; if zero loop back
   37 D1:B648 CD 9E B6 D1 			call 	StackCloseFrame 		; otherwise end frame.
   38 D1:B64C C9 -  -  -  			ret
   39 D1:B64D -  -  -  -  _UntilError:
   40 D1:B64D 3E 15 C3 83 
              AD D1 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 D1:B653 -  -  -  -  
   42 D1:B653 -  -  -  -  ; ***************************************************************************************
   43 D1:B653 -  -  -  -  ;
   44 D1:B653 -  -  -  -  ;									Changes and Updates
   45 D1:B653 -  -  -  -  ;
   46 D1:B653 -  -  -  -  ; ***************************************************************************************
   47 D1:B653 -  -  -  -  ;
   48 D1:B653 -  -  -  -  ;		Date			Notes
   49 D1:B653 -  -  -  -  ;		==== 			=====
   50 D1:B653 -  -  -  -  ;
   51 D1:B653 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 D1:B653 -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 D1:B653 -  -  -  -  ; ***************************************************************************************
    2 D1:B653 -  -  -  -  ; ***************************************************************************************
    3 D1:B653 -  -  -  -  ;
    4 D1:B653 -  -  -  -  ;		Name : 		search.asm
    5 D1:B653 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B653 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B653 -  -  -  -  ;		Reviewed :	No
    8 D1:B653 -  -  -  -  ;		Purpose :	Search forward for token
    9 D1:B653 -  -  -  -  ;
   10 D1:B653 -  -  -  -  ; ***************************************************************************************
   11 D1:B653 -  -  -  -  
   12 D1:B653 -  -  -  -  ; ***************************************************************************************
   13 D1:B653 -  -  -  -  ;
   14 D1:B653 -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 D1:B653 -  -  -  -  ; 		and IX points to next byte.
   16 D1:B653 -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 D1:B653 -  -  -  -  ;
   18 D1:B653 -  -  -  -  ; ***************************************************************************************
   19 D1:B653 -  -  -  -  
   20 D1:B653 -  -  -  -  SearchForwardTokens:
   21 D1:B653 DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 D1:B656 DD 23 -  -  		inc 	ix
   23 D1:B658 B8 -  -  -  		cp 		b 							; exit if either found.
   24 D1:B659 C8 -  -  -  		ret 	z
   25 D1:B65A B9 -  -  -  		cp 		c
   26 D1:B65B C8 -  -  -  		ret 	z
   27 D1:B65C -  -  -  -  		;
   28 D1:B65C FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 D1:B65E 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 D1:B660 -  -  -  -  
   31 D1:B660 11 00 00 00 		ld 		de,0 						; put length into DE
   32 D1:B664 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:B667 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 D1:B668 13 -  -  -  		inc 	de
   35 D1:B669 DD 19 -  -  		add 	ix,de 						; jump forward
   36 D1:B66B 18 E6 -  -  		jr 		SearchForwardTokens
   37 D1:B66D -  -  -  -  
   38 D1:B66D -  -  -  -  ; ***************************************************************************************
   39 D1:B66D -  -  -  -  ;
   40 D1:B66D -  -  -  -  ;									Changes and Updates
   41 D1:B66D -  -  -  -  ;
   42 D1:B66D -  -  -  -  ; ***************************************************************************************
   43 D1:B66D -  -  -  -  ;
   44 D1:B66D -  -  -  -  ;		Date			Notes
   45 D1:B66D -  -  -  -  ;		==== 			=====
   46 D1:B66D -  -  -  -  ;
   47 D1:B66D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B66D -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 D1:B66D -  -  -  -  ; ***************************************************************************************
    2 D1:B66D -  -  -  -  ; ***************************************************************************************
    3 D1:B66D -  -  -  -  ;
    4 D1:B66D -  -  -  -  ;		Name : 		stack.asm
    5 D1:B66D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B66D -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B66D -  -  -  -  ;		Reviewed :	No
    8 D1:B66D -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:B66D -  -  -  -  ;
   10 D1:B66D -  -  -  -  ; ***************************************************************************************
   11 D1:B66D -  -  -  -  ; ***************************************************************************************
   12 D1:B66D -  -  -  -  ;
   13 D1:B66D -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 D1:B66D -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 D1:B66D -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 D1:B66D -  -  -  -  ;
   17 D1:B66D -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 D1:B66D -  -  -  -  ;		line) and offset 5 (offset in line)
   19 D1:B66D -  -  -  -  ;
   20 D1:B66D -  -  -  -  ; ***************************************************************************************
   21 D1:B66D -  -  -  -  ;
   22 D1:B66D -  -  -  -  ;								Clear the stack
   23 D1:B66D -  -  -  -  ;
   24 D1:B66D -  -  -  -  ; ***************************************************************************************
   25 D1:B66D -  -  -  -  
   26 D1:B66D -  -  -  -  StackReset:
   27 D1:B66D 2A BD A8 D1 		ld 		hl,(LanguageStack) 			; top of language stack
   28 D1:B671 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 D1:B672 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write out current position
   30 D1:B676 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 D1:B678 C9 -  -  -  		ret
   32 D1:B679 -  -  -  -  
   33 D1:B679 -  -  -  -  ; ***************************************************************************************
   34 D1:B679 -  -  -  -  ;
   35 D1:B679 -  -  -  -  ;								Open a stack frame type A
   36 D1:B679 -  -  -  -  ;
   37 D1:B679 -  -  -  -  ; ***************************************************************************************
   38 D1:B679 -  -  -  -  
   39 D1:B679 -  -  -  -  StackOpenFrame:
   40 D1:B679 F5 -  -  -  		push 	af 							; save frame type
   41 D1:B67A E6 0F -  -  		and 	$0F 						; get size of frame
   42 D1:B67C 87 -  -  -  		add 	a,a 						; double it
   43 D1:B67D 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 D1:B681 5F -  -  -  		ld 		e,a
   45 D1:B682 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get stack pointer
   46 D1:B686 AF -  -  -  		xor 	a
   47 D1:B687 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 D1:B689 22 D9 A8 D1 		ld 		(BasicSP),hl
   49 D1:B68D F1 -  -  -  		pop 	af 							; copy out frame type
   50 D1:B68E 77 -  -  -  		ld 		(hl),a
   51 D1:B68F ED 5B C1 A8 
              D1 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 D1:B694 AF -  -  -  		xor 	a
   53 D1:B695 ED 52 -  -  		sbc 	hl,de
   54 D1:B697 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 D1:B698 3E 16 C3 83 
              AD D1 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 D1:B69E -  -  -  -  
   57 D1:B69E -  -  -  -  ; ***************************************************************************************
   58 D1:B69E -  -  -  -  ;
   59 D1:B69E -  -  -  -  ;								Close Stack Frame
   60 D1:B69E -  -  -  -  ;
   61 D1:B69E -  -  -  -  ; ***************************************************************************************
   62 D1:B69E -  -  -  -  
   63 D1:B69E -  -  -  -  StackCloseFrame:
   64 D1:B69E 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   65 D1:B6A2 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 D1:B6A3 E6 0F -  -  		and 	$0F 						; put into UDE
   67 D1:B6A5 87 -  -  -  		add 	a,a 						; double it
   68 D1:B6A6 11 00 00 00 		ld 		de,$000000
   69 D1:B6AA 5F -  -  -  		ld 		e,a
   70 D1:B6AB 19 -  -  -  		add 	hl,de 						; close it
   71 D1:B6AC 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write it back
   72 D1:B6B0 C9 -  -  -  		ret
   73 D1:B6B1 -  -  -  -  
   74 D1:B6B1 -  -  -  -  ; ***************************************************************************************
   75 D1:B6B1 -  -  -  -  ;
   76 D1:B6B1 -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 D1:B6B1 -  -  -  -  ;
   78 D1:B6B1 -  -  -  -  ; ***************************************************************************************
   79 D1:B6B1 -  -  -  -  
   80 D1:B6B1 -  -  -  -  StackCheckFrame:
   81 D1:B6B1 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   82 D1:B6B5 BE -  -  -  		cp 		(hl) 						; get stack marker
   83 D1:B6B6 C9 -  -  -  		ret
   84 D1:B6B7 -  -  -  -  
   85 D1:B6B7 -  -  -  -  ; ***************************************************************************************
   86 D1:B6B7 -  -  -  -  ;
   87 D1:B6B7 -  -  -  -  ;								Save position on stack
   88 D1:B6B7 -  -  -  -  ;
   89 D1:B6B7 -  -  -  -  ; ***************************************************************************************
   90 D1:B6B7 -  -  -  -  
   91 D1:B6B7 -  -  -  -  StackSavePosition:
   92 D1:B6B7 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 D1:B6BB 23 -  -  -  		inc 	hl
   94 D1:B6BC ED 5B DD A8 
              D1 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 D1:B6C1 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 D1:B6C7 -  -  -  -  		;
   97 D1:B6C7 E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 D1:B6C8 DD E5 -  -  		push 	ix 							; HL = current position
   99 D1:B6CA E1 -  -  -  		pop 	hl
  100 D1:B6CB AF -  -  -  		xor 	a 							; calculate offset
  101 D1:B6CC ED 52 -  -  		sbc 	hl,de
  102 D1:B6CE 7D -  -  -  		ld 		a,l 						; into A
  103 D1:B6CF E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 D1:B6D0 77 -  -  -  		ld 		(hl),a
  105 D1:B6D1 C9 -  -  -  		ret
  106 D1:B6D2 -  -  -  -  
  107 D1:B6D2 -  -  -  -  ; ***************************************************************************************
  108 D1:B6D2 -  -  -  -  ;
  109 D1:B6D2 -  -  -  -  ;								Load position off stack
  110 D1:B6D2 -  -  -  -  ;
  111 D1:B6D2 -  -  -  -  ; ***************************************************************************************
  112 D1:B6D2 -  -  -  -  
  113 D1:B6D2 -  -  -  -  StackLoadPosition:
  114 D1:B6D2 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 D1:B6D6 23 -  -  -  		inc 	hl
  116 D1:B6D7 E5 -  -  -  		push 	hl 							; save on stack
  117 D1:B6D8 ED 27 -  -  		ld_ind_hl 							; get start of line
  118 D1:B6DA 22 DD A8 D1 		ld 		(CurrentLineStart),hl 		; write it back
  119 D1:B6DE D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 D1:B6DF 13 -  -  -  		inc 	de
  121 D1:B6E0 13 -  -  -  		inc 	de
  122 D1:B6E1 13 -  -  -  		inc 	de
  123 D1:B6E2 13 -  -  -  		inc 	de
  124 D1:B6E3 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 D1:B6E4 11 00 00 00 		ld 		de,$000000
  126 D1:B6E8 5F -  -  -  		ld 		e,a
  127 D1:B6E9 19 -  -  -  		add 	hl,de 						; add to start => position
  128 D1:B6EA E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 D1:B6EB DD E1 -  -  		pop 	ix
  130 D1:B6ED C9 -  -  -  		ret
  131 D1:B6EE -  -  -  -  
  132 D1:B6EE -  -  -  -  ; ***************************************************************************************
  133 D1:B6EE -  -  -  -  ;
  134 D1:B6EE -  -  -  -  ;									Changes and Updates
  135 D1:B6EE -  -  -  -  ;
  136 D1:B6EE -  -  -  -  ; ***************************************************************************************
  137 D1:B6EE -  -  -  -  ;
  138 D1:B6EE -  -  -  -  ;		Date			Notes
  139 D1:B6EE -  -  -  -  ;		==== 			=====
  140 D1:B6EE -  -  -  -  ;
  141 D1:B6EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B6EE -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B6EE -  -  -  -  ; ***************************************************************************************
    2 D1:B6EE -  -  -  -  ; ***************************************************************************************
    3 D1:B6EE -  -  -  -  ;
    4 D1:B6EE -  -  -  -  ;		Name : 		utility.asm
    5 D1:B6EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6EE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6EE -  -  -  -  ;		Reviewed :	No
    8 D1:B6EE -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B6EE -  -  -  -  ;
   10 D1:B6EE -  -  -  -  ; ***************************************************************************************
   11 D1:B6EE -  -  -  -  ; ***************************************************************************************
   12 D1:B6EE -  -  -  -  
   13 D1:B6EE -  -  -  -  ; ***************************************************************************************
   14 D1:B6EE -  -  -  -  ;
   15 D1:B6EE -  -  -  -  ;							Print ASCII string at HL
   16 D1:B6EE -  -  -  -  ;
   17 D1:B6EE -  -  -  -  ; ***************************************************************************************
   18 D1:B6EE -  -  -  -  
   19 D1:B6EE -  -  -  -  PrintStringAtHL:
   20 D1:B6EE 7E -  -  -  		ld 		a,(hl)
   21 D1:B6EF FE 20 -  -  		cp 		$20		
   22 D1:B6F1 D8 -  -  -  		ret 	c
   23 D1:B6F2 CD D0 BD D1 		call 	SYSPrintChar
   24 D1:B6F6 23 -  -  -  		inc 	hl
   25 D1:B6F7 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B6F9 -  -  -  -  
   27 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   28 D1:B6F9 -  -  -  -  ;
   29 D1:B6F9 -  -  -  -  ;									Changes and Updates
   30 D1:B6F9 -  -  -  -  ;
   31 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   32 D1:B6F9 -  -  -  -  ;
   33 D1:B6F9 -  -  -  -  ;		Date			Notes
   34 D1:B6F9 -  -  -  -  ;		==== 			=====
   35 D1:B6F9 -  -  -  -  ;
   36 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   37 D1:B6F9 -  -  -  -  		
Listing for file "_build.asm"
   67 D1:B6F9 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B6F9 -  -  -  -  ; ***************************************************************************************
    2 D1:B6F9 -  -  -  -  ; ***************************************************************************************
    3 D1:B6F9 -  -  -  -  ;
    4 D1:B6F9 -  -  -  -  ;		Name : 		create.asm
    5 D1:B6F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6F9 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B6F9 -  -  -  -  ;		Reviewed :	No
    8 D1:B6F9 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B6F9 -  -  -  -  ;
   10 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   11 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   12 D1:B6F9 -  -  -  -  
   13 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   14 D1:B6F9 -  -  -  -  ;
   15 D1:B6F9 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B6F9 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B6F9 -  -  -  -  ;
   18 D1:B6F9 -  -  -  -  ; ***************************************************************************************
   19 D1:B6F9 -  -  -  -  
   20 D1:B6F9 -  -  -  -  VariableCreate:		
   21 D1:B6F9 -  -  -  -  		;
   22 D1:B6F9 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B6F9 -  -  -  -  		;
   24 D1:B6F9 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B6FD 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B6FE E5 -  -  -  		push 	hl 							; save count.
   27 D1:B6FF CD F5 B3 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B703 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B704 -  -  -  -  		;
   30 D1:B704 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B704 -  -  -  -  		;
   32 D1:B704 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B705 -  -  -  -  _VCClear:
   34 D1:B705 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B707 23 -  -  -  		inc 	hl
   36 D1:B708 0B -  -  -  		dec 	bc
   37 D1:B709 78 -  -  -  		ld		a,b
   38 D1:B70A B1 -  -  -  		or 		c
   39 D1:B70B 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B70D E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B70E -  -  -  -  		;
   42 D1:B70E -  -  -  -  		;		Now start to create the data.
   43 D1:B70E -  -  -  -  		;
   44 D1:B70E E5 -  -  -  		push 	hl 							; save start
   45 D1:B70F -  -  -  -  		;
   46 D1:B70F -  -  -  -  		;		Write hash to +0
   47 D1:B70F -  -  -  -  		;
   48 D1:B70F 3A 0F A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B713 77 -  -  -  		ld 		(hl),a
   50 D1:B714 23 -  -  -  		inc 	hl
   51 D1:B715 -  -  -  -  		;
   52 D1:B715 -  -  -  -  		;		Write list head to +1
   53 D1:B715 -  -  -  -  		;
   54 D1:B715 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B716 2A 11 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B71A ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B71C EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B71D E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B71E ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B724 -  -  -  -  		;
   61 D1:B724 -  -  -  -  		;		Write variable name to +5
   62 D1:B724 -  -  -  -  		;
   63 D1:B724 ED 5B 0B A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B729 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B72F -  -  -  -  		;
   66 D1:B72F D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B730 2A 11 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B734 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B73A -  -  -  -  		;
   70 D1:B73A EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B73B C9 -  -  -  		ret
   72 D1:B73C -  -  -  -  
   73 D1:B73C -  -  -  -  ; ***************************************************************************************
   74 D1:B73C -  -  -  -  ;
   75 D1:B73C -  -  -  -  ;									Changes and Updates
   76 D1:B73C -  -  -  -  ;
   77 D1:B73C -  -  -  -  ; ***************************************************************************************
   78 D1:B73C -  -  -  -  ;
   79 D1:B73C -  -  -  -  ;		Date			Notes
   80 D1:B73C -  -  -  -  ;		==== 			=====
   81 D1:B73C -  -  -  -  ;
   82 D1:B73C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B73C -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B73C -  -  -  -  ; ***************************************************************************************
    2 D1:B73C -  -  -  -  ; ***************************************************************************************
    3 D1:B73C -  -  -  -  ;
    4 D1:B73C -  -  -  -  ;		Name : 		find.asm
    5 D1:B73C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B73C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B73C -  -  -  -  ;		Reviewed :	No
    8 D1:B73C -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B73C -  -  -  -  ;
   10 D1:B73C -  -  -  -  ; ***************************************************************************************
   11 D1:B73C -  -  -  -  ; ***************************************************************************************
   12 D1:B73C -  -  -  -  
   13 D1:B73C -  -  -  -  ; ***************************************************************************************
   14 D1:B73C -  -  -  -  ;
   15 D1:B73C -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B73C -  -  -  -  ; 		variable information at (IX)
   17 D1:B73C -  -  -  -  ;
   18 D1:B73C -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B73C -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B73C -  -  -  -  ;
   21 D1:B73C -  -  -  -  ; ***************************************************************************************
   22 D1:B73C -  -  -  -  
   23 D1:B73C -  -  -  -  FindVariable:
   24 D1:B73C DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B73F FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B741 D2 ED AD D1 		jp 		nc,SyntaxError 		
   27 D1:B745 -  -  -  -  
   28 D1:B745 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B748 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B74A 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B74C FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B74E 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B750 -  -  -  -  		;
   34 D1:B750 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B750 -  -  -  -  		;
   36 D1:B750 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B754 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B757 87 -  -  -  		add 	a,a 						; x4
   39 D1:B758 87 -  -  -  		add 	a,a
   40 D1:B759 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B75A 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B75B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B75D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B75F DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B761 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B762 C9 -  -  -  		ret
   47 D1:B763 -  -  -  -  		;
   48 D1:B763 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B763 -  -  -  -  		;
   50 D1:B763 -  -  -  -  _FVNotSimple:
   51 D1:B763 CD C9 B7 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B767 CD 05 B8 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B76B 38 14 -  -  		jr 		c,_FVNotFound  				
   54 D1:B76D -  -  -  -  		;
   55 D1:B76D -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B76D -  -  -  -  		;
   57 D1:B76D -  -  -  -  _FVExitReference:		
   58 D1:B76D 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B771 19 -  -  -  		add 	hl,de 
   60 D1:B772 -  -  -  -  		;
   61 D1:B772 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 D1:B772 -  -  -  -  		;
   63 D1:B772 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 D1:B775 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 D1:B777 CC A0 B7 D1 		call 	z,ArrayLookup 				; array access required.
   66 D1:B77B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 D1:B77D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 D1:B77F AF -  -  -  		xor 	a 							; clear carry and return
   69 D1:B780 C9 -  -  -  		ret
   70 D1:B781 -  -  -  -  		;
   71 D1:B781 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 D1:B781 -  -  -  -  		;
   73 D1:B781 -  -  -  -  _FVNotFound:		
   74 D1:B781 3A 01 A9 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 D1:B785 B7 -  -  -  		or 		a
   76 D1:B786 28 11 -  -  		jr 		z,_FVFail
   77 D1:B788 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 D1:B78B FE 95 -  -  		cp 		KWD_LPAREN 		
   79 D1:B78D 28 0A -  -  		jr 		z,_FVFail
   80 D1:B78F 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 D1:B793 CD F9 B6 D1 		call 	VariableCreate 				; create a new variable.
   82 D1:B797 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 D1:B799 -  -  -  -  
   84 D1:B799 -  -  -  -  _FVFail:
   85 D1:B799 DD 2A 0B A9 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 D1:B79E 37 -  -  -  		scf
   87 D1:B79F C9 -  -  -  		ret
   88 D1:B7A0 -  -  -  -  
   89 D1:B7A0 -  -  -  -  ; ***************************************************************************************
   90 D1:B7A0 -  -  -  -  ;
   91 D1:B7A0 -  -  -  -  ;									 Array lookup
   92 D1:B7A0 -  -  -  -  ;
   93 D1:B7A0 -  -  -  -  ; ***************************************************************************************
   94 D1:B7A0 -  -  -  -  
   95 D1:B7A0 -  -  -  -  ArrayLookup:
   96 D1:B7A0 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 D1:B7A1 CD 90 AF D1 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 D1:B7A5 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 D1:B7A6 7C -  -  -  		ld 		a,h
  100 D1:B7A7 B5 -  -  -  		or 		l
  101 D1:B7A8 D9 -  -  -  		exx
  102 D1:B7A9 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 D1:B7AB 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 D1:B7AF 54 -  -  -  		ld 		d,h
  105 D1:B7B0 5D -  -  -  		ld 		e,l
  106 D1:B7B1 E1 -  -  -  		pop 	hl 							; get the array base back
  107 D1:B7B2 E5 -  -  -  		push 	hl
  108 D1:B7B3 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 D1:B7B5 AF -  -  -  		xor  	a							; subtract maximum from index
  110 D1:B7B6 ED 52 -  -  		sbc 	hl,de
  111 D1:B7B8 DA C3 B7 D1 		jp 		c,_ALBadValue 				; if max < index then error
  112 D1:B7BC EB -  -  -  		ex 		de,hl 						; index back into HL
  113 D1:B7BD 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 D1:B7BE 29 -  -  -  		add 	hl,hl 						; x 4
  115 D1:B7BF 29 -  -  -  		add 	hl,hl
  116 D1:B7C0 D1 -  -  -  		pop 	de 							; get array base back
  117 D1:B7C1 19 -  -  -  		add 	hl,de 						; add offset to it
  118 D1:B7C2 C9 -  -  -  		ret
  119 D1:B7C3 -  -  -  -  
  120 D1:B7C3 -  -  -  -  _ALBadValue:
  121 D1:B7C3 3E 09 C3 83 
              AD D1 -  -  		ERR_INDEX
  122 D1:B7C9 -  -  -  -  		
  123 D1:B7C9 -  -  -  -  ; ***************************************************************************************
  124 D1:B7C9 -  -  -  -  ;
  125 D1:B7C9 -  -  -  -  ;									Changes and Updates
  126 D1:B7C9 -  -  -  -  ;
  127 D1:B7C9 -  -  -  -  ; ***************************************************************************************
  128 D1:B7C9 -  -  -  -  ;
  129 D1:B7C9 -  -  -  -  ;		Date			Notes
  130 D1:B7C9 -  -  -  -  ;		==== 			=====
  131 D1:B7C9 -  -  -  -  ;
  132 D1:B7C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:B7C9 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B7C9 -  -  -  -  ; ***************************************************************************************
    2 D1:B7C9 -  -  -  -  ; ***************************************************************************************
    3 D1:B7C9 -  -  -  -  ;
    4 D1:B7C9 -  -  -  -  ;		Name : 		info.asm
    5 D1:B7C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B7C9 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B7C9 -  -  -  -  ;		Reviewed :	No
    8 D1:B7C9 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B7C9 -  -  -  -  ;
   10 D1:B7C9 -  -  -  -  ; ***************************************************************************************
   11 D1:B7C9 -  -  -  -  ; ***************************************************************************************
   12 D1:B7C9 -  -  -  -  
   13 D1:B7C9 -  -  -  -  ; ***************************************************************************************
   14 D1:B7C9 -  -  -  -  ;
   15 D1:B7C9 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B7C9 -  -  -  -  ; 		after the identifier.
   17 D1:B7C9 -  -  -  -  ;
   18 D1:B7C9 -  -  -  -  ; ***************************************************************************************
   19 D1:B7C9 -  -  -  -  
   20 D1:B7C9 -  -  -  -  VariableInformation:
   21 D1:B7C9 DD 22 0B A9 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B7CE -  -  -  -  		;
   23 D1:B7CE -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B7CE -  -  -  -  		;
   25 D1:B7CE 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B7D0 -  -  -  -  _VICalculateHash:
   27 D1:B7D0 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B7D3 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B7D5 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B7D7 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B7D8 07 -  -  -  		rlca
   32 D1:B7D9 07 -  -  -  		rlca
   33 D1:B7DA 80 -  -  -  		add 	a,b
   34 D1:B7DB 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B7DC DD 23 -  -  		inc 	ix 							; next character
   36 D1:B7DE 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B7E0 -  -  -  -  		;
   38 D1:B7E0 -  -  -  -  _VIHashDone:
   39 D1:B7E0 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B7E1 -  -  -  -  		;
   41 D1:B7E1 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B7E1 -  -  -  -  		;
   43 D1:B7E1 32 0F A9 D1 		ld 		(VarHash),a
   44 D1:B7E5 -  -  -  -  		;
   45 D1:B7E5 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B7E5 -  -  -  -  		;		
   47 D1:B7E5 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B7E7 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B7EB 6F -  -  -  		ld 		l,a
   50 D1:B7EC 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B7ED 29 -  -  -  		add 	hl,hl
   52 D1:B7EE -  -  -  -  		;
   53 D1:B7EE ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B7F3 19 -  -  -  		add 	hl,de
   55 D1:B7F4 -  -  -  -  		;
   56 D1:B7F4 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B7F7 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B7F9 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B7FB 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B7FF 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B800 -  -  -  -  _VINotArray:
   62 D1:B800 22 11 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B804 C9 -  -  -  		ret
   64 D1:B805 -  -  -  -  
   65 D1:B805 -  -  -  -  ; ***************************************************************************************
   66 D1:B805 -  -  -  -  ;
   67 D1:B805 -  -  -  -  ;									Changes and Updates
   68 D1:B805 -  -  -  -  ;
   69 D1:B805 -  -  -  -  ; ***************************************************************************************
   70 D1:B805 -  -  -  -  ;
   71 D1:B805 -  -  -  -  ;		Date			Notes
   72 D1:B805 -  -  -  -  ;		==== 			=====
   73 D1:B805 -  -  -  -  ;
   74 D1:B805 -  -  -  -  ; ***************************************************************************************
   75 D1:B805 -  -  -  -  
Listing for file "_build.asm"
   70 D1:B805 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B805 -  -  -  -  ; ***************************************************************************************
    2 D1:B805 -  -  -  -  ; ***************************************************************************************
    3 D1:B805 -  -  -  -  ;
    4 D1:B805 -  -  -  -  ;		Name : 		search.asm
    5 D1:B805 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B805 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B805 -  -  -  -  ;		Reviewed :	No
    8 D1:B805 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B805 -  -  -  -  ;
   10 D1:B805 -  -  -  -  ; ***************************************************************************************
   11 D1:B805 -  -  -  -  ; ***************************************************************************************
   12 D1:B805 -  -  -  -  
   13 D1:B805 -  -  -  -  ; ***************************************************************************************
   14 D1:B805 -  -  -  -  ;
   15 D1:B805 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B805 -  -  -  -  ;		CS if failed.
   17 D1:B805 -  -  -  -  ;
   18 D1:B805 -  -  -  -  ; ***************************************************************************************
   19 D1:B805 -  -  -  -  
   20 D1:B805 -  -  -  -  VariableSearchList:
   21 D1:B805 2A 11 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B809 -  -  -  -  		;
   23 D1:B809 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B809 -  -  -  -  		;		the address of the hash record
   25 D1:B809 -  -  -  -  		;
   26 D1:B809 -  -  -  -  _VSLLoop:
   27 D1:B809 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B80B -  -  -  -  		;
   29 D1:B80B E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B80C AF -  -  -  		xor 	a
   31 D1:B80D ED 6A -  -  		adc 	hl,hl
   32 D1:B80F E1 -  -  -  		pop 	hl
   33 D1:B810 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B812 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B813 C8 -  -  -  		ret 	z
   36 D1:B814 -  -  -  -  _VSLRecord:
   37 D1:B814 -  -  -  -  		;
   38 D1:B814 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B814 -  -  -  -  		;
   40 D1:B814 3A 0F A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B818 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B819 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B81A 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B81C -  -  -  -  		;
   45 D1:B81C -  -  -  -  		;		Now check the name
   46 D1:B81C -  -  -  -  		;
   47 D1:B81C E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B81D 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B81E 23 -  -  -  		inc 	hl
   50 D1:B81F 23 -  -  -  		inc 	hl
   51 D1:B820 23 -  -  -  		inc 	hl
   52 D1:B821 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B823 ED 5B 0B A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B828 -  -  -  -  		;
   55 D1:B828 -  -  -  -  		;		Check individual characters
   56 D1:B828 -  -  -  -  		;
   57 D1:B828 -  -  -  -  _VSLCharacter:
   58 D1:B828 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B829 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B82B 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B82D BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B82E 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B82F 13 -  -  -  		inc 	de
   64 D1:B830 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B832 -  -  -  -  		;
   66 D1:B832 -  -  -  -  _VSLFailed:
   67 D1:B832 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B833 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B835 -  -  -  -  		;
   70 D1:B835 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B835 -  -  -  -  		;		
   72 D1:B835 -  -  -  -  _VSLEndIdentifier:
   73 D1:B835 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B836 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B838 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B83A -  -  -  -  		;
   77 D1:B83A E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B83B 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B83C AF -  -  -  		xor 	a 							; clear carry
   80 D1:B83D C9 -  -  -  		ret
   81 D1:B83E -  -  -  -  
   82 D1:B83E -  -  -  -  ; ***************************************************************************************
   83 D1:B83E -  -  -  -  ;
   84 D1:B83E -  -  -  -  ;									Changes and Updates
   85 D1:B83E -  -  -  -  ;
   86 D1:B83E -  -  -  -  ; ***************************************************************************************
   87 D1:B83E -  -  -  -  ;
   88 D1:B83E -  -  -  -  ;		Date			Notes
   89 D1:B83E -  -  -  -  ;		==== 			=====
   90 D1:B83E -  -  -  -  ;
   91 D1:B83E -  -  -  -  ; ***************************************************************************************
   92 D1:B83E -  -  -  -  		
Listing for file "_build.asm"
   71 D1:B83E -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B83E -  -  -  -  ;
    2 D1:B83E -  -  -  -  ;	This file is automatically generated.
    3 D1:B83E -  -  -  -  ;
    4 D1:B83E 00 00 -  -  	.block	$20-($ & $1F)
    5 D1:B840 -  -  -  -  PrecedenceTable:
    6 D1:B840 06 -  -  -  	.db	6	; $0083 !
    7 D1:B841 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B842 05 -  -  -  	.db	5	; $0085 *
    9 D1:B843 05 -  -  -  	.db	5	; $0086 /
   10 D1:B844 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B845 05 -  -  -  	.db	5	; $0088 div
   12 D1:B846 04 -  -  -  	.db	4	; $0089 +
   13 D1:B847 04 -  -  -  	.db	4	; $008a -
   14 D1:B848 03 -  -  -  	.db	3	; $008b >=
   15 D1:B849 03 -  -  -  	.db	3	; $008c <=
   16 D1:B84A 03 -  -  -  	.db	3	; $008d >
   17 D1:B84B 03 -  -  -  	.db	3	; $008e <
   18 D1:B84C 03 -  -  -  	.db	3	; $008f =
   19 D1:B84D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B84E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B84F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B850 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B851 -  -  -  -  
Listing for file "_build.asm"
   72 D1:B851 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B851 -  -  -  -  ;
    2 D1:B851 -  -  -  -  ;	This is automatically generated.
    3 D1:B851 -  -  -  -  ;
    4 D1:B851 -  -  -  -  ErrorIDTable:
    5 D1:B851 BD B8 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B855 C3 B8 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B859 D4 B8 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B85D E2 B8 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B861 EC B8 D1 00 	.dw	ErrText_data & $FFFF,ErrText_data >> 16
   10 D1:B865 F8 B8 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   11 D1:B869 02 B9 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   12 D1:B86D 1C B9 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   13 D1:B871 2D B9 D1 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   14 D1:B875 42 B9 D1 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   15 D1:B879 52 B9 D1 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   16 D1:B87D 67 B9 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   17 D1:B881 75 B9 D1 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   18 D1:B885 86 B9 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   19 D1:B889 94 B9 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   20 D1:B88D 9E B9 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   21 D1:B891 B3 B9 D1 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   22 D1:B895 C8 B9 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   23 D1:B899 DE B9 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   24 D1:B89D EC B9 D1 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   25 D1:B8A1 FF B9 D1 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   26 D1:B8A5 11 BA D1 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   27 D1:B8A9 26 BA D1 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   28 D1:B8AD 32 BA D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   29 D1:B8B1 37 BA D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   30 D1:B8B5 44 BA D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   31 D1:B8B9 55 BA D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   32 D1:B8BD -  -  -  -  
   33 D1:B8BD -  -  -  -  ErrText_warmstart:
   34 D1:B8BD 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   35 D1:B8C3 -  -  -  -  ErrText_assert:
   36 D1:B8C3 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   37 D1:B8D4 -  -  -  -  ErrText_badtype:
   38 D1:B8D4 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   39 D1:B8E2 -  -  -  -  ErrText_badvalue:
   40 D1:B8E2 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   41 D1:B8EC -  -  -  -  ErrText_data:
   42 D1:B8EC 4F 75 74 20 
              6F 66 20 44 
              61 74 61 00 	.db "Out of Data",0
   43 D1:B8F8 -  -  -  -  ErrText_dim:
   44 D1:B8F8 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   45 D1:B902 -  -  -  -  ErrText_disabled:
   46 D1:B902 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   47 D1:B91C -  -  -  -  ErrText_divzero:
   48 D1:B91C 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   49 D1:B92D -  -  -  -  ErrText_gosub:
   50 D1:B92D 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   51 D1:B942 -  -  -  -  ErrText_index:
   52 D1:B942 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   53 D1:B952 -  -  -  -  ErrText_lineno:
   54 D1:B952 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   55 D1:B967 -  -  -  -  ErrText_memory:
   56 D1:B967 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   57 D1:B975 -  -  -  -  ErrText_next:
   58 D1:B975 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   59 D1:B986 -  -  -  -  ErrText_nocomma:
   60 D1:B986 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   61 D1:B994 -  -  -  -  ErrText_nodollar:
   62 D1:B994 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   63 D1:B99E -  -  -  -  ErrText_nolbracket:
   64 D1:B99E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   65 D1:B9B3 -  -  -  -  ErrText_noproc:
   66 D1:B9B3 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   67 D1:B9C8 -  -  -  -  ErrText_norbracket:
   68 D1:B9C8 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   69 D1:B9DE -  -  -  -  ErrText_notref:
   70 D1:B9DE 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   71 D1:B9EC -  -  -  -  ErrText_param:
   72 D1:B9EC 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   73 D1:B9FF -  -  -  -  ErrText_proc:
   74 D1:B9FF 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   75 D1:BA11 -  -  -  -  ErrText_repeat:
   76 D1:BA11 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   77 D1:BA26 -  -  -  -  ErrText_stack:
   78 D1:BA26 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   79 D1:BA32 -  -  -  -  ErrText_stop:
   80 D1:BA32 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   81 D1:BA37 -  -  -  -  ErrText_syntax:
   82 D1:BA37 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   83 D1:BA44 -  -  -  -  ErrText_todo:
   84 D1:BA44 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   85 D1:BA55 -  -  -  -  ErrText_unknownvar:
   86 D1:BA55 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   73 D1:BA66 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:BA66 -  -  -  -  ;
    2 D1:BA66 -  -  -  -  ;	Vectors for set 0
    3 D1:BA66 -  -  -  -  ;
    4 D1:BA66 -  -  -  -  VectorsSet0:
    5 D1:BA66 07 AB D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:BA6A A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:BA6E A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:BA72 63 AE D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:BA76 6C AE D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:BA7A 0F AE D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:BA7E 1D AE D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:BA82 2B AE D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:BA86 1D AE D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:BA8A F3 AD D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:BA8E 01 AE D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:BA92 CA AE D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:BA96 C0 AE D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:BA9A AC AE D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:BA9E A2 AE D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:BAA2 98 AE D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:BAA6 B6 AE D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:BAAA 39 AE D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:BAAE 47 AE D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:BAB2 55 AE D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:BAB6 3C B2 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:BABA 34 B2 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:BABE 56 B1 D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:BAC2 83 B1 D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:BAC6 45 B1 D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:BACA 1B B1 D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:BACE 1A B2 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:BAD2 4B B2 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:BAD6 31 B1 D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:BADA 28 B1 D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:BADE 61 B1 D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:BAE2 76 B1 D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:BAE6 73 B2 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:BAEA 7A B2 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:BAEE 87 B2 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:BAF2 8A AE D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:BAF6 8E AE D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:BAFA 4C AA D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:BAFE 4C AA D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:BB02 50 AA D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:BB06 4C AA D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:BB0A EE AB D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:BB0E 4C AA D1 00 	addr(BadCmd_LSBracket)           ; $00aa [
   48 D1:BB12 4C AA D1 00 	addr(BadCmd_RSBracket)           ; $00ab ]
   49 D1:BB16 4C AA D1 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 D1:BB1A 29 B6 D1 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 D1:BB1E 34 B6 D1 00 	addr(Command_Until)              ; $00ae until
   52 D1:BB22 EF B5 D1 00 	addr(Command_IF)                 ; $00af if
   53 D1:BB26 4C AA D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:BB2A 25 B6 D1 00 	addr(Command_Else)               ; $00b1 else
   55 D1:BB2E 8B B4 D1 00 	addr(Command_FOR)                ; $00b2 for
   56 D1:BB32 4C AA D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:BB36 4C AA D1 00 	addr(BadCmd_Step)                ; $00b4 step
   58 D1:BB3A 21 B5 D1 00 	addr(Command_Next)               ; $00b5 next
   59 D1:BB3E 4C AA D1 00 	addr(BadCmd_Def)                 ; $00b6 def
   60 D1:BB42 27 B3 D1 00 	addr(Command_PROC)               ; $00b7 proc
   61 D1:BB46 81 B3 D1 00 	addr(Command_ENDPROC)            ; $00b8 endproc
   62 D1:BB4A 7C B5 D1 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 D1:BB4E 91 B5 D1 00 	addr(Command_Return)             ; $00ba return
   64 D1:BB52 A8 B5 D1 00 	addr(Command_GOTO)               ; $00bb goto
   65 D1:BB56 9C B2 D1 00 	addr(Command_LOCAL)              ; $00bc local
   66 D1:BB5A 51 AA D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:BB5E EE AB D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:BB62 1E AB D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:BB66 84 AC D1 00 	addr(Command_VDU)                ; $00c0 vdu
   70 D1:BB6A 83 AB D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:BB6E A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:BB72 A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:BB76 5E BF D1 00 	addr(Command_LIST)               ; $00c4 list
   74 D1:BB7A 7B B4 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:BB7E 0B AC D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:BB82 B8 AC D1 00 	addr(Command_READ)               ; $00c7 read
   77 D1:BB86 4C AA D1 00 	addr(BadCmd_Data)                ; $00c8 data
   78 D1:BB8A 2D AD D1 00 	addr(Command_RESTORE)            ; $00c9 restore
   79 D1:BB8E 3B AA D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:BB92 17 B4 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:BB96 01 AB D1 00 	addr(Command_END)                ; $00cc end
   82 D1:BB9A 7E AC D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:BB9E -  -  -  -  ;
   84 D1:BB9E -  -  -  -  ;	Vectors for set 1
   85 D1:BB9E -  -  -  -  ;
   86 D1:BB9E -  -  -  -  VectorsSet1:
   87 D1:BB9E -  -  -  -  ;
   88 D1:BB9E -  -  -  -  ;	Vectors for set 2
   89 D1:BB9E -  -  -  -  ;
   90 D1:BB9E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   74 D1:BB9E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:BB9E -  -  -  -  ; ***************************************************************************************
    2 D1:BB9E -  -  -  -  ; ***************************************************************************************
    3 D1:BB9E -  -  -  -  ;
    4 D1:BB9E -  -  -  -  ;		Name : 		idivide.asm
    5 D1:BB9E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BB9E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BB9E -  -  -  -  ;		Reviewed :	No
    8 D1:BB9E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:BB9E -  -  -  -  ;
   10 D1:BB9E -  -  -  -  ; ***************************************************************************************
   11 D1:BB9E -  -  -  -  ; ***************************************************************************************
   12 D1:BB9E -  -  -  -  
   13 D1:BB9E -  -  -  -  ; ***************************************************************************************
   14 D1:BB9E -  -  -  -  ;
   15 D1:BB9E -  -  -  -  ;								Unsigned integer divide
   16 D1:BB9E -  -  -  -  ;
   17 D1:BB9E -  -  -  -  ; ***************************************************************************************
   18 D1:BB9E -  -  -  -  
   19 D1:BB9E -  -  -  -  Int32UDivide:
   20 D1:BB9E 37 -  -  -  		scf
   21 D1:BB9F C3 E3 BB D1 		jp 		_I32UnsignedDivide		
   22 D1:BBA3 -  -  -  -  
   23 D1:BBA3 -  -  -  -  ; ***************************************************************************************
   24 D1:BBA3 -  -  -  -  ;
   25 D1:BBA3 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:BBA3 -  -  -  -  ;
   27 D1:BBA3 -  -  -  -  ; ***************************************************************************************
   28 D1:BBA3 -  -  -  -  
   29 D1:BBA3 -  -  -  -  Int32SDivide:
   30 D1:BBA3 37 -  -  -  		scf
   31 D1:BBA4 18 01 -  -  		jr 		_I32SDivide
   32 D1:BBA6 -  -  -  -  Int32Modulus:
   33 D1:BBA6 AF -  -  -  		xor 	a
   34 D1:BBA7 -  -  -  -  _I32SDivide:
   35 D1:BBA7 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:BBA8 F5 -  -  -  		push 	af
   37 D1:BBA9 08 -  -  -  		ex 		af,af'
   38 D1:BBAA -  -  -  -  
   39 D1:BBAA D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:BBAB D9 -  -  -  		exx
   41 D1:BBAC D5 -  -  -  		push 	de
   42 D1:BBAD D9 -  -  -  		exx
   43 D1:BBAE -  -  -  -  
   44 D1:BBAE F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:BBAF AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:BBB0 CD D0 BB D1 		call 	_I32CheckHLSignSwap
   47 D1:BBB4 CD D0 BB D1 		call 	_I32CheckHLSignSwap
   48 D1:BBB8 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:BBB9 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:BBBA F5 -  -  -  		push 	af
   51 D1:BBBB CD E3 BB D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:BBBF F1 -  -  -  		pop 	af 							; get function back
   53 D1:BBC0 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:BBC2 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:BBC3 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:BBC5 C4 46 BD D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:BBC9 -  -  -  -  _I32SDExit:
   58 D1:BBC9 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:BBCA D1 -  -  -  		pop 	de
   60 D1:BBCB D9 -  -  -  		exx
   61 D1:BBCC D1 -  -  -  		pop 	de
   62 D1:BBCD F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:BBCE 08 -  -  -  		ex 		af,af'
   64 D1:BBCF C9 -  -  -  		ret
   65 D1:BBD0 -  -  -  -  
   66 D1:BBD0 -  -  -  -  
   67 D1:BBD0 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:BBD0 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:BBD1 CB 7C -  -  		bit 	7,h
   70 D1:BBD3 D9 -  -  -  		exx
   71 D1:BBD4 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:BBD6 -  -  -  -  		;
   73 D1:BBD6 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:BBD8 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:BBD9 CD 46 BD D1 		call 	Int32Negate 				
   76 D1:BBDD F1 -  -  -  		pop 	af
   77 D1:BBDE -  -  -  -  _I32CHSPositive:
   78 D1:BBDE D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:BBDF EB -  -  -  		ex 		de,hl
   80 D1:BBE0 D9 -  -  -  		exx		
   81 D1:BBE1 EB -  -  -  		ex 		de,hl
   82 D1:BBE2 C9 -  -  -  		ret
   83 D1:BBE3 -  -  -  -  
   84 D1:BBE3 -  -  -  -  ; ***************************************************************************************
   85 D1:BBE3 -  -  -  -  ;
   86 D1:BBE3 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:BBE3 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:BBE3 -  -  -  -  ;
   89 D1:BBE3 -  -  -  -  ; ***************************************************************************************
   90 D1:BBE3 -  -  -  -  
   91 D1:BBE3 -  -  -  -  _I32UnsignedDivide:
   92 D1:BBE3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:BBE4 D5 -  -  -  		push 	de
   94 D1:BBE5 D9 -  -  -  		exx
   95 D1:BBE6 C5 -  -  -  		push 	bc
   96 D1:BBE7 D5 -  -  -  		push 	de 							
   97 D1:BBE8 D9 -  -  -  		exx
   98 D1:BBE9 -  -  -  -  
   99 D1:BBE9 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:BBEA -  -  -  -  
  101 D1:BBEA 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:BBEB B3 -  -  -  		or 		e
  103 D1:BBEC D9 -  -  -  		exx
  104 D1:BBED B2 -  -  -  		or 		d
  105 D1:BBEE B3 -  -  -  		or 		e
  106 D1:BBEF D9 -  -  -  		exx
  107 D1:BBF0 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:BBF4 -  -  -  -  
  109 D1:BBF4 -  -  -  -  
  110 D1:BBF4 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:BBF5 4D -  -  -  		ld		c,l
  112 D1:BBF6 21 00 00 00 		ld 		hl,$0000
  113 D1:BBFA D9 -  -  -  		exx
  114 D1:BBFB 44 -  -  -  		ld 		b,h
  115 D1:BBFC 4D -  -  -  		ld		c,l
  116 D1:BBFD 21 00 00 00 		ld 		hl,$0000
  117 D1:BC01 D9 -  -  -  		exx
  118 D1:BC02 -  -  -  -  
  119 D1:BC02 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:BC04 -  -  -  -  _I32DivideLoop:
  121 D1:BC04 F5 -  -  -  		push 	af
  122 D1:BC05 -  -  -  -  
  123 D1:BC05 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:BC07 CB 10 -  -  		rl 		b
  125 D1:BC09 D9 -  -  -  		exx
  126 D1:BC0A CB 11 -  -  		rl 		c
  127 D1:BC0C CB 10 -  -  		rl 		b
  128 D1:BC0E D9 -  -  -  		exx
  129 D1:BC0F CB 15 -  -  		rl 		l
  130 D1:BC11 CB 14 -  -  		rl 		h
  131 D1:BC13 D9 -  -  -  		exx
  132 D1:BC14 CB 15 -  -  		rl 		l
  133 D1:BC16 CB 14 -  -  		rl 		h
  134 D1:BC18 D9 -  -  -  		exx
  135 D1:BC19 -  -  -  -  
  136 D1:BC19 CD E4 BC D1 		call 	Int32Subtract 				; A = A - M
  137 D1:BC1D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:BC1F -  -  -  -  
  139 D1:BC1F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:BC20 18 04 -  -  		jr 		_I32Next
  141 D1:BC22 -  -  -  -  
  142 D1:BC22 -  -  -  -  _I32Borrow:
  143 D1:BC22 CD DC BC D1 		call 	Int32Add 					; A = A + M
  144 D1:BC26 -  -  -  -  _I32Next:
  145 D1:BC26 F1 -  -  -  		pop 	af
  146 D1:BC27 3D -  -  -  		dec 	a
  147 D1:BC28 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:BC2A -  -  -  -  
  149 D1:BC2A F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:BC2B -  -  -  -  
  151 D1:BC2B 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:BC2C 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:BC2E -  -  -  -  
  154 D1:BC2E 60 -  -  -  		ld  	h,b
  155 D1:BC2F 69 -  -  -  		ld 		l,c
  156 D1:BC30 D9 -  -  -  		exx
  157 D1:BC31 60 -  -  -  		ld  	h,b
  158 D1:BC32 69 -  -  -  		ld 		l,c
  159 D1:BC33 D9 -  -  -  		exx
  160 D1:BC34 -  -  -  -  _I32Modulus1:		
  161 D1:BC34 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:BC35 D1 -  -  -  		pop 	de
  163 D1:BC36 C1 -  -  -  		pop 	bc
  164 D1:BC37 D9 -  -  -  		exx
  165 D1:BC38 D1 -  -  -  		pop 	de
  166 D1:BC39 C1 -  -  -  		pop 	bc
  167 D1:BC3A C9 -  -  -  		ret
  168 D1:BC3B -  -  -  -  
  169 D1:BC3B -  -  -  -  ; ***************************************************************************************
  170 D1:BC3B -  -  -  -  ;
  171 D1:BC3B -  -  -  -  ;									Changes and Updates
  172 D1:BC3B -  -  -  -  ;
  173 D1:BC3B -  -  -  -  ; ***************************************************************************************
  174 D1:BC3B -  -  -  -  ;
  175 D1:BC3B -  -  -  -  ;		Date			Notes
  176 D1:BC3B -  -  -  -  ;		==== 			=====
  177 D1:BC3B -  -  -  -  ;
  178 D1:BC3B -  -  -  -  ; ***************************************************************************************
  179 D1:BC3B -  -  -  -  		
Listing for file "_build.asm"
   75 D1:BC3B -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:BC3B -  -  -  -  ; ***************************************************************************************
    2 D1:BC3B -  -  -  -  ; ***************************************************************************************
    3 D1:BC3B -  -  -  -  ;
    4 D1:BC3B -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:BC3B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BC3B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BC3B -  -  -  -  ;		Reviewed :	No
    8 D1:BC3B -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:BC3B -  -  -  -  ;
   10 D1:BC3B -  -  -  -  ; ***************************************************************************************
   11 D1:BC3B -  -  -  -  ; ***************************************************************************************
   12 D1:BC3B -  -  -  -  
   13 D1:BC3B -  -  -  -  ; ***************************************************************************************
   14 D1:BC3B -  -  -  -  ;
   15 D1:BC3B -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:BC3B -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:BC3B -  -  -  -  ;
   18 D1:BC3B -  -  -  -  ; ***************************************************************************************
   19 D1:BC3B -  -  -  -  
   20 D1:BC3B -  -  -  -  Int32FromString:
   21 D1:BC3B C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:BC3C D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:BC3D D5 -  -  -  		push 	de
   24 D1:BC3E D9 -  -  -  		exx
   25 D1:BC3F D5 -  -  -  		push 	de
   26 D1:BC40 -  -  -  -  
   27 D1:BC40 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:BC44 11 00 00 00 		ld 		de,$0000
   29 D1:BC48 D9 -  -  -  		exx
   30 D1:BC49 21 00 00 00 		ld 		hl,$0000
   31 D1:BC4D 11 00 00 00 		ld 		de,$0000
   32 D1:BC51 D9 -  -  -  		exx
   33 D1:BC52 -  -  -  -  
   34 D1:BC52 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:BC53 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:BC55 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:BC57 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:BC59 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:BC5A -  -  -  -  		;
   40 D1:BC5A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:BC5B F5 -  -  -  		push 	af
   42 D1:BC5C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:BC5E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:BC5F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:BC61 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:BC62 18 01 -  -  		jr 		_I32FSMain
   47 D1:BC64 -  -  -  -  _I32FSNotSigned:		
   48 D1:BC64 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:BC65 -  -  -  -  		;
   50 D1:BC65 -  -  -  -  		; 		Main conversion loop.
   51 D1:BC65 -  -  -  -  		; 		
   52 D1:BC65 -  -  -  -  _I32FSMain:		
   53 D1:BC65 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:BC66 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:BC68 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:BC6A D6 20 -  -  		sub 	32
   57 D1:BC6C -  -  -  -  _I32FSNotLower:
   58 D1:BC6C FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:BC6E 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:BC70 FE 3A -  -  		cp 		'9'+1
   61 D1:BC72 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:BC74 FE 41 -  -  		cp 		'A'
   63 D1:BC76 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:BC78 FE 47 -  -  		cp 		'F'+1
   65 D1:BC7A 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:BC7C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:BC7E -  -  -  -  _I32FSOkay:
   68 D1:BC7E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:BC80 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:BC81 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:BC83 03 -  -  -  		inc 	bc 							; consume character
   72 D1:BC84 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:BC85 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:BC86 CD A3 BC D1 		call 	Int32Multiply 				; result *= base
   75 D1:BC8A F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:BC8B 5F -  -  -  		ld 		e,a
   77 D1:BC8C CD DC BC D1 		call 	Int32Add 					; and add it.
   78 D1:BC90 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:BC91 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:BC93 -  -  -  -  
   81 D1:BC93 -  -  -  -  _I32FSExit:
   82 D1:BC93 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:BC94 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:BC96 CC 46 BD D1 		call 	z,Int32Negate
   85 D1:BC9A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:BC9B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:BC9C D9 -  -  -  		exx
   88 D1:BC9D D1 -  -  -  		pop 	de
   89 D1:BC9E D9 -  -  -  		exx
   90 D1:BC9F C1 -  -  -  		pop 	bc
   91 D1:BCA0 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:BCA2 C9 -  -  -  		ret				
   93 D1:BCA3 -  -  -  -  
   94 D1:BCA3 -  -  -  -  ; ***************************************************************************************
   95 D1:BCA3 -  -  -  -  ;
   96 D1:BCA3 -  -  -  -  ;									Changes and Updates
   97 D1:BCA3 -  -  -  -  ;
   98 D1:BCA3 -  -  -  -  ; ***************************************************************************************
   99 D1:BCA3 -  -  -  -  ;
  100 D1:BCA3 -  -  -  -  ;		Date			Notes
  101 D1:BCA3 -  -  -  -  ;		==== 			=====
  102 D1:BCA3 -  -  -  -  ;
  103 D1:BCA3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   76 D1:BCA3 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:BCA3 -  -  -  -  ; ***************************************************************************************
    2 D1:BCA3 -  -  -  -  ; ***************************************************************************************
    3 D1:BCA3 -  -  -  -  ;
    4 D1:BCA3 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:BCA3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BCA3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BCA3 -  -  -  -  ;		Reviewed :	No
    8 D1:BCA3 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:BCA3 -  -  -  -  ;
   10 D1:BCA3 -  -  -  -  ; ***************************************************************************************
   11 D1:BCA3 -  -  -  -  ; ***************************************************************************************
   12 D1:BCA3 -  -  -  -  
   13 D1:BCA3 -  -  -  -  Int32Multiply:
   14 D1:BCA3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:BCA4 D5 -  -  -  		push 	de
   16 D1:BCA5 44 -  -  -  		ld 		b,h
   17 D1:BCA6 4D -  -  -  		ld 		c,l
   18 D1:BCA7 21 00 00 00 		ld 		hl,$0000
   19 D1:BCAB -  -  -  -  
   20 D1:BCAB D9 -  -  -  		exx
   21 D1:BCAC C5 -  -  -  		push 	bc
   22 D1:BCAD D5 -  -  -  		push 	de
   23 D1:BCAE 44 -  -  -  		ld 		b,h
   24 D1:BCAF 4D -  -  -  		ld 		c,l
   25 D1:BCB0 21 00 00 00 		ld 		hl,$0000		
   26 D1:BCB4 D9 -  -  -  		exx
   27 D1:BCB5 -  -  -  -  
   28 D1:BCB5 -  -  -  -  _I32MultiplyLoop:
   29 D1:BCB5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:BCB7 C4 DC BC D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:BCBB -  -  -  -  		;
   32 D1:BCBB D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:BCBC CB 38 -  -  		srl 	b
   34 D1:BCBE CB 19 -  -  		rr 		c
   35 D1:BCC0 D9 -  -  -  		exx
   36 D1:BCC1 CB 18 -  -  		rr 		b
   37 D1:BCC3 CB 19 -  -  		rr 		c
   38 D1:BCC5 -  -  -  -  		;
   39 D1:BCC5 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:BCC7 CB 12 -  -  		rl 		d
   41 D1:BCC9 D9 -  -  -  		exx
   42 D1:BCCA CB 13 -  -  		rl 		e
   43 D1:BCCC CB 12 -  -  		rl 		d
   44 D1:BCCE -  -  -  -  
   45 D1:BCCE 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:BCCF B1 -  -  -  		or 		c
   47 D1:BCD0 D9 -  -  -  		exx
   48 D1:BCD1 B0 -  -  -  		or 		b
   49 D1:BCD2 B1 -  -  -  		or 		c
   50 D1:BCD3 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:BCD5 -  -  -  -  
   52 D1:BCD5 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:BCD6 D1 -  -  -  		pop 	de
   54 D1:BCD7 C1 -  -  -  		pop 	bc
   55 D1:BCD8 D9 -  -  -  		exx
   56 D1:BCD9 D1 -  -  -  		pop 	de
   57 D1:BCDA C1 -  -  -  		pop 	bc
   58 D1:BCDB C9 -  -  -  		ret
   59 D1:BCDC -  -  -  -  
   60 D1:BCDC -  -  -  -  ; ***************************************************************************************
   61 D1:BCDC -  -  -  -  ;
   62 D1:BCDC -  -  -  -  ;									Changes and Updates
   63 D1:BCDC -  -  -  -  ;
   64 D1:BCDC -  -  -  -  ; ***************************************************************************************
   65 D1:BCDC -  -  -  -  ;
   66 D1:BCDC -  -  -  -  ;		Date			Notes
   67 D1:BCDC -  -  -  -  ;		==== 			=====
   68 D1:BCDC -  -  -  -  ;
   69 D1:BCDC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 D1:BCDC -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:BCDC -  -  -  -  ; ***************************************************************************************
    2 D1:BCDC -  -  -  -  ; ***************************************************************************************
    3 D1:BCDC -  -  -  -  ;
    4 D1:BCDC -  -  -  -  ;		Name : 		isimple.asm
    5 D1:BCDC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BCDC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BCDC -  -  -  -  ;		Reviewed :	No
    8 D1:BCDC -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:BCDC -  -  -  -  ;
   10 D1:BCDC -  -  -  -  ; ***************************************************************************************
   11 D1:BCDC -  -  -  -  ; ***************************************************************************************
   12 D1:BCDC -  -  -  -  
   13 D1:BCDC -  -  -  -  ; ***************************************************************************************
   14 D1:BCDC -  -  -  -  ;
   15 D1:BCDC -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:BCDC -  -  -  -  ;
   17 D1:BCDC -  -  -  -  ; ***************************************************************************************
   18 D1:BCDC -  -  -  -  
   19 D1:BCDC -  -  -  -  Int32Add:
   20 D1:BCDC 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:BCDE D9 -  -  -  		exx
   22 D1:BCDF 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:BCE2 D9 -  -  -  		exx
   24 D1:BCE3 C9 -  -  -  		ret
   25 D1:BCE4 -  -  -  -  
   26 D1:BCE4 -  -  -  -  ; ***************************************************************************************
   27 D1:BCE4 -  -  -  -  ;
   28 D1:BCE4 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:BCE4 -  -  -  -  ;
   30 D1:BCE4 -  -  -  -  ; ***************************************************************************************
   31 D1:BCE4 -  -  -  -  
   32 D1:BCE4 -  -  -  -  Int32Subtract:
   33 D1:BCE4 AF -  -  -  		xor 	a 							; clear carry
   34 D1:BCE5 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:BCE8 D9 -  -  -  		exx
   36 D1:BCE9 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:BCEC D9 -  -  -  		exx
   38 D1:BCED C9 -  -  -  		ret
   39 D1:BCEE -  -  -  -  
   40 D1:BCEE -  -  -  -  ; ***************************************************************************************
   41 D1:BCEE -  -  -  -  ;
   42 D1:BCEE -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:BCEE -  -  -  -  ;
   44 D1:BCEE -  -  -  -  ; ***************************************************************************************
   45 D1:BCEE -  -  -  -  
   46 D1:BCEE -  -  -  -  Int32And:
   47 D1:BCEE D9 -  -  -  		exx
   48 D1:BCEF CD F4 BC D1 		call 	_I32AndHLDE
   49 D1:BCF3 D9 -  -  -  		exx
   50 D1:BCF4 -  -  -  -  _I32AndHLDE:		
   51 D1:BCF4 7C -  -  -  		ld 		a,h
   52 D1:BCF5 A2 -  -  -  		and 	d
   53 D1:BCF6 67 -  -  -  		ld 		h,a
   54 D1:BCF7 7D -  -  -  		ld 		a,l
   55 D1:BCF8 A3 -  -  -  		and 	e
   56 D1:BCF9 6F -  -  -  		ld 		l,a
   57 D1:BCFA C9 -  -  -  		ret
   58 D1:BCFB -  -  -  -  
   59 D1:BCFB -  -  -  -  ; ***************************************************************************************
   60 D1:BCFB -  -  -  -  ;
   61 D1:BCFB -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:BCFB -  -  -  -  ;
   63 D1:BCFB -  -  -  -  ; ***************************************************************************************
   64 D1:BCFB -  -  -  -  
   65 D1:BCFB -  -  -  -  Int32Or:
   66 D1:BCFB D9 -  -  -  		exx
   67 D1:BCFC CD 01 BD D1 		call 	_I32OrHLDE
   68 D1:BD00 D9 -  -  -  		exx
   69 D1:BD01 -  -  -  -  _I32OrHLDE:		
   70 D1:BD01 7C -  -  -  		ld 		a,h
   71 D1:BD02 B2 -  -  -  		or 		d
   72 D1:BD03 67 -  -  -  		ld 		h,a
   73 D1:BD04 7D -  -  -  		ld 		a,l
   74 D1:BD05 B3 -  -  -  		or 		e
   75 D1:BD06 6F -  -  -  		ld 		l,a
   76 D1:BD07 C9 -  -  -  		ret
   77 D1:BD08 -  -  -  -  
   78 D1:BD08 -  -  -  -  ; ***************************************************************************************
   79 D1:BD08 -  -  -  -  ;
   80 D1:BD08 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:BD08 -  -  -  -  ;
   82 D1:BD08 -  -  -  -  ; ***************************************************************************************
   83 D1:BD08 -  -  -  -  
   84 D1:BD08 -  -  -  -  Int32Xor:
   85 D1:BD08 D9 -  -  -  		exx
   86 D1:BD09 CD 0E BD D1 		call 	_I32XorHLDE
   87 D1:BD0D D9 -  -  -  		exx
   88 D1:BD0E -  -  -  -  _I32XorHLDE:		
   89 D1:BD0E 7C -  -  -  		ld 		a,h
   90 D1:BD0F AA -  -  -  		xor 	d
   91 D1:BD10 67 -  -  -  		ld 		h,a
   92 D1:BD11 7D -  -  -  		ld 		a,l
   93 D1:BD12 AB -  -  -  		xor 	e
   94 D1:BD13 6F -  -  -  		ld 		l,a
   95 D1:BD14 C9 -  -  -  		ret
   96 D1:BD15 -  -  -  -  
   97 D1:BD15 -  -  -  -  ; ***************************************************************************************
   98 D1:BD15 -  -  -  -  ;
   99 D1:BD15 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:BD15 -  -  -  -  ;
  101 D1:BD15 -  -  -  -  ; ***************************************************************************************
  102 D1:BD15 -  -  -  -  
  103 D1:BD15 -  -  -  -  Int32Zero:
  104 D1:BD15 D9 -  -  -  		exx
  105 D1:BD16 7D -  -  -  		ld 		a,l
  106 D1:BD17 B4 -  -  -  		or 		h
  107 D1:BD18 D9 -  -  -  		exx
  108 D1:BD19 B5 -  -  -  		or 		l
  109 D1:BD1A B4 -  -  -  		or 		h
  110 D1:BD1B C9 -  -  -  		ret
  111 D1:BD1C -  -  -  -  
  112 D1:BD1C -  -  -  -  ; ***************************************************************************************
  113 D1:BD1C -  -  -  -  ;
  114 D1:BD1C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:BD1C -  -  -  -  ;
  116 D1:BD1C -  -  -  -  ; ***************************************************************************************
  117 D1:BD1C -  -  -  -  
  118 D1:BD1C -  -  -  -  Int32Compare:
  119 D1:BD1C E5 -  -  -  		push 	hl 							; save HL
  120 D1:BD1D AF -  -  -  		xor 	a 							; clear carry
  121 D1:BD1E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:BD21 D9 -  -  -  		exx
  123 D1:BD22 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:BD23 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:BD26 -  -  -  -  		;
  126 D1:BD26 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:BD27 E2 2F BD D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:BD2B 78 -  -  -  		ld 		a,b
  129 D1:BD2C EE 80 -  -  		xor 	$80
  130 D1:BD2E 47 -  -  -  		ld 		b,a
  131 D1:BD2F -  -  -  -  _I32CNoOverflow:
  132 D1:BD2F 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:BD30 B5 -  -  -  		or 		l
  134 D1:BD31 D9 -  -  -  		exx 
  135 D1:BD32 B4 -  -  -  		or 		h
  136 D1:BD33 B5 -  -  -  		or 		l
  137 D1:BD34 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:BD36 -  -  -  -  		;
  139 D1:BD36 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:BD37 CB 78 -  -  		bit 	7,b
  141 D1:BD39 D9 -  -  -  		exx
  142 D1:BD3A 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:BD3C 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:BD3E 3E FF -  -  		ld 		a,$FF
  145 D1:BD40 -  -  -  -  _I32NotPos:
  146 D1:BD40 D9 -  -  -  		exx
  147 D1:BD41 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:BD42 D9 -  -  -  		exx
  149 D1:BD43 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:BD44 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:BD45 C9 -  -  -  		ret
  152 D1:BD46 -  -  -  -  
  153 D1:BD46 -  -  -  -  ; ***************************************************************************************
  154 D1:BD46 -  -  -  -  ;
  155 D1:BD46 -  -  -  -  ;										Negate HL'HL
  156 D1:BD46 -  -  -  -  ;
  157 D1:BD46 -  -  -  -  ; ***************************************************************************************
  158 D1:BD46 -  -  -  -  
  159 D1:BD46 -  -  -  -  Int32Negate:
  160 D1:BD46 AF -  -  -  		xor 	a
  161 D1:BD47 CD 52 BD D1 		call 	_I32NSubtract
  162 D1:BD4B D9 -  -  -  		exx
  163 D1:BD4C CD 52 BD D1 		call 	_I32NSubtract
  164 D1:BD50 D9 -  -  -  		exx
  165 D1:BD51 C9 -  -  -  		ret
  166 D1:BD52 -  -  -  -  _I32NSubtract:
  167 D1:BD52 D5 -  -  -  		push 	de
  168 D1:BD53 EB -  -  -  		ex 		de,hl
  169 D1:BD54 21 00 00 00 		ld 		hl,$0000
  170 D1:BD58 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:BD5B D1 -  -  -  		pop 	de
  172 D1:BD5C C9 -  -  -  		ret
  173 D1:BD5D -  -  -  -  		
  174 D1:BD5D -  -  -  -  ; ***************************************************************************************
  175 D1:BD5D -  -  -  -  ;
  176 D1:BD5D -  -  -  -  ;									Changes and Updates
  177 D1:BD5D -  -  -  -  ;
  178 D1:BD5D -  -  -  -  ; ***************************************************************************************
  179 D1:BD5D -  -  -  -  ;
  180 D1:BD5D -  -  -  -  ;		Date			Notes
  181 D1:BD5D -  -  -  -  ;		==== 			=====
  182 D1:BD5D -  -  -  -  ;
  183 D1:BD5D -  -  -  -  ; ***************************************************************************************
  184 D1:BD5D -  -  -  -  		
Listing for file "_build.asm"
   78 D1:BD5D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:BD5D -  -  -  -  ; ***************************************************************************************
    2 D1:BD5D -  -  -  -  ; ***************************************************************************************
    3 D1:BD5D -  -  -  -  ;
    4 D1:BD5D -  -  -  -  ;		Name : 		itostring.asm
    5 D1:BD5D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BD5D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BD5D -  -  -  -  ;		Reviewed :	No
    8 D1:BD5D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:BD5D -  -  -  -  ;
   10 D1:BD5D -  -  -  -  ; ***************************************************************************************
   11 D1:BD5D -  -  -  -  ;
   12 D1:BD5D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:BD5D -  -  -  -  ;
   14 D1:BD5D -  -  -  -  ; ***************************************************************************************
   15 D1:BD5D -  -  -  -  
   16 D1:BD5D -  -  -  -  Int32ToString:
   17 D1:BD5D C5 -  -  -  		push 	bc 							; save string start
   18 D1:BD5E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:BD5F E5 -  -  -  		push 	hl
   20 D1:BD60 11 00 00 00 		ld	 	de,$0000
   21 D1:BD64 D9 -  -  -  		exx
   22 D1:BD65 D5 -  -  -  		push 	de
   23 D1:BD66 E5 -  -  -  		push 	hl
   24 D1:BD67 11 00 00 00 		ld 		de,$000
   25 D1:BD6B D9 -  -  -  		exx
   26 D1:BD6C 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:BD6D -  -  -  -  		;
   28 D1:BD6D CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:BD6F 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:BD71 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:BD73 5F -  -  -  		ld 		e,a
   32 D1:BD74 -  -  -  -  		;
   33 D1:BD74 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:BD75 CB 7C -  -  		bit 	7,h
   35 D1:BD77 D9 -  -  -  		exx
   36 D1:BD78 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:BD7A -  -  -  -  		;
   38 D1:BD7A CD 46 BD D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:BD7E -  -  -  -  		;
   40 D1:BD7E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:BD80 02 -  -  -  		ld 		(bc),a
   42 D1:BD81 03 -  -  -  		inc 	bc
   43 D1:BD82 -  -  -  -  _I32TSNotNegative:	
   44 D1:BD82 CD 91 BD D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:BD86 -  -  -  -  _I32TSExit:
   46 D1:BD86 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:BD88 02 -  -  -  		ld 		(bc),a 
   48 D1:BD89 -  -  -  -  
   49 D1:BD89 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:BD8A E1 -  -  -  		pop 	hl
   51 D1:BD8B D1 -  -  -  		pop 	de
   52 D1:BD8C D9 -  -  -  		exx
   53 D1:BD8D E1 -  -  -  		pop 	hl
   54 D1:BD8E D1 -  -  -  		pop 	de
   55 D1:BD8F C1 -  -  -  		pop 	bc
   56 D1:BD90 C9 -  -  -  		ret
   57 D1:BD91 -  -  -  -  
   58 D1:BD91 -  -  -  -  _I32RecursiveConvert:
   59 D1:BD91 CD 9E BB D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:BD95 F5 -  -  -  		push 	af 							; save remainder
   61 D1:BD96 CD 15 BD D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:BD9A C4 91 BD D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:BD9E F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:BD9F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:BDA1 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:BDA3 C6 07 -  -  		add 	a,7
   67 D1:BDA5 -  -  -  -  _I32NotHex:
   68 D1:BDA5 C6 30 -  -  		add 	a,48
   69 D1:BDA7 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:BDA8 03 -  -  -  		inc 	bc
   71 D1:BDA9 C9 -  -  -  		ret		
   72 D1:BDAA -  -  -  -  
   73 D1:BDAA -  -  -  -  ; ***************************************************************************************
   74 D1:BDAA -  -  -  -  ;
   75 D1:BDAA -  -  -  -  ;									Changes and Updates
   76 D1:BDAA -  -  -  -  ;
   77 D1:BDAA -  -  -  -  ; ***************************************************************************************
   78 D1:BDAA -  -  -  -  ;
   79 D1:BDAA -  -  -  -  ;		Date			Notes
   80 D1:BDAA -  -  -  -  ;		==== 			=====
   81 D1:BDAA -  -  -  -  ;
   82 D1:BDAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 D1:BDAA -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:BDAA -  -  -  -  ; ***************************************************************************************
    2 D1:BDAA -  -  -  -  ; ***************************************************************************************
    3 D1:BDAA -  -  -  -  ;
    4 D1:BDAA -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:BDAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BDAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BDAA -  -  -  -  ;		Reviewed :	No
    8 D1:BDAA -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:BDAA -  -  -  -  ;
   10 D1:BDAA -  -  -  -  ; ***************************************************************************************
   11 D1:BDAA -  -  -  -  ; ***************************************************************************************
   12 D1:BDAA -  -  -  -  
   13 D1:BDAA -  -  -  -  #ifdef AQUARIUS
   14 D1:BDAA             
   15 D1:BDAA             ; ***************************************************************************************
   16 D1:BDAA             ;
   17 D1:BDAA             ;								Initialise system stuff
   18 D1:BDAA             ;
   19 D1:BDAA             ; ***************************************************************************************
   20 D1:BDAA             
   21 D1:BDAA             SYSInitialise:
   22 D1:BDAA             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:BDAA             	call 	SYSPrintChar
   24 D1:BDAA             	ret
   25 D1:BDAA             
   26 D1:BDAA             ; ***************************************************************************************
   27 D1:BDAA             ;
   28 D1:BDAA             ;								Terminate system stuff
   29 D1:BDAA             ;
   30 D1:BDAA             ; ***************************************************************************************
   31 D1:BDAA             
   32 D1:BDAA             SYSTerminate:
   33 D1:BDAA             	jr 		SYSTerminate
   34 D1:BDAA             
   35 D1:BDAA             ; ***************************************************************************************
   36 D1:BDAA             ;
   37 D1:BDAA             ;						Print A character (note 13,10 required for CRLF)
   38 D1:BDAA             ;
   39 D1:BDAA             ; ***************************************************************************************
   40 D1:BDAA             
   41 D1:BDAA             SYSPrintChar:
   42 D1:BDAA             	push 	af 									; we stack everything including alt registers
   43 D1:BDAA             	push 	bc
   44 D1:BDAA             	push 	de
   45 D1:BDAA             	push 	hl
   46 D1:BDAA             	push 	ix
   47 D1:BDAA             	push 	iy
   48 D1:BDAA             	exx
   49 D1:BDAA             	push 	bc
   50 D1:BDAA             	push 	de
   51 D1:BDAA             	push 	hl
   52 D1:BDAA             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:BDAA             	pop 	hl
   54 D1:BDAA             	pop 	de
   55 D1:BDAA             	pop 	bc
   56 D1:BDAA             	exx
   57 D1:BDAA             	pop 	iy
   58 D1:BDAA             	pop 	ix
   59 D1:BDAA             	pop 	hl
   60 D1:BDAA             	pop 	de
   61 D1:BDAA             	pop 	bc
   62 D1:BDAA             	pop 	af
   63 D1:BDAA             	ret		
   64 D1:BDAA             
   65 D1:BDAA             ; ***************************************************************************************
   66 D1:BDAA             ;
   67 D1:BDAA             ;									Print Newline
   68 D1:BDAA             ;
   69 D1:BDAA             ; ***************************************************************************************
   70 D1:BDAA             
   71 D1:BDAA             SYSPrintCRLF:
   72 D1:BDAA             	push 	af
   73 D1:BDAA             	ld 		a,13
   74 D1:BDAA             	call 	SYSPrintChar
   75 D1:BDAA             	ld 		a,10
   76 D1:BDAA             	call 	SYSPrintChar
   77 D1:BDAA             	pop 	af
   78 D1:BDAA             	ret
   79 D1:BDAA             
   80 D1:BDAA             ; ***************************************************************************************
   81 D1:BDAA             ;
   82 D1:BDAA             ;									Get time into HL'HL
   83 D1:BDAA             ;
   84 D1:BDAA             ; ***************************************************************************************
   85 D1:BDAA             
   86 D1:BDAA             SYSGetTimer:
   87 D1:BDAA              	in 		a,($00)
   88 D1:BDAA              	ld 		l,a
   89 D1:BDAA              	in 		a,($01)
   90 D1:BDAA              	ld 		h,a
   91 D1:BDAA              	exx
   92 D1:BDAA              	in 		a,($02)
   93 D1:BDAA              	ld 		l,a
   94 D1:BDAA              	in 		a,($03)
   95 D1:BDAA              	ld 		h,a
   96 D1:BDAA              	exx
   97 D1:BDAA             	ret 	
   98 D1:BDAA             	
   99 D1:BDAA             #endif
  100 D1:BDAA -  -  -  -  
  101 D1:BDAA -  -  -  -  ; ***************************************************************************************
  102 D1:BDAA -  -  -  -  ;
  103 D1:BDAA -  -  -  -  ;									Changes and Updates
  104 D1:BDAA -  -  -  -  ;
  105 D1:BDAA -  -  -  -  ; ***************************************************************************************
  106 D1:BDAA -  -  -  -  ;
  107 D1:BDAA -  -  -  -  ;		Date			Notes
  108 D1:BDAA -  -  -  -  ;		==== 			=====
  109 D1:BDAA -  -  -  -  ;
  110 D1:BDAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 D1:BDAA -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:BDAA -  -  -  -  ; ***************************************************************************************
    2 D1:BDAA -  -  -  -  ; ***************************************************************************************
    3 D1:BDAA -  -  -  -  ;
    4 D1:BDAA -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:BDAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BDAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BDAA -  -  -  -  ;		Reviewed :	No
    8 D1:BDAA -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:BDAA -  -  -  -  ;
   10 D1:BDAA -  -  -  -  ; ***************************************************************************************
   11 D1:BDAA -  -  -  -  ; ***************************************************************************************
   12 D1:BDAA -  -  -  -  
   13 D1:BDAA -  -  -  -  #ifdef CLEANEZ80
   14 D1:BDAA             
   15 D1:BDAA             ; ***************************************************************************************
   16 D1:BDAA             ;
   17 D1:BDAA             ;								Initialise system stuff
   18 D1:BDAA             ;
   19 D1:BDAA             ; ***************************************************************************************
   20 D1:BDAA             
   21 D1:BDAA             SYSInitialise:
   22 D1:BDAA             	ret
   23 D1:BDAA             
   24 D1:BDAA             ; ***************************************************************************************
   25 D1:BDAA             ;
   26 D1:BDAA             ;								Terminate system stuff
   27 D1:BDAA             ;
   28 D1:BDAA             ; ***************************************************************************************
   29 D1:BDAA             
   30 D1:BDAA             SYSTerminate:
   31 D1:BDAA             	ret
   32 D1:BDAA             
   33 D1:BDAA             ; ***************************************************************************************
   34 D1:BDAA             ;
   35 D1:BDAA             ;								Print A character
   36 D1:BDAA             ;
   37 D1:BDAA             ; ***************************************************************************************
   38 D1:BDAA             
   39 D1:BDAA             SYSPrintChar:
   40 D1:BDAA             	ret		
   41 D1:BDAA             
   42 D1:BDAA             ; ***************************************************************************************
   43 D1:BDAA             ;
   44 D1:BDAA             ;									Print Newline
   45 D1:BDAA             ;
   46 D1:BDAA             ; ***************************************************************************************
   47 D1:BDAA             
   48 D1:BDAA             SYSPrintCRLF:
   49 D1:BDAA             	ret
   50 D1:BDAA             
   51 D1:BDAA             ; ***************************************************************************************
   52 D1:BDAA             ;
   53 D1:BDAA             ;									Get time into HL'HL
   54 D1:BDAA             ;
   55 D1:BDAA             ; ***************************************************************************************
   56 D1:BDAA             
   57 D1:BDAA             SYSGetTimer:
   58 D1:BDAA             	ret
   59 D1:BDAA             
   60 D1:BDAA             #endif
   61 D1:BDAA -  -  -  -  
   62 D1:BDAA -  -  -  -  ; ***************************************************************************************
   63 D1:BDAA -  -  -  -  ;
   64 D1:BDAA -  -  -  -  ;									Changes and Updates
   65 D1:BDAA -  -  -  -  ;
   66 D1:BDAA -  -  -  -  ; ***************************************************************************************
   67 D1:BDAA -  -  -  -  ;
   68 D1:BDAA -  -  -  -  ;		Date			Notes
   69 D1:BDAA -  -  -  -  ;		==== 			=====
   70 D1:BDAA -  -  -  -  ;
   71 D1:BDAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 D1:BDAA -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:BDAA -  -  -  -  ; ***************************************************************************************
    2 D1:BDAA -  -  -  -  ; ***************************************************************************************
    3 D1:BDAA -  -  -  -  ;
    4 D1:BDAA -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:BDAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BDAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BDAA -  -  -  -  ;		Reviewed :	No
    8 D1:BDAA -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:BDAA -  -  -  -  ;
   10 D1:BDAA -  -  -  -  ; ***************************************************************************************
   11 D1:BDAA -  -  -  -  ; ***************************************************************************************
   12 D1:BDAA -  -  -  -  
   13 D1:BDAA -  -  -  -  #ifdef TI84
   14 D1:BDAA -  -  -  -  
   15 D1:BDAA -  -  -  -  ; ***************************************************************************************
   16 D1:BDAA -  -  -  -  ;
   17 D1:BDAA -  -  -  -  ;								Initialise system stuff
   18 D1:BDAA -  -  -  -  ;
   19 D1:BDAA -  -  -  -  ; ***************************************************************************************
   20 D1:BDAA -  -  -  -  
   21 D1:BDAA -  -  -  -  SYSInitialise:
   22 D1:BDAA F3 -  -  -  	di
   23 D1:BDAB ED 73 C8 BD 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:BDB0 FD 22 CC BD 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:BDB5 C9 -  -  -  	ret
   26 D1:BDB6 -  -  -  -  
   27 D1:BDB6 -  -  -  -  ; ***************************************************************************************
   28 D1:BDB6 -  -  -  -  ;
   29 D1:BDB6 -  -  -  -  ;								Terminate system stuff
   30 D1:BDB6 -  -  -  -  ;
   31 D1:BDB6 -  -  -  -  ; ***************************************************************************************
   32 D1:BDB6 -  -  -  -  
   33 D1:BDB6 -  -  -  -  SYSTerminate:
   34 D1:BDB6 ED 7B C8 BD 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:BDBB FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:BDBD FD 2A CC BD 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:BDC2 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:BDC6 FB -  -  -  	ei
   39 D1:BDC7 C9 -  -  -  	ret 										; and exit.
   40 D1:BDC8 -  -  -  -  
   41 D1:BDC8 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:BDC8 00 00 00 00 	.dw 	0,0
   43 D1:BDCC -  -  -  -  _IYTemp84:
   44 D1:BDCC 00 00 00 00 	.dw 	0,0		
   45 D1:BDD0 -  -  -  -  
   46 D1:BDD0 -  -  -  -  ; ***************************************************************************************
   47 D1:BDD0 -  -  -  -  ;
   48 D1:BDD0 -  -  -  -  ;								Print A character
   49 D1:BDD0 -  -  -  -  ;
   50 D1:BDD0 -  -  -  -  ; ***************************************************************************************
   51 D1:BDD0 -  -  -  -  
   52 D1:BDD0 -  -  -  -  SYSPrintChar:
   53 D1:BDD0 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:BDD1 C5 -  -  -  	push 	bc
   55 D1:BDD2 D5 -  -  -  	push 	de
   56 D1:BDD3 E5 -  -  -  	push 	hl
   57 D1:BDD4 DD E5 -  -  	push 	ix
   58 D1:BDD6 FD E5 -  -  	push 	iy
   59 D1:BDD8 D9 -  -  -  	exx
   60 D1:BDD9 C5 -  -  -  	push 	bc
   61 D1:BDDA D5 -  -  -  	push 	de
   62 D1:BDDB E5 -  -  -  	push 	hl
   63 D1:BDDC -  -  -  -  
   64 D1:BDDC FD 2A CC BD 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:BDE1 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:BDE5 F3 -  -  -  	di
   67 D1:BDE6 FD 22 CC BD 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:BDEB -  -  -  -  
   69 D1:BDEB E1 -  -  -  	pop 	hl
   70 D1:BDEC D1 -  -  -  	pop 	de
   71 D1:BDED C1 -  -  -  	pop 	bc
   72 D1:BDEE D9 -  -  -  	exx
   73 D1:BDEF FD E1 -  -  	pop 	iy
   74 D1:BDF1 DD E1 -  -  	pop 	ix
   75 D1:BDF3 E1 -  -  -  	pop 	hl
   76 D1:BDF4 D1 -  -  -  	pop 	de
   77 D1:BDF5 C1 -  -  -  	pop 	bc
   78 D1:BDF6 F1 -  -  -  	pop 	af
   79 D1:BDF7 C9 -  -  -  	ret		
   80 D1:BDF8 -  -  -  -  
   81 D1:BDF8 -  -  -  -  ; ***************************************************************************************
   82 D1:BDF8 -  -  -  -  ;
   83 D1:BDF8 -  -  -  -  ;									Print Newline
   84 D1:BDF8 -  -  -  -  ;
   85 D1:BDF8 -  -  -  -  ; ***************************************************************************************
   86 D1:BDF8 -  -  -  -  
   87 D1:BDF8 -  -  -  -  SYSPrintCRLF:
   88 D1:BDF8 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:BDF9 C5 -  -  -  	push 	bc
   90 D1:BDFA D5 -  -  -  	push 	de
   91 D1:BDFB E5 -  -  -  	push 	hl
   92 D1:BDFC DD E5 -  -  	push 	ix
   93 D1:BDFE FD E5 -  -  	push 	iy
   94 D1:BE00 D9 -  -  -  	exx
   95 D1:BE01 C5 -  -  -  	push 	bc
   96 D1:BE02 D5 -  -  -  	push 	de
   97 D1:BE03 E5 -  -  -  	push 	hl
   98 D1:BE04 -  -  -  -  
   99 D1:BE04 FD 2A CC BD 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:BE09 CD F0 07 02 	call 	_newline
  101 D1:BE0D F3 -  -  -  	di
  102 D1:BE0E FD 22 CC BD 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:BE13 -  -  -  -  
  104 D1:BE13 E1 -  -  -  	pop 	hl
  105 D1:BE14 D1 -  -  -  	pop 	de
  106 D1:BE15 C1 -  -  -  	pop 	bc
  107 D1:BE16 D9 -  -  -  	exx
  108 D1:BE17 FD E1 -  -  	pop 	iy
  109 D1:BE19 DD E1 -  -  	pop 	ix
  110 D1:BE1B E1 -  -  -  	pop 	hl
  111 D1:BE1C D1 -  -  -  	pop 	de
  112 D1:BE1D C1 -  -  -  	pop 	bc
  113 D1:BE1E F1 -  -  -  	pop 	af
  114 D1:BE1F C9 -  -  -  	ret
  115 D1:BE20 -  -  -  -  
  116 D1:BE20 -  -  -  -  ; ***************************************************************************************
  117 D1:BE20 -  -  -  -  ;
  118 D1:BE20 -  -  -  -  ;									Get time into HL'HL
  119 D1:BE20 -  -  -  -  ;
  120 D1:BE20 -  -  -  -  ; ***************************************************************************************
  121 D1:BE20 -  -  -  -  
  122 D1:BE20 -  -  -  -  SYSGetTimer:
  123 D1:BE20 21 34 12 00 	ld 		hl,$1234
  124 D1:BE24 D9 -  -  -  	exx
  125 D1:BE25 21 78 56 00 	ld 		hl,$5678
  126 D1:BE29 D9 -  -  -  	exx
  127 D1:BE2A C9 -  -  -  	ret
  128 D1:BE2B -  -  -  -  
  129 D1:BE2B -  -  -  -  #endif
  130 D1:BE2B -  -  -  -  
  131 D1:BE2B -  -  -  -  ; ***************************************************************************************
  132 D1:BE2B -  -  -  -  ;
  133 D1:BE2B -  -  -  -  ;									Changes and Updates
  134 D1:BE2B -  -  -  -  ;
  135 D1:BE2B -  -  -  -  ; ***************************************************************************************
  136 D1:BE2B -  -  -  -  ;
  137 D1:BE2B -  -  -  -  ;		Date			Notes
  138 D1:BE2B -  -  -  -  ;		==== 			=====
  139 D1:BE2B -  -  -  -  ;
  140 D1:BE2B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   82 D1:BE2B -  -  -  -  #include "tokeniser/generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/tokeniser/generated/kwd_keywords.asm"
    1 D1:BE2B -  -  -  -  ;
    2 D1:BE2B -  -  -  -  ;	This file is automatically generated.
    3 D1:BE2B -  -  -  -  ;
    4 D1:BE2B -  -  -  -  ;
    5 D1:BE2B -  -  -  -  ;	Keywords for set 0
    6 D1:BE2B -  -  -  -  ;
    7 D1:BE2B -  -  -  -  KeywordsSet0:
    8 D1:BE2B 01 20 -  -  	.db	1," "              ; $0080
    9 D1:BE2D 01 20 -  -  	.db	1," "              ; $0081
   10 D1:BE2F 01 20 -  -  	.db	1," "              ; $0082
   11 D1:BE31 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:BE33 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:BE35 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:BE37 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:BE39 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:BE3D 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 D1:BE41 01 2B -  -  	.db	1,"+"              ; $0089
   18 D1:BE43 01 2D -  -  	.db	1,"-"              ; $008a
   19 D1:BE45 02 3E 3D -  	.db	2,">="             ; $008b
   20 D1:BE48 02 3C 3D -  	.db	2,"<="             ; $008c
   21 D1:BE4B 01 3E -  -  	.db	1,">"              ; $008d
   22 D1:BE4D 01 3C -  -  	.db	1,"<"              ; $008e
   23 D1:BE4F 01 3D -  -  	.db	1,"="              ; $008f
   24 D1:BE51 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 D1:BE54 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 D1:BE58 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 D1:BE5B 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 D1:BE5F 01 26 -  -  	.db	1,"&"              ; $0094
   29 D1:BE61 01 28 -  -  	.db	1,"("              ; $0095
   30 D1:BE63 01 24 -  -  	.db	1,"$"              ; $0096
   31 D1:BE65 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 D1:BE69 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 D1:BE6D 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 D1:BE71 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 D1:BE75 03 53 54 52 	.db	3,"STR"            ; $009b
   36 D1:BE79 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 D1:BE7D 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 D1:BE81 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 D1:BE85 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 D1:BE8A 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 D1:BE8F 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 D1:BE93 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 D1:BE97 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 D1:BE9C 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 D1:BEA2 01 29 -  -  	.db	1,")"              ; $00a5
   46 D1:BEA4 01 2C -  -  	.db	1,","              ; $00a6
   47 D1:BEA6 01 3A -  -  	.db	1,":"              ; $00a7
   48 D1:BEA8 01 3B -  -  	.db	1,";"              ; $00a8
   49 D1:BEAA 01 27 -  -  	.db	1,"'"              ; $00a9
   50 D1:BEAC 01 5B -  -  	.db	1,"["              ; $00aa
   51 D1:BEAE 01 5D -  -  	.db	1,"]"              ; $00ab
   52 D1:BEB0 01 7E -  -  	.db	1,"~"              ; $00ac
   53 D1:BEB2 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00ad
   54 D1:BEB9 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ae
   55 D1:BEBF 02 49 46 -  	.db	2,"IF"             ; $00af
   56 D1:BEC2 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00b0
   57 D1:BEC7 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00b1
   58 D1:BECC 03 46 4F 52 	.db	3,"FOR"            ; $00b2
   59 D1:BED0 02 54 4F -  	.db	2,"TO"             ; $00b3
   60 D1:BED3 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b4
   61 D1:BED8 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b5
   62 D1:BEDD 03 44 45 46 	.db	3,"DEF"            ; $00b6
   63 D1:BEE1 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b7
   64 D1:BEE6 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b8
   65 D1:BEEE 05 47 4F 53 
              55 42 -  -  	.db	5,"GOSUB"          ; $00b9
   66 D1:BEF4 06 52 45 54 
              55 52 4E -  	.db	6,"RETURN"         ; $00ba
   67 D1:BEFB 04 47 4F 54 
              4F -  -  -  	.db	4,"GOTO"           ; $00bb
   68 D1:BF00 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00bc
   69 D1:BF06 03 44 49 4D 	.db	3,"DIM"            ; $00bd
   70 D1:BF0A 03 52 45 4D 	.db	3,"REM"            ; $00be
   71 D1:BF0E 03 4C 45 54 	.db	3,"LET"            ; $00bf
   72 D1:BF12 03 56 44 55 	.db	3,"VDU"            ; $00c0
   73 D1:BF16 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00c1
   74 D1:BF1C 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00c2
   75 D1:BF21 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00c3
   76 D1:BF26 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00c4
   77 D1:BF2B 03 4E 45 57 	.db	3,"NEW"            ; $00c5
   78 D1:BF2F 03 52 55 4E 	.db	3,"RUN"            ; $00c6
   79 D1:BF33 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c7
   80 D1:BF38 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c8
   81 D1:BF3D 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c9
   82 D1:BF45 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00ca
   83 D1:BF4C 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00cb
   84 D1:BF52 03 45 4E 44 	.db	3,"END"            ; $00cc
   85 D1:BF56 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00cd
   86 D1:BF5B 00 -  -  -  	.db	0
   87 D1:BF5C -  -  -  -  ;
   88 D1:BF5C -  -  -  -  ;	Keywords for set 1
   89 D1:BF5C -  -  -  -  ;
   90 D1:BF5C -  -  -  -  KeywordsSet1:
   91 D1:BF5C 00 -  -  -  	.db	0
   92 D1:BF5D -  -  -  -  ;
   93 D1:BF5D -  -  -  -  ;	Keywords for set 2
   94 D1:BF5D -  -  -  -  ;
   95 D1:BF5D -  -  -  -  KeywordsSet2:
   96 D1:BF5D 00 -  -  -  	.db	0
Listing for file "_build.asm"
   83 D1:BF5E -  -  -  -  #include "tokeniser/list.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/tokeniser/list.asm"
    1 D1:BF5E -  -  -  -  ; ***************************************************************************************
    2 D1:BF5E -  -  -  -  ; ***************************************************************************************
    3 D1:BF5E -  -  -  -  ;
    4 D1:BF5E -  -  -  -  ;		Name : 		list.asm
    5 D1:BF5E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BF5E -  -  -  -  ;		Date : 		9th June 2022
    7 D1:BF5E -  -  -  -  ;		Reviewed :	No
    8 D1:BF5E -  -  -  -  ;		Purpose :	Program listing.
    9 D1:BF5E -  -  -  -  ;
   10 D1:BF5E -  -  -  -  ; ***************************************************************************************
   11 D1:BF5E -  -  -  -  ; ***************************************************************************************
   12 D1:BF5E -  -  -  -  
   13 D1:BF5E -  -  -  -  ; ***************************************************************************************
   14 D1:BF5E -  -  -  -  ;
   15 D1:BF5E -  -  -  -  ;										LIST a program
   16 D1:BF5E -  -  -  -  ;
   17 D1:BF5E -  -  -  -  ; ***************************************************************************************
   18 D1:BF5E -  -  -  -  
   19 D1:BF5E -  -  -  -  Command_LIST: 	;; [list]
   20 D1:BF5E 01 00 00 00 		ld 		bc,$0000 					; BC is the low value
   21 D1:BF62 11 FF FF 00 		ld 		de,$FFFF 					; DE is the high value
   22 D1:BF66 -  -  -  -  		;
   23 D1:BF66 -  -  -  -  		;		Unpack the command
   24 D1:BF66 -  -  -  -  		;		
   25 D1:BF66 DD 7E 00 -  		ld 		a,(ix+0) 					; what's there ?
   26 D1:BF69 FE A6 -  -  		cp	 	KWD_COMMA 					; if , then do the second part
   27 D1:BF6B 28 17 -  -  		jr 		z,_CLUpperRange
   28 D1:BF6D E6 C0 -  -  		and 	$C0 						; check number follows.
   29 D1:BF6F FE 40 -  -  		cp 		$40
   30 D1:BF71 20 22 -  -  		jr 		nz,_CLList 			
   31 D1:BF73 CD D1 BF D1 		call 	_CLGetInteger 				; get a line number
   32 D1:BF77 44 -  -  -  		ld  	b,h 						; put into BC
   33 D1:BF78 4D -  -  -  		ld 		c,l
   34 D1:BF79 DD 7E 00 -  		ld 		a,(ix+0)					; , follows ?
   35 D1:BF7C FE A6 -  -  		cp 		KWD_COMMA
   36 D1:BF7E 28 04 -  -  		jr 		z,_CLUpperRange
   37 D1:BF80 54 -  -  -  		ld 		d,h 						; one number only, so in BC and DE
   38 D1:BF81 5D -  -  -  		ld 		e,l
   39 D1:BF82 18 11 -  -  		jr 		_CLList
   40 D1:BF84 -  -  -  -  		;
   41 D1:BF84 -  -  -  -  		;		Second number.
   42 D1:BF84 -  -  -  -  		;
   43 D1:BF84 -  -  -  -  _CLUpperRange:
   44 D1:BF84 DD 23 -  -  		inc 	ix 							; skip comma
   45 D1:BF86 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a number
   46 D1:BF89 E6 C0 -  -  		and 	$C0
   47 D1:BF8B FE 40 -  -  		cp 		$40
   48 D1:BF8D 20 06 -  -  		jr 		nz,_CLList 					; No listing done
   49 D1:BF8F CD D1 BF D1 		call 	_CLGetInteger 				; get a number
   50 D1:BF93 54 -  -  -  		ld 		d,h 						; put into DE
   51 D1:BF94 5D -  -  -  		ld 		e,l		
   52 D1:BF95 -  -  -  -  		;
   53 D1:BF95 -  -  -  -  		;		List from line no.s BC to DE.
   54 D1:BF95 -  -  -  -  		;
   55 D1:BF95 -  -  -  -  _CLList:		
   56 D1:BF95 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start of code.
   57 D1:BF9A -  -  -  -  		;
   58 D1:BF9A -  -  -  -  		;		List main loop
   59 D1:BF9A -  -  -  -  		;
   60 D1:BF9A -  -  -  -  _CLNextLine:		
   61 D1:BF9A DD 7E 00 -  		ld 		a,(ix+0) 					; offset = 0, then end.
   62 D1:BF9D B7 -  -  -  		or 		a
   63 D1:BF9E CA 01 AB D1 		jp 		z,Command_END
   64 D1:BFA2 -  -  -  -  		;
   65 D1:BFA2 21 00 00 00 		ld 		hl,$0000 					; line number into HL
   66 D1:BFA6 DD 6E 01 -  		ld 		l,(ix+1) 						
   67 D1:BFA9 DD 66 02 -  		ld 		h,(ix+2)
   68 D1:BFAC CD C1 BF D1 		call 	CLCheckLineNumber
   69 D1:BFB0 D4 E2 BF D1 		call 	nc,CLPrintLine
   70 D1:BFB4 -  -  -  -  		;
   71 D1:BFB4 C5 -  -  -  		push 	bc 							; go to next line
   72 D1:BFB5 01 00 00 00 		ld 		bc,0 						; BC is offset
   73 D1:BFB9 DD 4E 00 -  		ld 		c,(ix+0)
   74 D1:BFBC DD 09 -  -  		add 	ix,bc
   75 D1:BFBE C1 -  -  -  		pop 	bc
   76 D1:BFBF -  -  -  -  		;
   77 D1:BFBF 18 D9 -  -  		jr 		_CLNextLine 				; go round again.
   78 D1:BFC1 -  -  -  -  
   79 D1:BFC1 -  -  -  -  ; ***************************************************************************************
   80 D1:BFC1 -  -  -  -  ;
   81 D1:BFC1 -  -  -  -  ;				Compare line number in HL vs BC/DE, NC if listable
   82 D1:BFC1 -  -  -  -  ;
   83 D1:BFC1 -  -  -  -  ; ***************************************************************************************
   84 D1:BFC1 -  -  -  -  
   85 D1:BFC1 -  -  -  -  CLCheckLineNumber:
   86 D1:BFC1 E5 -  -  -  		push 	hl 							; compare against BC
   87 D1:BFC2 AF -  -  -  		xor		a
   88 D1:BFC3 ED 42 -  -  		sbc 	hl,bc
   89 D1:BFC5 E1 -  -  -  		pop 	hl
   90 D1:BFC6 D8 -  -  -  		ret		c 							; if < BC then fail.
   91 D1:BFC7 ED 52 -  -  		sbc 	hl,de
   92 D1:BFC9 28 04 -  -  		jr 		z,_CLCLOkay 				; if <= DE then okay
   93 D1:BFCB 38 02 -  -  		jr 		c,_CLCLOkay
   94 D1:BFCD 37 -  -  -  		scf
   95 D1:BFCE C9 -  -  -  		ret
   96 D1:BFCF -  -  -  -  _CLCLOkay:
   97 D1:BFCF AF -  -  -  		xor 	a
   98 D1:BFD0 C9 -  -  -  		ret
   99 D1:BFD1 -  -  -  -  
  100 D1:BFD1 -  -  -  -  ; ***************************************************************************************
  101 D1:BFD1 -  -  -  -  ;
  102 D1:BFD1 -  -  -  -  ;						Get 16 bit integer (for line numbers)
  103 D1:BFD1 -  -  -  -  ;
  104 D1:BFD1 -  -  -  -  ; ***************************************************************************************
  105 D1:BFD1 -  -  -  -  
  106 D1:BFD1 -  -  -  -  _CLGetInteger:
  107 D1:BFD1 C5 -  -  -  		push 	bc
  108 D1:BFD2 D5 -  -  -  		push 	de
  109 D1:BFD3 CD B6 AF D1 		call 	EvaluateInteger
  110 D1:BFD7 D9 -  -  -  		exx
  111 D1:BFD8 7C -  -  -  		ld 		a,h
  112 D1:BFD9 B5 -  -  -  		or 		l
  113 D1:BFDA D9 -  -  -  		exx
  114 D1:BFDB CA E7 AD D1 		jp 		z,BadValue
  115 D1:BFDF D1 -  -  -  		pop 	de
  116 D1:BFE0 C1 -  -  -  		pop 	bc
  117 D1:BFE1 C9 -  -  -  		ret
  118 D1:BFE2 -  -  -  -  
  119 D1:BFE2 -  -  -  -  ; ***************************************************************************************
  120 D1:BFE2 -  -  -  -  ;
  121 D1:BFE2 -  -  -  -  ;								Print line starting at IX
  122 D1:BFE2 -  -  -  -  ;
  123 D1:BFE2 -  -  -  -  ; ***************************************************************************************
  124 D1:BFE2 -  -  -  -  
  125 D1:BFE2 -  -  -  -  CLPrintLine:
  126 D1:BFE2 CD F3 BF D1 		call 	CLExpandLine
  127 D1:BFE6 21 37 A9 D1 		ld 		hl,TokenBuffer
  128 D1:BFEA CD EE B6 D1 		call 	PrintStringAtHL 
  129 D1:BFEE CD F8 BD D1 		call 	SYSPrintCRLF
  130 D1:BFF2 C9 -  -  -  		ret
  131 D1:BFF3 -  -  -  -  
  132 D1:BFF3 -  -  -  -  ; ***************************************************************************************
  133 D1:BFF3 -  -  -  -  ;
  134 D1:BFF3 -  -  -  -  ;						 Expand line to buffer starting at IX
  135 D1:BFF3 -  -  -  -  ;
  136 D1:BFF3 -  -  -  -  ; ***************************************************************************************
  137 D1:BFF3 -  -  -  -  
  138 D1:BFF3 -  -  -  -  CLExpandLine:
  139 D1:BFF3 C5 -  -  -  		push 	bc
  140 D1:BFF4 D5 -  -  -  		push 	de
  141 D1:BFF5 DD E5 -  -  		push 	ix
  142 D1:BFF7 21 37 A9 D1 		ld 		hl,TokenBuffer 				; set the token buffer pointer
  143 D1:BFFB 22 37 AA D1 		ld 		(TWPointer),hl
  144 D1:BFFF CD DE C0 D1 		call 	CLDecodeLineNumber
  145 D1:C003 -  -  -  -  _CLSpaceOut:		
  146 D1:C003 CD 46 C0 D1 		call 	CLPrintSpace
  147 D1:C007 3A 37 AA D1 		ld 		a,(TWPointer)
  148 D1:C00B FE 3D -  -  		cp 		(6+TokenBuffer) & $FF
  149 D1:C00D 20 F4 -  -  		jr 		nz,_CLSpaceOut
  150 D1:C00F DD 23 -  -  		inc 	ix 							; point to line star.
  151 D1:C011 DD 23 -  -  		inc 	ix
  152 D1:C013 DD 23 -  -  		inc 	ix
  153 D1:C015 -  -  -  -  _CLPLLoop		
  154 D1:C015 DD 7E 00 -  		ld 		a,(ix+0) 					; next token.
  155 D1:C018 FE 80 -  -  		cp 		$80 						; EOL 
  156 D1:C01A 28 25 -  -  		jr 		z,_CLPLLExit 				; if so, exit.
  157 D1:C01C B7 -  -  -  		or 		a
  158 D1:C01D FC 57 C0 D1 		call 	m,CLDecodeKeyword
  159 D1:C021 -  -  -  -  
  160 D1:C021 06 10 -  -  		ld 		b,16
  161 D1:C023 FE 94 -  -  		cp 		KWD_AMPERSAND
  162 D1:C025 CC CC C0 D1 		call 	z,CLDecodeInteger
  163 D1:C029 -  -  -  -  
  164 D1:C029 FE 26 -  -  		cp 		IDENTIFIER_END
  165 D1:C02B DC 84 C0 D1 		call 	c,CLDecodeIdentifier
  166 D1:C02F -  -  -  -  
  167 D1:C02F FE 3F -  -  		cp 		STRING_MARKER
  168 D1:C031 CC AA C0 D1 		call 	z,CLDecodeString
  169 D1:C035 -  -  -  -  
  170 D1:C035 E6 C0 -  -  		and 	$C0
  171 D1:C037 FE 40 -  -  		cp 		$40
  172 D1:C039 06 0A -  -  		ld 		b,10
  173 D1:C03B CC CC C0 D1 		call 	z,CLDecodeInteger
  174 D1:C03F 18 D4 -  -  		jr 		_CLPLLoop
  175 D1:C041 -  -  -  -  
  176 D1:C041 -  -  -  -  _CLPLLExit:		
  177 D1:C041 DD E1 -  -  		pop 	ix
  178 D1:C043 D1 -  -  -  		pop 	de
  179 D1:C044 C1 -  -  -  		pop 	bc
  180 D1:C045 C9 -  -  -  		ret
  181 D1:C046 -  -  -  -  
  182 D1:C046 -  -  -  -  ; ***************************************************************************************
  183 D1:C046 -  -  -  -  ;
  184 D1:C046 -  -  -  -  ;								Print Space/A to output
  185 D1:C046 -  -  -  -  ;
  186 D1:C046 -  -  -  -  ; ***************************************************************************************
  187 D1:C046 -  -  -  -  
  188 D1:C046 -  -  -  -  CLPrintSpace:
  189 D1:C046 3E 20 -  -  		ld 		a,' '
  190 D1:C048 -  -  -  -  CLPrintA:
  191 D1:C048 E5 -  -  -  		push 	hl
  192 D1:C049 2A 37 AA D1 		ld 		hl,(TWPointer)		
  193 D1:C04D 77 -  -  -  		ld 		(hl),a
  194 D1:C04E 23 -  -  -  		inc 	hl
  195 D1:C04F 22 37 AA D1 		ld 		(TWPointer),hl
  196 D1:C053 36 00 -  -  		ld 		(hl),0
  197 D1:C055 E1 -  -  -  		pop 	hl
  198 D1:C056 C9 -  -  -  		ret
  199 D1:C057 -  -  -  -  
  200 D1:C057 -  -  -  -  ; ***************************************************************************************
  201 D1:C057 -  -  -  -  ;
  202 D1:C057 -  -  -  -  ;									Decode Keyword A
  203 D1:C057 -  -  -  -  ;
  204 D1:C057 -  -  -  -  ; ***************************************************************************************
  205 D1:C057 -  -  -  -  
  206 D1:C057 -  -  -  -  CLDecodeKeyword:
  207 D1:C057 F5 -  -  -  		push 	af
  208 D1:C058 DD 23 -  -  		inc 	ix 							; consume keyword
  209 D1:C05A 47 -  -  -  		ld 		b,a 						; put keyword # in B
  210 D1:C05B 21 2B BE D1 		ld 		hl,KeywordsSet0 			; start with set 0
  211 D1:C05F -  -  -  -  _CLFindKeyword:
  212 D1:C05F 05 -  -  -  		dec 	b
  213 D1:C060 F2 6D C0 D1 		jp 		p,_CLFoundKeyword 			; if $7F have found keyword.
  214 D1:C064 11 00 00 00 		ld 		de,0 						; get length into DE
  215 D1:C068 5E -  -  -  		ld 		e,(hl)
  216 D1:C069 13 -  -  -  		inc 	de 							; +1 for the length
  217 D1:C06A 19 -  -  -  		add 	hl,de 						; go to next keyword		
  218 D1:C06B 18 F2 -  -  		jr 		_CLFindKeyword
  219 D1:C06D -  -  -  -  _CLFoundKeyword:
  220 D1:C06D 46 -  -  -  		ld 		b,(hl) 						; get length into B
  221 D1:C06E 23 -  -  -  		inc 	hl
  222 D1:C06F 7E -  -  -  		ld 		a,(hl) 						; is first char identifier
  223 D1:C070 CD 16 C1 D1 		call 	CLGetCharacterType 			
  224 D1:C074 FE 01 -  -  		cp 		1 							; if so, space requied maybe ?
  225 D1:C076 CC 03 C1 D1 		call 	z,CLCheckLastIdentifier
  226 D1:C07A -  -  -  -  _CLCopyKeyword:
  227 D1:C07A 7E -  -  -  		ld 		a,(hl)						; copy that many characters			
  228 D1:C07B 23 -  -  -  		inc 	hl 		
  229 D1:C07C CD 48 C0 D1 		call 	CLPrintA
  230 D1:C080 10 F8 -  -  		djnz 	_CLCopyKeyword
  231 D1:C082 F1 -  -  -  		pop 	af
  232 D1:C083 C9 -  -  -  		ret
  233 D1:C084 -  -  -  -  
  234 D1:C084 -  -  -  -  ; ***************************************************************************************
  235 D1:C084 -  -  -  -  ;
  236 D1:C084 -  -  -  -  ;								 Decode Identifier at IX
  237 D1:C084 -  -  -  -  ;
  238 D1:C084 -  -  -  -  ; ***************************************************************************************
  239 D1:C084 -  -  -  -  
  240 D1:C084 -  -  -  -  CLDecodeIdentifier:
  241 D1:C084 F5 -  -  -  		push 	af
  242 D1:C085 CD 03 C1 D1 		call 	CLCheckLastIdentifier 		; check if identifier
  243 D1:C089 -  -  -  -  _CLDILoop:
  244 D1:C089 DD 7E 00 -  		ld 		a,(ix+0) 					; get identifier.
  245 D1:C08C DD 23 -  -  		inc 	ix
  246 D1:C08E 06 61 -  -  		ld 		b,97 
  247 D1:C090 FE 1A -  -  		cp 		26
  248 D1:C092 38 08 -  -  		jr 		c,_CLDIDoChar
  249 D1:C094 06 16 -  -  		ld 		b,48-26
  250 D1:C096 FE 24 -  -  		cp 		36
  251 D1:C098 38 02 -  -  		jr 		c,_CLDIDoChar
  252 D1:C09A 06 3B -  -  		ld 		b,'_'-36
  253 D1:C09C -  -  -  -  _CLDIDoChar:
  254 D1:C09C 80 -  -  -  		add 	a,b
  255 D1:C09D CD 48 C0 D1 		call 	CLPrintA		
  256 D1:C0A1 DD 7E 00 -  		ld 		a,(ix+0) 					; check next is identifier
  257 D1:C0A4 FE 26 -  -  		cp 		IDENTIFIER_END
  258 D1:C0A6 38 E1 -  -  		jr 		c,_CLDILoop
  259 D1:C0A8 F1 -  -  -  		pop 	af
  260 D1:C0A9 C9 -  -  -  		ret
  261 D1:C0AA -  -  -  -  
  262 D1:C0AA -  -  -  -  ; ***************************************************************************************
  263 D1:C0AA -  -  -  -  ;
  264 D1:C0AA -  -  -  -  ;								 Decode String at IX
  265 D1:C0AA -  -  -  -  ;
  266 D1:C0AA -  -  -  -  ; ***************************************************************************************
  267 D1:C0AA -  -  -  -  
  268 D1:C0AA -  -  -  -  CLDecodeString:
  269 D1:C0AA F5 -  -  -  		push 	af
  270 D1:C0AB 3E 22 -  -  		ld	 	a,'"'
  271 D1:C0AD CD 48 C0 D1 		call 	CLPrintA
  272 D1:C0B1 DD 23 -  -  		inc 	ix
  273 D1:C0B3 DD 23 -  -  		inc 	ix
  274 D1:C0B5 -  -  -  -  _CLDSOut:
  275 D1:C0B5 DD 7E 00 -  		ld 		a,(ix+0)
  276 D1:C0B8 DD 23 -  -  		inc 	ix
  277 D1:C0BA FE 20 -  -  		cp 		' '	
  278 D1:C0BC 38 06 -  -  		jr 		c,_CLDSEnd
  279 D1:C0BE CD 48 C0 D1 		call 	CLPrintA
  280 D1:C0C2 18 F1 -  -  		jr 		_CLDSOut
  281 D1:C0C4 -  -  -  -  _CLDSEnd:		
  282 D1:C0C4 3E 22 -  -  		ld	 	a,'"'
  283 D1:C0C6 CD 48 C0 D1 		call 	CLPrintA
  284 D1:C0CA F1 -  -  -  		pop 	af
  285 D1:C0CB C9 -  -  -  		ret
  286 D1:C0CC -  -  -  -  
  287 D1:C0CC -  -  -  -  ; ***************************************************************************************
  288 D1:C0CC -  -  -  -  ;
  289 D1:C0CC -  -  -  -  ;							Decode Integer at IX, base B
  290 D1:C0CC -  -  -  -  ;
  291 D1:C0CC -  -  -  -  ; ***************************************************************************************
  292 D1:C0CC -  -  -  -  
  293 D1:C0CC -  -  -  -  CLDecodeInteger:
  294 D1:C0CC F5 -  -  -  		push 	af
  295 D1:C0CD C5 -  -  -  		push 	bc
  296 D1:C0CE CD 03 C1 D1 		call 	CLCheckLastIdentifier 		; check if identifier
  297 D1:C0D2 CD 90 AF D1 		call 	EvaluateIntegerTerm 		; get the number only
  298 D1:C0D6 C1 -  -  -  		pop 	bc
  299 D1:C0D7 78 -  -  -  		ld 		a,b 						; base
  300 D1:C0D8 CD EC C0 D1 		call 	CLExpandInt32ToBuffer
  301 D1:C0DC F1 -  -  -  		pop 	af
  302 D1:C0DD C9 -  -  -  		ret
  303 D1:C0DE -  -  -  -  
  304 D1:C0DE -  -  -  -  ; ***************************************************************************************
  305 D1:C0DE -  -  -  -  ;
  306 D1:C0DE -  -  -  -  ;							 Decode Line Number into Token Buffer
  307 D1:C0DE -  -  -  -  ;
  308 D1:C0DE -  -  -  -  ; ***************************************************************************************
  309 D1:C0DE -  -  -  -  
  310 D1:C0DE -  -  -  -  CLDecodeLineNumber:
  311 D1:C0DE DD 6E 01 -  		ld 		l,(ix+1)					; get line# to HL'HL
  312 D1:C0E1 DD 66 02 -  		ld 		h,(ix+2)
  313 D1:C0E4 D9 -  -  -  		exx
  314 D1:C0E5 21 00 00 00 		ld 		hl,$000000
  315 D1:C0E9 D9 -  -  -  		exx
  316 D1:C0EA 3E 0A -  -  		ld 		a,10 						; base
  317 D1:C0EC -  -  -  -  CLExpandInt32ToBuffer:
  318 D1:C0EC ED 4B 37 AA 
              D1 -  -  -  		ld 		bc,(TWPointer) 				; where it goes.
  319 D1:C0F1 CD 5D BD D1 		call 	Int32ToString
  320 D1:C0F5 -  -  -  -  _CLEI3End: 									; look for number end.
  321 D1:C0F5 0A -  -  -  		ld 		a,(bc)
  322 D1:C0F6 ED 43 37 AA 
              D1 -  -  -  		ld 		(TWPointer),bc
  323 D1:C0FB 03 -  -  -  		inc 	bc
  324 D1:C0FC FE 20 -  -  		cp 		' '
  325 D1:C0FE 30 F5 -  -  		jr 		nc,_CLEI3End
  326 D1:C100 AF -  -  -  		xor 	a 							; add EOS
  327 D1:C101 02 -  -  -  		ld 		(bc),a				
  328 D1:C102 C9 -  -  -  		ret
  329 D1:C103 -  -  -  -  
  330 D1:C103 -  -  -  -  ; ***************************************************************************************
  331 D1:C103 -  -  -  -  ;
  332 D1:C103 -  -  -  -  ;						Check if last was identifier, if so add space
  333 D1:C103 -  -  -  -  ;
  334 D1:C103 -  -  -  -  ; ***************************************************************************************
  335 D1:C103 -  -  -  -  
  336 D1:C103 -  -  -  -  CLCheckLastIdentifier:
  337 D1:C103 E5 -  -  -  		push	hl 							; get last character written
  338 D1:C104 2A 37 AA D1 		ld 		hl,(TWPointer)
  339 D1:C108 2B -  -  -  		dec 	hl
  340 D1:C109 7E -  -  -  		ld 		a,(hl)
  341 D1:C10A E1 -  -  -  		pop 	hl
  342 D1:C10B CD 16 C1 D1 		call 	CLGetCharacterType 			; get type
  343 D1:C10F FE 01 -  -  		cp 		1  							; if identifier (A-Z0-9_)
  344 D1:C111 CC 46 C0 D1 		call 	z,CLPrintSpace 				; space needed
  345 D1:C115 C9 -  -  -  		ret
  346 D1:C116 -  -  -  -  
  347 D1:C116 -  -  -  -  ; ***************************************************************************************
  348 D1:C116 -  -  -  -  ;
  349 D1:C116 -  -  -  -  ;								Get character type
  350 D1:C116 -  -  -  -  ;						0 = Space, 1 = 0-9a-zA-Z_ 2 = the rest
  351 D1:C116 -  -  -  -  ;
  352 D1:C116 -  -  -  -  ; ***************************************************************************************
  353 D1:C116 -  -  -  -  
  354 D1:C116 -  -  -  -  CLGetCharacterType:
  355 D1:C116 EE 20 -  -  		xor 	' ' 						; zero if space
  356 D1:C118 C8 -  -  -  		ret 	z
  357 D1:C119 EE 20 -  -  		xor 	' '							; get it back
  358 D1:C11B -  -  -  -  		;
  359 D1:C11B FE 5F -  -  		cp 		'_' 						; identifier if underscore.
  360 D1:C11D 28 16 -  -  		jr 		z,_CLIsIdentifier
  361 D1:C11F -  -  -  -  		;
  362 D1:C11F FE 30 -  -  		cp 		'0' 						; check 0-9
  363 D1:C121 38 15 -  -  		jr 		c,_CLNotIdentifier
  364 D1:C123 FE 3A -  -  		cp 		'9'+1
  365 D1:C125 38 0E -  -  		jr 		c,_CLIsIdentifier
  366 D1:C127 -  -  -  -  		;
  367 D1:C127 FE 60 -  -  		cp 		96 							; shift l/c down
  368 D1:C129 38 02 -  -  		jr 		c,_CLNotUpper
  369 D1:C12B D6 20 -  -  		sub 	a,32
  370 D1:C12D -  -  -  -  _CLNotUpper:
  371 D1:C12D FE 41 -  -  		cp 		'A'
  372 D1:C12F 38 07 -  -  		jr 		c,_CLNotIdentifier
  373 D1:C131 FE 5B -  -  		cp 		'Z'+1
  374 D1:C133 30 00 -  -  		jr 		nc,_CLIsIdentifier		
  375 D1:C135 -  -  -  -  _CLIsIdentifier:
  376 D1:C135 3E 01 -  -  		ld 		a,1
  377 D1:C137 C9 -  -  -  		ret
  378 D1:C138 -  -  -  -  _CLNotIdentifier:
  379 D1:C138 3E 02 -  -  		ld 		a,2
  380 D1:C13A C9 -  -  -  		ret
  381 D1:C13B -  -  -  -  
  382 D1:C13B -  -  -  -  ; ***************************************************************************************
  383 D1:C13B -  -  -  -  ;
  384 D1:C13B -  -  -  -  ;									Changes and Updates
  385 D1:C13B -  -  -  -  ;
  386 D1:C13B -  -  -  -  ; ***************************************************************************************
  387 D1:C13B -  -  -  -  ;
  388 D1:C13B -  -  -  -  ;		Date			Notes
  389 D1:C13B -  -  -  -  ;		==== 			=====
  390 D1:C13B -  -  -  -  ;
  391 D1:C13B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   84 D1:C13B -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:C13B -  -  -  -  ; ***************************************************************************************
    2 D1:C13B -  -  -  -  ; ***************************************************************************************
    3 D1:C13B -  -  -  -  ;
    4 D1:C13B -  -  -  -  ;		Name : 		basic.asm
    5 D1:C13B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:C13B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:C13B -  -  -  -  ;		Reviewed :	No
    8 D1:C13B -  -  -  -  ;		Purpose :	Main program.
    9 D1:C13B -  -  -  -  ;
   10 D1:C13B -  -  -  -  ; ***************************************************************************************
   11 D1:C13B -  -  -  -  ; ***************************************************************************************
   12 D1:C13B -  -  -  -  
   13 D1:C13B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:C400 -  -  -  -  TestInstance:
   15 D1:C400 10 04 00 BF 
              00 8F 0A 86 
              42 85 43 89 
              44 8A 45 80 
              05 0A 00 C4 
              80 0F 0C 00 
              00 01 02 24 
              1B 1C 1D 8F 
              17 A7 CD 80 
              08 14 00 BF 
              0A 8F 40 80 
              09 19 00 BD 
              0C 95 45 A5 
              80 0A 1E 00 
              BF 0A 8F 0A 
              89 41 80 10 
              28 00 BF 00 
              8F 0A 86 42 
              85 43 89 44 
              8A 45 80 07 
              2D 00 B9 4A 
              7C 80 0A 2E 
              00 B2 0B 8F 
              41 B3 45 80 
              0B 2F 00 BF 
              0C 95 0B A5 
              8F 00 80 05 
              30 00 B5 80 
              0D 32 00 AF 
              0A 8E 42 5C 
              50 B0 BB 5E 
              80 13 3C 00 
              C1 3F 0B 48 
              65 6C 6C 6F 
              20 77 6F 72 
              6C 64 0D 80 
              0D 58 02 B6 
              B7 13 04 12 
              13 95 00 A5 
              80 0C 5D 02 
              00 8F 94 4A 
              64 A7 C1 00 
              80 05 62 02 
              B8 80 05 AC 
              58 BA 80 -  		#import 	"testprogram/testprogram.dat"
   16 D1:C4B3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D4B3 -  -  -  -  EndTestInstance:
   18 D1:D4B3 -  -  -  -  		
   19 D1:D4B3 -  -  -  -  ; ***************************************************************************************
   20 D1:D4B3 -  -  -  -  ;
   21 D1:D4B3 -  -  -  -  ;									Changes and Updates
   22 D1:D4B3 -  -  -  -  ;
   23 D1:D4B3 -  -  -  -  ; ***************************************************************************************
   24 D1:D4B3 -  -  -  -  ;
   25 D1:D4B3 -  -  -  -  ;		Date			Notes
   26 D1:D4B3 -  -  -  -  ;		==== 			=====
   27 D1:D4B3 -  -  -  -  ;
   28 D1:D4B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   85 D1:D4B3 -  -  -  -  FinalAddress:
