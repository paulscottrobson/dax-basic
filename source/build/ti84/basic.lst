    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD A2 B5 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 78 D8 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD EA AF D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D9 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 EE A9 D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD C8 B5 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD AE B5 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 A4 
              AA D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 A4 
              AA D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  		
   59 D1:A8CD -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 D1:A8CD 00 00 00 00 		.dw 	0,0
   61 D1:A8D1 -  -  -  -  
   62 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   63 D1:A8D1 -  -  -  -  ;
   64 D1:A8D1 -  -  -  -  ;										Run variables
   65 D1:A8D1 -  -  -  -  ;
   66 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   67 D1:A8D1 -  -  -  -  
   68 D1:A8D1 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  		
   71 D1:A8D5 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 D1:A8D5 00 00 00 00 		.dw 	0,0
   73 D1:A8D9 -  -  -  -  
   74 D1:A8D9 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 D1:A8D9 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8DF -  -  -  -  
   77 D1:A8DF -  -  -  -  AConvert: 									; used for address conversions.
   78 D1:A8DF 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 D1:A8E5 -  -  -  -  		
   80 D1:A8E5 -  -  -  -  RandomSeed: 								; random number seeds.
   81 D1:A8E5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 D1:A8F5 -  -  -  -  
   83 D1:A8F5 -  -  -  -  s; ***************************************************************************************
   84 D1:A8F5 -  -  -  -  ;
   85 D1:A8F5 -  -  -  -  ;										  Buffers
   86 D1:A8F5 -  -  -  -  ;
   87 D1:A8F5 -  -  -  -  ; ***************************************************************************************
   88 D1:A8F5 -  -  -  -  
   89 D1:A8F5 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 D1:A8F5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 D1:A905 -  -  -  -  
   92 D1:A905 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 D1:A905 00 00 -  -  		.dw 	0
   94 D1:A907 -  -  -  -  
   95 D1:A907 -  -  -  -  ConvertBuffer: 								; general usage
   96 D1:A907 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 D1:A947 -  -  -  -  
   98 D1:A947 -  -  -  -  ; ***************************************************************************************
   99 D1:A947 -  -  -  -  ;
  100 D1:A947 -  -  -  -  ;									Changes and Updates
  101 D1:A947 -  -  -  -  ;
  102 D1:A947 -  -  -  -  ; ***************************************************************************************
  103 D1:A947 -  -  -  -  ;
  104 D1:A947 -  -  -  -  ;		Date			Notes
  105 D1:A947 -  -  -  -  ;		==== 			=====
  106 D1:A947 -  -  -  -  ;
  107 D1:A947 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A947 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A947 -  -  -  -  ; ***************************************************************************************
    2 D1:A947 -  -  -  -  ; ***************************************************************************************
    3 D1:A947 -  -  -  -  ;
    4 D1:A947 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A947 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A947 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A947 -  -  -  -  ;		Reviewed :	No
    8 D1:A947 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A947 -  -  -  -  ;
   10 D1:A947 -  -  -  -  ; ***************************************************************************************
   11 D1:A947 -  -  -  -  ; ***************************************************************************************
   12 D1:A947 -  -  -  -  
   13 D1:A947 -  -  -  -  ; ***************************************************************************************
   14 D1:A947 -  -  -  -  ;
   15 D1:A947 -  -  -  -  ;									ASSERT command
   16 D1:A947 -  -  -  -  ;
   17 D1:A947 -  -  -  -  ; ***************************************************************************************
   18 D1:A947 -  -  -  -  
   19 D1:A947 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A947 CD D7 AC D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A94B 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A951 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A952 3E 01 C3 A4 
              AA D1 -  -  		ERR_ASSERT
   24 D1:A958 -  -  -  -  
   25 D1:A958 -  -  -  -  ; ***************************************************************************************
   26 D1:A958 -  -  -  -  ;
   27 D1:A958 -  -  -  -  ;									Changes and Updates
   28 D1:A958 -  -  -  -  ;
   29 D1:A958 -  -  -  -  ; ***************************************************************************************
   30 D1:A958 -  -  -  -  ;
   31 D1:A958 -  -  -  -  ;		Date			Notes
   32 D1:A958 -  -  -  -  ;		==== 			=====
   33 D1:A958 -  -  -  -  ;
   34 D1:A958 -  -  -  -  ; ***************************************************************************************
   35 D1:A958 -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A958 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A958 -  -  -  -  ; ***************************************************************************************
    2 D1:A958 -  -  -  -  ; ***************************************************************************************
    3 D1:A958 -  -  -  -  ;
    4 D1:A958 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A958 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A958 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A958 -  -  -  -  ;		Reviewed :	No
    8 D1:A958 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A958 -  -  -  -  ;
   10 D1:A958 -  -  -  -  ; ***************************************************************************************
   11 D1:A958 -  -  -  -  ; ***************************************************************************************
   12 D1:A958 -  -  -  -  
   13 D1:A958 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A958 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A958 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A958 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A958 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A958 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A958 C3 0E AB D1 		jp 		SyntaxError
   20 D1:A95C -  -  -  -  
   21 D1:A95C -  -  -  -  ; ***************************************************************************************
   22 D1:A95C -  -  -  -  ;
   23 D1:A95C -  -  -  -  ;									Changes and Updates
   24 D1:A95C -  -  -  -  ;
   25 D1:A95C -  -  -  -  ; ***************************************************************************************
   26 D1:A95C -  -  -  -  ;
   27 D1:A95C -  -  -  -  ;		Date			Notes
   28 D1:A95C -  -  -  -  ;		==== 			=====
   29 D1:A95C -  -  -  -  ;
   30 D1:A95C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A95C -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A95C -  -  -  -  ; ***************************************************************************************
    2 D1:A95C -  -  -  -  ; ***************************************************************************************
    3 D1:A95C -  -  -  -  ;
    4 D1:A95C -  -  -  -  ;		Name : 		colon.asm
    5 D1:A95C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95C -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A95C -  -  -  -  ;		Reviewed :	No
    8 D1:A95C -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A95C -  -  -  -  ;
   10 D1:A95C -  -  -  -  ; ***************************************************************************************
   11 D1:A95C -  -  -  -  ; ***************************************************************************************
   12 D1:A95C -  -  -  -  
   13 D1:A95C -  -  -  -  ; ***************************************************************************************
   14 D1:A95C -  -  -  -  ;
   15 D1:A95C -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A95C -  -  -  -  ;
   17 D1:A95C -  -  -  -  ; ***************************************************************************************
   18 D1:A95C -  -  -  -  
   19 D1:A95C -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A95C C9 -  -  -  		ret
   21 D1:A95D -  -  -  -  
   22 D1:A95D -  -  -  -  ; ***************************************************************************************
   23 D1:A95D -  -  -  -  ;
   24 D1:A95D -  -  -  -  ;									Changes and Updates
   25 D1:A95D -  -  -  -  ;
   26 D1:A95D -  -  -  -  ; ***************************************************************************************
   27 D1:A95D -  -  -  -  ;
   28 D1:A95D -  -  -  -  ;		Date			Notes
   29 D1:A95D -  -  -  -  ;		==== 			=====
   30 D1:A95D -  -  -  -  ;
   31 D1:A95D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A95D -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A95D -  -  -  -  ; ***************************************************************************************
    2 D1:A95D -  -  -  -  ; ***************************************************************************************
    3 D1:A95D -  -  -  -  ;
    4 D1:A95D -  -  -  -  ;		Name : 		end.asm
    5 D1:A95D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95D -  -  -  -  ;		Reviewed :	No
    8 D1:A95D -  -  -  -  ;		Purpose :	End command
    9 D1:A95D -  -  -  -  ;
   10 D1:A95D -  -  -  -  ; ***************************************************************************************
   11 D1:A95D -  -  -  -  ; ***************************************************************************************
   12 D1:A95D -  -  -  -  
   13 D1:A95D -  -  -  -  ; ***************************************************************************************
   14 D1:A95D -  -  -  -  ;
   15 D1:A95D -  -  -  -  ;										END command
   16 D1:A95D -  -  -  -  ;
   17 D1:A95D -  -  -  -  ; ***************************************************************************************
   18 D1:A95D -  -  -  -  
   19 D1:A95D -  -  -  -  Command_END: 	;; [end]
   20 D1:A95D 3E 00 C3 A4 
              AA D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A963 -  -  -  -  
   22 D1:A963 -  -  -  -  ; ***************************************************************************************
   23 D1:A963 -  -  -  -  ;
   24 D1:A963 -  -  -  -  ;									Changes and Updates
   25 D1:A963 -  -  -  -  ;
   26 D1:A963 -  -  -  -  ; ***************************************************************************************
   27 D1:A963 -  -  -  -  ;
   28 D1:A963 -  -  -  -  ;		Date			Notes
   29 D1:A963 -  -  -  -  ;		==== 			=====
   30 D1:A963 -  -  -  -  ;
   31 D1:A963 -  -  -  -  ; ***************************************************************************************
   32 D1:A963 -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A963 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A963 -  -  -  -  ; ***************************************************************************************
    2 D1:A963 -  -  -  -  ; ***************************************************************************************
    3 D1:A963 -  -  -  -  ;
    4 D1:A963 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A963 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A963 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A963 -  -  -  -  ;		Reviewed :	None
    8 D1:A963 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A963 -  -  -  -  ;
   10 D1:A963 -  -  -  -  ; ***************************************************************************************
   11 D1:A963 -  -  -  -  ; ***************************************************************************************
   12 D1:A963 -  -  -  -  
   13 D1:A963 -  -  -  -  ; ***************************************************************************************
   14 D1:A963 -  -  -  -  ;
   15 D1:A963 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A963 -  -  -  -  ;
   17 D1:A963 -  -  -  -  ; ***************************************************************************************
   18 D1:A963 -  -  -  -  
   19 D1:A963 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A963 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A968 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A96C DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A96F DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A971 -  -  -  -  		;
   25 D1:A971 ED 7B D5 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A976 C3 FC A9 D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A97A -  -  -  -  
   28 D1:A97A -  -  -  -  ; ***************************************************************************************
   29 D1:A97A -  -  -  -  ;
   30 D1:A97A -  -  -  -  ;									Changes and Updates
   31 D1:A97A -  -  -  -  ;
   32 D1:A97A -  -  -  -  ; ***************************************************************************************
   33 D1:A97A -  -  -  -  ;
   34 D1:A97A -  -  -  -  ;		Date			Notes
   35 D1:A97A -  -  -  -  ;		==== 			=====
   36 D1:A97A -  -  -  -  ;
   37 D1:A97A -  -  -  -  ; ***************************************************************************************
   38 D1:A97A -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A97A -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:A97A -  -  -  -  ; ***************************************************************************************
    2 D1:A97A -  -  -  -  ; ***************************************************************************************
    3 D1:A97A -  -  -  -  ;
    4 D1:A97A -  -  -  -  ;		Name : 		print.asm
    5 D1:A97A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A97A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A97A -  -  -  -  ;		Reviewed :	No
    8 D1:A97A -  -  -  -  ;		Purpose :	Print command
    9 D1:A97A -  -  -  -  ;
   10 D1:A97A -  -  -  -  ; ***************************************************************************************
   11 D1:A97A -  -  -  -  ; ***************************************************************************************
   12 D1:A97A -  -  -  -  
   13 D1:A97A -  -  -  -  ; ***************************************************************************************
   14 D1:A97A -  -  -  -  ;
   15 D1:A97A -  -  -  -  ;										PRINT command
   16 D1:A97A -  -  -  -  ;
   17 D1:A97A -  -  -  -  ; ***************************************************************************************
   18 D1:A97A -  -  -  -  
   19 D1:A97A -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:A97A -  -  -  -  		;
   21 D1:A97A -  -  -  -  		;		Main loop
   22 D1:A97A -  -  -  -  		;
   23 D1:A97A -  -  -  -  _CPRLoop:
   24 D1:A97A DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:A97D FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:A97F 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:A981 FE A5 -  -  		cp 		KWD_COLON 	
   28 D1:A983 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:A985 FE A6 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:A987 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:A989 FE A4 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:A98B 28 2C -  -  		jr 		z,_CPRTab
   33 D1:A98D FE A7 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:A98F 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:A991 -  -  -  -  		;
   36 D1:A991 CD CF AC D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:A995 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:A997 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:A999 -  -  -  -  		;
   40 D1:A999 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:A99B -  -  -  -  _CPRPrintNumber:
   42 D1:A99B F5 -  -  -  		push 	af 							; print leading space
   43 D1:A99C 3E 20 -  -  		ld 		a,' '
   44 D1:A99E CD C8 B5 D1 		call 	SYSPrintChar
   45 D1:A9A2 F1 -  -  -  		pop 	af
   46 D1:A9A3 01 07 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:A9A7 C5 -  -  -  		push 	bc
   48 D1:A9A8 CD 55 B5 D1 		call 	Int32ToString 				; convert to string
   49 D1:A9AC E1 -  -  -  		pop 	hl
   50 D1:A9AD -  -  -  -  		;
   51 D1:A9AD -  -  -  -  		; 		Print text at HL.
   52 D1:A9AD -  -  -  -  		;
   53 D1:A9AD -  -  -  -  _CPRPrintHL:
   54 D1:A9AD CD 09 B0 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:A9B1 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:A9B3 -  -  -  -  		;
   57 D1:A9B3 -  -  -  -  		; 		New line (')
   58 D1:A9B3 -  -  -  -  		;
   59 D1:A9B3 -  -  -  -  _CPRNewLine:
   60 D1:A9B3 CD F0 B5 D1 		call 	SYSPrintCRLF
   61 D1:A9B7 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:A9B9 -  -  -  -  		;
   63 D1:A9B9 -  -  -  -  		; 		Tab command (,)
   64 D1:A9B9 -  -  -  -  		;
   65 D1:A9B9 -  -  -  -  _CPRTab:
   66 D1:A9B9 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:A9BB CD C8 B5 D1 		call 	SYSPrintChar
   68 D1:A9BF -  -  -  -  		;
   69 D1:A9BF -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:A9BF -  -  -  -  		;
   71 D1:A9BF -  -  -  -  _CPRCheckNext:
   72 D1:A9BF DD 23 -  -  		inc 	ix 							; consume current
   73 D1:A9C1 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:A9C4 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:A9C6 C8 -  -  -  		ret 	z
   76 D1:A9C7 FE A5 -  -  		cp 		KWD_COLON
   77 D1:A9C9 C8 -  -  -  		ret 	z
   78 D1:A9CA 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:A9CC -  -  -  -  		;
   80 D1:A9CC -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:A9CC -  -  -  -  		;
   82 D1:A9CC -  -  -  -  _CPRExitNL:
   83 D1:A9CC CD F0 B5 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:A9D0 C9 -  -  -  		ret
Listing for file "_build.asm"
   19 D1:A9D1 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:A9D1 -  -  -  -  ; ***************************************************************************************
    2 D1:A9D1 -  -  -  -  ; ***************************************************************************************
    3 D1:A9D1 -  -  -  -  ;
    4 D1:A9D1 -  -  -  -  ;		Name : 		rem.asm
    5 D1:A9D1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9D1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9D1 -  -  -  -  ;		Reviewed :	No
    8 D1:A9D1 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:A9D1 -  -  -  -  ;
   10 D1:A9D1 -  -  -  -  ; ***************************************************************************************
   11 D1:A9D1 -  -  -  -  ; ***************************************************************************************
   12 D1:A9D1 -  -  -  -  
   13 D1:A9D1 -  -  -  -  ; ***************************************************************************************
   14 D1:A9D1 -  -  -  -  ;
   15 D1:A9D1 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:A9D1 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:A9D1 -  -  -  -  ;
   18 D1:A9D1 -  -  -  -  ; ***************************************************************************************
   19 D1:A9D1 -  -  -  -  
   20 D1:A9D1 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:A9D1 -  -  -  -  Command_REM2: 	;; [']
   22 D1:A9D1 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:A9D4 DD 23 -  -  		inc 	ix
   24 D1:A9D6 FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:A9D8 C8 -  -  -  		ret 	z
   26 D1:A9D9 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:A9DB C8 -  -  -  		ret 	z
   28 D1:A9DC FE 3F -  -  		cp 		STRING_MARKER
   29 D1:A9DE C2 0E AB D1 		jp 		nz,SyntaxError
   30 D1:A9E2 -  -  -  -  		;		
   31 D1:A9E2 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:A9E6 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:A9E9 13 -  -  -  		inc 	de 
   34 D1:A9EA 13 -  -  -  		inc 	de
   35 D1:A9EB DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:A9ED C9 -  -  -  		ret
   37 D1:A9EE -  -  -  -  
   38 D1:A9EE -  -  -  -  ; ***************************************************************************************
   39 D1:A9EE -  -  -  -  ;
   40 D1:A9EE -  -  -  -  ;									Changes and Updates
   41 D1:A9EE -  -  -  -  ;
   42 D1:A9EE -  -  -  -  ; ***************************************************************************************
   43 D1:A9EE -  -  -  -  ;
   44 D1:A9EE -  -  -  -  ;		Date			Notes
   45 D1:A9EE -  -  -  -  ;		==== 			=====
   46 D1:A9EE -  -  -  -  ;
   47 D1:A9EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:A9EE -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:A9EE -  -  -  -  ; ***************************************************************************************
    2 D1:A9EE -  -  -  -  ; ***************************************************************************************
    3 D1:A9EE -  -  -  -  ;
    4 D1:A9EE -  -  -  -  ;		Name : 		run.asm
    5 D1:A9EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9EE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9EE -  -  -  -  ;		Reviewed :	No
    8 D1:A9EE -  -  -  -  ;		Purpose :	Run command
    9 D1:A9EE -  -  -  -  ;
   10 D1:A9EE -  -  -  -  ; ***************************************************************************************
   11 D1:A9EE -  -  -  -  ; ***************************************************************************************
   12 D1:A9EE -  -  -  -  
   13 D1:A9EE -  -  -  -  ; ***************************************************************************************
   14 D1:A9EE -  -  -  -  ;
   15 D1:A9EE -  -  -  -  ;										RUN command
   16 D1:A9EE -  -  -  -  ;
   17 D1:A9EE -  -  -  -  ; ***************************************************************************************
   18 D1:A9EE -  -  -  -  
   19 D1:A9EE -  -  -  -  Command_RUN: 	;; [run]
   20 D1:A9EE CD AF AF D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:A9F2 -  -  -  -  
   22 D1:A9F2 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:A9F7 ED 73 D5 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:A9FC -  -  -  -  		;
   25 D1:A9FC -  -  -  -  		; 		New line at IX.
   26 D1:A9FC -  -  -  -  		;
   27 D1:A9FC -  -  -  -  CRNewLine:
   28 D1:A9FC DD 22 D1 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 D1:AA01 -  -  -  -  		;
   30 D1:AA01 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 D1:AA04 B7 -  -  -  		or 		a
   32 D1:AA05 CA 5D A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   33 D1:AA09 -  -  -  -  		;
   34 D1:AA09 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 D1:AA0B DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 D1:AA0D DD 23 -  -  		inc 	ix
   37 D1:AA0F -  -  -  -  		;
   38 D1:AA0F -  -  -  -  		; 		New command at IX
   39 D1:AA0F -  -  -  -  		;
   40 D1:AA0F -  -  -  -  _CRNewCommand:	
   41 D1:AA0F DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 D1:AA12 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 D1:AA13 F2 4A AA D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 D1:AA17 -  -  -  -  		;
   45 D1:AA17 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 D1:AA19 30 06 -  -  		jr  	nc,_CRDoCommand
   47 D1:AA1B FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 D1:AA1D D2 3E AA D1 		jp 		nc,_CRAlternateLets
   49 D1:AA21 -  -  -  -  		;
   50 D1:AA21 -  -  -  -  _CRDoCommand:		
   51 D1:AA21 E6 7F 21 00 
              00 00 6F 29 
              29 11 7E B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 D1:AA36 DD 23 -  -  		inc 	ix 							; skip over token.
   53 D1:AA38 CD D9 A8 D1 		call 	JumpCode 					; call the routine.
   54 D1:AA3C 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 D1:AA3E -  -  -  -  		;
   56 D1:AA3E -  -  -  -  		; 		Do CALL (HL)
   57 D1:AA3E -  -  -  -  		;
   58 D1:AA3E -  -  -  -  		;
   59 D1:AA3E -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 D1:AA3E -  -  -  -  		;		
   61 D1:AA3E -  -  -  -  _CRAlternateLets:		
   62 D1:AA3E FE 83 -  -  		cp 		KWD_PLING
   63 D1:AA40 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 D1:AA42 FE 84 -  -  		cp 		KWD_QMARK
   65 D1:AA44 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 D1:AA46 C3 0E AB D1 		jp 		SyntaxError
   67 D1:AA4A -  -  -  -  		;
   68 D1:AA4A -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 D1:AA4A -  -  -  -  		;
   70 D1:AA4A -  -  -  -  _CRAssignmentHandler:		
   71 D1:AA4A FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 D1:AA4C D2 0E AB D1 		jp 		nc,SyntaxError
   73 D1:AA50 -  -  -  -  _CRAssignmentLet:		
   74 D1:AA50 3E 0E C3 A4 
              AA D1 -  -  		ERR_TODO
   75 D1:AA56 -  -  -  -  		;call	Command_LET
   76 D1:AA56 C3 0F AA D1 		jp 		_CRNewCommand
   77 D1:AA5A -  -  -  -  
   78 D1:AA5A -  -  -  -  ; ***************************************************************************************
   79 D1:AA5A -  -  -  -  ;
   80 D1:AA5A -  -  -  -  ;									Changes and Updates
   81 D1:AA5A -  -  -  -  ;
   82 D1:AA5A -  -  -  -  ; ***************************************************************************************
   83 D1:AA5A -  -  -  -  ;
   84 D1:AA5A -  -  -  -  ;		Date			Notes
   85 D1:AA5A -  -  -  -  ;		==== 			=====
   86 D1:AA5A -  -  -  -  ;
   87 D1:AA5A -  -  -  -  ; ***************************************************************************************
   88 D1:AA5A -  -  -  -  		
Listing for file "_build.asm"
   21 D1:AA5A -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AA5A -  -  -  -  ; ***************************************************************************************
    2 D1:AA5A -  -  -  -  ; ***************************************************************************************
    3 D1:AA5A -  -  -  -  ;
    4 D1:AA5A -  -  -  -  ;		Name : 		stop.asm
    5 D1:AA5A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA5A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA5A -  -  -  -  ;		Reviewed :	No
    8 D1:AA5A -  -  -  -  ;		Purpose :	Stop command
    9 D1:AA5A -  -  -  -  ;
   10 D1:AA5A -  -  -  -  ; ***************************************************************************************
   11 D1:AA5A -  -  -  -  ; ***************************************************************************************
   12 D1:AA5A -  -  -  -  
   13 D1:AA5A -  -  -  -  ; ***************************************************************************************
   14 D1:AA5A -  -  -  -  ;
   15 D1:AA5A -  -  -  -  ;										STOP command
   16 D1:AA5A -  -  -  -  ;
   17 D1:AA5A -  -  -  -  ; ***************************************************************************************
   18 D1:AA5A -  -  -  -  
   19 D1:AA5A -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AA5A 3E 0C C3 A4 
              AA D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AA60 -  -  -  -  
   22 D1:AA60 -  -  -  -  ; ***************************************************************************************
   23 D1:AA60 -  -  -  -  ;
   24 D1:AA60 -  -  -  -  ;									Changes and Updates
   25 D1:AA60 -  -  -  -  ;
   26 D1:AA60 -  -  -  -  ; ***************************************************************************************
   27 D1:AA60 -  -  -  -  ;
   28 D1:AA60 -  -  -  -  ;		Date			Notes
   29 D1:AA60 -  -  -  -  ;		==== 			=====
   30 D1:AA60 -  -  -  -  ;
   31 D1:AA60 -  -  -  -  ; ***************************************************************************************
   32 D1:AA60 -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AA60 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AA60 -  -  -  -  ; ***************************************************************************************
    2 D1:AA60 -  -  -  -  ; ***************************************************************************************
    3 D1:AA60 -  -  -  -  ;
    4 D1:AA60 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AA60 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA60 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA60 -  -  -  -  ;		Reviewed :	No
    8 D1:AA60 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AA60 -  -  -  -  ;
   10 D1:AA60 -  -  -  -  ; ***************************************************************************************
   11 D1:AA60 -  -  -  -  ; ***************************************************************************************
   12 D1:AA60 -  -  -  -  
   13 D1:AA60 -  -  -  -  ; ***************************************************************************************
   14 D1:AA60 -  -  -  -  ;
   15 D1:AA60 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AA60 -  -  -  -  ;
   17 D1:AA60 -  -  -  -  ; ***************************************************************************************
   18 D1:AA60 -  -  -  -  
   19 D1:AA60 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AA60             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AA60             		inc 	ix
   22 D1:AA60             		cp 		ch 							; exit if matches
   23 D1:AA60             		ret 	z
   24 D1:AA60             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AA60             		jp 		ErrorHandler
   26 D1:AA60             #endmacro
   27 D1:AA60 -  -  -  -  
   28 D1:AA60 -  -  -  -  CheckLeftBracket:
   29 D1:AA60 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 A4 
              AA D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AA6E -  -  -  -  
   31 D1:AA6E -  -  -  -  CheckRightBracket:
   32 D1:AA6E DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 A4 
              AA D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AA7C -  -  -  -  
   34 D1:AA7C -  -  -  -  CheckDollar:
   35 D1:AA7C DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 A4 
              AA D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AA8A -  -  -  -  		
   37 D1:AA8A -  -  -  -  CheckComma:
   38 D1:AA8A DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 A4 
              AA D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AA98 -  -  -  -  
   40 D1:AA98 -  -  -  -  ; ***************************************************************************************
   41 D1:AA98 -  -  -  -  ;
   42 D1:AA98 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AA98 -  -  -  -  ;
   44 D1:AA98 -  -  -  -  ; ***************************************************************************************
   45 D1:AA98 -  -  -  -  
   46 D1:AA98 -  -  -  -  CheckNextA:
   47 D1:AA98 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AA9B DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AA9D C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AA9E 3E 0D C3 A4 
              AA D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AAA4 -  -  -  -  		
   52 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   53 D1:AAA4 -  -  -  -  ;
   54 D1:AAA4 -  -  -  -  ;									Changes and Updates
   55 D1:AAA4 -  -  -  -  ;
   56 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   57 D1:AAA4 -  -  -  -  ;
   58 D1:AAA4 -  -  -  -  ;		Date			Notes
   59 D1:AAA4 -  -  -  -  ;		==== 			=====
   60 D1:AAA4 -  -  -  -  ;
   61 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   62 D1:AAA4 -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AAA4 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AAA4 -  -  -  -  ; ***************************************************************************************
    2 D1:AAA4 -  -  -  -  ; ***************************************************************************************
    3 D1:AAA4 -  -  -  -  ;
    4 D1:AAA4 -  -  -  -  ;		Name : 		errors.asm
    5 D1:AAA4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAA4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAA4 -  -  -  -  ;		Reviewed :	No
    8 D1:AAA4 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AAA4 -  -  -  -  ;
   10 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   11 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   12 D1:AAA4 -  -  -  -  
   13 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   14 D1:AAA4 -  -  -  -  ;
   15 D1:AAA4 -  -  -  -  ;								Error handler, message A 
   16 D1:AAA4 -  -  -  -  ;
   17 D1:AAA4 -  -  -  -  ; ***************************************************************************************
   18 D1:AAA4 -  -  -  -  
   19 D1:AAA4 -  -  -  -  ErrorHandler:
   20 D1:AAA4 F5 -  -  -  		push 	af 						; save error ID
   21 D1:AAA5 -  -  -  -  
   22 D1:AAA5 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AAA9 6F -  -  -  		ld 		l,a
   24 D1:AAAA 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AAAB 29 -  -  -  		add 	hl,hl 		
   26 D1:AAAC 11 51 B1 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AAB0 19 -  -  -  		add 	hl,de
   28 D1:AAB1 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AAB3 CD 09 B0 D1 		call 	PrintStringAtHL
   30 D1:AAB7 -  -  -  -  		;
   31 D1:AAB7 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AAB8 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AAB9 28 2F -  -  		jr 		z,_EHExit
   34 D1:AABB -  -  -  -  		;
   35 D1:AABB DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AAC0 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AAC3 B7 -  -  -  		or 		a
   38 D1:AAC4 28 24 -  -  		jr 		z,_EHExit
   39 D1:AAC6 -  -  -  -  
   40 D1:AAC6 21 F2 AA D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AACA CD 09 B0 D1 		call 	PrintStringAtHL 
   42 D1:AACE -  -  -  -  		
   43 D1:AACE D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AACF 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AAD3 D9 -  -  -  		exx 
   46 D1:AAD4 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AAD7 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AADA 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AADC 01 07 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AAE0 CD 55 B5 D1 		call 	Int32ToString
   51 D1:AAE4 C5 -  -  -  		push 	bc
   52 D1:AAE5 E1 -  -  -  		pop 	hl
   53 D1:AAE6 CD 09 B0 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AAEA -  -  -  -  _EHExit:		
   55 D1:AAEA CD F0 B5 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AAEE C3 9B A8 D1 		jp 		WarmStart
   57 D1:AAF2 -  -  -  -  
   58 D1:AAF2 -  -  -  -  _EHAtText:
   59 D1:AAF2 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AAFC -  -  -  -  
   61 D1:AAFC -  -  -  -  NotImplemented:
   62 D1:AAFC 3E 04 C3 A4 
              AA D1 -  -  		ERR_DISABLED
   63 D1:AB02 -  -  -  -  TypeMismatch:
   64 D1:AB02 3E 02 C3 A4 
              AA D1 -  -  		ERR_BADTYPE
   65 D1:AB08 -  -  -  -  BadValue:
   66 D1:AB08 3E 03 C3 A4 
              AA D1 -  -  		ERR_BADVALUE
   67 D1:AB0E -  -  -  -  SyntaxError:
   68 D1:AB0E 3E 0D C3 A4 
              AA D1 -  -  		ERR_SYNTAX
   69 D1:AB14 -  -  -  -  						
   70 D1:AB14 -  -  -  -  ; ***************************************************************************************
   71 D1:AB14 -  -  -  -  ;
   72 D1:AB14 -  -  -  -  ;									Changes and Updates
   73 D1:AB14 -  -  -  -  ;
   74 D1:AB14 -  -  -  -  ; ***************************************************************************************
   75 D1:AB14 -  -  -  -  ;
   76 D1:AB14 -  -  -  -  ;		Date			Notes
   77 D1:AB14 -  -  -  -  ;		==== 			=====
   78 D1:AB14 -  -  -  -  ;
   79 D1:AB14 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 D1:AB14 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AB14 -  -  -  -  ; ***************************************************************************************
    2 D1:AB14 -  -  -  -  ; ***************************************************************************************
    3 D1:AB14 -  -  -  -  ;
    4 D1:AB14 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AB14 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB14 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB14 -  -  -  -  ;		Reviewed :	No
    8 D1:AB14 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AB14 -  -  -  -  ;
   10 D1:AB14 -  -  -  -  ; ***************************************************************************************
   11 D1:AB14 -  -  -  -  ; ***************************************************************************************
   12 D1:AB14 -  -  -  -  
   13 D1:AB14 -  -  -  -  ; ***************************************************************************************
   14 D1:AB14 -  -  -  -  ;
   15 D1:AB14 -  -  -  -  ; 									Addition
   16 D1:AB14 -  -  -  -  ;
   17 D1:AB14 -  -  -  -  ; ***************************************************************************************
   18 D1:AB14 -  -  -  -  
   19 D1:AB14 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AB14 CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 D4 
              B4 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AB22 -  -  -  -  
   22 D1:AB22 -  -  -  -  ; ***************************************************************************************
   23 D1:AB22 -  -  -  -  ;
   24 D1:AB22 -  -  -  -  ; 									Subtraction
   25 D1:AB22 -  -  -  -  ;
   26 D1:AB22 -  -  -  -  ; ***************************************************************************************
   27 D1:AB22 -  -  -  -  
   28 D1:AB22 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AB22 CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 DC 
              B4 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AB30 -  -  -  -  
   31 D1:AB30 -  -  -  -  ; ***************************************************************************************
   32 D1:AB30 -  -  -  -  ;
   33 D1:AB30 -  -  -  -  ; 									  Multiply
   34 D1:AB30 -  -  -  -  ;
   35 D1:AB30 -  -  -  -  ; ***************************************************************************************
   36 D1:AB30 -  -  -  -  
   37 D1:AB30 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AB30 CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 9B 
              B4 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AB3E -  -  -  -  
   40 D1:AB3E -  -  -  -  ; ***************************************************************************************
   41 D1:AB3E -  -  -  -  ;
   42 D1:AB3E -  -  -  -  ; 									  Divide
   43 D1:AB3E -  -  -  -  ;
   44 D1:AB3E -  -  -  -  ; ***************************************************************************************
   45 D1:AB3E -  -  -  -  
   46 D1:AB3E -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AB3E -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AB3E CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 9B 
              B3 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AB4C -  -  -  -  
   50 D1:AB4C -  -  -  -  ; ***************************************************************************************
   51 D1:AB4C -  -  -  -  ;
   52 D1:AB4C -  -  -  -  ; 									  Modulus
   53 D1:AB4C -  -  -  -  ;
   54 D1:AB4C -  -  -  -  ; ***************************************************************************************
   55 D1:AB4C -  -  -  -  
   56 D1:AB4C -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AB4C CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 9E 
              B3 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AB5A -  -  -  -  
   59 D1:AB5A -  -  -  -  ; ***************************************************************************************
   60 D1:AB5A -  -  -  -  ;
   61 D1:AB5A -  -  -  -  ; 									  Logical
   62 D1:AB5A -  -  -  -  ;
   63 D1:AB5A -  -  -  -  ; ***************************************************************************************
   64 D1:AB5A -  -  -  -  
   65 D1:AB5A -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AB5A CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 E6 
              B4 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AB68 -  -  -  -  
   68 D1:AB68 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AB68 CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 F3 
              B4 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AB76 -  -  -  -  
   71 D1:AB76 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AB76 CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 00 
              B5 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AB84 -  -  -  -  
   74 D1:AB84 -  -  -  -  ; ***************************************************************************************
   75 D1:AB84 -  -  -  -  ;
   76 D1:AB84 -  -  -  -  ;									Changes and Updates
   77 D1:AB84 -  -  -  -  ;
   78 D1:AB84 -  -  -  -  ; ***************************************************************************************
   79 D1:AB84 -  -  -  -  ;
   80 D1:AB84 -  -  -  -  ;		Date			Notes
   81 D1:AB84 -  -  -  -  ;		==== 			=====
   82 D1:AB84 -  -  -  -  ;
   83 D1:AB84 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB84 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AB84 -  -  -  -  ; ***************************************************************************************
    2 D1:AB84 -  -  -  -  ; ***************************************************************************************
    3 D1:AB84 -  -  -  -  ;
    4 D1:AB84 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AB84 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB84 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB84 -  -  -  -  ;		Reviewed :	No
    8 D1:AB84 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AB84 -  -  -  -  ;
   10 D1:AB84 -  -  -  -  ; ***************************************************************************************
   11 D1:AB84 -  -  -  -  ; ***************************************************************************************
   12 D1:AB84 -  -  -  -  
   13 D1:AB84 -  -  -  -  ; ***************************************************************************************
   14 D1:AB84 -  -  -  -  ;
   15 D1:AB84 -  -  -  -  ; 									<l> <op> <r>
   16 D1:AB84 -  -  -  -  ;
   17 D1:AB84 -  -  -  -  ; ***************************************************************************************
   18 D1:AB84 -  -  -  -  
   19 D1:AB84 -  -  -  -  ALULongReference:			;; [!]
   20 D1:AB84 CD 94 AB D1 		call 	BRGetAddress 				; calculate address
   21 D1:AB88 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AB8A CB F9 -  -  		set 	CIsReference,c
   23 D1:AB8C C9 -  -  -  		ret
   24 D1:AB8D -  -  -  -  
   25 D1:AB8D -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AB8D CD 84 AB D1 		call 	ALULongReference
   27 D1:AB91 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AB93 C9 -  -  -  		ret
   29 D1:AB94 -  -  -  -  
   30 D1:AB94 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AB94 CD 31 AC D1 
              78 B1 C2 02 
              AB D1 C3 A2 
              AB D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ABA2 -  -  -  -  _BRGAMain:		
   33 D1:ABA2 CD D4 B4 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:ABA6 CD 37 AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:ABAA C9 -  -  -  		ret
   36 D1:ABAB -  -  -  -  
   37 D1:ABAB -  -  -  -  ; ***************************************************************************************
   38 D1:ABAB -  -  -  -  ;
   39 D1:ABAB -  -  -  -  ;									Changes and Updates
   40 D1:ABAB -  -  -  -  ;
   41 D1:ABAB -  -  -  -  ; ***************************************************************************************
   42 D1:ABAB -  -  -  -  ;
   43 D1:ABAB -  -  -  -  ;		Date			Notes
   44 D1:ABAB -  -  -  -  ;		==== 			=====
   45 D1:ABAB -  -  -  -  ;
   46 D1:ABAB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:ABAB -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:ABAB -  -  -  -  ; ***************************************************************************************
    2 D1:ABAB -  -  -  -  ; ***************************************************************************************
    3 D1:ABAB -  -  -  -  ;
    4 D1:ABAB -  -  -  -  ;		Name : 		compare.asm
    5 D1:ABAB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABAB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABAB -  -  -  -  ;		Reviewed :	No
    8 D1:ABAB -  -  -  -  ;		Purpose :	Comparison code
    9 D1:ABAB -  -  -  -  ;
   10 D1:ABAB -  -  -  -  ; ***************************************************************************************
   11 D1:ABAB -  -  -  -  ; ***************************************************************************************
   12 D1:ABAB -  -  -  -  
   13 D1:ABAB -  -  -  -  #macro compare_equals(n)
   14 D1:ABAB             		call 	CompareBaseCode
   15 D1:ABAB             		cp 		n
   16 D1:ABAB             		jr 		z,UnaryInt32True
   17 D1:ABAB             		jr 		UnaryInt32False
   18 D1:ABAB             #endmacro
   19 D1:ABAB -  -  -  -  
   20 D1:ABAB -  -  -  -  #macro compare_not_equals(n)
   21 D1:ABAB             		call 	CompareBaseCode
   22 D1:ABAB             		cp 		n
   23 D1:ABAB             		jr 		nz,UnaryInt32True
   24 D1:ABAB             		jr 		UnaryInt32False
   25 D1:ABAB             #endmacro
   26 D1:ABAB -  -  -  -  
   27 D1:ABAB -  -  -  -  ; ***************************************************************************************
   28 D1:ABAB -  -  -  -  ;
   29 D1:ABAB -  -  -  -  ; 								Return True/False
   30 D1:ABAB -  -  -  -  ;
   31 D1:ABAB -  -  -  -  ; ***************************************************************************************
   32 D1:ABAB -  -  -  -  
   33 D1:ABAB -  -  -  -  UnaryInt32True:	
   34 D1:ABAB 3E FF -  -  		ld 		a,255
   35 D1:ABAD 18 01 -  -  		jr 		_Int32Logical
   36 D1:ABAF -  -  -  -  UnaryInt32False: 
   37 D1:ABAF AF -  -  -  		xor 	a
   38 D1:ABB0 -  -  -  -  _Int32Logical:
   39 D1:ABB0 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ABB1 67 -  -  -  		ld 		h,a
   41 D1:ABB2 D9 -  -  -  		exx
   42 D1:ABB3 6F -  -  -  		ld 		l,a
   43 D1:ABB4 67 -  -  -  		ld 		h,a
   44 D1:ABB5 D9 -  -  -  		exx
   45 D1:ABB6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:ABB8 C9 -  -  -  		ret
   47 D1:ABB9 -  -  -  -  
   48 D1:ABB9 -  -  -  -  ; ***************************************************************************************
   49 D1:ABB9 -  -  -  -  ;
   50 D1:ABB9 -  -  -  -  ; 										> = < (compare == value)
   51 D1:ABB9 -  -  -  -  ;
   52 D1:ABB9 -  -  -  -  ; ***************************************************************************************
   53 D1:ABB9 -  -  -  -  
   54 D1:ABB9 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:ABB9 CD F5 AB D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:ABC3 -  -  -  -  
   57 D1:ABC3 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:ABC3 CD F5 AB D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:ABCD -  -  -  -  
   60 D1:ABCD -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:ABCD CD F5 AB D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:ABD7 -  -  -  -  
   63 D1:ABD7 -  -  -  -  ; ***************************************************************************************
   64 D1:ABD7 -  -  -  -  ;
   65 D1:ABD7 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:ABD7 -  -  -  -  ;
   67 D1:ABD7 -  -  -  -  ; ***************************************************************************************
   68 D1:ABD7 -  -  -  -  
   69 D1:ABD7 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:ABD7 CD F5 AB D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:ABE1 -  -  -  -  
   72 D1:ABE1 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:ABE1 CD F5 AB D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:ABEB -  -  -  -  
   75 D1:ABEB -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:ABEB CD F5 AB D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:ABF5 -  -  -  -  
   78 D1:ABF5 -  -  -  -  ; ***************************************************************************************
   79 D1:ABF5 -  -  -  -  ;
   80 D1:ABF5 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:ABF5 -  -  -  -  ;
   82 D1:ABF5 -  -  -  -  ; ***************************************************************************************
   83 D1:ABF5 -  -  -  -  
   84 D1:ABF5 -  -  -  -  CompareBaseCode:
   85 D1:ABF5 CD 31 AC D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:ABF9 -  -  -  -  
   87 D1:ABF9 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:ABFA A1 -  -  -  		and 	c
   89 D1:ABFB CB 47 -  -  		bit 	CIsString,a 
   90 D1:ABFD C2 0F AC D1 		jp 		nz,StringCompare
   91 D1:AC01 -  -  -  -  
   92 D1:AC01 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AC02 B1 -  -  -  		or 		c
   94 D1:AC03 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AC05 CA 14 B5 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AC09 -  -  -  -  
   97 D1:AC09 3E 02 C3 A4 
              AA D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AC0F -  -  -  -  ;
   99 D1:AC0F -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AC0F -  -  -  -  ;
  101 D1:AC0F -  -  -  -  StringCompare:
  102 D1:AC0F 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AC10 BE -  -  -  		cp 		(hl)
  104 D1:AC11 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AC13 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AC15 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AC16 23 -  -  -  		inc 	hl
  108 D1:AC17 FE 20 -  -  		cp 		' '
  109 D1:AC19 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AC1B AF -  -  -  		xor 	a 							; return 0.
  111 D1:AC1C C9 -  -  -  		ret
  112 D1:AC1D -  -  -  -  
  113 D1:AC1D -  -  -  -  _SCLess:
  114 D1:AC1D 3E FF -  -  		ld 		a,$FF
  115 D1:AC1F C9 -  -  -  		ret
  116 D1:AC20 -  -  -  -  _SCGreater:
  117 D1:AC20 3E 01 -  -  		ld 		a,1
  118 D1:AC22 C9 -  -  -  		ret
  119 D1:AC23 -  -  -  -  
  120 D1:AC23 3E 0E C3 A4 
              AA D1 -  -  		ERR_TODO()
  121 D1:AC29 -  -  -  -  
  122 D1:AC29 -  -  -  -  ; ***************************************************************************************
  123 D1:AC29 -  -  -  -  ;
  124 D1:AC29 -  -  -  -  ;									Changes and Updates
  125 D1:AC29 -  -  -  -  ;
  126 D1:AC29 -  -  -  -  ; ***************************************************************************************
  127 D1:AC29 -  -  -  -  ;
  128 D1:AC29 -  -  -  -  ;		Date			Notes
  129 D1:AC29 -  -  -  -  ;		==== 			=====
  130 D1:AC29 -  -  -  -  ;
  131 D1:AC29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC29 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AC29 -  -  -  -  ; ***************************************************************************************
    2 D1:AC29 -  -  -  -  ; ***************************************************************************************
    3 D1:AC29 -  -  -  -  ;
    4 D1:AC29 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AC29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC29 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC29 -  -  -  -  ;		Reviewed :	No
    8 D1:AC29 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AC29 -  -  -  -  ;
   10 D1:AC29 -  -  -  -  ; ***************************************************************************************
   11 D1:AC29 -  -  -  -  ; ***************************************************************************************
   12 D1:AC29 -  -  -  -  
   13 D1:AC29 -  -  -  -  ; ***************************************************************************************
   14 D1:AC29 -  -  -  -  ;
   15 D1:AC29 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AC29 -  -  -  -  ;
   17 D1:AC29 -  -  -  -  ; ***************************************************************************************
   18 D1:AC29 -  -  -  -  
   19 D1:AC29 -  -  -  -  SwapHLDE:
   20 D1:AC29 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AC2A D9 -  -  -  			exx
   22 D1:AC2B EB -  -  -  			ex 		de,hl
   23 D1:AC2C D9 -  -  -  			exx
   24 D1:AC2D 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AC2E 41 -  -  -  			ld 		b,c
   26 D1:AC2F 4F -  -  -  			ld 		c,a
   27 D1:AC30 C9 -  -  -  			ret
   28 D1:AC31 -  -  -  -  
   29 D1:AC31 -  -  -  -  ; ***************************************************************************************
   30 D1:AC31 -  -  -  -  ;
   31 D1:AC31 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AC31 -  -  -  -  ;
   33 D1:AC31 -  -  -  -  ; ***************************************************************************************
   34 D1:AC31 -  -  -  -  
   35 D1:AC31 -  -  -  -  DereferenceBoth:
   36 D1:AC31 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AC33 C4 0A AD D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AC37 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AC39 C8 -  -  -  			ret 	z
   40 D1:AC3A CD 29 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AC3E CD 0A AD D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AC42 CD 29 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AC46 C9 -  -  -  			ret
   44 D1:AC47 -  -  -  -  
   45 D1:AC47 -  -  -  -  ; ***************************************************************************************
   46 D1:AC47 -  -  -  -  ;
   47 D1:AC47 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AC47 -  -  -  -  ;
   49 D1:AC47 -  -  -  -  ; ***************************************************************************************
   50 D1:AC47 -  -  -  -  
   51 D1:AC47 -  -  -  -  NegateHLHL:	
   52 D1:AC47 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AC49 C2 02 AB D1 			jp 		nz,TypeMismatch
   54 D1:AC4D CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AC4F C4 0A AD D1 			call 	nz,Dereference 			; if required.
   56 D1:AC53 CD 3E B5 D1 			call 	Int32Negate
   57 D1:AC57 C9 -  -  -  			ret
Listing for file "_build.asm"
   28 D1:AC58 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AC58 -  -  -  -  ; ***************************************************************************************
    2 D1:AC58 -  -  -  -  ; ***************************************************************************************
    3 D1:AC58 -  -  -  -  ;
    4 D1:AC58 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AC58 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC58 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC58 -  -  -  -  ;		Reviewed :	None
    8 D1:AC58 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AC58 -  -  -  -  ;
   10 D1:AC58 -  -  -  -  ; ***************************************************************************************
   11 D1:AC58 -  -  -  -  ; ***************************************************************************************
   12 D1:AC58 -  -  -  -  
   13 D1:AC58 -  -  -  -  ; ***************************************************************************************
   14 D1:AC58 -  -  -  -  ;
   15 D1:AC58 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AC58 -  -  -  -  ;
   17 D1:AC58 -  -  -  -  ; ***************************************************************************************
   18 D1:AC58 -  -  -  -  
   19 D1:AC58 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AC58 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AC59 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AC59 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AC5A -  -  -  -  		;
   24 D1:AC5A -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AC5A -  -  -  -  		;
   26 D1:AC5A CD 66 AD D1 		call 	EvaluateTerm 				; get term
   27 D1:AC5E -  -  -  -  		;
   28 D1:AC5E -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AC5E -  -  -  -  		;
   30 D1:AC5E D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AC5F -  -  -  -  _EAPLoop:
   32 D1:AC5F DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AC62 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AC64 D8 -  -  -  		ret 	c
   35 D1:AC65 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AC67 D0 -  -  -  		ret 	nc
   37 D1:AC68 -  -  -  -  		;
   38 D1:AC68 -  -  -  -  		; 		Get the precedence.
   39 D1:AC68 -  -  -  -  		;
   40 D1:AC68 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AC69 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AC6B 21 40 B1 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AC6F B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AC70 6F -  -  -  		ld 		l,a
   45 D1:AC71 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AC72 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AC73 -  -  -  -  		;
   48 D1:AC73 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AC73 -  -  -  -  		;
   50 D1:AC73 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AC74 BB -  -  -  		cp 		e
   52 D1:AC75 D0 -  -  -  		ret 	nc
   53 D1:AC76 -  -  -  -  
   54 D1:AC76 -  -  -  -  		;
   55 D1:AC76 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AC76 -  -  -  -  		;
   57 D1:AC76 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AC77 -  -  -  -  		;
   59 D1:AC77 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AC7A F5 -  -  -  		push 	af
   61 D1:AC7B -  -  -  -  		;
   62 D1:AC7B C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AC7C D9 -  -  -  		exx 								; save HL'
   64 D1:AC7D E5 -  -  -  		push 	hl
   65 D1:AC7E D9 -  -  -  		exx 								
   66 D1:AC7F E5 -  -  -  		push 	hl 							; save HL
   67 D1:AC80 -  -  -  -  		;
   68 D1:AC80 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AC82 -  -  -  -  		;
   70 D1:AC82 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AC82 -  -  -  -  		;
   72 D1:AC82 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AC83 CD 59 AC D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AC87 -  -  -  -  		;
   75 D1:AC87 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AC87 -  -  -  -  		;
   77 D1:AC87 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AC88 -  -  -  -  
   79 D1:AC88 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AC89 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AC8A D9 -  -  -  		exx
   82 D1:AC8B EB -  -  -  		ex 		de,hl
   83 D1:AC8C E1 -  -  -  		pop 	hl
   84 D1:AC8D D9 -  -  -  		exx
   85 D1:AC8E C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AC8F 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AC90 -  -  -  -  		;
   88 D1:AC90 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AC90 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AC90 -  -  -  -  		;
   91 D1:AC90 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AC91 -  -  -  -  		;
   93 D1:AC91 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AC91 -  -  -  -  		;
   95 D1:AC91 D5 -  -  -  		push 	de
   96 D1:AC92 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AC93 E6 7F 21 00 
              00 00 6F 29 
              29 11 7E B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:ACA8 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:ACA9 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:ACAA CD D9 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:ACAE -  -  -  -  		;
  102 D1:ACAE D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:ACAF -  -  -  -  		;
  104 D1:ACAF 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:ACB1 -  -  -  -  
  106 D1:ACB1 -  -  -  -  ; ***************************************************************************************
  107 D1:ACB1 -  -  -  -  ;
  108 D1:ACB1 -  -  -  -  ;									Changes and Updates
  109 D1:ACB1 -  -  -  -  ;
  110 D1:ACB1 -  -  -  -  ; ***************************************************************************************
  111 D1:ACB1 -  -  -  -  ;
  112 D1:ACB1 -  -  -  -  ;		Date			Notes
  113 D1:ACB1 -  -  -  -  ;		==== 			=====
  114 D1:ACB1 -  -  -  -  ;
  115 D1:ACB1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:ACB1 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:ACB1 -  -  -  -  ; ***************************************************************************************
    2 D1:ACB1 -  -  -  -  ; ***************************************************************************************
    3 D1:ACB1 -  -  -  -  ;
    4 D1:ACB1 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:ACB1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACB1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACB1 -  -  -  -  ;		Reviewed :	No
    8 D1:ACB1 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:ACB1 -  -  -  -  ;
   10 D1:ACB1 -  -  -  -  ; ***************************************************************************************
   11 D1:ACB1 -  -  -  -  ; ***************************************************************************************
   12 D1:ACB1 -  -  -  -  
   13 D1:ACB1 -  -  -  -  ; ***************************************************************************************
   14 D1:ACB1 -  -  -  -  ;
   15 D1:ACB1 -  -  -  -  ; 								Evaluate an integer term
   16 D1:ACB1 -  -  -  -  ;
   17 D1:ACB1 -  -  -  -  ; ***************************************************************************************
   18 D1:ACB1 -  -  -  -  
   19 D1:ACB1 -  -  -  -  EvaluateIntegerTerm:
   20 D1:ACB1 CD 66 AD D1 		call 	EvaluateTerm
   21 D1:ACB5 CD 0A AD D1 		call 	DeReference
   22 D1:ACB9 CB 41 -  -  		bit 	CIsString,c
   23 D1:ACBB C8 -  -  -  		ret 	z
   24 D1:ACBC C3 02 AB D1 		jp 		TypeMismatch
   25 D1:ACC0 -  -  -  -  
   26 D1:ACC0 -  -  -  -  ; ***************************************************************************************
   27 D1:ACC0 -  -  -  -  ;
   28 D1:ACC0 -  -  -  -  ; 								Evaluate a string term
   29 D1:ACC0 -  -  -  -  ;
   30 D1:ACC0 -  -  -  -  ; ***************************************************************************************
   31 D1:ACC0 -  -  -  -  
   32 D1:ACC0 -  -  -  -  EvaluateStringTerm:
   33 D1:ACC0 CD 66 AD D1 		call 	EvaluateTerm
   34 D1:ACC4 CD 0A AD D1 		call 	DeReference
   35 D1:ACC8 CB 41 -  -  		bit 	CIsString,c
   36 D1:ACCA C0 -  -  -  		ret 	nz
   37 D1:ACCB C3 02 AB D1 		jp 		TypeMismatch
   38 D1:ACCF -  -  -  -  
   39 D1:ACCF -  -  -  -  ; ***************************************************************************************
   40 D1:ACCF -  -  -  -  ;
   41 D1:ACCF -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:ACCF -  -  -  -  ;
   43 D1:ACCF -  -  -  -  ; ***************************************************************************************
   44 D1:ACCF -  -  -  -  
   45 D1:ACCF -  -  -  -  EvaluateValue:
   46 D1:ACCF CD 58 AC D1 		call 	EvaluateAtPrecedence0
   47 D1:ACD3 C3 0A AD D1 		jp 		Dereference
   48 D1:ACD7 -  -  -  -  
   49 D1:ACD7 -  -  -  -  ; ***************************************************************************************
   50 D1:ACD7 -  -  -  -  ;
   51 D1:ACD7 -  -  -  -  ; 									Evaluate a number
   52 D1:ACD7 -  -  -  -  ;
   53 D1:ACD7 -  -  -  -  ; ***************************************************************************************
   54 D1:ACD7 -  -  -  -  
   55 D1:ACD7 -  -  -  -  EvaluateInteger:
   56 D1:ACD7 CD CF AC D1 		call 	EvaluateValue
   57 D1:ACDB CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:ACDD C8 -  -  -  		ret 	z
   59 D1:ACDE C3 02 AB D1 		jp 		TypeMismatch
   60 D1:ACE2 -  -  -  -  
   61 D1:ACE2 -  -  -  -  ; ***************************************************************************************
   62 D1:ACE2 -  -  -  -  ;
   63 D1:ACE2 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:ACE2 -  -  -  -  ;
   65 D1:ACE2 -  -  -  -  ; ***************************************************************************************
   66 D1:ACE2 -  -  -  -  
   67 D1:ACE2 -  -  -  -  Evaluate8BitInteger:
   68 D1:ACE2 CD D7 AC D1 		call 	EvaluateInteger
   69 D1:ACE6 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:ACE7 7C -  -  -  		ld 		a,h
   71 D1:ACE8 B5 -  -  -  		or 		l
   72 D1:ACE9 D9 -  -  -  		exx 	
   73 D1:ACEA B4 -  -  -  		or 		h
   74 D1:ACEB C2 08 AB D1 		jp 		nz,BadValue
   75 D1:ACEF 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:ACF0 C9 -  -  -  		ret
   77 D1:ACF1 -  -  -  -  		
   78 D1:ACF1 -  -  -  -  ; ***************************************************************************************
   79 D1:ACF1 -  -  -  -  ;
   80 D1:ACF1 -  -  -  -  ; 									Evaluate a string
   81 D1:ACF1 -  -  -  -  ;
   82 D1:ACF1 -  -  -  -  ; ***************************************************************************************
   83 D1:ACF1 -  -  -  -  
   84 D1:ACF1 -  -  -  -  EvaluateStringOnly:
   85 D1:ACF1 CD CF AC D1 		call 	EvaluateValue
   86 D1:ACF5 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:ACF7 CA 02 AB D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:ACFB C9 -  -  -  		ret
   89 D1:ACFC -  -  -  -  
   90 D1:ACFC -  -  -  -  ; ***************************************************************************************
   91 D1:ACFC -  -  -  -  ;
   92 D1:ACFC -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:ACFC -  -  -  -  ;
   94 D1:ACFC -  -  -  -  ; ***************************************************************************************
   95 D1:ACFC -  -  -  -  
   96 D1:ACFC -  -  -  -  Return8BitConstant:
   97 D1:ACFC 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AD00 6F -  -  -  		ld 		l,a
   99 D1:AD01 -  -  -  -  Return16BitConstant:
  100 D1:AD01 D9 -  -  -  		exx 								; clear HL'
  101 D1:AD02 21 00 00 00 		ld 		hl,0
  102 D1:AD06 D9 -  -  -  		exx
  103 D1:AD07 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AD09 C9 -  -  -  		ret
  105 D1:AD0A -  -  -  -  
  106 D1:AD0A -  -  -  -  ; ***************************************************************************************
  107 D1:AD0A -  -  -  -  ;
  108 D1:AD0A -  -  -  -  ;									Changes and Updates
  109 D1:AD0A -  -  -  -  ;
  110 D1:AD0A -  -  -  -  ; ***************************************************************************************
  111 D1:AD0A -  -  -  -  ;
  112 D1:AD0A -  -  -  -  ;		Date			Notes
  113 D1:AD0A -  -  -  -  ;		==== 			=====
  114 D1:AD0A -  -  -  -  ;
  115 D1:AD0A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD0A -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AD0A -  -  -  -  ; ***************************************************************************************
    2 D1:AD0A -  -  -  -  ; ***************************************************************************************
    3 D1:AD0A -  -  -  -  ;
    4 D1:AD0A -  -  -  -  ;		Name : 		reference.asm
    5 D1:AD0A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD0A -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AD0A -  -  -  -  ;		Reviewed :	No
    8 D1:AD0A -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AD0A -  -  -  -  ;
   10 D1:AD0A -  -  -  -  ; ***************************************************************************************
   11 D1:AD0A -  -  -  -  ; ***************************************************************************************
   12 D1:AD0A -  -  -  -  
   13 D1:AD0A -  -  -  -  ; ***************************************************************************************
   14 D1:AD0A -  -  -  -  ;
   15 D1:AD0A -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AD0A -  -  -  -  ;
   17 D1:AD0A -  -  -  -  ; ***************************************************************************************
   18 D1:AD0A -  -  -  -  
   19 D1:AD0A -  -  -  -  Dereference:
   20 D1:AD0A CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AD0C C8 -  -  -  		ret 	z
   22 D1:AD0D -  -  -  -  
   23 D1:AD0D CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AD0F -  -  -  -  		
   25 D1:AD0F CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AD11 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AD13 -  -  -  -  
   28 D1:AD13 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AD15 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AD17 -  -  -  -  
   31 D1:AD17 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AD18 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AD1A D9 -  -  -  		exx
   34 D1:AD1B E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AD1C 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AD1D 23 -  -  -  		inc  	hl
   37 D1:AD1E ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AD20 D9 -  -  -  		exx 								; fix back
   39 D1:AD21 C9 -  -  -  		ret
   40 D1:AD22 -  -  -  -  
   41 D1:AD22 -  -  -  -  _DeRefByte:		
   42 D1:AD22 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AD23 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AD27 6F -  -  -  		ld	 	l,a
   45 D1:AD28 D9 -  -  -  		exx
   46 D1:AD29 21 00 00 00 		ld 		hl,$0000
   47 D1:AD2D D9 -  -  -  		exx
   48 D1:AD2E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AD30 C9 -  -  -  		ret
   50 D1:AD31 -  -  -  -  
   51 D1:AD31 -  -  -  -  _DRInternal:
   52 D1:AD31 3E 04 C3 A4 
              AA D1 -  -  		ERR_DISABLED
   53 D1:AD37 -  -  -  -  
   54 D1:AD37 -  -  -  -  ; ***************************************************************************************
   55 D1:AD37 -  -  -  -  ;
   56 D1:AD37 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AD37 -  -  -  -  ;
   58 D1:AD37 -  -  -  -  ; ***************************************************************************************
   59 D1:AD37 -  -  -  -  
   60 D1:AD37 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AD37 -  -  -  -  		#ifdef EZ80
   62 D1:AD37 22 DF A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AD3B D9 -  -  -  		exx
   64 D1:AD3C 22 E1 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AD40 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AD44 D9 -  -  -  		exx
   67 D1:AD45 2A DF A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AD49 -  -  -  -  		#endif
   69 D1:AD49 C9 -  -  -  		ret
   70 D1:AD4A -  -  -  -  
   71 D1:AD4A -  -  -  -  ; ***************************************************************************************
   72 D1:AD4A -  -  -  -  ;
   73 D1:AD4A -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AD4A -  -  -  -  ;
   75 D1:AD4A -  -  -  -  ; ***************************************************************************************
   76 D1:AD4A -  -  -  -  
   77 D1:AD4A -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AD4A -  -  -  -  		#ifdef EZ80
   79 D1:AD4A 22 DF A8 D1 		ld 		(AConvert),hl
   80 D1:AD4E 21 00 00 00 		ld 		hl,$0000
   81 D1:AD52 22 E2 A8 D1 		ld 		(AConvert+3),hl
   82 D1:AD56 D9 -  -  -  		exx
   83 D1:AD57 2A E1 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AD5B D9 -  -  -  		exx
   85 D1:AD5C AF -  -  -  		xor 	a
   86 D1:AD5D 32 E1 A8 D1 		ld 		(AConvert+2),a
   87 D1:AD61 2A DF A8 D1 		ld 		hl,(AConvert)
   88 D1:AD65 -  -  -  -  		#endif
   89 D1:AD65 C9 -  -  -  		ret
   90 D1:AD66 -  -  -  -  
   91 D1:AD66 -  -  -  -  ; ***************************************************************************************
   92 D1:AD66 -  -  -  -  ;
   93 D1:AD66 -  -  -  -  ;									Changes and Updates
   94 D1:AD66 -  -  -  -  ;
   95 D1:AD66 -  -  -  -  ; ***************************************************************************************
   96 D1:AD66 -  -  -  -  ;
   97 D1:AD66 -  -  -  -  ;		Date			Notes
   98 D1:AD66 -  -  -  -  ;		==== 			=====
   99 D1:AD66 -  -  -  -  ;
  100 D1:AD66 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD66 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AD66 -  -  -  -  ; ***************************************************************************************
    2 D1:AD66 -  -  -  -  ; ***************************************************************************************
    3 D1:AD66 -  -  -  -  ;
    4 D1:AD66 -  -  -  -  ;		Name : 		term.asm
    5 D1:AD66 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD66 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD66 -  -  -  -  ;		Reviewed :	No
    8 D1:AD66 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AD66 -  -  -  -  ;
   10 D1:AD66 -  -  -  -  ; ***************************************************************************************
   11 D1:AD66 -  -  -  -  ; ***************************************************************************************
   12 D1:AD66 -  -  -  -  
   13 D1:AD66 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AD66             		add_hlhl_16
   15 D1:AD66             		exx
   16 D1:AD66             		adc_hlhl_16
   17 D1:AD66             		exx
   18 D1:AD66             #endmacro
   19 D1:AD66 -  -  -  -  
   20 D1:AD66 -  -  -  -  ; ***************************************************************************************
   21 D1:AD66 -  -  -  -  ;
   22 D1:AD66 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AD66 -  -  -  -  ;
   24 D1:AD66 -  -  -  -  ; ***************************************************************************************
   25 D1:AD66 -  -  -  -  ;
   26 D1:AD66 -  -  -  -  ; 		Terms can be:
   27 D1:AD66 -  -  -  -  ;
   28 D1:AD66 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AD66 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AD66 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AD66 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AD66 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AD66 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AD66 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AD66 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AD66 -  -  -  -  ; 														reference of some sort.
   37 D1:AD66 -  -  -  -  ;
   38 D1:AD66 -  -  -  -  ; ***************************************************************************************
   39 D1:AD66 -  -  -  -  
   40 D1:AD66 -  -  -  -  EvaluateTerm:		
   41 D1:AD66 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AD68 D9 -  -  -  		exx
   43 D1:AD69 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AD6D D9 -  -  -  		exx
   45 D1:AD6E 21 00 00 00 		ld 		hl,$0000		
   46 D1:AD72 -  -  -  -  		;
   47 D1:AD72 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AD75 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AD77 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AD79 DA 31 AE D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AD7D CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AD7F C2 D5 AD D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AD83 -  -  -  -  		;
   54 D1:AD83 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AD83 -  -  -  -  		;
   56 D1:AD83 -  -  -  -  _ETIntegerConstant:
   57 D1:AD83 -  -  -  -  		;
   58 D1:AD83 -  -  -  -  _ETIntegerLoop:		
   59 D1:AD83 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AD86 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AD88 B5 -  -  -  		or 		l 							; or into L
   62 D1:AD89 6F -  -  -  		ld 		l,a
   63 D1:AD8A DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AD8C DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AD8F C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AD91 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AD93 D8 -  -  -  		ret 	c
   68 D1:AD94 -  -  -  -  
   69 D1:AD94 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AD9B 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:ADA2 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:ADA9 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:ADB0 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:ADB7 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:ADBE -  -  -  -  
   76 D1:ADBE 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:ADC0 -  -  -  -  		;
   78 D1:ADC0 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:ADC0 -  -  -  -  		;
   80 D1:ADC0 -  -  -  -  _ETStringMarker:		
   81 D1:ADC0 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:ADC2 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:ADC4 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:ADC6 E1 -  -  -  		pop 	hl
   85 D1:ADC7 11 00 00 00 		ld 		de,$0000
   86 D1:ADCB DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:ADCE DD 19 -  -  		add 	ix,de
   88 D1:ADD0 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:ADD2 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:ADD4 C9 -  -  -  		ret
   91 D1:ADD5 -  -  -  -  		;
   92 D1:ADD5 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:ADD5 -  -  -  -  		;
   94 D1:ADD5 -  -  -  -  _ETFoundKeyword:
   95 D1:ADD5 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:ADD7 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:ADD9 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:ADDB FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:ADDD 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:ADDF -  -  -  -  		;
  101 D1:ADDF -  -  -  -  		;		Unary group 0
  102 D1:ADDF -  -  -  -  		;
  103 D1:ADDF E6 7F 21 00 
              00 00 6F 29 
              29 11 7E B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:ADF4 C3 D9 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:ADF8 -  -  -  -  
  106 D1:ADF8 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:ADF8 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:ADFA 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:ADFC -  -  -  -  		;
  110 D1:ADFC -  -  -  -  		; 		- term
  111 D1:ADFC -  -  -  -  		;
  112 D1:ADFC CD B1 AC D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AE00 CD 47 AC D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AE04 C9 -  -  -  		ret
  115 D1:AE05 -  -  -  -  		;
  116 D1:AE05 -  -  -  -  		;		! ? indirection check
  117 D1:AE05 -  -  -  -  		;
  118 D1:AE05 -  -  -  -  _ETCheckIndirection:	
  119 D1:AE05 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AE07 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AE09 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AE0B C2 0E AB D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AE0F -  -  -  -  		;
  124 D1:AE0F -  -  -  -  		; 		! ? indirection
  125 D1:AE0F -  -  -  -  		;
  126 D1:AE0F -  -  -  -  _ETIndirection:
  127 D1:AE0F F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AE10 CD 66 AD D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AE14 CD 0A AD D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AE18 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AE1A 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AE1C CD 37 AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AE20 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AE21 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AE23 CB F9 -  -  		set 	CIsReference,c
  136 D1:AE25 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AE27 C8 -  -  -  		ret 	z
  138 D1:AE28 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AE2A C9 -  -  -  		ret
  140 D1:AE2B -  -  -  -  _ETStringIndirect:
  141 D1:AE2B 3E 02 C3 A4 
              AA D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AE31 -  -  -  -  		;
  143 D1:AE31 -  -  -  -  		; 		Found an identifier.
  144 D1:AE31 -  -  -  -  		;
  145 D1:AE31 -  -  -  -  _ETVariable:
  146 D1:AE31 3E 0E C3 A4 
              AA D1 -  -  		ERR_TODO
  147 D1:AE37 3E 0F C3 A4 
              AA D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 D1:AE3D -  -  -  -  		
  149 D1:AE3D -  -  -  -  ; ***************************************************************************************
  150 D1:AE3D -  -  -  -  ;
  151 D1:AE3D -  -  -  -  ;									Changes and Updates
  152 D1:AE3D -  -  -  -  ;
  153 D1:AE3D -  -  -  -  ; ***************************************************************************************
  154 D1:AE3D -  -  -  -  ;
  155 D1:AE3D -  -  -  -  ;		Date			Notes
  156 D1:AE3D -  -  -  -  ;		==== 			=====
  157 D1:AE3D -  -  -  -  ;
  158 D1:AE3D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AE3D -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AE3D -  -  -  -  ; ***************************************************************************************
    2 D1:AE3D -  -  -  -  ; ***************************************************************************************
    3 D1:AE3D -  -  -  -  ;
    4 D1:AE3D -  -  -  -  ;		Name : 		abs.asm
    5 D1:AE3D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE3D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE3D -  -  -  -  ;		Reviewed :	No
    8 D1:AE3D -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AE3D -  -  -  -  ;
   10 D1:AE3D -  -  -  -  ; ***************************************************************************************
   11 D1:AE3D -  -  -  -  ; ***************************************************************************************
   12 D1:AE3D -  -  -  -  
   13 D1:AE3D -  -  -  -  ; ***************************************************************************************
   14 D1:AE3D -  -  -  -  ;
   15 D1:AE3D -  -  -  -  ;								abs( unary function
   16 D1:AE3D -  -  -  -  ;
   17 D1:AE3D -  -  -  -  ; ***************************************************************************************
   18 D1:AE3D -  -  -  -  
   19 D1:AE3D -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AE3D CD B1 AC D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AE41 D9 -  -  -  		exx 								; test MSB
   22 D1:AE42 CB 7C -  -  		bit 	7,h
   23 D1:AE44 D9 -  -  -  		exx
   24 D1:AE45 C4 47 AC D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AE49 C9 -  -  -  		ret
   26 D1:AE4A -  -  -  -  
   27 D1:AE4A -  -  -  -  ; ***************************************************************************************
   28 D1:AE4A -  -  -  -  ;
   29 D1:AE4A -  -  -  -  ;									Changes and Updates
   30 D1:AE4A -  -  -  -  ;
   31 D1:AE4A -  -  -  -  ; ***************************************************************************************
   32 D1:AE4A -  -  -  -  ;
   33 D1:AE4A -  -  -  -  ;		Date			Notes
   34 D1:AE4A -  -  -  -  ;		==== 			=====
   35 D1:AE4A -  -  -  -  ;
   36 D1:AE4A -  -  -  -  ; ***************************************************************************************
   37 D1:AE4A -  -  -  -  		
Listing for file "_build.asm"
   33 D1:AE4A -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AE4A -  -  -  -  ; ***************************************************************************************
    2 D1:AE4A -  -  -  -  ; ***************************************************************************************
    3 D1:AE4A -  -  -  -  ;
    4 D1:AE4A -  -  -  -  ;		Name : 		asc.asm
    5 D1:AE4A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE4A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE4A -  -  -  -  ;		Reviewed :	No
    8 D1:AE4A -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AE4A -  -  -  -  ;
   10 D1:AE4A -  -  -  -  ; ***************************************************************************************
   11 D1:AE4A -  -  -  -  ; ***************************************************************************************
   12 D1:AE4A -  -  -  -  
   13 D1:AE4A -  -  -  -  ; ***************************************************************************************
   14 D1:AE4A -  -  -  -  ;
   15 D1:AE4A -  -  -  -  ;								Asc unary function
   16 D1:AE4A -  -  -  -  ;
   17 D1:AE4A -  -  -  -  ; ***************************************************************************************
   18 D1:AE4A -  -  -  -  
   19 D1:AE4A -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AE4A CD C0 AC D1 		call	EvaluateStringTerm			; Get string
   21 D1:AE4E 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AE4F C3 FC AC D1 		jp 		Return8BitConstant
   23 D1:AE53 -  -  -  -  
   24 D1:AE53 -  -  -  -  ; ***************************************************************************************
   25 D1:AE53 -  -  -  -  ;
   26 D1:AE53 -  -  -  -  ;									Changes and Updates
   27 D1:AE53 -  -  -  -  ;
   28 D1:AE53 -  -  -  -  ; ***************************************************************************************
   29 D1:AE53 -  -  -  -  ;
   30 D1:AE53 -  -  -  -  ;		Date			Notes
   31 D1:AE53 -  -  -  -  ;		==== 			=====
   32 D1:AE53 -  -  -  -  ;
   33 D1:AE53 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AE53 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AE53 -  -  -  -  ; ***************************************************************************************
    2 D1:AE53 -  -  -  -  ; ***************************************************************************************
    3 D1:AE53 -  -  -  -  ;
    4 D1:AE53 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AE53 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE53 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE53 -  -  -  -  ;		Reviewed :	No
    8 D1:AE53 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AE53 -  -  -  -  ;
   10 D1:AE53 -  -  -  -  ; ***************************************************************************************
   11 D1:AE53 -  -  -  -  ; ***************************************************************************************
   12 D1:AE53 -  -  -  -  
   13 D1:AE53 -  -  -  -  ; ***************************************************************************************
   14 D1:AE53 -  -  -  -  ;
   15 D1:AE53 -  -  -  -  ;								Chr$() unary function
   16 D1:AE53 -  -  -  -  ;
   17 D1:AE53 -  -  -  -  ; ***************************************************************************************
   18 D1:AE53 -  -  -  -  
   19 D1:AE53 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AE53 CD 7C AA D1 		call 	CheckDollar
   21 D1:AE57 CD B1 AC D1 		call 	EvaluateIntegerTerm
   22 D1:AE5B 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AE5C 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AE5E 21 06 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AE62 36 0D -  -  		ld 		(hl),13
   26 D1:AE64 2B -  -  -  		dec 	hl
   27 D1:AE65 77 -  -  -  		ld 		(hl),a
   28 D1:AE66 C9 -  -  -  		ret
   29 D1:AE67 -  -  -  -  
   30 D1:AE67 -  -  -  -  ; ***************************************************************************************
   31 D1:AE67 -  -  -  -  ;
   32 D1:AE67 -  -  -  -  ;									Changes and Updates
   33 D1:AE67 -  -  -  -  ;
   34 D1:AE67 -  -  -  -  ; ***************************************************************************************
   35 D1:AE67 -  -  -  -  ;
   36 D1:AE67 -  -  -  -  ;		Date			Notes
   37 D1:AE67 -  -  -  -  ;		==== 			=====
   38 D1:AE67 -  -  -  -  ;
   39 D1:AE67 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AE67 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AE67 -  -  -  -  ; ***************************************************************************************
    2 D1:AE67 -  -  -  -  ; ***************************************************************************************
    3 D1:AE67 -  -  -  -  ;
    4 D1:AE67 -  -  -  -  ;		Name : 		len.asm
    5 D1:AE67 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE67 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE67 -  -  -  -  ;		Reviewed :	None
    8 D1:AE67 -  -  -  -  ;		Purpose :	String Length
    9 D1:AE67 -  -  -  -  ;
   10 D1:AE67 -  -  -  -  ; ***************************************************************************************
   11 D1:AE67 -  -  -  -  ; ***************************************************************************************
   12 D1:AE67 -  -  -  -  
   13 D1:AE67 -  -  -  -  ; ***************************************************************************************
   14 D1:AE67 -  -  -  -  ;
   15 D1:AE67 -  -  -  -  ;								Len unary function
   16 D1:AE67 -  -  -  -  ;
   17 D1:AE67 -  -  -  -  ; ***************************************************************************************
   18 D1:AE67 -  -  -  -  
   19 D1:AE67 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AE67 CD C0 AC D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AE6B EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AE6C CD AF AB D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AE70 -  -  -  -  _ULCount:
   24 D1:AE70 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AE71 FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AE73 D8 -  -  -  		ret 	c
   27 D1:AE74 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AE75 13 -  -  -  		inc 	de
   29 D1:AE76 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AE78 -  -  -  -  
   31 D1:AE78 -  -  -  -  ; ***************************************************************************************
   32 D1:AE78 -  -  -  -  ;
   33 D1:AE78 -  -  -  -  ;									Changes and Updates
   34 D1:AE78 -  -  -  -  ;
   35 D1:AE78 -  -  -  -  ; ***************************************************************************************
   36 D1:AE78 -  -  -  -  ;
   37 D1:AE78 -  -  -  -  ;		Date			Notes
   38 D1:AE78 -  -  -  -  ;		==== 			=====
   39 D1:AE78 -  -  -  -  ;
   40 D1:AE78 -  -  -  -  ; ***************************************************************************************
   41 D1:AE78 -  -  -  -  		
Listing for file "_build.asm"
   36 D1:AE78 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AE78 -  -  -  -  ; ***************************************************************************************
    2 D1:AE78 -  -  -  -  ; ***************************************************************************************
    3 D1:AE78 -  -  -  -  ;
    4 D1:AE78 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AE78 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE78 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE78 -  -  -  -  ;		Reviewed :	No
    8 D1:AE78 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AE78 -  -  -  -  ;
   10 D1:AE78 -  -  -  -  ; ***************************************************************************************
   11 D1:AE78 -  -  -  -  ; ***************************************************************************************
   12 D1:AE78 -  -  -  -  
   13 D1:AE78 -  -  -  -  ; ***************************************************************************************
   14 D1:AE78 -  -  -  -  ;
   15 D1:AE78 -  -  -  -  ;								Str$() unary function
   16 D1:AE78 -  -  -  -  ;
   17 D1:AE78 -  -  -  -  ; ***************************************************************************************
   18 D1:AE78 -  -  -  -  
   19 D1:AE78 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AE78 CD B1 AC D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AE7C CD 37 AD D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AE80 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AE82 C9 -  -  -  		ret
   24 D1:AE83 -  -  -  -  
   25 D1:AE83 -  -  -  -  ; ***************************************************************************************
   26 D1:AE83 -  -  -  -  ;
   27 D1:AE83 -  -  -  -  ;									Changes and Updates
   28 D1:AE83 -  -  -  -  ;
   29 D1:AE83 -  -  -  -  ; ***************************************************************************************
   30 D1:AE83 -  -  -  -  ;
   31 D1:AE83 -  -  -  -  ;		Date			Notes
   32 D1:AE83 -  -  -  -  ;		==== 			=====
   33 D1:AE83 -  -  -  -  ;
   34 D1:AE83 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AE83 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AE83 -  -  -  -  ; ***************************************************************************************
    2 D1:AE83 -  -  -  -  ; ***************************************************************************************
    3 D1:AE83 -  -  -  -  ;
    4 D1:AE83 -  -  -  -  ;		Name : 		not.asm
    5 D1:AE83 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE83 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AE83 -  -  -  -  ;		Reviewed :	No
    8 D1:AE83 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AE83 -  -  -  -  ;
   10 D1:AE83 -  -  -  -  ; ***************************************************************************************
   11 D1:AE83 -  -  -  -  ; ***************************************************************************************
   12 D1:AE83 -  -  -  -  
   13 D1:AE83 -  -  -  -  ; ***************************************************************************************
   14 D1:AE83 -  -  -  -  ;
   15 D1:AE83 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AE83 -  -  -  -  ;
   17 D1:AE83 -  -  -  -  ; ***************************************************************************************
   18 D1:AE83 -  -  -  -  
   19 D1:AE83 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AE83 CD B1 AC D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AE87 CD 90 AE D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AE8B CD 90 AE D1 		call 	__UNSwap		
   23 D1:AE8F C9 -  -  -  		ret
   24 D1:AE90 -  -  -  -  
   25 D1:AE90 -  -  -  -  __UNSwap:
   26 D1:AE90 7C -  -  -  		ld 		a,h
   27 D1:AE91 2F -  -  -  		cpl
   28 D1:AE92 67 -  -  -  		ld 		h,a
   29 D1:AE93 7D -  -  -  		ld 		a,l
   30 D1:AE94 2F -  -  -  		cpl 	
   31 D1:AE95 6F -  -  -  		ld 		l,a
   32 D1:AE96 D9 -  -  -  		exx
   33 D1:AE97 C9 -  -  -  		ret
   34 D1:AE98 -  -  -  -  
   35 D1:AE98 -  -  -  -  ; ***************************************************************************************
   36 D1:AE98 -  -  -  -  ;
   37 D1:AE98 -  -  -  -  ;									Changes and Updates
   38 D1:AE98 -  -  -  -  ;
   39 D1:AE98 -  -  -  -  ; ***************************************************************************************
   40 D1:AE98 -  -  -  -  ;
   41 D1:AE98 -  -  -  -  ;		Date			Notes
   42 D1:AE98 -  -  -  -  ;		==== 			=====
   43 D1:AE98 -  -  -  -  ;
   44 D1:AE98 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:AE98 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AE98 -  -  -  -  ; ***************************************************************************************
    2 D1:AE98 -  -  -  -  ; ***************************************************************************************
    3 D1:AE98 -  -  -  -  ;
    4 D1:AE98 -  -  -  -  ;		Name : 		page.asm
    5 D1:AE98 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE98 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE98 -  -  -  -  ;		Reviewed :	No
    8 D1:AE98 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AE98 -  -  -  -  ;
   10 D1:AE98 -  -  -  -  ; ***************************************************************************************
   11 D1:AE98 -  -  -  -  ; ***************************************************************************************
   12 D1:AE98 -  -  -  -  
   13 D1:AE98 -  -  -  -  ; ***************************************************************************************
   14 D1:AE98 -  -  -  -  ;
   15 D1:AE98 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AE98 -  -  -  -  ;
   17 D1:AE98 -  -  -  -  ; ***************************************************************************************
   18 D1:AE98 -  -  -  -  
   19 D1:AE98 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AE98 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AE9C D9 -  -  -  			exx
   22 D1:AE9D 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AEA1 D9 -  -  -  			exx
   24 D1:AEA2 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AEA4 C9 -  -  -  			ret
   26 D1:AEA5 -  -  -  -  
   27 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   28 D1:AEA5 -  -  -  -  ;
   29 D1:AEA5 -  -  -  -  ;									Changes and Updates
   30 D1:AEA5 -  -  -  -  ;
   31 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   32 D1:AEA5 -  -  -  -  ;
   33 D1:AEA5 -  -  -  -  ;		Date			Notes
   34 D1:AEA5 -  -  -  -  ;		==== 			=====
   35 D1:AEA5 -  -  -  -  ;
   36 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   37 D1:AEA5 -  -  -  -  			
Listing for file "_build.asm"
   39 D1:AEA5 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AEA5 -  -  -  -  ; ***************************************************************************************
    2 D1:AEA5 -  -  -  -  ; ***************************************************************************************
    3 D1:AEA5 -  -  -  -  ;
    4 D1:AEA5 -  -  -  -  ;		Name : 		random.asm
    5 D1:AEA5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEA5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEA5 -  -  -  -  ;		Reviewed :	No
    8 D1:AEA5 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AEA5 -  -  -  -  ;
   10 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   11 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   12 D1:AEA5 -  -  -  -  
   13 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   14 D1:AEA5 -  -  -  -  ;
   15 D1:AEA5 -  -  -  -  ;								Random unary function
   16 D1:AEA5 -  -  -  -  ;
   17 D1:AEA5 -  -  -  -  ; ***************************************************************************************
   18 D1:AEA5 -  -  -  -  
   19 D1:AEA5 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AEA5 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AEAD CD B1 AC D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AEB1 D9 -  -  -  		exx 								; is it -ve
   23 D1:AEB2 CB 7C -  -  		bit 	7,h
   24 D1:AEB4 D9 -  -  -  		exx
   25 D1:AEB5 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AEB7 22 E5 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AEBB D9 -  -  -  		exx
   28 D1:AEBC 22 E9 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AEC0 D9 -  -  -  		exx
   30 D1:AEC1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AEC3 C9 -  -  -  		ret
   32 D1:AEC4 -  -  -  -  _URDontSeed:		
   33 D1:AEC4 -  -  -  -  
   34 D1:AEC4 CD 0D B5 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AEC8 28 1C -  -  		jr 		z,_URFail
   36 D1:AECA E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AECB D9 -  -  -  		exx
   38 D1:AECC E5 -  -  -  		push 	hl
   39 D1:AECD D9 -  -  -  		exx
   40 D1:AECE -  -  -  -  		;
   41 D1:AECE CD F7 AE D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AED2 D9 -  -  -  		exx
   43 D1:AED3 CD F7 AE D1 		call 	URandomHL
   44 D1:AED7 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AED9 D9 -  -  -  		exx
   46 D1:AEDA -  -  -  -  		;
   47 D1:AEDA D9 -  -  -  		exx 								; restore range.
   48 D1:AEDB D1 -  -  -  		pop 	de
   49 D1:AEDC D9 -  -  -  		exx
   50 D1:AEDD D1 -  -  -  		pop 	de
   51 D1:AEDE -  -  -  -  		;
   52 D1:AEDE CD 9E B3 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AEE2 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AEE3 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AEE5 C9 -  -  -  		ret
   56 D1:AEE6 -  -  -  -  _URFail:
   57 D1:AEE6 3E 03 C3 A4 
              AA D1 -  -  		ERR_BADVALUE
   58 D1:AEEC -  -  -  -  ; ***************************************************************************************
   59 D1:AEEC -  -  -  -  ;
   60 D1:AEEC -  -  -  -  ; 									Push RNG off zero
   61 D1:AEEC -  -  -  -  ;
   62 D1:AEEC -  -  -  -  ; ***************************************************************************************
   63 D1:AEEC -  -  -  -  
   64 D1:AEEC -  -  -  -  UnaryRandomInitialise:
   65 D1:AEEC 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AEEE -  -  -  -  _URILoop:
   67 D1:AEEE C5 -  -  -  		push 	bc
   68 D1:AEEF CD F7 AE D1 		call 	URandomHL
   69 D1:AEF3 C1 -  -  -  		pop 	bc
   70 D1:AEF4 10 F8 -  -  		djnz 	_URILoop
   71 D1:AEF6 C9 -  -  -  		ret
   72 D1:AEF7 -  -  -  -  
   73 D1:AEF7 -  -  -  -  ; ***************************************************************************************
   74 D1:AEF7 -  -  -  -  ;
   75 D1:AEF7 -  -  -  -  ;							16 bit random number generator
   76 D1:AEF7 -  -  -  -  ;
   77 D1:AEF7 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AEF7 -  -  -  -  ;		Actual author unspecified.
   79 D1:AEF7 -  -  -  -  ;
   80 D1:AEF7 -  -  -  -  ; ***************************************************************************************
   81 D1:AEF7 -  -  -  -  
   82 D1:AEF7 -  -  -  -  URandomHL:
   83 D1:AEF7 2A E5 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AEFB ED 5B E9 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AF00 44 -  -  -  	    ld 		b,h
   86 D1:AF01 4D -  -  -  	    ld 		c,l
   87 D1:AF02 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AF07 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AF0C 2C -  -  -  	    inc 	l
   90 D1:AF0D 09 -  -  -  	    add 	hl,bc
   91 D1:AF0E 22 E5 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:AF12 2A E9 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:AF16 ED 5A -  -  	    adc 	hl,de
   94 D1:AF18 22 E9 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:AF1C EB -  -  -  	    ex 		de,hl
   96 D1:AF1D 2A ED A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:AF21 ED 4B F1 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:AF26 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:AF2B ED 43 F1 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:AF30 9F -  -  -  	    sbc 	a,a
  101 D1:AF31 E6 C5 -  -  	    and 	%11000101
  102 D1:AF33 AD -  -  -  	    xor 	l
  103 D1:AF34 6F -  -  -  	    ld 		l,a
  104 D1:AF35 22 ED A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:AF39 EB -  -  -  	    ex 		de,hl
  106 D1:AF3A 09 -  -  -  	    add 	hl,bc
  107 D1:AF3B C9 -  -  -  	    ret		
  108 D1:AF3C -  -  -  -  
  109 D1:AF3C -  -  -  -  ; ***************************************************************************************
  110 D1:AF3C -  -  -  -  ;
  111 D1:AF3C -  -  -  -  ;									Changes and Updates
  112 D1:AF3C -  -  -  -  ;
  113 D1:AF3C -  -  -  -  ; ***************************************************************************************
  114 D1:AF3C -  -  -  -  ;
  115 D1:AF3C -  -  -  -  ;		Date			Notes
  116 D1:AF3C -  -  -  -  ;		==== 			=====
  117 D1:AF3C -  -  -  -  ;
  118 D1:AF3C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AF3C -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:AF3C -  -  -  -  ; ***************************************************************************************
    2 D1:AF3C -  -  -  -  ; ***************************************************************************************
    3 D1:AF3C -  -  -  -  ;
    4 D1:AF3C -  -  -  -  ;		Name : 		sgn.asm
    5 D1:AF3C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF3C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF3C -  -  -  -  ;		Reviewed :	No
    8 D1:AF3C -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:AF3C -  -  -  -  ;
   10 D1:AF3C -  -  -  -  ; ***************************************************************************************
   11 D1:AF3C -  -  -  -  ; ***************************************************************************************
   12 D1:AF3C -  -  -  -  
   13 D1:AF3C -  -  -  -  ; ***************************************************************************************
   14 D1:AF3C -  -  -  -  ;
   15 D1:AF3C -  -  -  -  ;								sgn unary function
   16 D1:AF3C -  -  -  -  ;
   17 D1:AF3C -  -  -  -  ; ***************************************************************************************
   18 D1:AF3C -  -  -  -  
   19 D1:AF3C -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:AF3C CD B1 AC D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:AF40 CD 0D B5 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:AF44 CA AF AB D1 		jp 		z,UnaryInt32False
   23 D1:AF48 D9 -  -  -  		exx
   24 D1:AF49 CB 7C -  -  		bit 	7,h
   25 D1:AF4B D9 -  -  -  		exx
   26 D1:AF4C C2 AB AB D1 		jp 		nz,UnaryInt32True
   27 D1:AF50 3E 01 -  -  		ld 		a,1
   28 D1:AF52 C3 FC AC D1 		jp 		Return8BitConstant
   29 D1:AF56 -  -  -  -  
   30 D1:AF56 -  -  -  -  ; ***************************************************************************************
   31 D1:AF56 -  -  -  -  ;
   32 D1:AF56 -  -  -  -  ;									Changes and Updates
   33 D1:AF56 -  -  -  -  ;
   34 D1:AF56 -  -  -  -  ; ***************************************************************************************
   35 D1:AF56 -  -  -  -  ;
   36 D1:AF56 -  -  -  -  ;		Date			Notes
   37 D1:AF56 -  -  -  -  ;		==== 			=====
   38 D1:AF56 -  -  -  -  ;
   39 D1:AF56 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:AF56 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:AF56 -  -  -  -  ; ***************************************************************************************
    2 D1:AF56 -  -  -  -  ; ***************************************************************************************
    3 D1:AF56 -  -  -  -  ;
    4 D1:AF56 -  -  -  -  ;		Name : 		simple.asm
    5 D1:AF56 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF56 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF56 -  -  -  -  ;		Reviewed :	No
    8 D1:AF56 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:AF56 -  -  -  -  ;
   10 D1:AF56 -  -  -  -  ; ***************************************************************************************
   11 D1:AF56 -  -  -  -  ; ***************************************************************************************
   12 D1:AF56 -  -  -  -  
   13 D1:AF56 -  -  -  -  ; ***************************************************************************************
   14 D1:AF56 -  -  -  -  ;
   15 D1:AF56 -  -  -  -  ;								( unary function (think about it)
   16 D1:AF56 -  -  -  -  ;
   17 D1:AF56 -  -  -  -  ; ***************************************************************************************
   18 D1:AF56 -  -  -  -  
   19 D1:AF56 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:AF56 CD 58 AC D1 		call 	EvaluateAtPrecedence0
   21 D1:AF5A C3 6E AA D1 		jp  	CheckRightBracket
   22 D1:AF5E -  -  -  -  
   23 D1:AF5E -  -  -  -  ; ***************************************************************************************
   24 D1:AF5E -  -  -  -  ;
   25 D1:AF5E -  -  -  -  ;									Handle &x
   26 D1:AF5E -  -  -  -  ;
   27 D1:AF5E -  -  -  -  ; ***************************************************************************************
   28 D1:AF5E -  -  -  -  
   29 D1:AF5E -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:AF5E DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:AF61 E6 C0 -  -  		and 		$C0
   32 D1:AF63 FE 40 -  -  		cp 			$40
   33 D1:AF65 C2 0E AB D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:AF69 C3 66 AD D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:AF6D -  -  -  -  
   36 D1:AF6D -  -  -  -  ; ***************************************************************************************
   37 D1:AF6D -  -  -  -  ;
   38 D1:AF6D -  -  -  -  ;									Changes and Updates
   39 D1:AF6D -  -  -  -  ;
   40 D1:AF6D -  -  -  -  ; ***************************************************************************************
   41 D1:AF6D -  -  -  -  ;
   42 D1:AF6D -  -  -  -  ;		Date			Notes
   43 D1:AF6D -  -  -  -  ;		==== 			=====
   44 D1:AF6D -  -  -  -  ;
   45 D1:AF6D -  -  -  -  ; ***************************************************************************************
   46 D1:AF6D -  -  -  -  		
Listing for file "_build.asm"
   42 D1:AF6D -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:AF6D -  -  -  -  ; ***************************************************************************************
    2 D1:AF6D -  -  -  -  ; ***************************************************************************************
    3 D1:AF6D -  -  -  -  ;
    4 D1:AF6D -  -  -  -  ;		Name : 		str.asm
    5 D1:AF6D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF6D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF6D -  -  -  -  ;		Reviewed :	No
    8 D1:AF6D -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:AF6D -  -  -  -  ;
   10 D1:AF6D -  -  -  -  ; ***************************************************************************************
   11 D1:AF6D -  -  -  -  ; ***************************************************************************************
   12 D1:AF6D -  -  -  -  
   13 D1:AF6D -  -  -  -  ; ***************************************************************************************
   14 D1:AF6D -  -  -  -  ;
   15 D1:AF6D -  -  -  -  ;								Str$() unary function
   16 D1:AF6D -  -  -  -  ;
   17 D1:AF6D -  -  -  -  ; ***************************************************************************************
   18 D1:AF6D -  -  -  -  
   19 D1:AF6D -  -  -  -  Unary_Str:	;; [str]
   20 D1:AF6D CD 7C AA D1 		call 	CheckDollar
   21 D1:AF71 CD B1 AC D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:AF75 01 F5 A8 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:AF79 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:AF7B CD 55 B5 D1 		call 	Int32ToString 				
   25 D1:AF7F 21 F5 A8 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:AF83 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:AF85 C9 -  -  -  		ret
   28 D1:AF86 -  -  -  -  
   29 D1:AF86 -  -  -  -  ; ***************************************************************************************
   30 D1:AF86 -  -  -  -  ;
   31 D1:AF86 -  -  -  -  ;									Changes and Updates
   32 D1:AF86 -  -  -  -  ;
   33 D1:AF86 -  -  -  -  ; ***************************************************************************************
   34 D1:AF86 -  -  -  -  ;
   35 D1:AF86 -  -  -  -  ;		Date			Notes
   36 D1:AF86 -  -  -  -  ;		==== 			=====
   37 D1:AF86 -  -  -  -  ;
   38 D1:AF86 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:AF86 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:AF86 -  -  -  -  ; ***************************************************************************************
    2 D1:AF86 -  -  -  -  ; ***************************************************************************************
    3 D1:AF86 -  -  -  -  ;
    4 D1:AF86 -  -  -  -  ;		Name : 		time.asm
    5 D1:AF86 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF86 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF86 -  -  -  -  ;		Reviewed :	No
    8 D1:AF86 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:AF86 -  -  -  -  ;
   10 D1:AF86 -  -  -  -  ; ***************************************************************************************
   11 D1:AF86 -  -  -  -  ; ***************************************************************************************
   12 D1:AF86 -  -  -  -  
   13 D1:AF86 -  -  -  -  ; ***************************************************************************************
   14 D1:AF86 -  -  -  -  ;
   15 D1:AF86 -  -  -  -  ;							Get system time in ms
   16 D1:AF86 -  -  -  -  ;
   17 D1:AF86 -  -  -  -  ; ***************************************************************************************
   18 D1:AF86 -  -  -  -  
   19 D1:AF86 -  -  -  -  Unary_Time:	;; [time]
   20 D1:AF86 CD 18 B6 D1 			call 	SYSGetTimer
   21 D1:AF8A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:AF8C C9 -  -  -  			ret
   23 D1:AF8D -  -  -  -  
   24 D1:AF8D -  -  -  -  ; ***************************************************************************************
   25 D1:AF8D -  -  -  -  ;
   26 D1:AF8D -  -  -  -  ;									Changes and Updates
   27 D1:AF8D -  -  -  -  ;
   28 D1:AF8D -  -  -  -  ; ***************************************************************************************
   29 D1:AF8D -  -  -  -  ;
   30 D1:AF8D -  -  -  -  ;		Date			Notes
   31 D1:AF8D -  -  -  -  ;		==== 			=====
   32 D1:AF8D -  -  -  -  ;
   33 D1:AF8D -  -  -  -  ; ***************************************************************************************
   34 D1:AF8D -  -  -  -  			
Listing for file "_build.asm"
   44 D1:AF8D -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:AF8D -  -  -  -  ; ***************************************************************************************
    2 D1:AF8D -  -  -  -  ; ***************************************************************************************
    3 D1:AF8D -  -  -  -  ;
    4 D1:AF8D -  -  -  -  ;		Name : 		top.asm
    5 D1:AF8D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF8D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF8D -  -  -  -  ;		Reviewed :	No
    8 D1:AF8D -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AF8D -  -  -  -  ;
   10 D1:AF8D -  -  -  -  ; ***************************************************************************************
   11 D1:AF8D -  -  -  -  ; ***************************************************************************************
   12 D1:AF8D -  -  -  -  
   13 D1:AF8D -  -  -  -  ; ***************************************************************************************
   14 D1:AF8D -  -  -  -  ;
   15 D1:AF8D -  -  -  -  ;							page unary function (no bracket)
   16 D1:AF8D -  -  -  -  ;
   17 D1:AF8D -  -  -  -  ; ***************************************************************************************
   18 D1:AF8D -  -  -  -  
   19 D1:AF8D -  -  -  -  Unary_Top:	;; [top]
   20 D1:AF8D 2A CD A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:AF91 D9 -  -  -  			exx
   22 D1:AF92 2A CF A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:AF96 D9 -  -  -  			exx
   24 D1:AF97 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF99 C9 -  -  -  			ret
   26 D1:AF9A -  -  -  -  
   27 D1:AF9A -  -  -  -  ; ***************************************************************************************
   28 D1:AF9A -  -  -  -  ;
   29 D1:AF9A -  -  -  -  ;									Changes and Updates
   30 D1:AF9A -  -  -  -  ;
   31 D1:AF9A -  -  -  -  ; ***************************************************************************************
   32 D1:AF9A -  -  -  -  ;
   33 D1:AF9A -  -  -  -  ;		Date			Notes
   34 D1:AF9A -  -  -  -  ;		==== 			=====
   35 D1:AF9A -  -  -  -  ;
   36 D1:AF9A -  -  -  -  ; ***************************************************************************************
   37 D1:AF9A -  -  -  -  			
Listing for file "_build.asm"
   45 D1:AF9A -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:AF9A -  -  -  -  ; ***************************************************************************************
    2 D1:AF9A -  -  -  -  ; ***************************************************************************************
    3 D1:AF9A -  -  -  -  ;
    4 D1:AF9A -  -  -  -  ;		Name : 		val.asm
    5 D1:AF9A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF9A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF9A -  -  -  -  ;		Reviewed :	No
    8 D1:AF9A -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:AF9A -  -  -  -  ;
   10 D1:AF9A -  -  -  -  ; ***************************************************************************************
   11 D1:AF9A -  -  -  -  ; ***************************************************************************************
   12 D1:AF9A -  -  -  -  
   13 D1:AF9A -  -  -  -  ; ***************************************************************************************
   14 D1:AF9A -  -  -  -  ;
   15 D1:AF9A -  -  -  -  ;								val( unary function
   16 D1:AF9A -  -  -  -  ;
   17 D1:AF9A -  -  -  -  ; ***************************************************************************************
   18 D1:AF9A -  -  -  -  
   19 D1:AF9A -  -  -  -  Unary_Val:	;; [val]
   20 D1:AF9A CD C0 AC D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:AF9E E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:AF9F C1 -  -  -  		pop 	bc
   23 D1:AFA0 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:AFA2 CD 33 B4 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:AFA6 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:AFA8 C8 -  -  -  		ret		z 							; okay
   27 D1:AFA9 3E 03 C3 A4 
              AA D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:AFAF -  -  -  -  
   29 D1:AFAF -  -  -  -  ; ***************************************************************************************
   30 D1:AFAF -  -  -  -  ;
   31 D1:AFAF -  -  -  -  ;									Changes and Updates
   32 D1:AFAF -  -  -  -  ;
   33 D1:AFAF -  -  -  -  ; ***************************************************************************************
   34 D1:AFAF -  -  -  -  ;
   35 D1:AFAF -  -  -  -  ;		Date			Notes
   36 D1:AFAF -  -  -  -  ;		==== 			=====
   37 D1:AFAF -  -  -  -  ;
   38 D1:AFAF -  -  -  -  ; ***************************************************************************************
   39 D1:AFAF -  -  -  -  		
Listing for file "_build.asm"
   46 D1:AFAF -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:AFAF -  -  -  -  ; ***************************************************************************************
    2 D1:AFAF -  -  -  -  ; ***************************************************************************************
    3 D1:AFAF -  -  -  -  ;
    4 D1:AFAF -  -  -  -  ;		Name : 		clear.asm
    5 D1:AFAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFAF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFAF -  -  -  -  ;		Reviewed :	No
    8 D1:AFAF -  -  -  -  ;		Purpose :	Clear command.
    9 D1:AFAF -  -  -  -  ;
   10 D1:AFAF -  -  -  -  ; ***************************************************************************************
   11 D1:AFAF -  -  -  -  ; ***************************************************************************************
   12 D1:AFAF -  -  -  -  
   13 D1:AFAF -  -  -  -  ; ***************************************************************************************
   14 D1:AFAF -  -  -  -  ;
   15 D1:AFAF -  -  -  -  ;										CLEAR command
   16 D1:AFAF -  -  -  -  ;
   17 D1:AFAF -  -  -  -  ; ***************************************************************************************
   18 D1:AFAF -  -  -  -  
   19 D1:AFAF -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:AFAF -  -  -  -  		;
   21 D1:AFAF -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:AFAF -  -  -  -  		;
   23 D1:AFAF 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:AFB3 -  -  -  -  _CCFindLow:
   25 D1:AFB3 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:AFB7 5E -  -  -  		ld 		e,(hl)		
   27 D1:AFB8 19 -  -  -  		add 	hl,de
   28 D1:AFB9 7B -  -  -  		ld 		a,e
   29 D1:AFBA B7 -  -  -  		or 		a
   30 D1:AFBB 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:AFBD 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:AFBE 22 CD A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:AFC2 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:AFC3 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   35 D1:AFC7 -  -  -  -  		;
   36 D1:AFC7 -  -  -  -  		; 	 		Reset the language stack
   37 D1:AFC7 -  -  -  -  		;
   38 D1:AFC7 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:AFCB -  -  -  -  		;
   40 D1:AFCB 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:AFCD 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:AFD1 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:AFD5 19 -  -  -  		add 	hl,de
   44 D1:AFD6 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:AFD8 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:AFDC -  -  -  -  		;
   47 D1:AFDC 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:AFE0 19 -  -  -  		add 	hl,de
   49 D1:AFE1 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:AFE5 -  -  -  -  		;
   51 D1:AFE5 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 D1:AFE5 -  -  -  -  		;
   53 D1:AFE5 -  -  -  -  
   54 D1:AFE5 -  -  -  -  		;
   55 D1:AFE5 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 D1:AFE5 -  -  -  -  		;
   57 D1:AFE5 CD EC AE D1 		call 	UnaryRandomInitialise
   58 D1:AFE9 -  -  -  -  		;
   59 D1:AFE9 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 D1:AFE9 -  -  -  -  		;
   61 D1:AFE9 C9 -  -  -  		ret
   62 D1:AFEA -  -  -  -  
   63 D1:AFEA -  -  -  -  ; ***************************************************************************************
   64 D1:AFEA -  -  -  -  ;
   65 D1:AFEA -  -  -  -  ;									Changes and Updates
   66 D1:AFEA -  -  -  -  ;
   67 D1:AFEA -  -  -  -  ; ***************************************************************************************
   68 D1:AFEA -  -  -  -  ;
   69 D1:AFEA -  -  -  -  ;		Date			Notes
   70 D1:AFEA -  -  -  -  ;		==== 			=====
   71 D1:AFEA -  -  -  -  ;
   72 D1:AFEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:AFEA -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:AFEA -  -  -  -  ; ***************************************************************************************
    2 D1:AFEA -  -  -  -  ; ***************************************************************************************
    3 D1:AFEA -  -  -  -  ;
    4 D1:AFEA -  -  -  -  ;		Name : 		instance.asm
    5 D1:AFEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFEA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFEA -  -  -  -  ;		Reviewed :	No
    8 D1:AFEA -  -  -  -  ;		Purpose :	Instance handling
    9 D1:AFEA -  -  -  -  ;
   10 D1:AFEA -  -  -  -  ; ***************************************************************************************
   11 D1:AFEA -  -  -  -  ; ***************************************************************************************
   12 D1:AFEA -  -  -  -  
   13 D1:AFEA -  -  -  -  ; ***************************************************************************************
   14 D1:AFEA -  -  -  -  ;
   15 D1:AFEA -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:AFEA -  -  -  -  ;
   17 D1:AFEA -  -  -  -  ; ***************************************************************************************
   18 D1:AFEA -  -  -  -  
   19 D1:AFEA -  -  -  -  SetCurrentInstance:
   20 D1:AFEA ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:AFEF 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:AFF3 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:AFF8 -  -  -  -  
   24 D1:AFF8 C9 -  -  -  		ret
   25 D1:AFF9 -  -  -  -  
   26 D1:AFF9 -  -  -  -  
   27 D1:AFF9 -  -  -  -  ; ***************************************************************************************
   28 D1:AFF9 -  -  -  -  ;
   29 D1:AFF9 -  -  -  -  ;									Changes and Updates
   30 D1:AFF9 -  -  -  -  ;
   31 D1:AFF9 -  -  -  -  ; ***************************************************************************************
   32 D1:AFF9 -  -  -  -  ;
   33 D1:AFF9 -  -  -  -  ;		Date			Notes
   34 D1:AFF9 -  -  -  -  ;		==== 			=====
   35 D1:AFF9 -  -  -  -  ;
   36 D1:AFF9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:AFF9 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:AFF9 -  -  -  -  ; ***************************************************************************************
    2 D1:AFF9 -  -  -  -  ; ***************************************************************************************
    3 D1:AFF9 -  -  -  -  ;
    4 D1:AFF9 -  -  -  -  ;		Name : 		new.asm
    5 D1:AFF9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFF9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFF9 -  -  -  -  ;		Reviewed :	No
    8 D1:AFF9 -  -  -  -  ;		Purpose :	New command.
    9 D1:AFF9 -  -  -  -  ;
   10 D1:AFF9 -  -  -  -  ; ***************************************************************************************
   11 D1:AFF9 -  -  -  -  ; ***************************************************************************************
   12 D1:AFF9 -  -  -  -  
   13 D1:AFF9 -  -  -  -  ; ***************************************************************************************
   14 D1:AFF9 -  -  -  -  ;
   15 D1:AFF9 -  -  -  -  ;										NEW command
   16 D1:AFF9 -  -  -  -  ;
   17 D1:AFF9 -  -  -  -  ; ***************************************************************************************
   18 D1:AFF9 -  -  -  -  
   19 D1:AFF9 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:AFF9 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:AFFD 36 00 -  -  		ld 		(hl),0
   22 D1:AFFF CD AF AF D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B003 3E 00 C3 A4 
              AA D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B009 -  -  -  -  
   25 D1:B009 -  -  -  -  ; ***************************************************************************************
   26 D1:B009 -  -  -  -  ;
   27 D1:B009 -  -  -  -  ;									Changes and Updates
   28 D1:B009 -  -  -  -  ;
   29 D1:B009 -  -  -  -  ; ***************************************************************************************
   30 D1:B009 -  -  -  -  ;
   31 D1:B009 -  -  -  -  ;		Date			Notes
   32 D1:B009 -  -  -  -  ;		==== 			=====
   33 D1:B009 -  -  -  -  ;
   34 D1:B009 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B009 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B009 -  -  -  -  ; ***************************************************************************************
    2 D1:B009 -  -  -  -  ; ***************************************************************************************
    3 D1:B009 -  -  -  -  ;
    4 D1:B009 -  -  -  -  ;		Name : 		utility.asm
    5 D1:B009 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B009 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B009 -  -  -  -  ;		Reviewed :	No
    8 D1:B009 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B009 -  -  -  -  ;
   10 D1:B009 -  -  -  -  ; ***************************************************************************************
   11 D1:B009 -  -  -  -  ; ***************************************************************************************
   12 D1:B009 -  -  -  -  
   13 D1:B009 -  -  -  -  ; ***************************************************************************************
   14 D1:B009 -  -  -  -  ;
   15 D1:B009 -  -  -  -  ;							Print ASCII string at HL
   16 D1:B009 -  -  -  -  ;
   17 D1:B009 -  -  -  -  ; ***************************************************************************************
   18 D1:B009 -  -  -  -  
   19 D1:B009 -  -  -  -  PrintStringAtHL:
   20 D1:B009 7E -  -  -  		ld 		a,(hl)
   21 D1:B00A FE 20 -  -  		cp 		$20		
   22 D1:B00C D8 -  -  -  		ret 	c
   23 D1:B00D CD C8 B5 D1 		call 	SYSPrintChar
   24 D1:B011 23 -  -  -  		inc 	hl
   25 D1:B012 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B014 -  -  -  -  
   27 D1:B014 -  -  -  -  ; ***************************************************************************************
   28 D1:B014 -  -  -  -  ;
   29 D1:B014 -  -  -  -  ;									Changes and Updates
   30 D1:B014 -  -  -  -  ;
   31 D1:B014 -  -  -  -  ; ***************************************************************************************
   32 D1:B014 -  -  -  -  ;
   33 D1:B014 -  -  -  -  ;		Date			Notes
   34 D1:B014 -  -  -  -  ;		==== 			=====
   35 D1:B014 -  -  -  -  ;
   36 D1:B014 -  -  -  -  ; ***************************************************************************************
   37 D1:B014 -  -  -  -  		
Listing for file "_build.asm"
   50 D1:B014 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:B014 -  -  -  -  ;
    2 D1:B014 -  -  -  -  ;	This file is automatically generated.
    3 D1:B014 -  -  -  -  ;
    4 D1:B014 -  -  -  -  ;
    5 D1:B014 -  -  -  -  ;	Keywords for set 0
    6 D1:B014 -  -  -  -  ;
    7 D1:B014 -  -  -  -  KeywordsSet0:
    8 D1:B014 01 20 -  -  	.db	1," "              ; $0080
    9 D1:B016 01 20 -  -  	.db	1," "              ; $0081
   10 D1:B018 01 20 -  -  	.db	1," "              ; $0082
   11 D1:B01A 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:B01C 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:B01E 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:B020 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:B022 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:B026 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 D1:B02A 01 2B -  -  	.db	1,"+"              ; $0089
   18 D1:B02C 01 2D -  -  	.db	1,"-"              ; $008a
   19 D1:B02E 02 3E 3D -  	.db	2,">="             ; $008b
   20 D1:B031 02 3C 3D -  	.db	2,"<="             ; $008c
   21 D1:B034 01 3E -  -  	.db	1,">"              ; $008d
   22 D1:B036 01 3C -  -  	.db	1,"<"              ; $008e
   23 D1:B038 01 3D -  -  	.db	1,"="              ; $008f
   24 D1:B03A 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 D1:B03D 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 D1:B041 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 D1:B044 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 D1:B048 01 26 -  -  	.db	1,"&"              ; $0094
   29 D1:B04A 01 28 -  -  	.db	1,"("              ; $0095
   30 D1:B04C 01 24 -  -  	.db	1,"$"              ; $0096
   31 D1:B04E 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 D1:B052 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 D1:B056 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 D1:B05A 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 D1:B05E 03 53 54 52 	.db	3,"STR"            ; $009b
   36 D1:B062 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 D1:B066 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 D1:B06A 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 D1:B06E 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 D1:B073 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 D1:B078 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 D1:B07C 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 D1:B080 01 29 -  -  	.db	1,")"              ; $00a3
   44 D1:B082 01 2C -  -  	.db	1,","              ; $00a4
   45 D1:B084 01 3A -  -  	.db	1,":"              ; $00a5
   46 D1:B086 01 3B -  -  	.db	1,";"              ; $00a6
   47 D1:B088 01 27 -  -  	.db	1,"'"              ; $00a7
   48 D1:B08A 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 D1:B091 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 D1:B097 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 D1:B09A 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 D1:B09F 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 D1:B0A4 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 D1:B0A8 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 D1:B0AB 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 D1:B0B0 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 D1:B0B5 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 D1:B0B9 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 D1:B0BE 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 D1:B0C6 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 D1:B0CC 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 D1:B0D0 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 D1:B0D4 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 D1:B0D8 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 D1:B0DC 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 D1:B0E2 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 D1:B0E7 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 D1:B0EC 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 D1:B0F1 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 D1:B0F5 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 D1:B0F9 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 D1:B0FE 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 D1:B103 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 D1:B10B 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 D1:B112 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 D1:B118 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 D1:B11C 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 D1:B121 00 -  -  -  	.db	0
   79 D1:B122 -  -  -  -  ;
   80 D1:B122 -  -  -  -  ;	Keywords for set 1
   81 D1:B122 -  -  -  -  ;
   82 D1:B122 -  -  -  -  KeywordsSet1:
   83 D1:B122 00 -  -  -  	.db	0
   84 D1:B123 -  -  -  -  ;
   85 D1:B123 -  -  -  -  ;	Keywords for set 2
   86 D1:B123 -  -  -  -  ;
   87 D1:B123 -  -  -  -  KeywordsSet2:
   88 D1:B123 00 -  -  -  	.db	0
Listing for file "_build.asm"
   51 D1:B124 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B124 -  -  -  -  ;
    2 D1:B124 -  -  -  -  ;	This file is automatically generated.
    3 D1:B124 -  -  -  -  ;
    4 D1:B124 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 D1:B140 -  -  -  -  PrecedenceTable:
    6 D1:B140 06 -  -  -  	.db	6	; $0083 !
    7 D1:B141 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B142 05 -  -  -  	.db	5	; $0085 *
    9 D1:B143 05 -  -  -  	.db	5	; $0086 /
   10 D1:B144 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B145 05 -  -  -  	.db	5	; $0088 div
   12 D1:B146 04 -  -  -  	.db	4	; $0089 +
   13 D1:B147 04 -  -  -  	.db	4	; $008a -
   14 D1:B148 03 -  -  -  	.db	3	; $008b >=
   15 D1:B149 03 -  -  -  	.db	3	; $008c <=
   16 D1:B14A 03 -  -  -  	.db	3	; $008d >
   17 D1:B14B 03 -  -  -  	.db	3	; $008e <
   18 D1:B14C 03 -  -  -  	.db	3	; $008f =
   19 D1:B14D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B14E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B14F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B150 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B151 -  -  -  -  
Listing for file "_build.asm"
   52 D1:B151 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B151 -  -  -  -  ;
    2 D1:B151 -  -  -  -  ;	This is automatically generated.
    3 D1:B151 -  -  -  -  ;
    4 D1:B151 -  -  -  -  ErrorIDTable:
    5 D1:B151 91 B1 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B155 97 B1 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B159 A8 B1 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B15D B6 B1 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B161 C0 B1 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:B165 DA B1 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:B169 EB B1 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:B16D F9 B1 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:B171 07 B2 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 D1:B175 11 B2 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 D1:B179 26 B2 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 D1:B17D 3C B2 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 D1:B181 4A B2 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 D1:B185 4F B2 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 D1:B189 5C B2 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 D1:B18D 6D B2 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 D1:B191 -  -  -  -  
   22 D1:B191 -  -  -  -  ErrText_warmstart:
   23 D1:B191 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 D1:B197 -  -  -  -  ErrText_assert:
   25 D1:B197 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 D1:B1A8 -  -  -  -  ErrText_badtype:
   27 D1:B1A8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 D1:B1B6 -  -  -  -  ErrText_badvalue:
   29 D1:B1B6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 D1:B1C0 -  -  -  -  ErrText_disabled:
   31 D1:B1C0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 D1:B1DA -  -  -  -  ErrText_divzero:
   33 D1:B1DA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 D1:B1EB -  -  -  -  ErrText_memory:
   35 D1:B1EB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 D1:B1F9 -  -  -  -  ErrText_nocomma:
   37 D1:B1F9 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 D1:B207 -  -  -  -  ErrText_nodollar:
   39 D1:B207 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 D1:B211 -  -  -  -  ErrText_nolbracket:
   41 D1:B211 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 D1:B226 -  -  -  -  ErrText_norbracket:
   43 D1:B226 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 D1:B23C -  -  -  -  ErrText_notref:
   45 D1:B23C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 D1:B24A -  -  -  -  ErrText_stop:
   47 D1:B24A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 D1:B24F -  -  -  -  ErrText_syntax:
   49 D1:B24F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 D1:B25C -  -  -  -  ErrText_todo:
   51 D1:B25C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 D1:B26D -  -  -  -  ErrText_unknownvar:
   53 D1:B26D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   53 D1:B27E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B27E -  -  -  -  ;
    2 D1:B27E -  -  -  -  ;	Vectors for set 0
    3 D1:B27E -  -  -  -  ;
    4 D1:B27E -  -  -  -  VectorsSet0:
    5 D1:B27E 63 A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B282 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B286 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B28A 84 AB D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B28E 8D AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B292 30 AB D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B296 3E AB D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B29A 4C AB D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B29E 3E AB D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B2A2 14 AB D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B2A6 22 AB D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B2AA EB AB D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B2AE E1 AB D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B2B2 CD AB D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B2B6 C3 AB D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B2BA B9 AB D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B2BE D7 AB D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B2C2 5A AB D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B2C6 68 AB D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B2CA 76 AB D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B2CE 5E AF D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B2D2 56 AF D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B2D6 78 AE D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B2DA A5 AE D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B2DE 67 AE D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B2E2 3D AE D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B2E6 3C AF D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B2EA 6D AF D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B2EE 53 AE D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B2F2 4A AE D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B2F6 83 AE D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B2FA 98 AE D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B2FE 86 AF D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B302 8D AF D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B306 9A AF D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B30A 58 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a3 )
   41 D1:B30E 58 A9 D1 00 	addr(BadCmd_Comma)               ; $00a4 ,
   42 D1:B312 5C A9 D1 00 	addr(Command_Colon)              ; $00a5 :
   43 D1:B316 58 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 D1:B31A D1 A9 D1 00 	addr(Command_REM2)               ; $00a7 '
   45 D1:B31E A5 A8 D1 00 	addr(Unimplemented)              ; $00a8 repeat
   46 D1:B322 A5 A8 D1 00 	addr(Unimplemented)              ; $00a9 until
   47 D1:B326 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa if
   48 D1:B32A 58 A9 D1 00 	addr(BadCmd_Then)                ; $00ab then
   49 D1:B32E A5 A8 D1 00 	addr(Unimplemented)              ; $00ac else
   50 D1:B332 A5 A8 D1 00 	addr(Unimplemented)              ; $00ad for
   51 D1:B336 58 A9 D1 00 	addr(BadCmd_To)                  ; $00ae to
   52 D1:B33A A5 A8 D1 00 	addr(Unimplemented)              ; $00af step
   53 D1:B33E A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 next
   54 D1:B342 58 A9 D1 00 	addr(BadCmd_Defproc)             ; $00b1 def
   55 D1:B346 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 proc
   56 D1:B34A A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 endproc
   57 D1:B34E A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 local
   58 D1:B352 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 dim
   59 D1:B356 D1 A9 D1 00 	addr(Command_REM)                ; $00b6 rem
   60 D1:B35A A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 let
   61 D1:B35E A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 vdu
   62 D1:B362 7A A9 D1 00 	addr(Command_PRINT)              ; $00b9 print
   63 D1:B366 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba load
   64 D1:B36A A5 A8 D1 00 	addr(Unimplemented)              ; $00bb save
   65 D1:B36E A5 A8 D1 00 	addr(Unimplemented)              ; $00bc list
   66 D1:B372 F9 AF D1 00 	addr(Command_NEW)                ; $00bd new
   67 D1:B376 EE A9 D1 00 	addr(Command_RUN)                ; $00be run
   68 D1:B37A A5 A8 D1 00 	addr(Unimplemented)              ; $00bf read
   69 D1:B37E A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 data
   70 D1:B382 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 restore
   71 D1:B386 47 A9 D1 00 	addr(Command_ASSERT)             ; $00c2 assert
   72 D1:B38A AF AF D1 00 	addr(Command_CLEAR)              ; $00c3 clear
   73 D1:B38E 5D A9 D1 00 	addr(Command_END)                ; $00c4 end
   74 D1:B392 5A AA D1 00 	addr(Command_STOP)               ; $00c5 stop
   75 D1:B396 -  -  -  -  ;
   76 D1:B396 -  -  -  -  ;	Vectors for set 1
   77 D1:B396 -  -  -  -  ;
   78 D1:B396 -  -  -  -  VectorsSet1:
   79 D1:B396 -  -  -  -  ;
   80 D1:B396 -  -  -  -  ;	Vectors for set 2
   81 D1:B396 -  -  -  -  ;
   82 D1:B396 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   54 D1:B396 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B396 -  -  -  -  ; ***************************************************************************************
    2 D1:B396 -  -  -  -  ; ***************************************************************************************
    3 D1:B396 -  -  -  -  ;
    4 D1:B396 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B396 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B396 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B396 -  -  -  -  ;		Reviewed :	No
    8 D1:B396 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B396 -  -  -  -  ;
   10 D1:B396 -  -  -  -  ; ***************************************************************************************
   11 D1:B396 -  -  -  -  ; ***************************************************************************************
   12 D1:B396 -  -  -  -  
   13 D1:B396 -  -  -  -  ; ***************************************************************************************
   14 D1:B396 -  -  -  -  ;
   15 D1:B396 -  -  -  -  ;								Unsigned integer divide
   16 D1:B396 -  -  -  -  ;
   17 D1:B396 -  -  -  -  ; ***************************************************************************************
   18 D1:B396 -  -  -  -  
   19 D1:B396 -  -  -  -  Int32UDivide:
   20 D1:B396 37 -  -  -  		scf
   21 D1:B397 C3 DB B3 D1 		jp 		_I32UnsignedDivide		
   22 D1:B39B -  -  -  -  
   23 D1:B39B -  -  -  -  ; ***************************************************************************************
   24 D1:B39B -  -  -  -  ;
   25 D1:B39B -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B39B -  -  -  -  ;
   27 D1:B39B -  -  -  -  ; ***************************************************************************************
   28 D1:B39B -  -  -  -  
   29 D1:B39B -  -  -  -  Int32SDivide:
   30 D1:B39B 37 -  -  -  		scf
   31 D1:B39C 18 01 -  -  		jr 		_I32SDivide
   32 D1:B39E -  -  -  -  Int32Modulus:
   33 D1:B39E AF -  -  -  		xor 	a
   34 D1:B39F -  -  -  -  _I32SDivide:
   35 D1:B39F 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B3A0 F5 -  -  -  		push 	af
   37 D1:B3A1 08 -  -  -  		ex 		af,af'
   38 D1:B3A2 -  -  -  -  
   39 D1:B3A2 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B3A3 D9 -  -  -  		exx
   41 D1:B3A4 D5 -  -  -  		push 	de
   42 D1:B3A5 D9 -  -  -  		exx
   43 D1:B3A6 -  -  -  -  
   44 D1:B3A6 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B3A7 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B3A8 CD C8 B3 D1 		call 	_I32CheckHLSignSwap
   47 D1:B3AC CD C8 B3 D1 		call 	_I32CheckHLSignSwap
   48 D1:B3B0 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B3B1 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B3B2 F5 -  -  -  		push 	af
   51 D1:B3B3 CD DB B3 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B3B7 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B3B8 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B3BA 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B3BB CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B3BD C4 3E B5 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B3C1 -  -  -  -  _I32SDExit:
   58 D1:B3C1 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B3C2 D1 -  -  -  		pop 	de
   60 D1:B3C3 D9 -  -  -  		exx
   61 D1:B3C4 D1 -  -  -  		pop 	de
   62 D1:B3C5 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B3C6 08 -  -  -  		ex 		af,af'
   64 D1:B3C7 C9 -  -  -  		ret
   65 D1:B3C8 -  -  -  -  
   66 D1:B3C8 -  -  -  -  
   67 D1:B3C8 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B3C8 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B3C9 CB 7C -  -  		bit 	7,h
   70 D1:B3CB D9 -  -  -  		exx
   71 D1:B3CC 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B3CE -  -  -  -  		;
   73 D1:B3CE C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B3D0 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B3D1 CD 3E B5 D1 		call 	Int32Negate 				
   76 D1:B3D5 F1 -  -  -  		pop 	af
   77 D1:B3D6 -  -  -  -  _I32CHSPositive:
   78 D1:B3D6 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B3D7 EB -  -  -  		ex 		de,hl
   80 D1:B3D8 D9 -  -  -  		exx		
   81 D1:B3D9 EB -  -  -  		ex 		de,hl
   82 D1:B3DA C9 -  -  -  		ret
   83 D1:B3DB -  -  -  -  
   84 D1:B3DB -  -  -  -  ; ***************************************************************************************
   85 D1:B3DB -  -  -  -  ;
   86 D1:B3DB -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B3DB -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B3DB -  -  -  -  ;
   89 D1:B3DB -  -  -  -  ; ***************************************************************************************
   90 D1:B3DB -  -  -  -  
   91 D1:B3DB -  -  -  -  _I32UnsignedDivide:
   92 D1:B3DB C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B3DC D5 -  -  -  		push 	de
   94 D1:B3DD D9 -  -  -  		exx
   95 D1:B3DE C5 -  -  -  		push 	bc
   96 D1:B3DF D5 -  -  -  		push 	de 							
   97 D1:B3E0 D9 -  -  -  		exx
   98 D1:B3E1 -  -  -  -  
   99 D1:B3E1 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B3E2 -  -  -  -  
  101 D1:B3E2 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B3E3 B3 -  -  -  		or 		e
  103 D1:B3E4 D9 -  -  -  		exx
  104 D1:B3E5 B2 -  -  -  		or 		d
  105 D1:B3E6 B3 -  -  -  		or 		e
  106 D1:B3E7 D9 -  -  -  		exx
  107 D1:B3E8 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B3EC -  -  -  -  
  109 D1:B3EC -  -  -  -  
  110 D1:B3EC 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B3ED 4D -  -  -  		ld		c,l
  112 D1:B3EE 21 00 00 00 		ld 		hl,$0000
  113 D1:B3F2 D9 -  -  -  		exx
  114 D1:B3F3 44 -  -  -  		ld 		b,h
  115 D1:B3F4 4D -  -  -  		ld		c,l
  116 D1:B3F5 21 00 00 00 		ld 		hl,$0000
  117 D1:B3F9 D9 -  -  -  		exx
  118 D1:B3FA -  -  -  -  
  119 D1:B3FA 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B3FC -  -  -  -  _I32DivideLoop:
  121 D1:B3FC F5 -  -  -  		push 	af
  122 D1:B3FD -  -  -  -  
  123 D1:B3FD CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B3FF CB 10 -  -  		rl 		b
  125 D1:B401 D9 -  -  -  		exx
  126 D1:B402 CB 11 -  -  		rl 		c
  127 D1:B404 CB 10 -  -  		rl 		b
  128 D1:B406 D9 -  -  -  		exx
  129 D1:B407 CB 15 -  -  		rl 		l
  130 D1:B409 CB 14 -  -  		rl 		h
  131 D1:B40B D9 -  -  -  		exx
  132 D1:B40C CB 15 -  -  		rl 		l
  133 D1:B40E CB 14 -  -  		rl 		h
  134 D1:B410 D9 -  -  -  		exx
  135 D1:B411 -  -  -  -  
  136 D1:B411 CD DC B4 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B415 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B417 -  -  -  -  
  139 D1:B417 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B418 18 04 -  -  		jr 		_I32Next
  141 D1:B41A -  -  -  -  
  142 D1:B41A -  -  -  -  _I32Borrow:
  143 D1:B41A CD D4 B4 D1 		call 	Int32Add 					; A = A + M
  144 D1:B41E -  -  -  -  _I32Next:
  145 D1:B41E F1 -  -  -  		pop 	af
  146 D1:B41F 3D -  -  -  		dec 	a
  147 D1:B420 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B422 -  -  -  -  
  149 D1:B422 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B423 -  -  -  -  
  151 D1:B423 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B424 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B426 -  -  -  -  
  154 D1:B426 60 -  -  -  		ld  	h,b
  155 D1:B427 69 -  -  -  		ld 		l,c
  156 D1:B428 D9 -  -  -  		exx
  157 D1:B429 60 -  -  -  		ld  	h,b
  158 D1:B42A 69 -  -  -  		ld 		l,c
  159 D1:B42B D9 -  -  -  		exx
  160 D1:B42C -  -  -  -  _I32Modulus1:		
  161 D1:B42C D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B42D D1 -  -  -  		pop 	de
  163 D1:B42E C1 -  -  -  		pop 	bc
  164 D1:B42F D9 -  -  -  		exx
  165 D1:B430 D1 -  -  -  		pop 	de
  166 D1:B431 C1 -  -  -  		pop 	bc
  167 D1:B432 C9 -  -  -  		ret
  168 D1:B433 -  -  -  -  
  169 D1:B433 -  -  -  -  ; ***************************************************************************************
  170 D1:B433 -  -  -  -  ;
  171 D1:B433 -  -  -  -  ;									Changes and Updates
  172 D1:B433 -  -  -  -  ;
  173 D1:B433 -  -  -  -  ; ***************************************************************************************
  174 D1:B433 -  -  -  -  ;
  175 D1:B433 -  -  -  -  ;		Date			Notes
  176 D1:B433 -  -  -  -  ;		==== 			=====
  177 D1:B433 -  -  -  -  ;
  178 D1:B433 -  -  -  -  ; ***************************************************************************************
  179 D1:B433 -  -  -  -  		
Listing for file "_build.asm"
   55 D1:B433 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B433 -  -  -  -  ; ***************************************************************************************
    2 D1:B433 -  -  -  -  ; ***************************************************************************************
    3 D1:B433 -  -  -  -  ;
    4 D1:B433 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B433 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B433 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B433 -  -  -  -  ;		Reviewed :	No
    8 D1:B433 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B433 -  -  -  -  ;
   10 D1:B433 -  -  -  -  ; ***************************************************************************************
   11 D1:B433 -  -  -  -  ; ***************************************************************************************
   12 D1:B433 -  -  -  -  
   13 D1:B433 -  -  -  -  ; ***************************************************************************************
   14 D1:B433 -  -  -  -  ;
   15 D1:B433 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B433 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B433 -  -  -  -  ;
   18 D1:B433 -  -  -  -  ; ***************************************************************************************
   19 D1:B433 -  -  -  -  
   20 D1:B433 -  -  -  -  Int32FromString:
   21 D1:B433 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B434 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B435 D5 -  -  -  		push 	de
   24 D1:B436 D9 -  -  -  		exx
   25 D1:B437 D5 -  -  -  		push 	de
   26 D1:B438 -  -  -  -  
   27 D1:B438 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B43C 11 00 00 00 		ld 		de,$0000
   29 D1:B440 D9 -  -  -  		exx
   30 D1:B441 21 00 00 00 		ld 		hl,$0000
   31 D1:B445 11 00 00 00 		ld 		de,$0000
   32 D1:B449 D9 -  -  -  		exx
   33 D1:B44A -  -  -  -  
   34 D1:B44A 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B44B CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B44D 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B44F ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B451 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B452 -  -  -  -  		;
   40 D1:B452 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B453 F5 -  -  -  		push 	af
   42 D1:B454 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B456 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B457 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B459 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B45A 18 01 -  -  		jr 		_I32FSMain
   47 D1:B45C -  -  -  -  _I32FSNotSigned:		
   48 D1:B45C E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B45D -  -  -  -  		;
   50 D1:B45D -  -  -  -  		; 		Main conversion loop.
   51 D1:B45D -  -  -  -  		; 		
   52 D1:B45D -  -  -  -  _I32FSMain:		
   53 D1:B45D 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B45E FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B460 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B462 D6 20 -  -  		sub 	32
   57 D1:B464 -  -  -  -  _I32FSNotLower:
   58 D1:B464 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B466 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B468 FE 3A -  -  		cp 		'9'+1
   61 D1:B46A 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B46C FE 41 -  -  		cp 		'A'
   63 D1:B46E 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B470 FE 47 -  -  		cp 		'F'+1
   65 D1:B472 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B474 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B476 -  -  -  -  _I32FSOkay:
   68 D1:B476 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B478 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B479 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B47B 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B47C D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B47D F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B47E CD 9B B4 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B482 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B483 5F -  -  -  		ld 		e,a
   77 D1:B484 CD D4 B4 D1 		call 	Int32Add 					; and add it.
   78 D1:B488 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B489 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B48B -  -  -  -  
   81 D1:B48B -  -  -  -  _I32FSExit:
   82 D1:B48B F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B48C FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B48E CC 3E B5 D1 		call 	z,Int32Negate
   85 D1:B492 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B493 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B494 D9 -  -  -  		exx
   88 D1:B495 D1 -  -  -  		pop 	de
   89 D1:B496 D9 -  -  -  		exx
   90 D1:B497 C1 -  -  -  		pop 	bc
   91 D1:B498 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B49A C9 -  -  -  		ret				
   93 D1:B49B -  -  -  -  
   94 D1:B49B -  -  -  -  ; ***************************************************************************************
   95 D1:B49B -  -  -  -  ;
   96 D1:B49B -  -  -  -  ;									Changes and Updates
   97 D1:B49B -  -  -  -  ;
   98 D1:B49B -  -  -  -  ; ***************************************************************************************
   99 D1:B49B -  -  -  -  ;
  100 D1:B49B -  -  -  -  ;		Date			Notes
  101 D1:B49B -  -  -  -  ;		==== 			=====
  102 D1:B49B -  -  -  -  ;
  103 D1:B49B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B49B -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B49B -  -  -  -  ; ***************************************************************************************
    2 D1:B49B -  -  -  -  ; ***************************************************************************************
    3 D1:B49B -  -  -  -  ;
    4 D1:B49B -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B49B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B49B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B49B -  -  -  -  ;		Reviewed :	No
    8 D1:B49B -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B49B -  -  -  -  ;
   10 D1:B49B -  -  -  -  ; ***************************************************************************************
   11 D1:B49B -  -  -  -  ; ***************************************************************************************
   12 D1:B49B -  -  -  -  
   13 D1:B49B -  -  -  -  Int32Multiply:
   14 D1:B49B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B49C D5 -  -  -  		push 	de
   16 D1:B49D 44 -  -  -  		ld 		b,h
   17 D1:B49E 4D -  -  -  		ld 		c,l
   18 D1:B49F 21 00 00 00 		ld 		hl,$0000
   19 D1:B4A3 -  -  -  -  
   20 D1:B4A3 D9 -  -  -  		exx
   21 D1:B4A4 C5 -  -  -  		push 	bc
   22 D1:B4A5 D5 -  -  -  		push 	de
   23 D1:B4A6 44 -  -  -  		ld 		b,h
   24 D1:B4A7 4D -  -  -  		ld 		c,l
   25 D1:B4A8 21 00 00 00 		ld 		hl,$0000		
   26 D1:B4AC D9 -  -  -  		exx
   27 D1:B4AD -  -  -  -  
   28 D1:B4AD -  -  -  -  _I32MultiplyLoop:
   29 D1:B4AD CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B4AF C4 D4 B4 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B4B3 -  -  -  -  		;
   32 D1:B4B3 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B4B4 CB 38 -  -  		srl 	b
   34 D1:B4B6 CB 19 -  -  		rr 		c
   35 D1:B4B8 D9 -  -  -  		exx
   36 D1:B4B9 CB 18 -  -  		rr 		b
   37 D1:B4BB CB 19 -  -  		rr 		c
   38 D1:B4BD -  -  -  -  		;
   39 D1:B4BD CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B4BF CB 12 -  -  		rl 		d
   41 D1:B4C1 D9 -  -  -  		exx
   42 D1:B4C2 CB 13 -  -  		rl 		e
   43 D1:B4C4 CB 12 -  -  		rl 		d
   44 D1:B4C6 -  -  -  -  
   45 D1:B4C6 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B4C7 B1 -  -  -  		or 		c
   47 D1:B4C8 D9 -  -  -  		exx
   48 D1:B4C9 B0 -  -  -  		or 		b
   49 D1:B4CA B1 -  -  -  		or 		c
   50 D1:B4CB 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B4CD -  -  -  -  
   52 D1:B4CD D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B4CE D1 -  -  -  		pop 	de
   54 D1:B4CF C1 -  -  -  		pop 	bc
   55 D1:B4D0 D9 -  -  -  		exx
   56 D1:B4D1 D1 -  -  -  		pop 	de
   57 D1:B4D2 C1 -  -  -  		pop 	bc
   58 D1:B4D3 C9 -  -  -  		ret
   59 D1:B4D4 -  -  -  -  
   60 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   61 D1:B4D4 -  -  -  -  ;
   62 D1:B4D4 -  -  -  -  ;									Changes and Updates
   63 D1:B4D4 -  -  -  -  ;
   64 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   65 D1:B4D4 -  -  -  -  ;
   66 D1:B4D4 -  -  -  -  ;		Date			Notes
   67 D1:B4D4 -  -  -  -  ;		==== 			=====
   68 D1:B4D4 -  -  -  -  ;
   69 D1:B4D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 D1:B4D4 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B4D4 -  -  -  -  ; ***************************************************************************************
    2 D1:B4D4 -  -  -  -  ; ***************************************************************************************
    3 D1:B4D4 -  -  -  -  ;
    4 D1:B4D4 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B4D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B4D4 -  -  -  -  ;		Reviewed :	No
    8 D1:B4D4 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B4D4 -  -  -  -  ;
   10 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   11 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   12 D1:B4D4 -  -  -  -  
   13 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   14 D1:B4D4 -  -  -  -  ;
   15 D1:B4D4 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B4D4 -  -  -  -  ;
   17 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   18 D1:B4D4 -  -  -  -  
   19 D1:B4D4 -  -  -  -  Int32Add:
   20 D1:B4D4 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B4D6 D9 -  -  -  		exx
   22 D1:B4D7 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B4DA D9 -  -  -  		exx
   24 D1:B4DB C9 -  -  -  		ret
   25 D1:B4DC -  -  -  -  
   26 D1:B4DC -  -  -  -  ; ***************************************************************************************
   27 D1:B4DC -  -  -  -  ;
   28 D1:B4DC -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B4DC -  -  -  -  ;
   30 D1:B4DC -  -  -  -  ; ***************************************************************************************
   31 D1:B4DC -  -  -  -  
   32 D1:B4DC -  -  -  -  Int32Subtract:
   33 D1:B4DC AF -  -  -  		xor 	a 							; clear carry
   34 D1:B4DD 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B4E0 D9 -  -  -  		exx
   36 D1:B4E1 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B4E4 D9 -  -  -  		exx
   38 D1:B4E5 C9 -  -  -  		ret
   39 D1:B4E6 -  -  -  -  
   40 D1:B4E6 -  -  -  -  ; ***************************************************************************************
   41 D1:B4E6 -  -  -  -  ;
   42 D1:B4E6 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B4E6 -  -  -  -  ;
   44 D1:B4E6 -  -  -  -  ; ***************************************************************************************
   45 D1:B4E6 -  -  -  -  
   46 D1:B4E6 -  -  -  -  Int32And:
   47 D1:B4E6 D9 -  -  -  		exx
   48 D1:B4E7 CD EC B4 D1 		call 	_I32AndHLDE
   49 D1:B4EB D9 -  -  -  		exx
   50 D1:B4EC -  -  -  -  _I32AndHLDE:		
   51 D1:B4EC 7C -  -  -  		ld 		a,h
   52 D1:B4ED A2 -  -  -  		and 	d
   53 D1:B4EE 67 -  -  -  		ld 		h,a
   54 D1:B4EF 7D -  -  -  		ld 		a,l
   55 D1:B4F0 A3 -  -  -  		and 	e
   56 D1:B4F1 6F -  -  -  		ld 		l,a
   57 D1:B4F2 C9 -  -  -  		ret
   58 D1:B4F3 -  -  -  -  
   59 D1:B4F3 -  -  -  -  ; ***************************************************************************************
   60 D1:B4F3 -  -  -  -  ;
   61 D1:B4F3 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B4F3 -  -  -  -  ;
   63 D1:B4F3 -  -  -  -  ; ***************************************************************************************
   64 D1:B4F3 -  -  -  -  
   65 D1:B4F3 -  -  -  -  Int32Or:
   66 D1:B4F3 D9 -  -  -  		exx
   67 D1:B4F4 CD F9 B4 D1 		call 	_I32OrHLDE
   68 D1:B4F8 D9 -  -  -  		exx
   69 D1:B4F9 -  -  -  -  _I32OrHLDE:		
   70 D1:B4F9 7C -  -  -  		ld 		a,h
   71 D1:B4FA B2 -  -  -  		or 		d
   72 D1:B4FB 67 -  -  -  		ld 		h,a
   73 D1:B4FC 7D -  -  -  		ld 		a,l
   74 D1:B4FD B3 -  -  -  		or 		e
   75 D1:B4FE 6F -  -  -  		ld 		l,a
   76 D1:B4FF C9 -  -  -  		ret
   77 D1:B500 -  -  -  -  
   78 D1:B500 -  -  -  -  ; ***************************************************************************************
   79 D1:B500 -  -  -  -  ;
   80 D1:B500 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B500 -  -  -  -  ;
   82 D1:B500 -  -  -  -  ; ***************************************************************************************
   83 D1:B500 -  -  -  -  
   84 D1:B500 -  -  -  -  Int32Xor:
   85 D1:B500 D9 -  -  -  		exx
   86 D1:B501 CD 06 B5 D1 		call 	_I32XorHLDE
   87 D1:B505 D9 -  -  -  		exx
   88 D1:B506 -  -  -  -  _I32XorHLDE:		
   89 D1:B506 7C -  -  -  		ld 		a,h
   90 D1:B507 AA -  -  -  		xor 	d
   91 D1:B508 67 -  -  -  		ld 		h,a
   92 D1:B509 7D -  -  -  		ld 		a,l
   93 D1:B50A AB -  -  -  		xor 	e
   94 D1:B50B 6F -  -  -  		ld 		l,a
   95 D1:B50C C9 -  -  -  		ret
   96 D1:B50D -  -  -  -  
   97 D1:B50D -  -  -  -  ; ***************************************************************************************
   98 D1:B50D -  -  -  -  ;
   99 D1:B50D -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B50D -  -  -  -  ;
  101 D1:B50D -  -  -  -  ; ***************************************************************************************
  102 D1:B50D -  -  -  -  
  103 D1:B50D -  -  -  -  Int32Zero:
  104 D1:B50D D9 -  -  -  		exx
  105 D1:B50E 7D -  -  -  		ld 		a,l
  106 D1:B50F B4 -  -  -  		or 		h
  107 D1:B510 D9 -  -  -  		exx
  108 D1:B511 B5 -  -  -  		or 		l
  109 D1:B512 B4 -  -  -  		or 		h
  110 D1:B513 C9 -  -  -  		ret
  111 D1:B514 -  -  -  -  
  112 D1:B514 -  -  -  -  ; ***************************************************************************************
  113 D1:B514 -  -  -  -  ;
  114 D1:B514 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B514 -  -  -  -  ;
  116 D1:B514 -  -  -  -  ; ***************************************************************************************
  117 D1:B514 -  -  -  -  
  118 D1:B514 -  -  -  -  Int32Compare:
  119 D1:B514 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B515 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B516 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B519 D9 -  -  -  		exx
  123 D1:B51A E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B51B 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B51E -  -  -  -  		;
  126 D1:B51E 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B51F E2 27 B5 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B523 78 -  -  -  		ld 		a,b
  129 D1:B524 EE 80 -  -  		xor 	$80
  130 D1:B526 47 -  -  -  		ld 		b,a
  131 D1:B527 -  -  -  -  _I32CNoOverflow:
  132 D1:B527 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B528 B5 -  -  -  		or 		l
  134 D1:B529 D9 -  -  -  		exx 
  135 D1:B52A B4 -  -  -  		or 		h
  136 D1:B52B B5 -  -  -  		or 		l
  137 D1:B52C 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B52E -  -  -  -  		;
  139 D1:B52E D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B52F CB 78 -  -  		bit 	7,b
  141 D1:B531 D9 -  -  -  		exx
  142 D1:B532 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B534 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B536 3E FF -  -  		ld 		a,$FF
  145 D1:B538 -  -  -  -  _I32NotPos:
  146 D1:B538 D9 -  -  -  		exx
  147 D1:B539 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B53A D9 -  -  -  		exx
  149 D1:B53B E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B53C B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B53D C9 -  -  -  		ret
  152 D1:B53E -  -  -  -  
  153 D1:B53E -  -  -  -  ; ***************************************************************************************
  154 D1:B53E -  -  -  -  ;
  155 D1:B53E -  -  -  -  ;										Negate HL'HL
  156 D1:B53E -  -  -  -  ;
  157 D1:B53E -  -  -  -  ; ***************************************************************************************
  158 D1:B53E -  -  -  -  
  159 D1:B53E -  -  -  -  Int32Negate:
  160 D1:B53E AF -  -  -  		xor 	a
  161 D1:B53F CD 4A B5 D1 		call 	_I32NSubtract
  162 D1:B543 D9 -  -  -  		exx
  163 D1:B544 CD 4A B5 D1 		call 	_I32NSubtract
  164 D1:B548 D9 -  -  -  		exx
  165 D1:B549 C9 -  -  -  		ret
  166 D1:B54A -  -  -  -  _I32NSubtract:
  167 D1:B54A D5 -  -  -  		push 	de
  168 D1:B54B EB -  -  -  		ex 		de,hl
  169 D1:B54C 21 00 00 00 		ld 		hl,$0000
  170 D1:B550 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B553 D1 -  -  -  		pop 	de
  172 D1:B554 C9 -  -  -  		ret
  173 D1:B555 -  -  -  -  		
  174 D1:B555 -  -  -  -  ; ***************************************************************************************
  175 D1:B555 -  -  -  -  ;
  176 D1:B555 -  -  -  -  ;									Changes and Updates
  177 D1:B555 -  -  -  -  ;
  178 D1:B555 -  -  -  -  ; ***************************************************************************************
  179 D1:B555 -  -  -  -  ;
  180 D1:B555 -  -  -  -  ;		Date			Notes
  181 D1:B555 -  -  -  -  ;		==== 			=====
  182 D1:B555 -  -  -  -  ;
  183 D1:B555 -  -  -  -  ; ***************************************************************************************
  184 D1:B555 -  -  -  -  		
Listing for file "_build.asm"
   58 D1:B555 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B555 -  -  -  -  ; ***************************************************************************************
    2 D1:B555 -  -  -  -  ; ***************************************************************************************
    3 D1:B555 -  -  -  -  ;
    4 D1:B555 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B555 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B555 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B555 -  -  -  -  ;		Reviewed :	No
    8 D1:B555 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B555 -  -  -  -  ;
   10 D1:B555 -  -  -  -  ; ***************************************************************************************
   11 D1:B555 -  -  -  -  ;
   12 D1:B555 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B555 -  -  -  -  ;
   14 D1:B555 -  -  -  -  ; ***************************************************************************************
   15 D1:B555 -  -  -  -  
   16 D1:B555 -  -  -  -  Int32ToString:
   17 D1:B555 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B556 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B557 E5 -  -  -  		push 	hl
   20 D1:B558 11 00 00 00 		ld	 	de,$0000
   21 D1:B55C D9 -  -  -  		exx
   22 D1:B55D D5 -  -  -  		push 	de
   23 D1:B55E E5 -  -  -  		push 	hl
   24 D1:B55F 11 00 00 00 		ld 		de,$000
   25 D1:B563 D9 -  -  -  		exx
   26 D1:B564 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B565 -  -  -  -  		;
   28 D1:B565 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B567 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B569 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B56B 5F -  -  -  		ld 		e,a
   32 D1:B56C -  -  -  -  		;
   33 D1:B56C D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B56D CB 7C -  -  		bit 	7,h
   35 D1:B56F D9 -  -  -  		exx
   36 D1:B570 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B572 -  -  -  -  		;
   38 D1:B572 CD 3E B5 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B576 -  -  -  -  		;
   40 D1:B576 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B578 02 -  -  -  		ld 		(bc),a
   42 D1:B579 03 -  -  -  		inc 	bc
   43 D1:B57A -  -  -  -  _I32TSNotNegative:	
   44 D1:B57A CD 89 B5 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B57E -  -  -  -  _I32TSExit:
   46 D1:B57E 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B580 02 -  -  -  		ld 		(bc),a 
   48 D1:B581 -  -  -  -  
   49 D1:B581 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B582 E1 -  -  -  		pop 	hl
   51 D1:B583 D1 -  -  -  		pop 	de
   52 D1:B584 D9 -  -  -  		exx
   53 D1:B585 E1 -  -  -  		pop 	hl
   54 D1:B586 D1 -  -  -  		pop 	de
   55 D1:B587 C1 -  -  -  		pop 	bc
   56 D1:B588 C9 -  -  -  		ret
   57 D1:B589 -  -  -  -  
   58 D1:B589 -  -  -  -  _I32RecursiveConvert:
   59 D1:B589 CD 96 B3 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B58D F5 -  -  -  		push 	af 							; save remainder
   61 D1:B58E CD 0D B5 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B592 C4 89 B5 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B596 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B597 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B599 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B59B C6 07 -  -  		add 	a,7
   67 D1:B59D -  -  -  -  _I32NotHex:
   68 D1:B59D C6 30 -  -  		add 	a,48
   69 D1:B59F 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B5A0 03 -  -  -  		inc 	bc
   71 D1:B5A1 C9 -  -  -  		ret		
   72 D1:B5A2 -  -  -  -  
   73 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   74 D1:B5A2 -  -  -  -  ;
   75 D1:B5A2 -  -  -  -  ;									Changes and Updates
   76 D1:B5A2 -  -  -  -  ;
   77 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   78 D1:B5A2 -  -  -  -  ;
   79 D1:B5A2 -  -  -  -  ;		Date			Notes
   80 D1:B5A2 -  -  -  -  ;		==== 			=====
   81 D1:B5A2 -  -  -  -  ;
   82 D1:B5A2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 D1:B5A2 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B5A2 -  -  -  -  ; ***************************************************************************************
    2 D1:B5A2 -  -  -  -  ; ***************************************************************************************
    3 D1:B5A2 -  -  -  -  ;
    4 D1:B5A2 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B5A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5A2 -  -  -  -  ;		Reviewed :	No
    8 D1:B5A2 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B5A2 -  -  -  -  ;
   10 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   11 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   12 D1:B5A2 -  -  -  -  
   13 D1:B5A2 -  -  -  -  #ifdef AQUARIUS
   14 D1:B5A2             
   15 D1:B5A2             ; ***************************************************************************************
   16 D1:B5A2             ;
   17 D1:B5A2             ;								Initialise system stuff
   18 D1:B5A2             ;
   19 D1:B5A2             ; ***************************************************************************************
   20 D1:B5A2             
   21 D1:B5A2             SYSInitialise:
   22 D1:B5A2             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B5A2             	call 	SYSPrintChar
   24 D1:B5A2             	ret
   25 D1:B5A2             
   26 D1:B5A2             ; ***************************************************************************************
   27 D1:B5A2             ;
   28 D1:B5A2             ;								Terminate system stuff
   29 D1:B5A2             ;
   30 D1:B5A2             ; ***************************************************************************************
   31 D1:B5A2             
   32 D1:B5A2             SYSTerminate:
   33 D1:B5A2             	jr 		SYSTerminate
   34 D1:B5A2             
   35 D1:B5A2             ; ***************************************************************************************
   36 D1:B5A2             ;
   37 D1:B5A2             ;								Print A character
   38 D1:B5A2             ;
   39 D1:B5A2             ; ***************************************************************************************
   40 D1:B5A2             
   41 D1:B5A2             SYSPrintChar:
   42 D1:B5A2             	push 	af 									; we stack everything including alt registers
   43 D1:B5A2             	push 	bc
   44 D1:B5A2             	push 	de
   45 D1:B5A2             	push 	hl
   46 D1:B5A2             	push 	ix
   47 D1:B5A2             	push 	iy
   48 D1:B5A2             	exx
   49 D1:B5A2             	push 	bc
   50 D1:B5A2             	push 	de
   51 D1:B5A2             	push 	hl
   52 D1:B5A2             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B5A2             	pop 	hl
   54 D1:B5A2             	pop 	de
   55 D1:B5A2             	pop 	bc
   56 D1:B5A2             	exx
   57 D1:B5A2             	pop 	iy
   58 D1:B5A2             	pop 	ix
   59 D1:B5A2             	pop 	hl
   60 D1:B5A2             	pop 	de
   61 D1:B5A2             	pop 	bc
   62 D1:B5A2             	pop 	af
   63 D1:B5A2             	ret		
   64 D1:B5A2             
   65 D1:B5A2             ; ***************************************************************************************
   66 D1:B5A2             ;
   67 D1:B5A2             ;									Print Newline
   68 D1:B5A2             ;
   69 D1:B5A2             ; ***************************************************************************************
   70 D1:B5A2             
   71 D1:B5A2             SYSPrintCRLF:
   72 D1:B5A2             	push 	af
   73 D1:B5A2             	ld 		a,13
   74 D1:B5A2             	call 	SYSPrintChar
   75 D1:B5A2             	ld 		a,10
   76 D1:B5A2             	call 	SYSPrintChar
   77 D1:B5A2             	pop 	af
   78 D1:B5A2             	ret
   79 D1:B5A2             
   80 D1:B5A2             ; ***************************************************************************************
   81 D1:B5A2             ;
   82 D1:B5A2             ;									Get time into HL'HL
   83 D1:B5A2             ;
   84 D1:B5A2             ; ***************************************************************************************
   85 D1:B5A2             
   86 D1:B5A2             SYSGetTimer:
   87 D1:B5A2              	in 		a,($00)
   88 D1:B5A2              	ld 		l,a
   89 D1:B5A2              	in 		a,($01)
   90 D1:B5A2              	ld 		h,a
   91 D1:B5A2              	exx
   92 D1:B5A2              	in 		a,($02)
   93 D1:B5A2              	ld 		l,a
   94 D1:B5A2              	in 		a,($03)
   95 D1:B5A2              	ld 		h,a
   96 D1:B5A2              	exx
   97 D1:B5A2             	ret 	
   98 D1:B5A2             	
   99 D1:B5A2             #endif
  100 D1:B5A2 -  -  -  -  
  101 D1:B5A2 -  -  -  -  ; ***************************************************************************************
  102 D1:B5A2 -  -  -  -  ;
  103 D1:B5A2 -  -  -  -  ;									Changes and Updates
  104 D1:B5A2 -  -  -  -  ;
  105 D1:B5A2 -  -  -  -  ; ***************************************************************************************
  106 D1:B5A2 -  -  -  -  ;
  107 D1:B5A2 -  -  -  -  ;		Date			Notes
  108 D1:B5A2 -  -  -  -  ;		==== 			=====
  109 D1:B5A2 -  -  -  -  ;
  110 D1:B5A2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 D1:B5A2 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B5A2 -  -  -  -  ; ***************************************************************************************
    2 D1:B5A2 -  -  -  -  ; ***************************************************************************************
    3 D1:B5A2 -  -  -  -  ;
    4 D1:B5A2 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B5A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5A2 -  -  -  -  ;		Reviewed :	No
    8 D1:B5A2 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B5A2 -  -  -  -  ;
   10 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   11 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   12 D1:B5A2 -  -  -  -  
   13 D1:B5A2 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B5A2             
   15 D1:B5A2             ; ***************************************************************************************
   16 D1:B5A2             ;
   17 D1:B5A2             ;								Initialise system stuff
   18 D1:B5A2             ;
   19 D1:B5A2             ; ***************************************************************************************
   20 D1:B5A2             
   21 D1:B5A2             SYSInitialise:
   22 D1:B5A2             	ret
   23 D1:B5A2             
   24 D1:B5A2             ; ***************************************************************************************
   25 D1:B5A2             ;
   26 D1:B5A2             ;								Terminate system stuff
   27 D1:B5A2             ;
   28 D1:B5A2             ; ***************************************************************************************
   29 D1:B5A2             
   30 D1:B5A2             SYSTerminate:
   31 D1:B5A2             	ret
   32 D1:B5A2             
   33 D1:B5A2             ; ***************************************************************************************
   34 D1:B5A2             ;
   35 D1:B5A2             ;								Print A character
   36 D1:B5A2             ;
   37 D1:B5A2             ; ***************************************************************************************
   38 D1:B5A2             
   39 D1:B5A2             SYSPrintChar:
   40 D1:B5A2             	ret		
   41 D1:B5A2             
   42 D1:B5A2             ; ***************************************************************************************
   43 D1:B5A2             ;
   44 D1:B5A2             ;									Print Newline
   45 D1:B5A2             ;
   46 D1:B5A2             ; ***************************************************************************************
   47 D1:B5A2             
   48 D1:B5A2             SYSPrintCRLF:
   49 D1:B5A2             	ret
   50 D1:B5A2             
   51 D1:B5A2             ; ***************************************************************************************
   52 D1:B5A2             ;
   53 D1:B5A2             ;									Get time into HL'HL
   54 D1:B5A2             ;
   55 D1:B5A2             ; ***************************************************************************************
   56 D1:B5A2             
   57 D1:B5A2             SYSGetTimer:
   58 D1:B5A2             	ret
   59 D1:B5A2             
   60 D1:B5A2             #endif
   61 D1:B5A2 -  -  -  -  
   62 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   63 D1:B5A2 -  -  -  -  ;
   64 D1:B5A2 -  -  -  -  ;									Changes and Updates
   65 D1:B5A2 -  -  -  -  ;
   66 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   67 D1:B5A2 -  -  -  -  ;
   68 D1:B5A2 -  -  -  -  ;		Date			Notes
   69 D1:B5A2 -  -  -  -  ;		==== 			=====
   70 D1:B5A2 -  -  -  -  ;
   71 D1:B5A2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B5A2 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B5A2 -  -  -  -  ; ***************************************************************************************
    2 D1:B5A2 -  -  -  -  ; ***************************************************************************************
    3 D1:B5A2 -  -  -  -  ;
    4 D1:B5A2 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B5A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5A2 -  -  -  -  ;		Reviewed :	No
    8 D1:B5A2 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B5A2 -  -  -  -  ;
   10 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   11 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   12 D1:B5A2 -  -  -  -  
   13 D1:B5A2 -  -  -  -  #ifdef TI84
   14 D1:B5A2 -  -  -  -  
   15 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   16 D1:B5A2 -  -  -  -  ;
   17 D1:B5A2 -  -  -  -  ;								Initialise system stuff
   18 D1:B5A2 -  -  -  -  ;
   19 D1:B5A2 -  -  -  -  ; ***************************************************************************************
   20 D1:B5A2 -  -  -  -  
   21 D1:B5A2 -  -  -  -  SYSInitialise:
   22 D1:B5A2 F3 -  -  -  	di
   23 D1:B5A3 ED 73 C0 B5 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B5A8 FD 22 C4 B5 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B5AD C9 -  -  -  	ret
   26 D1:B5AE -  -  -  -  
   27 D1:B5AE -  -  -  -  ; ***************************************************************************************
   28 D1:B5AE -  -  -  -  ;
   29 D1:B5AE -  -  -  -  ;								Terminate system stuff
   30 D1:B5AE -  -  -  -  ;
   31 D1:B5AE -  -  -  -  ; ***************************************************************************************
   32 D1:B5AE -  -  -  -  
   33 D1:B5AE -  -  -  -  SYSTerminate:
   34 D1:B5AE ED 7B C0 B5 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B5B3 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B5B5 FD 2A C4 B5 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B5BA FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B5BE FB -  -  -  	ei
   39 D1:B5BF C9 -  -  -  	ret 										; and exit.
   40 D1:B5C0 -  -  -  -  
   41 D1:B5C0 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B5C0 00 00 00 00 	.dw 	0,0
   43 D1:B5C4 -  -  -  -  _IYTemp84:
   44 D1:B5C4 00 00 00 00 	.dw 	0,0		
   45 D1:B5C8 -  -  -  -  
   46 D1:B5C8 -  -  -  -  ; ***************************************************************************************
   47 D1:B5C8 -  -  -  -  ;
   48 D1:B5C8 -  -  -  -  ;								Print A character
   49 D1:B5C8 -  -  -  -  ;
   50 D1:B5C8 -  -  -  -  ; ***************************************************************************************
   51 D1:B5C8 -  -  -  -  
   52 D1:B5C8 -  -  -  -  SYSPrintChar:
   53 D1:B5C8 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B5C9 C5 -  -  -  	push 	bc
   55 D1:B5CA D5 -  -  -  	push 	de
   56 D1:B5CB E5 -  -  -  	push 	hl
   57 D1:B5CC DD E5 -  -  	push 	ix
   58 D1:B5CE FD E5 -  -  	push 	iy
   59 D1:B5D0 D9 -  -  -  	exx
   60 D1:B5D1 C5 -  -  -  	push 	bc
   61 D1:B5D2 D5 -  -  -  	push 	de
   62 D1:B5D3 E5 -  -  -  	push 	hl
   63 D1:B5D4 -  -  -  -  
   64 D1:B5D4 FD 2A C4 B5 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B5D9 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B5DD F3 -  -  -  	di
   67 D1:B5DE FD 22 C4 B5 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B5E3 -  -  -  -  
   69 D1:B5E3 E1 -  -  -  	pop 	hl
   70 D1:B5E4 D1 -  -  -  	pop 	de
   71 D1:B5E5 C1 -  -  -  	pop 	bc
   72 D1:B5E6 D9 -  -  -  	exx
   73 D1:B5E7 FD E1 -  -  	pop 	iy
   74 D1:B5E9 DD E1 -  -  	pop 	ix
   75 D1:B5EB E1 -  -  -  	pop 	hl
   76 D1:B5EC D1 -  -  -  	pop 	de
   77 D1:B5ED C1 -  -  -  	pop 	bc
   78 D1:B5EE F1 -  -  -  	pop 	af
   79 D1:B5EF C9 -  -  -  	ret		
   80 D1:B5F0 -  -  -  -  
   81 D1:B5F0 -  -  -  -  ; ***************************************************************************************
   82 D1:B5F0 -  -  -  -  ;
   83 D1:B5F0 -  -  -  -  ;									Print Newline
   84 D1:B5F0 -  -  -  -  ;
   85 D1:B5F0 -  -  -  -  ; ***************************************************************************************
   86 D1:B5F0 -  -  -  -  
   87 D1:B5F0 -  -  -  -  SYSPrintCRLF:
   88 D1:B5F0 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B5F1 C5 -  -  -  	push 	bc
   90 D1:B5F2 D5 -  -  -  	push 	de
   91 D1:B5F3 E5 -  -  -  	push 	hl
   92 D1:B5F4 DD E5 -  -  	push 	ix
   93 D1:B5F6 FD E5 -  -  	push 	iy
   94 D1:B5F8 D9 -  -  -  	exx
   95 D1:B5F9 C5 -  -  -  	push 	bc
   96 D1:B5FA D5 -  -  -  	push 	de
   97 D1:B5FB E5 -  -  -  	push 	hl
   98 D1:B5FC -  -  -  -  
   99 D1:B5FC FD 2A C4 B5 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B601 CD F0 07 02 	call 	_newline
  101 D1:B605 F3 -  -  -  	di
  102 D1:B606 FD 22 C4 B5 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B60B -  -  -  -  
  104 D1:B60B E1 -  -  -  	pop 	hl
  105 D1:B60C D1 -  -  -  	pop 	de
  106 D1:B60D C1 -  -  -  	pop 	bc
  107 D1:B60E D9 -  -  -  	exx
  108 D1:B60F FD E1 -  -  	pop 	iy
  109 D1:B611 DD E1 -  -  	pop 	ix
  110 D1:B613 E1 -  -  -  	pop 	hl
  111 D1:B614 D1 -  -  -  	pop 	de
  112 D1:B615 C1 -  -  -  	pop 	bc
  113 D1:B616 F1 -  -  -  	pop 	af
  114 D1:B617 C9 -  -  -  	ret
  115 D1:B618 -  -  -  -  
  116 D1:B618 -  -  -  -  ; ***************************************************************************************
  117 D1:B618 -  -  -  -  ;
  118 D1:B618 -  -  -  -  ;									Get time into HL'HL
  119 D1:B618 -  -  -  -  ;
  120 D1:B618 -  -  -  -  ; ***************************************************************************************
  121 D1:B618 -  -  -  -  
  122 D1:B618 -  -  -  -  SYSGetTimer:
  123 D1:B618 21 34 12 00 	ld 		hl,$1234
  124 D1:B61C D9 -  -  -  	exx
  125 D1:B61D 21 78 56 00 	ld 		hl,$5678
  126 D1:B621 D9 -  -  -  	exx
  127 D1:B622 C9 -  -  -  	ret
  128 D1:B623 -  -  -  -  
  129 D1:B623 -  -  -  -  #endif
  130 D1:B623 -  -  -  -  
  131 D1:B623 -  -  -  -  ; ***************************************************************************************
  132 D1:B623 -  -  -  -  ;
  133 D1:B623 -  -  -  -  ;									Changes and Updates
  134 D1:B623 -  -  -  -  ;
  135 D1:B623 -  -  -  -  ; ***************************************************************************************
  136 D1:B623 -  -  -  -  ;
  137 D1:B623 -  -  -  -  ;		Date			Notes
  138 D1:B623 -  -  -  -  ;		==== 			=====
  139 D1:B623 -  -  -  -  ;
  140 D1:B623 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B623 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B623 -  -  -  -  ; ***************************************************************************************
    2 D1:B623 -  -  -  -  ; ***************************************************************************************
    3 D1:B623 -  -  -  -  ;
    4 D1:B623 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B623 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B623 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B623 -  -  -  -  ;		Reviewed :	No
    8 D1:B623 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B623 -  -  -  -  ;
   10 D1:B623 -  -  -  -  ; ***************************************************************************************
   11 D1:B623 -  -  -  -  ; ***************************************************************************************
   12 D1:B623 -  -  -  -  
   13 D1:B623 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 31 
              36 30 39 38 
              0D 80 10 03 
              00 C2 9A 95 
              41 54 77 7E 
              5C 63 A3 8F 
              41 80 13 04 
              00 C2 83 95 
              9F 89 52 A3 
              8F 94 41 50 
              53 74 79 4D 
              80 21 05 00 
              C2 96 95 9F 
              89 4E A3 8F 
              3F 12 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 06 
              00 C2 99 95 
              8A 57 49 5A 
              76 5C A3 8F 
              57 49 5A 76 
              5C 80 14 07 
              00 C2 9E 95 
              58 4B 5E 78 
              4D A3 8F 43 
              67 74 61 47 
              72 80 13 08 
              00 C2 83 95 
              9F 89 52 A3 
              8F 94 41 50 
              53 74 79 4D 
              80 13 09 00 
              C2 94 41 78 
              62 5A 70 5E 
              8F 41 78 62 
              5A 70 5E 80 
              13 0A 00 C2 
              83 95 9F 89 
              46 A3 8F 94 
              41 44 50 74 
              49 41 80 10 
              0B 00 C2 9D 
              95 3F 02 79 
              66 0D A3 8F 
              41 79 80 13 
              0C 00 C2 83 
              95 9F 89 54 
              A3 8F 94 41 
              52 54 55 41 
              4F 80 10 0D 
              00 C2 9C 96 
              95 41 54 A3 
              8F 3F 01 54 
              0D 80 12 0E 
              00 C2 9D 95 
              3F 04 64 67 
              6C 4C 0D A3 
              8F 41 64 80 
              14 0F 00 C2 
              9E 95 43 4A 
              71 6C 73 78 
              A3 8F 75 4E 
              53 4C 47 80 
              1E 10 00 C2 
              A2 95 3F 0B 
              2D 31 39 37 
              34 33 35 35 
              33 37 30 0D 
              A3 8F 8A 41 
              75 6B 64 56 
              6A 80 13 11 
              00 C2 83 95 
              9F 89 50 A3 
              8F 94 41 4E 
              53 54 71 4B 
              80 13 12 00 
              C2 99 95 55 
              47 55 75 7E 
              A3 8F 55 47 
              55 75 7E 80 
              0E 13 00 C2 
              84 95 9F 89 
              54 A3 8F 41 
              4F 80 12 14 
              00 C2 98 95 
              3F 05 52 44 
              4E 62 6B 0D 
              A3 8F 45 80 
              15 15 00 C2 
              98 95 3F 08 
              6B 41 78 4E 
              49 6C 6C 4F 
              0D A3 8F 48 
              80 1A 16 00 
              C2 A2 95 3F 
              09 31 32 39 
              38 31 39 39 
              39 33 0D A3 
              8F 47 6F 4E 
              55 59 80 13 
              17 00 C2 83 
              95 9F 89 52 
              A3 8F 94 41 
              50 53 74 79 
              4D 80 10 18 
              00 C2 9C 96 
              95 41 5A A3 
              8F 3F 01 5A 
              0D 80 10 19 
              00 C2 9C 96 
              95 41 49 A3 
              8F 3F 01 49 
              0D 80 14 1A 
              00 C2 9D 95 
              3F 06 62 79 
              77 73 47 68 
              0D A3 8F 41 
              62 80 1C 1B 
              00 C2 A2 95 
              3F 0A 31 33 
              38 35 30 38 
              34 35 35 31 
              0D A3 8F 41 
              52 63 6B 5A 
              47 80 13 1C 
              00 C2 99 95 
              7C 54 65 77 
              58 A3 8F 7C 
              54 65 77 58 
              80 15 1D 00 
              C2 9E 95 41 
              73 66 58 49 
              7B A3 8F 42 
              4C 59 67 76 
              44 80 0D 1E 
              00 C2 9D 95 
              3F 00 0D A3 
              8F 4D 80 11 
              1F 00 C2 9D 
              95 3F 03 4C 
              64 4B 0D A3 
              8F 41 4C 80 
              10 20 00 C2 
              98 95 3F 03 
              41 71 7A 0D 
              A3 8F 43 80 
              10 21 00 C2 
              9C 96 95 41 
              47 A3 8F 3F 
              01 47 0D 80 
              12 22 00 C2 
              8A 8A 67 60 
              77 7D 75 8F 
              67 60 77 7D 
              75 80 12 23 
              00 C2 98 95 
              3F 05 69 73 
              65 73 72 0D 
              A3 8F 45 80 
              13 24 00 C2 
              83 95 9F 89 
              4C A3 8F 94 
              41 4A 52 54 
              61 47 80 12 
              25 00 C2 9A 
              95 8A 41 40 
              58 74 73 7C 
              A3 8F 8A 41 
              80 1A 26 00 
              C2 A2 95 3F 
              09 35 35 32 
              37 32 37 34 
              39 35 0D A3 
              8F 60 7C 5F 
              4F 47 80 16 
              27 00 C2 9D 
              95 3F 08 48 
              57 6A 51 78 
              4F 73 66 0D 
              A3 8F 41 48 
              80 13 28 00 
              C2 94 42 6E 
              45 6C 5A 5B 
              8F 42 6E 45 
              6C 5A 5B 80 
              0F 29 00 C2 
              9D 95 3F 01 
              65 0D A3 8F 
              41 65 80 13 
              2A 00 C2 94 
              42 65 7C 5A 
              5B 51 8F 42 
              65 7C 5A 5B 
              51 80 1D 2B 
              00 C2 9B 96 
              95 41 43 4A 
              7E 77 69 A3 
              8F 3F 0A 31 
              31 32 36 39 
              35 32 34 32 
              35 0D 80 14 
              2C 00 C2 8A 
              8A 41 54 5B 
              55 49 69 8F 
              41 54 5B 55 
              49 69 80 13 
              2D 00 C2 94 
              43 45 6E 5E 
              47 4D 8F 43 
              45 6E 5E 47 
              4D 80 1D 2E 
              00 C2 9B 96 
              95 41 64 64 
              65 41 55 A3 
              8F 3F 0A 31 
              36 38 37 33 
              31 30 34 32 
              31 0D 80 13 
              2F 00 C2 83 
              95 9F 89 52 
              A3 8F 94 41 
              50 53 74 79 
              4D 80 1E 30 
              00 C2 A2 95 
              3F 0B 2D 31 
              35 33 31 31 
              34 36 38 38 
              38 0D A3 8F 
              8A 41 5B 50 
              77 4A 48 80 
              11 31 00 C2 
              9A 95 8A 52 
              6F 63 5D 59 
              A3 8F 8A 41 
              80 1D 32 00 
              C2 9B 96 95 
              8A 54 73 5C 
              43 4B A3 8F 
              3F 0A 2D 33 
              34 39 30 32 
              38 35 35 35 
              0D 80 11 33 
              00 C2 98 95 
              3F 04 59 6B 
              50 59 0D A3 
              8F 44 80 13 
              34 00 C2 83 
              95 9F 89 46 
              A3 8F 94 41 
              44 50 74 49 
              41 80 0E 35 
              00 C2 98 95 
              3F 01 4E 0D 
              A3 8F 41 80 
              14 36 00 C2 
              9E 95 67 51 
              5B 66 7D A3 
              8F 43 58 6E 
              64 59 42 80 
              1D 37 00 C2 
              9B 96 95 41 
              77 4F 6A 58 
              5E A3 8F 3F 
              0A 32 30 30 
              30 35 39 34 
              34 36 32 0D 
              80 14 38 00 
              C2 99 95 8A 
              5C 6A 56 7C 
              71 A3 8F 5C 
              6A 56 7C 71 
              80 24 39 00 
              C2 96 95 9F 
              89 4B A3 8F 
              3F 15 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 1C 3A 00 
              C2 A2 95 3F 
              0A 31 33 35 
              34 38 36 33 
              34 36 34 0D 
              A3 8F 41 50 
              70 59 4D 68 
              80 0E 3B 00 
              C2 84 95 9F 
              89 4C A3 8F 
              41 47 80 14 
              3C 00 C2 98 
              95 3F 07 68 
              67 62 4F 65 
              7A 71 0D A3 
              8F 47 80 1D 
              3D 00 C2 9B 
              96 95 8A 68 
              5D 60 4C 43 
              A3 8F 3F 0A 
              2D 36 37 38 
              38 32 32 36 
              35 39 0D 80 
              10 3E 00 C2 
              9D 95 3F 02 
              47 62 0D A3 
              8F 41 47 80 
              10 3F 00 C2 
              9C 96 95 41 
              54 A3 8F 3F 
              01 54 0D 80 
              1D 40 00 C2 
              9B 96 95 41 
              7B 70 52 45 
              59 A3 8F 3F 
              0A 32 30 37 
              36 32 35 34 
              35 35 33 0D 
              80 1C 41 00 
              C2 A2 95 3F 
              0A 2D 32 32 
              33 31 32 37 
              32 35 30 0D 
              A3 8F 8A 4D 
              53 4A 5B 52 
              80 10 42 00 
              C2 9C 96 95 
              41 49 A3 8F 
              3F 01 49 0D 
              80 10 43 00 
              C2 9D 95 3F 
              02 76 64 0D 
              A3 8F 41 76 
              80 10 44 00 
              C2 9A 95 41 
              72 6E 57 4A 
              65 A3 8F 41 
              80 13 45 00 
              C2 83 95 9F 
              89 48 A3 8F 
              94 41 46 51 
              54 51 43 80 
              1D 46 00 C2 
              9B 96 95 41 
              48 63 63 5D 
              50 A3 8F 3F 
              0A 31 32 31 
              37 32 37 39 
              38 32 34 0D 
              80 0E 47 00 
              C2 84 95 9F 
              89 48 A3 8F 
              41 43 80 15 
              48 00 C2 99 
              95 41 4C 5A 
              6D 5A 5C A3 
              8F 41 4C 5A 
              6D 5A 5C 80 
              14 49 00 C2 
              98 95 3F 07 
              45 5A 42 56 
              42 53 46 0D 
              A3 8F 47 80 
              10 4A 00 C2 
              9C 96 95 41 
              4C A3 8F 3F 
              01 4C 0D 80 
              10 4B 00 C2 
              9C 96 95 41 
              4A A3 8F 3F 
              01 4A 0D 80 
              13 4C 00 C2 
              83 95 9F 89 
              4A A3 8F 94 
              41 48 51 74 
              59 45 80 0E 
              4D 00 C2 84 
              95 9F 89 4C 
              A3 8F 41 47 
              80 12 4E 00 
              C2 9D 95 3F 
              04 46 79 4B 
              4E 0D A3 8F 
              41 46 80 0E 
              4F 00 C2 84 
              95 9F 89 48 
              A3 8F 41 43 
              80 10 50 00 
              C2 98 95 3F 
              03 6D 44 72 
              0D A3 8F 43 
              80 11 51 00 
              C2 9A 95 8A 
              7B 69 79 58 
              44 A3 8F 8A 
              41 80 16 52 
              00 C2 99 95 
              8A 41 5B 71 
              43 7E 7E A3 
              8F 41 5B 71 
              43 7E 7E 80 
              13 53 00 C2 
              83 95 9F 89 
              4F A3 8F 94 
              41 4D 53 44 
              6D 4A 80 1D 
              54 00 C2 9B 
              96 95 41 45 
              5F 4F 64 54 
              A3 8F 3F 0A 
              31 31 36 35 
              38 31 38 31 
              33 32 0D 80 
              23 55 00 C2 
              96 95 9F 89 
              4C A3 8F 3F 
              14 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 15 
              56 00 C2 99 
              95 41 61 54 
              55 6C 56 A3 
              8F 41 61 54 
              55 6C 56 80 
              12 57 00 C2 
              8A 8A 52 6A 
              53 4C 40 8F 
              52 6A 53 4C 
              40 80 11 58 
              00 C2 94 52 
              45 45 47 70 
              8F 52 45 45 
              47 70 80 13 
              59 00 C2 83 
              95 9F 89 4D 
              A3 8F 94 41 
              4B 52 64 65 
              48 80 15 5A 
              00 C2 9D 95 
              3F 07 5A 56 
              47 4B 56 48 
              73 0D A3 8F 
              41 5A 80 0F 
              5B 00 C2 9A 
              95 6E 41 45 
              72 63 A3 8F 
              41 80 13 5C 
              00 C2 83 95 
              9F 89 47 A3 
              8F 94 41 45 
              51 44 4D 42 
              80 15 5D 00 
              C2 9E 95 41 
              7E 45 44 5B 
              57 A3 8F 42 
              41 7A 7B 64 
              68 80 13 5E 
              00 C2 83 95 
              9F 89 4B A3 
              8F 94 41 49 
              52 44 5D 46 
              80 1D 5F 00 
              C2 9B 96 95 
              41 4E 40 7D 
              6E 49 A3 8F 
              3F 0A 31 33 
              30 38 38 37 
              35 36 35 37 
              0D 80 0E 60 
              00 C2 84 95 
              9F 89 54 A3 
              8F 41 4F 80 
              0F 61 00 C2 
              9D 95 3F 01 
              6A 0D A3 8F 
              41 6A 80 15 
              62 00 C2 9E 
              95 42 4C 4B 
              73 5B 6E A3 
              8F 41 73 74 
              4C 64 51 80 
              0E 63 00 C2 
              84 95 9F 89 
              4F A3 8F 41 
              4A 80 20 64 
              00 C2 96 95 
              9F 89 4F A3 
              8F 3F 11 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 0E 65 
              00 C2 84 95 
              9F 89 46 A3 
              8F 41 41 80 
              1D 66 00 C2 
              9B 96 95 8A 
              63 59 6F 6B 
              43 A3 8F 3F 
              0A 2D 35 39 
              33 39 35 31 
              34 32 37 0D 
              80 0E 67 00 
              C2 98 95 3F 
              01 6E 0D A3 
              8F 41 80 1D 
              68 00 C2 A2 
              95 3F 0B 2D 
              31 30 36 38 
              34 34 32 37 
              39 30 0D A3 
              8F 8A 7F 6B 
              72 52 66 80 
              0E 69 00 C2 
              84 95 9F 89 
              47 A3 8F 41 
              42 80 10 6A 
              00 C2 9D 95 
              3F 02 6C 6B 
              0D A3 8F 41 
              6C 80 16 6B 
              00 C2 99 95 
              8A 41 7B 5F 
              53 5A 59 A3 
              8F 41 7B 5F 
              53 5A 59 80 
              1B 6C 00 C2 
              9B 96 95 6B 
              68 7F 5C 59 
              A3 8F 3F 09 
              37 33 32 31 
              36 35 39 31 
              33 0D 80 12 
              6D 00 C2 8A 
              8A 4D 54 78 
              5A 6E 8F 4D 
              54 78 5A 6E 
              80 12 6E 00 
              C2 98 95 3F 
              05 71 66 74 
              6F 67 0D A3 
              8F 45 80 0E 
              6F 00 C2 98 
              95 3F 01 47 
              0D A3 8F 41 
              80 1A 70 00 
              C2 A2 95 3F 
              09 34 30 35 
              36 33 35 39 
              32 36 0D A3 
              8F 58 4B 58 
              4D 56 80 12 
              71 00 C2 9D 
              95 3F 04 4F 
              69 55 4A 0D 
              A3 8F 41 4F 
              80 14 72 00 
              C2 8A 8A 41 
              73 50 5F 70 
              71 8F 41 73 
              50 5F 70 71 
              80 14 73 00 
              C2 9E 95 43 
              4B 5E 51 5A 
              4E A3 8F 74 
              61 6E 65 71 
              80 10 74 00 
              C2 9C 96 95 
              41 57 A3 8F 
              3F 01 57 0D 
              80 1A 75 00 
              C2 9B 96 95 
              45 73 40 55 
              7F A3 8F 3F 
              08 39 37 32 
              35 36 38 33 
              31 0D 80 13 
              76 00 C2 83 
              95 9F 89 4F 
              A3 8F 94 41 
              4D 53 44 6D 
              4A 80 13 77 
              00 C2 83 95 
              9F 89 52 A3 
              8F 94 41 50 
              53 74 79 4D 
              80 13 78 00 
              C2 94 43 7C 
              4E 4E 45 73 
              8F 43 7C 4E 
              4E 45 73 80 
              15 79 00 C2 
              9E 95 41 51 
              63 4B 57 7A 
              A3 8F 42 6E 
              5C 74 68 45 
              80 10 7A 00 
              C2 9C 96 95 
              41 52 A3 8F 
              3F 01 52 0D 
              80 26 7B 00 
              C2 96 95 9F 
              89 49 A3 8F 
              3F 17 44 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 0E 
              7C 00 C2 84 
              95 9F 89 4D 
              A3 8F 41 48 
              80 1F 7D 00 
              C2 96 95 9F 
              89 50 A3 8F 
              3F 10 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              1D 7E 00 C2 
              9B 96 95 41 
              65 69 5A 7A 
              44 A3 8F 3F 
              0A 31 37 30 
              35 33 35 36 
              39 33 32 0D 
              80 16 7F 00 
              C2 99 95 8A 
              41 46 71 4E 
              4E 76 A3 8F 
              41 46 71 4E 
              4E 76 80 10 
              80 00 C2 8A 
              57 51 6A 66 
              8F 8A 57 51 
              6A 66 80 12 
              81 00 C2 8A 
              6E 45 71 7D 
              53 8F 8A 6E 
              45 71 7D 53 
              80 1C 82 00 
              C2 A2 95 3F 
              0A 2D 33 37 
              32 35 31 36 
              38 34 31 0D 
              A3 8F 8A 56 
              4D 42 5F 69 
              80 0D 83 00 
              C2 9D 95 3F 
              00 0D A3 8F 
              4D 80 1D 84 
              00 C2 9B 96 
              95 41 78 5E 
              54 70 6D A3 
              8F 3F 0A 32 
              30 32 31 32 
              31 35 32 37 
              37 0D 80 14 
              85 00 C2 9E 
              95 43 61 46 
              55 45 61 A3 
              8F 5E 79 6A 
              7A 5E 80 14 
              86 00 C2 8A 
              41 65 66 62 
              60 56 8F 8A 
              41 65 66 62 
              60 56 80 12 
              87 00 C2 8A 
              56 4B 70 43 
              7E 8F 8A 56 
              4B 70 43 7E 
              80 11 88 00 
              C2 98 95 3F 
              04 63 75 42 
              6A 0D A3 8F 
              44 80 15 89 
              00 C2 9E 95 
              41 56 41 64 
              56 51 A3 8F 
              42 69 7E 5B 
              69 6E 80 25 
              8A 00 C2 96 
              95 9F 89 4A 
              A3 8F 3F 16 
              45 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              12 8B 00 C2 
              8A 8A 63 7A 
              49 4A 56 8F 
              63 7A 49 4A 
              56 80 10 8C 
              00 C2 9A 95 
              41 54 5A 45 
              67 52 A3 8F 
              41 80 11 8D 
              00 C2 9A 95 
              8A 42 7C 49 
              72 7A A3 8F 
              8A 41 80 10 
              8E 00 C2 9D 
              95 3F 02 7A 
              46 0D A3 8F 
              41 7A 80 14 
              8F 00 C2 9E 
              95 5F 64 41 
              7D 66 A3 8F 
              43 60 5B 7E 
              42 59 80 13 
              90 00 C2 94 
              41 54 78 47 
              40 6D 8F 41 
              54 78 47 40 
              6D 80 13 91 
              00 C2 83 95 
              9F 89 48 A3 
              8F 94 41 46 
              51 54 51 43 
              80 10 92 00 
              C2 9C 96 95 
              41 41 A3 8F 
              3F 01 41 0D 
              80 1C 93 00 
              C2 A2 95 3F 
              0A 31 33 33 
              36 39 38 37 
              38 31 34 0D 
              A3 8F 41 4F 
              6C 4D 42 66 
              80 11 94 00 
              C2 9D 95 3F 
              03 43 53 6C 
              0D A3 8F 41 
              43 80 16 95 
              00 C2 99 95 
              8A 41 6E 77 
              7B 62 67 A3 
              8F 41 6E 77 
              7B 62 67 80 
              1C 96 00 C2 
              96 95 9F 89 
              53 A3 8F 3F 
              0D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              14 97 00 C2 
              9E 95 43 72 
              47 61 6C 76 
              A3 8F 4D 78 
              5E 53 49 80 
              15 98 00 C2 
              9E 95 41 4C 
              6D 6F 5F 7C 
              A3 8F 42 73 
              52 50 60 43 
              80 1A 99 00 
              C2 A2 95 3F 
              09 34 36 31 
              38 37 32 35 
              33 30 0D A3 
              8F 5B 61 79 
              76 52 80 14 
              9A 00 C2 8A 
              41 65 6B 7E 
              51 4F 8F 8A 
              41 65 6B 7E 
              51 4F 80 13 
              9B 00 C2 83 
              95 9F 89 51 
              A3 8F 94 41 
              4F 53 64 75 
              4C 80 16 9C 
              00 C2 99 95 
              8A 41 66 70 
              49 52 46 A3 
              8F 41 66 70 
              49 52 46 80 
              1B 9D 00 C2 
              9B 96 95 5D 
              4C 54 46 5D 
              A3 8F 3F 09 
              34 38 39 37 
              36 37 33 32 
              35 0D 80 1C 
              9E 00 C2 A2 
              95 3F 0A 31 
              36 38 39 37 
              31 34 33 39 
              36 0D A3 8F 
              41 64 6D 6F 
              7B 5C 80 16 
              9F 00 C2 99 
              95 8A 41 6F 
              46 41 52 41 
              A3 8F 41 6F 
              46 41 52 41 
              80 22 A0 00 
              C2 96 95 9F 
              89 4D A3 8F 
              3F 13 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 0F 
              A1 00 C2 9D 
              95 3F 01 66 
              0D A3 8F 41 
              66 80 13 A2 
              00 C2 83 95 
              9F 89 47 A3 
              8F 94 41 45 
              51 44 4D 42 
              80 1D A3 00 
              C2 9B 96 95 
              41 75 67 53 
              70 64 A3 8F 
              3F 0A 31 39 
              37 33 32 33 
              38 38 32 30 
              0D 80 12 A4 
              00 C2 8A 55 
              56 70 6B 42 
              8F 8A 55 56 
              70 6B 42 80 
              1D A5 00 C2 
              9B 96 95 41 
              51 4C 66 5E 
              47 A3 8F 3F 
              0A 31 33 36 
              32 32 35 37 
              37 39 39 0D 
              80 16 A6 00 
              C2 99 95 8A 
              41 45 42 68 
              7D 78 A3 8F 
              41 45 42 68 
              7D 78 80 13 
              A7 00 C2 9D 
              95 3F 05 44 
              52 55 7A 63 
              0D A3 8F 41 
              44 80 10 A8 
              00 C2 9A 95 
              41 4D 72 41 
              5D 43 A3 8F 
              41 80 0E A9 
              00 C2 84 95 
              9F 89 51 A3 
              8F 41 4C 80 
              24 AA 00 C2 
              96 95 9F 89 
              4B A3 8F 3F 
              15 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              0E AB 00 C2 
              84 95 9F 89 
              4E A3 8F 41 
              49 80 0E AC 
              00 C2 84 95 
              9F 89 4C A3 
              8F 41 47 80 
              14 AD 00 C2 
              8A 8A 41 43 
              50 79 6E 51 
              8F 41 43 50 
              79 6E 51 80 
              1D AE 00 C2 
              9B 96 95 41 
              7F 40 69 53 
              43 A3 8F 3F 
              0A 32 31 33 
              30 38 37 35 
              35 38 37 0D 
              80 14 AF 00 
              C2 9E 95 5B 
              51 7E 7C 7E 
              A3 8F 43 64 
              6E 41 43 41 
              80 1A B0 00 
              C2 A2 95 3F 
              09 39 37 39 
              31 36 34 38 
              39 34 0D A3 
              8F 7A 57 4D 
              7B 5E 80 13 
              B1 00 C2 99 
              95 56 44 47 
              41 7F A3 8F 
              56 44 47 41 
              7F 80 0E B2 
              00 C2 84 95 
              9F 89 4B A3 
              8F 41 46 80 
              13 B3 00 C2 
              83 95 9F 89 
              53 A3 8F 94 
              41 51 54 44 
              7D 4E 80 12 
              B4 00 C2 8A 
              76 52 6C 59 
              57 8F 8A 76 
              52 6C 59 57 
              80 13 B5 00 
              C2 99 95 51 
              47 5E 68 5B 
              A3 8F 51 47 
              5E 68 5B 80 
              13 B6 00 C2 
              98 95 3F 06 
              50 71 77 79 
              41 4E 0D A3 
              8F 46 80 1B 
              B7 00 C2 96 
              95 9F 89 54 
              A3 8F 3F 0C 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 1F B8 
              00 C2 96 95 
              9F 89 50 A3 
              8F 3F 10 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 1E B9 00 
              C2 A2 95 3F 
              0B 2D 31 34 
              38 30 38 35 
              35 34 38 36 
              0D A3 8F 8A 
              41 58 51 40 
              7E 7E 80 0E 
              BA 00 C2 84 
              95 9F 89 46 
              A3 8F 41 41 
              80 10 BB 00 
              C2 9C 96 95 
              41 4E A3 8F 
              3F 01 4E 0D 
              80 1A BC 00 
              C2 A2 95 3F 
              09 39 30 36 
              34 37 39 30 
              34 34 0D A3 
              8F 76 41 7C 
              57 44 80 12 
              BD 00 C2 8A 
              58 6F 65 66 
              41 8F 8A 58 
              6F 65 66 41 
              80 10 BE 00 
              C2 98 95 3F 
              03 79 62 67 
              0D A3 8F 43 
              80 13 BF 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              10 C0 00 C2 
              9C 96 95 41 
              56 A3 8F 3F 
              01 56 0D 80 
              0E C1 00 C2 
              98 95 3F 01 
              73 0D A3 8F 
              41 80 22 C2 
              00 C2 96 95 
              9F 89 4D A3 
              8F 3F 13 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              0E C3 00 C2 
              84 95 9F 89 
              4D A3 8F 41 
              48 80 25 C4 
              00 C2 96 95 
              9F 89 4A A3 
              8F 3F 16 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 0E 
              C5 00 C2 84 
              95 9F 89 4F 
              A3 8F 41 4A 
              80 14 C6 00 
              C2 9E 95 43 
              75 6A 43 59 
              4D A3 8F 4A 
              55 7C 66 72 
              80 10 C7 00 
              C2 9C 96 95 
              41 59 A3 8F 
              3F 01 59 0D 
              80 16 C8 00 
              C2 9D 95 3F 
              08 53 47 49 
              62 46 56 72 
              67 0D A3 8F 
              41 53 80 1E 
              C9 00 C2 A2 
              95 3F 0B 2D 
              32 30 32 39 
              35 37 31 39 
              30 30 0D A3 
              8F 8A 41 78 
              7E 4C 7C 7C 
              80 0D CA 00 
              C2 98 95 3F 
              00 0D A3 8F 
              40 80 15 CB 
              00 B9 3F 0D 
              4F 6B 20 53 
              65 65 64 20 
              31 36 30 39 
              38 0D 80 00 	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$31,$36,$30,$39,$38,$0d,$80,$10,$03,$00,$c2,$9a,$95,$41,$54,$77,$7e,$5c,$63,$a3,$8f,$41,$80,$13,$04,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$21,$05,$00,$c2,$96,$95,$9f,$89,$4e,$a3,$8f,$3f,$12,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$06,$00,$c2,$99,$95,$8a,$57,$49,$5a,$76,$5c,$a3,$8f,$57,$49,$5a,$76,$5c,$80,$14,$07,$00,$c2,$9e,$95,$58,$4b,$5e,$78,$4d,$a3,$8f,$43,$67,$74,$61,$47,$72,$80,$13,$08,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$13,$09,$00,$c2,$94,$41,$78,$62,$5a,$70,$5e,$8f,$41,$78,$62,$5a,$70,$5e,$80,$13,$0a,$00,$c2,$83,$95,$9f,$89,$46,$a3,$8f,$94,$41,$44,$50,$74,$49,$41,$80,$10,$0b,$00,$c2,$9d,$95,$3f,$02,$79,$66,$0d,$a3,$8f,$41,$79,$80,$13,$0c,$00,$c2,$83,$95,$9f,$89,$54,$a3,$8f,$94,$41,$52,$54,$55,$41,$4f,$80,$10,$0d,$00,$c2,$9c,$96,$95,$41,$54,$a3,$8f,$3f,$01,$54,$0d,$80,$12,$0e,$00,$c2,$9d,$95,$3f,$04,$64,$67,$6c,$4c,$0d,$a3,$8f,$41,$64,$80,$14,$0f,$00,$c2,$9e,$95,$43,$4a,$71,$6c,$73,$78,$a3,$8f,$75,$4e,$53,$4c,$47,$80,$1e,$10,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$39,$37,$34,$33,$35,$35,$33,$37,$30,$0d,$a3,$8f,$8a,$41,$75,$6b,$64,$56,$6a,$80,$13,$11,$00,$c2,$83,$95,$9f,$89,$50,$a3,$8f,$94,$41,$4e,$53,$54,$71,$4b,$80,$13,$12,$00,$c2,$99,$95,$55,$47,$55,$75,$7e,$a3,$8f,$55,$47,$55,$75,$7e,$80,$0e,$13,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$12,$14,$00,$c2,$98,$95,$3f,$05,$52,$44,$4e,$62,$6b,$0d,$a3,$8f,$45,$80,$15,$15,$00,$c2,$98,$95,$3f,$08,$6b,$41,$78,$4e,$49,$6c,$6c,$4f,$0d,$a3,$8f,$48,$80,$1a,$16,$00,$c2,$a2,$95,$3f,$09,$31,$32,$39,$38,$31,$39,$39,$39,$33,$0d,$a3,$8f,$47,$6f,$4e,$55,$59,$80,$13,$17,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$10,$18,$00,$c2,$9c,$96,$95,$41,$5a,$a3,$8f,$3f,$01,$5a,$0d,$80,$10,$19,$00,$c2,$9c,$96,$95,$41,$49,$a3,$8f,$3f,$01,$49,$0d,$80,$14,$1a,$00,$c2,$9d,$95,$3f,$06,$62,$79,$77,$73,$47,$68,$0d,$a3,$8f,$41,$62,$80,$1c,$1b,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$38,$35,$30,$38,$34,$35,$35,$31,$0d,$a3,$8f,$41,$52,$63,$6b,$5a,$47,$80,$13,$1c,$00,$c2,$99,$95,$7c,$54,$65,$77,$58,$a3,$8f,$7c,$54,$65,$77,$58,$80,$15,$1d,$00,$c2,$9e,$95,$41,$73,$66,$58,$49,$7b,$a3,$8f,$42,$4c,$59,$67,$76,$44,$80,$0d,$1e,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$11,$1f,$00,$c2,$9d,$95,$3f,$03,$4c,$64,$4b,$0d,$a3,$8f,$41,$4c,$80,$10,$20,$00,$c2,$98,$95,$3f,$03,$41,$71,$7a,$0d,$a3,$8f,$43,$80,$10,$21,$00,$c2,$9c,$96,$95,$41,$47,$a3,$8f,$3f,$01,$47,$0d,$80,$12,$22,$00,$c2,$8a,$8a,$67,$60,$77,$7d,$75,$8f,$67,$60,$77,$7d,$75,$80,$12,$23,$00,$c2,$98,$95,$3f,$05,$69,$73,$65,$73,$72,$0d,$a3,$8f,$45,$80,$13,$24,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$12,$25,$00,$c2,$9a,$95,$8a,$41,$40,$58,$74,$73,$7c,$a3,$8f,$8a,$41,$80,$1a,$26,$00,$c2,$a2,$95,$3f,$09,$35,$35,$32,$37,$32,$37,$34,$39,$35,$0d,$a3,$8f,$60,$7c,$5f,$4f,$47,$80,$16,$27,$00,$c2,$9d,$95,$3f,$08,$48,$57,$6a,$51,$78,$4f,$73,$66,$0d,$a3,$8f,$41,$48,$80,$13,$28,$00,$c2,$94,$42,$6e,$45,$6c,$5a,$5b,$8f,$42,$6e,$45,$6c,$5a,$5b,$80,$0f,$29,$00,$c2,$9d,$95,$3f,$01,$65,$0d,$a3,$8f,$41,$65,$80,$13,$2a,$00,$c2,$94,$42,$65,$7c,$5a,$5b,$51,$8f,$42,$65,$7c,$5a,$5b,$51,$80,$1d,$2b,$00,$c2,$9b,$96,$95,$41,$43,$4a,$7e,$77,$69,$a3,$8f,$3f,$0a,$31,$31,$32,$36,$39,$35,$32,$34,$32,$35,$0d,$80,$14,$2c,$00,$c2,$8a,$8a,$41,$54,$5b,$55,$49,$69,$8f,$41,$54,$5b,$55,$49,$69,$80,$13,$2d,$00,$c2,$94,$43,$45,$6e,$5e,$47,$4d,$8f,$43,$45,$6e,$5e,$47,$4d,$80,$1d,$2e,$00,$c2,$9b,$96,$95,$41,$64,$64,$65,$41,$55,$a3,$8f,$3f,$0a,$31,$36,$38,$37,$33,$31,$30,$34,$32,$31,$0d,$80,$13,$2f,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$1e,$30,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$35,$33,$31,$31,$34,$36,$38,$38,$38,$0d,$a3,$8f,$8a,$41,$5b,$50,$77,$4a,$48,$80,$11,$31,$00,$c2,$9a,$95,$8a,$52,$6f,$63,$5d,$59,$a3,$8f,$8a,$41,$80,$1d,$32,$00,$c2,$9b,$96,$95,$8a,$54,$73,$5c,$43,$4b,$a3,$8f,$3f,$0a,$2d,$33,$34,$39,$30,$32,$38,$35,$35,$35,$0d,$80,$11,$33,$00,$c2,$98,$95,$3f,$04,$59,$6b,$50,$59,$0d,$a3,$8f,$44,$80,$13,$34,$00,$c2,$83,$95,$9f,$89,$46,$a3,$8f,$94,$41,$44,$50,$74,$49,$41,$80,$0e,$35,$00,$c2,$98,$95,$3f,$01,$4e,$0d,$a3,$8f,$41,$80,$14,$36,$00,$c2,$9e,$95,$67,$51,$5b,$66,$7d,$a3,$8f,$43,$58,$6e,$64,$59,$42,$80,$1d,$37,$00,$c2,$9b,$96,$95,$41,$77,$4f,$6a,$58,$5e,$a3,$8f,$3f,$0a,$32,$30,$30,$30,$35,$39,$34,$34,$36,$32,$0d,$80,$14,$38,$00,$c2,$99,$95,$8a,$5c,$6a,$56,$7c,$71,$a3,$8f,$5c,$6a,$56,$7c,$71,$80,$24,$39,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1c,$3a,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$35,$34,$38,$36,$33,$34,$36,$34,$0d,$a3,$8f,$41,$50,$70,$59,$4d,$68,$80,$0e,$3b,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$14,$3c,$00,$c2,$98,$95,$3f,$07,$68,$67,$62,$4f,$65,$7a,$71,$0d,$a3,$8f,$47,$80,$1d,$3d,$00,$c2,$9b,$96,$95,$8a,$68,$5d,$60,$4c,$43,$a3,$8f,$3f,$0a,$2d,$36,$37,$38,$38,$32,$32,$36,$35,$39,$0d,$80,$10,$3e,$00,$c2,$9d,$95,$3f,$02,$47,$62,$0d,$a3,$8f,$41,$47,$80,$10,$3f,$00,$c2,$9c,$96,$95,$41,$54,$a3,$8f,$3f,$01,$54,$0d,$80,$1d,$40,$00,$c2,$9b,$96,$95,$41,$7b,$70,$52,$45,$59,$a3,$8f,$3f,$0a,$32,$30,$37,$36,$32,$35,$34,$35,$35,$33,$0d,$80,$1c,$41,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$32,$33,$31,$32,$37,$32,$35,$30,$0d,$a3,$8f,$8a,$4d,$53,$4a,$5b,$52,$80,$10,$42,$00,$c2,$9c,$96,$95,$41,$49,$a3,$8f,$3f,$01,$49,$0d,$80,$10,$43,$00,$c2,$9d,$95,$3f,$02,$76,$64,$0d,$a3,$8f,$41,$76,$80,$10,$44,$00,$c2,$9a,$95,$41,$72,$6e,$57,$4a,$65,$a3,$8f,$41,$80,$13,$45,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$1d,$46,$00,$c2,$9b,$96,$95,$41,$48,$63,$63,$5d,$50,$a3,$8f,$3f,$0a,$31,$32,$31,$37,$32,$37,$39,$38,$32,$34,$0d,$80,$0e,$47,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$15,$48,$00,$c2,$99,$95,$41,$4c,$5a,$6d,$5a,$5c,$a3,$8f,$41,$4c,$5a,$6d,$5a,$5c,$80,$14,$49,$00,$c2,$98,$95,$3f,$07,$45,$5a,$42,$56,$42,$53,$46,$0d,$a3,$8f,$47,$80,$10,$4a,$00,$c2,$9c,$96,$95,$41,$4c,$a3,$8f,$3f,$01,$4c,$0d,$80,$10,$4b,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$13,$4c,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$0e,$4d,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$12,$4e,$00,$c2,$9d,$95,$3f,$04,$46,$79,$4b,$4e,$0d,$a3,$8f,$41,$46,$80,$0e,$4f,$00,$c2,$84,$95,$9f,$89,$48,$a3,$8f,$41,$43,$80,$10,$50,$00,$c2,$98,$95,$3f,$03,$6d,$44,$72,$0d,$a3,$8f,$43,$80,$11,$51,$00,$c2,$9a,$95,$8a,$7b,$69,$79,$58,$44,$a3,$8f,$8a,$41,$80,$16,$52,$00,$c2,$99,$95,$8a,$41,$5b,$71,$43,$7e,$7e,$a3,$8f,$41,$5b,$71,$43,$7e,$7e,$80,$13,$53,$00,$c2,$83,$95,$9f,$89,$4f,$a3,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$1d,$54,$00,$c2,$9b,$96,$95,$41,$45,$5f,$4f,$64,$54,$a3,$8f,$3f,$0a,$31,$31,$36,$35,$38,$31,$38,$31,$33,$32,$0d,$80,$23,$55,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$15,$56,$00,$c2,$99,$95,$41,$61,$54,$55,$6c,$56,$a3,$8f,$41,$61,$54,$55,$6c,$56,$80,$12,$57,$00,$c2,$8a,$8a,$52,$6a,$53,$4c,$40,$8f,$52,$6a,$53,$4c,$40,$80,$11,$58,$00,$c2,$94,$52,$45,$45,$47,$70,$8f,$52,$45,$45,$47,$70,$80,$13,$59,$00,$c2,$83,$95,$9f,$89,$4d,$a3,$8f,$94,$41,$4b,$52,$64,$65,$48,$80,$15,$5a,$00,$c2,$9d,$95,$3f,$07,$5a,$56,$47,$4b,$56,$48,$73,$0d,$a3,$8f,$41,$5a,$80,$0f,$5b,$00,$c2,$9a,$95,$6e,$41,$45,$72,$63,$a3,$8f,$41,$80,$13,$5c,$00,$c2,$83,$95,$9f,$89,$47,$a3,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$15,$5d,$00,$c2,$9e,$95,$41,$7e,$45,$44,$5b,$57,$a3,$8f,$42,$41,$7a,$7b,$64,$68,$80,$13,$5e,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$1d,$5f,$00,$c2,$9b,$96,$95,$41,$4e,$40,$7d,$6e,$49,$a3,$8f,$3f,$0a,$31,$33,$30,$38,$38,$37,$35,$36,$35,$37,$0d,$80,$0e,$60,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$0f,$61,$00,$c2,$9d,$95,$3f,$01,$6a,$0d,$a3,$8f,$41,$6a,$80,$15,$62,$00,$c2,$9e,$95,$42,$4c,$4b,$73,$5b,$6e,$a3,$8f,$41,$73,$74,$4c,$64,$51,$80,$0e,$63,$00,$c2,$84,$95,$9f,$89,$4f,$a3,$8f,$41,$4a,$80,$20,$64,$00,$c2,$96,$95,$9f,$89,$4f,$a3,$8f,$3f,$11,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$65,$00,$c2,$84,$95,$9f,$89,$46,$a3,$8f,$41,$41,$80,$1d,$66,$00,$c2,$9b,$96,$95,$8a,$63,$59,$6f,$6b,$43,$a3,$8f,$3f,$0a,$2d,$35,$39,$33,$39,$35,$31,$34,$32,$37,$0d,$80,$0e,$67,$00,$c2,$98,$95,$3f,$01,$6e,$0d,$a3,$8f,$41,$80,$1d,$68,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$30,$36,$38,$34,$34,$32,$37,$39,$30,$0d,$a3,$8f,$8a,$7f,$6b,$72,$52,$66,$80,$0e,$69,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$10,$6a,$00,$c2,$9d,$95,$3f,$02,$6c,$6b,$0d,$a3,$8f,$41,$6c,$80,$16,$6b,$00,$c2,$99,$95,$8a,$41,$7b,$5f,$53,$5a,$59,$a3,$8f,$41,$7b,$5f,$53,$5a,$59,$80,$1b,$6c,$00,$c2,$9b,$96,$95,$6b,$68,$7f,$5c,$59,$a3,$8f,$3f,$09,$37,$33,$32,$31,$36,$35,$39,$31,$33,$0d,$80,$12,$6d,$00,$c2,$8a,$8a,$4d,$54,$78,$5a,$6e,$8f,$4d,$54,$78,$5a,$6e,$80,$12,$6e,$00,$c2,$98,$95,$3f,$05,$71,$66,$74,$6f,$67,$0d,$a3,$8f,$45,$80,$0e,$6f,$00,$c2,$98,$95,$3f,$01,$47,$0d,$a3,$8f,$41,$80,$1a,$70,$00,$c2,$a2,$95,$3f,$09,$34,$30,$35,$36,$33,$35,$39,$32,$36,$0d,$a3,$8f,$58,$4b,$58,$4d,$56,$80,$12,$71,$00,$c2,$9d,$95,$3f,$04,$4f,$69,$55,$4a,$0d,$a3,$8f,$41,$4f,$80,$14,$72,$00,$c2,$8a,$8a,$41,$73,$50,$5f,$70,$71,$8f,$41,$73,$50,$5f,$70,$71,$80,$14,$73,$00,$c2,$9e,$95,$43,$4b,$5e,$51,$5a,$4e,$a3,$8f,$74,$61,$6e,$65,$71,$80,$10,$74,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$1a,$75,$00,$c2,$9b,$96,$95,$45,$73,$40,$55,$7f,$a3,$8f,$3f,$08,$39,$37,$32,$35,$36,$38,$33,$31,$0d,$80,$13,$76,$00,$c2,$83,$95,$9f,$89,$4f,$a3,$8f,$94,$41,$4d,$53,$44,$6d,$4a,$80,$13,$77,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$13,$78,$00,$c2,$94,$43,$7c,$4e,$4e,$45,$73,$8f,$43,$7c,$4e,$4e,$45,$73,$80,$15,$79,$00,$c2,$9e,$95,$41,$51,$63,$4b,$57,$7a,$a3,$8f,$42,$6e,$5c,$74,$68,$45,$80,$10,$7a,$00,$c2,$9c,$96,$95,$41,$52,$a3,$8f,$3f,$01,$52,$0d,$80,$26,$7b,$00,$c2,$96,$95,$9f,$89,$49,$a3,$8f,$3f,$17,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$7c,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$1f,$7d,$00,$c2,$96,$95,$9f,$89,$50,$a3,$8f,$3f,$10,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1d,$7e,$00,$c2,$9b,$96,$95,$41,$65,$69,$5a,$7a,$44,$a3,$8f,$3f,$0a,$31,$37,$30,$35,$33,$35,$36,$39,$33,$32,$0d,$80,$16,$7f,$00,$c2,$99,$95,$8a,$41,$46,$71,$4e,$4e,$76,$a3,$8f,$41,$46,$71,$4e,$4e,$76,$80,$10,$80,$00,$c2,$8a,$57,$51,$6a,$66,$8f,$8a,$57,$51,$6a,$66,$80,$12,$81,$00,$c2,$8a,$6e,$45,$71,$7d,$53,$8f,$8a,$6e,$45,$71,$7d,$53,$80,$1c,$82,$00,$c2,$a2,$95,$3f,$0a,$2d,$33,$37,$32,$35,$31,$36,$38,$34,$31,$0d,$a3,$8f,$8a,$56,$4d,$42,$5f,$69,$80,$0d,$83,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$1d,$84,$00,$c2,$9b,$96,$95,$41,$78,$5e,$54,$70,$6d,$a3,$8f,$3f,$0a,$32,$30,$32,$31,$32,$31,$35,$32,$37,$37,$0d,$80,$14,$85,$00,$c2,$9e,$95,$43,$61,$46,$55,$45,$61,$a3,$8f,$5e,$79,$6a,$7a,$5e,$80,$14,$86,$00,$c2,$8a,$41,$65,$66,$62,$60,$56,$8f,$8a,$41,$65,$66,$62,$60,$56,$80,$12,$87,$00,$c2,$8a,$56,$4b,$70,$43,$7e,$8f,$8a,$56,$4b,$70,$43,$7e,$80,$11,$88,$00,$c2,$98,$95,$3f,$04,$63,$75,$42,$6a,$0d,$a3,$8f,$44,$80,$15,$89,$00,$c2,$9e,$95,$41,$56,$41,$64,$56,$51,$a3,$8f,$42,$69,$7e,$5b,$69,$6e,$80,$25,$8a,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$8b,$00,$c2,$8a,$8a,$63,$7a,$49,$4a,$56,$8f,$63,$7a,$49,$4a,$56,$80,$10,$8c,$00,$c2,$9a,$95,$41,$54,$5a,$45,$67,$52,$a3,$8f,$41,$80,$11,$8d,$00,$c2,$9a,$95,$8a,$42,$7c,$49,$72,$7a,$a3,$8f,$8a,$41,$80,$10,$8e,$00,$c2,$9d,$95,$3f,$02,$7a,$46,$0d,$a3,$8f,$41,$7a,$80,$14,$8f,$00,$c2,$9e,$95,$5f,$64,$41,$7d,$66,$a3,$8f,$43,$60,$5b,$7e,$42,$59,$80,$13,$90,$00,$c2,$94,$41,$54,$78,$47,$40,$6d,$8f,$41,$54,$78,$47,$40,$6d,$80,$13,$91,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$10,$92,$00,$c2,$9c,$96,$95,$41,$41,$a3,$8f,$3f,$01,$41,$0d,$80,$1c,$93,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$33,$36,$39,$38,$37,$38,$31,$34,$0d,$a3,$8f,$41,$4f,$6c,$4d,$42,$66,$80,$11,$94,$00,$c2,$9d,$95,$3f,$03,$43,$53,$6c,$0d,$a3,$8f,$41,$43,$80,$16,$95,$00,$c2,$99,$95,$8a,$41,$6e,$77,$7b,$62,$67,$a3,$8f,$41,$6e,$77,$7b,$62,$67,$80,$1c,$96,$00,$c2,$96,$95,$9f,$89,$53,$a3,$8f,$3f,$0d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$97,$00,$c2,$9e,$95,$43,$72,$47,$61,$6c,$76,$a3,$8f,$4d,$78,$5e,$53,$49,$80,$15,$98,$00,$c2,$9e,$95,$41,$4c,$6d,$6f,$5f,$7c,$a3,$8f,$42,$73,$52,$50,$60,$43,$80,$1a,$99,$00,$c2,$a2,$95,$3f,$09,$34,$36,$31,$38,$37,$32,$35,$33,$30,$0d,$a3,$8f,$5b,$61,$79,$76,$52,$80,$14,$9a,$00,$c2,$8a,$41,$65,$6b,$7e,$51,$4f,$8f,$8a,$41,$65,$6b,$7e,$51,$4f,$80,$13,$9b,$00,$c2,$83,$95,$9f,$89,$51,$a3,$8f,$94,$41,$4f,$53,$64,$75,$4c,$80,$16,$9c,$00,$c2,$99,$95,$8a,$41,$66,$70,$49,$52,$46,$a3,$8f,$41,$66,$70,$49,$52,$46,$80,$1b,$9d,$00,$c2,$9b,$96,$95,$5d,$4c,$54,$46,$5d,$a3,$8f,$3f,$09,$34,$38,$39,$37,$36,$37,$33,$32,$35,$0d,$80,$1c,$9e,$00,$c2,$a2,$95,$3f,$0a,$31,$36,$38,$39,$37,$31,$34,$33,$39,$36,$0d,$a3,$8f,$41,$64,$6d,$6f,$7b,$5c,$80,$16,$9f,$00,$c2,$99,$95,$8a,$41,$6f,$46,$41,$52,$41,$a3,$8f,$41,$6f,$46,$41,$52,$41,$80,$22,$a0,$00,$c2,$96,$95,$9f,$89,$4d,$a3,$8f,$3f,$13,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0f,$a1,$00,$c2,$9d,$95,$3f,$01,$66,$0d,$a3,$8f,$41,$66,$80,$13,$a2,$00,$c2,$83,$95,$9f,$89,$47,$a3,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$1d,$a3,$00,$c2,$9b,$96,$95,$41,$75,$67,$53,$70,$64,$a3,$8f,$3f,$0a,$31,$39,$37,$33,$32,$33,$38,$38,$32,$30,$0d,$80,$12,$a4,$00,$c2,$8a,$55,$56,$70,$6b,$42,$8f,$8a,$55,$56,$70,$6b,$42,$80,$1d,$a5,$00,$c2,$9b,$96,$95,$41,$51,$4c,$66,$5e,$47,$a3,$8f,$3f,$0a,$31,$33,$36,$32,$32,$35,$37,$37,$39,$39,$0d,$80,$16,$a6,$00,$c2,$99,$95,$8a,$41,$45,$42,$68,$7d,$78,$a3,$8f,$41,$45,$42,$68,$7d,$78,$80,$13,$a7,$00,$c2,$9d,$95,$3f,$05,$44,$52,$55,$7a,$63,$0d,$a3,$8f,$41,$44,$80,$10,$a8,$00,$c2,$9a,$95,$41,$4d,$72,$41,$5d,$43,$a3,$8f,$41,$80,$0e,$a9,$00,$c2,$84,$95,$9f,$89,$51,$a3,$8f,$41,$4c,$80,$24,$aa,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$ab,$00,$c2,$84,$95,$9f,$89,$4e,$a3,$8f,$41,$49,$80,$0e,$ac,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$14,$ad,$00,$c2,$8a,$8a,$41,$43,$50,$79,$6e,$51,$8f,$41,$43,$50,$79,$6e,$51,$80,$1d,$ae,$00,$c2,$9b,$96,$95,$41,$7f,$40,$69,$53,$43,$a3,$8f,$3f,$0a,$32,$31,$33,$30,$38,$37,$35,$35,$38,$37,$0d,$80,$14,$af,$00,$c2,$9e,$95,$5b,$51,$7e,$7c,$7e,$a3,$8f,$43,$64,$6e,$41,$43,$41,$80,$1a,$b0,$00,$c2,$a2,$95,$3f,$09,$39,$37,$39,$31,$36,$34,$38,$39,$34,$0d,$a3,$8f,$7a,$57,$4d,$7b,$5e,$80,$13,$b1,$00,$c2,$99,$95,$56,$44,$47,$41,$7f,$a3,$8f,$56,$44,$47,$41,$7f,$80,$0e,$b2,$00,$c2,$84,$95,$9f,$89,$4b,$a3,$8f,$41,$46,$80,$13,$b3,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$12,$b4,$00,$c2,$8a,$76,$52,$6c,$59,$57,$8f,$8a,$76,$52,$6c,$59,$57,$80,$13,$b5,$00,$c2,$99,$95,$51,$47,$5e,$68,$5b,$a3,$8f,$51,$47,$5e,$68,$5b,$80,$13,$b6,$00,$c2,$98,$95,$3f,$06,$50,$71,$77,$79,$41,$4e,$0d,$a3,$8f,$46,$80,$1b,$b7,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1f,$b8,$00,$c2,$96,$95,$9f,$89,$50,$a3,$8f,$3f,$10,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1e,$b9,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$34,$38,$30,$38,$35,$35,$34,$38,$36,$0d,$a3,$8f,$8a,$41,$58,$51,$40,$7e,$7e,$80,$0e,$ba,$00,$c2,$84,$95,$9f,$89,$46,$a3,$8f,$41,$41,$80,$10,$bb,$00,$c2,$9c,$96,$95,$41,$4e,$a3,$8f,$3f,$01,$4e,$0d,$80,$1a,$bc,$00,$c2,$a2,$95,$3f,$09,$39,$30,$36,$34,$37,$39,$30,$34,$34,$0d,$a3,$8f,$76,$41,$7c,$57,$44,$80,$12,$bd,$00,$c2,$8a,$58,$6f,$65,$66,$41,$8f,$8a,$58,$6f,$65,$66,$41,$80,$10,$be,$00,$c2,$98,$95,$3f,$03,$79,$62,$67,$0d,$a3,$8f,$43,$80,$13,$bf,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$10,$c0,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$0e,$c1,$00,$c2,$98,$95,$3f,$01,$73,$0d,$a3,$8f,$41,$80,$22,$c2,$00,$c2,$96,$95,$9f,$89,$4d,$a3,$8f,$3f,$13,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$c3,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$25,$c4,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0e,$c5,$00,$c2,$84,$95,$9f,$89,$4f,$a3,$8f,$41,$4a,$80,$14,$c6,$00,$c2,$9e,$95,$43,$75,$6a,$43,$59,$4d,$a3,$8f,$4a,$55,$7c,$66,$72,$80,$10,$c7,$00,$c2,$9c,$96,$95,$41,$59,$a3,$8f,$3f,$01,$59,$0d,$80,$16,$c8,$00,$c2,$9d,$95,$3f,$08,$53,$47,$49,$62,$46,$56,$72,$67,$0d,$a3,$8f,$41,$53,$80,$1e,$c9,$00,$c2,$a2,$95,$3f,$0b,$2d,$32,$30,$32,$39,$35,$37,$31,$39,$30,$30,$0d,$a3,$8f,$8a,$41,$78,$7e,$4c,$7c,$7c,$80,$0d,$ca,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$15,$cb,$00,$b9,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$31,$36,$30,$39,$38,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C878 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D878 -  -  -  -  EndTestInstance:
   18 D1:D878 -  -  -  -  		
   19 D1:D878 -  -  -  -  ; ***************************************************************************************
   20 D1:D878 -  -  -  -  ;
   21 D1:D878 -  -  -  -  ;									Changes and Updates
   22 D1:D878 -  -  -  -  ;
   23 D1:D878 -  -  -  -  ; ***************************************************************************************
   24 D1:D878 -  -  -  -  ;
   25 D1:D878 -  -  -  -  ;		Date			Notes
   26 D1:D878 -  -  -  -  ;		==== 			=====
   27 D1:D878 -  -  -  -  ;
   28 D1:D878 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:D878 -  -  -  -  FinalAddress:
