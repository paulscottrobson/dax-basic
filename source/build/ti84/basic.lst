    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_EOR                             	$0092 ; eor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 44 B3 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B4 D1 		ld 		de,TestInstance
   45 D1:A889 21 E7 D6 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD E7 AD D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 81 A9 D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 6A B3 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 50 B3 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 1B 
              AA D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 1B 
              AA D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  
   59 D1:A8CD -  -  -  -  ; ***************************************************************************************
   60 D1:A8CD -  -  -  -  ;
   61 D1:A8CD -  -  -  -  ;										Run variables
   62 D1:A8CD -  -  -  -  ;
   63 D1:A8CD -  -  -  -  ; ***************************************************************************************
   64 D1:A8CD -  -  -  -  
   65 D1:A8CD -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 D1:A8CD 00 00 00 00 		.dw 	0,0
   67 D1:A8D1 -  -  -  -  		
   68 D1:A8D1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  
   71 D1:A8D5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 D1:A8D5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 D1:A8DB -  -  -  -  
   74 D1:A8DB -  -  -  -  AConvert: 									; used for address conversions.
   75 D1:A8DB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8E1 -  -  -  -  		
   77 D1:A8E1 -  -  -  -  RandomSeed: 								; random number seeds.
   78 D1:A8E1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 D1:A8F1 -  -  -  -  
   80 D1:A8F1 -  -  -  -  s; ***************************************************************************************
   81 D1:A8F1 -  -  -  -  ;
   82 D1:A8F1 -  -  -  -  ;										  Buffers
   83 D1:A8F1 -  -  -  -  ;
   84 D1:A8F1 -  -  -  -  ; ***************************************************************************************
   85 D1:A8F1 -  -  -  -  
   86 D1:A8F1 -  -  -  -  ConvertBuffer:
   87 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 D1:A931 -  -  -  -  
   89 D1:A931 -  -  -  -  ; ***************************************************************************************
   90 D1:A931 -  -  -  -  ;
   91 D1:A931 -  -  -  -  ;									Changes and Updates
   92 D1:A931 -  -  -  -  ;
   93 D1:A931 -  -  -  -  ; ***************************************************************************************
   94 D1:A931 -  -  -  -  ;
   95 D1:A931 -  -  -  -  ;		Date			Notes
   96 D1:A931 -  -  -  -  ;		==== 			=====
   97 D1:A931 -  -  -  -  ;
   98 D1:A931 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A931 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A931 -  -  -  -  ; ***************************************************************************************
    2 D1:A931 -  -  -  -  ; ***************************************************************************************
    3 D1:A931 -  -  -  -  ;
    4 D1:A931 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A931 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A931 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A931 -  -  -  -  ;		Reviewed :	No
    8 D1:A931 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A931 -  -  -  -  ;
   10 D1:A931 -  -  -  -  ; ***************************************************************************************
   11 D1:A931 -  -  -  -  ; ***************************************************************************************
   12 D1:A931 -  -  -  -  
   13 D1:A931 -  -  -  -  ; ***************************************************************************************
   14 D1:A931 -  -  -  -  ;
   15 D1:A931 -  -  -  -  ;									ASSERT command
   16 D1:A931 -  -  -  -  ;
   17 D1:A931 -  -  -  -  ; ***************************************************************************************
   18 D1:A931 -  -  -  -  
   19 D1:A931 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A931 CD 2F AC D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A935 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A93B C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A93C 3E 01 C3 1B 
              AA D1 -  -  		ERR_ASSERT
   24 D1:A942 -  -  -  -  
   25 D1:A942 -  -  -  -  ; ***************************************************************************************
   26 D1:A942 -  -  -  -  ;
   27 D1:A942 -  -  -  -  ;									Changes and Updates
   28 D1:A942 -  -  -  -  ;
   29 D1:A942 -  -  -  -  ; ***************************************************************************************
   30 D1:A942 -  -  -  -  ;
   31 D1:A942 -  -  -  -  ;		Date			Notes
   32 D1:A942 -  -  -  -  ;		==== 			=====
   33 D1:A942 -  -  -  -  ;
   34 D1:A942 -  -  -  -  ; ***************************************************************************************
   35 D1:A942 -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A942 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A942 -  -  -  -  ; ***************************************************************************************
    2 D1:A942 -  -  -  -  ; ***************************************************************************************
    3 D1:A942 -  -  -  -  ;
    4 D1:A942 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A942 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A942 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A942 -  -  -  -  ;		Reviewed :	No
    8 D1:A942 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A942 -  -  -  -  ;
   10 D1:A942 -  -  -  -  ; ***************************************************************************************
   11 D1:A942 -  -  -  -  ; ***************************************************************************************
   12 D1:A942 -  -  -  -  
   13 D1:A942 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A942 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A942 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A942 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A942 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A942 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A942 C3 85 AA D1 		jp 		SyntaxError
   20 D1:A946 -  -  -  -  
   21 D1:A946 -  -  -  -  ; ***************************************************************************************
   22 D1:A946 -  -  -  -  ;
   23 D1:A946 -  -  -  -  ;									Changes and Updates
   24 D1:A946 -  -  -  -  ;
   25 D1:A946 -  -  -  -  ; ***************************************************************************************
   26 D1:A946 -  -  -  -  ;
   27 D1:A946 -  -  -  -  ;		Date			Notes
   28 D1:A946 -  -  -  -  ;		==== 			=====
   29 D1:A946 -  -  -  -  ;
   30 D1:A946 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A946 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A946 -  -  -  -  ; ***************************************************************************************
    2 D1:A946 -  -  -  -  ; ***************************************************************************************
    3 D1:A946 -  -  -  -  ;
    4 D1:A946 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A946 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A946 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A946 -  -  -  -  ;		Reviewed :	No
    8 D1:A946 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A946 -  -  -  -  ;
   10 D1:A946 -  -  -  -  ; ***************************************************************************************
   11 D1:A946 -  -  -  -  ; ***************************************************************************************
   12 D1:A946 -  -  -  -  
   13 D1:A946 -  -  -  -  ; ***************************************************************************************
   14 D1:A946 -  -  -  -  ;
   15 D1:A946 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A946 -  -  -  -  ;
   17 D1:A946 -  -  -  -  ; ***************************************************************************************
   18 D1:A946 -  -  -  -  
   19 D1:A946 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A946 C9 -  -  -  		ret
   21 D1:A947 -  -  -  -  
   22 D1:A947 -  -  -  -  ; ***************************************************************************************
   23 D1:A947 -  -  -  -  ;
   24 D1:A947 -  -  -  -  ;									Changes and Updates
   25 D1:A947 -  -  -  -  ;
   26 D1:A947 -  -  -  -  ; ***************************************************************************************
   27 D1:A947 -  -  -  -  ;
   28 D1:A947 -  -  -  -  ;		Date			Notes
   29 D1:A947 -  -  -  -  ;		==== 			=====
   30 D1:A947 -  -  -  -  ;
   31 D1:A947 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A947 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A947 -  -  -  -  ; ***************************************************************************************
    2 D1:A947 -  -  -  -  ; ***************************************************************************************
    3 D1:A947 -  -  -  -  ;
    4 D1:A947 -  -  -  -  ;		Name : 		end.asm
    5 D1:A947 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A947 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A947 -  -  -  -  ;		Reviewed :	No
    8 D1:A947 -  -  -  -  ;		Purpose :	End command
    9 D1:A947 -  -  -  -  ;
   10 D1:A947 -  -  -  -  ; ***************************************************************************************
   11 D1:A947 -  -  -  -  ; ***************************************************************************************
   12 D1:A947 -  -  -  -  
   13 D1:A947 -  -  -  -  ; ***************************************************************************************
   14 D1:A947 -  -  -  -  ;
   15 D1:A947 -  -  -  -  ;										END command
   16 D1:A947 -  -  -  -  ;
   17 D1:A947 -  -  -  -  ; ***************************************************************************************
   18 D1:A947 -  -  -  -  
   19 D1:A947 -  -  -  -  Command_END: 	;; [end]
   20 D1:A947 3E 00 C3 1B 
              AA D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A94D -  -  -  -  
   22 D1:A94D -  -  -  -  ; ***************************************************************************************
   23 D1:A94D -  -  -  -  ;
   24 D1:A94D -  -  -  -  ;									Changes and Updates
   25 D1:A94D -  -  -  -  ;
   26 D1:A94D -  -  -  -  ; ***************************************************************************************
   27 D1:A94D -  -  -  -  ;
   28 D1:A94D -  -  -  -  ;		Date			Notes
   29 D1:A94D -  -  -  -  ;		==== 			=====
   30 D1:A94D -  -  -  -  ;
   31 D1:A94D -  -  -  -  ; ***************************************************************************************
   32 D1:A94D -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A94D -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A94D -  -  -  -  ; ***************************************************************************************
    2 D1:A94D -  -  -  -  ; ***************************************************************************************
    3 D1:A94D -  -  -  -  ;
    4 D1:A94D -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A94D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A94D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A94D -  -  -  -  ;		Reviewed :	None
    8 D1:A94D -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A94D -  -  -  -  ;
   10 D1:A94D -  -  -  -  ; ***************************************************************************************
   11 D1:A94D -  -  -  -  ; ***************************************************************************************
   12 D1:A94D -  -  -  -  
   13 D1:A94D -  -  -  -  ; ***************************************************************************************
   14 D1:A94D -  -  -  -  ;
   15 D1:A94D -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A94D -  -  -  -  ;
   17 D1:A94D -  -  -  -  ; ***************************************************************************************
   18 D1:A94D -  -  -  -  
   19 D1:A94D -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A94D DD 2A CD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A952 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A956 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A959 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A95B -  -  -  -  		;
   25 D1:A95B ED 7B D1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A960 C3 8F A9 D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A964 -  -  -  -  
   28 D1:A964 -  -  -  -  ; ***************************************************************************************
   29 D1:A964 -  -  -  -  ;
   30 D1:A964 -  -  -  -  ;									Changes and Updates
   31 D1:A964 -  -  -  -  ;
   32 D1:A964 -  -  -  -  ; ***************************************************************************************
   33 D1:A964 -  -  -  -  ;
   34 D1:A964 -  -  -  -  ;		Date			Notes
   35 D1:A964 -  -  -  -  ;		==== 			=====
   36 D1:A964 -  -  -  -  ;
   37 D1:A964 -  -  -  -  ; ***************************************************************************************
   38 D1:A964 -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A964 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:A964 -  -  -  -  ; ***************************************************************************************
    2 D1:A964 -  -  -  -  ; ***************************************************************************************
    3 D1:A964 -  -  -  -  ;
    4 D1:A964 -  -  -  -  ;		Name : 		rem.asm
    5 D1:A964 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A964 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A964 -  -  -  -  ;		Reviewed :	No
    8 D1:A964 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:A964 -  -  -  -  ;
   10 D1:A964 -  -  -  -  ; ***************************************************************************************
   11 D1:A964 -  -  -  -  ; ***************************************************************************************
   12 D1:A964 -  -  -  -  
   13 D1:A964 -  -  -  -  ; ***************************************************************************************
   14 D1:A964 -  -  -  -  ;
   15 D1:A964 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:A964 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:A964 -  -  -  -  ;
   18 D1:A964 -  -  -  -  ; ***************************************************************************************
   19 D1:A964 -  -  -  -  
   20 D1:A964 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:A964 -  -  -  -  Command_REM2: 	;; [']
   22 D1:A964 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:A967 DD 23 -  -  		inc 	ix
   24 D1:A969 FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:A96B C8 -  -  -  		ret 	z
   26 D1:A96C FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:A96E C8 -  -  -  		ret 	z
   28 D1:A96F FE 3F -  -  		cp 		STRING_MARKER
   29 D1:A971 C2 85 AA D1 		jp 		nz,SyntaxError
   30 D1:A975 -  -  -  -  		;		
   31 D1:A975 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:A979 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:A97C 13 -  -  -  		inc 	de 
   34 D1:A97D 13 -  -  -  		inc 	de
   35 D1:A97E DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:A980 C9 -  -  -  		ret
   37 D1:A981 -  -  -  -  
   38 D1:A981 -  -  -  -  ; ***************************************************************************************
   39 D1:A981 -  -  -  -  ;
   40 D1:A981 -  -  -  -  ;									Changes and Updates
   41 D1:A981 -  -  -  -  ;
   42 D1:A981 -  -  -  -  ; ***************************************************************************************
   43 D1:A981 -  -  -  -  ;
   44 D1:A981 -  -  -  -  ;		Date			Notes
   45 D1:A981 -  -  -  -  ;		==== 			=====
   46 D1:A981 -  -  -  -  ;
   47 D1:A981 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 D1:A981 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:A981 -  -  -  -  ; ***************************************************************************************
    2 D1:A981 -  -  -  -  ; ***************************************************************************************
    3 D1:A981 -  -  -  -  ;
    4 D1:A981 -  -  -  -  ;		Name : 		run.asm
    5 D1:A981 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A981 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A981 -  -  -  -  ;		Reviewed :	No
    8 D1:A981 -  -  -  -  ;		Purpose :	Run command
    9 D1:A981 -  -  -  -  ;
   10 D1:A981 -  -  -  -  ; ***************************************************************************************
   11 D1:A981 -  -  -  -  ; ***************************************************************************************
   12 D1:A981 -  -  -  -  
   13 D1:A981 -  -  -  -  ; ***************************************************************************************
   14 D1:A981 -  -  -  -  ;
   15 D1:A981 -  -  -  -  ;										RUN command
   16 D1:A981 -  -  -  -  ;
   17 D1:A981 -  -  -  -  ; ***************************************************************************************
   18 D1:A981 -  -  -  -  
   19 D1:A981 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:A981 CD B4 AD D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:A985 -  -  -  -  
   22 D1:A985 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:A98A ED 73 D1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:A98F -  -  -  -  		;
   25 D1:A98F -  -  -  -  		; 		New line at IX.
   26 D1:A98F -  -  -  -  		;
   27 D1:A98F -  -  -  -  CRNewLine:
   28 D1:A98F DD 22 CD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 D1:A994 -  -  -  -  		;
   30 D1:A994 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 D1:A997 B7 -  -  -  		or 		a
   32 D1:A998 CA 47 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   33 D1:A99C -  -  -  -  		;
   34 D1:A99C DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 D1:A99E DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 D1:A9A0 DD 23 -  -  		inc 	ix
   37 D1:A9A2 -  -  -  -  		;
   38 D1:A9A2 -  -  -  -  		; 		New command at IX
   39 D1:A9A2 -  -  -  -  		;
   40 D1:A9A2 -  -  -  -  _CRNewCommand:	
   41 D1:A9A2 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 D1:A9A5 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 D1:A9A6 F2 DD A9 D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 D1:A9AA -  -  -  -  		;
   45 D1:A9AA FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 D1:A9AC 30 06 -  -  		jr  	nc,_CRDoCommand
   47 D1:A9AE FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 D1:A9B0 D2 D1 A9 D1 		jp 		nc,_CRAlternateLets
   49 D1:A9B4 -  -  -  -  		;
   50 D1:A9B4 -  -  -  -  _CRDoCommand:		
   51 D1:A9B4 E6 7F 21 00 
              00 00 6F 29 
              29 11 36 B0 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 D1:A9C9 DD 23 -  -  		inc 	ix 							; skip over token.
   53 D1:A9CB CD D5 A8 D1 		call 	JumpCode 					; call the routine.
   54 D1:A9CF 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 D1:A9D1 -  -  -  -  		;
   56 D1:A9D1 -  -  -  -  		; 		Do CALL (HL)
   57 D1:A9D1 -  -  -  -  		;
   58 D1:A9D1 -  -  -  -  		;
   59 D1:A9D1 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 D1:A9D1 -  -  -  -  		;		
   61 D1:A9D1 -  -  -  -  _CRAlternateLets:		
   62 D1:A9D1 FE 83 -  -  		cp 		KWD_PLING
   63 D1:A9D3 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 D1:A9D5 FE 84 -  -  		cp 		KWD_QMARK
   65 D1:A9D7 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 D1:A9D9 C3 85 AA D1 		jp 		SyntaxError
   67 D1:A9DD -  -  -  -  		;
   68 D1:A9DD -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 D1:A9DD -  -  -  -  		;
   70 D1:A9DD -  -  -  -  _CRAssignmentHandler:		
   71 D1:A9DD FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 D1:A9DF D2 85 AA D1 		jp 		nc,SyntaxError
   73 D1:A9E3 -  -  -  -  _CRAssignmentLet:		
   74 D1:A9E3 3E 0C C3 1B 
              AA D1 -  -  		ERR_TODO
   75 D1:A9E9 -  -  -  -  		;call	Command_LET
   76 D1:A9E9 C3 A2 A9 D1 		jp 		_CRNewCommand
   77 D1:A9ED -  -  -  -  
   78 D1:A9ED -  -  -  -  ; ***************************************************************************************
   79 D1:A9ED -  -  -  -  ;
   80 D1:A9ED -  -  -  -  ;									Changes and Updates
   81 D1:A9ED -  -  -  -  ;
   82 D1:A9ED -  -  -  -  ; ***************************************************************************************
   83 D1:A9ED -  -  -  -  ;
   84 D1:A9ED -  -  -  -  ;		Date			Notes
   85 D1:A9ED -  -  -  -  ;		==== 			=====
   86 D1:A9ED -  -  -  -  ;
   87 D1:A9ED -  -  -  -  ; ***************************************************************************************
   88 D1:A9ED -  -  -  -  		
Listing for file "_build.asm"
   20 D1:A9ED -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:A9ED -  -  -  -  ; ***************************************************************************************
    2 D1:A9ED -  -  -  -  ; ***************************************************************************************
    3 D1:A9ED -  -  -  -  ;
    4 D1:A9ED -  -  -  -  ;		Name : 		stop.asm
    5 D1:A9ED -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9ED -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9ED -  -  -  -  ;		Reviewed :	No
    8 D1:A9ED -  -  -  -  ;		Purpose :	Stop command
    9 D1:A9ED -  -  -  -  ;
   10 D1:A9ED -  -  -  -  ; ***************************************************************************************
   11 D1:A9ED -  -  -  -  ; ***************************************************************************************
   12 D1:A9ED -  -  -  -  
   13 D1:A9ED -  -  -  -  ; ***************************************************************************************
   14 D1:A9ED -  -  -  -  ;
   15 D1:A9ED -  -  -  -  ;										STOP command
   16 D1:A9ED -  -  -  -  ;
   17 D1:A9ED -  -  -  -  ; ***************************************************************************************
   18 D1:A9ED -  -  -  -  
   19 D1:A9ED -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:A9ED 3E 0A C3 1B 
              AA D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:A9F3 -  -  -  -  
   22 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   23 D1:A9F3 -  -  -  -  ;
   24 D1:A9F3 -  -  -  -  ;									Changes and Updates
   25 D1:A9F3 -  -  -  -  ;
   26 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   27 D1:A9F3 -  -  -  -  ;
   28 D1:A9F3 -  -  -  -  ;		Date			Notes
   29 D1:A9F3 -  -  -  -  ;		==== 			=====
   30 D1:A9F3 -  -  -  -  ;
   31 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   32 D1:A9F3 -  -  -  -  		
Listing for file "_build.asm"
   21 D1:A9F3 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:A9F3 -  -  -  -  ; ***************************************************************************************
    2 D1:A9F3 -  -  -  -  ; ***************************************************************************************
    3 D1:A9F3 -  -  -  -  ;
    4 D1:A9F3 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:A9F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9F3 -  -  -  -  ;		Reviewed :	No
    8 D1:A9F3 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:A9F3 -  -  -  -  ;
   10 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   11 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   12 D1:A9F3 -  -  -  -  
   13 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   14 D1:A9F3 -  -  -  -  ;
   15 D1:A9F3 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:A9F3 -  -  -  -  ;
   17 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   18 D1:A9F3 -  -  -  -  
   19 D1:A9F3 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:A9F3             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:A9F3             		inc 	ix
   22 D1:A9F3             		cp 		ch 							; exit if matches
   23 D1:A9F3             		ret 	z
   24 D1:A9F3             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:A9F3             		jp 		ErrorHandler
   26 D1:A9F3             #endmacro
   27 D1:A9F3 -  -  -  -  
   28 D1:A9F3 -  -  -  -  CheckRightBracket:
   29 D1:A9F3 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 1B 
              AA D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AA01 -  -  -  -  
   31 D1:AA01 -  -  -  -  CheckComma:
   32 D1:AA01 DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 1B 
              AA D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 D1:AA0F -  -  -  -  
   34 D1:AA0F -  -  -  -  ; ***************************************************************************************
   35 D1:AA0F -  -  -  -  ;
   36 D1:AA0F -  -  -  -  ; 							Check A, gives Syntax Error
   37 D1:AA0F -  -  -  -  ;
   38 D1:AA0F -  -  -  -  ; ***************************************************************************************
   39 D1:AA0F -  -  -  -  
   40 D1:AA0F -  -  -  -  CheckNextA:
   41 D1:AA0F DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 D1:AA12 DD 23 -  -  		inc 	ix 							; skip character
   43 D1:AA14 C8 -  -  -  		ret 	z 							; yes, okay
   44 D1:AA15 3E 0B C3 1B 
              AA D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 D1:AA1B -  -  -  -  		
   46 D1:AA1B -  -  -  -  ; ***************************************************************************************
   47 D1:AA1B -  -  -  -  ;
   48 D1:AA1B -  -  -  -  ;									Changes and Updates
   49 D1:AA1B -  -  -  -  ;
   50 D1:AA1B -  -  -  -  ; ***************************************************************************************
   51 D1:AA1B -  -  -  -  ;
   52 D1:AA1B -  -  -  -  ;		Date			Notes
   53 D1:AA1B -  -  -  -  ;		==== 			=====
   54 D1:AA1B -  -  -  -  ;
   55 D1:AA1B -  -  -  -  ; ***************************************************************************************
   56 D1:AA1B -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AA1B -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AA1B -  -  -  -  ; ***************************************************************************************
    2 D1:AA1B -  -  -  -  ; ***************************************************************************************
    3 D1:AA1B -  -  -  -  ;
    4 D1:AA1B -  -  -  -  ;		Name : 		errors.asm
    5 D1:AA1B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA1B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA1B -  -  -  -  ;		Reviewed :	No
    8 D1:AA1B -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AA1B -  -  -  -  ;
   10 D1:AA1B -  -  -  -  ; ***************************************************************************************
   11 D1:AA1B -  -  -  -  ; ***************************************************************************************
   12 D1:AA1B -  -  -  -  
   13 D1:AA1B -  -  -  -  ; ***************************************************************************************
   14 D1:AA1B -  -  -  -  ;
   15 D1:AA1B -  -  -  -  ;								Error handler, message A 
   16 D1:AA1B -  -  -  -  ;
   17 D1:AA1B -  -  -  -  ; ***************************************************************************************
   18 D1:AA1B -  -  -  -  
   19 D1:AA1B -  -  -  -  ErrorHandler:
   20 D1:AA1B F5 -  -  -  		push 	af 						; save error ID
   21 D1:AA1C -  -  -  -  
   22 D1:AA1C 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AA20 6F -  -  -  		ld 		l,a
   24 D1:AA21 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AA22 29 -  -  -  		add 	hl,hl 		
   26 D1:AA23 11 30 AF D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AA27 19 -  -  -  		add 	hl,de
   28 D1:AA28 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AA2A CD 06 AE D1 		call 	PrintStringAtHL
   30 D1:AA2E -  -  -  -  		;
   31 D1:AA2E F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AA2F B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AA30 28 2F -  -  		jr 		z,_EHExit
   34 D1:AA32 -  -  -  -  		;
   35 D1:AA32 DD 2A CD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AA37 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AA3A B7 -  -  -  		or 		a
   38 D1:AA3B 28 24 -  -  		jr 		z,_EHExit
   39 D1:AA3D -  -  -  -  
   40 D1:AA3D 21 69 AA D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AA41 CD 06 AE D1 		call 	PrintStringAtHL 
   42 D1:AA45 -  -  -  -  		
   43 D1:AA45 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AA46 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AA4A D9 -  -  -  		exx 
   46 D1:AA4B DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AA4E DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AA51 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AA53 01 F1 A8 D1 		ld 		bc,ConvertBuffer
   50 D1:AA57 CD F8 B2 D1 		call 	Int32ToString
   51 D1:AA5B C5 -  -  -  		push 	bc
   52 D1:AA5C E1 -  -  -  		pop 	hl
   53 D1:AA5D CD 06 AE D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AA61 -  -  -  -  _EHExit:		
   55 D1:AA61 CD 92 B3 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AA65 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AA69 -  -  -  -  
   58 D1:AA69 -  -  -  -  _EHAtText:
   59 D1:AA69 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AA73 -  -  -  -  
   61 D1:AA73 -  -  -  -  NotImplemented:
   62 D1:AA73 3E 04 C3 1B 
              AA D1 -  -  		ERR_DISABLED
   63 D1:AA79 -  -  -  -  TypeMismatch:
   64 D1:AA79 3E 02 C3 1B 
              AA D1 -  -  		ERR_BADTYPE
   65 D1:AA7F -  -  -  -  BadValue:
   66 D1:AA7F 3E 03 C3 1B 
              AA D1 -  -  		ERR_BADVALUE
   67 D1:AA85 -  -  -  -  SyntaxError:
   68 D1:AA85 3E 0B C3 1B 
              AA D1 -  -  		ERR_SYNTAX
   69 D1:AA8B -  -  -  -  						
   70 D1:AA8B -  -  -  -  ; ***************************************************************************************
   71 D1:AA8B -  -  -  -  ;
   72 D1:AA8B -  -  -  -  ;									Changes and Updates
   73 D1:AA8B -  -  -  -  ;
   74 D1:AA8B -  -  -  -  ; ***************************************************************************************
   75 D1:AA8B -  -  -  -  ;
   76 D1:AA8B -  -  -  -  ;		Date			Notes
   77 D1:AA8B -  -  -  -  ;		==== 			=====
   78 D1:AA8B -  -  -  -  ;
   79 D1:AA8B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AA8B -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AA8B -  -  -  -  ; ***************************************************************************************
    2 D1:AA8B -  -  -  -  ; ***************************************************************************************
    3 D1:AA8B -  -  -  -  ;
    4 D1:AA8B -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AA8B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA8B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA8B -  -  -  -  ;		Reviewed :	No
    8 D1:AA8B -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AA8B -  -  -  -  ;
   10 D1:AA8B -  -  -  -  ; ***************************************************************************************
   11 D1:AA8B -  -  -  -  ; ***************************************************************************************
   12 D1:AA8B -  -  -  -  
   13 D1:AA8B -  -  -  -  ; ***************************************************************************************
   14 D1:AA8B -  -  -  -  ;
   15 D1:AA8B -  -  -  -  ; 									Addition
   16 D1:AA8B -  -  -  -  ;
   17 D1:AA8B -  -  -  -  ; ***************************************************************************************
   18 D1:AA8B -  -  -  -  
   19 D1:AA8B -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AA8B CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 77 
              B2 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AA99 -  -  -  -  
   22 D1:AA99 -  -  -  -  ; ***************************************************************************************
   23 D1:AA99 -  -  -  -  ;
   24 D1:AA99 -  -  -  -  ; 									Subtraction
   25 D1:AA99 -  -  -  -  ;
   26 D1:AA99 -  -  -  -  ; ***************************************************************************************
   27 D1:AA99 -  -  -  -  
   28 D1:AA99 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AA99 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 7F 
              B2 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AAA7 -  -  -  -  
   31 D1:AAA7 -  -  -  -  ; ***************************************************************************************
   32 D1:AAA7 -  -  -  -  ;
   33 D1:AAA7 -  -  -  -  ; 									  Multiply
   34 D1:AAA7 -  -  -  -  ;
   35 D1:AAA7 -  -  -  -  ; ***************************************************************************************
   36 D1:AAA7 -  -  -  -  
   37 D1:AAA7 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AAA7 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 3E 
              B2 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AAB5 -  -  -  -  
   40 D1:AAB5 -  -  -  -  ; ***************************************************************************************
   41 D1:AAB5 -  -  -  -  ;
   42 D1:AAB5 -  -  -  -  ; 									  Divide
   43 D1:AAB5 -  -  -  -  ;
   44 D1:AAB5 -  -  -  -  ; ***************************************************************************************
   45 D1:AAB5 -  -  -  -  
   46 D1:AAB5 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AAB5 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 3F 
              B1 D1 -  -  		IntegerDispatch(Int32SDivide)
   48 D1:AAC3 -  -  -  -  
   49 D1:AAC3 -  -  -  -  ; ***************************************************************************************
   50 D1:AAC3 -  -  -  -  ;
   51 D1:AAC3 -  -  -  -  ; 									  Modulus
   52 D1:AAC3 -  -  -  -  ;
   53 D1:AAC3 -  -  -  -  ; ***************************************************************************************
   54 D1:AAC3 -  -  -  -  
   55 D1:AAC3 -  -  -  -  ALUModulus: 	;; [mod]
   56 D1:AAC3 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 42 
              B1 D1 -  -  		IntegerDispatch(Int32Modulus)
   57 D1:AAD1 -  -  -  -  
   58 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   59 D1:AAD1 -  -  -  -  ;
   60 D1:AAD1 -  -  -  -  ; 									  Logical
   61 D1:AAD1 -  -  -  -  ;
   62 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   63 D1:AAD1 -  -  -  -  
   64 D1:AAD1 -  -  -  -  ALUAnd: 		;; [and]
   65 D1:AAD1 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 89 
              B2 D1 -  -  		IntegerDispatch(Int32And)
   66 D1:AADF -  -  -  -  
   67 D1:AADF -  -  -  -  ALUOr: 			;; [or]
   68 D1:AADF CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 96 
              B2 D1 -  -  		IntegerDispatch(Int32Or)
   69 D1:AAED -  -  -  -  
   70 D1:AAED -  -  -  -  ALUXor: 		;; [eor]
   71 D1:AAED CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 A3 
              B2 D1 -  -  		IntegerDispatch(Int32Xor)
   72 D1:AAFB -  -  -  -  
   73 D1:AAFB -  -  -  -  ; ***************************************************************************************
   74 D1:AAFB -  -  -  -  ;
   75 D1:AAFB -  -  -  -  ;									Changes and Updates
   76 D1:AAFB -  -  -  -  ;
   77 D1:AAFB -  -  -  -  ; ***************************************************************************************
   78 D1:AAFB -  -  -  -  ;
   79 D1:AAFB -  -  -  -  ;		Date			Notes
   80 D1:AAFB -  -  -  -  ;		==== 			=====
   81 D1:AAFB -  -  -  -  ;
   82 D1:AAFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 D1:AAFB -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AAFB -  -  -  -  ; ***************************************************************************************
    2 D1:AAFB -  -  -  -  ; ***************************************************************************************
    3 D1:AAFB -  -  -  -  ;
    4 D1:AAFB -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AAFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAFB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAFB -  -  -  -  ;		Reviewed :	No
    8 D1:AAFB -  -  -  -  ;		Purpose :	Binary reference operators $ ! ?
    9 D1:AAFB -  -  -  -  ;
   10 D1:AAFB -  -  -  -  ; ***************************************************************************************
   11 D1:AAFB -  -  -  -  ; ***************************************************************************************
   12 D1:AAFB -  -  -  -  
   13 D1:AAFB -  -  -  -  ; ***************************************************************************************
   14 D1:AAFB -  -  -  -  ;
   15 D1:AAFB -  -  -  -  ; 									<l> <op> <r>
   16 D1:AAFB -  -  -  -  ;
   17 D1:AAFB -  -  -  -  ; ***************************************************************************************
   18 D1:AAFB -  -  -  -  
   19 D1:AAFB -  -  -  -  ALULongReference:			;; [!]
   20 D1:AAFB CD 0B AB D1 		call 	BRGetAddress 				; calculate address
   21 D1:AAFF 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AB01 CB F9 -  -  		set 	CIsReference,c
   23 D1:AB03 C9 -  -  -  		ret
   24 D1:AB04 -  -  -  -  
   25 D1:AB04 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AB04 CD FB AA D1 		call 	ALULongReference
   27 D1:AB08 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AB0A C9 -  -  -  		ret
   29 D1:AB0B -  -  -  -  
   30 D1:AB0B -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AB0B CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 19 
              AB D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AB19 -  -  -  -  _BRGAMain:		
   33 D1:AB19 CD 77 B2 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AB1D CD 8F AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AB21 C9 -  -  -  		ret
   36 D1:AB22 -  -  -  -  
   37 D1:AB22 -  -  -  -  ; ***************************************************************************************
   38 D1:AB22 -  -  -  -  ;
   39 D1:AB22 -  -  -  -  ;									Changes and Updates
   40 D1:AB22 -  -  -  -  ;
   41 D1:AB22 -  -  -  -  ; ***************************************************************************************
   42 D1:AB22 -  -  -  -  ;
   43 D1:AB22 -  -  -  -  ;		Date			Notes
   44 D1:AB22 -  -  -  -  ;		==== 			=====
   45 D1:AB22 -  -  -  -  ;
   46 D1:AB22 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB22 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AB22 -  -  -  -  ; ***************************************************************************************
    2 D1:AB22 -  -  -  -  ; ***************************************************************************************
    3 D1:AB22 -  -  -  -  ;
    4 D1:AB22 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AB22 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB22 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB22 -  -  -  -  ;		Reviewed :	No
    8 D1:AB22 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AB22 -  -  -  -  ;
   10 D1:AB22 -  -  -  -  ; ***************************************************************************************
   11 D1:AB22 -  -  -  -  ; ***************************************************************************************
   12 D1:AB22 -  -  -  -  
   13 D1:AB22 -  -  -  -  #macro compare_equals(n)
   14 D1:AB22             		call 	CompareBaseCode
   15 D1:AB22             		cp 		n
   16 D1:AB22             		jr 		z,UnaryInt32True
   17 D1:AB22             		jr 		UnaryInt32False
   18 D1:AB22             #endmacro
   19 D1:AB22 -  -  -  -  
   20 D1:AB22 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AB22             		call 	CompareBaseCode
   22 D1:AB22             		cp 		n
   23 D1:AB22             		jr 		nz,UnaryInt32True
   24 D1:AB22             		jr 		UnaryInt32False
   25 D1:AB22             #endmacro
   26 D1:AB22 -  -  -  -  
   27 D1:AB22 -  -  -  -  ; ***************************************************************************************
   28 D1:AB22 -  -  -  -  ;
   29 D1:AB22 -  -  -  -  ; 								Return True/False
   30 D1:AB22 -  -  -  -  ;
   31 D1:AB22 -  -  -  -  ; ***************************************************************************************
   32 D1:AB22 -  -  -  -  
   33 D1:AB22 -  -  -  -  UnaryInt32True:	
   34 D1:AB22 3E FF -  -  		ld 		a,255
   35 D1:AB24 18 01 -  -  		jr 		_Int32Logical
   36 D1:AB26 -  -  -  -  UnaryInt32False: 
   37 D1:AB26 AF -  -  -  		xor 	a
   38 D1:AB27 -  -  -  -  _Int32Logical:
   39 D1:AB27 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AB28 67 -  -  -  		ld 		h,a
   41 D1:AB29 D9 -  -  -  		exx
   42 D1:AB2A 6F -  -  -  		ld 		l,a
   43 D1:AB2B 67 -  -  -  		ld 		h,a
   44 D1:AB2C D9 -  -  -  		exx
   45 D1:AB2D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AB2F C9 -  -  -  		ret
   47 D1:AB30 -  -  -  -  
   48 D1:AB30 -  -  -  -  ; ***************************************************************************************
   49 D1:AB30 -  -  -  -  ;
   50 D1:AB30 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AB30 -  -  -  -  ;
   52 D1:AB30 -  -  -  -  ; ***************************************************************************************
   53 D1:AB30 -  -  -  -  
   54 D1:AB30 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AB30 CD 6C AB D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AB3A -  -  -  -  
   57 D1:AB3A -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AB3A CD 6C AB D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AB44 -  -  -  -  
   60 D1:AB44 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AB44 CD 6C AB D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AB4E -  -  -  -  
   63 D1:AB4E -  -  -  -  ; ***************************************************************************************
   64 D1:AB4E -  -  -  -  ;
   65 D1:AB4E -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AB4E -  -  -  -  ;
   67 D1:AB4E -  -  -  -  ; ***************************************************************************************
   68 D1:AB4E -  -  -  -  
   69 D1:AB4E -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AB4E CD 6C AB D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AB58 -  -  -  -  
   72 D1:AB58 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AB58 CD 6C AB D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AB62 -  -  -  -  
   75 D1:AB62 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AB62 CD 6C AB D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AB6C -  -  -  -  
   78 D1:AB6C -  -  -  -  ; ***************************************************************************************
   79 D1:AB6C -  -  -  -  ;
   80 D1:AB6C -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AB6C -  -  -  -  ;
   82 D1:AB6C -  -  -  -  ; ***************************************************************************************
   83 D1:AB6C -  -  -  -  
   84 D1:AB6C -  -  -  -  CompareBaseCode:
   85 D1:AB6C CD A7 AB D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AB70 -  -  -  -  
   87 D1:AB70 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AB71 A1 -  -  -  		and 	c
   89 D1:AB72 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AB74 C2 86 AB D1 		jp 		nz,StringCompare
   91 D1:AB78 -  -  -  -  
   92 D1:AB78 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AB79 B1 -  -  -  		or 		c
   94 D1:AB7A CB 47 -  -  		bit 	CIsString,a 
   95 D1:AB7C CA B7 B2 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AB80 -  -  -  -  
   97 D1:AB80 3E 02 C3 1B 
              AA D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AB86 -  -  -  -  ;
   99 D1:AB86 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AB86 -  -  -  -  ;
  101 D1:AB86 -  -  -  -  StringCompare:
  102 D1:AB86 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AB87 BE -  -  -  		cp 		(hl)
  104 D1:AB88 38 0C -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AB8A 20 07 -  -  		jr 		nz,_SCLess
  106 D1:AB8C 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AB8D 23 -  -  -  		inc 	hl
  108 D1:AB8E FE 20 -  -  		cp 		' '
  109 D1:AB90 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AB92 C9 -  -  -  		ret
  111 D1:AB93 -  -  -  -  
  112 D1:AB93 -  -  -  -  _SCLess:
  113 D1:AB93 3E FF -  -  		ld 		a,$FF
  114 D1:AB95 C9 -  -  -  		ret
  115 D1:AB96 -  -  -  -  _SCGreater:
  116 D1:AB96 3E 01 -  -  		ld 		a,1
  117 D1:AB98 C9 -  -  -  		ret
  118 D1:AB99 -  -  -  -  
  119 D1:AB99 3E 0C C3 1B 
              AA D1 -  -  		ERR_TODO()
  120 D1:AB9F -  -  -  -  
  121 D1:AB9F -  -  -  -  ; ***************************************************************************************
  122 D1:AB9F -  -  -  -  ;
  123 D1:AB9F -  -  -  -  ;									Changes and Updates
  124 D1:AB9F -  -  -  -  ;
  125 D1:AB9F -  -  -  -  ; ***************************************************************************************
  126 D1:AB9F -  -  -  -  ;
  127 D1:AB9F -  -  -  -  ;		Date			Notes
  128 D1:AB9F -  -  -  -  ;		==== 			=====
  129 D1:AB9F -  -  -  -  ;
  130 D1:AB9F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AB9F -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AB9F -  -  -  -  ; ***************************************************************************************
    2 D1:AB9F -  -  -  -  ; ***************************************************************************************
    3 D1:AB9F -  -  -  -  ;
    4 D1:AB9F -  -  -  -  ;		Name : 		utility.asm
    5 D1:AB9F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB9F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB9F -  -  -  -  ;		Reviewed :	No
    8 D1:AB9F -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AB9F -  -  -  -  ;
   10 D1:AB9F -  -  -  -  ; ***************************************************************************************
   11 D1:AB9F -  -  -  -  ; ***************************************************************************************
   12 D1:AB9F -  -  -  -  
   13 D1:AB9F -  -  -  -  ; ***************************************************************************************
   14 D1:AB9F -  -  -  -  ;
   15 D1:AB9F -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AB9F -  -  -  -  ;
   17 D1:AB9F -  -  -  -  ; ***************************************************************************************
   18 D1:AB9F -  -  -  -  
   19 D1:AB9F -  -  -  -  SwapHLDE:
   20 D1:AB9F EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ABA0 D9 -  -  -  			exx
   22 D1:ABA1 EB -  -  -  			ex 		de,hl
   23 D1:ABA2 D9 -  -  -  			exx
   24 D1:ABA3 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ABA4 41 -  -  -  			ld 		b,c
   26 D1:ABA5 4F -  -  -  			ld 		c,a
   27 D1:ABA6 C9 -  -  -  			ret
   28 D1:ABA7 -  -  -  -  
   29 D1:ABA7 -  -  -  -  ; ***************************************************************************************
   30 D1:ABA7 -  -  -  -  ;
   31 D1:ABA7 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ABA7 -  -  -  -  ;
   33 D1:ABA7 -  -  -  -  ; ***************************************************************************************
   34 D1:ABA7 -  -  -  -  
   35 D1:ABA7 -  -  -  -  DereferenceBoth:
   36 D1:ABA7 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ABA9 C4 62 AC D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ABAD CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ABAF C8 -  -  -  			ret 	z
   40 D1:ABB0 CD 9F AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ABB4 CD 62 AC D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ABB8 CD 9F AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ABBC C9 -  -  -  			ret
   44 D1:ABBD -  -  -  -  
   45 D1:ABBD -  -  -  -  ; ***************************************************************************************
   46 D1:ABBD -  -  -  -  ;
   47 D1:ABBD -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ABBD -  -  -  -  ;
   49 D1:ABBD -  -  -  -  ; ***************************************************************************************
   50 D1:ABBD -  -  -  -  
   51 D1:ABBD -  -  -  -  NegateHLHL:	
   52 D1:ABBD CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ABBF C2 79 AA D1 			jp 		nz,TypeMismatch
   54 D1:ABC3 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ABC5 C4 62 AC D1 			call 	nz,Dereference 			; if required.
   56 D1:ABC9 CD E1 B2 D1 			call 	Int32Negate
   57 D1:ABCD C9 -  -  -  			ret
Listing for file "_build.asm"
   27 D1:ABCE -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ABCE -  -  -  -  ; ***************************************************************************************
    2 D1:ABCE -  -  -  -  ; ***************************************************************************************
    3 D1:ABCE -  -  -  -  ;
    4 D1:ABCE -  -  -  -  ;		Name : 		expression.asm
    5 D1:ABCE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABCE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABCE -  -  -  -  ;		Reviewed :	None
    8 D1:ABCE -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ABCE -  -  -  -  ;
   10 D1:ABCE -  -  -  -  ; ***************************************************************************************
   11 D1:ABCE -  -  -  -  ; ***************************************************************************************
   12 D1:ABCE -  -  -  -  
   13 D1:ABCE -  -  -  -  ; ***************************************************************************************
   14 D1:ABCE -  -  -  -  ;
   15 D1:ABCE -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ABCE -  -  -  -  ;
   17 D1:ABCE -  -  -  -  ; ***************************************************************************************
   18 D1:ABCE -  -  -  -  
   19 D1:ABCE -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ABCE AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ABCF -  -  -  -  EvaluateAtPrecedence:
   22 D1:ABCF F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ABD0 -  -  -  -  		;
   24 D1:ABD0 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ABD0 -  -  -  -  		;
   26 D1:ABD0 CD BE AC D1 		call 	EvaluateTerm 				; get term
   27 D1:ABD4 -  -  -  -  		;
   28 D1:ABD4 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ABD4 -  -  -  -  		;
   30 D1:ABD4 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ABD5 -  -  -  -  _EAPLoop:
   32 D1:ABD5 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ABD8 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ABDA D8 -  -  -  		ret 	c
   35 D1:ABDB FE 93 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ABDD D0 -  -  -  		ret 	nc
   37 D1:ABDE -  -  -  -  		;
   38 D1:ABDE -  -  -  -  		; 		Get the precedence.
   39 D1:ABDE -  -  -  -  		;
   40 D1:ABDE E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ABDF D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ABE1 21 20 AF D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ABE5 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ABE6 6F -  -  -  		ld 		l,a
   45 D1:ABE7 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ABE8 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ABE9 -  -  -  -  		;
   48 D1:ABE9 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ABE9 -  -  -  -  		;
   50 D1:ABE9 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ABEA BB -  -  -  		cp 		e
   52 D1:ABEB D0 -  -  -  		ret 	nc
   53 D1:ABEC -  -  -  -  
   54 D1:ABEC -  -  -  -  		;
   55 D1:ABEC -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ABEC -  -  -  -  		;
   57 D1:ABEC D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ABED -  -  -  -  		;
   59 D1:ABED DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ABF0 F5 -  -  -  		push 	af
   61 D1:ABF1 -  -  -  -  		;
   62 D1:ABF1 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ABF2 D9 -  -  -  		exx 								; save HL'
   64 D1:ABF3 E5 -  -  -  		push 	hl
   65 D1:ABF4 D9 -  -  -  		exx 								
   66 D1:ABF5 E5 -  -  -  		push 	hl 							; save HL
   67 D1:ABF6 -  -  -  -  		;
   68 D1:ABF6 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ABF8 -  -  -  -  		;
   70 D1:ABF8 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ABF8 -  -  -  -  		;
   72 D1:ABF8 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ABF9 CD CF AB D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ABFD -  -  -  -  		;
   75 D1:ABFD -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ABFD -  -  -  -  		;
   77 D1:ABFD 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ABFE -  -  -  -  
   79 D1:ABFE EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ABFF E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AC00 D9 -  -  -  		exx
   82 D1:AC01 EB -  -  -  		ex 		de,hl
   83 D1:AC02 E1 -  -  -  		pop 	hl
   84 D1:AC03 D9 -  -  -  		exx
   85 D1:AC04 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AC05 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AC06 -  -  -  -  		;
   88 D1:AC06 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AC06 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AC06 -  -  -  -  		;
   91 D1:AC06 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AC07 -  -  -  -  		;
   93 D1:AC07 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AC07 -  -  -  -  		;
   95 D1:AC07 D5 -  -  -  		push 	de
   96 D1:AC08 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AC09 E6 7F 21 00 
              00 00 6F 29 
              29 11 36 B0 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AC1E E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AC1F D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AC20 CD D5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AC24 -  -  -  -  		;
  102 D1:AC24 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AC25 -  -  -  -  		;
  104 D1:AC25 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AC27 -  -  -  -  
  106 D1:AC27 -  -  -  -  ; ***************************************************************************************
  107 D1:AC27 -  -  -  -  ;
  108 D1:AC27 -  -  -  -  ;									Changes and Updates
  109 D1:AC27 -  -  -  -  ;
  110 D1:AC27 -  -  -  -  ; ***************************************************************************************
  111 D1:AC27 -  -  -  -  ;
  112 D1:AC27 -  -  -  -  ;		Date			Notes
  113 D1:AC27 -  -  -  -  ;		==== 			=====
  114 D1:AC27 -  -  -  -  ;
  115 D1:AC27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC27 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AC27 -  -  -  -  ; ***************************************************************************************
    2 D1:AC27 -  -  -  -  ; ***************************************************************************************
    3 D1:AC27 -  -  -  -  ;
    4 D1:AC27 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AC27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC27 -  -  -  -  ;		Reviewed :	No
    8 D1:AC27 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AC27 -  -  -  -  ;
   10 D1:AC27 -  -  -  -  ; ***************************************************************************************
   11 D1:AC27 -  -  -  -  ; ***************************************************************************************
   12 D1:AC27 -  -  -  -  
   13 D1:AC27 -  -  -  -  ; ***************************************************************************************
   14 D1:AC27 -  -  -  -  ;
   15 D1:AC27 -  -  -  -  ; 						Evaluate and dereference an expression
   16 D1:AC27 -  -  -  -  ;
   17 D1:AC27 -  -  -  -  ; ***************************************************************************************
   18 D1:AC27 -  -  -  -  
   19 D1:AC27 -  -  -  -  EvaluateValue:
   20 D1:AC27 CD CE AB D1 		call 	EvaluateAtPrecedence0
   21 D1:AC2B C3 62 AC D1 		jp 		Dereference
   22 D1:AC2F -  -  -  -  
   23 D1:AC2F -  -  -  -  ; ***************************************************************************************
   24 D1:AC2F -  -  -  -  ;
   25 D1:AC2F -  -  -  -  ; 									Evaluate a number
   26 D1:AC2F -  -  -  -  ;
   27 D1:AC2F -  -  -  -  ; ***************************************************************************************
   28 D1:AC2F -  -  -  -  
   29 D1:AC2F -  -  -  -  EvaluateInteger:
   30 D1:AC2F CD 27 AC D1 		call 	EvaluateValue
   31 D1:AC33 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   32 D1:AC35 C8 -  -  -  		ret 	z
   33 D1:AC36 C3 79 AA D1 		jp 		TypeMismatch
   34 D1:AC3A -  -  -  -  
   35 D1:AC3A -  -  -  -  ; ***************************************************************************************
   36 D1:AC3A -  -  -  -  ;
   37 D1:AC3A -  -  -  -  ; 									Evaluate an 8 bit integer
   38 D1:AC3A -  -  -  -  ;
   39 D1:AC3A -  -  -  -  ; ***************************************************************************************
   40 D1:AC3A -  -  -  -  
   41 D1:AC3A -  -  -  -  Evaluate8BitInteger:
   42 D1:AC3A CD 2F AC D1 		call 	EvaluateInteger
   43 D1:AC3E D9 -  -  -  		exx  								; check if upper 3 bytes zero
   44 D1:AC3F 7C -  -  -  		ld 		a,h
   45 D1:AC40 B5 -  -  -  		or 		l
   46 D1:AC41 D9 -  -  -  		exx 	
   47 D1:AC42 B4 -  -  -  		or 		h
   48 D1:AC43 C2 7F AA D1 		jp 		nz,BadValue
   49 D1:AC47 7D -  -  -  		ld 		a,l 						; return integer in A
   50 D1:AC48 C9 -  -  -  		ret
   51 D1:AC49 -  -  -  -  		
   52 D1:AC49 -  -  -  -  ; ***************************************************************************************
   53 D1:AC49 -  -  -  -  ;
   54 D1:AC49 -  -  -  -  ; 									Evaluate a string
   55 D1:AC49 -  -  -  -  ;
   56 D1:AC49 -  -  -  -  ; ***************************************************************************************
   57 D1:AC49 -  -  -  -  
   58 D1:AC49 -  -  -  -  EvaluateStringOnly:
   59 D1:AC49 CD 27 AC D1 		call 	EvaluateValue
   60 D1:AC4D CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   61 D1:AC4F CA 79 AA D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   62 D1:AC53 C9 -  -  -  		ret
   63 D1:AC54 -  -  -  -  
   64 D1:AC54 -  -  -  -  ; ***************************************************************************************
   65 D1:AC54 -  -  -  -  ;
   66 D1:AC54 -  -  -  -  ; 								Return 8/16 bit constant
   67 D1:AC54 -  -  -  -  ;
   68 D1:AC54 -  -  -  -  ; ***************************************************************************************
   69 D1:AC54 -  -  -  -  
   70 D1:AC54 -  -  -  -  Return8BitConstant:
   71 D1:AC54 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   72 D1:AC58 6F -  -  -  		ld 		l,a
   73 D1:AC59 -  -  -  -  Return16BitConstant:
   74 D1:AC59 D9 -  -  -  		exx 								; clear HL'
   75 D1:AC5A 21 00 00 00 		ld 		hl,0
   76 D1:AC5E D9 -  -  -  		exx
   77 D1:AC5F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
   78 D1:AC61 C9 -  -  -  		ret
   79 D1:AC62 -  -  -  -  
   80 D1:AC62 -  -  -  -  ; ***************************************************************************************
   81 D1:AC62 -  -  -  -  ;
   82 D1:AC62 -  -  -  -  ;									Changes and Updates
   83 D1:AC62 -  -  -  -  ;
   84 D1:AC62 -  -  -  -  ; ***************************************************************************************
   85 D1:AC62 -  -  -  -  ;
   86 D1:AC62 -  -  -  -  ;		Date			Notes
   87 D1:AC62 -  -  -  -  ;		==== 			=====
   88 D1:AC62 -  -  -  -  ;
   89 D1:AC62 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AC62 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AC62 -  -  -  -  ; ***************************************************************************************
    2 D1:AC62 -  -  -  -  ; ***************************************************************************************
    3 D1:AC62 -  -  -  -  ;
    4 D1:AC62 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AC62 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC62 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AC62 -  -  -  -  ;		Reviewed :	No
    8 D1:AC62 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AC62 -  -  -  -  ;
   10 D1:AC62 -  -  -  -  ; ***************************************************************************************
   11 D1:AC62 -  -  -  -  ; ***************************************************************************************
   12 D1:AC62 -  -  -  -  
   13 D1:AC62 -  -  -  -  ; ***************************************************************************************
   14 D1:AC62 -  -  -  -  ;
   15 D1:AC62 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AC62 -  -  -  -  ;
   17 D1:AC62 -  -  -  -  ; ***************************************************************************************
   18 D1:AC62 -  -  -  -  
   19 D1:AC62 -  -  -  -  Dereference:
   20 D1:AC62 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AC64 C8 -  -  -  		ret 	z
   22 D1:AC65 -  -  -  -  
   23 D1:AC65 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AC67 -  -  -  -  		
   25 D1:AC67 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AC69 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AC6B -  -  -  -  
   28 D1:AC6B CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AC6D 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AC6F -  -  -  -  
   31 D1:AC6F E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AC70 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AC72 D9 -  -  -  		exx
   34 D1:AC73 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AC74 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AC75 23 -  -  -  		inc  	hl
   37 D1:AC76 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AC78 D9 -  -  -  		exx 								; fix back
   39 D1:AC79 C9 -  -  -  		ret
   40 D1:AC7A -  -  -  -  
   41 D1:AC7A -  -  -  -  _DeRefByte:		
   42 D1:AC7A 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AC7B 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AC7F 6F -  -  -  		ld	 	l,a
   45 D1:AC80 D9 -  -  -  		exx
   46 D1:AC81 21 00 00 00 		ld 		hl,$0000
   47 D1:AC85 D9 -  -  -  		exx
   48 D1:AC86 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AC88 C9 -  -  -  		ret
   50 D1:AC89 -  -  -  -  
   51 D1:AC89 -  -  -  -  _DRInternal:
   52 D1:AC89 3E 04 C3 1B 
              AA D1 -  -  		ERR_DISABLED
   53 D1:AC8F -  -  -  -  
   54 D1:AC8F -  -  -  -  ; ***************************************************************************************
   55 D1:AC8F -  -  -  -  ;
   56 D1:AC8F -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AC8F -  -  -  -  ;
   58 D1:AC8F -  -  -  -  ; ***************************************************************************************
   59 D1:AC8F -  -  -  -  
   60 D1:AC8F -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AC8F -  -  -  -  		#ifdef EZ80
   62 D1:AC8F 22 DB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AC93 D9 -  -  -  		exx
   64 D1:AC94 22 DD A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AC98 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AC9C D9 -  -  -  		exx
   67 D1:AC9D 2A DB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ACA1 -  -  -  -  		#endif
   69 D1:ACA1 C9 -  -  -  		ret
   70 D1:ACA2 -  -  -  -  
   71 D1:ACA2 -  -  -  -  ; ***************************************************************************************
   72 D1:ACA2 -  -  -  -  ;
   73 D1:ACA2 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ACA2 -  -  -  -  ;
   75 D1:ACA2 -  -  -  -  ; ***************************************************************************************
   76 D1:ACA2 -  -  -  -  
   77 D1:ACA2 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ACA2 -  -  -  -  		#ifdef EZ80
   79 D1:ACA2 22 DB A8 D1 		ld 		(AConvert),hl
   80 D1:ACA6 21 00 00 00 		ld 		hl,$0000
   81 D1:ACAA 22 DE A8 D1 		ld 		(AConvert+3),hl
   82 D1:ACAE D9 -  -  -  		exx
   83 D1:ACAF 2A DD A8 D1 		ld 		hl,(AConvert+2)
   84 D1:ACB3 D9 -  -  -  		exx
   85 D1:ACB4 AF -  -  -  		xor 	a
   86 D1:ACB5 32 DD A8 D1 		ld 		(AConvert+2),a
   87 D1:ACB9 2A DB A8 D1 		ld 		hl,(AConvert)
   88 D1:ACBD -  -  -  -  		#endif
   89 D1:ACBD C9 -  -  -  		ret
   90 D1:ACBE -  -  -  -  
   91 D1:ACBE -  -  -  -  ; ***************************************************************************************
   92 D1:ACBE -  -  -  -  ;
   93 D1:ACBE -  -  -  -  ;									Changes and Updates
   94 D1:ACBE -  -  -  -  ;
   95 D1:ACBE -  -  -  -  ; ***************************************************************************************
   96 D1:ACBE -  -  -  -  ;
   97 D1:ACBE -  -  -  -  ;		Date			Notes
   98 D1:ACBE -  -  -  -  ;		==== 			=====
   99 D1:ACBE -  -  -  -  ;
  100 D1:ACBE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:ACBE -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:ACBE -  -  -  -  ; ***************************************************************************************
    2 D1:ACBE -  -  -  -  ; ***************************************************************************************
    3 D1:ACBE -  -  -  -  ;
    4 D1:ACBE -  -  -  -  ;		Name : 		term.asm
    5 D1:ACBE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACBE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACBE -  -  -  -  ;		Reviewed :	No
    8 D1:ACBE -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:ACBE -  -  -  -  ;
   10 D1:ACBE -  -  -  -  ; ***************************************************************************************
   11 D1:ACBE -  -  -  -  ; ***************************************************************************************
   12 D1:ACBE -  -  -  -  
   13 D1:ACBE -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:ACBE             		add_hlhl_16
   15 D1:ACBE             		exx
   16 D1:ACBE             		adc_hlhl_16
   17 D1:ACBE             		exx
   18 D1:ACBE             #endmacro
   19 D1:ACBE -  -  -  -  
   20 D1:ACBE -  -  -  -  ; ***************************************************************************************
   21 D1:ACBE -  -  -  -  ;
   22 D1:ACBE -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:ACBE -  -  -  -  ;
   24 D1:ACBE -  -  -  -  ; ***************************************************************************************
   25 D1:ACBE -  -  -  -  ;
   26 D1:ACBE -  -  -  -  ; 		Terms can be:
   27 D1:ACBE -  -  -  -  ;
   28 D1:ACBE -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:ACBE -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:ACBE -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:ACBE -  -  -  -  ; 			$ ? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:ACBE -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:ACBE -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:ACBE -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:ACBE -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:ACBE -  -  -  -  ; 														reference of some sort.
   37 D1:ACBE -  -  -  -  ;
   38 D1:ACBE -  -  -  -  ; ***************************************************************************************
   39 D1:ACBE -  -  -  -  
   40 D1:ACBE -  -  -  -  EvaluateTerm:		
   41 D1:ACBE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:ACC0 D9 -  -  -  		exx
   43 D1:ACC1 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:ACC5 D9 -  -  -  		exx
   45 D1:ACC6 21 00 00 00 		ld 		hl,$0000		
   46 D1:ACCA -  -  -  -  		;
   47 D1:ACCA DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:ACCD FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:ACCF 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:ACD1 DA 84 AD D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:ACD5 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:ACD7 C2 2D AD D1 		jp 		nz,_ETFoundKeyword 
   53 D1:ACDB -  -  -  -  		;
   54 D1:ACDB -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:ACDB -  -  -  -  		;
   56 D1:ACDB -  -  -  -  _ETIntegerConstant:
   57 D1:ACDB -  -  -  -  		;
   58 D1:ACDB -  -  -  -  _ETIntegerLoop:		
   59 D1:ACDB DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:ACDE E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:ACE0 B5 -  -  -  		or 		l 							; or into L
   62 D1:ACE1 6F -  -  -  		ld 		l,a
   63 D1:ACE2 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:ACE4 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:ACE7 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:ACE9 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:ACEB D8 -  -  -  		ret 	c
   68 D1:ACEC -  -  -  -  
   69 D1:ACEC 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:ACF3 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:ACFA 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AD01 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AD08 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AD0F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AD16 -  -  -  -  
   76 D1:AD16 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AD18 -  -  -  -  		;
   78 D1:AD18 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AD18 -  -  -  -  		;
   80 D1:AD18 -  -  -  -  _ETStringMarker:		
   81 D1:AD18 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AD1A DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AD1C DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AD1E E1 -  -  -  		pop 	hl
   85 D1:AD1F 11 00 00 00 		ld 		de,$0000
   86 D1:AD23 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AD26 DD 19 -  -  		add 	ix,de
   88 D1:AD28 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AD2A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AD2C C9 -  -  -  		ret
   91 D1:AD2D -  -  -  -  		;
   92 D1:AD2D -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AD2D -  -  -  -  		;
   94 D1:AD2D -  -  -  -  _ETFoundKeyword:
   95 D1:AD2D DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AD2F FE 93 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AD31 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AD33 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AD35 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AD37 -  -  -  -  		;
  101 D1:AD37 -  -  -  -  		;		Unary group 0
  102 D1:AD37 -  -  -  -  		;
  103 D1:AD37 E6 7F 21 00 
              00 00 6F 29 
              29 11 36 B0 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AD4C C3 D5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AD50 -  -  -  -  
  106 D1:AD50 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AD50 FE 89 -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AD52 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AD54 -  -  -  -  		;
  110 D1:AD54 -  -  -  -  		; 		- term
  111 D1:AD54 -  -  -  -  		;
  112 D1:AD54 CD BE AC D1 		call 	EvaluateTerm 				; evaluate term
  113 D1:AD58 CD BD AB D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AD5C C9 -  -  -  		ret
  115 D1:AD5D -  -  -  -  		;
  116 D1:AD5D -  -  -  -  		;		! ? $ indirection check
  117 D1:AD5D -  -  -  -  		;
  118 D1:AD5D -  -  -  -  _ETCheckIndirection:	
  119 D1:AD5D FE 84 -  -  		cp 		KWD_QMARK 					; check if ? ! $
  120 D1:AD5F 28 0A -  -  		jr 		z,_ETIndirection
  121 D1:AD61 FE 95 -  -  		cp 		KWD_DOLLAR
  122 D1:AD63 28 06 -  -  		jr 		z,_ETIndirection
  123 D1:AD65 FE 83 -  -  		cp 		KWD_PLING
  124 D1:AD67 C2 85 AA D1 		jp 		nz,SyntaxError 				; give up otherwise.
  125 D1:AD6B -  -  -  -  		;
  126 D1:AD6B -  -  -  -  		; 		! ? $ indirection
  127 D1:AD6B -  -  -  -  		;
  128 D1:AD6B -  -  -  -  _ETIndirection:
  129 D1:AD6B F5 -  -  -  		push 	af 							; check type of indirection.
  130 D1:AD6C CD BE AC D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  131 D1:AD70 CD 8F AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  132 D1:AD74 F1 -  -  -  		pop 	af 							; get type back
  133 D1:AD75 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  134 D1:AD77 CB F9 -  -  		set 	CIsReference,c
  135 D1:AD79 FE 83 -  -  		cp 		KWD_PLING
  136 D1:AD7B C8 -  -  -  		ret 	z
  137 D1:AD7C CB F1 -  -  		set 	CIsByteReference,c 			; byte ?
  138 D1:AD7E FE 84 -  -  		cp 		KWD_QMARK
  139 D1:AD80 C8 -  -  -  		ret 	z
  140 D1:AD81 0E 01 -  -  		ld 		c,XTYPE_STRING 				; otherwise string address.
  141 D1:AD83 C9 -  -  -  		ret
  142 D1:AD84 -  -  -  -  		;
  143 D1:AD84 -  -  -  -  		; 		Found an identifier.
  144 D1:AD84 -  -  -  -  		;
  145 D1:AD84 -  -  -  -  _ETVariable:
  146 D1:AD84 3E 0C C3 1B 
              AA D1 -  -  		ERR_TODO
  147 D1:AD8A 3E 0D C3 1B 
              AA D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 D1:AD90 -  -  -  -  		
  149 D1:AD90 -  -  -  -  ; ***************************************************************************************
  150 D1:AD90 -  -  -  -  ;
  151 D1:AD90 -  -  -  -  ;									Changes and Updates
  152 D1:AD90 -  -  -  -  ;
  153 D1:AD90 -  -  -  -  ; ***************************************************************************************
  154 D1:AD90 -  -  -  -  ;
  155 D1:AD90 -  -  -  -  ;		Date			Notes
  156 D1:AD90 -  -  -  -  ;		==== 			=====
  157 D1:AD90 -  -  -  -  ;
  158 D1:AD90 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD90 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AD90 -  -  -  -  ; ***************************************************************************************
    2 D1:AD90 -  -  -  -  ; ***************************************************************************************
    3 D1:AD90 -  -  -  -  ;
    4 D1:AD90 -  -  -  -  ;		Name : 		page.asm
    5 D1:AD90 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD90 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD90 -  -  -  -  ;		Reviewed :	No
    8 D1:AD90 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AD90 -  -  -  -  ;
   10 D1:AD90 -  -  -  -  ; ***************************************************************************************
   11 D1:AD90 -  -  -  -  ; ***************************************************************************************
   12 D1:AD90 -  -  -  -  
   13 D1:AD90 -  -  -  -  ; ***************************************************************************************
   14 D1:AD90 -  -  -  -  ;
   15 D1:AD90 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AD90 -  -  -  -  ;
   17 D1:AD90 -  -  -  -  ; ***************************************************************************************
   18 D1:AD90 -  -  -  -  
   19 D1:AD90 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AD90 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AD94 D9 -  -  -  			exx
   22 D1:AD95 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AD99 D9 -  -  -  			exx
   24 D1:AD9A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AD9C C9 -  -  -  			ret
   26 D1:AD9D -  -  -  -  
   27 D1:AD9D -  -  -  -  ; ***************************************************************************************
   28 D1:AD9D -  -  -  -  ;
   29 D1:AD9D -  -  -  -  ;									Changes and Updates
   30 D1:AD9D -  -  -  -  ;
   31 D1:AD9D -  -  -  -  ; ***************************************************************************************
   32 D1:AD9D -  -  -  -  ;
   33 D1:AD9D -  -  -  -  ;		Date			Notes
   34 D1:AD9D -  -  -  -  ;		==== 			=====
   35 D1:AD9D -  -  -  -  ;
   36 D1:AD9D -  -  -  -  ; ***************************************************************************************
   37 D1:AD9D -  -  -  -  			
Listing for file "_build.asm"
   32 D1:AD9D -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:AD9D -  -  -  -  ; ***************************************************************************************
    2 D1:AD9D -  -  -  -  ; ***************************************************************************************
    3 D1:AD9D -  -  -  -  ;
    4 D1:AD9D -  -  -  -  ;		Name : 		simple.asm
    5 D1:AD9D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD9D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD9D -  -  -  -  ;		Reviewed :	No
    8 D1:AD9D -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:AD9D -  -  -  -  ;
   10 D1:AD9D -  -  -  -  ; ***************************************************************************************
   11 D1:AD9D -  -  -  -  ; ***************************************************************************************
   12 D1:AD9D -  -  -  -  
   13 D1:AD9D -  -  -  -  ; ***************************************************************************************
   14 D1:AD9D -  -  -  -  ;
   15 D1:AD9D -  -  -  -  ;								( unary function (think about it)
   16 D1:AD9D -  -  -  -  ;
   17 D1:AD9D -  -  -  -  ; ***************************************************************************************
   18 D1:AD9D -  -  -  -  
   19 D1:AD9D -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:AD9D CD CE AB D1 		call 	EvaluateAtPrecedence0
   21 D1:ADA1 C3 F3 A9 D1 		jp  	CheckRightBracket
   22 D1:ADA5 -  -  -  -  
   23 D1:ADA5 -  -  -  -  ; ***************************************************************************************
   24 D1:ADA5 -  -  -  -  ;
   25 D1:ADA5 -  -  -  -  ;									Handle &x
   26 D1:ADA5 -  -  -  -  ;
   27 D1:ADA5 -  -  -  -  ; ***************************************************************************************
   28 D1:ADA5 -  -  -  -  
   29 D1:ADA5 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:ADA5 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:ADA8 E6 C0 -  -  		and 		$C0
   32 D1:ADAA FE 40 -  -  		cp 			$40
   33 D1:ADAC C2 85 AA D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:ADB0 C3 BE AC D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:ADB4 -  -  -  -  
   36 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   37 D1:ADB4 -  -  -  -  ;
   38 D1:ADB4 -  -  -  -  ;									Changes and Updates
   39 D1:ADB4 -  -  -  -  ;
   40 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   41 D1:ADB4 -  -  -  -  ;
   42 D1:ADB4 -  -  -  -  ;		Date			Notes
   43 D1:ADB4 -  -  -  -  ;		==== 			=====
   44 D1:ADB4 -  -  -  -  ;
   45 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   46 D1:ADB4 -  -  -  -  		
Listing for file "_build.asm"
   33 D1:ADB4 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:ADB4 -  -  -  -  ; ***************************************************************************************
    2 D1:ADB4 -  -  -  -  ; ***************************************************************************************
    3 D1:ADB4 -  -  -  -  ;
    4 D1:ADB4 -  -  -  -  ;		Name : 		clear.asm
    5 D1:ADB4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADB4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADB4 -  -  -  -  ;		Reviewed :	No
    8 D1:ADB4 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:ADB4 -  -  -  -  ;
   10 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   11 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   12 D1:ADB4 -  -  -  -  
   13 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   14 D1:ADB4 -  -  -  -  ;
   15 D1:ADB4 -  -  -  -  ;										CLEAR command
   16 D1:ADB4 -  -  -  -  ;
   17 D1:ADB4 -  -  -  -  ; ***************************************************************************************
   18 D1:ADB4 -  -  -  -  
   19 D1:ADB4 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:ADB4 -  -  -  -  		;
   21 D1:ADB4 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:ADB4 -  -  -  -  		;
   23 D1:ADB4 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:ADB8 -  -  -  -  _CCFindLow:
   25 D1:ADB8 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:ADBC 5E -  -  -  		ld 		e,(hl)		
   27 D1:ADBD 19 -  -  -  		add 	hl,de
   28 D1:ADBE 7B -  -  -  		ld 		a,e
   29 D1:ADBF B7 -  -  -  		or 		a
   30 D1:ADC0 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:ADC2 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 D1:ADC3 23 -  -  -  		inc 	hl
   33 D1:ADC4 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   34 D1:ADC8 -  -  -  -  		;
   35 D1:ADC8 -  -  -  -  		; 	 		Reset the language stack
   36 D1:ADC8 -  -  -  -  		;
   37 D1:ADC8 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 D1:ADCC -  -  -  -  		;
   39 D1:ADCC 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 D1:ADCE 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:ADD2 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:ADD6 19 -  -  -  		add 	hl,de
   43 D1:ADD7 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:ADD9 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:ADDD -  -  -  -  		;
   46 D1:ADDD 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:ADE1 19 -  -  -  		add 	hl,de
   48 D1:ADE2 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:ADE6 -  -  -  -  		;
   50 D1:ADE6 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 D1:ADE6 -  -  -  -  		;
   52 D1:ADE6 -  -  -  -  
   53 D1:ADE6 -  -  -  -  		;
   54 D1:ADE6 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 D1:ADE6 -  -  -  -  		;
   56 D1:ADE6 -  -  -  -  
   57 D1:ADE6 C9 -  -  -  		ret
   58 D1:ADE7 -  -  -  -  
   59 D1:ADE7 -  -  -  -  ; ***************************************************************************************
   60 D1:ADE7 -  -  -  -  ;
   61 D1:ADE7 -  -  -  -  ;									Changes and Updates
   62 D1:ADE7 -  -  -  -  ;
   63 D1:ADE7 -  -  -  -  ; ***************************************************************************************
   64 D1:ADE7 -  -  -  -  ;
   65 D1:ADE7 -  -  -  -  ;		Date			Notes
   66 D1:ADE7 -  -  -  -  ;		==== 			=====
   67 D1:ADE7 -  -  -  -  ;
   68 D1:ADE7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:ADE7 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:ADE7 -  -  -  -  ; ***************************************************************************************
    2 D1:ADE7 -  -  -  -  ; ***************************************************************************************
    3 D1:ADE7 -  -  -  -  ;
    4 D1:ADE7 -  -  -  -  ;		Name : 		instance.asm
    5 D1:ADE7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADE7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADE7 -  -  -  -  ;		Reviewed :	No
    8 D1:ADE7 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:ADE7 -  -  -  -  ;
   10 D1:ADE7 -  -  -  -  ; ***************************************************************************************
   11 D1:ADE7 -  -  -  -  ; ***************************************************************************************
   12 D1:ADE7 -  -  -  -  
   13 D1:ADE7 -  -  -  -  ; ***************************************************************************************
   14 D1:ADE7 -  -  -  -  ;
   15 D1:ADE7 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:ADE7 -  -  -  -  ;
   17 D1:ADE7 -  -  -  -  ; ***************************************************************************************
   18 D1:ADE7 -  -  -  -  
   19 D1:ADE7 -  -  -  -  SetCurrentInstance:
   20 D1:ADE7 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:ADEC 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:ADF0 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:ADF5 -  -  -  -  
   24 D1:ADF5 C9 -  -  -  		ret
   25 D1:ADF6 -  -  -  -  
   26 D1:ADF6 -  -  -  -  
   27 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   28 D1:ADF6 -  -  -  -  ;
   29 D1:ADF6 -  -  -  -  ;									Changes and Updates
   30 D1:ADF6 -  -  -  -  ;
   31 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   32 D1:ADF6 -  -  -  -  ;
   33 D1:ADF6 -  -  -  -  ;		Date			Notes
   34 D1:ADF6 -  -  -  -  ;		==== 			=====
   35 D1:ADF6 -  -  -  -  ;
   36 D1:ADF6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:ADF6 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:ADF6 -  -  -  -  ; ***************************************************************************************
    2 D1:ADF6 -  -  -  -  ; ***************************************************************************************
    3 D1:ADF6 -  -  -  -  ;
    4 D1:ADF6 -  -  -  -  ;		Name : 		new.asm
    5 D1:ADF6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADF6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADF6 -  -  -  -  ;		Reviewed :	No
    8 D1:ADF6 -  -  -  -  ;		Purpose :	New command.
    9 D1:ADF6 -  -  -  -  ;
   10 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   11 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   12 D1:ADF6 -  -  -  -  
   13 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   14 D1:ADF6 -  -  -  -  ;
   15 D1:ADF6 -  -  -  -  ;										NEW command
   16 D1:ADF6 -  -  -  -  ;
   17 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   18 D1:ADF6 -  -  -  -  
   19 D1:ADF6 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:ADF6 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:ADFA 36 00 -  -  		ld 		(hl),0
   22 D1:ADFC CD B4 AD D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:AE00 3E 00 C3 1B 
              AA D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:AE06 -  -  -  -  
   25 D1:AE06 -  -  -  -  ; ***************************************************************************************
   26 D1:AE06 -  -  -  -  ;
   27 D1:AE06 -  -  -  -  ;									Changes and Updates
   28 D1:AE06 -  -  -  -  ;
   29 D1:AE06 -  -  -  -  ; ***************************************************************************************
   30 D1:AE06 -  -  -  -  ;
   31 D1:AE06 -  -  -  -  ;		Date			Notes
   32 D1:AE06 -  -  -  -  ;		==== 			=====
   33 D1:AE06 -  -  -  -  ;
   34 D1:AE06 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AE06 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:AE06 -  -  -  -  ; ***************************************************************************************
    2 D1:AE06 -  -  -  -  ; ***************************************************************************************
    3 D1:AE06 -  -  -  -  ;
    4 D1:AE06 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AE06 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE06 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE06 -  -  -  -  ;		Reviewed :	No
    8 D1:AE06 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:AE06 -  -  -  -  ;
   10 D1:AE06 -  -  -  -  ; ***************************************************************************************
   11 D1:AE06 -  -  -  -  ; ***************************************************************************************
   12 D1:AE06 -  -  -  -  
   13 D1:AE06 -  -  -  -  ; ***************************************************************************************
   14 D1:AE06 -  -  -  -  ;
   15 D1:AE06 -  -  -  -  ;							Print ASCIIZ string at HL
   16 D1:AE06 -  -  -  -  ;
   17 D1:AE06 -  -  -  -  ; ***************************************************************************************
   18 D1:AE06 -  -  -  -  
   19 D1:AE06 -  -  -  -  PrintStringAtHL:
   20 D1:AE06 7E -  -  -  		ld 		a,(hl)
   21 D1:AE07 B7 -  -  -  		or 		a
   22 D1:AE08 C8 -  -  -  		ret 	z
   23 D1:AE09 CD 6A B3 D1 		call 	SYSPrintChar
   24 D1:AE0D 23 -  -  -  		inc 	hl
   25 D1:AE0E 18 F6 -  -  		jr 		PrintStringAtHL
   26 D1:AE10 -  -  -  -  
   27 D1:AE10 -  -  -  -  ; ***************************************************************************************
   28 D1:AE10 -  -  -  -  ;
   29 D1:AE10 -  -  -  -  ;									Changes and Updates
   30 D1:AE10 -  -  -  -  ;
   31 D1:AE10 -  -  -  -  ; ***************************************************************************************
   32 D1:AE10 -  -  -  -  ;
   33 D1:AE10 -  -  -  -  ;		Date			Notes
   34 D1:AE10 -  -  -  -  ;		==== 			=====
   35 D1:AE10 -  -  -  -  ;
   36 D1:AE10 -  -  -  -  ; ***************************************************************************************
   37 D1:AE10 -  -  -  -  		
Listing for file "_build.asm"
   37 D1:AE10 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:AE10 -  -  -  -  ;
    2 D1:AE10 -  -  -  -  ;	This file is automatically generated.
    3 D1:AE10 -  -  -  -  ;
    4 D1:AE10 -  -  -  -  ;
    5 D1:AE10 -  -  -  -  ;	Keywords for set 0
    6 D1:AE10 -  -  -  -  ;
    7 D1:AE10 -  -  -  -  KeywordsSet0:
    8 D1:AE10 01 20 -  -  	.db	1," "              ; $0080
    9 D1:AE12 01 20 -  -  	.db	1," "              ; $0081
   10 D1:AE14 01 20 -  -  	.db	1," "              ; $0082
   11 D1:AE16 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:AE18 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:AE1A 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:AE1C 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:AE1E 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:AE22 01 2B -  -  	.db	1,"+"              ; $0088
   17 D1:AE24 01 2D -  -  	.db	1,"-"              ; $0089
   18 D1:AE26 02 3E 3D -  	.db	2,">="             ; $008a
   19 D1:AE29 02 3C 3D -  	.db	2,"<="             ; $008b
   20 D1:AE2C 01 3E -  -  	.db	1,">"              ; $008c
   21 D1:AE2E 01 3C -  -  	.db	1,"<"              ; $008d
   22 D1:AE30 01 3D -  -  	.db	1,"="              ; $008e
   23 D1:AE32 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 D1:AE35 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 D1:AE39 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 D1:AE3C 03 45 4F 52 	.db	3,"EOR"            ; $0092
   27 D1:AE40 01 26 -  -  	.db	1,"&"              ; $0093
   28 D1:AE42 01 28 -  -  	.db	1,"("              ; $0094
   29 D1:AE44 01 24 -  -  	.db	1,"$"              ; $0095
   30 D1:AE46 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 D1:AE4A 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 D1:AE4E 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 D1:AE52 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 D1:AE56 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 D1:AE5A 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 D1:AE5F 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 D1:AE63 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 D1:AE68 01 29 -  -  	.db	1,")"              ; $009e
   39 D1:AE6A 01 2C -  -  	.db	1,","              ; $009f
   40 D1:AE6C 01 3A -  -  	.db	1,":"              ; $00a0
   41 D1:AE6E 01 3B -  -  	.db	1,";"              ; $00a1
   42 D1:AE70 01 27 -  -  	.db	1,"'"              ; $00a2
   43 D1:AE72 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 D1:AE79 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 D1:AE7F 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 D1:AE82 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 D1:AE87 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 D1:AE8C 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 D1:AE90 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 D1:AE93 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 D1:AE98 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 D1:AE9D 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 D1:AEA1 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 D1:AEA6 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 D1:AEAE 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 D1:AEB4 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 D1:AEB8 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 D1:AEBC 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 D1:AEC0 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 D1:AEC4 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 D1:AECA 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 D1:AECF 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 D1:AED4 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 D1:AED9 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 D1:AEDD 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 D1:AEE1 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 D1:AEE6 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 D1:AEEB 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 D1:AEF3 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 D1:AEFA 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 D1:AF00 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 D1:AF04 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 D1:AF09 00 -  -  -  	.db	0
   74 D1:AF0A -  -  -  -  ;
   75 D1:AF0A -  -  -  -  ;	Keywords for set 1
   76 D1:AF0A -  -  -  -  ;
   77 D1:AF0A -  -  -  -  KeywordsSet1:
   78 D1:AF0A 00 -  -  -  	.db	0
   79 D1:AF0B -  -  -  -  ;
   80 D1:AF0B -  -  -  -  ;	Keywords for set 2
   81 D1:AF0B -  -  -  -  ;
   82 D1:AF0B -  -  -  -  KeywordsSet2:
   83 D1:AF0B 00 -  -  -  	.db	0
Listing for file "_build.asm"
   38 D1:AF0C -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:AF0C -  -  -  -  ;
    2 D1:AF0C -  -  -  -  ;	This file is automatically generated.
    3 D1:AF0C -  -  -  -  ;
    4 D1:AF0C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 D1:AF20 -  -  -  -  PrecedenceTable:
    6 D1:AF20 06 -  -  -  	.db	6	; $0083 !
    7 D1:AF21 06 -  -  -  	.db	6	; $0084 ?
    8 D1:AF22 05 -  -  -  	.db	5	; $0085 *
    9 D1:AF23 05 -  -  -  	.db	5	; $0086 /
   10 D1:AF24 05 -  -  -  	.db	5	; $0087 mod
   11 D1:AF25 04 -  -  -  	.db	4	; $0088 +
   12 D1:AF26 04 -  -  -  	.db	4	; $0089 -
   13 D1:AF27 03 -  -  -  	.db	3	; $008a >=
   14 D1:AF28 03 -  -  -  	.db	3	; $008b <=
   15 D1:AF29 03 -  -  -  	.db	3	; $008c >
   16 D1:AF2A 03 -  -  -  	.db	3	; $008d <
   17 D1:AF2B 03 -  -  -  	.db	3	; $008e =
   18 D1:AF2C 03 -  -  -  	.db	3	; $008f <>
   19 D1:AF2D 02 -  -  -  	.db	2	; $0090 and
   20 D1:AF2E 01 -  -  -  	.db	1	; $0091 or
   21 D1:AF2F 01 -  -  -  	.db	1	; $0092 eor
   22 D1:AF30 -  -  -  -  
Listing for file "_build.asm"
   39 D1:AF30 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:AF30 -  -  -  -  ;
    2 D1:AF30 -  -  -  -  ;	This is automatically generated.
    3 D1:AF30 -  -  -  -  ;
    4 D1:AF30 -  -  -  -  ErrorIDTable:
    5 D1:AF30 68 AF D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:AF34 6E AF D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:AF38 7F AF D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:AF3C 8D AF D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:AF40 97 AF D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:AF44 B1 AF D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:AF48 C2 AF D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:AF4C D0 AF D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:AF50 DE AF D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 D1:AF54 F4 AF D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 D1:AF58 02 B0 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 D1:AF5C 07 B0 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 D1:AF60 14 B0 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 D1:AF64 25 B0 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 D1:AF68 -  -  -  -  
   20 D1:AF68 -  -  -  -  ErrText_warmstart:
   21 D1:AF68 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 D1:AF6E -  -  -  -  ErrText_assert:
   23 D1:AF6E 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 D1:AF7F -  -  -  -  ErrText_badtype:
   25 D1:AF7F 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 D1:AF8D -  -  -  -  ErrText_badvalue:
   27 D1:AF8D 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 D1:AF97 -  -  -  -  ErrText_disabled:
   29 D1:AF97 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 D1:AFB1 -  -  -  -  ErrText_divzero:
   31 D1:AFB1 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 D1:AFC2 -  -  -  -  ErrText_memory:
   33 D1:AFC2 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 D1:AFD0 -  -  -  -  ErrText_nocomma:
   35 D1:AFD0 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 D1:AFDE -  -  -  -  ErrText_norbracket:
   37 D1:AFDE 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 D1:AFF4 -  -  -  -  ErrText_notref:
   39 D1:AFF4 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 D1:B002 -  -  -  -  ErrText_stop:
   41 D1:B002 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 D1:B007 -  -  -  -  ErrText_syntax:
   43 D1:B007 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 D1:B014 -  -  -  -  ErrText_todo:
   45 D1:B014 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 D1:B025 -  -  -  -  ErrText_unknownvar:
   47 D1:B025 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   40 D1:B036 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B036 -  -  -  -  ;
    2 D1:B036 -  -  -  -  ;	Vectors for set 0
    3 D1:B036 -  -  -  -  ;
    4 D1:B036 -  -  -  -  VectorsSet0:
    5 D1:B036 4D A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B03A A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B03E A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B042 FB AA D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B046 04 AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B04A A7 AA D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B04E B5 AA D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B052 C3 AA D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B056 8B AA D1 00 	addr(ALUAdd)                     ; $0088 +
   14 D1:B05A 99 AA D1 00 	addr(ALUSubtract)                ; $0089 -
   15 D1:B05E 62 AB D1 00 	addr(ALUCompareGreaterEqual)     ; $008a >=
   16 D1:B062 58 AB D1 00 	addr(ALUCompareLessEqual)        ; $008b <=
   17 D1:B066 44 AB D1 00 	addr(ALUCompareGreater)          ; $008c >
   18 D1:B06A 3A AB D1 00 	addr(ALUCompareLess)             ; $008d <
   19 D1:B06E 30 AB D1 00 	addr(ALUCompareEqual)            ; $008e =
   20 D1:B072 4E AB D1 00 	addr(ALUCompareNotEqual)         ; $008f <>
   21 D1:B076 D1 AA D1 00 	addr(ALUAnd)                     ; $0090 and
   22 D1:B07A DF AA D1 00 	addr(ALUOr)                      ; $0091 or
   23 D1:B07E ED AA D1 00 	addr(ALUXor)                     ; $0092 eor
   24 D1:B082 A5 AD D1 00 	addr(Unary_Ampersand)            ; $0093 &
   25 D1:B086 9D AD D1 00 	addr(Unary_Brackets)             ; $0094 (
   26 D1:B08A A5 A8 D1 00 	addr(Unimplemented)              ; $0095 $
   27 D1:B08E A5 A8 D1 00 	addr(Unimplemented)              ; $0096 rnd
   28 D1:B092 A5 A8 D1 00 	addr(Unimplemented)              ; $0097 len
   29 D1:B096 A5 A8 D1 00 	addr(Unimplemented)              ; $0098 abs
   30 D1:B09A A5 A8 D1 00 	addr(Unimplemented)              ; $0099 sgn
   31 D1:B09E A5 A8 D1 00 	addr(Unimplemented)              ; $009a int
   32 D1:B0A2 A5 A8 D1 00 	addr(Unimplemented)              ; $009b str$
   33 D1:B0A6 A5 A8 D1 00 	addr(Unimplemented)              ; $009c asc
   34 D1:B0AA 90 AD D1 00 	addr(Unary_Page)                 ; $009d page
   35 D1:B0AE 42 A9 D1 00 	addr(BadCmd_RBracket)            ; $009e )
   36 D1:B0B2 42 A9 D1 00 	addr(BadCmd_Comma)               ; $009f ,
   37 D1:B0B6 46 A9 D1 00 	addr(Command_Colon)              ; $00a0 :
   38 D1:B0BA 42 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 D1:B0BE 64 A9 D1 00 	addr(Command_REM2)               ; $00a2 '
   40 D1:B0C2 A5 A8 D1 00 	addr(Unimplemented)              ; $00a3 repeat
   41 D1:B0C6 A5 A8 D1 00 	addr(Unimplemented)              ; $00a4 until
   42 D1:B0CA A5 A8 D1 00 	addr(Unimplemented)              ; $00a5 if
   43 D1:B0CE 42 A9 D1 00 	addr(BadCmd_Then)                ; $00a6 then
   44 D1:B0D2 A5 A8 D1 00 	addr(Unimplemented)              ; $00a7 else
   45 D1:B0D6 A5 A8 D1 00 	addr(Unimplemented)              ; $00a8 for
   46 D1:B0DA 42 A9 D1 00 	addr(BadCmd_To)                  ; $00a9 to
   47 D1:B0DE A5 A8 D1 00 	addr(Unimplemented)              ; $00aa step
   48 D1:B0E2 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab next
   49 D1:B0E6 42 A9 D1 00 	addr(BadCmd_Defproc)             ; $00ac def
   50 D1:B0EA A5 A8 D1 00 	addr(Unimplemented)              ; $00ad proc
   51 D1:B0EE A5 A8 D1 00 	addr(Unimplemented)              ; $00ae endproc
   52 D1:B0F2 A5 A8 D1 00 	addr(Unimplemented)              ; $00af local
   53 D1:B0F6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 dim
   54 D1:B0FA 64 A9 D1 00 	addr(Command_REM)                ; $00b1 rem
   55 D1:B0FE A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 let
   56 D1:B102 A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 vdu
   57 D1:B106 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 print
   58 D1:B10A A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 load
   59 D1:B10E A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 save
   60 D1:B112 A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 list
   61 D1:B116 F6 AD D1 00 	addr(Command_NEW)                ; $00b8 new
   62 D1:B11A 81 A9 D1 00 	addr(Command_RUN)                ; $00b9 run
   63 D1:B11E A5 A8 D1 00 	addr(Unimplemented)              ; $00ba read
   64 D1:B122 A5 A8 D1 00 	addr(Unimplemented)              ; $00bb data
   65 D1:B126 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc restore
   66 D1:B12A 31 A9 D1 00 	addr(Command_ASSERT)             ; $00bd assert
   67 D1:B12E B4 AD D1 00 	addr(Command_CLEAR)              ; $00be clear
   68 D1:B132 47 A9 D1 00 	addr(Command_END)                ; $00bf end
   69 D1:B136 ED A9 D1 00 	addr(Command_STOP)               ; $00c0 stop
   70 D1:B13A -  -  -  -  ;
   71 D1:B13A -  -  -  -  ;	Vectors for set 1
   72 D1:B13A -  -  -  -  ;
   73 D1:B13A -  -  -  -  VectorsSet1:
   74 D1:B13A -  -  -  -  ;
   75 D1:B13A -  -  -  -  ;	Vectors for set 2
   76 D1:B13A -  -  -  -  ;
   77 D1:B13A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   41 D1:B13A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B13A -  -  -  -  ; ***************************************************************************************
    2 D1:B13A -  -  -  -  ; ***************************************************************************************
    3 D1:B13A -  -  -  -  ;
    4 D1:B13A -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B13A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B13A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B13A -  -  -  -  ;		Reviewed :	No
    8 D1:B13A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B13A -  -  -  -  ;
   10 D1:B13A -  -  -  -  ; ***************************************************************************************
   11 D1:B13A -  -  -  -  ; ***************************************************************************************
   12 D1:B13A -  -  -  -  
   13 D1:B13A -  -  -  -  ; ***************************************************************************************
   14 D1:B13A -  -  -  -  ;
   15 D1:B13A -  -  -  -  ;								Unsigned integer divide
   16 D1:B13A -  -  -  -  ;
   17 D1:B13A -  -  -  -  ; ***************************************************************************************
   18 D1:B13A -  -  -  -  
   19 D1:B13A -  -  -  -  Int32UDivide:
   20 D1:B13A 37 -  -  -  		scf
   21 D1:B13B C3 7F B1 D1 		jp 		_I32UnsignedDivide		
   22 D1:B13F -  -  -  -  
   23 D1:B13F -  -  -  -  ; ***************************************************************************************
   24 D1:B13F -  -  -  -  ;
   25 D1:B13F -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B13F -  -  -  -  ;
   27 D1:B13F -  -  -  -  ; ***************************************************************************************
   28 D1:B13F -  -  -  -  
   29 D1:B13F -  -  -  -  Int32SDivide:
   30 D1:B13F 37 -  -  -  		scf
   31 D1:B140 18 01 -  -  		jr 		_I32SDivide
   32 D1:B142 -  -  -  -  Int32Modulus:
   33 D1:B142 AF -  -  -  		xor 	a
   34 D1:B143 -  -  -  -  _I32SDivide:
   35 D1:B143 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B144 F5 -  -  -  		push 	af
   37 D1:B145 08 -  -  -  		ex 		af,af'
   38 D1:B146 -  -  -  -  
   39 D1:B146 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B147 D9 -  -  -  		exx
   41 D1:B148 D5 -  -  -  		push 	de
   42 D1:B149 D9 -  -  -  		exx
   43 D1:B14A -  -  -  -  
   44 D1:B14A F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B14B AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B14C CD 6C B1 D1 		call 	_I32CheckHLSignSwap
   47 D1:B150 CD 6C B1 D1 		call 	_I32CheckHLSignSwap
   48 D1:B154 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B155 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B156 F5 -  -  -  		push 	af
   51 D1:B157 CD 7F B1 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B15B F1 -  -  -  		pop 	af 							; get function back
   53 D1:B15C 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B15E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B15F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B161 C4 E1 B2 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B165 -  -  -  -  _I32SDExit:
   58 D1:B165 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B166 D1 -  -  -  		pop 	de
   60 D1:B167 D9 -  -  -  		exx
   61 D1:B168 D1 -  -  -  		pop 	de
   62 D1:B169 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B16A 08 -  -  -  		ex 		af,af'
   64 D1:B16B C9 -  -  -  		ret
   65 D1:B16C -  -  -  -  
   66 D1:B16C -  -  -  -  
   67 D1:B16C -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B16C D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B16D CB 7C -  -  		bit 	7,h
   70 D1:B16F D9 -  -  -  		exx
   71 D1:B170 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B172 -  -  -  -  		;
   73 D1:B172 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B174 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B175 CD E1 B2 D1 		call 	Int32Negate 				
   76 D1:B179 F1 -  -  -  		pop 	af
   77 D1:B17A -  -  -  -  _I32CHSPositive:
   78 D1:B17A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B17B EB -  -  -  		ex 		de,hl
   80 D1:B17C D9 -  -  -  		exx		
   81 D1:B17D EB -  -  -  		ex 		de,hl
   82 D1:B17E C9 -  -  -  		ret
   83 D1:B17F -  -  -  -  
   84 D1:B17F -  -  -  -  ; ***************************************************************************************
   85 D1:B17F -  -  -  -  ;
   86 D1:B17F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B17F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B17F -  -  -  -  ;
   89 D1:B17F -  -  -  -  ; ***************************************************************************************
   90 D1:B17F -  -  -  -  
   91 D1:B17F -  -  -  -  _I32UnsignedDivide:
   92 D1:B17F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B180 D5 -  -  -  		push 	de
   94 D1:B181 D9 -  -  -  		exx
   95 D1:B182 C5 -  -  -  		push 	bc
   96 D1:B183 D5 -  -  -  		push 	de 							
   97 D1:B184 D9 -  -  -  		exx
   98 D1:B185 -  -  -  -  
   99 D1:B185 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B186 -  -  -  -  
  101 D1:B186 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B187 B3 -  -  -  		or 		e
  103 D1:B188 D9 -  -  -  		exx
  104 D1:B189 B2 -  -  -  		or 		d
  105 D1:B18A B3 -  -  -  		or 		e
  106 D1:B18B D9 -  -  -  		exx
  107 D1:B18C CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B190 -  -  -  -  
  109 D1:B190 -  -  -  -  
  110 D1:B190 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B191 4D -  -  -  		ld		c,l
  112 D1:B192 21 00 00 00 		ld 		hl,$0000
  113 D1:B196 D9 -  -  -  		exx
  114 D1:B197 44 -  -  -  		ld 		b,h
  115 D1:B198 4D -  -  -  		ld		c,l
  116 D1:B199 21 00 00 00 		ld 		hl,$0000
  117 D1:B19D D9 -  -  -  		exx
  118 D1:B19E -  -  -  -  
  119 D1:B19E 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B1A0 -  -  -  -  _I32DivideLoop:
  121 D1:B1A0 F5 -  -  -  		push 	af
  122 D1:B1A1 -  -  -  -  
  123 D1:B1A1 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B1A3 CB 10 -  -  		rl 		b
  125 D1:B1A5 D9 -  -  -  		exx
  126 D1:B1A6 CB 11 -  -  		rl 		c
  127 D1:B1A8 CB 10 -  -  		rl 		b
  128 D1:B1AA D9 -  -  -  		exx
  129 D1:B1AB CB 15 -  -  		rl 		l
  130 D1:B1AD CB 14 -  -  		rl 		h
  131 D1:B1AF D9 -  -  -  		exx
  132 D1:B1B0 CB 15 -  -  		rl 		l
  133 D1:B1B2 CB 14 -  -  		rl 		h
  134 D1:B1B4 D9 -  -  -  		exx
  135 D1:B1B5 -  -  -  -  
  136 D1:B1B5 CD 7F B2 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B1B9 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B1BB -  -  -  -  
  139 D1:B1BB 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B1BC 18 04 -  -  		jr 		_I32Next
  141 D1:B1BE -  -  -  -  
  142 D1:B1BE -  -  -  -  _I32Borrow:
  143 D1:B1BE CD 77 B2 D1 		call 	Int32Add 					; A = A + M
  144 D1:B1C2 -  -  -  -  _I32Next:
  145 D1:B1C2 F1 -  -  -  		pop 	af
  146 D1:B1C3 3D -  -  -  		dec 	a
  147 D1:B1C4 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B1C6 -  -  -  -  
  149 D1:B1C6 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B1C7 -  -  -  -  
  151 D1:B1C7 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B1C8 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B1CA -  -  -  -  
  154 D1:B1CA 60 -  -  -  		ld  	h,b
  155 D1:B1CB 69 -  -  -  		ld 		l,c
  156 D1:B1CC D9 -  -  -  		exx
  157 D1:B1CD 60 -  -  -  		ld  	h,b
  158 D1:B1CE 69 -  -  -  		ld 		l,c
  159 D1:B1CF D9 -  -  -  		exx
  160 D1:B1D0 -  -  -  -  _I32Modulus1:		
  161 D1:B1D0 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B1D1 D1 -  -  -  		pop 	de
  163 D1:B1D2 C1 -  -  -  		pop 	bc
  164 D1:B1D3 D9 -  -  -  		exx
  165 D1:B1D4 D1 -  -  -  		pop 	de
  166 D1:B1D5 C1 -  -  -  		pop 	bc
  167 D1:B1D6 C9 -  -  -  		ret
  168 D1:B1D7 -  -  -  -  
  169 D1:B1D7 -  -  -  -  ; ***************************************************************************************
  170 D1:B1D7 -  -  -  -  ;
  171 D1:B1D7 -  -  -  -  ;									Changes and Updates
  172 D1:B1D7 -  -  -  -  ;
  173 D1:B1D7 -  -  -  -  ; ***************************************************************************************
  174 D1:B1D7 -  -  -  -  ;
  175 D1:B1D7 -  -  -  -  ;		Date			Notes
  176 D1:B1D7 -  -  -  -  ;		==== 			=====
  177 D1:B1D7 -  -  -  -  ;
  178 D1:B1D7 -  -  -  -  ; ***************************************************************************************
  179 D1:B1D7 -  -  -  -  		
Listing for file "_build.asm"
   42 D1:B1D7 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B1D7 -  -  -  -  ; ***************************************************************************************
    2 D1:B1D7 -  -  -  -  ; ***************************************************************************************
    3 D1:B1D7 -  -  -  -  ;
    4 D1:B1D7 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B1D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1D7 -  -  -  -  ;		Reviewed :	No
    8 D1:B1D7 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B1D7 -  -  -  -  ;
   10 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   11 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   12 D1:B1D7 -  -  -  -  
   13 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   14 D1:B1D7 -  -  -  -  ;
   15 D1:B1D7 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B1D7 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B1D7 -  -  -  -  ;
   18 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   19 D1:B1D7 -  -  -  -  
   20 D1:B1D7 -  -  -  -  Int32FromString:
   21 D1:B1D7 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B1D8 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B1D9 D5 -  -  -  		push 	de
   24 D1:B1DA D9 -  -  -  		exx
   25 D1:B1DB D5 -  -  -  		push 	de
   26 D1:B1DC -  -  -  -  
   27 D1:B1DC 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B1E0 11 00 00 00 		ld 		de,$0000
   29 D1:B1E4 D9 -  -  -  		exx
   30 D1:B1E5 21 00 00 00 		ld 		hl,$0000
   31 D1:B1E9 11 00 00 00 		ld 		de,$0000
   32 D1:B1ED D9 -  -  -  		exx
   33 D1:B1EE -  -  -  -  
   34 D1:B1EE 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B1EF CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B1F1 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B1F3 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B1F5 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B1F6 -  -  -  -  		;
   40 D1:B1F6 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B1F7 F5 -  -  -  		push 	af
   42 D1:B1F8 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B1FA 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B1FB 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B1FD 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B1FE 18 01 -  -  		jr 		_I32FSMain
   47 D1:B200 -  -  -  -  _I32FSNotSigned:		
   48 D1:B200 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B201 -  -  -  -  		;
   50 D1:B201 -  -  -  -  		; 		Main conversion loop.
   51 D1:B201 -  -  -  -  		; 		
   52 D1:B201 -  -  -  -  _I32FSMain:		
   53 D1:B201 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B202 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B204 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B206 D6 20 -  -  		sub 	32
   57 D1:B208 -  -  -  -  _I32FSNotLower:
   58 D1:B208 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B20A 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B20C FE 3A -  -  		cp 		'9'+1
   61 D1:B20E 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B210 FE 41 -  -  		cp 		'A'
   63 D1:B212 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B214 FE 47 -  -  		cp 		'F'+1
   65 D1:B216 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B218 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B21A -  -  -  -  _I32FSOkay:
   68 D1:B21A D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B21C BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B21D 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B21F 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B220 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B221 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B222 CD 3E B2 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B226 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B227 5F -  -  -  		ld 		e,a
   77 D1:B228 CD 77 B2 D1 		call 	Int32Add 					; and add it.
   78 D1:B22C D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B22D 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B22F -  -  -  -  
   81 D1:B22F -  -  -  -  _I32FSExit:
   82 D1:B22F F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B230 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B232 CC E1 B2 D1 		call 	z,Int32Negate
   85 D1:B236 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B237 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B238 D9 -  -  -  		exx
   88 D1:B239 D1 -  -  -  		pop 	de
   89 D1:B23A D9 -  -  -  		exx
   90 D1:B23B C1 -  -  -  		pop 	bc
   91 D1:B23C B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 D1:B23D C9 -  -  -  		ret				
   93 D1:B23E -  -  -  -  
   94 D1:B23E -  -  -  -  ; ***************************************************************************************
   95 D1:B23E -  -  -  -  ;
   96 D1:B23E -  -  -  -  ;									Changes and Updates
   97 D1:B23E -  -  -  -  ;
   98 D1:B23E -  -  -  -  ; ***************************************************************************************
   99 D1:B23E -  -  -  -  ;
  100 D1:B23E -  -  -  -  ;		Date			Notes
  101 D1:B23E -  -  -  -  ;		==== 			=====
  102 D1:B23E -  -  -  -  ;
  103 D1:B23E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B23E -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B23E -  -  -  -  ; ***************************************************************************************
    2 D1:B23E -  -  -  -  ; ***************************************************************************************
    3 D1:B23E -  -  -  -  ;
    4 D1:B23E -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B23E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B23E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B23E -  -  -  -  ;		Reviewed :	No
    8 D1:B23E -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B23E -  -  -  -  ;
   10 D1:B23E -  -  -  -  ; ***************************************************************************************
   11 D1:B23E -  -  -  -  ; ***************************************************************************************
   12 D1:B23E -  -  -  -  
   13 D1:B23E -  -  -  -  Int32Multiply:
   14 D1:B23E C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B23F D5 -  -  -  		push 	de
   16 D1:B240 44 -  -  -  		ld 		b,h
   17 D1:B241 4D -  -  -  		ld 		c,l
   18 D1:B242 21 00 00 00 		ld 		hl,$0000
   19 D1:B246 -  -  -  -  
   20 D1:B246 D9 -  -  -  		exx
   21 D1:B247 C5 -  -  -  		push 	bc
   22 D1:B248 D5 -  -  -  		push 	de
   23 D1:B249 44 -  -  -  		ld 		b,h
   24 D1:B24A 4D -  -  -  		ld 		c,l
   25 D1:B24B 21 00 00 00 		ld 		hl,$0000		
   26 D1:B24F D9 -  -  -  		exx
   27 D1:B250 -  -  -  -  
   28 D1:B250 -  -  -  -  _I32MultiplyLoop:
   29 D1:B250 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B252 C4 77 B2 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B256 -  -  -  -  		;
   32 D1:B256 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B257 CB 38 -  -  		srl 	b
   34 D1:B259 CB 19 -  -  		rr 		c
   35 D1:B25B D9 -  -  -  		exx
   36 D1:B25C CB 18 -  -  		rr 		b
   37 D1:B25E CB 19 -  -  		rr 		c
   38 D1:B260 -  -  -  -  		;
   39 D1:B260 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B262 CB 12 -  -  		rl 		d
   41 D1:B264 D9 -  -  -  		exx
   42 D1:B265 CB 13 -  -  		rl 		e
   43 D1:B267 CB 12 -  -  		rl 		d
   44 D1:B269 -  -  -  -  
   45 D1:B269 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B26A B1 -  -  -  		or 		c
   47 D1:B26B D9 -  -  -  		exx
   48 D1:B26C B0 -  -  -  		or 		b
   49 D1:B26D B1 -  -  -  		or 		c
   50 D1:B26E 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B270 -  -  -  -  
   52 D1:B270 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B271 D1 -  -  -  		pop 	de
   54 D1:B272 C1 -  -  -  		pop 	bc
   55 D1:B273 D9 -  -  -  		exx
   56 D1:B274 D1 -  -  -  		pop 	de
   57 D1:B275 C1 -  -  -  		pop 	bc
   58 D1:B276 C9 -  -  -  		ret
   59 D1:B277 -  -  -  -  
   60 D1:B277 -  -  -  -  ; ***************************************************************************************
   61 D1:B277 -  -  -  -  ;
   62 D1:B277 -  -  -  -  ;									Changes and Updates
   63 D1:B277 -  -  -  -  ;
   64 D1:B277 -  -  -  -  ; ***************************************************************************************
   65 D1:B277 -  -  -  -  ;
   66 D1:B277 -  -  -  -  ;		Date			Notes
   67 D1:B277 -  -  -  -  ;		==== 			=====
   68 D1:B277 -  -  -  -  ;
   69 D1:B277 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B277 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B277 -  -  -  -  ; ***************************************************************************************
    2 D1:B277 -  -  -  -  ; ***************************************************************************************
    3 D1:B277 -  -  -  -  ;
    4 D1:B277 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B277 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B277 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B277 -  -  -  -  ;		Reviewed :	No
    8 D1:B277 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B277 -  -  -  -  ;
   10 D1:B277 -  -  -  -  ; ***************************************************************************************
   11 D1:B277 -  -  -  -  ; ***************************************************************************************
   12 D1:B277 -  -  -  -  
   13 D1:B277 -  -  -  -  ; ***************************************************************************************
   14 D1:B277 -  -  -  -  ;
   15 D1:B277 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B277 -  -  -  -  ;
   17 D1:B277 -  -  -  -  ; ***************************************************************************************
   18 D1:B277 -  -  -  -  
   19 D1:B277 -  -  -  -  Int32Add:
   20 D1:B277 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B279 D9 -  -  -  		exx
   22 D1:B27A 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B27D D9 -  -  -  		exx
   24 D1:B27E C9 -  -  -  		ret
   25 D1:B27F -  -  -  -  
   26 D1:B27F -  -  -  -  ; ***************************************************************************************
   27 D1:B27F -  -  -  -  ;
   28 D1:B27F -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B27F -  -  -  -  ;
   30 D1:B27F -  -  -  -  ; ***************************************************************************************
   31 D1:B27F -  -  -  -  
   32 D1:B27F -  -  -  -  Int32Subtract:
   33 D1:B27F AF -  -  -  		xor 	a 							; clear carry
   34 D1:B280 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B283 D9 -  -  -  		exx
   36 D1:B284 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B287 D9 -  -  -  		exx
   38 D1:B288 C9 -  -  -  		ret
   39 D1:B289 -  -  -  -  
   40 D1:B289 -  -  -  -  ; ***************************************************************************************
   41 D1:B289 -  -  -  -  ;
   42 D1:B289 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B289 -  -  -  -  ;
   44 D1:B289 -  -  -  -  ; ***************************************************************************************
   45 D1:B289 -  -  -  -  
   46 D1:B289 -  -  -  -  Int32And:
   47 D1:B289 D9 -  -  -  		exx
   48 D1:B28A CD 8F B2 D1 		call 	_I32AndHLDE
   49 D1:B28E D9 -  -  -  		exx
   50 D1:B28F -  -  -  -  _I32AndHLDE:		
   51 D1:B28F 7C -  -  -  		ld 		a,h
   52 D1:B290 A2 -  -  -  		and 	d
   53 D1:B291 67 -  -  -  		ld 		h,a
   54 D1:B292 7D -  -  -  		ld 		a,l
   55 D1:B293 A3 -  -  -  		and 	e
   56 D1:B294 6F -  -  -  		ld 		l,a
   57 D1:B295 C9 -  -  -  		ret
   58 D1:B296 -  -  -  -  
   59 D1:B296 -  -  -  -  ; ***************************************************************************************
   60 D1:B296 -  -  -  -  ;
   61 D1:B296 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B296 -  -  -  -  ;
   63 D1:B296 -  -  -  -  ; ***************************************************************************************
   64 D1:B296 -  -  -  -  
   65 D1:B296 -  -  -  -  Int32Or:
   66 D1:B296 D9 -  -  -  		exx
   67 D1:B297 CD 9C B2 D1 		call 	_I32OrHLDE
   68 D1:B29B D9 -  -  -  		exx
   69 D1:B29C -  -  -  -  _I32OrHLDE:		
   70 D1:B29C 7C -  -  -  		ld 		a,h
   71 D1:B29D B2 -  -  -  		or 		d
   72 D1:B29E 67 -  -  -  		ld 		h,a
   73 D1:B29F 7D -  -  -  		ld 		a,l
   74 D1:B2A0 B3 -  -  -  		or 		e
   75 D1:B2A1 6F -  -  -  		ld 		l,a
   76 D1:B2A2 C9 -  -  -  		ret
   77 D1:B2A3 -  -  -  -  
   78 D1:B2A3 -  -  -  -  ; ***************************************************************************************
   79 D1:B2A3 -  -  -  -  ;
   80 D1:B2A3 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B2A3 -  -  -  -  ;
   82 D1:B2A3 -  -  -  -  ; ***************************************************************************************
   83 D1:B2A3 -  -  -  -  
   84 D1:B2A3 -  -  -  -  Int32Xor:
   85 D1:B2A3 D9 -  -  -  		exx
   86 D1:B2A4 CD A9 B2 D1 		call 	_I32XorHLDE
   87 D1:B2A8 D9 -  -  -  		exx
   88 D1:B2A9 -  -  -  -  _I32XorHLDE:		
   89 D1:B2A9 7C -  -  -  		ld 		a,h
   90 D1:B2AA AA -  -  -  		xor 	d
   91 D1:B2AB 67 -  -  -  		ld 		h,a
   92 D1:B2AC 7D -  -  -  		ld 		a,l
   93 D1:B2AD AB -  -  -  		xor 	e
   94 D1:B2AE 6F -  -  -  		ld 		l,a
   95 D1:B2AF C9 -  -  -  		ret
   96 D1:B2B0 -  -  -  -  
   97 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   98 D1:B2B0 -  -  -  -  ;
   99 D1:B2B0 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B2B0 -  -  -  -  ;
  101 D1:B2B0 -  -  -  -  ; ***************************************************************************************
  102 D1:B2B0 -  -  -  -  
  103 D1:B2B0 -  -  -  -  Int32Zero:
  104 D1:B2B0 D9 -  -  -  		exx
  105 D1:B2B1 7D -  -  -  		ld 		a,l
  106 D1:B2B2 B4 -  -  -  		or 		h
  107 D1:B2B3 D9 -  -  -  		exx
  108 D1:B2B4 B5 -  -  -  		or 		l
  109 D1:B2B5 B4 -  -  -  		or 		h
  110 D1:B2B6 C9 -  -  -  		ret
  111 D1:B2B7 -  -  -  -  
  112 D1:B2B7 -  -  -  -  ; ***************************************************************************************
  113 D1:B2B7 -  -  -  -  ;
  114 D1:B2B7 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B2B7 -  -  -  -  ;
  116 D1:B2B7 -  -  -  -  ; ***************************************************************************************
  117 D1:B2B7 -  -  -  -  
  118 D1:B2B7 -  -  -  -  Int32Compare:
  119 D1:B2B7 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B2B8 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B2B9 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B2BC D9 -  -  -  		exx
  123 D1:B2BD E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B2BE 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B2C1 -  -  -  -  		;
  126 D1:B2C1 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B2C2 E2 CA B2 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B2C6 78 -  -  -  		ld 		a,b
  129 D1:B2C7 EE 80 -  -  		xor 	$80
  130 D1:B2C9 47 -  -  -  		ld 		b,a
  131 D1:B2CA -  -  -  -  _I32CNoOverflow:
  132 D1:B2CA 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B2CB B5 -  -  -  		or 		l
  134 D1:B2CC D9 -  -  -  		exx 
  135 D1:B2CD B4 -  -  -  		or 		h
  136 D1:B2CE B5 -  -  -  		or 		l
  137 D1:B2CF 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B2D1 -  -  -  -  		;
  139 D1:B2D1 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B2D2 CB 78 -  -  		bit 	7,b
  141 D1:B2D4 D9 -  -  -  		exx
  142 D1:B2D5 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B2D7 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B2D9 3E FF -  -  		ld 		a,$FF
  145 D1:B2DB -  -  -  -  _I32NotPos:
  146 D1:B2DB D9 -  -  -  		exx
  147 D1:B2DC E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B2DD D9 -  -  -  		exx
  149 D1:B2DE E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B2DF B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B2E0 C9 -  -  -  		ret
  152 D1:B2E1 -  -  -  -  
  153 D1:B2E1 -  -  -  -  ; ***************************************************************************************
  154 D1:B2E1 -  -  -  -  ;
  155 D1:B2E1 -  -  -  -  ;										Negate HL'HL
  156 D1:B2E1 -  -  -  -  ;
  157 D1:B2E1 -  -  -  -  ; ***************************************************************************************
  158 D1:B2E1 -  -  -  -  
  159 D1:B2E1 -  -  -  -  Int32Negate:
  160 D1:B2E1 AF -  -  -  		xor 	a
  161 D1:B2E2 CD ED B2 D1 		call 	_I32NSubtract
  162 D1:B2E6 D9 -  -  -  		exx
  163 D1:B2E7 CD ED B2 D1 		call 	_I32NSubtract
  164 D1:B2EB D9 -  -  -  		exx
  165 D1:B2EC C9 -  -  -  		ret
  166 D1:B2ED -  -  -  -  _I32NSubtract:
  167 D1:B2ED D5 -  -  -  		push 	de
  168 D1:B2EE EB -  -  -  		ex 		de,hl
  169 D1:B2EF 21 00 00 00 		ld 		hl,$0000
  170 D1:B2F3 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B2F6 D1 -  -  -  		pop 	de
  172 D1:B2F7 C9 -  -  -  		ret
  173 D1:B2F8 -  -  -  -  		
  174 D1:B2F8 -  -  -  -  ; ***************************************************************************************
  175 D1:B2F8 -  -  -  -  ;
  176 D1:B2F8 -  -  -  -  ;									Changes and Updates
  177 D1:B2F8 -  -  -  -  ;
  178 D1:B2F8 -  -  -  -  ; ***************************************************************************************
  179 D1:B2F8 -  -  -  -  ;
  180 D1:B2F8 -  -  -  -  ;		Date			Notes
  181 D1:B2F8 -  -  -  -  ;		==== 			=====
  182 D1:B2F8 -  -  -  -  ;
  183 D1:B2F8 -  -  -  -  ; ***************************************************************************************
  184 D1:B2F8 -  -  -  -  		
Listing for file "_build.asm"
   45 D1:B2F8 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B2F8 -  -  -  -  ; ***************************************************************************************
    2 D1:B2F8 -  -  -  -  ; ***************************************************************************************
    3 D1:B2F8 -  -  -  -  ;
    4 D1:B2F8 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B2F8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2F8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B2F8 -  -  -  -  ;		Reviewed :	No
    8 D1:B2F8 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B2F8 -  -  -  -  ;
   10 D1:B2F8 -  -  -  -  ; ***************************************************************************************
   11 D1:B2F8 -  -  -  -  ;
   12 D1:B2F8 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B2F8 -  -  -  -  ;
   14 D1:B2F8 -  -  -  -  ; ***************************************************************************************
   15 D1:B2F8 -  -  -  -  
   16 D1:B2F8 -  -  -  -  Int32ToString:
   17 D1:B2F8 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B2F9 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B2FA E5 -  -  -  		push 	hl
   20 D1:B2FB 11 00 00 00 		ld	 	de,$0000
   21 D1:B2FF D9 -  -  -  		exx
   22 D1:B300 D5 -  -  -  		push 	de
   23 D1:B301 E5 -  -  -  		push 	hl
   24 D1:B302 11 00 00 00 		ld 		de,$000
   25 D1:B306 D9 -  -  -  		exx
   26 D1:B307 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B308 -  -  -  -  		;
   28 D1:B308 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B30A 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B30C ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B30E 5F -  -  -  		ld 		e,a
   32 D1:B30F -  -  -  -  		;
   33 D1:B30F D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B310 CB 7C -  -  		bit 	7,h
   35 D1:B312 D9 -  -  -  		exx
   36 D1:B313 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B315 -  -  -  -  		;
   38 D1:B315 CD E1 B2 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B319 -  -  -  -  		;
   40 D1:B319 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B31B 02 -  -  -  		ld 		(bc),a
   42 D1:B31C 03 -  -  -  		inc 	bc
   43 D1:B31D -  -  -  -  _I32TSNotNegative:	
   44 D1:B31D CD 2B B3 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B321 -  -  -  -  _I32TSExit:
   46 D1:B321 AF -  -  -  		xor 	a  							; write the end of string code
   47 D1:B322 02 -  -  -  		ld 		(bc),a 
   48 D1:B323 -  -  -  -  
   49 D1:B323 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B324 E1 -  -  -  		pop 	hl
   51 D1:B325 D1 -  -  -  		pop 	de
   52 D1:B326 D9 -  -  -  		exx
   53 D1:B327 E1 -  -  -  		pop 	hl
   54 D1:B328 D1 -  -  -  		pop 	de
   55 D1:B329 C1 -  -  -  		pop 	bc
   56 D1:B32A C9 -  -  -  		ret
   57 D1:B32B -  -  -  -  
   58 D1:B32B -  -  -  -  _I32RecursiveConvert:
   59 D1:B32B CD 3A B1 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B32F F5 -  -  -  		push 	af 							; save remainder
   61 D1:B330 CD B0 B2 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B334 C4 2B B3 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B338 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B339 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B33B 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B33D C6 07 -  -  		add 	a,7
   67 D1:B33F -  -  -  -  _I32NotHex:
   68 D1:B33F C6 30 -  -  		add 	a,48
   69 D1:B341 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B342 03 -  -  -  		inc 	bc
   71 D1:B343 C9 -  -  -  		ret		
   72 D1:B344 -  -  -  -  
   73 D1:B344 -  -  -  -  ; ***************************************************************************************
   74 D1:B344 -  -  -  -  ;
   75 D1:B344 -  -  -  -  ;									Changes and Updates
   76 D1:B344 -  -  -  -  ;
   77 D1:B344 -  -  -  -  ; ***************************************************************************************
   78 D1:B344 -  -  -  -  ;
   79 D1:B344 -  -  -  -  ;		Date			Notes
   80 D1:B344 -  -  -  -  ;		==== 			=====
   81 D1:B344 -  -  -  -  ;
   82 D1:B344 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:B344 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B344 -  -  -  -  ; ***************************************************************************************
    2 D1:B344 -  -  -  -  ; ***************************************************************************************
    3 D1:B344 -  -  -  -  ;
    4 D1:B344 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B344 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B344 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B344 -  -  -  -  ;		Reviewed :	No
    8 D1:B344 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B344 -  -  -  -  ;
   10 D1:B344 -  -  -  -  ; ***************************************************************************************
   11 D1:B344 -  -  -  -  ; ***************************************************************************************
   12 D1:B344 -  -  -  -  
   13 D1:B344 -  -  -  -  #ifdef AQUARIUS
   14 D1:B344             
   15 D1:B344             ; ***************************************************************************************
   16 D1:B344             ;
   17 D1:B344             ;								Initialise system stuff
   18 D1:B344             ;
   19 D1:B344             ; ***************************************************************************************
   20 D1:B344             
   21 D1:B344             SYSInitialise:
   22 D1:B344             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B344             	call 	SYSPrintChar
   24 D1:B344             	ret
   25 D1:B344             
   26 D1:B344             ; ***************************************************************************************
   27 D1:B344             ;
   28 D1:B344             ;								Terminate system stuff
   29 D1:B344             ;
   30 D1:B344             ; ***************************************************************************************
   31 D1:B344             
   32 D1:B344             SYSTerminate:
   33 D1:B344             	jr 		SYSTerminate
   34 D1:B344             
   35 D1:B344             ; ***************************************************************************************
   36 D1:B344             ;
   37 D1:B344             ;								Print A character
   38 D1:B344             ;
   39 D1:B344             ; ***************************************************************************************
   40 D1:B344             
   41 D1:B344             SYSPrintChar:
   42 D1:B344             	push 	af 									; we stack everything including alt registers
   43 D1:B344             	push 	bc
   44 D1:B344             	push 	de
   45 D1:B344             	push 	hl
   46 D1:B344             	push 	ix
   47 D1:B344             	push 	iy
   48 D1:B344             	exx
   49 D1:B344             	push 	bc
   50 D1:B344             	push 	de
   51 D1:B344             	push 	hl
   52 D1:B344             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B344             	pop 	hl
   54 D1:B344             	pop 	de
   55 D1:B344             	pop 	bc
   56 D1:B344             	exx
   57 D1:B344             	pop 	iy
   58 D1:B344             	pop 	ix
   59 D1:B344             	pop 	hl
   60 D1:B344             	pop 	de
   61 D1:B344             	pop 	bc
   62 D1:B344             	pop 	af
   63 D1:B344             	ret		
   64 D1:B344             
   65 D1:B344             ; ***************************************************************************************
   66 D1:B344             ;
   67 D1:B344             ;									Print Newline
   68 D1:B344             ;
   69 D1:B344             ; ***************************************************************************************
   70 D1:B344             
   71 D1:B344             SYSPrintCRLF:
   72 D1:B344             	push 	af
   73 D1:B344             	ld 		a,13
   74 D1:B344             	call 	SYSPrintChar
   75 D1:B344             	ld 		a,10
   76 D1:B344             	call 	SYSPrintChar
   77 D1:B344             	pop 	af
   78 D1:B344             	ret
   79 D1:B344             
   80 D1:B344             #endif
   81 D1:B344 -  -  -  -  
   82 D1:B344 -  -  -  -  ; ***************************************************************************************
   83 D1:B344 -  -  -  -  ;
   84 D1:B344 -  -  -  -  ;									Changes and Updates
   85 D1:B344 -  -  -  -  ;
   86 D1:B344 -  -  -  -  ; ***************************************************************************************
   87 D1:B344 -  -  -  -  ;
   88 D1:B344 -  -  -  -  ;		Date			Notes
   89 D1:B344 -  -  -  -  ;		==== 			=====
   90 D1:B344 -  -  -  -  ;
   91 D1:B344 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:B344 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B344 -  -  -  -  ; ***************************************************************************************
    2 D1:B344 -  -  -  -  ; ***************************************************************************************
    3 D1:B344 -  -  -  -  ;
    4 D1:B344 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B344 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B344 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B344 -  -  -  -  ;		Reviewed :	No
    8 D1:B344 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B344 -  -  -  -  ;
   10 D1:B344 -  -  -  -  ; ***************************************************************************************
   11 D1:B344 -  -  -  -  ; ***************************************************************************************
   12 D1:B344 -  -  -  -  
   13 D1:B344 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B344             
   15 D1:B344             ; ***************************************************************************************
   16 D1:B344             ;
   17 D1:B344             ;								Initialise system stuff
   18 D1:B344             ;
   19 D1:B344             ; ***************************************************************************************
   20 D1:B344             
   21 D1:B344             SYSInitialise:
   22 D1:B344             	ret
   23 D1:B344             
   24 D1:B344             ; ***************************************************************************************
   25 D1:B344             ;
   26 D1:B344             ;								Terminate system stuff
   27 D1:B344             ;
   28 D1:B344             ; ***************************************************************************************
   29 D1:B344             
   30 D1:B344             SYSTerminate:
   31 D1:B344             	ret
   32 D1:B344             
   33 D1:B344             ; ***************************************************************************************
   34 D1:B344             ;
   35 D1:B344             ;								Print A character
   36 D1:B344             ;
   37 D1:B344             ; ***************************************************************************************
   38 D1:B344             
   39 D1:B344             SYSPrintChar:
   40 D1:B344             	ret		
   41 D1:B344             
   42 D1:B344             ; ***************************************************************************************
   43 D1:B344             ;
   44 D1:B344             ;									Print Newline
   45 D1:B344             ;
   46 D1:B344             ; ***************************************************************************************
   47 D1:B344             
   48 D1:B344             SYSPrintCRLF:
   49 D1:B344             	ret
   50 D1:B344             
   51 D1:B344             #endif
   52 D1:B344 -  -  -  -  
   53 D1:B344 -  -  -  -  ; ***************************************************************************************
   54 D1:B344 -  -  -  -  ;
   55 D1:B344 -  -  -  -  ;									Changes and Updates
   56 D1:B344 -  -  -  -  ;
   57 D1:B344 -  -  -  -  ; ***************************************************************************************
   58 D1:B344 -  -  -  -  ;
   59 D1:B344 -  -  -  -  ;		Date			Notes
   60 D1:B344 -  -  -  -  ;		==== 			=====
   61 D1:B344 -  -  -  -  ;
   62 D1:B344 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:B344 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B344 -  -  -  -  ; ***************************************************************************************
    2 D1:B344 -  -  -  -  ; ***************************************************************************************
    3 D1:B344 -  -  -  -  ;
    4 D1:B344 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B344 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B344 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B344 -  -  -  -  ;		Reviewed :	No
    8 D1:B344 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B344 -  -  -  -  ;
   10 D1:B344 -  -  -  -  ; ***************************************************************************************
   11 D1:B344 -  -  -  -  ; ***************************************************************************************
   12 D1:B344 -  -  -  -  
   13 D1:B344 -  -  -  -  #ifdef TI84
   14 D1:B344 -  -  -  -  
   15 D1:B344 -  -  -  -  ; ***************************************************************************************
   16 D1:B344 -  -  -  -  ;
   17 D1:B344 -  -  -  -  ;								Initialise system stuff
   18 D1:B344 -  -  -  -  ;
   19 D1:B344 -  -  -  -  ; ***************************************************************************************
   20 D1:B344 -  -  -  -  
   21 D1:B344 -  -  -  -  SYSInitialise:
   22 D1:B344 F3 -  -  -  	di
   23 D1:B345 ED 73 62 B3 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B34A FD 22 66 B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B34F C9 -  -  -  	ret
   26 D1:B350 -  -  -  -  
   27 D1:B350 -  -  -  -  ; ***************************************************************************************
   28 D1:B350 -  -  -  -  ;
   29 D1:B350 -  -  -  -  ;								Terminate system stuff
   30 D1:B350 -  -  -  -  ;
   31 D1:B350 -  -  -  -  ; ***************************************************************************************
   32 D1:B350 -  -  -  -  
   33 D1:B350 -  -  -  -  SYSTerminate:
   34 D1:B350 ED 7B 62 B3 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B355 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B357 FD 2A 66 B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B35C FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B360 FB -  -  -  	ei
   39 D1:B361 C9 -  -  -  	ret 										; and exit.
   40 D1:B362 -  -  -  -  
   41 D1:B362 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B362 00 00 00 00 	.dw 	0,0
   43 D1:B366 -  -  -  -  _IYTemp84:
   44 D1:B366 00 00 00 00 	.dw 	0,0		
   45 D1:B36A -  -  -  -  
   46 D1:B36A -  -  -  -  ; ***************************************************************************************
   47 D1:B36A -  -  -  -  ;
   48 D1:B36A -  -  -  -  ;								Print A character
   49 D1:B36A -  -  -  -  ;
   50 D1:B36A -  -  -  -  ; ***************************************************************************************
   51 D1:B36A -  -  -  -  
   52 D1:B36A -  -  -  -  SYSPrintChar:
   53 D1:B36A F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B36B C5 -  -  -  	push 	bc
   55 D1:B36C D5 -  -  -  	push 	de
   56 D1:B36D E5 -  -  -  	push 	hl
   57 D1:B36E DD E5 -  -  	push 	ix
   58 D1:B370 FD E5 -  -  	push 	iy
   59 D1:B372 D9 -  -  -  	exx
   60 D1:B373 C5 -  -  -  	push 	bc
   61 D1:B374 D5 -  -  -  	push 	de
   62 D1:B375 E5 -  -  -  	push 	hl
   63 D1:B376 -  -  -  -  
   64 D1:B376 FD 2A 66 B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B37B CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B37F F3 -  -  -  	di
   67 D1:B380 FD 22 66 B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B385 -  -  -  -  
   69 D1:B385 E1 -  -  -  	pop 	hl
   70 D1:B386 D1 -  -  -  	pop 	de
   71 D1:B387 C1 -  -  -  	pop 	bc
   72 D1:B388 D9 -  -  -  	exx
   73 D1:B389 FD E1 -  -  	pop 	iy
   74 D1:B38B DD E1 -  -  	pop 	ix
   75 D1:B38D E1 -  -  -  	pop 	hl
   76 D1:B38E D1 -  -  -  	pop 	de
   77 D1:B38F C1 -  -  -  	pop 	bc
   78 D1:B390 F1 -  -  -  	pop 	af
   79 D1:B391 C9 -  -  -  	ret		
   80 D1:B392 -  -  -  -  
   81 D1:B392 -  -  -  -  ; ***************************************************************************************
   82 D1:B392 -  -  -  -  ;
   83 D1:B392 -  -  -  -  ;									Print Newline
   84 D1:B392 -  -  -  -  ;
   85 D1:B392 -  -  -  -  ; ***************************************************************************************
   86 D1:B392 -  -  -  -  
   87 D1:B392 -  -  -  -  SYSPrintCRLF:
   88 D1:B392 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B393 C5 -  -  -  	push 	bc
   90 D1:B394 D5 -  -  -  	push 	de
   91 D1:B395 E5 -  -  -  	push 	hl
   92 D1:B396 DD E5 -  -  	push 	ix
   93 D1:B398 FD E5 -  -  	push 	iy
   94 D1:B39A D9 -  -  -  	exx
   95 D1:B39B C5 -  -  -  	push 	bc
   96 D1:B39C D5 -  -  -  	push 	de
   97 D1:B39D E5 -  -  -  	push 	hl
   98 D1:B39E -  -  -  -  
   99 D1:B39E FD 2A 66 B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B3A3 CD F0 07 02 	call 	_newline
  101 D1:B3A7 F3 -  -  -  	di
  102 D1:B3A8 FD 22 66 B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B3AD -  -  -  -  
  104 D1:B3AD E1 -  -  -  	pop 	hl
  105 D1:B3AE D1 -  -  -  	pop 	de
  106 D1:B3AF C1 -  -  -  	pop 	bc
  107 D1:B3B0 D9 -  -  -  	exx
  108 D1:B3B1 FD E1 -  -  	pop 	iy
  109 D1:B3B3 DD E1 -  -  	pop 	ix
  110 D1:B3B5 E1 -  -  -  	pop 	hl
  111 D1:B3B6 D1 -  -  -  	pop 	de
  112 D1:B3B7 C1 -  -  -  	pop 	bc
  113 D1:B3B8 F1 -  -  -  	pop 	af
  114 D1:B3B9 C9 -  -  -  	ret
  115 D1:B3BA -  -  -  -  
  116 D1:B3BA -  -  -  -  #endif
  117 D1:B3BA -  -  -  -  
  118 D1:B3BA -  -  -  -  ; ***************************************************************************************
  119 D1:B3BA -  -  -  -  ;
  120 D1:B3BA -  -  -  -  ;									Changes and Updates
  121 D1:B3BA -  -  -  -  ;
  122 D1:B3BA -  -  -  -  ; ***************************************************************************************
  123 D1:B3BA -  -  -  -  ;
  124 D1:B3BA -  -  -  -  ;		Date			Notes
  125 D1:B3BA -  -  -  -  ;		==== 			=====
  126 D1:B3BA -  -  -  -  ;
  127 D1:B3BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B3BA -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B3BA -  -  -  -  ; ***************************************************************************************
    2 D1:B3BA -  -  -  -  ; ***************************************************************************************
    3 D1:B3BA -  -  -  -  ;
    4 D1:B3BA -  -  -  -  ;		Name : 		basic.asm
    5 D1:B3BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3BA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B3BA -  -  -  -  ;		Reviewed :	No
    8 D1:B3BA -  -  -  -  ;		Purpose :	Main program.
    9 D1:B3BA -  -  -  -  ;
   10 D1:B3BA -  -  -  -  ; ***************************************************************************************
   11 D1:B3BA -  -  -  -  ; ***************************************************************************************
   12 D1:B3BA -  -  -  -  
   13 D1:B3BA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 D1:B400 -  -  -  -  TestInstance:
   15 D1:B400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B400 -  -  -  -  ;
    2 D1:B400 -  -  -  -  ;	This code automatically generated.
    3 D1:B400 -  -  -  -  ;
    4 D1:B400 -  -  -  -  TestProgram:
    5 D1:B400 22 01 00 B1 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B1 3F 0C 
              53 65 65 64 
              20 3D 20 38 
              30 33 33 37 
              0D 80 1C 03 
              00 BD 94 41 
              62 79 76 52 
              57 88 89 41 
              72 45 48 6A 
              67 9E 8E 89 
              4F 4B 52 58 
              50 80 1E 04 
              00 BD 94 89 
              41 6D 52 49 
              51 7E 90 89 
              41 74 68 66 
              48 76 9E 8E 
              89 41 7D 7A 
              6F 59 7E 80 
              14 05 00 BD 
              94 7F 78 6A 
              7A 52 86 6C 
              4F 7E 4D 4A 
              9E 8E 41 80 
              1C 06 00 BD 
              94 89 41 62 
              6B 5E 48 77 
              92 89 41 69 
              68 73 7E 70 
              9E 8E 4B 43 
              6D 76 59 80 
              1C 07 00 BD 
              94 89 5D 7F 
              6F 61 51 92 
              41 69 4D 47 
              40 77 9E 8E 
              89 41 74 72 
              68 61 68 80 
              1A 08 00 BD 
              94 89 5C 59 
              77 6B 7A 87 
              89 7E 47 5C 
              55 4F 9E 8E 
              5C 59 77 6B 
              7A 80 1A 09 
              00 BD 94 89 
              61 62 40 75 
              48 85 46 64 
              6E 60 72 9E 
              8E 89 5B 6A 
              7D 60 50 80 
              11 0A 00 BD 
              94 9D 83 4E 
              9E 8E 41 4C 
              52 74 69 49 
              80 1C 0B 00 
              BD 94 41 7D 
              53 62 42 69 
              91 89 41 76 
              7D 4E 60 4A 
              9E 8E 89 42 
              6C 4C 60 41 
              80 11 0C 00 
              BD 94 9D 83 
              4B 9E 8E 41 
              49 52 44 5D 
              46 80 1B 0D 
              00 BD 94 89 
              7C 51 75 4C 
              55 89 89 41 
              6B 68 6A 7A 
              51 9E 8E 6F 
              56 75 6D 7C 
              80 18 0E 00 
              BD 94 5A 54 
              6C 76 50 87 
              66 6A 5A 60 
              6F 9E 8E 5A 
              54 6C 76 50 
              80 1C 0F 00 
              BD 94 41 73 
              55 6E 6F 7C 
              87 89 41 7E 
              6A 67 6D 4C 
              9E 8E 41 73 
              55 6E 6F 7C 
              80 1A 10 00 
              BD 94 89 41 
              5B 72 40 76 
              65 90 41 48 
              7C 72 4A 7F 
              9E 8E 4C 72 
              48 5B 80 1B 
              11 00 BD 94 
              89 62 59 6C 
              6D 6B 89 89 
              41 5C 4C 79 
              6E 7E 9E 8E 
              79 73 4D 41 
              53 80 0D 12 
              00 BD 94 9D 
              84 51 9E 8E 
              41 4C 80 18 
              13 00 BD 94 
              7D 58 6B 4A 
              6B 89 7C 45 
              5D 49 70 9E 
              8E 41 53 4E 
              40 7B 80 1E 
              14 00 BD 94 
              89 41 48 68 
              65 58 58 90 
              89 41 45 73 
              72 66 44 9E 
              8E 89 41 4D 
              7B 77 7E 58 
              80 11 15 00 
              BD 94 9D 83 
              4C 9E 8E 41 
              4A 52 54 61 
              47 80 1C 16 
              00 BD 94 89 
              41 73 44 51 
              44 6F 85 54 
              64 53 46 6F 
              9E 8E 89 41 
              54 64 7B 78 
              61 80 1A 17 
              00 BD 94 41 
              47 75 5B 45 
              4D 88 89 68 
              6C 74 6F 67 
              9E 8E 5F 48 
              66 55 66 80 
              11 18 00 BD 
              94 9D 83 4F 
              9E 8E 41 4D 
              53 44 6D 4A 
              80 1A 19 00 
              BD 94 89 42 
              79 55 69 53 
              91 7C 5D 4F 
              4D 7F 9E 8E 
              89 42 60 50 
              60 41 80 1B 
              1A 00 BD 94 
              89 41 60 4E 
              59 6E 5A 92 
              89 41 60 6E 
              58 72 7C 9E 
              8E 60 41 5C 
              62 80 1C 1B 
              00 BD 94 89 
              41 6C 68 55 
              52 79 92 41 
              58 57 7D 71 
              6B 9E 8E 89 
              74 7F 68 63 
              54 80 1B 1C 
              00 BD 94 41 
              43 77 61 41 
              46 89 41 4D 
              49 6B 47 5C 
              9E 8E 89 49 
              52 4A 46 56 
              80 19 1D 00 
              BD 94 89 7D 
              67 48 76 76 
              90 5F 75 79 
              5A 67 9E 8E 
              42 50 71 48 
              42 80 1B 1E 
              00 BD 94 89 
              59 46 73 44 
              6F 85 41 43 
              5D 66 48 4C 
              9E 8E 41 71 
              4E 7B 4F 4C 
              80 1B 1F 00 
              BD 94 41 7D 
              4C 48 5C 40 
              87 89 41 56 
              63 6F 71 77 
              9E 8E 66 68 
              58 6A 49 80 
              1A 20 00 BD 
              94 89 75 6A 
              78 48 71 88 
              57 44 62 62 
              50 9E 8E 89 
              5E 66 55 66 
              61 80 1C 21 
              00 BD 94 89 
              41 70 67 77 
              64 5A 91 51 
              6C 48 6B 69 
              9E 8E 89 41 
              60 43 77 44 
              51 80 1B 22 
              00 BD 94 62 
              56 41 76 60 
              89 41 68 5A 
              46 6D 75 9E 
              8E 89 41 46 
              44 44 77 55 
              80 1C 23 00 
              BD 94 89 5D 
              73 67 47 5B 
              85 89 41 74 
              54 55 68 68 
              9E 8E 41 7E 
              64 7C 60 78 
              80 11 24 00 
              BD 94 9D 83 
              46 9E 8E 41 
              44 50 74 49 
              41 80 1C 25 
              00 BD 94 43 
              7F 70 59 6A 
              92 89 41 4C 
              44 4F 62 7E 
              9E 8E 89 41 
              4F 7B 7F 7B 
              58 80 1C 26 
              00 BD 94 89 
              61 6C 77 7D 
              42 85 89 41 
              4F 6B 72 74 
              66 9E 8E 89 
              55 77 68 48 
              74 80 1B 27 
              00 BD 94 89 
              41 67 50 74 
              5C 73 87 41 
              53 69 4B 5A 
              4D 9E 8E 53 
              67 69 42 66 
              80 1B 28 00 
              BD 94 41 5D 
              76 54 44 60 
              85 89 41 57 
              55 71 76 41 
              9E 8E 57 51 
              58 7B 60 80 
              11 29 00 BD 
              94 9D 83 49 
              9E 8E 41 47 
              51 64 55 44 
              80 15 2A 00 
              BD 94 42 7D 
              40 71 7D 86 
              89 46 5A 5D 
              42 6A 9E 8E 
              40 80 0D 2B 
              00 BD 94 9D 
              84 46 9E 8E 
              41 41 80 16 
              2C 00 BD 94 
              89 66 5C 5E 
              65 51 86 41 
              47 73 5D 68 
              5D 9E 8E 40 
              80 11 2D 00 
              BD 94 9D 83 
              52 9E 8E 41 
              50 53 74 79 
              4D 80 18 2E 
              00 BD 94 78 
              41 75 59 51 
              87 62 60 57 
              61 63 9E 8E 
              55 61 5D 77 
              6E 80 16 2F 
              00 BD 94 41 
              5D 60 5C 6D 
              76 86 41 7C 
              5F 65 73 43 
              9E 8E 40 80 
              1B 30 00 BD 
              94 89 58 68 
              57 45 64 90 
              41 46 54 64 
              4F 4E 9E 8E 
              41 46 54 60 
              4A 4C 80 1A 
              31 00 BD 94 
              42 72 6F 6F 
              56 88 89 72 
              4D 58 75 53 
              9E 8E 89 6F 
              5A 69 45 7D 
              80 0D 32 00 
              BD 94 9D 84 
              4B 9E 8E 41 
              46 80 11 33 
              00 BD 94 9D 
              83 46 9E 8E 
              41 44 50 74 
              49 41 80 19 
              34 00 BD 94 
              41 4D 42 6D 
              4D 50 89 6C 
              6C 5B 6F 75 
              9E 8E 60 56 
              51 5D 5B 80 
              1B 35 00 BD 
              94 41 65 64 
              76 5F 77 89 
              41 7F 4E 6A 
              66 46 9E 8E 
              89 59 69 74 
              46 4F 80 1A 
              36 00 BD 94 
              4D 40 75 54 
              69 92 89 6F 
              45 40 65 7D 
              9E 8E 89 62 
              45 75 71 56 
              80 18 37 00 
              BD 94 6A 43 
              4C 4A 5D 87 
              79 6F 66 6B 
              73 9E 8E 6A 
              43 4C 4A 5D 
              80 0D 38 00 
              BD 94 9D 84 
              4F 9E 8E 41 
              4A 80 16 39 
              00 BD 94 75 
              4E 47 87 89 
              41 7F 58 74 
              47 4B 9E 8E 
              75 4E 47 80 
              16 3A 00 BD 
              94 41 47 46 
              6B 74 47 86 
              41 47 59 7B 
              51 78 9E 8E 
              40 80 11 3B 
              00 BD 94 9D 
              83 49 9E 8E 
              41 47 51 64 
              55 44 80 1C 
              3C 00 BD 94 
              56 54 71 4D 
              79 88 89 41 
              5E 78 6C 5A 
              57 9E 8E 89 
              41 48 63 7B 
              4C 5E 80 1D 
              3D 00 BD 94 
              41 4B 4D 50 
              75 6A 89 89 
              41 59 70 76 
              69 79 9E 8E 
              89 41 5B 41 
              78 60 5D 80 
              1B 3E 00 BD 
              94 89 41 4C 
              79 57 6F 61 
              89 41 79 6D 
              41 6B 49 9E 
              8E 79 59 66 
              65 56 80 11 
              3F 00 BD 94 
              9D 83 49 9E 
              8E 41 47 51 
              64 55 44 80 
              1A 40 00 BD 
              94 89 4B 56 
              68 51 6D 85 
              67 52 59 59 
              4A 9E 8E 41 
              50 4A 4D 69 
              7E 80 1B 41 
              00 BD 94 89 
              41 42 50 40 
              5F 41 87 89 
              41 7D 5B 68 
              73 9E 8E 41 
              64 70 5C 6E 
              80 1A 42 00 
              BD 94 89 4B 
              77 5F 7C 57 
              92 4A 65 56 
              5F 64 9E 8E 
              89 41 52 49 
              63 73 80 1B 
              43 00 BD 94 
              41 65 4B 4B 
              6A 52 88 89 
              41 42 7F 7C 
              65 66 9E 8E 
              62 4B 4F 44 
              6C 80 19 44 
              00 BD 94 44 
              51 54 78 74 
              89 89 5E 51 
              52 50 46 9E 
              8E 62 62 67 
              48 7A 80 0D 
              45 00 BD 94 
              9D 84 4D 9E 
              8E 41 48 80 
              19 46 00 BD 
              94 46 6D 46 
              4E 51 89 6E 
              75 7B 4F 59 
              9E 8E 89 68 
              48 75 41 48 
              80 1A 47 00 
              BD 94 89 68 
              58 70 48 5B 
              85 6B 6B 42 
              55 71 9E 8E 
              89 56 49 5D 
              53 6B 80 18 
              48 00 BD 94 
              89 41 6D 67 
              57 6E 72 86 
              41 4C 4B 7E 
              43 48 9E 8E 
              89 41 80 1B 
              49 00 BD 94 
              41 47 50 7E 
              57 53 90 41 
              58 78 63 54 
              76 9E 8E 41 
              40 50 62 54 
              52 80 1C 4A 
              00 BD 94 89 
              4D 4F 41 66 
              59 92 41 46 
              51 5D 59 7E 
              9E 8E 89 41 
              4B 5E 5C 7F 
              67 80 1C 4B 
              00 BD 94 89 
              41 4F 58 4B 
              6A 78 91 41 
              40 6C 7D 59 
              4B 9E 8E 89 
              4F 50 42 62 
              75 80 19 4C 
              00 BD 94 89 
              60 73 44 44 
              71 88 6A 42 
              63 49 45 9E 
              8E 49 4F 5F 
              44 54 80 0D 
              4D 00 BD 94 
              9D 84 46 9E 
              8E 41 41 80 
              11 4E 00 BD 
              94 9D 83 53 
              9E 8E 41 51 
              54 44 7D 4E 
              80 17 4F 00 
              BD 94 89 41 
              54 48 7E 56 
              4C 86 41 63 
              42 79 61 75 
              9E 8E 40 80 
              19 50 00 BD 
              94 78 68 5A 
              45 54 90 41 
              5B 42 5D 70 
              59 9E 8E 58 
              40 58 40 50 
              80 11 51 00 
              BD 94 9D 83 
              4B 9E 8E 41 
              49 52 44 5D 
              46 80 1B 52 
              00 BD 94 89 
              4C 59 4C 6C 
              71 85 50 5F 
              41 70 53 9E 
              8E 89 41 6D 
              5C 47 42 63 
              80 0D 53 00 
              BD 94 9D 84 
              50 9E 8E 41 
              4B 80 1B 54 
              00 BD 94 41 
              44 4F 4D 55 
              56 90 89 41 
              48 5F 45 6A 
              6C 9E 8E 44 
              40 48 55 54 
              80 1C 55 00 
              BD 94 89 41 
              43 43 4E 6B 
              77 92 89 4E 
              62 5F 44 66 
              9E 8E 41 4D 
              61 51 6F 53 
              80 1A 56 00 
              BD 94 41 51 
              4A 54 57 67 
              91 4D 65 78 
              7B 6D 9E 8E 
              41 5D 6F 7C 
              7F 6F 80 1C 
              57 00 BD 94 
              89 41 77 60 
              7B 40 5B 91 
              89 6B 5F 47 
              4F 4E 9E 8E 
              89 63 40 43 
              40 49 80 1B 
              58 00 BD 94 
              41 66 50 49 
              73 46 88 41 
              5D 5D 62 4C 
              56 9E 8E 89 
              7C 52 54 40 
              64 80 0D 59 
              00 BD 94 9D 
              84 47 9E 8E 
              41 42 80 1A 
              5A 00 BD 94 
              41 7E 79 72 
              56 76 92 48 
              67 7E 46 74 
              9E 8E 41 76 
              5E 4C 50 42 
              80 1C 5B 00 
              BD 94 89 41 
              4E 6C 62 79 
              67 89 89 41 
              5A 57 56 52 
              5F 9E 8E 4B 
              6A 73 58 78 
              80 11 5C 00 
              BD 94 9D 83 
              4F 9E 8E 41 
              4D 53 44 6D 
              4A 80 1C 5D 
              00 BD 94 89 
              64 59 48 5D 
              7C 92 89 41 
              4E 68 5B 72 
              62 9E 8E 41 
              6A 71 53 6F 
              5A 80 19 5E 
              00 BD 94 5B 
              5C 5F 6F 66 
              90 89 41 78 
              7C 55 6E 9E 
              8E 5A 44 43 
              6A 42 80 1C 
              5F 00 BD 94 
              58 64 6B 66 
              69 88 89 41 
              5D 53 59 73 
              45 9E 8E 89 
              41 44 6E 6E 
              4C 5C 80 1C 
              60 00 BD 94 
              89 41 6A 44 
              5A 72 58 91 
              89 74 73 62 
              7E 6B 9E 8E 
              89 60 40 42 
              72 43 80 19 
              61 00 BD 94 
              65 72 72 7F 
              58 87 41 7D 
              7D 4D 5B 68 
              9E 8E 65 72 
              72 7F 58 80 
              11 62 00 BD 
              94 9D 83 52 
              9E 8E 41 50 
              53 74 79 4D 
              80 19 63 00 
              BD 94 41 60 
              79 7D 44 65 
              89 79 6A 77 
              73 5F 9E 8E 
              67 4F 45 51 
              46 80 1B 64 
              00 BD 94 89 
              48 7B 55 69 
              54 88 41 6F 
              4C 5B 58 7A 
              9E 8E 41 66 
              51 45 6F 66 
              80 1C 65 00 
              BD 94 89 77 
              77 7A 58 49 
              85 89 41 7D 
              5B 46 7A 72 
              9E 8E 41 63 
              69 55 41 42 
              80 11 66 00 
              BD 94 9D 83 
              4A 9E 8E 41 
              48 51 74 59 
              45 80 19 67 
              00 BD 94 89 
              69 59 66 6D 
              73 90 45 7F 
              6B 66 6F 9E 
              8E 44 66 49 
              42 4D 80 1C 
              68 00 BD 94 
              89 41 57 49 
              59 46 63 92 
              89 48 72 5D 
              61 65 9E 8E 
              41 5F 7B 44 
              67 46 80 1A 
              69 00 BD 94 
              41 59 43 5D 
              7B 5F 89 52 
              73 4A 5C 58 
              9E 8E 41 46 
              50 53 5F 47 
              80 1B 6A 00 
              BD 94 89 53 
              7C 76 62 5B 
              91 89 51 64 
              48 43 5F 9E 
              8E 89 51 64 
              40 42 5B 80 
              1D 6B 00 BD 
              94 41 75 49 
              6A 6F 5F 85 
              89 41 67 48 
              7A 61 57 9E 
              8E 89 41 69 
              5A 7C 43 49 
              80 1A 6C 00 
              BD 94 41 66 
              62 79 7E 5B 
              87 41 54 62 
              47 40 68 9E 
              8E 52 40 72 
              7D 73 80 19 
              6D 00 BD 94 
              89 41 62 6D 
              73 4E 78 85 
              41 61 4A 78 
              77 66 9E 8E 
              73 42 70 80 
              17 6E 00 BD 
              94 89 41 5B 
              6D 62 67 70 
              86 89 4C 42 
              4B 76 51 9E 
              8E 47 80 1A 
              6F 00 BD 94 
              41 6E 62 6E 
              5B 4B 85 6F 
              76 50 46 4C 
              9E 8E 89 5A 
              43 7F 77 7C 
              80 1A 70 00 
              BD 94 45 53 
              52 4F 52 90 
              89 41 63 45 
              52 40 58 9E 
              8E 44 52 40 
              4F 40 80 1B 
              71 00 BD 94 
              89 45 7E 62 
              58 4D 90 41 
              6B 42 69 5F 
              4D 9E 8E 41 
              6A 40 49 47 
              41 80 0D 72 
              00 BD 94 9D 
              84 54 9E 8E 
              41 4F 80 16 
              73 00 BD 94 
              89 58 53 79 
              4F 72 86 89 
              74 75 4C 67 
              4D 9E 8E 40 
              80 1A 74 00 
              BD 94 66 5C 
              52 6F 4A 90 
              89 41 60 49 
              52 5B 4A 9E 
              8E 46 54 40 
              64 42 80 1A 
              75 00 BD 94 
              89 41 4A 7C 
              6F 52 69 90 
              72 76 41 45 
              40 9E 8E 70 
              42 40 45 40 
              80 1B 76 00 
              BD 94 89 41 
              6C 7E 6E 4D 
              4A 87 89 59 
              7D 7E 44 5B 
              9E 8E 45 46 
              75 7B 5E 80 
              15 77 00 BD 
              94 44 5C 56 
              5D 44 86 89 
              79 7B 71 78 
              7E 9E 8E 40 
              80 1B 78 00 
              BD 94 41 7A 
              56 73 4D 78 
              91 41 44 5D 
              68 50 49 9E 
              8E 41 7E 5F 
              7B 5D 79 80 
              1C 79 00 BD 
              94 89 41 75 
              41 48 44 41 
              87 89 41 6D 
              4A 4A 77 6B 
              9E 8E 47 76 
              7D 4C 56 80 
              1A 7A 00 BD 
              94 7D 5F 54 
              4C 7F 89 89 
              60 5A 69 57 
              41 9E 8E 41 
              5D 79 7D 64 
              40 80 19 7B 
              00 BD 94 89 
              41 7B 78 47 
              52 49 90 52 
              7C 42 6B 57 
              9E 8E 44 40 
              69 57 80 1A 
              7C 00 BD 94 
              7E 7A 64 6D 
              54 90 89 41 
              6E 6E 6F 58 
              52 9E 8E 50 
              50 40 65 44 
              80 1C 7D 00 
              BD 94 4D 6A 
              41 6A 56 88 
              89 41 6F 64 
              6C 47 7F 9E 
              8E 89 41 61 
              7A 6A 5D 69 
              80 18 7E 00 
              BD 94 51 6F 
              5D 75 79 91 
              7D 6C 4C 57 
              62 9E 8E 7D 
              6F 5D 77 7B 
              80 16 7F 00 
              BD 94 89 4E 
              46 61 7C 75 
              86 89 5D 49 
              75 52 76 9E 
              8E 40 80 1C 
              80 00 BD 94 
              41 4E 57 41 
              62 61 92 89 
              41 75 6E 55 
              71 4A 9E 8E 
              89 7B 79 54 
              53 69 80 1D 
              81 00 BD 94 
              41 57 48 5B 
              6D 47 85 89 
              41 58 7B 48 
              6B 42 9E 8E 
              89 41 43 7E 
              43 47 4E 80 
              1B 82 00 BD 
              94 89 41 69 
              46 65 6E 50 
              85 6A 45 57 
              5F 67 9E 8E 
              89 7A 4A 48 
              7B 70 80 1C 
              83 00 BD 94 
              89 41 7B 5D 
              76 72 51 88 
              53 6A 42 4A 
              5F 9E 8E 89 
              41 67 73 74 
              67 72 80 18 
              84 00 BD 94 
              52 66 66 4B 
              57 91 70 55 
              69 5A 44 9E 
              8E 72 77 6F 
              5B 57 80 11 
              85 00 BD 94 
              9D 83 4B 9E 
              8E 41 49 52 
              44 5D 46 80 
              11 86 00 BD 
              94 9D 83 49 
              9E 8E 41 47 
              51 64 55 44 
              80 0D 87 00 
              BD 94 9D 84 
              4B 9E 8E 41 
              46 80 15 88 
              00 BD 94 41 
              4D 7A 44 72 
              57 86 71 7E 
              70 73 4A 9E 
              8E 41 80 11 
              89 00 BD 94 
              9D 83 4A 9E 
              8E 41 48 51 
              74 59 45 80 
              1C 8A 00 BD 
              94 89 6E 5C 
              57 72 72 85 
              41 67 4D 57 
              51 4B 9E 8E 
              89 41 76 66 
              63 40 66 80 
              17 8B 00 BD 
              94 89 56 6A 
              57 48 75 86 
              89 41 4E 6C 
              68 75 79 9E 
              8E 40 80 1B 
              8C 00 BD 94 
              41 58 6C 47 
              48 56 88 41 
              74 58 56 4B 
              4B 9E 8E 89 
              72 7B 62 6C 
              5F 80 1C 8D 
              00 BD 94 89 
              41 73 7A 4F 
              47 40 92 89 
              6E 40 44 4C 
              79 9E 8E 41 
              5D 7A 4B 4A 
              47 80 11 8E 
              00 BD 94 9D 
              83 53 9E 8E 
              41 51 54 44 
              7D 4E 80 1C 
              8F 00 BD 94 
              89 41 68 78 
              5C 5B 6B 89 
              41 50 4F 59 
              5D 4D 9E 8E 
              41 46 78 4A 
              47 48 80 1B 
              90 00 BD 94 
              89 41 72 54 
              5F 54 4C 87 
              89 5E 66 41 
              5A 43 9E 8E 
              56 62 5B 46 
              43 80 1A 91 
              00 BD 94 41 
              7C 4D 6A 78 
              65 85 89 6B 
              70 75 56 73 
              9E 8E 60 70 
              6F 4C 61 80 
              1C 92 00 BD 
              94 89 76 7B 
              5F 4C 5C 85 
              41 65 66 6F 
              6E 5D 9E 8E 
              89 41 48 48 
              68 70 6C 80 
              19 93 00 BD 
              94 89 64 6E 
              57 46 6C 88 
              7F 49 5C 61 
              48 9E 8E 5A 
              5B 45 5A 5C 
              80 19 94 00 
              BD 94 41 6D 
              46 62 4F 76 
              87 51 57 52 
              6A 42 9E 8E 
              44 7A 72 53 
              6A 80 0D 95 
              00 BD 94 9D 
              84 53 9E 8E 
              41 4E 80 1D 
              96 00 BD 94 
              89 41 7A 4B 
              54 58 41 89 
              89 45 49 61 
              79 5E 9E 8E 
              89 41 75 41 
              72 5E 63 80 
              11 97 00 BD 
              94 9D 83 4F 
              9E 8E 41 4D 
              53 44 6D 4A 
              80 19 98 00 
              BD 94 41 78 
              71 7B 6C 42 
              87 48 6C 43 
              42 4C 9E 8E 
              47 75 54 4F 
              66 80 1C 99 
              00 BD 94 89 
              41 4C 69 46 
              51 59 92 89 
              44 59 47 60 
              60 9E 8E 41 
              48 70 41 71 
              47 80 19 9A 
              00 BD 94 61 
              44 75 5D 59 
              87 89 6A 40 
              44 4C 79 9E 
              8E 61 44 75 
              5D 59 80 1E 
              9B 00 BD 94 
              89 41 7D 6C 
              45 40 5F 90 
              89 41 40 61 
              76 54 68 9E 
              8E 89 41 7D 
              6D 77 55 40 
              80 19 9C 00 
              BD 94 41 53 
              6F 40 4F 61 
              87 79 55 43 
              46 52 9E 8E 
              5A 59 7D 49 
              4F 80 0D 9D 
              00 BD 94 9D 
              84 4D 9E 8E 
              41 48 80 1A 
              9E 00 BD 94 
              75 40 79 78 
              65 90 89 41 
              6D 6C 6A 77 
              6D 9E 8E 50 
              40 51 48 41 
              80 0D 9F 00 
              BD 94 9D 84 
              4A 9E 8E 41 
              45 80 1C A0 
              00 BD 94 89 
              41 7D 4D 5F 
              67 57 91 7A 
              54 5A 4F 58 
              9E 8E 89 41 
              45 49 45 60 
              47 80 11 A1 
              00 BD 94 9D 
              83 46 9E 8E 
              41 44 50 74 
              49 41 80 11 
              A2 00 BD 94 
              9D 83 4D 9E 
              8E 41 4B 52 
              64 65 48 80 
              1B A3 00 BD 
              94 89 41 5E 
              4C 75 79 58 
              85 41 4E 5B 
              5D 62 6D 9E 
              8E 44 4D 6F 
              7A 48 80 1B 
              A4 00 BD 94 
              89 5F 60 74 
              4E 68 89 89 
              5E 40 58 47 
              76 9E 8E 89 
              41 60 5C 46 
              72 80 1B A5 
              00 BD 94 41 
              72 4D 56 5E 
              5C 88 65 51 
              46 7E 52 9E 
              8E 89 41 68 
              61 62 63 52 
              80 11 A6 00 
              BD 94 9D 83 
              4C 9E 8E 41 
              4A 52 54 61 
              47 80 1C A7 
              00 BD 94 89 
              41 54 5F 7C 
              7B 63 91 69 
              6D 4A 7B 42 
              9E 8E 89 41 
              54 52 74 40 
              61 80 1A A8 
              00 BD 94 79 
              4A 65 5A 68 
              92 89 43 78 
              54 78 74 9E 
              8E 89 7A 72 
              71 62 5C 80 
              1C A9 00 BD 
              94 89 41 7D 
              79 66 7B 68 
              85 89 60 71 
              75 71 45 9E 
              8E 89 4A 6C 
              4B 6D 78 80 
              0D AA 00 BD 
              94 9D 84 48 
              9E 8E 41 43 
              80 1A AB 00 
              BD 94 89 54 
              64 6F 45 5F 
              91 45 60 49 
              49 58 9E 8E 
              89 50 44 66 
              44 47 80 18 
              AC 00 BD 94 
              5D 5B 5D 74 
              54 87 6D 72 
              77 5D 6A 9E 
              8E 5D 5B 5D 
              74 54 80 1C 
              AD 00 BD 94 
              89 4A 7E 73 
              4F 6E 85 89 
              41 4C 7B 55 
              7B 7C 9E 8E 
              89 78 54 57 
              76 78 80 1C 
              AE 00 BD 94 
              5F 57 60 59 
              7A 92 89 41 
              7D 7B 7B 4E 
              62 9E 8E 89 
              41 62 6C 5B 
              57 5C 80 14 
              AF 00 BD 94 
              76 4C 4C 75 
              63 86 7D 74 
              46 67 54 9E 
              8E 40 80 18 
              B0 00 BD 94 
              6C 55 4D 45 
              48 91 43 6E 
              50 75 53 9E 
              8E 6F 7F 5D 
              75 5B 80 1B 
              B1 00 BD 94 
              7B 75 48 72 
              6B 88 89 41 
              4C 46 47 6C 
              6E 9E 8E 89 
              50 50 7E 7A 
              43 80 1B B2 
              00 BD 94 41 
              7D 7B 4A 59 
              7E 91 41 46 
              40 66 7E 4B 
              9E 8E 41 7F 
              7B 6E 7F 7F 
              80 1A B3 00 
              BD 94 6C 77 
              74 44 54 91 
              89 75 51 4A 
              4A 50 9E 8E 
              89 51 40 4A 
              4A 4C 80 11 
              B4 00 BD 94 
              9D 83 48 9E 
              8E 41 46 51 
              54 51 43 80 
              1C B5 00 BD 
              94 5F 53 73 
              4C 5F 92 89 
              41 47 5E 64 
              59 51 9E 8E 
              89 41 58 4D 
              57 55 50 80 
              0D B6 00 BD 
              94 9D 84 4A 
              9E 8E 41 45 
              80 16 B7 00 
              BD 94 41 76 
              41 52 6C 4A 
              86 41 5D 6D 
              49 52 70 9E 
              8E 41 80 19 
              B8 00 BD 94 
              4F 52 42 6B 
              66 90 41 77 
              7A 76 75 54 
              9E 8E 47 52 
              42 61 44 80 
              17 B9 00 BD 
              94 89 41 56 
              74 58 78 5C 
              86 41 75 64 
              5F 79 69 9E 
              8E 40 80 11 
              BA 00 BD 94 
              9D 83 46 9E 
              8E 41 44 50 
              74 49 41 80 
              0D BB 00 BD 
              94 9D 84 4A 
              9E 8E 41 45 
              80 1C BC 00 
              BD 94 89 4B 
              4B 7D 4C 77 
              89 89 41 75 
              47 4A 47 65 
              9E 8E 41 69 
              7B 4C 7A 6E 
              80 1A BD 00 
              BD 94 41 53 
              55 43 69 62 
              91 59 62 4D 
              41 55 9E 8E 
              41 5B 77 4F 
              69 77 80 1A 
              BE 00 BD 94 
              41 76 44 66 
              63 77 92 41 
              4A 74 5F 76 
              73 9E 8E 7C 
              70 79 55 44 
              80 1A BF 00 
              BD 94 41 5C 
              63 7B 7C 75 
              92 50 5D 49 
              5B 4E 9E 8E 
              41 4C 7E 72 
              67 7B 80 1B 
              C0 00 BD 94 
              89 77 5E 72 
              43 6C 90 89 
              78 4E 66 70 
              77 9E 8E 89 
              7F 5E 76 74 
              40 80 1B C1 
              00 BD 94 89 
              6F 6C 4F 7B 
              43 90 89 6C 
              66 56 58 5A 
              9E 8E 89 6F 
              6E 5F 7B 5C 
              80 11 C2 00 
              BD 94 9D 83 
              4B 9E 8E 41 
              49 52 44 5D 
              46 80 1C C3 
              00 BD 94 89 
              41 61 48 4B 
              6B 70 92 89 
              41 68 4C 4B 
              76 57 9E 8E 
              49 44 40 5D 
              79 80 11 C4 
              00 BD 94 9D 
              83 4C 9E 8E 
              41 4A 52 54 
              61 47 80 1A 
              C5 00 BD 94 
              7F 62 79 53 
              55 90 89 41 
              76 60 6F 74 
              67 9E 8E 49 
              42 50 43 51 
              80 1C C6 00 
              BD 94 89 7C 
              4F 5A 7D 6F 
              92 89 41 78 
              4B 57 5F 43 
              9E 8E 41 44 
              44 4D 62 6C 
              80 1C C7 00 
              BD 94 5F 56 
              6D 61 61 91 
              89 41 55 61 
              6A 7A 4C 9E 
              8E 89 41 40 
              61 42 5A 4B 
              80 19 C8 00 
              BD 94 41 55 
              5C 4E 78 78 
              90 4E 65 5F 
              42 63 9E 8E 
              44 44 4E 40 
              60 80 1B C9 
              00 BD 94 5F 
              71 52 46 5E 
              89 41 6E 6E 
              68 56 49 9E 
              8E 89 41 4E 
              7D 56 4F 6B 
              80 19 CA 00 
              BD 94 70 74 
              4B 5B 61 85 
              89 44 53 58 
              72 5F 9E 8E 
              44 6B 65 79 
              41 80 00 -  	.db	$22,$01,$00,$b1,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b1,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$38,$30,$33,$33,$37,$0d,$80,$1c,$03,$00,$bd,$94,$41,$62,$79,$76,$52,$57,$88,$89,$41,$72,$45,$48,$6a,$67,$9e,$8e,$89,$4f,$4b,$52,$58,$50,$80,$1e,$04,$00,$bd,$94,$89,$41,$6d,$52,$49,$51,$7e,$90,$89,$41,$74,$68,$66,$48,$76,$9e,$8e,$89,$41,$7d,$7a,$6f,$59,$7e,$80,$14,$05,$00,$bd,$94,$7f,$78,$6a,$7a,$52,$86,$6c,$4f,$7e,$4d,$4a,$9e,$8e,$41,$80,$1c,$06,$00,$bd,$94,$89,$41,$62,$6b,$5e,$48,$77,$92,$89,$41,$69,$68,$73,$7e,$70,$9e,$8e,$4b,$43,$6d,$76,$59,$80,$1c,$07,$00,$bd,$94,$89,$5d,$7f,$6f,$61,$51,$92,$41,$69,$4d,$47,$40,$77,$9e,$8e,$89,$41,$74,$72,$68,$61,$68,$80,$1a,$08,$00,$bd,$94,$89,$5c,$59,$77,$6b,$7a,$87,$89,$7e,$47,$5c,$55,$4f,$9e,$8e,$5c,$59,$77,$6b,$7a,$80,$1a,$09,$00,$bd,$94,$89,$61,$62,$40,$75,$48,$85,$46,$64,$6e,$60,$72,$9e,$8e,$89,$5b,$6a,$7d,$60,$50,$80,$11,$0a,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$1c,$0b,$00,$bd,$94,$41,$7d,$53,$62,$42,$69,$91,$89,$41,$76,$7d,$4e,$60,$4a,$9e,$8e,$89,$42,$6c,$4c,$60,$41,$80,$11,$0c,$00,$bd,$94,$9d,$83,$4b,$9e,$8e,$41,$49,$52,$44,$5d,$46,$80,$1b,$0d,$00,$bd,$94,$89,$7c,$51,$75,$4c,$55,$89,$89,$41,$6b,$68,$6a,$7a,$51,$9e,$8e,$6f,$56,$75,$6d,$7c,$80,$18,$0e,$00,$bd,$94,$5a,$54,$6c,$76,$50,$87,$66,$6a,$5a,$60,$6f,$9e,$8e,$5a,$54,$6c,$76,$50,$80,$1c,$0f,$00,$bd,$94,$41,$73,$55,$6e,$6f,$7c,$87,$89,$41,$7e,$6a,$67,$6d,$4c,$9e,$8e,$41,$73,$55,$6e,$6f,$7c,$80,$1a,$10,$00,$bd,$94,$89,$41,$5b,$72,$40,$76,$65,$90,$41,$48,$7c,$72,$4a,$7f,$9e,$8e,$4c,$72,$48,$5b,$80,$1b,$11,$00,$bd,$94,$89,$62,$59,$6c,$6d,$6b,$89,$89,$41,$5c,$4c,$79,$6e,$7e,$9e,$8e,$79,$73,$4d,$41,$53,$80,$0d,$12,$00,$bd,$94,$9d,$84,$51,$9e,$8e,$41,$4c,$80,$18,$13,$00,$bd,$94,$7d,$58,$6b,$4a,$6b,$89,$7c,$45,$5d,$49,$70,$9e,$8e,$41,$53,$4e,$40,$7b,$80,$1e,$14,$00,$bd,$94,$89,$41,$48,$68,$65,$58,$58,$90,$89,$41,$45,$73,$72,$66,$44,$9e,$8e,$89,$41,$4d,$7b,$77,$7e,$58,$80,$11,$15,$00,$bd,$94,$9d,$83,$4c,$9e,$8e,$41,$4a,$52,$54,$61,$47,$80,$1c,$16,$00,$bd,$94,$89,$41,$73,$44,$51,$44,$6f,$85,$54,$64,$53,$46,$6f,$9e,$8e,$89,$41,$54,$64,$7b,$78,$61,$80,$1a,$17,$00,$bd,$94,$41,$47,$75,$5b,$45,$4d,$88,$89,$68,$6c,$74,$6f,$67,$9e,$8e,$5f,$48,$66,$55,$66,$80,$11,$18,$00,$bd,$94,$9d,$83,$4f,$9e,$8e,$41,$4d,$53,$44,$6d,$4a,$80,$1a,$19,$00,$bd,$94,$89,$42,$79,$55,$69,$53,$91,$7c,$5d,$4f,$4d,$7f,$9e,$8e,$89,$42,$60,$50,$60,$41,$80,$1b,$1a,$00,$bd,$94,$89,$41,$60,$4e,$59,$6e,$5a,$92,$89,$41,$60,$6e,$58,$72,$7c,$9e,$8e,$60,$41,$5c,$62,$80,$1c,$1b,$00,$bd,$94,$89,$41,$6c,$68,$55,$52,$79,$92,$41,$58,$57,$7d,$71,$6b,$9e,$8e,$89,$74,$7f,$68,$63,$54,$80,$1b,$1c,$00,$bd,$94,$41,$43,$77,$61,$41,$46,$89,$41,$4d,$49,$6b,$47,$5c,$9e,$8e,$89,$49,$52,$4a,$46,$56,$80,$19,$1d,$00,$bd,$94,$89,$7d,$67,$48,$76,$76,$90,$5f,$75,$79,$5a,$67,$9e,$8e,$42,$50,$71,$48,$42,$80,$1b,$1e,$00,$bd,$94,$89,$59,$46,$73,$44,$6f,$85,$41,$43,$5d,$66,$48,$4c,$9e,$8e,$41,$71,$4e,$7b,$4f,$4c,$80,$1b,$1f,$00,$bd,$94,$41,$7d,$4c,$48,$5c,$40,$87,$89,$41,$56,$63,$6f,$71,$77,$9e,$8e,$66,$68,$58,$6a,$49,$80,$1a,$20,$00,$bd,$94,$89,$75,$6a,$78,$48,$71,$88,$57,$44,$62,$62,$50,$9e,$8e,$89,$5e,$66,$55,$66,$61,$80,$1c,$21,$00,$bd,$94,$89,$41,$70,$67,$77,$64,$5a,$91,$51,$6c,$48,$6b,$69,$9e,$8e,$89,$41,$60,$43,$77,$44,$51,$80,$1b,$22,$00,$bd,$94,$62,$56,$41,$76,$60,$89,$41,$68,$5a,$46,$6d,$75,$9e,$8e,$89,$41,$46,$44,$44,$77,$55,$80,$1c,$23,$00,$bd,$94,$89,$5d,$73,$67,$47,$5b,$85,$89,$41,$74,$54,$55,$68,$68,$9e,$8e,$41,$7e,$64,$7c,$60,$78,$80,$11,$24,$00,$bd,$94,$9d,$83,$46,$9e,$8e,$41,$44,$50,$74,$49,$41,$80,$1c,$25,$00,$bd,$94,$43,$7f,$70,$59,$6a,$92,$89,$41,$4c,$44,$4f,$62,$7e,$9e,$8e,$89,$41,$4f,$7b,$7f,$7b,$58,$80,$1c,$26,$00,$bd,$94,$89,$61,$6c,$77,$7d,$42,$85,$89,$41,$4f,$6b,$72,$74,$66,$9e,$8e,$89,$55,$77,$68,$48,$74,$80,$1b,$27,$00,$bd,$94,$89,$41,$67,$50,$74,$5c,$73,$87,$41,$53,$69,$4b,$5a,$4d,$9e,$8e,$53,$67,$69,$42,$66,$80,$1b,$28,$00,$bd,$94,$41,$5d,$76,$54,$44,$60,$85,$89,$41,$57,$55,$71,$76,$41,$9e,$8e,$57,$51,$58,$7b,$60,$80,$11,$29,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$15,$2a,$00,$bd,$94,$42,$7d,$40,$71,$7d,$86,$89,$46,$5a,$5d,$42,$6a,$9e,$8e,$40,$80,$0d,$2b,$00,$bd,$94,$9d,$84,$46,$9e,$8e,$41,$41,$80,$16,$2c,$00,$bd,$94,$89,$66,$5c,$5e,$65,$51,$86,$41,$47,$73,$5d,$68,$5d,$9e,$8e,$40,$80,$11,$2d,$00,$bd,$94,$9d,$83,$52,$9e,$8e,$41,$50,$53,$74,$79,$4d,$80,$18,$2e,$00,$bd,$94,$78,$41,$75,$59,$51,$87,$62,$60,$57,$61,$63,$9e,$8e,$55,$61,$5d,$77,$6e,$80,$16,$2f,$00,$bd,$94,$41,$5d,$60,$5c,$6d,$76,$86,$41,$7c,$5f,$65,$73,$43,$9e,$8e,$40,$80,$1b,$30,$00,$bd,$94,$89,$58,$68,$57,$45,$64,$90,$41,$46,$54,$64,$4f,$4e,$9e,$8e,$41,$46,$54,$60,$4a,$4c,$80,$1a,$31,$00,$bd,$94,$42,$72,$6f,$6f,$56,$88,$89,$72,$4d,$58,$75,$53,$9e,$8e,$89,$6f,$5a,$69,$45,$7d,$80,$0d,$32,$00,$bd,$94,$9d,$84,$4b,$9e,$8e,$41,$46,$80,$11,$33,$00,$bd,$94,$9d,$83,$46,$9e,$8e,$41,$44,$50,$74,$49,$41,$80,$19,$34,$00,$bd,$94,$41,$4d,$42,$6d,$4d,$50,$89,$6c,$6c,$5b,$6f,$75,$9e,$8e,$60,$56,$51,$5d,$5b,$80,$1b,$35,$00,$bd,$94,$41,$65,$64,$76,$5f,$77,$89,$41,$7f,$4e,$6a,$66,$46,$9e,$8e,$89,$59,$69,$74,$46,$4f,$80,$1a,$36,$00,$bd,$94,$4d,$40,$75,$54,$69,$92,$89,$6f,$45,$40,$65,$7d,$9e,$8e,$89,$62,$45,$75,$71,$56,$80,$18,$37,$00,$bd,$94,$6a,$43,$4c,$4a,$5d,$87,$79,$6f,$66,$6b,$73,$9e,$8e,$6a,$43,$4c,$4a,$5d,$80,$0d,$38,$00,$bd,$94,$9d,$84,$4f,$9e,$8e,$41,$4a,$80,$16,$39,$00,$bd,$94,$75,$4e,$47,$87,$89,$41,$7f,$58,$74,$47,$4b,$9e,$8e,$75,$4e,$47,$80,$16,$3a,$00,$bd,$94,$41,$47,$46,$6b,$74,$47,$86,$41,$47,$59,$7b,$51,$78,$9e,$8e,$40,$80,$11,$3b,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$1c,$3c,$00,$bd,$94,$56,$54,$71,$4d,$79,$88,$89,$41,$5e,$78,$6c,$5a,$57,$9e,$8e,$89,$41,$48,$63,$7b,$4c,$5e,$80,$1d,$3d,$00,$bd,$94,$41,$4b,$4d,$50,$75,$6a,$89,$89,$41,$59,$70,$76,$69,$79,$9e,$8e,$89,$41,$5b,$41,$78,$60,$5d,$80,$1b,$3e,$00,$bd,$94,$89,$41,$4c,$79,$57,$6f,$61,$89,$41,$79,$6d,$41,$6b,$49,$9e,$8e,$79,$59,$66,$65,$56,$80,$11,$3f,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$1a,$40,$00,$bd,$94,$89,$4b,$56,$68,$51,$6d,$85,$67,$52,$59,$59,$4a,$9e,$8e,$41,$50,$4a,$4d,$69,$7e,$80,$1b,$41,$00,$bd,$94,$89,$41,$42,$50,$40,$5f,$41,$87,$89,$41,$7d,$5b,$68,$73,$9e,$8e,$41,$64,$70,$5c,$6e,$80,$1a,$42,$00,$bd,$94,$89,$4b,$77,$5f,$7c,$57,$92,$4a,$65,$56,$5f,$64,$9e,$8e,$89,$41,$52,$49,$63,$73,$80,$1b,$43,$00,$bd,$94,$41,$65,$4b,$4b,$6a,$52,$88,$89,$41,$42,$7f,$7c,$65,$66,$9e,$8e,$62,$4b,$4f,$44,$6c,$80,$19,$44,$00,$bd,$94,$44,$51,$54,$78,$74,$89,$89,$5e,$51,$52,$50,$46,$9e,$8e,$62,$62,$67,$48,$7a,$80,$0d,$45,$00,$bd,$94,$9d,$84,$4d,$9e,$8e,$41,$48,$80,$19,$46,$00,$bd,$94,$46,$6d,$46,$4e,$51,$89,$6e,$75,$7b,$4f,$59,$9e,$8e,$89,$68,$48,$75,$41,$48,$80,$1a,$47,$00,$bd,$94,$89,$68,$58,$70,$48,$5b,$85,$6b,$6b,$42,$55,$71,$9e,$8e,$89,$56,$49,$5d,$53,$6b,$80,$18,$48,$00,$bd,$94,$89,$41,$6d,$67,$57,$6e,$72,$86,$41,$4c,$4b,$7e,$43,$48,$9e,$8e,$89,$41,$80,$1b,$49,$00,$bd,$94,$41,$47,$50,$7e,$57,$53,$90,$41,$58,$78,$63,$54,$76,$9e,$8e,$41,$40,$50,$62,$54,$52,$80,$1c,$4a,$00,$bd,$94,$89,$4d,$4f,$41,$66,$59,$92,$41,$46,$51,$5d,$59,$7e,$9e,$8e,$89,$41,$4b,$5e,$5c,$7f,$67,$80,$1c,$4b,$00,$bd,$94,$89,$41,$4f,$58,$4b,$6a,$78,$91,$41,$40,$6c,$7d,$59,$4b,$9e,$8e,$89,$4f,$50,$42,$62,$75,$80,$19,$4c,$00,$bd,$94,$89,$60,$73,$44,$44,$71,$88,$6a,$42,$63,$49,$45,$9e,$8e,$49,$4f,$5f,$44,$54,$80,$0d,$4d,$00,$bd,$94,$9d,$84,$46,$9e,$8e,$41,$41,$80,$11,$4e,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$17,$4f,$00,$bd,$94,$89,$41,$54,$48,$7e,$56,$4c,$86,$41,$63,$42,$79,$61,$75,$9e,$8e,$40,$80,$19,$50,$00,$bd,$94,$78,$68,$5a,$45,$54,$90,$41,$5b,$42,$5d,$70,$59,$9e,$8e,$58,$40,$58,$40,$50,$80,$11,$51,$00,$bd,$94,$9d,$83,$4b,$9e,$8e,$41,$49,$52,$44,$5d,$46,$80,$1b,$52,$00,$bd,$94,$89,$4c,$59,$4c,$6c,$71,$85,$50,$5f,$41,$70,$53,$9e,$8e,$89,$41,$6d,$5c,$47,$42,$63,$80,$0d,$53,$00,$bd,$94,$9d,$84,$50,$9e,$8e,$41,$4b,$80,$1b,$54,$00,$bd,$94,$41,$44,$4f,$4d,$55,$56,$90,$89,$41,$48,$5f,$45,$6a,$6c,$9e,$8e,$44,$40,$48,$55,$54,$80,$1c,$55,$00,$bd,$94,$89,$41,$43,$43,$4e,$6b,$77,$92,$89,$4e,$62,$5f,$44,$66,$9e,$8e,$41,$4d,$61,$51,$6f,$53,$80,$1a,$56,$00,$bd,$94,$41,$51,$4a,$54,$57,$67,$91,$4d,$65,$78,$7b,$6d,$9e,$8e,$41,$5d,$6f,$7c,$7f,$6f,$80,$1c,$57,$00,$bd,$94,$89,$41,$77,$60,$7b,$40,$5b,$91,$89,$6b,$5f,$47,$4f,$4e,$9e,$8e,$89,$63,$40,$43,$40,$49,$80,$1b,$58,$00,$bd,$94,$41,$66,$50,$49,$73,$46,$88,$41,$5d,$5d,$62,$4c,$56,$9e,$8e,$89,$7c,$52,$54,$40,$64,$80,$0d,$59,$00,$bd,$94,$9d,$84,$47,$9e,$8e,$41,$42,$80,$1a,$5a,$00,$bd,$94,$41,$7e,$79,$72,$56,$76,$92,$48,$67,$7e,$46,$74,$9e,$8e,$41,$76,$5e,$4c,$50,$42,$80,$1c,$5b,$00,$bd,$94,$89,$41,$4e,$6c,$62,$79,$67,$89,$89,$41,$5a,$57,$56,$52,$5f,$9e,$8e,$4b,$6a,$73,$58,$78,$80,$11,$5c,$00,$bd,$94,$9d,$83,$4f,$9e,$8e,$41,$4d,$53,$44,$6d,$4a,$80,$1c,$5d,$00,$bd,$94,$89,$64,$59,$48,$5d,$7c,$92,$89,$41,$4e,$68,$5b,$72,$62,$9e,$8e,$41,$6a,$71,$53,$6f,$5a,$80,$19,$5e,$00,$bd,$94,$5b,$5c,$5f,$6f,$66,$90,$89,$41,$78,$7c,$55,$6e,$9e,$8e,$5a,$44,$43,$6a,$42,$80,$1c,$5f,$00,$bd,$94,$58,$64,$6b,$66,$69,$88,$89,$41,$5d,$53,$59,$73,$45,$9e,$8e,$89,$41,$44,$6e,$6e,$4c,$5c,$80,$1c,$60,$00,$bd,$94,$89,$41,$6a,$44,$5a,$72,$58,$91,$89,$74,$73,$62,$7e,$6b,$9e,$8e,$89,$60,$40,$42,$72,$43,$80,$19,$61,$00,$bd,$94,$65,$72,$72,$7f,$58,$87,$41,$7d,$7d,$4d,$5b,$68,$9e,$8e,$65,$72,$72,$7f,$58,$80,$11,$62,$00,$bd,$94,$9d,$83,$52,$9e,$8e,$41,$50,$53,$74,$79,$4d,$80,$19,$63,$00,$bd,$94,$41,$60,$79,$7d,$44,$65,$89,$79,$6a,$77,$73,$5f,$9e,$8e,$67,$4f,$45,$51,$46,$80,$1b,$64,$00,$bd,$94,$89,$48,$7b,$55,$69,$54,$88,$41,$6f,$4c,$5b,$58,$7a,$9e,$8e,$41,$66,$51,$45,$6f,$66,$80,$1c,$65,$00,$bd,$94,$89,$77,$77,$7a,$58,$49,$85,$89,$41,$7d,$5b,$46,$7a,$72,$9e,$8e,$41,$63,$69,$55,$41,$42,$80,$11,$66,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$19,$67,$00,$bd,$94,$89,$69,$59,$66,$6d,$73,$90,$45,$7f,$6b,$66,$6f,$9e,$8e,$44,$66,$49,$42,$4d,$80,$1c,$68,$00,$bd,$94,$89,$41,$57,$49,$59,$46,$63,$92,$89,$48,$72,$5d,$61,$65,$9e,$8e,$41,$5f,$7b,$44,$67,$46,$80,$1a,$69,$00,$bd,$94,$41,$59,$43,$5d,$7b,$5f,$89,$52,$73,$4a,$5c,$58,$9e,$8e,$41,$46,$50,$53,$5f,$47,$80,$1b,$6a,$00,$bd,$94,$89,$53,$7c,$76,$62,$5b,$91,$89,$51,$64,$48,$43,$5f,$9e,$8e,$89,$51,$64,$40,$42,$5b,$80,$1d,$6b,$00,$bd,$94,$41,$75,$49,$6a,$6f,$5f,$85,$89,$41,$67,$48,$7a,$61,$57,$9e,$8e,$89,$41,$69,$5a,$7c,$43,$49,$80,$1a,$6c,$00,$bd,$94,$41,$66,$62,$79,$7e,$5b,$87,$41,$54,$62,$47,$40,$68,$9e,$8e,$52,$40,$72,$7d,$73,$80,$19,$6d,$00,$bd,$94,$89,$41,$62,$6d,$73,$4e,$78,$85,$41,$61,$4a,$78,$77,$66,$9e,$8e,$73,$42,$70,$80,$17,$6e,$00,$bd,$94,$89,$41,$5b,$6d,$62,$67,$70,$86,$89,$4c,$42,$4b,$76,$51,$9e,$8e,$47,$80,$1a,$6f,$00,$bd,$94,$41,$6e,$62,$6e,$5b,$4b,$85,$6f,$76,$50,$46,$4c,$9e,$8e,$89,$5a,$43,$7f,$77,$7c,$80,$1a,$70,$00,$bd,$94,$45,$53,$52,$4f,$52,$90,$89,$41,$63,$45,$52,$40,$58,$9e,$8e,$44,$52,$40,$4f,$40,$80,$1b,$71,$00,$bd,$94,$89,$45,$7e,$62,$58,$4d,$90,$41,$6b,$42,$69,$5f,$4d,$9e,$8e,$41,$6a,$40,$49,$47,$41,$80,$0d,$72,$00,$bd,$94,$9d,$84,$54,$9e,$8e,$41,$4f,$80,$16,$73,$00,$bd,$94,$89,$58,$53,$79,$4f,$72,$86,$89,$74,$75,$4c,$67,$4d,$9e,$8e,$40,$80,$1a,$74,$00,$bd,$94,$66,$5c,$52,$6f,$4a,$90,$89,$41,$60,$49,$52,$5b,$4a,$9e,$8e,$46,$54,$40,$64,$42,$80,$1a,$75,$00,$bd,$94,$89,$41,$4a,$7c,$6f,$52,$69,$90,$72,$76,$41,$45,$40,$9e,$8e,$70,$42,$40,$45,$40,$80,$1b,$76,$00,$bd,$94,$89,$41,$6c,$7e,$6e,$4d,$4a,$87,$89,$59,$7d,$7e,$44,$5b,$9e,$8e,$45,$46,$75,$7b,$5e,$80,$15,$77,$00,$bd,$94,$44,$5c,$56,$5d,$44,$86,$89,$79,$7b,$71,$78,$7e,$9e,$8e,$40,$80,$1b,$78,$00,$bd,$94,$41,$7a,$56,$73,$4d,$78,$91,$41,$44,$5d,$68,$50,$49,$9e,$8e,$41,$7e,$5f,$7b,$5d,$79,$80,$1c,$79,$00,$bd,$94,$89,$41,$75,$41,$48,$44,$41,$87,$89,$41,$6d,$4a,$4a,$77,$6b,$9e,$8e,$47,$76,$7d,$4c,$56,$80,$1a,$7a,$00,$bd,$94,$7d,$5f,$54,$4c,$7f,$89,$89,$60,$5a,$69,$57,$41,$9e,$8e,$41,$5d,$79,$7d,$64,$40,$80,$19,$7b,$00,$bd,$94,$89,$41,$7b,$78,$47,$52,$49,$90,$52,$7c,$42,$6b,$57,$9e,$8e,$44,$40,$69,$57,$80,$1a,$7c,$00,$bd,$94,$7e,$7a,$64,$6d,$54,$90,$89,$41,$6e,$6e,$6f,$58,$52,$9e,$8e,$50,$50,$40,$65,$44,$80,$1c,$7d,$00,$bd,$94,$4d,$6a,$41,$6a,$56,$88,$89,$41,$6f,$64,$6c,$47,$7f,$9e,$8e,$89,$41,$61,$7a,$6a,$5d,$69,$80,$18,$7e,$00,$bd,$94,$51,$6f,$5d,$75,$79,$91,$7d,$6c,$4c,$57,$62,$9e,$8e,$7d,$6f,$5d,$77,$7b,$80,$16,$7f,$00,$bd,$94,$89,$4e,$46,$61,$7c,$75,$86,$89,$5d,$49,$75,$52,$76,$9e,$8e,$40,$80,$1c,$80,$00,$bd,$94,$41,$4e,$57,$41,$62,$61,$92,$89,$41,$75,$6e,$55,$71,$4a,$9e,$8e,$89,$7b,$79,$54,$53,$69,$80,$1d,$81,$00,$bd,$94,$41,$57,$48,$5b,$6d,$47,$85,$89,$41,$58,$7b,$48,$6b,$42,$9e,$8e,$89,$41,$43,$7e,$43,$47,$4e,$80,$1b,$82,$00,$bd,$94,$89,$41,$69,$46,$65,$6e,$50,$85,$6a,$45,$57,$5f,$67,$9e,$8e,$89,$7a,$4a,$48,$7b,$70,$80,$1c,$83,$00,$bd,$94,$89,$41,$7b,$5d,$76,$72,$51,$88,$53,$6a,$42,$4a,$5f,$9e,$8e,$89,$41,$67,$73,$74,$67,$72,$80,$18,$84,$00,$bd,$94,$52,$66,$66,$4b,$57,$91,$70,$55,$69,$5a,$44,$9e,$8e,$72,$77,$6f,$5b,$57,$80,$11,$85,$00,$bd,$94,$9d,$83,$4b,$9e,$8e,$41,$49,$52,$44,$5d,$46,$80,$11,$86,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$0d,$87,$00,$bd,$94,$9d,$84,$4b,$9e,$8e,$41,$46,$80,$15,$88,$00,$bd,$94,$41,$4d,$7a,$44,$72,$57,$86,$71,$7e,$70,$73,$4a,$9e,$8e,$41,$80,$11,$89,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$1c,$8a,$00,$bd,$94,$89,$6e,$5c,$57,$72,$72,$85,$41,$67,$4d,$57,$51,$4b,$9e,$8e,$89,$41,$76,$66,$63,$40,$66,$80,$17,$8b,$00,$bd,$94,$89,$56,$6a,$57,$48,$75,$86,$89,$41,$4e,$6c,$68,$75,$79,$9e,$8e,$40,$80,$1b,$8c,$00,$bd,$94,$41,$58,$6c,$47,$48,$56,$88,$41,$74,$58,$56,$4b,$4b,$9e,$8e,$89,$72,$7b,$62,$6c,$5f,$80,$1c,$8d,$00,$bd,$94,$89,$41,$73,$7a,$4f,$47,$40,$92,$89,$6e,$40,$44,$4c,$79,$9e,$8e,$41,$5d,$7a,$4b,$4a,$47,$80,$11,$8e,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$1c,$8f,$00,$bd,$94,$89,$41,$68,$78,$5c,$5b,$6b,$89,$41,$50,$4f,$59,$5d,$4d,$9e,$8e,$41,$46,$78,$4a,$47,$48,$80,$1b,$90,$00,$bd,$94,$89,$41,$72,$54,$5f,$54,$4c,$87,$89,$5e,$66,$41,$5a,$43,$9e,$8e,$56,$62,$5b,$46,$43,$80,$1a,$91,$00,$bd,$94,$41,$7c,$4d,$6a,$78,$65,$85,$89,$6b,$70,$75,$56,$73,$9e,$8e,$60,$70,$6f,$4c,$61,$80,$1c,$92,$00,$bd,$94,$89,$76,$7b,$5f,$4c,$5c,$85,$41,$65,$66,$6f,$6e,$5d,$9e,$8e,$89,$41,$48,$48,$68,$70,$6c,$80,$19,$93,$00,$bd,$94,$89,$64,$6e,$57,$46,$6c,$88,$7f,$49,$5c,$61,$48,$9e,$8e,$5a,$5b,$45,$5a,$5c,$80,$19,$94,$00,$bd,$94,$41,$6d,$46,$62,$4f,$76,$87,$51,$57,$52,$6a,$42,$9e,$8e,$44,$7a,$72,$53,$6a,$80,$0d,$95,$00,$bd,$94,$9d,$84,$53,$9e,$8e,$41,$4e,$80,$1d,$96,$00,$bd,$94,$89,$41,$7a,$4b,$54,$58,$41,$89,$89,$45,$49,$61,$79,$5e,$9e,$8e,$89,$41,$75,$41,$72,$5e,$63,$80,$11,$97,$00,$bd,$94,$9d,$83,$4f,$9e,$8e,$41,$4d,$53,$44,$6d,$4a,$80,$19,$98,$00,$bd,$94,$41,$78,$71,$7b,$6c,$42,$87,$48,$6c,$43,$42,$4c,$9e,$8e,$47,$75,$54,$4f,$66,$80,$1c,$99,$00,$bd,$94,$89,$41,$4c,$69,$46,$51,$59,$92,$89,$44,$59,$47,$60,$60,$9e,$8e,$41,$48,$70,$41,$71,$47,$80,$19,$9a,$00,$bd,$94,$61,$44,$75,$5d,$59,$87,$89,$6a,$40,$44,$4c,$79,$9e,$8e,$61,$44,$75,$5d,$59,$80,$1e,$9b,$00,$bd,$94,$89,$41,$7d,$6c,$45,$40,$5f,$90,$89,$41,$40,$61,$76,$54,$68,$9e,$8e,$89,$41,$7d,$6d,$77,$55,$40,$80,$19,$9c,$00,$bd,$94,$41,$53,$6f,$40,$4f,$61,$87,$79,$55,$43,$46,$52,$9e,$8e,$5a,$59,$7d,$49,$4f,$80,$0d,$9d,$00,$bd,$94,$9d,$84,$4d,$9e,$8e,$41,$48,$80,$1a,$9e,$00,$bd,$94,$75,$40,$79,$78,$65,$90,$89,$41,$6d,$6c,$6a,$77,$6d,$9e,$8e,$50,$40,$51,$48,$41,$80,$0d,$9f,$00,$bd,$94,$9d,$84,$4a,$9e,$8e,$41,$45,$80,$1c,$a0,$00,$bd,$94,$89,$41,$7d,$4d,$5f,$67,$57,$91,$7a,$54,$5a,$4f,$58,$9e,$8e,$89,$41,$45,$49,$45,$60,$47,$80,$11,$a1,$00,$bd,$94,$9d,$83,$46,$9e,$8e,$41,$44,$50,$74,$49,$41,$80,$11,$a2,$00,$bd,$94,$9d,$83,$4d,$9e,$8e,$41,$4b,$52,$64,$65,$48,$80,$1b,$a3,$00,$bd,$94,$89,$41,$5e,$4c,$75,$79,$58,$85,$41,$4e,$5b,$5d,$62,$6d,$9e,$8e,$44,$4d,$6f,$7a,$48,$80,$1b,$a4,$00,$bd,$94,$89,$5f,$60,$74,$4e,$68,$89,$89,$5e,$40,$58,$47,$76,$9e,$8e,$89,$41,$60,$5c,$46,$72,$80,$1b,$a5,$00,$bd,$94,$41,$72,$4d,$56,$5e,$5c,$88,$65,$51,$46,$7e,$52,$9e,$8e,$89,$41,$68,$61,$62,$63,$52,$80,$11,$a6,$00,$bd,$94,$9d,$83,$4c,$9e,$8e,$41,$4a,$52,$54,$61,$47,$80,$1c,$a7,$00,$bd,$94,$89,$41,$54,$5f,$7c,$7b,$63,$91,$69,$6d,$4a,$7b,$42,$9e,$8e,$89,$41,$54,$52,$74,$40,$61,$80,$1a,$a8,$00,$bd,$94,$79,$4a,$65,$5a,$68,$92,$89,$43,$78,$54,$78,$74,$9e,$8e,$89,$7a,$72,$71,$62,$5c,$80,$1c,$a9,$00,$bd,$94,$89,$41,$7d,$79,$66,$7b,$68,$85,$89,$60,$71,$75,$71,$45,$9e,$8e,$89,$4a,$6c,$4b,$6d,$78,$80,$0d,$aa,$00,$bd,$94,$9d,$84,$48,$9e,$8e,$41,$43,$80,$1a,$ab,$00,$bd,$94,$89,$54,$64,$6f,$45,$5f,$91,$45,$60,$49,$49,$58,$9e,$8e,$89,$50,$44,$66,$44,$47,$80,$18,$ac,$00,$bd,$94,$5d,$5b,$5d,$74,$54,$87,$6d,$72,$77,$5d,$6a,$9e,$8e,$5d,$5b,$5d,$74,$54,$80,$1c,$ad,$00,$bd,$94,$89,$4a,$7e,$73,$4f,$6e,$85,$89,$41,$4c,$7b,$55,$7b,$7c,$9e,$8e,$89,$78,$54,$57,$76,$78,$80,$1c,$ae,$00,$bd,$94,$5f,$57,$60,$59,$7a,$92,$89,$41,$7d,$7b,$7b,$4e,$62,$9e,$8e,$89,$41,$62,$6c,$5b,$57,$5c,$80,$14,$af,$00,$bd,$94,$76,$4c,$4c,$75,$63,$86,$7d,$74,$46,$67,$54,$9e,$8e,$40,$80,$18,$b0,$00,$bd,$94,$6c,$55,$4d,$45,$48,$91,$43,$6e,$50,$75,$53,$9e,$8e,$6f,$7f,$5d,$75,$5b,$80,$1b,$b1,$00,$bd,$94,$7b,$75,$48,$72,$6b,$88,$89,$41,$4c,$46,$47,$6c,$6e,$9e,$8e,$89,$50,$50,$7e,$7a,$43,$80,$1b,$b2,$00,$bd,$94,$41,$7d,$7b,$4a,$59,$7e,$91,$41,$46,$40,$66,$7e,$4b,$9e,$8e,$41,$7f,$7b,$6e,$7f,$7f,$80,$1a,$b3,$00,$bd,$94,$6c,$77,$74,$44,$54,$91,$89,$75,$51,$4a,$4a,$50,$9e,$8e,$89,$51,$40,$4a,$4a,$4c,$80,$11,$b4,$00,$bd,$94,$9d,$83,$48,$9e,$8e,$41,$46,$51,$54,$51,$43,$80,$1c,$b5,$00,$bd,$94,$5f,$53,$73,$4c,$5f,$92,$89,$41,$47,$5e,$64,$59,$51,$9e,$8e,$89,$41,$58,$4d,$57,$55,$50,$80,$0d,$b6,$00,$bd,$94,$9d,$84,$4a,$9e,$8e,$41,$45,$80,$16,$b7,$00,$bd,$94,$41,$76,$41,$52,$6c,$4a,$86,$41,$5d,$6d,$49,$52,$70,$9e,$8e,$41,$80,$19,$b8,$00,$bd,$94,$4f,$52,$42,$6b,$66,$90,$41,$77,$7a,$76,$75,$54,$9e,$8e,$47,$52,$42,$61,$44,$80,$17,$b9,$00,$bd,$94,$89,$41,$56,$74,$58,$78,$5c,$86,$41,$75,$64,$5f,$79,$69,$9e,$8e,$40,$80,$11,$ba,$00,$bd,$94,$9d,$83,$46,$9e,$8e,$41,$44,$50,$74,$49,$41,$80,$0d,$bb,$00,$bd,$94,$9d,$84,$4a,$9e,$8e,$41,$45,$80,$1c,$bc,$00,$bd,$94,$89,$4b,$4b,$7d,$4c,$77,$89,$89,$41,$75,$47,$4a,$47,$65,$9e,$8e,$41,$69,$7b,$4c,$7a,$6e,$80,$1a,$bd,$00,$bd,$94,$41,$53,$55,$43,$69,$62,$91,$59,$62,$4d,$41,$55,$9e,$8e,$41,$5b,$77,$4f,$69,$77,$80,$1a,$be,$00,$bd,$94,$41,$76,$44,$66,$63,$77,$92,$41,$4a,$74,$5f,$76,$73,$9e,$8e,$7c,$70,$79,$55,$44,$80,$1a,$bf,$00,$bd,$94,$41,$5c,$63,$7b,$7c,$75,$92,$50,$5d,$49,$5b,$4e,$9e,$8e,$41,$4c,$7e,$72,$67,$7b,$80,$1b,$c0,$00,$bd,$94,$89,$77,$5e,$72,$43,$6c,$90,$89,$78,$4e,$66,$70,$77,$9e,$8e,$89,$7f,$5e,$76,$74,$40,$80,$1b,$c1,$00,$bd,$94,$89,$6f,$6c,$4f,$7b,$43,$90,$89,$6c,$66,$56,$58,$5a,$9e,$8e,$89,$6f,$6e,$5f,$7b,$5c,$80,$11,$c2,$00,$bd,$94,$9d,$83,$4b,$9e,$8e,$41,$49,$52,$44,$5d,$46,$80,$1c,$c3,$00,$bd,$94,$89,$41,$61,$48,$4b,$6b,$70,$92,$89,$41,$68,$4c,$4b,$76,$57,$9e,$8e,$49,$44,$40,$5d,$79,$80,$11,$c4,$00,$bd,$94,$9d,$83,$4c,$9e,$8e,$41,$4a,$52,$54,$61,$47,$80,$1a,$c5,$00,$bd,$94,$7f,$62,$79,$53,$55,$90,$89,$41,$76,$60,$6f,$74,$67,$9e,$8e,$49,$42,$50,$43,$51,$80,$1c,$c6,$00,$bd,$94,$89,$7c,$4f,$5a,$7d,$6f,$92,$89,$41,$78,$4b,$57,$5f,$43,$9e,$8e,$41,$44,$44,$4d,$62,$6c,$80,$1c,$c7,$00,$bd,$94,$5f,$56,$6d,$61,$61,$91,$89,$41,$55,$61,$6a,$7a,$4c,$9e,$8e,$89,$41,$40,$61,$42,$5a,$4b,$80,$19,$c8,$00,$bd,$94,$41,$55,$5c,$4e,$78,$78,$90,$4e,$65,$5f,$42,$63,$9e,$8e,$44,$44,$4e,$40,$60,$80,$1b,$c9,$00,$bd,$94,$5f,$71,$52,$46,$5e,$89,$41,$6e,$6e,$68,$56,$49,$9e,$8e,$89,$41,$4e,$7d,$56,$4f,$6b,$80,$19,$ca,$00,$bd,$94,$70,$74,$4b,$5b,$61,$85,$89,$44,$53,$58,$72,$5f,$9e,$8e,$44,$6b,$65,$79,$41,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C6E7 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D6E7 -  -  -  -  EndTestInstance:
   18 D1:D6E7 -  -  -  -  		
   19 D1:D6E7 -  -  -  -  ; ***************************************************************************************
   20 D1:D6E7 -  -  -  -  ;
   21 D1:D6E7 -  -  -  -  ;									Changes and Updates
   22 D1:D6E7 -  -  -  -  ;
   23 D1:D6E7 -  -  -  -  ; ***************************************************************************************
   24 D1:D6E7 -  -  -  -  ;
   25 D1:D6E7 -  -  -  -  ;		Date			Notes
   26 D1:D6E7 -  -  -  -  ;		==== 			=====
   27 D1:D6E7 -  -  -  -  ;
   28 D1:D6E7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:D6E7 -  -  -  -  FinalAddress:
