    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_MEMORY = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_MEMORY
   63 00:0000             	ld a,ERRID_MEMORY
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOCOMMA = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   70 00:0000             	ld a,ERRID_NOCOMMA
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NODOLLAR = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   77 00:0000             	ld a,ERRID_NODOLLAR
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOLBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   84 00:0000             	ld a,ERRID_NOLBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NORBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   91 00:0000             	ld a,ERRID_NORBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOTREF = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOTREF
   98 00:0000             	ld a,ERRID_NOTREF
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_STOP = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_STOP
  105 00:0000             	ld a,ERRID_STOP
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_SYNTAX = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_SYNTAX
  112 00:0000             	ld a,ERRID_SYNTAX
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_TODO = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_TODO
  119 00:0000             	ld a,ERRID_TODO
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  126 00:0000             	ld a,ERRID_UNKNOWNVAR
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 D1:A881             		ld 		sp,$BFFF
   41 D1:A881             #endif
   42 D1:A881             
   43 D1:A881             #endif
   44 D1:A881 CD A4 B7 D1 		call 	SYSInitialise
   45 D1:A885 11 00 BC D1 		ld 		de,TestInstance
   46 D1:A889 21 B4 CC D1 		ld 		hl,EndTestInstance
   47 D1:A88D CD 69 B1 D1 		call 	SetCurrentInstance
   48 D1:A891 -  -  -  -  
   49 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 D1:A893 32 E5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 D1:A897 -  -  -  -  		
   52 D1:A897 C3 20 AB D1 		jp 		Command_RUN
   53 D1:A89B -  -  -  -  
   54 D1:A89B -  -  -  -  WarmStart:		
   55 D1:A89B 3E 2A -  -  		ld 		a,'*'
   56 D1:A89D CD CA B7 D1 		call 	SYSPrintChar
   57 D1:A8A1 CD B0 B7 D1 		call 	SYSTerminate
   58 D1:A8A5 -  -  -  -  
   59 D1:A8A5 -  -  -  -  Unimplemented:
   60 D1:A8A5 3E 05 C3 DD 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   62 D1:A8AB 3E 06 C3 DD 
              AB D1 -  -  		ERR_DIVZERO
   63 D1:A8B1 -  -  -  -  
   64 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   65 D1:A8B1 -  -  -  -  ;
   66 D1:A8B1 -  -  -  -  ;									Changes and Updates
   67 D1:A8B1 -  -  -  -  ;
   68 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   69 D1:A8B1 -  -  -  -  ;
   70 D1:A8B1 -  -  -  -  ;		Date			Notes
   71 D1:A8B1 -  -  -  -  ;		==== 			=====
   72 D1:A8B1 -  -  -  -  ;
   73 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  
   78 D1:A8DD -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  		
   81 D1:A8E1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 D1:A8E1 00 00 00 00 		.dw 	0,0
   83 D1:A8E5 -  -  -  -  
   84 D1:A8E5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 D1:A8E5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8EB -  -  -  -  
   87 D1:A8EB -  -  -  -  AConvert: 									; used for address conversions.
   88 D1:A8EB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 D1:A8F1 -  -  -  -  		
   90 D1:A8F1 -  -  -  -  RandomSeed: 								; random number seeds.
   91 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 D1:A901 -  -  -  -  
   93 D1:A901 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 D1:A901 00 00 -  -  		.dw 	0
   95 D1:A903 -  -  -  -  
   96 D1:A903 -  -  -  -  PrintBase: 									; current base for PRINT
   97 D1:A903 00 00 -  -  		.dw 	0 
   98 D1:A905 -  -  -  -  		
   99 D1:A905 -  -  -  -  ; ***************************************************************************************
  100 D1:A905 -  -  -  -  ;
  101 D1:A905 -  -  -  -  ;									Variable Information
  102 D1:A905 -  -  -  -  ;
  103 D1:A905 -  -  -  -  ; ***************************************************************************************
  104 D1:A905 -  -  -  -  
  105 D1:A905 -  -  -  -  VarNameStart: 								; first byte of name
  106 D1:A905 00 00 00 00 		.dw 	0,0
  107 D1:A909 -  -  -  -  VarHash: 									; name hash value
  108 D1:A909 00 00 -  -  		.dw 	0		
  109 D1:A90B -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 D1:A90B 00 00 00 00 		.dw 	0,0
  111 D1:A90F -  -  -  -  		
  112 D1:A90F -  -  -  -  ; ***************************************************************************************
  113 D1:A90F -  -  -  -  ;
  114 D1:A90F -  -  -  -  ;										  Buffers
  115 D1:A90F -  -  -  -  ;
  116 D1:A90F -  -  -  -  ; ***************************************************************************************
  117 D1:A90F -  -  -  -  
  118 D1:A90F -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 D1:A90F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 D1:A91F -  -  -  -  
  121 D1:A91F -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 D1:A91F 00 00 -  -  		.dw 	0
  123 D1:A921 -  -  -  -  
  124 D1:A921 -  -  -  -  ConvertBuffer: 								; general usage
  125 D1:A921 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 D1:A961 -  -  -  -  
  127 D1:A961 -  -  -  -  ; ***************************************************************************************
  128 D1:A961 -  -  -  -  ;
  129 D1:A961 -  -  -  -  ;									Changes and Updates
  130 D1:A961 -  -  -  -  ;
  131 D1:A961 -  -  -  -  ; ***************************************************************************************
  132 D1:A961 -  -  -  -  ;
  133 D1:A961 -  -  -  -  ;		Date			Notes
  134 D1:A961 -  -  -  -  ;		==== 			=====
  135 D1:A961 -  -  -  -  ;
  136 D1:A961 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A961 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A961 -  -  -  -  ; ***************************************************************************************
    2 D1:A961 -  -  -  -  ; ***************************************************************************************
    3 D1:A961 -  -  -  -  ;
    4 D1:A961 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A961 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A961 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A961 -  -  -  -  ;		Reviewed :	No
    8 D1:A961 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A961 -  -  -  -  ;
   10 D1:A961 -  -  -  -  ; ***************************************************************************************
   11 D1:A961 -  -  -  -  ; ***************************************************************************************
   12 D1:A961 -  -  -  -  
   13 D1:A961 -  -  -  -  ; ***************************************************************************************
   14 D1:A961 -  -  -  -  ;
   15 D1:A961 -  -  -  -  ;									ASSERT command
   16 D1:A961 -  -  -  -  ;
   17 D1:A961 -  -  -  -  ; ***************************************************************************************
   18 D1:A961 -  -  -  -  
   19 D1:A961 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A961 CD 10 AE D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A965 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A96B C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A96C 3E 01 C3 DD 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A972 -  -  -  -  
   25 D1:A972 -  -  -  -  ; ***************************************************************************************
   26 D1:A972 -  -  -  -  ;
   27 D1:A972 -  -  -  -  ;									Changes and Updates
   28 D1:A972 -  -  -  -  ;
   29 D1:A972 -  -  -  -  ; ***************************************************************************************
   30 D1:A972 -  -  -  -  ;
   31 D1:A972 -  -  -  -  ;		Date			Notes
   32 D1:A972 -  -  -  -  ;		==== 			=====
   33 D1:A972 -  -  -  -  ;
   34 D1:A972 -  -  -  -  ; ***************************************************************************************
   35 D1:A972 -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A972 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A972 -  -  -  -  ; ***************************************************************************************
    2 D1:A972 -  -  -  -  ; ***************************************************************************************
    3 D1:A972 -  -  -  -  ;
    4 D1:A972 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A972 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A972 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A972 -  -  -  -  ;		Reviewed :	No
    8 D1:A972 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A972 -  -  -  -  ;
   10 D1:A972 -  -  -  -  ; ***************************************************************************************
   11 D1:A972 -  -  -  -  ; ***************************************************************************************
   12 D1:A972 -  -  -  -  
   13 D1:A972 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A972 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A972 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A972 -  -  -  -  BadCmd_Comma: 		;; [~]
   17 D1:A972 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 D1:A972 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A972 C3 47 AC D1 		jp 		SyntaxError
   20 D1:A976 -  -  -  -  
   21 D1:A976 -  -  -  -  ; ***************************************************************************************
   22 D1:A976 -  -  -  -  ;
   23 D1:A976 -  -  -  -  ;									Changes and Updates
   24 D1:A976 -  -  -  -  ;
   25 D1:A976 -  -  -  -  ; ***************************************************************************************
   26 D1:A976 -  -  -  -  ;
   27 D1:A976 -  -  -  -  ;		Date			Notes
   28 D1:A976 -  -  -  -  ;		==== 			=====
   29 D1:A976 -  -  -  -  ;
   30 D1:A976 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A976 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A976 -  -  -  -  ; ***************************************************************************************
    2 D1:A976 -  -  -  -  ; ***************************************************************************************
    3 D1:A976 -  -  -  -  ;
    4 D1:A976 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A976 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A976 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A976 -  -  -  -  ;		Reviewed :	No
    8 D1:A976 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A976 -  -  -  -  ;
   10 D1:A976 -  -  -  -  ; ***************************************************************************************
   11 D1:A976 -  -  -  -  ; ***************************************************************************************
   12 D1:A976 -  -  -  -  
   13 D1:A976 -  -  -  -  ; ***************************************************************************************
   14 D1:A976 -  -  -  -  ;
   15 D1:A976 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A976 -  -  -  -  ;
   17 D1:A976 -  -  -  -  ; ***************************************************************************************
   18 D1:A976 -  -  -  -  
   19 D1:A976 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A976 C9 -  -  -  		ret
   21 D1:A977 -  -  -  -  
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  ;
   24 D1:A977 -  -  -  -  ;									Changes and Updates
   25 D1:A977 -  -  -  -  ;
   26 D1:A977 -  -  -  -  ; ***************************************************************************************
   27 D1:A977 -  -  -  -  ;
   28 D1:A977 -  -  -  -  ;		Date			Notes
   29 D1:A977 -  -  -  -  ;		==== 			=====
   30 D1:A977 -  -  -  -  ;
   31 D1:A977 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A977 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A977 -  -  -  -  ; ***************************************************************************************
    2 D1:A977 -  -  -  -  ; ***************************************************************************************
    3 D1:A977 -  -  -  -  ;
    4 D1:A977 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A977 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A977 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A977 -  -  -  -  ;		Reviewed :	No
    8 D1:A977 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A977 -  -  -  -  ;
   10 D1:A977 -  -  -  -  ; ***************************************************************************************
   11 D1:A977 -  -  -  -  ; ***************************************************************************************
   12 D1:A977 -  -  -  -  
   13 D1:A977 -  -  -  -  ; ***************************************************************************************
   14 D1:A977 -  -  -  -  ;
   15 D1:A977 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:A977 -  -  -  -  ;	
   17 D1:A977 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:A977 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:A977 -  -  -  -  ;								(can be comma chained)
   20 D1:A977 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:A977 -  -  -  -  ;
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  
   24 D1:A977 -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:A977 -  -  -  -  		;
   26 D1:A977 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A977 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A977 -  -  -  -  		;
   29 D1:A977 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A979 D1 -  -  -  		pop 	de
   31 D1:A97A -  -  -  -  		;
   32 D1:A97A DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A97D FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A97F D2 47 AC D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A983 -  -  -  -  _DISkip:
   36 D1:A983 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A985 DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A988 FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A98A 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A98C -  -  -  -  		;
   41 D1:A98C DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A98F FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A991 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A992 CC F3 A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A996 F1 -  -  -  		pop 	af
   46 D1:A997 C4 AB A9 D1 		call 	nz,DimensionAllocate
   47 D1:A99B -  -  -  -  		;
   48 D1:A99B DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A99E FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A9A0 C0 -  -  -  		ret 	nz
   51 D1:A9A1 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A9A3 18 D2 -  -  		jr 		Command_DIM
   53 D1:A9A5 -  -  -  -  
   54 D1:A9A5 -  -  -  -  _CDError:
   55 D1:A9A5 3E 04 C3 DD 
              AB D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:A9AB -  -  -  -  
   57 D1:A9AB -  -  -  -  ; ***************************************************************************************
   58 D1:A9AB -  -  -  -  ;
   59 D1:A9AB -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:A9AB -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:A9AB -  -  -  -  ;
   62 D1:A9AB -  -  -  -  ; ***************************************************************************************
   63 D1:A9AB -  -  -  -  
   64 D1:A9AB -  -  -  -  DimensionAllocate:
   65 D1:A9AB D5 -  -  -  		push 	de 							; save start on stack
   66 D1:A9AC DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:A9AE 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:A9B0 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   69 D1:A9B4 CD E2 B1 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:A9B8 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:A9BA 28 E9 -  -  		jr 		z,_CDError
   72 D1:A9BC CB 41 -  -  		bit 	CIsString,c
   73 D1:A9BE 20 E5 -  -  		jr 		nz,_CDError
   74 D1:A9C0 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:A9C2 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:A9C3 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:A9C5 CD D1 AB D1 		call 	CheckNextA 					; check for [
   78 D1:A9C9 CD 10 AE D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:A9CD 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:A9CF CD D1 AB D1 		call 	CheckNextA 					; check for ]
   81 D1:A9D3 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:A9D4 7C -  -  -  		ld 		a,h
   83 D1:A9D5 B5 -  -  -  		or 		l
   84 D1:A9D6 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:A9D8 D9 -  -  -  		exx
   86 D1:A9D9 23 -  -  -  		inc 	hl
   87 D1:A9DA D9 -  -  -  		exx
   88 D1:A9DB -  -  -  -  _DANoCarry:
   89 D1:A9DB D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:A9DC 7C -  -  -  		ld 		a,h
   91 D1:A9DD B5 -  -  -  		or 		l
   92 D1:A9DE D9 -  -  -  		exx
   93 D1:A9DF 20 C4 -  -  		jr 		nz,_CDError
   94 D1:A9E1 CD F6 B0 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:A9E5 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:A9E6 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:A9E7 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:A9ED AF -  -  -  		xor 	a 							; autocreate off
   99 D1:A9EE 32 01 A9 D1 		ld 		(AllowAutoCreate),a
  100 D1:A9F2 C9 -  -  -  		ret
  101 D1:A9F3 -  -  -  -  
  102 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  103 D1:A9F3 -  -  -  -  ;
  104 D1:A9F3 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:A9F3 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:A9F3 -  -  -  -  ;
  107 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  108 D1:A9F3 -  -  -  -  
  109 D1:A9F3 -  -  -  -  DimensionArray:
  110 D1:A9F3 D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:A9F4 -  -  -  -  		;
  112 D1:A9F4 CD 10 AE D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:A9F8 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:A9F9 E6 FC -  -  		and 	$FC
  115 D1:A9FB D9 -  -  -  		exx
  116 D1:A9FC B4 -  -  -  		or 		h
  117 D1:A9FD B5 -  -  -  		or 		l
  118 D1:A9FE D9 -  -  -  		exx
  119 D1:A9FF 20 A4 -  -  		jr 		nz,_CDError
  120 D1:AA01 -  -  -  -  		;
  121 D1:AA01 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:AA03 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:AA04 -  -  -  -  		;
  124 D1:AA04 CD 6F B2 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AA08 CD AB B2 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AA0C 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AA0E -  -  -  -  		;
  128 D1:AA0E E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AA0F E5 -  -  -  		push 	hl
  130 D1:AA10 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AA11 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AA12 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AA13 29 -  -  -  		add 	hl,hl
  134 D1:AA14 CD 9F B1 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AA18 -  -  -  -  		;
  136 D1:AA18 D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AA19 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AA1D 09 -  -  -  		add 	hl,bc
  139 D1:AA1E ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AA24 DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AA26 C9 -  -  -  		ret		
  142 D1:AA27 -  -  -  -  
  143 D1:AA27 -  -  -  -  
  144 D1:AA27 -  -  -  -  ; ***************************************************************************************
  145 D1:AA27 -  -  -  -  ;
  146 D1:AA27 -  -  -  -  ;									Changes and Updates
  147 D1:AA27 -  -  -  -  ;
  148 D1:AA27 -  -  -  -  ; ***************************************************************************************
  149 D1:AA27 -  -  -  -  ;
  150 D1:AA27 -  -  -  -  ;		Date			Notes
  151 D1:AA27 -  -  -  -  ;		==== 			=====
  152 D1:AA27 -  -  -  -  ;
  153 D1:AA27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:AA27 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AA27 -  -  -  -  ; ***************************************************************************************
    2 D1:AA27 -  -  -  -  ; ***************************************************************************************
    3 D1:AA27 -  -  -  -  ;
    4 D1:AA27 -  -  -  -  ;		Name : 		end.asm
    5 D1:AA27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA27 -  -  -  -  ;		Reviewed :	No
    8 D1:AA27 -  -  -  -  ;		Purpose :	End command
    9 D1:AA27 -  -  -  -  ;
   10 D1:AA27 -  -  -  -  ; ***************************************************************************************
   11 D1:AA27 -  -  -  -  ; ***************************************************************************************
   12 D1:AA27 -  -  -  -  
   13 D1:AA27 -  -  -  -  ; ***************************************************************************************
   14 D1:AA27 -  -  -  -  ;
   15 D1:AA27 -  -  -  -  ;										END command
   16 D1:AA27 -  -  -  -  ;
   17 D1:AA27 -  -  -  -  ; ***************************************************************************************
   18 D1:AA27 -  -  -  -  
   19 D1:AA27 -  -  -  -  Command_END: 	;; [end]
   20 D1:AA27 3E 00 C3 DD 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AA2D -  -  -  -  
   22 D1:AA2D -  -  -  -  ; ***************************************************************************************
   23 D1:AA2D -  -  -  -  ;
   24 D1:AA2D -  -  -  -  ;									Changes and Updates
   25 D1:AA2D -  -  -  -  ;
   26 D1:AA2D -  -  -  -  ; ***************************************************************************************
   27 D1:AA2D -  -  -  -  ;
   28 D1:AA2D -  -  -  -  ;		Date			Notes
   29 D1:AA2D -  -  -  -  ;		==== 			=====
   30 D1:AA2D -  -  -  -  ;
   31 D1:AA2D -  -  -  -  ; ***************************************************************************************
   32 D1:AA2D -  -  -  -  		
Listing for file "_build.asm"
   18 D1:AA2D -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AA2D -  -  -  -  ; ***************************************************************************************
    2 D1:AA2D -  -  -  -  ; ***************************************************************************************
    3 D1:AA2D -  -  -  -  ;
    4 D1:AA2D -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AA2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA2D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA2D -  -  -  -  ;		Reviewed :	None
    8 D1:AA2D -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AA2D -  -  -  -  ;
   10 D1:AA2D -  -  -  -  ; ***************************************************************************************
   11 D1:AA2D -  -  -  -  ; ***************************************************************************************
   12 D1:AA2D -  -  -  -  
   13 D1:AA2D -  -  -  -  ; ***************************************************************************************
   14 D1:AA2D -  -  -  -  ;
   15 D1:AA2D -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AA2D -  -  -  -  ;
   17 D1:AA2D -  -  -  -  ; ***************************************************************************************
   18 D1:AA2D -  -  -  -  
   19 D1:AA2D -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AA2D DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AA32 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA36 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA39 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA3B -  -  -  -  		;
   25 D1:AA3B ED 7B E1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA40 C3 33 AB D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA44 -  -  -  -  
   28 D1:AA44 -  -  -  -  ; ***************************************************************************************
   29 D1:AA44 -  -  -  -  ;
   30 D1:AA44 -  -  -  -  ;									Changes and Updates
   31 D1:AA44 -  -  -  -  ;
   32 D1:AA44 -  -  -  -  ; ***************************************************************************************
   33 D1:AA44 -  -  -  -  ;
   34 D1:AA44 -  -  -  -  ;		Date			Notes
   35 D1:AA44 -  -  -  -  ;		==== 			=====
   36 D1:AA44 -  -  -  -  ;
   37 D1:AA44 -  -  -  -  ; ***************************************************************************************
   38 D1:AA44 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA44 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA44 -  -  -  -  ; ***************************************************************************************
    2 D1:AA44 -  -  -  -  ; ***************************************************************************************
    3 D1:AA44 -  -  -  -  ;
    4 D1:AA44 -  -  -  -  ;		Name : 		let.asm
    5 D1:AA44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA44 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA44 -  -  -  -  ;		Reviewed :	No
    8 D1:AA44 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA44 -  -  -  -  ;
   10 D1:AA44 -  -  -  -  ; ***************************************************************************************
   11 D1:AA44 -  -  -  -  ; ***************************************************************************************
   12 D1:AA44 -  -  -  -  
   13 D1:AA44 -  -  -  -  ; ***************************************************************************************
   14 D1:AA44 -  -  -  -  ;
   15 D1:AA44 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA44 -  -  -  -  ;
   17 D1:AA44 -  -  -  -  ; ***************************************************************************************
   18 D1:AA44 -  -  -  -  
   19 D1:AA44 -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA44 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA47 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA49 28 2F -  -  		jr 		z,_CLString
   23 D1:AA4B FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA4D 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA4F 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA51 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA55 -  -  -  -  _CLNoAuto:
   28 D1:AA55 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA57 CD 92 AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA5B CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA5D CA 47 AC D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA61 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA62 C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA63 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA64 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA68 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA6A CD D1 AB D1 		call 	CheckNextA
   38 D1:AA6E -  -  -  -  
   39 D1:AA6E CD 08 AE D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA72 -  -  -  -  
   41 D1:AA72 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA73 43 -  -  -  		ld 		b,e 						
   43 D1:AA74 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA75 -  -  -  -  		;
   45 D1:AA75 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA75 -  -  -  -  		;
   47 D1:AA75 CD 82 AA D1 		call 	WriteHLToDE
   48 D1:AA79 C9 -  -  -  		ret
   49 D1:AA7A -  -  -  -  		;
   50 D1:AA7A -  -  -  -  		; 		String assignment code.
   51 D1:AA7A -  -  -  -  		;
   52 D1:AA7A -  -  -  -  _CLString:
   53 D1:AA7A F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:AA82 -  -  -  -  
   55 D1:AA82 -  -  -  -  ; ***************************************************************************************
   56 D1:AA82 -  -  -  -  ;
   57 D1:AA82 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:AA82 -  -  -  -  ;
   59 D1:AA82 -  -  -  -  ; ***************************************************************************************
   60 D1:AA82 -  -  -  -  
   61 D1:AA82 -  -  -  -  WriteHLToDE:
   62 D1:AA82 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:AA84 C2 3B AC D1 		jp 		nz,TypeMismatch
   64 D1:AA88 -  -  -  -  		;
   65 D1:AA88 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:AA88 -  -  -  -  		;		
   67 D1:AA88 -  -  -  -  _WHDWriteNumber:
   68 D1:AA88 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:AA89 D9 -  -  -  		exx
   70 D1:AA8A EB -  -  -  		ex 		de,hl
   71 D1:AA8B D9 -  -  -  		exx
   72 D1:AA8C -  -  -  -  
   73 D1:AA8C 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:AA8D 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:AA8E 72 -  -  -  		ld 		(hl),d
   76 D1:AA8F 23 -  -  -  		inc 	hl
   77 D1:AA90 E5 -  -  -  		push 	hl
   78 D1:AA91 D9 -  -  -  		exx
   79 D1:AA92 E1 -  -  -  		pop 	hl
   80 D1:AA93 73 -  -  -  		ld 		(hl),e
   81 D1:AA94 23 -  -  -  		inc 	hl
   82 D1:AA95 72 -  -  -  		ld 		(hl),d
   83 D1:AA96 D9 -  -  -  		exx
   84 D1:AA97 -  -  -  -  
   85 D1:AA97 C9 -  -  -  		ret
   86 D1:AA98 -  -  -  -  
   87 D1:AA98 -  -  -  -  ; ***************************************************************************************
   88 D1:AA98 -  -  -  -  ;
   89 D1:AA98 -  -  -  -  ;									Changes and Updates
   90 D1:AA98 -  -  -  -  ;
   91 D1:AA98 -  -  -  -  ; ***************************************************************************************
   92 D1:AA98 -  -  -  -  ;
   93 D1:AA98 -  -  -  -  ;		Date			Notes
   94 D1:AA98 -  -  -  -  ;		==== 			=====
   95 D1:AA98 -  -  -  -  ;
   96 D1:AA98 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:AA98 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AA98 -  -  -  -  ; ***************************************************************************************
    2 D1:AA98 -  -  -  -  ; ***************************************************************************************
    3 D1:AA98 -  -  -  -  ;
    4 D1:AA98 -  -  -  -  ;		Name : 		print.asm
    5 D1:AA98 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA98 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA98 -  -  -  -  ;		Reviewed :	No
    8 D1:AA98 -  -  -  -  ;		Purpose :	Print command
    9 D1:AA98 -  -  -  -  ;
   10 D1:AA98 -  -  -  -  ; ***************************************************************************************
   11 D1:AA98 -  -  -  -  ; ***************************************************************************************
   12 D1:AA98 -  -  -  -  
   13 D1:AA98 -  -  -  -  ; ***************************************************************************************
   14 D1:AA98 -  -  -  -  ;
   15 D1:AA98 -  -  -  -  ;										PRINT command
   16 D1:AA98 -  -  -  -  ;
   17 D1:AA98 -  -  -  -  ; ***************************************************************************************
   18 D1:AA98 -  -  -  -  
   19 D1:AA98 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AA98 3E F6 -  -  		ld 		a,-10 						; default base.
   21 D1:AA9A 32 03 A9 D1 		ld 		(PrintBase),a
   22 D1:AA9E -  -  -  -  		;
   23 D1:AA9E -  -  -  -  		;		Main loop
   24 D1:AA9E -  -  -  -  		;
   25 D1:AA9E -  -  -  -  _CPRLoop:
   26 D1:AA9E DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 D1:AAA1 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 D1:AAA3 28 59 -  -  		jr 		z,_CPRExitNL
   29 D1:AAA5 FE A7 -  -  		cp 		KWD_COLON 	
   30 D1:AAA7 28 55 -  -  		jr 		z,_CPRExitNL
   31 D1:AAA9 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 D1:AAAB 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 D1:AAAD FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 D1:AAAF 28 34 -  -  		jr 		z,_CPRTab
   35 D1:AAB1 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 D1:AAB3 28 2A -  -  		jr 		z,_CPRNewLine
   37 D1:AAB5 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 D1:AAB7 28 1C -  -  		jr 		z,_CPRHexMode
   39 D1:AAB9 -  -  -  -  		;
   40 D1:AAB9 CD 08 AE D1 		call 	EvaluateValue 				; so it must be an expression.		
   41 D1:AABD CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 D1:AABF 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 D1:AAC1 -  -  -  -  		;
   44 D1:AAC1 3A 03 A9 D1 		ld 		a,(PrintBase)				; current print mode.
   45 D1:AAC5 -  -  -  -  _CPRPrintNumber:
   46 D1:AAC5 01 21 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AAC9 C5 -  -  -  		push 	bc
   48 D1:AACA CD 57 B7 D1 		call 	Int32ToString 				; convert to string
   49 D1:AACE E1 -  -  -  		pop 	hl
   50 D1:AACF -  -  -  -  		;
   51 D1:AACF -  -  -  -  		; 		Print text at HL.
   52 D1:AACF -  -  -  -  		;
   53 D1:AACF -  -  -  -  _CPRPrintHL:
   54 D1:AACF CD 94 B1 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AAD3 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AAD5 -  -  -  -  		;
   57 D1:AAD5 -  -  -  -  		;		Hex mode (~)
   58 D1:AAD5 -  -  -  -  		;
   59 D1:AAD5 -  -  -  -  _CPRHexMode:		
   60 D1:AAD5 3E 10 -  -  		ld 		a,16
   61 D1:AAD7 32 03 A9 D1 		ld 		(PrintBase),a
   62 D1:AADB DD 23 -  -  		inc 	ix
   63 D1:AADD 18 BF -  -  		jr 		_CPRLoop
   64 D1:AADF -  -  -  -  		;
   65 D1:AADF -  -  -  -  		; 		New line (')
   66 D1:AADF -  -  -  -  		;
   67 D1:AADF -  -  -  -  _CPRNewLine:
   68 D1:AADF CD F2 B7 D1 		call 	SYSPrintCRLF
   69 D1:AAE3 18 0C -  -  		jr 		_CPRCheckNext
   70 D1:AAE5 -  -  -  -  		;
   71 D1:AAE5 -  -  -  -  		; 		Tab command (,)
   72 D1:AAE5 -  -  -  -  		;
   73 D1:AAE5 -  -  -  -  _CPRTab:
   74 D1:AAE5 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 D1:AAE7 CD CA B7 D1 		call 	SYSPrintChar
   76 D1:AAEB -  -  -  -  		;
   77 D1:AAEB -  -  -  -  		;		Set to base 10 then check next character
   78 D1:AAEB -  -  -  -  		;
   79 D1:AAEB -  -  -  -  _CPRCheckNext10:		
   80 D1:AAEB 3E F6 -  -  		ld 		a,-10
   81 D1:AAED 32 03 A9 D1 		ld 		(PrintBase),a
   82 D1:AAF1 -  -  -  -  		;
   83 D1:AAF1 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 D1:AAF1 -  -  -  -  		;		
   85 D1:AAF1 -  -  -  -  _CPRCheckNext:
   86 D1:AAF1 DD 23 -  -  		inc 	ix 							; consume current
   87 D1:AAF3 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 D1:AAF6 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 D1:AAF8 C8 -  -  -  		ret 	z
   90 D1:AAF9 FE A7 -  -  		cp 		KWD_COLON
   91 D1:AAFB C8 -  -  -  		ret 	z
   92 D1:AAFC 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 D1:AAFE -  -  -  -  		;
   94 D1:AAFE -  -  -  -  		;		Found EOL or : not after ; ,
   95 D1:AAFE -  -  -  -  		;
   96 D1:AAFE -  -  -  -  _CPRExitNL:
   97 D1:AAFE CD F2 B7 D1 		call 	SYSPrintCRLF 				; do CR/LF
   98 D1:AB02 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 D1:AB03 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AB03 -  -  -  -  ; ***************************************************************************************
    2 D1:AB03 -  -  -  -  ; ***************************************************************************************
    3 D1:AB03 -  -  -  -  ;
    4 D1:AB03 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AB03 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB03 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB03 -  -  -  -  ;		Reviewed :	No
    8 D1:AB03 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AB03 -  -  -  -  ;
   10 D1:AB03 -  -  -  -  ; ***************************************************************************************
   11 D1:AB03 -  -  -  -  ; ***************************************************************************************
   12 D1:AB03 -  -  -  -  
   13 D1:AB03 -  -  -  -  ; ***************************************************************************************
   14 D1:AB03 -  -  -  -  ;
   15 D1:AB03 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AB03 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AB03 -  -  -  -  ;
   18 D1:AB03 -  -  -  -  ; ***************************************************************************************
   19 D1:AB03 -  -  -  -  
   20 D1:AB03 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AB03 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AB03 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AB06 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 D1:AB08 C8 -  -  -  		ret 	z
   25 D1:AB09 DD 23 -  -  		inc 	ix
   26 D1:AB0B FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 D1:AB0D C8 -  -  -  		ret 	z
   28 D1:AB0E FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AB10 C2 47 AC D1 		jp 		nz,SyntaxError
   30 D1:AB14 -  -  -  -  		;		
   31 D1:AB14 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AB18 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AB1B 13 -  -  -  		inc 	de 
   34 D1:AB1C 13 -  -  -  		inc 	de
   35 D1:AB1D DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AB1F C9 -  -  -  		ret
   37 D1:AB20 -  -  -  -  
   38 D1:AB20 -  -  -  -  ; ***************************************************************************************
   39 D1:AB20 -  -  -  -  ;
   40 D1:AB20 -  -  -  -  ;									Changes and Updates
   41 D1:AB20 -  -  -  -  ;
   42 D1:AB20 -  -  -  -  ; ***************************************************************************************
   43 D1:AB20 -  -  -  -  ;
   44 D1:AB20 -  -  -  -  ;		Date			Notes
   45 D1:AB20 -  -  -  -  ;		==== 			=====
   46 D1:AB20 -  -  -  -  ;
   47 D1:AB20 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AB20 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AB20 -  -  -  -  ; ***************************************************************************************
    2 D1:AB20 -  -  -  -  ; ***************************************************************************************
    3 D1:AB20 -  -  -  -  ;
    4 D1:AB20 -  -  -  -  ;		Name : 		run.asm
    5 D1:AB20 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB20 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB20 -  -  -  -  ;		Reviewed :	No
    8 D1:AB20 -  -  -  -  ;		Purpose :	Run command
    9 D1:AB20 -  -  -  -  ;
   10 D1:AB20 -  -  -  -  ; ***************************************************************************************
   11 D1:AB20 -  -  -  -  ; ***************************************************************************************
   12 D1:AB20 -  -  -  -  
   13 D1:AB20 -  -  -  -  ; ***************************************************************************************
   14 D1:AB20 -  -  -  -  ;
   15 D1:AB20 -  -  -  -  ;										RUN command
   16 D1:AB20 -  -  -  -  ;
   17 D1:AB20 -  -  -  -  ; ***************************************************************************************
   18 D1:AB20 -  -  -  -  
   19 D1:AB20 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AB20 CD 18 B1 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AB24 -  -  -  -  
   22 D1:AB24 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AB29 ED 73 E1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AB2E AF -  -  -  		xor 	a
   25 D1:AB2F 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AB33 -  -  -  -  		;
   27 D1:AB33 -  -  -  -  		; 		New line at IX.
   28 D1:AB33 -  -  -  -  		;
   29 D1:AB33 -  -  -  -  CRNewLine:
   30 D1:AB33 DD 22 DD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AB38 -  -  -  -  		;
   32 D1:AB38 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AB3B B7 -  -  -  		or 		a
   34 D1:AB3C CA 27 AA D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AB40 -  -  -  -  		;
   36 D1:AB40 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AB42 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AB44 DD 23 -  -  		inc 	ix
   39 D1:AB46 -  -  -  -  		;
   40 D1:AB46 -  -  -  -  		; 		New command at IX
   41 D1:AB46 -  -  -  -  		;
   42 D1:AB46 -  -  -  -  _CRNewCommand:	
   43 D1:AB46 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB49 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB4A F2 85 AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB4E -  -  -  -  		;
   47 D1:AB4E FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB50 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB52 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB54 D2 75 AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB58 -  -  -  -  		;
   52 D1:AB58 -  -  -  -  _CRDoCommand:		
   53 D1:AB58 E6 7F 21 00 
              00 00 6F 29 
              29 11 60 B4 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB6D DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB6F CD E5 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB73 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB75 -  -  -  -  		;
   58 D1:AB75 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB75 -  -  -  -  		;
   60 D1:AB75 -  -  -  -  		;
   61 D1:AB75 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB75 -  -  -  -  		;		
   63 D1:AB75 -  -  -  -  _CRAlternateLets:		
   64 D1:AB75 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB77 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB79 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB7B 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB7D FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB7F 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB81 C3 47 AC D1 		jp 		SyntaxError
   71 D1:AB85 -  -  -  -  		;
   72 D1:AB85 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB85 -  -  -  -  		;
   74 D1:AB85 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB85 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB87 D2 47 AC D1 		jp 		nc,SyntaxError
   77 D1:AB8B -  -  -  -  _CRAssignmentLet:		
   78 D1:AB8B CD 44 AA D1 		call	Command_LET 				; do LET.
   79 D1:AB8F C3 46 AB D1 		jp 		_CRNewCommand
   80 D1:AB93 -  -  -  -  
   81 D1:AB93 -  -  -  -  ; ***************************************************************************************
   82 D1:AB93 -  -  -  -  ;
   83 D1:AB93 -  -  -  -  ;									Changes and Updates
   84 D1:AB93 -  -  -  -  ;
   85 D1:AB93 -  -  -  -  ; ***************************************************************************************
   86 D1:AB93 -  -  -  -  ;
   87 D1:AB93 -  -  -  -  ;		Date			Notes
   88 D1:AB93 -  -  -  -  ;		==== 			=====
   89 D1:AB93 -  -  -  -  ;
   90 D1:AB93 -  -  -  -  ; ***************************************************************************************
   91 D1:AB93 -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AB93 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AB93 -  -  -  -  ; ***************************************************************************************
    2 D1:AB93 -  -  -  -  ; ***************************************************************************************
    3 D1:AB93 -  -  -  -  ;
    4 D1:AB93 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AB93 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB93 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB93 -  -  -  -  ;		Reviewed :	No
    8 D1:AB93 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AB93 -  -  -  -  ;
   10 D1:AB93 -  -  -  -  ; ***************************************************************************************
   11 D1:AB93 -  -  -  -  ; ***************************************************************************************
   12 D1:AB93 -  -  -  -  
   13 D1:AB93 -  -  -  -  ; ***************************************************************************************
   14 D1:AB93 -  -  -  -  ;
   15 D1:AB93 -  -  -  -  ;										STOP command
   16 D1:AB93 -  -  -  -  ;
   17 D1:AB93 -  -  -  -  ; ***************************************************************************************
   18 D1:AB93 -  -  -  -  
   19 D1:AB93 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AB93 3E 0E C3 DD 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AB99 -  -  -  -  
   22 D1:AB99 -  -  -  -  ; ***************************************************************************************
   23 D1:AB99 -  -  -  -  ;
   24 D1:AB99 -  -  -  -  ;									Changes and Updates
   25 D1:AB99 -  -  -  -  ;
   26 D1:AB99 -  -  -  -  ; ***************************************************************************************
   27 D1:AB99 -  -  -  -  ;
   28 D1:AB99 -  -  -  -  ;		Date			Notes
   29 D1:AB99 -  -  -  -  ;		==== 			=====
   30 D1:AB99 -  -  -  -  ;
   31 D1:AB99 -  -  -  -  ; ***************************************************************************************
   32 D1:AB99 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB99 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AB99 -  -  -  -  ; ***************************************************************************************
    2 D1:AB99 -  -  -  -  ; ***************************************************************************************
    3 D1:AB99 -  -  -  -  ;
    4 D1:AB99 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AB99 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB99 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB99 -  -  -  -  ;		Reviewed :	No
    8 D1:AB99 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AB99 -  -  -  -  ;
   10 D1:AB99 -  -  -  -  ; ***************************************************************************************
   11 D1:AB99 -  -  -  -  ; ***************************************************************************************
   12 D1:AB99 -  -  -  -  
   13 D1:AB99 -  -  -  -  ; ***************************************************************************************
   14 D1:AB99 -  -  -  -  ;
   15 D1:AB99 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AB99 -  -  -  -  ;
   17 D1:AB99 -  -  -  -  ; ***************************************************************************************
   18 D1:AB99 -  -  -  -  
   19 D1:AB99 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AB99             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AB99             		inc 	ix
   22 D1:AB99             		cp 		ch 							; exit if matches
   23 D1:AB99             		ret 	z
   24 D1:AB99             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AB99             		jp 		ErrorHandler
   26 D1:AB99             #endmacro
   27 D1:AB99 -  -  -  -  
   28 D1:AB99 -  -  -  -  CheckLeftBracket:
   29 D1:AB99 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0B C3 DD 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:ABA7 -  -  -  -  
   31 D1:ABA7 -  -  -  -  CheckRightBracket:
   32 D1:ABA7 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0C C3 DD 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:ABB5 -  -  -  -  
   34 D1:ABB5 -  -  -  -  CheckDollar:
   35 D1:ABB5 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0A C3 DD 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:ABC3 -  -  -  -  		
   37 D1:ABC3 -  -  -  -  CheckComma:
   38 D1:ABC3 DD 7E 00 DD 
              23 FE A6 C8 
              3E 09 C3 DD 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:ABD1 -  -  -  -  
   40 D1:ABD1 -  -  -  -  ; ***************************************************************************************
   41 D1:ABD1 -  -  -  -  ;
   42 D1:ABD1 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:ABD1 -  -  -  -  ;
   44 D1:ABD1 -  -  -  -  ; ***************************************************************************************
   45 D1:ABD1 -  -  -  -  
   46 D1:ABD1 -  -  -  -  CheckNextA:
   47 D1:ABD1 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:ABD4 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:ABD6 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:ABD7 3E 0F C3 DD 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:ABDD -  -  -  -  		
   52 D1:ABDD -  -  -  -  ; ***************************************************************************************
   53 D1:ABDD -  -  -  -  ;
   54 D1:ABDD -  -  -  -  ;									Changes and Updates
   55 D1:ABDD -  -  -  -  ;
   56 D1:ABDD -  -  -  -  ; ***************************************************************************************
   57 D1:ABDD -  -  -  -  ;
   58 D1:ABDD -  -  -  -  ;		Date			Notes
   59 D1:ABDD -  -  -  -  ;		==== 			=====
   60 D1:ABDD -  -  -  -  ;
   61 D1:ABDD -  -  -  -  ; ***************************************************************************************
   62 D1:ABDD -  -  -  -  		
Listing for file "_build.asm"
   25 D1:ABDD -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:ABDD -  -  -  -  ; ***************************************************************************************
    2 D1:ABDD -  -  -  -  ; ***************************************************************************************
    3 D1:ABDD -  -  -  -  ;
    4 D1:ABDD -  -  -  -  ;		Name : 		errors.asm
    5 D1:ABDD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABDD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABDD -  -  -  -  ;		Reviewed :	No
    8 D1:ABDD -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:ABDD -  -  -  -  ;
   10 D1:ABDD -  -  -  -  ; ***************************************************************************************
   11 D1:ABDD -  -  -  -  ; ***************************************************************************************
   12 D1:ABDD -  -  -  -  
   13 D1:ABDD -  -  -  -  ; ***************************************************************************************
   14 D1:ABDD -  -  -  -  ;
   15 D1:ABDD -  -  -  -  ;								Error handler, message A 
   16 D1:ABDD -  -  -  -  ;
   17 D1:ABDD -  -  -  -  ; ***************************************************************************************
   18 D1:ABDD -  -  -  -  
   19 D1:ABDD -  -  -  -  ErrorHandler:
   20 D1:ABDD F5 -  -  -  		push 	af 						; save error ID
   21 D1:ABDE -  -  -  -  
   22 D1:ABDE 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:ABE2 6F -  -  -  		ld 		l,a
   24 D1:ABE3 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:ABE4 29 -  -  -  		add 	hl,hl 		
   26 D1:ABE5 11 11 B3 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:ABE9 19 -  -  -  		add 	hl,de
   28 D1:ABEA ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:ABEC CD 94 B1 D1 		call 	PrintStringAtHL
   30 D1:ABF0 -  -  -  -  		;
   31 D1:ABF0 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:ABF1 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:ABF2 28 2F -  -  		jr 		z,_EHExit
   34 D1:ABF4 -  -  -  -  		;
   35 D1:ABF4 DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:ABF9 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:ABFC B7 -  -  -  		or 		a
   38 D1:ABFD 28 24 -  -  		jr 		z,_EHExit
   39 D1:ABFF -  -  -  -  
   40 D1:ABFF 21 2B AC D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AC03 CD 94 B1 D1 		call 	PrintStringAtHL 
   42 D1:AC07 -  -  -  -  		
   43 D1:AC07 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AC08 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AC0C D9 -  -  -  		exx 
   46 D1:AC0D DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AC10 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AC13 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AC15 01 21 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AC19 CD 57 B7 D1 		call 	Int32ToString
   51 D1:AC1D C5 -  -  -  		push 	bc
   52 D1:AC1E E1 -  -  -  		pop 	hl
   53 D1:AC1F CD 94 B1 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AC23 -  -  -  -  _EHExit:		
   55 D1:AC23 CD F2 B7 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AC27 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AC2B -  -  -  -  
   58 D1:AC2B -  -  -  -  _EHAtText:
   59 D1:AC2B 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AC35 -  -  -  -  
   61 D1:AC35 -  -  -  -  NotImplemented:
   62 D1:AC35 3E 05 C3 DD 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AC3B -  -  -  -  TypeMismatch:
   64 D1:AC3B 3E 02 C3 DD 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AC41 -  -  -  -  BadValue:
   66 D1:AC41 3E 03 C3 DD 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AC47 -  -  -  -  SyntaxError:
   68 D1:AC47 3E 0F C3 DD 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AC4D -  -  -  -  						
   70 D1:AC4D -  -  -  -  ; ***************************************************************************************
   71 D1:AC4D -  -  -  -  ;
   72 D1:AC4D -  -  -  -  ;									Changes and Updates
   73 D1:AC4D -  -  -  -  ;
   74 D1:AC4D -  -  -  -  ; ***************************************************************************************
   75 D1:AC4D -  -  -  -  ;
   76 D1:AC4D -  -  -  -  ;		Date			Notes
   77 D1:AC4D -  -  -  -  ;		==== 			=====
   78 D1:AC4D -  -  -  -  ;
   79 D1:AC4D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AC4D -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AC4D -  -  -  -  ; ***************************************************************************************
    2 D1:AC4D -  -  -  -  ; ***************************************************************************************
    3 D1:AC4D -  -  -  -  ;
    4 D1:AC4D -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AC4D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC4D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC4D -  -  -  -  ;		Reviewed :	No
    8 D1:AC4D -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AC4D -  -  -  -  ;
   10 D1:AC4D -  -  -  -  ; ***************************************************************************************
   11 D1:AC4D -  -  -  -  ; ***************************************************************************************
   12 D1:AC4D -  -  -  -  
   13 D1:AC4D -  -  -  -  ; ***************************************************************************************
   14 D1:AC4D -  -  -  -  ;
   15 D1:AC4D -  -  -  -  ; 									Addition
   16 D1:AC4D -  -  -  -  ;
   17 D1:AC4D -  -  -  -  ; ***************************************************************************************
   18 D1:AC4D -  -  -  -  
   19 D1:AC4D -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AC4D CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 D6 
              B6 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AC5B -  -  -  -  
   22 D1:AC5B -  -  -  -  ; ***************************************************************************************
   23 D1:AC5B -  -  -  -  ;
   24 D1:AC5B -  -  -  -  ; 									Subtraction
   25 D1:AC5B -  -  -  -  ;
   26 D1:AC5B -  -  -  -  ; ***************************************************************************************
   27 D1:AC5B -  -  -  -  
   28 D1:AC5B -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AC5B CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 DE 
              B6 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AC69 -  -  -  -  
   31 D1:AC69 -  -  -  -  ; ***************************************************************************************
   32 D1:AC69 -  -  -  -  ;
   33 D1:AC69 -  -  -  -  ; 									  Multiply
   34 D1:AC69 -  -  -  -  ;
   35 D1:AC69 -  -  -  -  ; ***************************************************************************************
   36 D1:AC69 -  -  -  -  
   37 D1:AC69 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AC69 CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 9D 
              B6 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AC77 -  -  -  -  
   40 D1:AC77 -  -  -  -  ; ***************************************************************************************
   41 D1:AC77 -  -  -  -  ;
   42 D1:AC77 -  -  -  -  ; 									  Divide
   43 D1:AC77 -  -  -  -  ;
   44 D1:AC77 -  -  -  -  ; ***************************************************************************************
   45 D1:AC77 -  -  -  -  
   46 D1:AC77 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AC77 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AC77 CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 9D 
              B5 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AC85 -  -  -  -  
   50 D1:AC85 -  -  -  -  ; ***************************************************************************************
   51 D1:AC85 -  -  -  -  ;
   52 D1:AC85 -  -  -  -  ; 									  Modulus
   53 D1:AC85 -  -  -  -  ;
   54 D1:AC85 -  -  -  -  ; ***************************************************************************************
   55 D1:AC85 -  -  -  -  
   56 D1:AC85 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AC85 CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 A0 
              B5 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AC93 -  -  -  -  
   59 D1:AC93 -  -  -  -  ; ***************************************************************************************
   60 D1:AC93 -  -  -  -  ;
   61 D1:AC93 -  -  -  -  ; 									  Logical
   62 D1:AC93 -  -  -  -  ;
   63 D1:AC93 -  -  -  -  ; ***************************************************************************************
   64 D1:AC93 -  -  -  -  
   65 D1:AC93 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AC93 CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 E8 
              B6 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:ACA1 -  -  -  -  
   68 D1:ACA1 -  -  -  -  ALUOr: 			;; [or]
   69 D1:ACA1 CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 F5 
              B6 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ACAF -  -  -  -  
   71 D1:ACAF -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ACAF CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 02 
              B7 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ACBD -  -  -  -  
   74 D1:ACBD -  -  -  -  ; ***************************************************************************************
   75 D1:ACBD -  -  -  -  ;
   76 D1:ACBD -  -  -  -  ;									Changes and Updates
   77 D1:ACBD -  -  -  -  ;
   78 D1:ACBD -  -  -  -  ; ***************************************************************************************
   79 D1:ACBD -  -  -  -  ;
   80 D1:ACBD -  -  -  -  ;		Date			Notes
   81 D1:ACBD -  -  -  -  ;		==== 			=====
   82 D1:ACBD -  -  -  -  ;
   83 D1:ACBD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:ACBD -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ACBD -  -  -  -  ; ***************************************************************************************
    2 D1:ACBD -  -  -  -  ; ***************************************************************************************
    3 D1:ACBD -  -  -  -  ;
    4 D1:ACBD -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ACBD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACBD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACBD -  -  -  -  ;		Reviewed :	No
    8 D1:ACBD -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ACBD -  -  -  -  ;
   10 D1:ACBD -  -  -  -  ; ***************************************************************************************
   11 D1:ACBD -  -  -  -  ; ***************************************************************************************
   12 D1:ACBD -  -  -  -  
   13 D1:ACBD -  -  -  -  ; ***************************************************************************************
   14 D1:ACBD -  -  -  -  ;
   15 D1:ACBD -  -  -  -  ; 									<l> <op> <r>
   16 D1:ACBD -  -  -  -  ;
   17 D1:ACBD -  -  -  -  ; ***************************************************************************************
   18 D1:ACBD -  -  -  -  
   19 D1:ACBD -  -  -  -  ALULongReference:			;; [!]
   20 D1:ACBD CD CD AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:ACC1 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:ACC3 CB F9 -  -  		set 	CIsReference,c
   23 D1:ACC5 C9 -  -  -  		ret
   24 D1:ACC6 -  -  -  -  
   25 D1:ACC6 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:ACC6 CD BD AC D1 		call 	ALULongReference
   27 D1:ACCA CB F1 -  -  		set 	CIsByteReference,c
   28 D1:ACCC C9 -  -  -  		ret
   29 D1:ACCD -  -  -  -  
   30 D1:ACCD -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:ACCD CD 6A AD D1 
              78 B1 C2 3B 
              AC D1 C3 DB 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ACDB -  -  -  -  _BRGAMain:		
   33 D1:ACDB CD D6 B6 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:ACDF CD 70 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:ACE3 C9 -  -  -  		ret
   36 D1:ACE4 -  -  -  -  
   37 D1:ACE4 -  -  -  -  ; ***************************************************************************************
   38 D1:ACE4 -  -  -  -  ;
   39 D1:ACE4 -  -  -  -  ;									Changes and Updates
   40 D1:ACE4 -  -  -  -  ;
   41 D1:ACE4 -  -  -  -  ; ***************************************************************************************
   42 D1:ACE4 -  -  -  -  ;
   43 D1:ACE4 -  -  -  -  ;		Date			Notes
   44 D1:ACE4 -  -  -  -  ;		==== 			=====
   45 D1:ACE4 -  -  -  -  ;
   46 D1:ACE4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:ACE4 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:ACE4 -  -  -  -  ; ***************************************************************************************
    2 D1:ACE4 -  -  -  -  ; ***************************************************************************************
    3 D1:ACE4 -  -  -  -  ;
    4 D1:ACE4 -  -  -  -  ;		Name : 		compare.asm
    5 D1:ACE4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACE4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACE4 -  -  -  -  ;		Reviewed :	No
    8 D1:ACE4 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:ACE4 -  -  -  -  ;
   10 D1:ACE4 -  -  -  -  ; ***************************************************************************************
   11 D1:ACE4 -  -  -  -  ; ***************************************************************************************
   12 D1:ACE4 -  -  -  -  
   13 D1:ACE4 -  -  -  -  #macro compare_equals(n)
   14 D1:ACE4             		call 	CompareBaseCode
   15 D1:ACE4             		cp 		n
   16 D1:ACE4             		jr 		z,UnaryInt32True
   17 D1:ACE4             		jr 		UnaryInt32False
   18 D1:ACE4             #endmacro
   19 D1:ACE4 -  -  -  -  
   20 D1:ACE4 -  -  -  -  #macro compare_not_equals(n)
   21 D1:ACE4             		call 	CompareBaseCode
   22 D1:ACE4             		cp 		n
   23 D1:ACE4             		jr 		nz,UnaryInt32True
   24 D1:ACE4             		jr 		UnaryInt32False
   25 D1:ACE4             #endmacro
   26 D1:ACE4 -  -  -  -  
   27 D1:ACE4 -  -  -  -  ; ***************************************************************************************
   28 D1:ACE4 -  -  -  -  ;
   29 D1:ACE4 -  -  -  -  ; 								Return True/False
   30 D1:ACE4 -  -  -  -  ;
   31 D1:ACE4 -  -  -  -  ; ***************************************************************************************
   32 D1:ACE4 -  -  -  -  
   33 D1:ACE4 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:ACE4 3E FF -  -  		ld 		a,255
   35 D1:ACE6 18 01 -  -  		jr 		_Int32Logical
   36 D1:ACE8 -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:ACE8 AF -  -  -  		xor 	a
   38 D1:ACE9 -  -  -  -  _Int32Logical:
   39 D1:ACE9 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ACEA 67 -  -  -  		ld 		h,a
   41 D1:ACEB D9 -  -  -  		exx
   42 D1:ACEC 6F -  -  -  		ld 		l,a
   43 D1:ACED 67 -  -  -  		ld 		h,a
   44 D1:ACEE D9 -  -  -  		exx
   45 D1:ACEF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:ACF1 C9 -  -  -  		ret
   47 D1:ACF2 -  -  -  -  
   48 D1:ACF2 -  -  -  -  ; ***************************************************************************************
   49 D1:ACF2 -  -  -  -  ;
   50 D1:ACF2 -  -  -  -  ; 										> = < (compare == value)
   51 D1:ACF2 -  -  -  -  ;
   52 D1:ACF2 -  -  -  -  ; ***************************************************************************************
   53 D1:ACF2 -  -  -  -  
   54 D1:ACF2 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:ACF2 CD 2E AD D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:ACFC -  -  -  -  
   57 D1:ACFC -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:ACFC CD 2E AD D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AD06 -  -  -  -  
   60 D1:AD06 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AD06 CD 2E AD D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AD10 -  -  -  -  
   63 D1:AD10 -  -  -  -  ; ***************************************************************************************
   64 D1:AD10 -  -  -  -  ;
   65 D1:AD10 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AD10 -  -  -  -  ;
   67 D1:AD10 -  -  -  -  ; ***************************************************************************************
   68 D1:AD10 -  -  -  -  
   69 D1:AD10 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AD10 CD 2E AD D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AD1A -  -  -  -  
   72 D1:AD1A -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AD1A CD 2E AD D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AD24 -  -  -  -  
   75 D1:AD24 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AD24 CD 2E AD D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AD2E -  -  -  -  
   78 D1:AD2E -  -  -  -  ; ***************************************************************************************
   79 D1:AD2E -  -  -  -  ;
   80 D1:AD2E -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AD2E -  -  -  -  ;
   82 D1:AD2E -  -  -  -  ; ***************************************************************************************
   83 D1:AD2E -  -  -  -  
   84 D1:AD2E -  -  -  -  CompareBaseCode:
   85 D1:AD2E CD 6A AD D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AD32 -  -  -  -  
   87 D1:AD32 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AD33 A1 -  -  -  		and 	c
   89 D1:AD34 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AD36 C2 48 AD D1 		jp 		nz,StringCompare
   91 D1:AD3A -  -  -  -  
   92 D1:AD3A 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AD3B B1 -  -  -  		or 		c
   94 D1:AD3C CB 47 -  -  		bit 	CIsString,a 
   95 D1:AD3E CA 16 B7 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AD42 -  -  -  -  
   97 D1:AD42 3E 02 C3 DD 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AD48 -  -  -  -  ;
   99 D1:AD48 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AD48 -  -  -  -  ;
  101 D1:AD48 -  -  -  -  StringCompare:
  102 D1:AD48 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AD49 BE -  -  -  		cp 		(hl)
  104 D1:AD4A 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AD4C 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AD4E 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AD4F 23 -  -  -  		inc 	hl
  108 D1:AD50 FE 20 -  -  		cp 		' '
  109 D1:AD52 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AD54 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AD55 C9 -  -  -  		ret
  112 D1:AD56 -  -  -  -  
  113 D1:AD56 -  -  -  -  _SCLess:
  114 D1:AD56 3E FF -  -  		ld 		a,$FF
  115 D1:AD58 C9 -  -  -  		ret
  116 D1:AD59 -  -  -  -  _SCGreater:
  117 D1:AD59 3E 01 -  -  		ld 		a,1
  118 D1:AD5B C9 -  -  -  		ret
  119 D1:AD5C -  -  -  -  
  120 D1:AD5C 3E 10 C3 DD 
              AB D1 -  -  		ERR_TODO()
  121 D1:AD62 -  -  -  -  
  122 D1:AD62 -  -  -  -  ; ***************************************************************************************
  123 D1:AD62 -  -  -  -  ;
  124 D1:AD62 -  -  -  -  ;									Changes and Updates
  125 D1:AD62 -  -  -  -  ;
  126 D1:AD62 -  -  -  -  ; ***************************************************************************************
  127 D1:AD62 -  -  -  -  ;
  128 D1:AD62 -  -  -  -  ;		Date			Notes
  129 D1:AD62 -  -  -  -  ;		==== 			=====
  130 D1:AD62 -  -  -  -  ;
  131 D1:AD62 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AD62 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AD62 -  -  -  -  ; ***************************************************************************************
    2 D1:AD62 -  -  -  -  ; ***************************************************************************************
    3 D1:AD62 -  -  -  -  ;
    4 D1:AD62 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AD62 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD62 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD62 -  -  -  -  ;		Reviewed :	No
    8 D1:AD62 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AD62 -  -  -  -  ;
   10 D1:AD62 -  -  -  -  ; ***************************************************************************************
   11 D1:AD62 -  -  -  -  ; ***************************************************************************************
   12 D1:AD62 -  -  -  -  
   13 D1:AD62 -  -  -  -  ; ***************************************************************************************
   14 D1:AD62 -  -  -  -  ;
   15 D1:AD62 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AD62 -  -  -  -  ;
   17 D1:AD62 -  -  -  -  ; ***************************************************************************************
   18 D1:AD62 -  -  -  -  
   19 D1:AD62 -  -  -  -  SwapHLDE:
   20 D1:AD62 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AD63 D9 -  -  -  			exx
   22 D1:AD64 EB -  -  -  			ex 		de,hl
   23 D1:AD65 D9 -  -  -  			exx
   24 D1:AD66 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AD67 41 -  -  -  			ld 		b,c
   26 D1:AD68 4F -  -  -  			ld 		c,a
   27 D1:AD69 C9 -  -  -  			ret
   28 D1:AD6A -  -  -  -  
   29 D1:AD6A -  -  -  -  ; ***************************************************************************************
   30 D1:AD6A -  -  -  -  ;
   31 D1:AD6A -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AD6A -  -  -  -  ;
   33 D1:AD6A -  -  -  -  ; ***************************************************************************************
   34 D1:AD6A -  -  -  -  
   35 D1:AD6A -  -  -  -  DereferenceBoth:
   36 D1:AD6A CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AD6C C4 43 AE D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AD70 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AD72 C8 -  -  -  			ret 	z
   40 D1:AD73 CD 62 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AD77 CD 43 AE D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AD7B CD 62 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AD7F C9 -  -  -  			ret
   44 D1:AD80 -  -  -  -  
   45 D1:AD80 -  -  -  -  ; ***************************************************************************************
   46 D1:AD80 -  -  -  -  ;
   47 D1:AD80 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AD80 -  -  -  -  ;
   49 D1:AD80 -  -  -  -  ; ***************************************************************************************
   50 D1:AD80 -  -  -  -  
   51 D1:AD80 -  -  -  -  NegateHLHL:	
   52 D1:AD80 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AD82 C2 3B AC D1 			jp 		nz,TypeMismatch
   54 D1:AD86 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AD88 C4 43 AE D1 			call 	nz,Dereference 			; if required.
   56 D1:AD8C CD 40 B7 D1 			call 	Int32Negate
   57 D1:AD90 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 D1:AD91 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AD91 -  -  -  -  ; ***************************************************************************************
    2 D1:AD91 -  -  -  -  ; ***************************************************************************************
    3 D1:AD91 -  -  -  -  ;
    4 D1:AD91 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AD91 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD91 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD91 -  -  -  -  ;		Reviewed :	None
    8 D1:AD91 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AD91 -  -  -  -  ;
   10 D1:AD91 -  -  -  -  ; ***************************************************************************************
   11 D1:AD91 -  -  -  -  ; ***************************************************************************************
   12 D1:AD91 -  -  -  -  
   13 D1:AD91 -  -  -  -  ; ***************************************************************************************
   14 D1:AD91 -  -  -  -  ;
   15 D1:AD91 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AD91 -  -  -  -  ;
   17 D1:AD91 -  -  -  -  ; ***************************************************************************************
   18 D1:AD91 -  -  -  -  
   19 D1:AD91 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AD91 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AD92 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AD92 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AD93 -  -  -  -  		;
   24 D1:AD93 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AD93 -  -  -  -  		;
   26 D1:AD93 CD 9F AE D1 		call 	EvaluateTerm 				; get term
   27 D1:AD97 -  -  -  -  		;
   28 D1:AD97 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AD97 -  -  -  -  		;
   30 D1:AD97 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AD98 -  -  -  -  _EAPLoop:
   32 D1:AD98 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AD9B FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AD9D D8 -  -  -  		ret 	c
   35 D1:AD9E FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ADA0 D0 -  -  -  		ret 	nc
   37 D1:ADA1 -  -  -  -  		;
   38 D1:ADA1 -  -  -  -  		; 		Get the precedence.
   39 D1:ADA1 -  -  -  -  		;
   40 D1:ADA1 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ADA2 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ADA4 21 00 B3 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ADA8 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ADA9 6F -  -  -  		ld 		l,a
   45 D1:ADAA 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ADAB E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ADAC -  -  -  -  		;
   48 D1:ADAC -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ADAC -  -  -  -  		;
   50 D1:ADAC 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ADAD BB -  -  -  		cp 		e
   52 D1:ADAE D0 -  -  -  		ret 	nc
   53 D1:ADAF -  -  -  -  
   54 D1:ADAF -  -  -  -  		;
   55 D1:ADAF -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ADAF -  -  -  -  		;
   57 D1:ADAF D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ADB0 -  -  -  -  		;
   59 D1:ADB0 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ADB3 F5 -  -  -  		push 	af
   61 D1:ADB4 -  -  -  -  		;
   62 D1:ADB4 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ADB5 D9 -  -  -  		exx 								; save HL'
   64 D1:ADB6 E5 -  -  -  		push 	hl
   65 D1:ADB7 D9 -  -  -  		exx 								
   66 D1:ADB8 E5 -  -  -  		push 	hl 							; save HL
   67 D1:ADB9 -  -  -  -  		;
   68 D1:ADB9 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ADBB -  -  -  -  		;
   70 D1:ADBB -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ADBB -  -  -  -  		;
   72 D1:ADBB 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ADBC CD 92 AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ADC0 -  -  -  -  		;
   75 D1:ADC0 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ADC0 -  -  -  -  		;
   77 D1:ADC0 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ADC1 -  -  -  -  
   79 D1:ADC1 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ADC2 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:ADC3 D9 -  -  -  		exx
   82 D1:ADC4 EB -  -  -  		ex 		de,hl
   83 D1:ADC5 E1 -  -  -  		pop 	hl
   84 D1:ADC6 D9 -  -  -  		exx
   85 D1:ADC7 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:ADC8 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:ADC9 -  -  -  -  		;
   88 D1:ADC9 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:ADC9 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:ADC9 -  -  -  -  		;
   91 D1:ADC9 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:ADCA -  -  -  -  		;
   93 D1:ADCA -  -  -  -  		; 		Call the binary operator in A.
   94 D1:ADCA -  -  -  -  		;
   95 D1:ADCA D5 -  -  -  		push 	de
   96 D1:ADCB E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:ADCC E6 7F 21 00 
              00 00 6F 29 
              29 11 60 B4 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:ADE1 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:ADE2 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:ADE3 CD E5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:ADE7 -  -  -  -  		;
  102 D1:ADE7 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:ADE8 -  -  -  -  		;
  104 D1:ADE8 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:ADEA -  -  -  -  
  106 D1:ADEA -  -  -  -  ; ***************************************************************************************
  107 D1:ADEA -  -  -  -  ;
  108 D1:ADEA -  -  -  -  ;									Changes and Updates
  109 D1:ADEA -  -  -  -  ;
  110 D1:ADEA -  -  -  -  ; ***************************************************************************************
  111 D1:ADEA -  -  -  -  ;
  112 D1:ADEA -  -  -  -  ;		Date			Notes
  113 D1:ADEA -  -  -  -  ;		==== 			=====
  114 D1:ADEA -  -  -  -  ;
  115 D1:ADEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:ADEA -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:ADEA -  -  -  -  ; ***************************************************************************************
    2 D1:ADEA -  -  -  -  ; ***************************************************************************************
    3 D1:ADEA -  -  -  -  ;
    4 D1:ADEA -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:ADEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADEA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADEA -  -  -  -  ;		Reviewed :	No
    8 D1:ADEA -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:ADEA -  -  -  -  ;
   10 D1:ADEA -  -  -  -  ; ***************************************************************************************
   11 D1:ADEA -  -  -  -  ; ***************************************************************************************
   12 D1:ADEA -  -  -  -  
   13 D1:ADEA -  -  -  -  ; ***************************************************************************************
   14 D1:ADEA -  -  -  -  ;
   15 D1:ADEA -  -  -  -  ; 								Evaluate an integer term
   16 D1:ADEA -  -  -  -  ;
   17 D1:ADEA -  -  -  -  ; ***************************************************************************************
   18 D1:ADEA -  -  -  -  
   19 D1:ADEA -  -  -  -  EvaluateIntegerTerm:
   20 D1:ADEA CD 9F AE D1 		call 	EvaluateTerm
   21 D1:ADEE CD 43 AE D1 		call 	DeReference
   22 D1:ADF2 CB 41 -  -  		bit 	CIsString,c
   23 D1:ADF4 C8 -  -  -  		ret 	z
   24 D1:ADF5 C3 3B AC D1 		jp 		TypeMismatch
   25 D1:ADF9 -  -  -  -  
   26 D1:ADF9 -  -  -  -  ; ***************************************************************************************
   27 D1:ADF9 -  -  -  -  ;
   28 D1:ADF9 -  -  -  -  ; 								Evaluate a string term
   29 D1:ADF9 -  -  -  -  ;
   30 D1:ADF9 -  -  -  -  ; ***************************************************************************************
   31 D1:ADF9 -  -  -  -  
   32 D1:ADF9 -  -  -  -  EvaluateStringTerm:
   33 D1:ADF9 CD 9F AE D1 		call 	EvaluateTerm
   34 D1:ADFD CD 43 AE D1 		call 	DeReference
   35 D1:AE01 CB 41 -  -  		bit 	CIsString,c
   36 D1:AE03 C0 -  -  -  		ret 	nz
   37 D1:AE04 C3 3B AC D1 		jp 		TypeMismatch
   38 D1:AE08 -  -  -  -  
   39 D1:AE08 -  -  -  -  ; ***************************************************************************************
   40 D1:AE08 -  -  -  -  ;
   41 D1:AE08 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AE08 -  -  -  -  ;
   43 D1:AE08 -  -  -  -  ; ***************************************************************************************
   44 D1:AE08 -  -  -  -  
   45 D1:AE08 -  -  -  -  EvaluateValue:
   46 D1:AE08 CD 91 AD D1 		call 	EvaluateAtPrecedence0
   47 D1:AE0C C3 43 AE D1 		jp 		Dereference
   48 D1:AE10 -  -  -  -  
   49 D1:AE10 -  -  -  -  ; ***************************************************************************************
   50 D1:AE10 -  -  -  -  ;
   51 D1:AE10 -  -  -  -  ; 									Evaluate a number
   52 D1:AE10 -  -  -  -  ;
   53 D1:AE10 -  -  -  -  ; ***************************************************************************************
   54 D1:AE10 -  -  -  -  
   55 D1:AE10 -  -  -  -  EvaluateInteger:
   56 D1:AE10 CD 08 AE D1 		call 	EvaluateValue
   57 D1:AE14 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AE16 C8 -  -  -  		ret 	z
   59 D1:AE17 C3 3B AC D1 		jp 		TypeMismatch
   60 D1:AE1B -  -  -  -  
   61 D1:AE1B -  -  -  -  ; ***************************************************************************************
   62 D1:AE1B -  -  -  -  ;
   63 D1:AE1B -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AE1B -  -  -  -  ;
   65 D1:AE1B -  -  -  -  ; ***************************************************************************************
   66 D1:AE1B -  -  -  -  
   67 D1:AE1B -  -  -  -  Evaluate8BitInteger:
   68 D1:AE1B CD 10 AE D1 		call 	EvaluateInteger
   69 D1:AE1F D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AE20 7C -  -  -  		ld 		a,h
   71 D1:AE21 B5 -  -  -  		or 		l
   72 D1:AE22 D9 -  -  -  		exx 	
   73 D1:AE23 B4 -  -  -  		or 		h
   74 D1:AE24 C2 41 AC D1 		jp 		nz,BadValue
   75 D1:AE28 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AE29 C9 -  -  -  		ret
   77 D1:AE2A -  -  -  -  		
   78 D1:AE2A -  -  -  -  ; ***************************************************************************************
   79 D1:AE2A -  -  -  -  ;
   80 D1:AE2A -  -  -  -  ; 									Evaluate a string
   81 D1:AE2A -  -  -  -  ;
   82 D1:AE2A -  -  -  -  ; ***************************************************************************************
   83 D1:AE2A -  -  -  -  
   84 D1:AE2A -  -  -  -  EvaluateStringOnly:
   85 D1:AE2A CD 08 AE D1 		call 	EvaluateValue
   86 D1:AE2E CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AE30 CA 3B AC D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AE34 C9 -  -  -  		ret
   89 D1:AE35 -  -  -  -  
   90 D1:AE35 -  -  -  -  ; ***************************************************************************************
   91 D1:AE35 -  -  -  -  ;
   92 D1:AE35 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AE35 -  -  -  -  ;
   94 D1:AE35 -  -  -  -  ; ***************************************************************************************
   95 D1:AE35 -  -  -  -  
   96 D1:AE35 -  -  -  -  Return8BitConstant:
   97 D1:AE35 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AE39 6F -  -  -  		ld 		l,a
   99 D1:AE3A -  -  -  -  Return16BitConstant:
  100 D1:AE3A D9 -  -  -  		exx 								; clear HL'
  101 D1:AE3B 21 00 00 00 		ld 		hl,0
  102 D1:AE3F D9 -  -  -  		exx
  103 D1:AE40 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AE42 C9 -  -  -  		ret
  105 D1:AE43 -  -  -  -  
  106 D1:AE43 -  -  -  -  ; ***************************************************************************************
  107 D1:AE43 -  -  -  -  ;
  108 D1:AE43 -  -  -  -  ;									Changes and Updates
  109 D1:AE43 -  -  -  -  ;
  110 D1:AE43 -  -  -  -  ; ***************************************************************************************
  111 D1:AE43 -  -  -  -  ;
  112 D1:AE43 -  -  -  -  ;		Date			Notes
  113 D1:AE43 -  -  -  -  ;		==== 			=====
  114 D1:AE43 -  -  -  -  ;
  115 D1:AE43 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AE43 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AE43 -  -  -  -  ; ***************************************************************************************
    2 D1:AE43 -  -  -  -  ; ***************************************************************************************
    3 D1:AE43 -  -  -  -  ;
    4 D1:AE43 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AE43 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE43 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AE43 -  -  -  -  ;		Reviewed :	No
    8 D1:AE43 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AE43 -  -  -  -  ;
   10 D1:AE43 -  -  -  -  ; ***************************************************************************************
   11 D1:AE43 -  -  -  -  ; ***************************************************************************************
   12 D1:AE43 -  -  -  -  
   13 D1:AE43 -  -  -  -  ; ***************************************************************************************
   14 D1:AE43 -  -  -  -  ;
   15 D1:AE43 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AE43 -  -  -  -  ;
   17 D1:AE43 -  -  -  -  ; ***************************************************************************************
   18 D1:AE43 -  -  -  -  
   19 D1:AE43 -  -  -  -  Dereference:
   20 D1:AE43 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AE45 C8 -  -  -  		ret 	z
   22 D1:AE46 -  -  -  -  
   23 D1:AE46 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AE48 -  -  -  -  		
   25 D1:AE48 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AE4A 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AE4C -  -  -  -  
   28 D1:AE4C CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AE4E 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AE50 -  -  -  -  
   31 D1:AE50 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AE51 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AE53 D9 -  -  -  		exx
   34 D1:AE54 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AE55 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AE56 23 -  -  -  		inc  	hl
   37 D1:AE57 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AE59 D9 -  -  -  		exx 								; fix back
   39 D1:AE5A C9 -  -  -  		ret
   40 D1:AE5B -  -  -  -  
   41 D1:AE5B -  -  -  -  _DeRefByte:		
   42 D1:AE5B 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AE5C 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AE60 6F -  -  -  		ld	 	l,a
   45 D1:AE61 D9 -  -  -  		exx
   46 D1:AE62 21 00 00 00 		ld 		hl,$0000
   47 D1:AE66 D9 -  -  -  		exx
   48 D1:AE67 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AE69 C9 -  -  -  		ret
   50 D1:AE6A -  -  -  -  
   51 D1:AE6A -  -  -  -  _DRInternal:
   52 D1:AE6A 3E 05 C3 DD 
              AB D1 -  -  		ERR_DISABLED
   53 D1:AE70 -  -  -  -  
   54 D1:AE70 -  -  -  -  ; ***************************************************************************************
   55 D1:AE70 -  -  -  -  ;
   56 D1:AE70 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AE70 -  -  -  -  ;
   58 D1:AE70 -  -  -  -  ; ***************************************************************************************
   59 D1:AE70 -  -  -  -  
   60 D1:AE70 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AE70 -  -  -  -  		#ifdef EZ80
   62 D1:AE70 22 EB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AE74 D9 -  -  -  		exx
   64 D1:AE75 22 ED A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AE79 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AE7D D9 -  -  -  		exx
   67 D1:AE7E 2A EB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AE82 -  -  -  -  		#endif
   69 D1:AE82 C9 -  -  -  		ret
   70 D1:AE83 -  -  -  -  
   71 D1:AE83 -  -  -  -  ; ***************************************************************************************
   72 D1:AE83 -  -  -  -  ;
   73 D1:AE83 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AE83 -  -  -  -  ;
   75 D1:AE83 -  -  -  -  ; ***************************************************************************************
   76 D1:AE83 -  -  -  -  
   77 D1:AE83 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AE83 -  -  -  -  		#ifdef EZ80
   79 D1:AE83 22 EB A8 D1 		ld 		(AConvert),hl
   80 D1:AE87 21 00 00 00 		ld 		hl,$0000
   81 D1:AE8B 22 EE A8 D1 		ld 		(AConvert+3),hl
   82 D1:AE8F D9 -  -  -  		exx
   83 D1:AE90 2A ED A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AE94 D9 -  -  -  		exx
   85 D1:AE95 AF -  -  -  		xor 	a
   86 D1:AE96 32 ED A8 D1 		ld 		(AConvert+2),a
   87 D1:AE9A 2A EB A8 D1 		ld 		hl,(AConvert)
   88 D1:AE9E -  -  -  -  		#endif
   89 D1:AE9E C9 -  -  -  		ret
   90 D1:AE9F -  -  -  -  
   91 D1:AE9F -  -  -  -  ; ***************************************************************************************
   92 D1:AE9F -  -  -  -  ;
   93 D1:AE9F -  -  -  -  ;									Changes and Updates
   94 D1:AE9F -  -  -  -  ;
   95 D1:AE9F -  -  -  -  ; ***************************************************************************************
   96 D1:AE9F -  -  -  -  ;
   97 D1:AE9F -  -  -  -  ;		Date			Notes
   98 D1:AE9F -  -  -  -  ;		==== 			=====
   99 D1:AE9F -  -  -  -  ;
  100 D1:AE9F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE9F -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AE9F -  -  -  -  ; ***************************************************************************************
    2 D1:AE9F -  -  -  -  ; ***************************************************************************************
    3 D1:AE9F -  -  -  -  ;
    4 D1:AE9F -  -  -  -  ;		Name : 		term.asm
    5 D1:AE9F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE9F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE9F -  -  -  -  ;		Reviewed :	No
    8 D1:AE9F -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AE9F -  -  -  -  ;
   10 D1:AE9F -  -  -  -  ; ***************************************************************************************
   11 D1:AE9F -  -  -  -  ; ***************************************************************************************
   12 D1:AE9F -  -  -  -  
   13 D1:AE9F -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AE9F             		add_hlhl_16
   15 D1:AE9F             		exx
   16 D1:AE9F             		adc_hlhl_16
   17 D1:AE9F             		exx
   18 D1:AE9F             #endmacro
   19 D1:AE9F -  -  -  -  
   20 D1:AE9F -  -  -  -  ; ***************************************************************************************
   21 D1:AE9F -  -  -  -  ;
   22 D1:AE9F -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AE9F -  -  -  -  ;
   24 D1:AE9F -  -  -  -  ; ***************************************************************************************
   25 D1:AE9F -  -  -  -  ;
   26 D1:AE9F -  -  -  -  ; 		Terms can be:
   27 D1:AE9F -  -  -  -  ;
   28 D1:AE9F -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AE9F -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AE9F -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AE9F -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AE9F -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AE9F -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AE9F -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AE9F -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AE9F -  -  -  -  ; 														reference of some sort.
   37 D1:AE9F -  -  -  -  ;
   38 D1:AE9F -  -  -  -  ; ***************************************************************************************
   39 D1:AE9F -  -  -  -  
   40 D1:AE9F -  -  -  -  EvaluateTerm:		
   41 D1:AE9F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AEA1 D9 -  -  -  		exx
   43 D1:AEA2 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AEA6 D9 -  -  -  		exx
   45 D1:AEA7 21 00 00 00 		ld 		hl,$0000		
   46 D1:AEAB -  -  -  -  		;
   47 D1:AEAB DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AEAE FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AEB0 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AEB2 DA 6A AF D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AEB6 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AEB8 C2 0E AF D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AEBC -  -  -  -  		;
   54 D1:AEBC -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AEBC -  -  -  -  		;
   56 D1:AEBC -  -  -  -  _ETIntegerConstant:
   57 D1:AEBC -  -  -  -  		;
   58 D1:AEBC -  -  -  -  _ETIntegerLoop:		
   59 D1:AEBC DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AEBF E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AEC1 B5 -  -  -  		or 		l 							; or into L
   62 D1:AEC2 6F -  -  -  		ld 		l,a
   63 D1:AEC3 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AEC5 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AEC8 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AECA FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AECC D8 -  -  -  		ret 	c
   68 D1:AECD -  -  -  -  
   69 D1:AECD 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AED4 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AEDB 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AEE2 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AEE9 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AEF0 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AEF7 -  -  -  -  
   76 D1:AEF7 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AEF9 -  -  -  -  		;
   78 D1:AEF9 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AEF9 -  -  -  -  		;
   80 D1:AEF9 -  -  -  -  _ETStringMarker:		
   81 D1:AEF9 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AEFB DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AEFD DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AEFF E1 -  -  -  		pop 	hl
   85 D1:AF00 11 00 00 00 		ld 		de,$0000
   86 D1:AF04 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AF07 DD 19 -  -  		add 	ix,de
   88 D1:AF09 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AF0B 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AF0D C9 -  -  -  		ret
   91 D1:AF0E -  -  -  -  		;
   92 D1:AF0E -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AF0E -  -  -  -  		;
   94 D1:AF0E -  -  -  -  _ETFoundKeyword:
   95 D1:AF0E DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AF10 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AF12 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AF14 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AF16 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AF18 -  -  -  -  		;
  101 D1:AF18 -  -  -  -  		;		Unary group 0
  102 D1:AF18 -  -  -  -  		;
  103 D1:AF18 E6 7F 21 00 
              00 00 6F 29 
              29 11 60 B4 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AF2D C3 E5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AF31 -  -  -  -  
  106 D1:AF31 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AF31 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AF33 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AF35 -  -  -  -  		;
  110 D1:AF35 -  -  -  -  		; 		- term
  111 D1:AF35 -  -  -  -  		;
  112 D1:AF35 CD EA AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AF39 CD 80 AD D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AF3D C9 -  -  -  		ret
  115 D1:AF3E -  -  -  -  		;
  116 D1:AF3E -  -  -  -  		;		! ? indirection check
  117 D1:AF3E -  -  -  -  		;
  118 D1:AF3E -  -  -  -  _ETCheckIndirection:	
  119 D1:AF3E FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AF40 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AF42 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AF44 C2 47 AC D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AF48 -  -  -  -  		;
  124 D1:AF48 -  -  -  -  		; 		! ? indirection
  125 D1:AF48 -  -  -  -  		;
  126 D1:AF48 -  -  -  -  _ETIndirection:
  127 D1:AF48 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AF49 CD 9F AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AF4D CD 43 AE D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AF51 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AF53 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AF55 CD 70 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AF59 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AF5A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AF5C CB F9 -  -  		set 	CIsReference,c
  136 D1:AF5E FE 83 -  -  		cp 		KWD_PLING
  137 D1:AF60 C8 -  -  -  		ret 	z
  138 D1:AF61 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AF63 C9 -  -  -  		ret
  140 D1:AF64 -  -  -  -  _ETStringIndirect:
  141 D1:AF64 3E 02 C3 DD 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AF6A -  -  -  -  		;
  143 D1:AF6A -  -  -  -  		; 		Found an identifier.
  144 D1:AF6A -  -  -  -  		;
  145 D1:AF6A -  -  -  -  _ETVariable:
  146 D1:AF6A CD E2 B1 D1 		call 	FindVariable 				; find the variable.
  147 D1:AF6E D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AF6F 3E 11 C3 DD 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AF75 -  -  -  -  		
  150 D1:AF75 -  -  -  -  ; ***************************************************************************************
  151 D1:AF75 -  -  -  -  ;
  152 D1:AF75 -  -  -  -  ;									Changes and Updates
  153 D1:AF75 -  -  -  -  ;
  154 D1:AF75 -  -  -  -  ; ***************************************************************************************
  155 D1:AF75 -  -  -  -  ;
  156 D1:AF75 -  -  -  -  ;		Date			Notes
  157 D1:AF75 -  -  -  -  ;		==== 			=====
  158 D1:AF75 -  -  -  -  ;
  159 D1:AF75 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AF75 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AF75 -  -  -  -  ; ***************************************************************************************
    2 D1:AF75 -  -  -  -  ; ***************************************************************************************
    3 D1:AF75 -  -  -  -  ;
    4 D1:AF75 -  -  -  -  ;		Name : 		abs.asm
    5 D1:AF75 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF75 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF75 -  -  -  -  ;		Reviewed :	No
    8 D1:AF75 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AF75 -  -  -  -  ;
   10 D1:AF75 -  -  -  -  ; ***************************************************************************************
   11 D1:AF75 -  -  -  -  ; ***************************************************************************************
   12 D1:AF75 -  -  -  -  
   13 D1:AF75 -  -  -  -  ; ***************************************************************************************
   14 D1:AF75 -  -  -  -  ;
   15 D1:AF75 -  -  -  -  ;								abs( unary function
   16 D1:AF75 -  -  -  -  ;
   17 D1:AF75 -  -  -  -  ; ***************************************************************************************
   18 D1:AF75 -  -  -  -  
   19 D1:AF75 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AF75 CD EA AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AF79 D9 -  -  -  		exx 								; test MSB
   22 D1:AF7A CB 7C -  -  		bit 	7,h
   23 D1:AF7C D9 -  -  -  		exx
   24 D1:AF7D C4 80 AD D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AF81 C9 -  -  -  		ret
   26 D1:AF82 -  -  -  -  
   27 D1:AF82 -  -  -  -  ; ***************************************************************************************
   28 D1:AF82 -  -  -  -  ;
   29 D1:AF82 -  -  -  -  ;									Changes and Updates
   30 D1:AF82 -  -  -  -  ;
   31 D1:AF82 -  -  -  -  ; ***************************************************************************************
   32 D1:AF82 -  -  -  -  ;
   33 D1:AF82 -  -  -  -  ;		Date			Notes
   34 D1:AF82 -  -  -  -  ;		==== 			=====
   35 D1:AF82 -  -  -  -  ;
   36 D1:AF82 -  -  -  -  ; ***************************************************************************************
   37 D1:AF82 -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AF82 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AF82 -  -  -  -  ; ***************************************************************************************
    2 D1:AF82 -  -  -  -  ; ***************************************************************************************
    3 D1:AF82 -  -  -  -  ;
    4 D1:AF82 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AF82 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF82 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF82 -  -  -  -  ;		Reviewed :	No
    8 D1:AF82 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AF82 -  -  -  -  ;
   10 D1:AF82 -  -  -  -  ; ***************************************************************************************
   11 D1:AF82 -  -  -  -  ; ***************************************************************************************
   12 D1:AF82 -  -  -  -  
   13 D1:AF82 -  -  -  -  ; ***************************************************************************************
   14 D1:AF82 -  -  -  -  ;
   15 D1:AF82 -  -  -  -  ;								Asc unary function
   16 D1:AF82 -  -  -  -  ;
   17 D1:AF82 -  -  -  -  ; ***************************************************************************************
   18 D1:AF82 -  -  -  -  
   19 D1:AF82 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AF82 CD F9 AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AF86 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AF87 C3 35 AE D1 		jp 		Return8BitConstant
   23 D1:AF8B -  -  -  -  
   24 D1:AF8B -  -  -  -  ; ***************************************************************************************
   25 D1:AF8B -  -  -  -  ;
   26 D1:AF8B -  -  -  -  ;									Changes and Updates
   27 D1:AF8B -  -  -  -  ;
   28 D1:AF8B -  -  -  -  ; ***************************************************************************************
   29 D1:AF8B -  -  -  -  ;
   30 D1:AF8B -  -  -  -  ;		Date			Notes
   31 D1:AF8B -  -  -  -  ;		==== 			=====
   32 D1:AF8B -  -  -  -  ;
   33 D1:AF8B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AF8B -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AF8B -  -  -  -  ; ***************************************************************************************
    2 D1:AF8B -  -  -  -  ; ***************************************************************************************
    3 D1:AF8B -  -  -  -  ;
    4 D1:AF8B -  -  -  -  ;		Name : 		chr.asm
    5 D1:AF8B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF8B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF8B -  -  -  -  ;		Reviewed :	No
    8 D1:AF8B -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AF8B -  -  -  -  ;
   10 D1:AF8B -  -  -  -  ; ***************************************************************************************
   11 D1:AF8B -  -  -  -  ; ***************************************************************************************
   12 D1:AF8B -  -  -  -  
   13 D1:AF8B -  -  -  -  ; ***************************************************************************************
   14 D1:AF8B -  -  -  -  ;
   15 D1:AF8B -  -  -  -  ;								Chr$() unary function
   16 D1:AF8B -  -  -  -  ;
   17 D1:AF8B -  -  -  -  ; ***************************************************************************************
   18 D1:AF8B -  -  -  -  
   19 D1:AF8B -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AF8B CD B5 AB D1 		call 	CheckDollar
   21 D1:AF8F CD EA AD D1 		call 	EvaluateIntegerTerm
   22 D1:AF93 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AF94 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AF96 21 20 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AF9A 36 0D -  -  		ld 		(hl),13
   26 D1:AF9C 2B -  -  -  		dec 	hl
   27 D1:AF9D 77 -  -  -  		ld 		(hl),a
   28 D1:AF9E C9 -  -  -  		ret
   29 D1:AF9F -  -  -  -  
   30 D1:AF9F -  -  -  -  ; ***************************************************************************************
   31 D1:AF9F -  -  -  -  ;
   32 D1:AF9F -  -  -  -  ;									Changes and Updates
   33 D1:AF9F -  -  -  -  ;
   34 D1:AF9F -  -  -  -  ; ***************************************************************************************
   35 D1:AF9F -  -  -  -  ;
   36 D1:AF9F -  -  -  -  ;		Date			Notes
   37 D1:AF9F -  -  -  -  ;		==== 			=====
   38 D1:AF9F -  -  -  -  ;
   39 D1:AF9F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF9F -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AF9F -  -  -  -  ; ***************************************************************************************
    2 D1:AF9F -  -  -  -  ; ***************************************************************************************
    3 D1:AF9F -  -  -  -  ;
    4 D1:AF9F -  -  -  -  ;		Name : 		len.asm
    5 D1:AF9F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF9F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF9F -  -  -  -  ;		Reviewed :	None
    8 D1:AF9F -  -  -  -  ;		Purpose :	String Length
    9 D1:AF9F -  -  -  -  ;
   10 D1:AF9F -  -  -  -  ; ***************************************************************************************
   11 D1:AF9F -  -  -  -  ; ***************************************************************************************
   12 D1:AF9F -  -  -  -  
   13 D1:AF9F -  -  -  -  ; ***************************************************************************************
   14 D1:AF9F -  -  -  -  ;
   15 D1:AF9F -  -  -  -  ;								Len unary function
   16 D1:AF9F -  -  -  -  ;
   17 D1:AF9F -  -  -  -  ; ***************************************************************************************
   18 D1:AF9F -  -  -  -  
   19 D1:AF9F -  -  -  -  Unary_Len:	;; [len]
   20 D1:AF9F CD F9 AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AFA3 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AFA4 CD E8 AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AFA8 -  -  -  -  _ULCount:
   24 D1:AFA8 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AFA9 FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AFAB D8 -  -  -  		ret 	c
   27 D1:AFAC 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AFAD 13 -  -  -  		inc 	de
   29 D1:AFAE 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AFB0 -  -  -  -  
   31 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   32 D1:AFB0 -  -  -  -  ;
   33 D1:AFB0 -  -  -  -  ;									Changes and Updates
   34 D1:AFB0 -  -  -  -  ;
   35 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   36 D1:AFB0 -  -  -  -  ;
   37 D1:AFB0 -  -  -  -  ;		Date			Notes
   38 D1:AFB0 -  -  -  -  ;		==== 			=====
   39 D1:AFB0 -  -  -  -  ;
   40 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   41 D1:AFB0 -  -  -  -  		
Listing for file "_build.asm"
   38 D1:AFB0 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AFB0 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB0 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB0 -  -  -  -  ;
    4 D1:AFB0 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AFB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFB0 -  -  -  -  ;		Reviewed :	No
    8 D1:AFB0 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AFB0 -  -  -  -  ;
   10 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   12 D1:AFB0 -  -  -  -  
   13 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   14 D1:AFB0 -  -  -  -  ;
   15 D1:AFB0 -  -  -  -  ;								Str$() unary function
   16 D1:AFB0 -  -  -  -  ;
   17 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   18 D1:AFB0 -  -  -  -  
   19 D1:AFB0 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AFB0 CD EA AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AFB4 CD 70 AE D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AFB8 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AFBA C9 -  -  -  		ret
   24 D1:AFBB -  -  -  -  
   25 D1:AFBB -  -  -  -  ; ***************************************************************************************
   26 D1:AFBB -  -  -  -  ;
   27 D1:AFBB -  -  -  -  ;									Changes and Updates
   28 D1:AFBB -  -  -  -  ;
   29 D1:AFBB -  -  -  -  ; ***************************************************************************************
   30 D1:AFBB -  -  -  -  ;
   31 D1:AFBB -  -  -  -  ;		Date			Notes
   32 D1:AFBB -  -  -  -  ;		==== 			=====
   33 D1:AFBB -  -  -  -  ;
   34 D1:AFBB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AFBB -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AFBB -  -  -  -  ; ***************************************************************************************
    2 D1:AFBB -  -  -  -  ; ***************************************************************************************
    3 D1:AFBB -  -  -  -  ;
    4 D1:AFBB -  -  -  -  ;		Name : 		not.asm
    5 D1:AFBB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFBB -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AFBB -  -  -  -  ;		Reviewed :	No
    8 D1:AFBB -  -  -  -  ;		Purpose :	Logical not
    9 D1:AFBB -  -  -  -  ;
   10 D1:AFBB -  -  -  -  ; ***************************************************************************************
   11 D1:AFBB -  -  -  -  ; ***************************************************************************************
   12 D1:AFBB -  -  -  -  
   13 D1:AFBB -  -  -  -  ; ***************************************************************************************
   14 D1:AFBB -  -  -  -  ;
   15 D1:AFBB -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AFBB -  -  -  -  ;
   17 D1:AFBB -  -  -  -  ; ***************************************************************************************
   18 D1:AFBB -  -  -  -  
   19 D1:AFBB -  -  -  -  Unary_Not:		;; [not]
   20 D1:AFBB CD EA AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AFBF CD C8 AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AFC3 CD C8 AF D1 		call 	__UNSwap		
   23 D1:AFC7 C9 -  -  -  		ret
   24 D1:AFC8 -  -  -  -  
   25 D1:AFC8 -  -  -  -  __UNSwap:
   26 D1:AFC8 7C -  -  -  		ld 		a,h
   27 D1:AFC9 2F -  -  -  		cpl
   28 D1:AFCA 67 -  -  -  		ld 		h,a
   29 D1:AFCB 7D -  -  -  		ld 		a,l
   30 D1:AFCC 2F -  -  -  		cpl 	
   31 D1:AFCD 6F -  -  -  		ld 		l,a
   32 D1:AFCE D9 -  -  -  		exx
   33 D1:AFCF C9 -  -  -  		ret
   34 D1:AFD0 -  -  -  -  
   35 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   36 D1:AFD0 -  -  -  -  ;
   37 D1:AFD0 -  -  -  -  ;									Changes and Updates
   38 D1:AFD0 -  -  -  -  ;
   39 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   40 D1:AFD0 -  -  -  -  ;
   41 D1:AFD0 -  -  -  -  ;		Date			Notes
   42 D1:AFD0 -  -  -  -  ;		==== 			=====
   43 D1:AFD0 -  -  -  -  ;
   44 D1:AFD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AFD0 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AFD0 -  -  -  -  ; ***************************************************************************************
    2 D1:AFD0 -  -  -  -  ; ***************************************************************************************
    3 D1:AFD0 -  -  -  -  ;
    4 D1:AFD0 -  -  -  -  ;		Name : 		page.asm
    5 D1:AFD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFD0 -  -  -  -  ;		Reviewed :	No
    8 D1:AFD0 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AFD0 -  -  -  -  ;
   10 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   11 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   12 D1:AFD0 -  -  -  -  
   13 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   14 D1:AFD0 -  -  -  -  ;
   15 D1:AFD0 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AFD0 -  -  -  -  ;
   17 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   18 D1:AFD0 -  -  -  -  
   19 D1:AFD0 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AFD0 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AFD4 D9 -  -  -  			exx
   22 D1:AFD5 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AFD9 D9 -  -  -  			exx
   24 D1:AFDA 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AFDC C9 -  -  -  			ret
   26 D1:AFDD -  -  -  -  
   27 D1:AFDD -  -  -  -  ; ***************************************************************************************
   28 D1:AFDD -  -  -  -  ;
   29 D1:AFDD -  -  -  -  ;									Changes and Updates
   30 D1:AFDD -  -  -  -  ;
   31 D1:AFDD -  -  -  -  ; ***************************************************************************************
   32 D1:AFDD -  -  -  -  ;
   33 D1:AFDD -  -  -  -  ;		Date			Notes
   34 D1:AFDD -  -  -  -  ;		==== 			=====
   35 D1:AFDD -  -  -  -  ;
   36 D1:AFDD -  -  -  -  ; ***************************************************************************************
   37 D1:AFDD -  -  -  -  			
Listing for file "_build.asm"
   41 D1:AFDD -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AFDD -  -  -  -  ; ***************************************************************************************
    2 D1:AFDD -  -  -  -  ; ***************************************************************************************
    3 D1:AFDD -  -  -  -  ;
    4 D1:AFDD -  -  -  -  ;		Name : 		random.asm
    5 D1:AFDD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFDD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFDD -  -  -  -  ;		Reviewed :	No
    8 D1:AFDD -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AFDD -  -  -  -  ;
   10 D1:AFDD -  -  -  -  ; ***************************************************************************************
   11 D1:AFDD -  -  -  -  ; ***************************************************************************************
   12 D1:AFDD -  -  -  -  
   13 D1:AFDD -  -  -  -  ; ***************************************************************************************
   14 D1:AFDD -  -  -  -  ;
   15 D1:AFDD -  -  -  -  ;								Random unary function
   16 D1:AFDD -  -  -  -  ;
   17 D1:AFDD -  -  -  -  ; ***************************************************************************************
   18 D1:AFDD -  -  -  -  
   19 D1:AFDD -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AFDD F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AFE5 CD EA AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AFE9 D9 -  -  -  		exx 								; is it -ve
   23 D1:AFEA CB 7C -  -  		bit 	7,h
   24 D1:AFEC D9 -  -  -  		exx
   25 D1:AFED 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AFEF 22 F1 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AFF3 D9 -  -  -  		exx
   28 D1:AFF4 22 F5 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AFF8 D9 -  -  -  		exx
   30 D1:AFF9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AFFB C9 -  -  -  		ret
   32 D1:AFFC -  -  -  -  _URDontSeed:		
   33 D1:AFFC -  -  -  -  
   34 D1:AFFC CD 0F B7 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:B000 28 1C -  -  		jr 		z,_URFail
   36 D1:B002 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:B003 D9 -  -  -  		exx
   38 D1:B004 E5 -  -  -  		push 	hl
   39 D1:B005 D9 -  -  -  		exx
   40 D1:B006 -  -  -  -  		;
   41 D1:B006 CD 2F B0 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:B00A D9 -  -  -  		exx
   43 D1:B00B CD 2F B0 D1 		call 	URandomHL
   44 D1:B00F CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:B011 D9 -  -  -  		exx
   46 D1:B012 -  -  -  -  		;
   47 D1:B012 D9 -  -  -  		exx 								; restore range.
   48 D1:B013 D1 -  -  -  		pop 	de
   49 D1:B014 D9 -  -  -  		exx
   50 D1:B015 D1 -  -  -  		pop 	de
   51 D1:B016 -  -  -  -  		;
   52 D1:B016 CD A0 B5 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B01A 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B01B 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B01D C9 -  -  -  		ret
   56 D1:B01E -  -  -  -  _URFail:
   57 D1:B01E 3E 03 C3 DD 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:B024 -  -  -  -  ; ***************************************************************************************
   59 D1:B024 -  -  -  -  ;
   60 D1:B024 -  -  -  -  ; 									Push RNG off zero
   61 D1:B024 -  -  -  -  ;
   62 D1:B024 -  -  -  -  ; ***************************************************************************************
   63 D1:B024 -  -  -  -  
   64 D1:B024 -  -  -  -  UnaryRandomInitialise:
   65 D1:B024 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B026 -  -  -  -  _URILoop:
   67 D1:B026 C5 -  -  -  		push 	bc
   68 D1:B027 CD 2F B0 D1 		call 	URandomHL
   69 D1:B02B C1 -  -  -  		pop 	bc
   70 D1:B02C 10 F8 -  -  		djnz 	_URILoop
   71 D1:B02E C9 -  -  -  		ret
   72 D1:B02F -  -  -  -  
   73 D1:B02F -  -  -  -  ; ***************************************************************************************
   74 D1:B02F -  -  -  -  ;
   75 D1:B02F -  -  -  -  ;							16 bit random number generator
   76 D1:B02F -  -  -  -  ;
   77 D1:B02F -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B02F -  -  -  -  ;		Actual author unspecified.
   79 D1:B02F -  -  -  -  ;
   80 D1:B02F -  -  -  -  ; ***************************************************************************************
   81 D1:B02F -  -  -  -  
   82 D1:B02F -  -  -  -  URandomHL:
   83 D1:B02F 2A F1 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B033 ED 5B F5 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B038 44 -  -  -  	    ld 		b,h
   86 D1:B039 4D -  -  -  	    ld 		c,l
   87 D1:B03A 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B03F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B044 2C -  -  -  	    inc 	l
   90 D1:B045 09 -  -  -  	    add 	hl,bc
   91 D1:B046 22 F1 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B04A 2A F5 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B04E ED 5A -  -  	    adc 	hl,de
   94 D1:B050 22 F5 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B054 EB -  -  -  	    ex 		de,hl
   96 D1:B055 2A F9 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B059 ED 4B FD A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B05E 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B063 ED 43 FD A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B068 9F -  -  -  	    sbc 	a,a
  101 D1:B069 E6 C5 -  -  	    and 	%11000101
  102 D1:B06B AD -  -  -  	    xor 	l
  103 D1:B06C 6F -  -  -  	    ld 		l,a
  104 D1:B06D 22 F9 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B071 EB -  -  -  	    ex 		de,hl
  106 D1:B072 09 -  -  -  	    add 	hl,bc
  107 D1:B073 C9 -  -  -  	    ret		
  108 D1:B074 -  -  -  -  
  109 D1:B074 -  -  -  -  ; ***************************************************************************************
  110 D1:B074 -  -  -  -  ;
  111 D1:B074 -  -  -  -  ;									Changes and Updates
  112 D1:B074 -  -  -  -  ;
  113 D1:B074 -  -  -  -  ; ***************************************************************************************
  114 D1:B074 -  -  -  -  ;
  115 D1:B074 -  -  -  -  ;		Date			Notes
  116 D1:B074 -  -  -  -  ;		==== 			=====
  117 D1:B074 -  -  -  -  ;
  118 D1:B074 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:B074 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B074 -  -  -  -  ; ***************************************************************************************
    2 D1:B074 -  -  -  -  ; ***************************************************************************************
    3 D1:B074 -  -  -  -  ;
    4 D1:B074 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B074 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B074 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B074 -  -  -  -  ;		Reviewed :	No
    8 D1:B074 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B074 -  -  -  -  ;
   10 D1:B074 -  -  -  -  ; ***************************************************************************************
   11 D1:B074 -  -  -  -  ; ***************************************************************************************
   12 D1:B074 -  -  -  -  
   13 D1:B074 -  -  -  -  ; ***************************************************************************************
   14 D1:B074 -  -  -  -  ;
   15 D1:B074 -  -  -  -  ;								sgn unary function
   16 D1:B074 -  -  -  -  ;
   17 D1:B074 -  -  -  -  ; ***************************************************************************************
   18 D1:B074 -  -  -  -  
   19 D1:B074 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B074 CD EA AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B078 CD 0F B7 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B07C CA E8 AC D1 		jp 		z,UnaryInt32False
   23 D1:B080 D9 -  -  -  		exx
   24 D1:B081 CB 7C -  -  		bit 	7,h
   25 D1:B083 D9 -  -  -  		exx
   26 D1:B084 C2 E4 AC D1 		jp 		nz,UnaryInt32True
   27 D1:B088 3E 01 -  -  		ld 		a,1
   28 D1:B08A C3 35 AE D1 		jp 		Return8BitConstant
   29 D1:B08E -  -  -  -  
   30 D1:B08E -  -  -  -  ; ***************************************************************************************
   31 D1:B08E -  -  -  -  ;
   32 D1:B08E -  -  -  -  ;									Changes and Updates
   33 D1:B08E -  -  -  -  ;
   34 D1:B08E -  -  -  -  ; ***************************************************************************************
   35 D1:B08E -  -  -  -  ;
   36 D1:B08E -  -  -  -  ;		Date			Notes
   37 D1:B08E -  -  -  -  ;		==== 			=====
   38 D1:B08E -  -  -  -  ;
   39 D1:B08E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B08E -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B08E -  -  -  -  ; ***************************************************************************************
    2 D1:B08E -  -  -  -  ; ***************************************************************************************
    3 D1:B08E -  -  -  -  ;
    4 D1:B08E -  -  -  -  ;		Name : 		simple.asm
    5 D1:B08E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B08E -  -  -  -  ;		Reviewed :	No
    8 D1:B08E -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B08E -  -  -  -  ;
   10 D1:B08E -  -  -  -  ; ***************************************************************************************
   11 D1:B08E -  -  -  -  ; ***************************************************************************************
   12 D1:B08E -  -  -  -  
   13 D1:B08E -  -  -  -  ; ***************************************************************************************
   14 D1:B08E -  -  -  -  ;
   15 D1:B08E -  -  -  -  ;								( unary function (think about it)
   16 D1:B08E -  -  -  -  ;
   17 D1:B08E -  -  -  -  ; ***************************************************************************************
   18 D1:B08E -  -  -  -  
   19 D1:B08E -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B08E CD 91 AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B092 C3 A7 AB D1 		jp  	CheckRightBracket
   22 D1:B096 -  -  -  -  
   23 D1:B096 -  -  -  -  ; ***************************************************************************************
   24 D1:B096 -  -  -  -  ;
   25 D1:B096 -  -  -  -  ;									Handle &x
   26 D1:B096 -  -  -  -  ;
   27 D1:B096 -  -  -  -  ; ***************************************************************************************
   28 D1:B096 -  -  -  -  
   29 D1:B096 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B096 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B099 E6 C0 -  -  		and 		$C0
   32 D1:B09B FE 40 -  -  		cp 			$40
   33 D1:B09D C2 47 AC D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B0A1 C3 9F AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B0A5 -  -  -  -  
   36 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   37 D1:B0A5 -  -  -  -  ;
   38 D1:B0A5 -  -  -  -  ;									Changes and Updates
   39 D1:B0A5 -  -  -  -  ;
   40 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   41 D1:B0A5 -  -  -  -  ;
   42 D1:B0A5 -  -  -  -  ;		Date			Notes
   43 D1:B0A5 -  -  -  -  ;		==== 			=====
   44 D1:B0A5 -  -  -  -  ;
   45 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   46 D1:B0A5 -  -  -  -  		
Listing for file "_build.asm"
   44 D1:B0A5 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B0A5 -  -  -  -  ; ***************************************************************************************
    2 D1:B0A5 -  -  -  -  ; ***************************************************************************************
    3 D1:B0A5 -  -  -  -  ;
    4 D1:B0A5 -  -  -  -  ;		Name : 		str.asm
    5 D1:B0A5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0A5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0A5 -  -  -  -  ;		Reviewed :	No
    8 D1:B0A5 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B0A5 -  -  -  -  ;
   10 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   11 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   12 D1:B0A5 -  -  -  -  
   13 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   14 D1:B0A5 -  -  -  -  ;
   15 D1:B0A5 -  -  -  -  ;								Str$() unary function
   16 D1:B0A5 -  -  -  -  ;
   17 D1:B0A5 -  -  -  -  ; ***************************************************************************************
   18 D1:B0A5 -  -  -  -  
   19 D1:B0A5 -  -  -  -  Unary_Str:	;; [str]
   20 D1:B0A5 CD B5 AB D1 		call 	CheckDollar
   21 D1:B0A9 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B0AC EE AC -  -  		xor		KWD_TILDE
   23 D1:B0AE F5 -  -  -  		push 	af
   24 D1:B0AF 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B0B1 DD 23 -  -  		inc 	ix
   26 D1:B0B3 -  -  -  -  _USNotHex:		
   27 D1:B0B3 CD EA AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B0B7 01 0F A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B0BB F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B0BC 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B0BE 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B0C0 3E 10 -  -  		ld 		a,16
   33 D1:B0C2 -  -  -  -  _USNotHex2:		
   34 D1:B0C2 CD 57 B7 D1 		call 	Int32ToString 				
   35 D1:B0C6 21 0F A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B0CA 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B0CC C9 -  -  -  		ret
   38 D1:B0CD -  -  -  -  
   39 D1:B0CD -  -  -  -  ; ***************************************************************************************
   40 D1:B0CD -  -  -  -  ;
   41 D1:B0CD -  -  -  -  ;									Changes and Updates
   42 D1:B0CD -  -  -  -  ;
   43 D1:B0CD -  -  -  -  ; ***************************************************************************************
   44 D1:B0CD -  -  -  -  ;
   45 D1:B0CD -  -  -  -  ;		Date			Notes
   46 D1:B0CD -  -  -  -  ;		==== 			=====
   47 D1:B0CD -  -  -  -  ;
   48 D1:B0CD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:B0CD -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B0CD -  -  -  -  ; ***************************************************************************************
    2 D1:B0CD -  -  -  -  ; ***************************************************************************************
    3 D1:B0CD -  -  -  -  ;
    4 D1:B0CD -  -  -  -  ;		Name : 		time.asm
    5 D1:B0CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0CD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0CD -  -  -  -  ;		Reviewed :	No
    8 D1:B0CD -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B0CD -  -  -  -  ;
   10 D1:B0CD -  -  -  -  ; ***************************************************************************************
   11 D1:B0CD -  -  -  -  ; ***************************************************************************************
   12 D1:B0CD -  -  -  -  
   13 D1:B0CD -  -  -  -  ; ***************************************************************************************
   14 D1:B0CD -  -  -  -  ;
   15 D1:B0CD -  -  -  -  ;							Get system time in ms
   16 D1:B0CD -  -  -  -  ;
   17 D1:B0CD -  -  -  -  ; ***************************************************************************************
   18 D1:B0CD -  -  -  -  
   19 D1:B0CD -  -  -  -  Unary_Time:	;; [time]
   20 D1:B0CD CD 1A B8 D1 			call 	SYSGetTimer
   21 D1:B0D1 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B0D3 C9 -  -  -  			ret
   23 D1:B0D4 -  -  -  -  
   24 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   25 D1:B0D4 -  -  -  -  ;
   26 D1:B0D4 -  -  -  -  ;									Changes and Updates
   27 D1:B0D4 -  -  -  -  ;
   28 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   29 D1:B0D4 -  -  -  -  ;
   30 D1:B0D4 -  -  -  -  ;		Date			Notes
   31 D1:B0D4 -  -  -  -  ;		==== 			=====
   32 D1:B0D4 -  -  -  -  ;
   33 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   34 D1:B0D4 -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B0D4 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B0D4 -  -  -  -  ; ***************************************************************************************
    2 D1:B0D4 -  -  -  -  ; ***************************************************************************************
    3 D1:B0D4 -  -  -  -  ;
    4 D1:B0D4 -  -  -  -  ;		Name : 		top.asm
    5 D1:B0D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0D4 -  -  -  -  ;		Reviewed :	No
    8 D1:B0D4 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B0D4 -  -  -  -  ;
   10 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   11 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   12 D1:B0D4 -  -  -  -  
   13 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   14 D1:B0D4 -  -  -  -  ;
   15 D1:B0D4 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B0D4 -  -  -  -  ;
   17 D1:B0D4 -  -  -  -  ; ***************************************************************************************
   18 D1:B0D4 -  -  -  -  
   19 D1:B0D4 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B0D4 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B0D8 D9 -  -  -  			exx
   22 D1:B0D9 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B0DD D9 -  -  -  			exx
   24 D1:B0DE 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B0E0 C9 -  -  -  			ret
   26 D1:B0E1 -  -  -  -  
   27 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   28 D1:B0E1 -  -  -  -  ;
   29 D1:B0E1 -  -  -  -  ;									Changes and Updates
   30 D1:B0E1 -  -  -  -  ;
   31 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   32 D1:B0E1 -  -  -  -  ;
   33 D1:B0E1 -  -  -  -  ;		Date			Notes
   34 D1:B0E1 -  -  -  -  ;		==== 			=====
   35 D1:B0E1 -  -  -  -  ;
   36 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   37 D1:B0E1 -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B0E1 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B0E1 -  -  -  -  ; ***************************************************************************************
    2 D1:B0E1 -  -  -  -  ; ***************************************************************************************
    3 D1:B0E1 -  -  -  -  ;
    4 D1:B0E1 -  -  -  -  ;		Name : 		val.asm
    5 D1:B0E1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0E1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0E1 -  -  -  -  ;		Reviewed :	No
    8 D1:B0E1 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B0E1 -  -  -  -  ;
   10 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   11 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   12 D1:B0E1 -  -  -  -  
   13 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   14 D1:B0E1 -  -  -  -  ;
   15 D1:B0E1 -  -  -  -  ;								val( unary function
   16 D1:B0E1 -  -  -  -  ;
   17 D1:B0E1 -  -  -  -  ; ***************************************************************************************
   18 D1:B0E1 -  -  -  -  
   19 D1:B0E1 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B0E1 CD F9 AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B0E5 E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B0E6 C1 -  -  -  		pop 	bc
   23 D1:B0E7 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B0E9 CD 35 B6 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B0ED 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B0EF C8 -  -  -  		ret		z 							; okay
   27 D1:B0F0 3E 03 C3 DD 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B0F6 -  -  -  -  
   29 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   30 D1:B0F6 -  -  -  -  ;
   31 D1:B0F6 -  -  -  -  ;									Changes and Updates
   32 D1:B0F6 -  -  -  -  ;
   33 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   34 D1:B0F6 -  -  -  -  ;
   35 D1:B0F6 -  -  -  -  ;		Date			Notes
   36 D1:B0F6 -  -  -  -  ;		==== 			=====
   37 D1:B0F6 -  -  -  -  ;
   38 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   39 D1:B0F6 -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B0F6 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B0F6 -  -  -  -  ; ***************************************************************************************
    2 D1:B0F6 -  -  -  -  ; ***************************************************************************************
    3 D1:B0F6 -  -  -  -  ;
    4 D1:B0F6 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B0F6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0F6 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B0F6 -  -  -  -  ;		Reviewed :	No
    8 D1:B0F6 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B0F6 -  -  -  -  ;
   10 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   11 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   12 D1:B0F6 -  -  -  -  
   13 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   14 D1:B0F6 -  -  -  -  ;
   15 D1:B0F6 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B0F6 -  -  -  -  ;
   17 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   18 D1:B0F6 -  -  -  -  
   19 D1:B0F6 -  -  -  -  AllocateBytes:
   20 D1:B0F6 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B0F7 21 00 00 00 		ld 		hl,$000000
   22 D1:B0FB 62 -  -  -  		ld 		h,d
   23 D1:B0FC 6B -  -  -  		ld 		l,e
   24 D1:B0FD -  -  -  -  		;
   25 D1:B0FD ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 D1:B102 D5 -  -  -  		push 	de 							; save on stack
   27 D1:B103 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 D1:B104 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   29 D1:B108 -  -  -  -  		;
   30 D1:B108 EB -  -  -  		ex 		de,hl 						; put in DE
   31 D1:B109 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 D1:B10D AF -  -  -  		xor 	a
   33 D1:B10E ED 52 -  -  		sbc 	hl,de
   34 D1:B110 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 D1:B111 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 D1:B112 3E 08 C3 DD 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 D1:B118 -  -  -  -  
   38 D1:B118 -  -  -  -  ; ***************************************************************************************
   39 D1:B118 -  -  -  -  ;
   40 D1:B118 -  -  -  -  ;									Changes and Updates
   41 D1:B118 -  -  -  -  ;
   42 D1:B118 -  -  -  -  ; ***************************************************************************************
   43 D1:B118 -  -  -  -  ;
   44 D1:B118 -  -  -  -  ;		Date			Notes
   45 D1:B118 -  -  -  -  ;		==== 			=====
   46 D1:B118 -  -  -  -  ;
   47 D1:B118 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B118 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B118 -  -  -  -  ; ***************************************************************************************
    2 D1:B118 -  -  -  -  ; ***************************************************************************************
    3 D1:B118 -  -  -  -  ;
    4 D1:B118 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B118 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B118 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B118 -  -  -  -  ;		Reviewed :	No
    8 D1:B118 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B118 -  -  -  -  ;
   10 D1:B118 -  -  -  -  ; ***************************************************************************************
   11 D1:B118 -  -  -  -  ; ***************************************************************************************
   12 D1:B118 -  -  -  -  
   13 D1:B118 -  -  -  -  ; ***************************************************************************************
   14 D1:B118 -  -  -  -  ;
   15 D1:B118 -  -  -  -  ;										CLEAR command
   16 D1:B118 -  -  -  -  ;
   17 D1:B118 -  -  -  -  ; ***************************************************************************************
   18 D1:B118 -  -  -  -  
   19 D1:B118 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B118 -  -  -  -  		;
   21 D1:B118 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B118 -  -  -  -  		;
   23 D1:B118 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B11C -  -  -  -  _CCFindLow:
   25 D1:B11C 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B120 5E -  -  -  		ld 		e,(hl)		
   27 D1:B121 19 -  -  -  		add 	hl,de
   28 D1:B122 7B -  -  -  		ld 		a,e
   29 D1:B123 B7 -  -  -  		or 		a
   30 D1:B124 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B126 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B127 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B12B 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B12C 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B130 -  -  -  -  		;
   36 D1:B130 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B130 -  -  -  -  		;
   38 D1:B130 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B134 -  -  -  -  		;
   40 D1:B134 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:B138 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:B13C 19 -  -  -  		add 	hl,de
   43 D1:B13D 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:B13F 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:B143 -  -  -  -  		;
   46 D1:B143 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:B147 19 -  -  -  		add 	hl,de
   48 D1:B148 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:B14C -  -  -  -  		;
   50 D1:B14C -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 D1:B14C -  -  -  -  		;
   52 D1:B14C 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 D1:B150 -  -  -  -  _CCFClearHT:
   54 D1:B150 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 D1:B151 36 00 -  -  		ld 		(hl),0
   56 D1:B153 1B -  -  -  		dec 	de
   57 D1:B154 7A -  -  -  		ld 		a,d
   58 D1:B155 B3 -  -  -  		or 		e
   59 D1:B156 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 D1:B158 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   61 D1:B15C -  -  -  -  		;
   62 D1:B15C -  -  -  -  		; 		Save highest byte that can be allocate
   63 D1:B15C -  -  -  -  		;
   64 D1:B15C 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   65 D1:B160 -  -  -  -  		;
   66 D1:B160 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 D1:B160 -  -  -  -  		;
   68 D1:B160 CD 24 B0 D1 		call 	UnaryRandomInitialise
   69 D1:B164 -  -  -  -  		;
   70 D1:B164 -  -  -  -  		;		Erase the stack
   71 D1:B164 -  -  -  -  		;
   72 D1:B164 CD 88 B1 D1 		call 	StackReset 					; reset the basic stack to empty
   73 D1:B168 C9 -  -  -  		ret
   74 D1:B169 -  -  -  -  
   75 D1:B169 -  -  -  -  ; ***************************************************************************************
   76 D1:B169 -  -  -  -  ;
   77 D1:B169 -  -  -  -  ;									Changes and Updates
   78 D1:B169 -  -  -  -  ;
   79 D1:B169 -  -  -  -  ; ***************************************************************************************
   80 D1:B169 -  -  -  -  ;
   81 D1:B169 -  -  -  -  ;		Date			Notes
   82 D1:B169 -  -  -  -  ;		==== 			=====
   83 D1:B169 -  -  -  -  ;
   84 D1:B169 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B169 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B169 -  -  -  -  ; ***************************************************************************************
    2 D1:B169 -  -  -  -  ; ***************************************************************************************
    3 D1:B169 -  -  -  -  ;
    4 D1:B169 -  -  -  -  ;		Name : 		instance.asm
    5 D1:B169 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B169 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B169 -  -  -  -  ;		Reviewed :	No
    8 D1:B169 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B169 -  -  -  -  ;
   10 D1:B169 -  -  -  -  ; ***************************************************************************************
   11 D1:B169 -  -  -  -  ; ***************************************************************************************
   12 D1:B169 -  -  -  -  
   13 D1:B169 -  -  -  -  ; ***************************************************************************************
   14 D1:B169 -  -  -  -  ;
   15 D1:B169 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B169 -  -  -  -  ;
   17 D1:B169 -  -  -  -  ; ***************************************************************************************
   18 D1:B169 -  -  -  -  
   19 D1:B169 -  -  -  -  SetCurrentInstance:
   20 D1:B169 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B16E 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B172 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B177 -  -  -  -  
   24 D1:B177 C9 -  -  -  		ret
   25 D1:B178 -  -  -  -  
   26 D1:B178 -  -  -  -  
   27 D1:B178 -  -  -  -  ; ***************************************************************************************
   28 D1:B178 -  -  -  -  ;
   29 D1:B178 -  -  -  -  ;									Changes and Updates
   30 D1:B178 -  -  -  -  ;
   31 D1:B178 -  -  -  -  ; ***************************************************************************************
   32 D1:B178 -  -  -  -  ;
   33 D1:B178 -  -  -  -  ;		Date			Notes
   34 D1:B178 -  -  -  -  ;		==== 			=====
   35 D1:B178 -  -  -  -  ;
   36 D1:B178 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B178 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B178 -  -  -  -  ; ***************************************************************************************
    2 D1:B178 -  -  -  -  ; ***************************************************************************************
    3 D1:B178 -  -  -  -  ;
    4 D1:B178 -  -  -  -  ;		Name : 		new.asm
    5 D1:B178 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B178 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B178 -  -  -  -  ;		Reviewed :	No
    8 D1:B178 -  -  -  -  ;		Purpose :	New command.
    9 D1:B178 -  -  -  -  ;
   10 D1:B178 -  -  -  -  ; ***************************************************************************************
   11 D1:B178 -  -  -  -  ; ***************************************************************************************
   12 D1:B178 -  -  -  -  
   13 D1:B178 -  -  -  -  ; ***************************************************************************************
   14 D1:B178 -  -  -  -  ;
   15 D1:B178 -  -  -  -  ;										NEW command
   16 D1:B178 -  -  -  -  ;
   17 D1:B178 -  -  -  -  ; ***************************************************************************************
   18 D1:B178 -  -  -  -  
   19 D1:B178 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B178 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B17C 36 00 -  -  		ld 		(hl),0
   22 D1:B17E CD 18 B1 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B182 3E 00 C3 DD 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B188 -  -  -  -  
   25 D1:B188 -  -  -  -  ; ***************************************************************************************
   26 D1:B188 -  -  -  -  ;
   27 D1:B188 -  -  -  -  ;									Changes and Updates
   28 D1:B188 -  -  -  -  ;
   29 D1:B188 -  -  -  -  ; ***************************************************************************************
   30 D1:B188 -  -  -  -  ;
   31 D1:B188 -  -  -  -  ;		Date			Notes
   32 D1:B188 -  -  -  -  ;		==== 			=====
   33 D1:B188 -  -  -  -  ;
   34 D1:B188 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B188 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 D1:B188 -  -  -  -  ; ***************************************************************************************
    2 D1:B188 -  -  -  -  ; ***************************************************************************************
    3 D1:B188 -  -  -  -  ;
    4 D1:B188 -  -  -  -  ;		Name : 		stack.asm
    5 D1:B188 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B188 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B188 -  -  -  -  ;		Reviewed :	No
    8 D1:B188 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:B188 -  -  -  -  ;
   10 D1:B188 -  -  -  -  ; ***************************************************************************************
   11 D1:B188 -  -  -  -  ; ***************************************************************************************
   12 D1:B188 -  -  -  -  ;
   13 D1:B188 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 D1:B188 -  -  -  -  ;		The low bytes (0..3) doubled the size of the stack in bytes 
   15 D1:B188 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 D1:B188 -  -  -  -  ;
   17 D1:B188 -  -  -  -  ; ***************************************************************************************
   18 D1:B188 -  -  -  -  ;
   19 D1:B188 -  -  -  -  ;								Clear the stack
   20 D1:B188 -  -  -  -  ;
   21 D1:B188 -  -  -  -  ; ***************************************************************************************
   22 D1:B188 -  -  -  -  
   23 D1:B188 -  -  -  -  StackReset:
   24 D1:B188 2A BD A8 D1 		ld 		hl,(LanguageStack) 			; top of language stack
   25 D1:B18C 2B -  -  -  		dec 	hl 							; down to make space for end.
   26 D1:B18D 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write out current position
   27 D1:B191 36 00 -  -  		ld 		(hl),0 						; Dummy top, as stack size cannot be 0.
   28 D1:B193 C9 -  -  -  		ret
   29 D1:B194 -  -  -  -  
   30 D1:B194 -  -  -  -  ; ***************************************************************************************
   31 D1:B194 -  -  -  -  ;
   32 D1:B194 -  -  -  -  ;									Changes and Updates
   33 D1:B194 -  -  -  -  ;
   34 D1:B194 -  -  -  -  ; ***************************************************************************************
   35 D1:B194 -  -  -  -  ;
   36 D1:B194 -  -  -  -  ;		Date			Notes
   37 D1:B194 -  -  -  -  ;		==== 			=====
   38 D1:B194 -  -  -  -  ;
   39 D1:B194 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 D1:B194 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B194 -  -  -  -  ; ***************************************************************************************
    2 D1:B194 -  -  -  -  ; ***************************************************************************************
    3 D1:B194 -  -  -  -  ;
    4 D1:B194 -  -  -  -  ;		Name : 		utility.asm
    5 D1:B194 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B194 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B194 -  -  -  -  ;		Reviewed :	No
    8 D1:B194 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B194 -  -  -  -  ;
   10 D1:B194 -  -  -  -  ; ***************************************************************************************
   11 D1:B194 -  -  -  -  ; ***************************************************************************************
   12 D1:B194 -  -  -  -  
   13 D1:B194 -  -  -  -  ; ***************************************************************************************
   14 D1:B194 -  -  -  -  ;
   15 D1:B194 -  -  -  -  ;							Print ASCII string at HL
   16 D1:B194 -  -  -  -  ;
   17 D1:B194 -  -  -  -  ; ***************************************************************************************
   18 D1:B194 -  -  -  -  
   19 D1:B194 -  -  -  -  PrintStringAtHL:
   20 D1:B194 7E -  -  -  		ld 		a,(hl)
   21 D1:B195 FE 20 -  -  		cp 		$20		
   22 D1:B197 D8 -  -  -  		ret 	c
   23 D1:B198 CD CA B7 D1 		call 	SYSPrintChar
   24 D1:B19C 23 -  -  -  		inc 	hl
   25 D1:B19D 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B19F -  -  -  -  
   27 D1:B19F -  -  -  -  ; ***************************************************************************************
   28 D1:B19F -  -  -  -  ;
   29 D1:B19F -  -  -  -  ;									Changes and Updates
   30 D1:B19F -  -  -  -  ;
   31 D1:B19F -  -  -  -  ; ***************************************************************************************
   32 D1:B19F -  -  -  -  ;
   33 D1:B19F -  -  -  -  ;		Date			Notes
   34 D1:B19F -  -  -  -  ;		==== 			=====
   35 D1:B19F -  -  -  -  ;
   36 D1:B19F -  -  -  -  ; ***************************************************************************************
   37 D1:B19F -  -  -  -  		
Listing for file "_build.asm"
   54 D1:B19F -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B19F -  -  -  -  ; ***************************************************************************************
    2 D1:B19F -  -  -  -  ; ***************************************************************************************
    3 D1:B19F -  -  -  -  ;
    4 D1:B19F -  -  -  -  ;		Name : 		create.asm
    5 D1:B19F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B19F -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B19F -  -  -  -  ;		Reviewed :	No
    8 D1:B19F -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B19F -  -  -  -  ;
   10 D1:B19F -  -  -  -  ; ***************************************************************************************
   11 D1:B19F -  -  -  -  ; ***************************************************************************************
   12 D1:B19F -  -  -  -  
   13 D1:B19F -  -  -  -  ; ***************************************************************************************
   14 D1:B19F -  -  -  -  ;
   15 D1:B19F -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B19F -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B19F -  -  -  -  ;
   18 D1:B19F -  -  -  -  ; ***************************************************************************************
   19 D1:B19F -  -  -  -  
   20 D1:B19F -  -  -  -  VariableCreate:		
   21 D1:B19F -  -  -  -  		;
   22 D1:B19F -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B19F -  -  -  -  		;
   24 D1:B19F 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B1A3 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B1A4 E5 -  -  -  		push 	hl 							; save count.
   27 D1:B1A5 CD F6 B0 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B1A9 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B1AA -  -  -  -  		;
   30 D1:B1AA -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B1AA -  -  -  -  		;
   32 D1:B1AA E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B1AB -  -  -  -  _VCClear:
   34 D1:B1AB 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B1AD 23 -  -  -  		inc 	hl
   36 D1:B1AE 0B -  -  -  		dec 	bc
   37 D1:B1AF 78 -  -  -  		ld		a,b
   38 D1:B1B0 B1 -  -  -  		or 		c
   39 D1:B1B1 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B1B3 E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B1B4 -  -  -  -  		;
   42 D1:B1B4 -  -  -  -  		;		Now start to create the data.
   43 D1:B1B4 -  -  -  -  		;
   44 D1:B1B4 E5 -  -  -  		push 	hl 							; save start
   45 D1:B1B5 -  -  -  -  		;
   46 D1:B1B5 -  -  -  -  		;		Write hash to +0
   47 D1:B1B5 -  -  -  -  		;
   48 D1:B1B5 3A 09 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B1B9 77 -  -  -  		ld 		(hl),a
   50 D1:B1BA 23 -  -  -  		inc 	hl
   51 D1:B1BB -  -  -  -  		;
   52 D1:B1BB -  -  -  -  		;		Write list head to +1
   53 D1:B1BB -  -  -  -  		;
   54 D1:B1BB E5 -  -  -  		push 	hl 							; save write position
   55 D1:B1BC 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B1C0 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B1C2 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B1C3 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B1C4 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B1CA -  -  -  -  		;
   61 D1:B1CA -  -  -  -  		;		Write variable name to +5
   62 D1:B1CA -  -  -  -  		;
   63 D1:B1CA ED 5B 05 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B1CF ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B1D5 -  -  -  -  		;
   66 D1:B1D5 D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B1D6 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B1DA ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B1E0 -  -  -  -  		;
   70 D1:B1E0 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B1E1 C9 -  -  -  		ret
   72 D1:B1E2 -  -  -  -  
   73 D1:B1E2 -  -  -  -  ; ***************************************************************************************
   74 D1:B1E2 -  -  -  -  ;
   75 D1:B1E2 -  -  -  -  ;									Changes and Updates
   76 D1:B1E2 -  -  -  -  ;
   77 D1:B1E2 -  -  -  -  ; ***************************************************************************************
   78 D1:B1E2 -  -  -  -  ;
   79 D1:B1E2 -  -  -  -  ;		Date			Notes
   80 D1:B1E2 -  -  -  -  ;		==== 			=====
   81 D1:B1E2 -  -  -  -  ;
   82 D1:B1E2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B1E2 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B1E2 -  -  -  -  ; ***************************************************************************************
    2 D1:B1E2 -  -  -  -  ; ***************************************************************************************
    3 D1:B1E2 -  -  -  -  ;
    4 D1:B1E2 -  -  -  -  ;		Name : 		find.asm
    5 D1:B1E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1E2 -  -  -  -  ;		Reviewed :	No
    8 D1:B1E2 -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B1E2 -  -  -  -  ;
   10 D1:B1E2 -  -  -  -  ; ***************************************************************************************
   11 D1:B1E2 -  -  -  -  ; ***************************************************************************************
   12 D1:B1E2 -  -  -  -  
   13 D1:B1E2 -  -  -  -  ; ***************************************************************************************
   14 D1:B1E2 -  -  -  -  ;
   15 D1:B1E2 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B1E2 -  -  -  -  ; 		variable information at (IX)
   17 D1:B1E2 -  -  -  -  ;
   18 D1:B1E2 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B1E2 -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B1E2 -  -  -  -  ;
   21 D1:B1E2 -  -  -  -  ; ***************************************************************************************
   22 D1:B1E2 -  -  -  -  
   23 D1:B1E2 -  -  -  -  FindVariable:
   24 D1:B1E2 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B1E5 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B1E7 D2 47 AC D1 		jp 		nc,SyntaxError 		
   27 D1:B1EB -  -  -  -  
   28 D1:B1EB DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B1EE FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B1F0 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B1F2 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B1F4 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B1F6 -  -  -  -  		;
   34 D1:B1F6 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B1F6 -  -  -  -  		;
   36 D1:B1F6 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B1FA DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B1FD 87 -  -  -  		add 	a,a 						; x4
   39 D1:B1FE 87 -  -  -  		add 	a,a
   40 D1:B1FF B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B200 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B201 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B203 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B205 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B207 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B208 C9 -  -  -  		ret
   47 D1:B209 -  -  -  -  		;
   48 D1:B209 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B209 -  -  -  -  		;
   50 D1:B209 -  -  -  -  _FVNotSimple:
   51 D1:B209 CD 6F B2 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B20D CD AB B2 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B211 38 14 -  -  		jr 		c,_FVNotFound  				
   54 D1:B213 -  -  -  -  		;
   55 D1:B213 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B213 -  -  -  -  		;
   57 D1:B213 -  -  -  -  _FVExitReference:		
   58 D1:B213 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B217 19 -  -  -  		add 	hl,de 
   60 D1:B218 -  -  -  -  		;
   61 D1:B218 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 D1:B218 -  -  -  -  		;
   63 D1:B218 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 D1:B21B FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 D1:B21D CC 46 B2 D1 		call 	z,ArrayLookup 				; array access required.
   66 D1:B221 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 D1:B223 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 D1:B225 AF -  -  -  		xor 	a 							; clear carry and return
   69 D1:B226 C9 -  -  -  		ret
   70 D1:B227 -  -  -  -  		;
   71 D1:B227 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 D1:B227 -  -  -  -  		;
   73 D1:B227 -  -  -  -  _FVNotFound:		
   74 D1:B227 3A 01 A9 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 D1:B22B B7 -  -  -  		or 		a
   76 D1:B22C 28 11 -  -  		jr 		z,_FVFail
   77 D1:B22E DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 D1:B231 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 D1:B233 28 0A -  -  		jr 		z,_FVFail
   80 D1:B235 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 D1:B239 CD 9F B1 D1 		call 	VariableCreate 				; create a new variable.
   82 D1:B23D 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 D1:B23F -  -  -  -  
   84 D1:B23F -  -  -  -  _FVFail:
   85 D1:B23F DD 2A 05 A9 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 D1:B244 37 -  -  -  		scf
   87 D1:B245 C9 -  -  -  		ret
   88 D1:B246 -  -  -  -  
   89 D1:B246 -  -  -  -  ; ***************************************************************************************
   90 D1:B246 -  -  -  -  ;
   91 D1:B246 -  -  -  -  ;									 Array lookup
   92 D1:B246 -  -  -  -  ;
   93 D1:B246 -  -  -  -  ; ***************************************************************************************
   94 D1:B246 -  -  -  -  
   95 D1:B246 -  -  -  -  ArrayLookup:
   96 D1:B246 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 D1:B247 CD EA AD D1 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 D1:B24B D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 D1:B24C 7C -  -  -  		ld 		a,h
  100 D1:B24D B5 -  -  -  		or 		l
  101 D1:B24E D9 -  -  -  		exx
  102 D1:B24F 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 D1:B251 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 D1:B255 54 -  -  -  		ld 		d,h
  105 D1:B256 5D -  -  -  		ld 		e,l
  106 D1:B257 E1 -  -  -  		pop 	hl 							; get the array base back
  107 D1:B258 E5 -  -  -  		push 	hl
  108 D1:B259 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 D1:B25B AF -  -  -  		xor  	a							; subtract maximum from index
  110 D1:B25C ED 52 -  -  		sbc 	hl,de
  111 D1:B25E DA 69 B2 D1 		jp 		c,_ALBadValue 				; if max < index then error
  112 D1:B262 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 D1:B263 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 D1:B264 29 -  -  -  		add 	hl,hl 						; x 4
  115 D1:B265 29 -  -  -  		add 	hl,hl
  116 D1:B266 D1 -  -  -  		pop 	de 							; get array base back
  117 D1:B267 19 -  -  -  		add 	hl,de 						; add offset to it
  118 D1:B268 C9 -  -  -  		ret
  119 D1:B269 -  -  -  -  
  120 D1:B269 -  -  -  -  _ALBadValue:
  121 D1:B269 3E 07 C3 DD 
              AB D1 -  -  		ERR_INDEX
  122 D1:B26F -  -  -  -  		
  123 D1:B26F -  -  -  -  ; ***************************************************************************************
  124 D1:B26F -  -  -  -  ;
  125 D1:B26F -  -  -  -  ;									Changes and Updates
  126 D1:B26F -  -  -  -  ;
  127 D1:B26F -  -  -  -  ; ***************************************************************************************
  128 D1:B26F -  -  -  -  ;
  129 D1:B26F -  -  -  -  ;		Date			Notes
  130 D1:B26F -  -  -  -  ;		==== 			=====
  131 D1:B26F -  -  -  -  ;
  132 D1:B26F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B26F -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B26F -  -  -  -  ; ***************************************************************************************
    2 D1:B26F -  -  -  -  ; ***************************************************************************************
    3 D1:B26F -  -  -  -  ;
    4 D1:B26F -  -  -  -  ;		Name : 		info.asm
    5 D1:B26F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B26F -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B26F -  -  -  -  ;		Reviewed :	No
    8 D1:B26F -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B26F -  -  -  -  ;
   10 D1:B26F -  -  -  -  ; ***************************************************************************************
   11 D1:B26F -  -  -  -  ; ***************************************************************************************
   12 D1:B26F -  -  -  -  
   13 D1:B26F -  -  -  -  ; ***************************************************************************************
   14 D1:B26F -  -  -  -  ;
   15 D1:B26F -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B26F -  -  -  -  ; 		after the identifier.
   17 D1:B26F -  -  -  -  ;
   18 D1:B26F -  -  -  -  ; ***************************************************************************************
   19 D1:B26F -  -  -  -  
   20 D1:B26F -  -  -  -  VariableInformation:
   21 D1:B26F DD 22 05 A9 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B274 -  -  -  -  		;
   23 D1:B274 -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B274 -  -  -  -  		;
   25 D1:B274 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B276 -  -  -  -  _VICalculateHash:
   27 D1:B276 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B279 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B27B 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B27D 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B27E 07 -  -  -  		rlca
   32 D1:B27F 07 -  -  -  		rlca
   33 D1:B280 80 -  -  -  		add 	a,b
   34 D1:B281 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B282 DD 23 -  -  		inc 	ix 							; next character
   36 D1:B284 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B286 -  -  -  -  		;
   38 D1:B286 -  -  -  -  _VIHashDone:
   39 D1:B286 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B287 -  -  -  -  		;
   41 D1:B287 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B287 -  -  -  -  		;
   43 D1:B287 32 09 A9 D1 		ld 		(VarHash),a
   44 D1:B28B -  -  -  -  		;
   45 D1:B28B -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B28B -  -  -  -  		;		
   47 D1:B28B E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B28D 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B291 6F -  -  -  		ld 		l,a
   50 D1:B292 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B293 29 -  -  -  		add 	hl,hl
   52 D1:B294 -  -  -  -  		;
   53 D1:B294 ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B299 19 -  -  -  		add 	hl,de
   55 D1:B29A -  -  -  -  		;
   56 D1:B29A DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B29D FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B29F 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B2A1 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B2A5 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B2A6 -  -  -  -  _VINotArray:
   62 D1:B2A6 22 0B A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B2AA C9 -  -  -  		ret
   64 D1:B2AB -  -  -  -  
   65 D1:B2AB -  -  -  -  ; ***************************************************************************************
   66 D1:B2AB -  -  -  -  ;
   67 D1:B2AB -  -  -  -  ;									Changes and Updates
   68 D1:B2AB -  -  -  -  ;
   69 D1:B2AB -  -  -  -  ; ***************************************************************************************
   70 D1:B2AB -  -  -  -  ;
   71 D1:B2AB -  -  -  -  ;		Date			Notes
   72 D1:B2AB -  -  -  -  ;		==== 			=====
   73 D1:B2AB -  -  -  -  ;
   74 D1:B2AB -  -  -  -  ; ***************************************************************************************
   75 D1:B2AB -  -  -  -  
Listing for file "_build.asm"
   57 D1:B2AB -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B2AB -  -  -  -  ; ***************************************************************************************
    2 D1:B2AB -  -  -  -  ; ***************************************************************************************
    3 D1:B2AB -  -  -  -  ;
    4 D1:B2AB -  -  -  -  ;		Name : 		search.asm
    5 D1:B2AB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2AB -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B2AB -  -  -  -  ;		Reviewed :	No
    8 D1:B2AB -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B2AB -  -  -  -  ;
   10 D1:B2AB -  -  -  -  ; ***************************************************************************************
   11 D1:B2AB -  -  -  -  ; ***************************************************************************************
   12 D1:B2AB -  -  -  -  
   13 D1:B2AB -  -  -  -  ; ***************************************************************************************
   14 D1:B2AB -  -  -  -  ;
   15 D1:B2AB -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B2AB -  -  -  -  ;		CS if failed.
   17 D1:B2AB -  -  -  -  ;
   18 D1:B2AB -  -  -  -  ; ***************************************************************************************
   19 D1:B2AB -  -  -  -  
   20 D1:B2AB -  -  -  -  VariableSearchList:
   21 D1:B2AB 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B2AF -  -  -  -  		;
   23 D1:B2AF -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B2AF -  -  -  -  		;		the address of the hash record
   25 D1:B2AF -  -  -  -  		;
   26 D1:B2AF -  -  -  -  _VSLLoop:
   27 D1:B2AF ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B2B1 -  -  -  -  		;
   29 D1:B2B1 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B2B2 AF -  -  -  		xor 	a
   31 D1:B2B3 ED 6A -  -  		adc 	hl,hl
   32 D1:B2B5 E1 -  -  -  		pop 	hl
   33 D1:B2B6 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B2B8 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B2B9 C8 -  -  -  		ret 	z
   36 D1:B2BA -  -  -  -  _VSLRecord:
   37 D1:B2BA -  -  -  -  		;
   38 D1:B2BA -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B2BA -  -  -  -  		;
   40 D1:B2BA 3A 09 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B2BE BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B2BF 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B2C0 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B2C2 -  -  -  -  		;
   45 D1:B2C2 -  -  -  -  		;		Now check the name
   46 D1:B2C2 -  -  -  -  		;
   47 D1:B2C2 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B2C3 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B2C4 23 -  -  -  		inc 	hl
   50 D1:B2C5 23 -  -  -  		inc 	hl
   51 D1:B2C6 23 -  -  -  		inc 	hl
   52 D1:B2C7 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B2C9 ED 5B 05 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B2CE -  -  -  -  		;
   55 D1:B2CE -  -  -  -  		;		Check individual characters
   56 D1:B2CE -  -  -  -  		;
   57 D1:B2CE -  -  -  -  _VSLCharacter:
   58 D1:B2CE 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B2CF FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B2D1 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B2D3 BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B2D4 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B2D5 13 -  -  -  		inc 	de
   64 D1:B2D6 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B2D8 -  -  -  -  		;
   66 D1:B2D8 -  -  -  -  _VSLFailed:
   67 D1:B2D8 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B2D9 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B2DB -  -  -  -  		;
   70 D1:B2DB -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B2DB -  -  -  -  		;		
   72 D1:B2DB -  -  -  -  _VSLEndIdentifier:
   73 D1:B2DB 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B2DC FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B2DE 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B2E0 -  -  -  -  		;
   77 D1:B2E0 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B2E1 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B2E2 AF -  -  -  		xor 	a 							; clear carry
   80 D1:B2E3 C9 -  -  -  		ret
   81 D1:B2E4 -  -  -  -  
   82 D1:B2E4 -  -  -  -  ; ***************************************************************************************
   83 D1:B2E4 -  -  -  -  ;
   84 D1:B2E4 -  -  -  -  ;									Changes and Updates
   85 D1:B2E4 -  -  -  -  ;
   86 D1:B2E4 -  -  -  -  ; ***************************************************************************************
   87 D1:B2E4 -  -  -  -  ;
   88 D1:B2E4 -  -  -  -  ;		Date			Notes
   89 D1:B2E4 -  -  -  -  ;		==== 			=====
   90 D1:B2E4 -  -  -  -  ;
   91 D1:B2E4 -  -  -  -  ; ***************************************************************************************
   92 D1:B2E4 -  -  -  -  		
Listing for file "_build.asm"
   58 D1:B2E4 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B2E4 -  -  -  -  ;
    2 D1:B2E4 -  -  -  -  ;	This file is automatically generated.
    3 D1:B2E4 -  -  -  -  ;
    4 D1:B2E4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 D1:B300 -  -  -  -  PrecedenceTable:
    6 D1:B300 06 -  -  -  	.db	6	; $0083 !
    7 D1:B301 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B302 05 -  -  -  	.db	5	; $0085 *
    9 D1:B303 05 -  -  -  	.db	5	; $0086 /
   10 D1:B304 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B305 05 -  -  -  	.db	5	; $0088 div
   12 D1:B306 04 -  -  -  	.db	4	; $0089 +
   13 D1:B307 04 -  -  -  	.db	4	; $008a -
   14 D1:B308 03 -  -  -  	.db	3	; $008b >=
   15 D1:B309 03 -  -  -  	.db	3	; $008c <=
   16 D1:B30A 03 -  -  -  	.db	3	; $008d >
   17 D1:B30B 03 -  -  -  	.db	3	; $008e <
   18 D1:B30C 03 -  -  -  	.db	3	; $008f =
   19 D1:B30D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B30E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B30F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B310 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B311 -  -  -  -  
Listing for file "_build.asm"
   59 D1:B311 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B311 -  -  -  -  ;
    2 D1:B311 -  -  -  -  ;	This is automatically generated.
    3 D1:B311 -  -  -  -  ;
    4 D1:B311 -  -  -  -  ErrorIDTable:
    5 D1:B311 59 B3 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B315 5F B3 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B319 70 B3 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B31D 7E B3 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B321 88 B3 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B325 92 B3 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B329 AC B3 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B32D BD B3 D1 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 D1:B331 CD B3 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   14 D1:B335 DB B3 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   15 D1:B339 E9 B3 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   16 D1:B33D F3 B3 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   17 D1:B341 08 B4 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   18 D1:B345 1E B4 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   19 D1:B349 2C B4 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   20 D1:B34D 31 B4 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   21 D1:B351 3E B4 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   22 D1:B355 4F B4 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   23 D1:B359 -  -  -  -  
   24 D1:B359 -  -  -  -  ErrText_warmstart:
   25 D1:B359 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   26 D1:B35F -  -  -  -  ErrText_assert:
   27 D1:B35F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   28 D1:B370 -  -  -  -  ErrText_badtype:
   29 D1:B370 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   30 D1:B37E -  -  -  -  ErrText_badvalue:
   31 D1:B37E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   32 D1:B388 -  -  -  -  ErrText_dim:
   33 D1:B388 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   34 D1:B392 -  -  -  -  ErrText_disabled:
   35 D1:B392 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   36 D1:B3AC -  -  -  -  ErrText_divzero:
   37 D1:B3AC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   38 D1:B3BD -  -  -  -  ErrText_index:
   39 D1:B3BD 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   40 D1:B3CD -  -  -  -  ErrText_memory:
   41 D1:B3CD 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   42 D1:B3DB -  -  -  -  ErrText_nocomma:
   43 D1:B3DB 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   44 D1:B3E9 -  -  -  -  ErrText_nodollar:
   45 D1:B3E9 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   46 D1:B3F3 -  -  -  -  ErrText_nolbracket:
   47 D1:B3F3 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   48 D1:B408 -  -  -  -  ErrText_norbracket:
   49 D1:B408 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   50 D1:B41E -  -  -  -  ErrText_notref:
   51 D1:B41E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   52 D1:B42C -  -  -  -  ErrText_stop:
   53 D1:B42C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   54 D1:B431 -  -  -  -  ErrText_syntax:
   55 D1:B431 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   56 D1:B43E -  -  -  -  ErrText_todo:
   57 D1:B43E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   58 D1:B44F -  -  -  -  ErrText_unknownvar:
   59 D1:B44F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   60 D1:B460 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B460 -  -  -  -  ;
    2 D1:B460 -  -  -  -  ;	Vectors for set 0
    3 D1:B460 -  -  -  -  ;
    4 D1:B460 -  -  -  -  VectorsSet0:
    5 D1:B460 2D AA D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B464 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B468 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B46C BD AC D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B470 C6 AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B474 69 AC D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B478 77 AC D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B47C 85 AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B480 77 AC D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B484 4D AC D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B488 5B AC D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B48C 24 AD D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B490 1A AD D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B494 06 AD D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B498 FC AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B49C F2 AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B4A0 10 AD D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B4A4 93 AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B4A8 A1 AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B4AC AF AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B4B0 96 B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B4B4 8E B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B4B8 B0 AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B4BC DD AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B4C0 9F AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B4C4 75 AF D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B4C8 74 B0 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B4CC A5 B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B4D0 8B AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B4D4 82 AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B4D8 BB AF D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B4DC D0 AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B4E0 CD B0 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B4E4 D4 B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B4E8 E1 B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B4EC E4 AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B4F0 E8 AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B4F4 72 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B4F8 72 A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B4FC 76 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B500 72 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B504 03 AB D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B508 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa [
   48 D1:B50C A5 A8 D1 00 	addr(Unimplemented)              ; $00ab ]
   49 D1:B510 72 A9 D1 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 D1:B514 A5 A8 D1 00 	addr(Unimplemented)              ; $00ad repeat
   51 D1:B518 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae until
   52 D1:B51C A5 A8 D1 00 	addr(Unimplemented)              ; $00af if
   53 D1:B520 72 A9 D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:B524 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 else
   55 D1:B528 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 for
   56 D1:B52C 72 A9 D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:B530 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 step
   58 D1:B534 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 next
   59 D1:B538 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 def
   60 D1:B53C A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 proc
   61 D1:B540 A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 endproc
   62 D1:B544 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 gosub
   63 D1:B548 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba return
   64 D1:B54C A5 A8 D1 00 	addr(Unimplemented)              ; $00bb goto
   65 D1:B550 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc local
   66 D1:B554 77 A9 D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:B558 03 AB D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:B55C 44 AA D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:B560 A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 vdu
   70 D1:B564 98 AA D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:B568 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:B56C A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:B570 A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 list
   74 D1:B574 78 B1 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:B578 20 AB D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:B57C A5 A8 D1 00 	addr(Unimplemented)              ; $00c7 read
   77 D1:B580 A5 A8 D1 00 	addr(Unimplemented)              ; $00c8 data
   78 D1:B584 A5 A8 D1 00 	addr(Unimplemented)              ; $00c9 restore
   79 D1:B588 61 A9 D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:B58C 18 B1 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:B590 27 AA D1 00 	addr(Command_END)                ; $00cc end
   82 D1:B594 93 AB D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:B598 -  -  -  -  ;
   84 D1:B598 -  -  -  -  ;	Vectors for set 1
   85 D1:B598 -  -  -  -  ;
   86 D1:B598 -  -  -  -  VectorsSet1:
   87 D1:B598 -  -  -  -  ;
   88 D1:B598 -  -  -  -  ;	Vectors for set 2
   89 D1:B598 -  -  -  -  ;
   90 D1:B598 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   61 D1:B598 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B598 -  -  -  -  ; ***************************************************************************************
    2 D1:B598 -  -  -  -  ; ***************************************************************************************
    3 D1:B598 -  -  -  -  ;
    4 D1:B598 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B598 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B598 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B598 -  -  -  -  ;		Reviewed :	No
    8 D1:B598 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B598 -  -  -  -  ;
   10 D1:B598 -  -  -  -  ; ***************************************************************************************
   11 D1:B598 -  -  -  -  ; ***************************************************************************************
   12 D1:B598 -  -  -  -  
   13 D1:B598 -  -  -  -  ; ***************************************************************************************
   14 D1:B598 -  -  -  -  ;
   15 D1:B598 -  -  -  -  ;								Unsigned integer divide
   16 D1:B598 -  -  -  -  ;
   17 D1:B598 -  -  -  -  ; ***************************************************************************************
   18 D1:B598 -  -  -  -  
   19 D1:B598 -  -  -  -  Int32UDivide:
   20 D1:B598 37 -  -  -  		scf
   21 D1:B599 C3 DD B5 D1 		jp 		_I32UnsignedDivide		
   22 D1:B59D -  -  -  -  
   23 D1:B59D -  -  -  -  ; ***************************************************************************************
   24 D1:B59D -  -  -  -  ;
   25 D1:B59D -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B59D -  -  -  -  ;
   27 D1:B59D -  -  -  -  ; ***************************************************************************************
   28 D1:B59D -  -  -  -  
   29 D1:B59D -  -  -  -  Int32SDivide:
   30 D1:B59D 37 -  -  -  		scf
   31 D1:B59E 18 01 -  -  		jr 		_I32SDivide
   32 D1:B5A0 -  -  -  -  Int32Modulus:
   33 D1:B5A0 AF -  -  -  		xor 	a
   34 D1:B5A1 -  -  -  -  _I32SDivide:
   35 D1:B5A1 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B5A2 F5 -  -  -  		push 	af
   37 D1:B5A3 08 -  -  -  		ex 		af,af'
   38 D1:B5A4 -  -  -  -  
   39 D1:B5A4 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B5A5 D9 -  -  -  		exx
   41 D1:B5A6 D5 -  -  -  		push 	de
   42 D1:B5A7 D9 -  -  -  		exx
   43 D1:B5A8 -  -  -  -  
   44 D1:B5A8 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B5A9 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B5AA CD CA B5 D1 		call 	_I32CheckHLSignSwap
   47 D1:B5AE CD CA B5 D1 		call 	_I32CheckHLSignSwap
   48 D1:B5B2 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B5B3 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B5B4 F5 -  -  -  		push 	af
   51 D1:B5B5 CD DD B5 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B5B9 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B5BA 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B5BC 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B5BD CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B5BF C4 40 B7 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B5C3 -  -  -  -  _I32SDExit:
   58 D1:B5C3 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B5C4 D1 -  -  -  		pop 	de
   60 D1:B5C5 D9 -  -  -  		exx
   61 D1:B5C6 D1 -  -  -  		pop 	de
   62 D1:B5C7 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B5C8 08 -  -  -  		ex 		af,af'
   64 D1:B5C9 C9 -  -  -  		ret
   65 D1:B5CA -  -  -  -  
   66 D1:B5CA -  -  -  -  
   67 D1:B5CA -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B5CA D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B5CB CB 7C -  -  		bit 	7,h
   70 D1:B5CD D9 -  -  -  		exx
   71 D1:B5CE 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B5D0 -  -  -  -  		;
   73 D1:B5D0 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B5D2 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B5D3 CD 40 B7 D1 		call 	Int32Negate 				
   76 D1:B5D7 F1 -  -  -  		pop 	af
   77 D1:B5D8 -  -  -  -  _I32CHSPositive:
   78 D1:B5D8 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B5D9 EB -  -  -  		ex 		de,hl
   80 D1:B5DA D9 -  -  -  		exx		
   81 D1:B5DB EB -  -  -  		ex 		de,hl
   82 D1:B5DC C9 -  -  -  		ret
   83 D1:B5DD -  -  -  -  
   84 D1:B5DD -  -  -  -  ; ***************************************************************************************
   85 D1:B5DD -  -  -  -  ;
   86 D1:B5DD -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B5DD -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B5DD -  -  -  -  ;
   89 D1:B5DD -  -  -  -  ; ***************************************************************************************
   90 D1:B5DD -  -  -  -  
   91 D1:B5DD -  -  -  -  _I32UnsignedDivide:
   92 D1:B5DD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B5DE D5 -  -  -  		push 	de
   94 D1:B5DF D9 -  -  -  		exx
   95 D1:B5E0 C5 -  -  -  		push 	bc
   96 D1:B5E1 D5 -  -  -  		push 	de 							
   97 D1:B5E2 D9 -  -  -  		exx
   98 D1:B5E3 -  -  -  -  
   99 D1:B5E3 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B5E4 -  -  -  -  
  101 D1:B5E4 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B5E5 B3 -  -  -  		or 		e
  103 D1:B5E6 D9 -  -  -  		exx
  104 D1:B5E7 B2 -  -  -  		or 		d
  105 D1:B5E8 B3 -  -  -  		or 		e
  106 D1:B5E9 D9 -  -  -  		exx
  107 D1:B5EA CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B5EE -  -  -  -  
  109 D1:B5EE -  -  -  -  
  110 D1:B5EE 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B5EF 4D -  -  -  		ld		c,l
  112 D1:B5F0 21 00 00 00 		ld 		hl,$0000
  113 D1:B5F4 D9 -  -  -  		exx
  114 D1:B5F5 44 -  -  -  		ld 		b,h
  115 D1:B5F6 4D -  -  -  		ld		c,l
  116 D1:B5F7 21 00 00 00 		ld 		hl,$0000
  117 D1:B5FB D9 -  -  -  		exx
  118 D1:B5FC -  -  -  -  
  119 D1:B5FC 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B5FE -  -  -  -  _I32DivideLoop:
  121 D1:B5FE F5 -  -  -  		push 	af
  122 D1:B5FF -  -  -  -  
  123 D1:B5FF CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B601 CB 10 -  -  		rl 		b
  125 D1:B603 D9 -  -  -  		exx
  126 D1:B604 CB 11 -  -  		rl 		c
  127 D1:B606 CB 10 -  -  		rl 		b
  128 D1:B608 D9 -  -  -  		exx
  129 D1:B609 CB 15 -  -  		rl 		l
  130 D1:B60B CB 14 -  -  		rl 		h
  131 D1:B60D D9 -  -  -  		exx
  132 D1:B60E CB 15 -  -  		rl 		l
  133 D1:B610 CB 14 -  -  		rl 		h
  134 D1:B612 D9 -  -  -  		exx
  135 D1:B613 -  -  -  -  
  136 D1:B613 CD DE B6 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B617 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B619 -  -  -  -  
  139 D1:B619 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B61A 18 04 -  -  		jr 		_I32Next
  141 D1:B61C -  -  -  -  
  142 D1:B61C -  -  -  -  _I32Borrow:
  143 D1:B61C CD D6 B6 D1 		call 	Int32Add 					; A = A + M
  144 D1:B620 -  -  -  -  _I32Next:
  145 D1:B620 F1 -  -  -  		pop 	af
  146 D1:B621 3D -  -  -  		dec 	a
  147 D1:B622 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B624 -  -  -  -  
  149 D1:B624 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B625 -  -  -  -  
  151 D1:B625 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B626 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B628 -  -  -  -  
  154 D1:B628 60 -  -  -  		ld  	h,b
  155 D1:B629 69 -  -  -  		ld 		l,c
  156 D1:B62A D9 -  -  -  		exx
  157 D1:B62B 60 -  -  -  		ld  	h,b
  158 D1:B62C 69 -  -  -  		ld 		l,c
  159 D1:B62D D9 -  -  -  		exx
  160 D1:B62E -  -  -  -  _I32Modulus1:		
  161 D1:B62E D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B62F D1 -  -  -  		pop 	de
  163 D1:B630 C1 -  -  -  		pop 	bc
  164 D1:B631 D9 -  -  -  		exx
  165 D1:B632 D1 -  -  -  		pop 	de
  166 D1:B633 C1 -  -  -  		pop 	bc
  167 D1:B634 C9 -  -  -  		ret
  168 D1:B635 -  -  -  -  
  169 D1:B635 -  -  -  -  ; ***************************************************************************************
  170 D1:B635 -  -  -  -  ;
  171 D1:B635 -  -  -  -  ;									Changes and Updates
  172 D1:B635 -  -  -  -  ;
  173 D1:B635 -  -  -  -  ; ***************************************************************************************
  174 D1:B635 -  -  -  -  ;
  175 D1:B635 -  -  -  -  ;		Date			Notes
  176 D1:B635 -  -  -  -  ;		==== 			=====
  177 D1:B635 -  -  -  -  ;
  178 D1:B635 -  -  -  -  ; ***************************************************************************************
  179 D1:B635 -  -  -  -  		
Listing for file "_build.asm"
   62 D1:B635 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B635 -  -  -  -  ; ***************************************************************************************
    2 D1:B635 -  -  -  -  ; ***************************************************************************************
    3 D1:B635 -  -  -  -  ;
    4 D1:B635 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B635 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B635 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B635 -  -  -  -  ;		Reviewed :	No
    8 D1:B635 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B635 -  -  -  -  ;
   10 D1:B635 -  -  -  -  ; ***************************************************************************************
   11 D1:B635 -  -  -  -  ; ***************************************************************************************
   12 D1:B635 -  -  -  -  
   13 D1:B635 -  -  -  -  ; ***************************************************************************************
   14 D1:B635 -  -  -  -  ;
   15 D1:B635 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B635 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B635 -  -  -  -  ;
   18 D1:B635 -  -  -  -  ; ***************************************************************************************
   19 D1:B635 -  -  -  -  
   20 D1:B635 -  -  -  -  Int32FromString:
   21 D1:B635 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B636 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B637 D5 -  -  -  		push 	de
   24 D1:B638 D9 -  -  -  		exx
   25 D1:B639 D5 -  -  -  		push 	de
   26 D1:B63A -  -  -  -  
   27 D1:B63A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B63E 11 00 00 00 		ld 		de,$0000
   29 D1:B642 D9 -  -  -  		exx
   30 D1:B643 21 00 00 00 		ld 		hl,$0000
   31 D1:B647 11 00 00 00 		ld 		de,$0000
   32 D1:B64B D9 -  -  -  		exx
   33 D1:B64C -  -  -  -  
   34 D1:B64C 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B64D CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B64F 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B651 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B653 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B654 -  -  -  -  		;
   40 D1:B654 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B655 F5 -  -  -  		push 	af
   42 D1:B656 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B658 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B659 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B65B 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B65C 18 01 -  -  		jr 		_I32FSMain
   47 D1:B65E -  -  -  -  _I32FSNotSigned:		
   48 D1:B65E E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B65F -  -  -  -  		;
   50 D1:B65F -  -  -  -  		; 		Main conversion loop.
   51 D1:B65F -  -  -  -  		; 		
   52 D1:B65F -  -  -  -  _I32FSMain:		
   53 D1:B65F 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B660 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B662 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B664 D6 20 -  -  		sub 	32
   57 D1:B666 -  -  -  -  _I32FSNotLower:
   58 D1:B666 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B668 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B66A FE 3A -  -  		cp 		'9'+1
   61 D1:B66C 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B66E FE 41 -  -  		cp 		'A'
   63 D1:B670 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B672 FE 47 -  -  		cp 		'F'+1
   65 D1:B674 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B676 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B678 -  -  -  -  _I32FSOkay:
   68 D1:B678 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B67A BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B67B 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B67D 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B67E D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B67F F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B680 CD 9D B6 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B684 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B685 5F -  -  -  		ld 		e,a
   77 D1:B686 CD D6 B6 D1 		call 	Int32Add 					; and add it.
   78 D1:B68A D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B68B 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B68D -  -  -  -  
   81 D1:B68D -  -  -  -  _I32FSExit:
   82 D1:B68D F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B68E FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B690 CC 40 B7 D1 		call 	z,Int32Negate
   85 D1:B694 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B695 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B696 D9 -  -  -  		exx
   88 D1:B697 D1 -  -  -  		pop 	de
   89 D1:B698 D9 -  -  -  		exx
   90 D1:B699 C1 -  -  -  		pop 	bc
   91 D1:B69A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B69C C9 -  -  -  		ret				
   93 D1:B69D -  -  -  -  
   94 D1:B69D -  -  -  -  ; ***************************************************************************************
   95 D1:B69D -  -  -  -  ;
   96 D1:B69D -  -  -  -  ;									Changes and Updates
   97 D1:B69D -  -  -  -  ;
   98 D1:B69D -  -  -  -  ; ***************************************************************************************
   99 D1:B69D -  -  -  -  ;
  100 D1:B69D -  -  -  -  ;		Date			Notes
  101 D1:B69D -  -  -  -  ;		==== 			=====
  102 D1:B69D -  -  -  -  ;
  103 D1:B69D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B69D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B69D -  -  -  -  ; ***************************************************************************************
    2 D1:B69D -  -  -  -  ; ***************************************************************************************
    3 D1:B69D -  -  -  -  ;
    4 D1:B69D -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B69D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B69D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B69D -  -  -  -  ;		Reviewed :	No
    8 D1:B69D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B69D -  -  -  -  ;
   10 D1:B69D -  -  -  -  ; ***************************************************************************************
   11 D1:B69D -  -  -  -  ; ***************************************************************************************
   12 D1:B69D -  -  -  -  
   13 D1:B69D -  -  -  -  Int32Multiply:
   14 D1:B69D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B69E D5 -  -  -  		push 	de
   16 D1:B69F 44 -  -  -  		ld 		b,h
   17 D1:B6A0 4D -  -  -  		ld 		c,l
   18 D1:B6A1 21 00 00 00 		ld 		hl,$0000
   19 D1:B6A5 -  -  -  -  
   20 D1:B6A5 D9 -  -  -  		exx
   21 D1:B6A6 C5 -  -  -  		push 	bc
   22 D1:B6A7 D5 -  -  -  		push 	de
   23 D1:B6A8 44 -  -  -  		ld 		b,h
   24 D1:B6A9 4D -  -  -  		ld 		c,l
   25 D1:B6AA 21 00 00 00 		ld 		hl,$0000		
   26 D1:B6AE D9 -  -  -  		exx
   27 D1:B6AF -  -  -  -  
   28 D1:B6AF -  -  -  -  _I32MultiplyLoop:
   29 D1:B6AF CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B6B1 C4 D6 B6 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B6B5 -  -  -  -  		;
   32 D1:B6B5 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B6B6 CB 38 -  -  		srl 	b
   34 D1:B6B8 CB 19 -  -  		rr 		c
   35 D1:B6BA D9 -  -  -  		exx
   36 D1:B6BB CB 18 -  -  		rr 		b
   37 D1:B6BD CB 19 -  -  		rr 		c
   38 D1:B6BF -  -  -  -  		;
   39 D1:B6BF CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B6C1 CB 12 -  -  		rl 		d
   41 D1:B6C3 D9 -  -  -  		exx
   42 D1:B6C4 CB 13 -  -  		rl 		e
   43 D1:B6C6 CB 12 -  -  		rl 		d
   44 D1:B6C8 -  -  -  -  
   45 D1:B6C8 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B6C9 B1 -  -  -  		or 		c
   47 D1:B6CA D9 -  -  -  		exx
   48 D1:B6CB B0 -  -  -  		or 		b
   49 D1:B6CC B1 -  -  -  		or 		c
   50 D1:B6CD 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B6CF -  -  -  -  
   52 D1:B6CF D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B6D0 D1 -  -  -  		pop 	de
   54 D1:B6D1 C1 -  -  -  		pop 	bc
   55 D1:B6D2 D9 -  -  -  		exx
   56 D1:B6D3 D1 -  -  -  		pop 	de
   57 D1:B6D4 C1 -  -  -  		pop 	bc
   58 D1:B6D5 C9 -  -  -  		ret
   59 D1:B6D6 -  -  -  -  
   60 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   61 D1:B6D6 -  -  -  -  ;
   62 D1:B6D6 -  -  -  -  ;									Changes and Updates
   63 D1:B6D6 -  -  -  -  ;
   64 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   65 D1:B6D6 -  -  -  -  ;
   66 D1:B6D6 -  -  -  -  ;		Date			Notes
   67 D1:B6D6 -  -  -  -  ;		==== 			=====
   68 D1:B6D6 -  -  -  -  ;
   69 D1:B6D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 D1:B6D6 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B6D6 -  -  -  -  ; ***************************************************************************************
    2 D1:B6D6 -  -  -  -  ; ***************************************************************************************
    3 D1:B6D6 -  -  -  -  ;
    4 D1:B6D6 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B6D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6D6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6D6 -  -  -  -  ;		Reviewed :	No
    8 D1:B6D6 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B6D6 -  -  -  -  ;
   10 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   11 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   12 D1:B6D6 -  -  -  -  
   13 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   14 D1:B6D6 -  -  -  -  ;
   15 D1:B6D6 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B6D6 -  -  -  -  ;
   17 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   18 D1:B6D6 -  -  -  -  
   19 D1:B6D6 -  -  -  -  Int32Add:
   20 D1:B6D6 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B6D8 D9 -  -  -  		exx
   22 D1:B6D9 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B6DC D9 -  -  -  		exx
   24 D1:B6DD C9 -  -  -  		ret
   25 D1:B6DE -  -  -  -  
   26 D1:B6DE -  -  -  -  ; ***************************************************************************************
   27 D1:B6DE -  -  -  -  ;
   28 D1:B6DE -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B6DE -  -  -  -  ;
   30 D1:B6DE -  -  -  -  ; ***************************************************************************************
   31 D1:B6DE -  -  -  -  
   32 D1:B6DE -  -  -  -  Int32Subtract:
   33 D1:B6DE AF -  -  -  		xor 	a 							; clear carry
   34 D1:B6DF 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B6E2 D9 -  -  -  		exx
   36 D1:B6E3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B6E6 D9 -  -  -  		exx
   38 D1:B6E7 C9 -  -  -  		ret
   39 D1:B6E8 -  -  -  -  
   40 D1:B6E8 -  -  -  -  ; ***************************************************************************************
   41 D1:B6E8 -  -  -  -  ;
   42 D1:B6E8 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B6E8 -  -  -  -  ;
   44 D1:B6E8 -  -  -  -  ; ***************************************************************************************
   45 D1:B6E8 -  -  -  -  
   46 D1:B6E8 -  -  -  -  Int32And:
   47 D1:B6E8 D9 -  -  -  		exx
   48 D1:B6E9 CD EE B6 D1 		call 	_I32AndHLDE
   49 D1:B6ED D9 -  -  -  		exx
   50 D1:B6EE -  -  -  -  _I32AndHLDE:		
   51 D1:B6EE 7C -  -  -  		ld 		a,h
   52 D1:B6EF A2 -  -  -  		and 	d
   53 D1:B6F0 67 -  -  -  		ld 		h,a
   54 D1:B6F1 7D -  -  -  		ld 		a,l
   55 D1:B6F2 A3 -  -  -  		and 	e
   56 D1:B6F3 6F -  -  -  		ld 		l,a
   57 D1:B6F4 C9 -  -  -  		ret
   58 D1:B6F5 -  -  -  -  
   59 D1:B6F5 -  -  -  -  ; ***************************************************************************************
   60 D1:B6F5 -  -  -  -  ;
   61 D1:B6F5 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B6F5 -  -  -  -  ;
   63 D1:B6F5 -  -  -  -  ; ***************************************************************************************
   64 D1:B6F5 -  -  -  -  
   65 D1:B6F5 -  -  -  -  Int32Or:
   66 D1:B6F5 D9 -  -  -  		exx
   67 D1:B6F6 CD FB B6 D1 		call 	_I32OrHLDE
   68 D1:B6FA D9 -  -  -  		exx
   69 D1:B6FB -  -  -  -  _I32OrHLDE:		
   70 D1:B6FB 7C -  -  -  		ld 		a,h
   71 D1:B6FC B2 -  -  -  		or 		d
   72 D1:B6FD 67 -  -  -  		ld 		h,a
   73 D1:B6FE 7D -  -  -  		ld 		a,l
   74 D1:B6FF B3 -  -  -  		or 		e
   75 D1:B700 6F -  -  -  		ld 		l,a
   76 D1:B701 C9 -  -  -  		ret
   77 D1:B702 -  -  -  -  
   78 D1:B702 -  -  -  -  ; ***************************************************************************************
   79 D1:B702 -  -  -  -  ;
   80 D1:B702 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B702 -  -  -  -  ;
   82 D1:B702 -  -  -  -  ; ***************************************************************************************
   83 D1:B702 -  -  -  -  
   84 D1:B702 -  -  -  -  Int32Xor:
   85 D1:B702 D9 -  -  -  		exx
   86 D1:B703 CD 08 B7 D1 		call 	_I32XorHLDE
   87 D1:B707 D9 -  -  -  		exx
   88 D1:B708 -  -  -  -  _I32XorHLDE:		
   89 D1:B708 7C -  -  -  		ld 		a,h
   90 D1:B709 AA -  -  -  		xor 	d
   91 D1:B70A 67 -  -  -  		ld 		h,a
   92 D1:B70B 7D -  -  -  		ld 		a,l
   93 D1:B70C AB -  -  -  		xor 	e
   94 D1:B70D 6F -  -  -  		ld 		l,a
   95 D1:B70E C9 -  -  -  		ret
   96 D1:B70F -  -  -  -  
   97 D1:B70F -  -  -  -  ; ***************************************************************************************
   98 D1:B70F -  -  -  -  ;
   99 D1:B70F -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B70F -  -  -  -  ;
  101 D1:B70F -  -  -  -  ; ***************************************************************************************
  102 D1:B70F -  -  -  -  
  103 D1:B70F -  -  -  -  Int32Zero:
  104 D1:B70F D9 -  -  -  		exx
  105 D1:B710 7D -  -  -  		ld 		a,l
  106 D1:B711 B4 -  -  -  		or 		h
  107 D1:B712 D9 -  -  -  		exx
  108 D1:B713 B5 -  -  -  		or 		l
  109 D1:B714 B4 -  -  -  		or 		h
  110 D1:B715 C9 -  -  -  		ret
  111 D1:B716 -  -  -  -  
  112 D1:B716 -  -  -  -  ; ***************************************************************************************
  113 D1:B716 -  -  -  -  ;
  114 D1:B716 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B716 -  -  -  -  ;
  116 D1:B716 -  -  -  -  ; ***************************************************************************************
  117 D1:B716 -  -  -  -  
  118 D1:B716 -  -  -  -  Int32Compare:
  119 D1:B716 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B717 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B718 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B71B D9 -  -  -  		exx
  123 D1:B71C E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B71D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B720 -  -  -  -  		;
  126 D1:B720 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B721 E2 29 B7 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B725 78 -  -  -  		ld 		a,b
  129 D1:B726 EE 80 -  -  		xor 	$80
  130 D1:B728 47 -  -  -  		ld 		b,a
  131 D1:B729 -  -  -  -  _I32CNoOverflow:
  132 D1:B729 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B72A B5 -  -  -  		or 		l
  134 D1:B72B D9 -  -  -  		exx 
  135 D1:B72C B4 -  -  -  		or 		h
  136 D1:B72D B5 -  -  -  		or 		l
  137 D1:B72E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B730 -  -  -  -  		;
  139 D1:B730 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B731 CB 78 -  -  		bit 	7,b
  141 D1:B733 D9 -  -  -  		exx
  142 D1:B734 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B736 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B738 3E FF -  -  		ld 		a,$FF
  145 D1:B73A -  -  -  -  _I32NotPos:
  146 D1:B73A D9 -  -  -  		exx
  147 D1:B73B E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B73C D9 -  -  -  		exx
  149 D1:B73D E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B73E B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B73F C9 -  -  -  		ret
  152 D1:B740 -  -  -  -  
  153 D1:B740 -  -  -  -  ; ***************************************************************************************
  154 D1:B740 -  -  -  -  ;
  155 D1:B740 -  -  -  -  ;										Negate HL'HL
  156 D1:B740 -  -  -  -  ;
  157 D1:B740 -  -  -  -  ; ***************************************************************************************
  158 D1:B740 -  -  -  -  
  159 D1:B740 -  -  -  -  Int32Negate:
  160 D1:B740 AF -  -  -  		xor 	a
  161 D1:B741 CD 4C B7 D1 		call 	_I32NSubtract
  162 D1:B745 D9 -  -  -  		exx
  163 D1:B746 CD 4C B7 D1 		call 	_I32NSubtract
  164 D1:B74A D9 -  -  -  		exx
  165 D1:B74B C9 -  -  -  		ret
  166 D1:B74C -  -  -  -  _I32NSubtract:
  167 D1:B74C D5 -  -  -  		push 	de
  168 D1:B74D EB -  -  -  		ex 		de,hl
  169 D1:B74E 21 00 00 00 		ld 		hl,$0000
  170 D1:B752 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B755 D1 -  -  -  		pop 	de
  172 D1:B756 C9 -  -  -  		ret
  173 D1:B757 -  -  -  -  		
  174 D1:B757 -  -  -  -  ; ***************************************************************************************
  175 D1:B757 -  -  -  -  ;
  176 D1:B757 -  -  -  -  ;									Changes and Updates
  177 D1:B757 -  -  -  -  ;
  178 D1:B757 -  -  -  -  ; ***************************************************************************************
  179 D1:B757 -  -  -  -  ;
  180 D1:B757 -  -  -  -  ;		Date			Notes
  181 D1:B757 -  -  -  -  ;		==== 			=====
  182 D1:B757 -  -  -  -  ;
  183 D1:B757 -  -  -  -  ; ***************************************************************************************
  184 D1:B757 -  -  -  -  		
Listing for file "_build.asm"
   65 D1:B757 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B757 -  -  -  -  ; ***************************************************************************************
    2 D1:B757 -  -  -  -  ; ***************************************************************************************
    3 D1:B757 -  -  -  -  ;
    4 D1:B757 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B757 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B757 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B757 -  -  -  -  ;		Reviewed :	No
    8 D1:B757 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B757 -  -  -  -  ;
   10 D1:B757 -  -  -  -  ; ***************************************************************************************
   11 D1:B757 -  -  -  -  ;
   12 D1:B757 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B757 -  -  -  -  ;
   14 D1:B757 -  -  -  -  ; ***************************************************************************************
   15 D1:B757 -  -  -  -  
   16 D1:B757 -  -  -  -  Int32ToString:
   17 D1:B757 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B758 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B759 E5 -  -  -  		push 	hl
   20 D1:B75A 11 00 00 00 		ld	 	de,$0000
   21 D1:B75E D9 -  -  -  		exx
   22 D1:B75F D5 -  -  -  		push 	de
   23 D1:B760 E5 -  -  -  		push 	hl
   24 D1:B761 11 00 00 00 		ld 		de,$000
   25 D1:B765 D9 -  -  -  		exx
   26 D1:B766 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B767 -  -  -  -  		;
   28 D1:B767 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B769 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B76B ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B76D 5F -  -  -  		ld 		e,a
   32 D1:B76E -  -  -  -  		;
   33 D1:B76E D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B76F CB 7C -  -  		bit 	7,h
   35 D1:B771 D9 -  -  -  		exx
   36 D1:B772 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B774 -  -  -  -  		;
   38 D1:B774 CD 40 B7 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B778 -  -  -  -  		;
   40 D1:B778 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B77A 02 -  -  -  		ld 		(bc),a
   42 D1:B77B 03 -  -  -  		inc 	bc
   43 D1:B77C -  -  -  -  _I32TSNotNegative:	
   44 D1:B77C CD 8B B7 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B780 -  -  -  -  _I32TSExit:
   46 D1:B780 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B782 02 -  -  -  		ld 		(bc),a 
   48 D1:B783 -  -  -  -  
   49 D1:B783 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B784 E1 -  -  -  		pop 	hl
   51 D1:B785 D1 -  -  -  		pop 	de
   52 D1:B786 D9 -  -  -  		exx
   53 D1:B787 E1 -  -  -  		pop 	hl
   54 D1:B788 D1 -  -  -  		pop 	de
   55 D1:B789 C1 -  -  -  		pop 	bc
   56 D1:B78A C9 -  -  -  		ret
   57 D1:B78B -  -  -  -  
   58 D1:B78B -  -  -  -  _I32RecursiveConvert:
   59 D1:B78B CD 98 B5 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B78F F5 -  -  -  		push 	af 							; save remainder
   61 D1:B790 CD 0F B7 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B794 C4 8B B7 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B798 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B799 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B79B 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B79D C6 07 -  -  		add 	a,7
   67 D1:B79F -  -  -  -  _I32NotHex:
   68 D1:B79F C6 30 -  -  		add 	a,48
   69 D1:B7A1 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B7A2 03 -  -  -  		inc 	bc
   71 D1:B7A3 C9 -  -  -  		ret		
   72 D1:B7A4 -  -  -  -  
   73 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   74 D1:B7A4 -  -  -  -  ;
   75 D1:B7A4 -  -  -  -  ;									Changes and Updates
   76 D1:B7A4 -  -  -  -  ;
   77 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   78 D1:B7A4 -  -  -  -  ;
   79 D1:B7A4 -  -  -  -  ;		Date			Notes
   80 D1:B7A4 -  -  -  -  ;		==== 			=====
   81 D1:B7A4 -  -  -  -  ;
   82 D1:B7A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B7A4 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B7A4 -  -  -  -  ; ***************************************************************************************
    2 D1:B7A4 -  -  -  -  ; ***************************************************************************************
    3 D1:B7A4 -  -  -  -  ;
    4 D1:B7A4 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B7A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B7A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B7A4 -  -  -  -  ;		Reviewed :	No
    8 D1:B7A4 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B7A4 -  -  -  -  ;
   10 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   11 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   12 D1:B7A4 -  -  -  -  
   13 D1:B7A4 -  -  -  -  #ifdef AQUARIUS
   14 D1:B7A4             
   15 D1:B7A4             ; ***************************************************************************************
   16 D1:B7A4             ;
   17 D1:B7A4             ;								Initialise system stuff
   18 D1:B7A4             ;
   19 D1:B7A4             ; ***************************************************************************************
   20 D1:B7A4             
   21 D1:B7A4             SYSInitialise:
   22 D1:B7A4             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B7A4             	call 	SYSPrintChar
   24 D1:B7A4             	ret
   25 D1:B7A4             
   26 D1:B7A4             ; ***************************************************************************************
   27 D1:B7A4             ;
   28 D1:B7A4             ;								Terminate system stuff
   29 D1:B7A4             ;
   30 D1:B7A4             ; ***************************************************************************************
   31 D1:B7A4             
   32 D1:B7A4             SYSTerminate:
   33 D1:B7A4             	jr 		SYSTerminate
   34 D1:B7A4             
   35 D1:B7A4             ; ***************************************************************************************
   36 D1:B7A4             ;
   37 D1:B7A4             ;								Print A character
   38 D1:B7A4             ;
   39 D1:B7A4             ; ***************************************************************************************
   40 D1:B7A4             
   41 D1:B7A4             SYSPrintChar:
   42 D1:B7A4             	push 	af 									; we stack everything including alt registers
   43 D1:B7A4             	push 	bc
   44 D1:B7A4             	push 	de
   45 D1:B7A4             	push 	hl
   46 D1:B7A4             	push 	ix
   47 D1:B7A4             	push 	iy
   48 D1:B7A4             	exx
   49 D1:B7A4             	push 	bc
   50 D1:B7A4             	push 	de
   51 D1:B7A4             	push 	hl
   52 D1:B7A4             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B7A4             	pop 	hl
   54 D1:B7A4             	pop 	de
   55 D1:B7A4             	pop 	bc
   56 D1:B7A4             	exx
   57 D1:B7A4             	pop 	iy
   58 D1:B7A4             	pop 	ix
   59 D1:B7A4             	pop 	hl
   60 D1:B7A4             	pop 	de
   61 D1:B7A4             	pop 	bc
   62 D1:B7A4             	pop 	af
   63 D1:B7A4             	ret		
   64 D1:B7A4             
   65 D1:B7A4             ; ***************************************************************************************
   66 D1:B7A4             ;
   67 D1:B7A4             ;									Print Newline
   68 D1:B7A4             ;
   69 D1:B7A4             ; ***************************************************************************************
   70 D1:B7A4             
   71 D1:B7A4             SYSPrintCRLF:
   72 D1:B7A4             	push 	af
   73 D1:B7A4             	ld 		a,13
   74 D1:B7A4             	call 	SYSPrintChar
   75 D1:B7A4             	ld 		a,10
   76 D1:B7A4             	call 	SYSPrintChar
   77 D1:B7A4             	pop 	af
   78 D1:B7A4             	ret
   79 D1:B7A4             
   80 D1:B7A4             ; ***************************************************************************************
   81 D1:B7A4             ;
   82 D1:B7A4             ;									Get time into HL'HL
   83 D1:B7A4             ;
   84 D1:B7A4             ; ***************************************************************************************
   85 D1:B7A4             
   86 D1:B7A4             SYSGetTimer:
   87 D1:B7A4              	in 		a,($00)
   88 D1:B7A4              	ld 		l,a
   89 D1:B7A4              	in 		a,($01)
   90 D1:B7A4              	ld 		h,a
   91 D1:B7A4              	exx
   92 D1:B7A4              	in 		a,($02)
   93 D1:B7A4              	ld 		l,a
   94 D1:B7A4              	in 		a,($03)
   95 D1:B7A4              	ld 		h,a
   96 D1:B7A4              	exx
   97 D1:B7A4             	ret 	
   98 D1:B7A4             	
   99 D1:B7A4             #endif
  100 D1:B7A4 -  -  -  -  
  101 D1:B7A4 -  -  -  -  ; ***************************************************************************************
  102 D1:B7A4 -  -  -  -  ;
  103 D1:B7A4 -  -  -  -  ;									Changes and Updates
  104 D1:B7A4 -  -  -  -  ;
  105 D1:B7A4 -  -  -  -  ; ***************************************************************************************
  106 D1:B7A4 -  -  -  -  ;
  107 D1:B7A4 -  -  -  -  ;		Date			Notes
  108 D1:B7A4 -  -  -  -  ;		==== 			=====
  109 D1:B7A4 -  -  -  -  ;
  110 D1:B7A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B7A4 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B7A4 -  -  -  -  ; ***************************************************************************************
    2 D1:B7A4 -  -  -  -  ; ***************************************************************************************
    3 D1:B7A4 -  -  -  -  ;
    4 D1:B7A4 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B7A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B7A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B7A4 -  -  -  -  ;		Reviewed :	No
    8 D1:B7A4 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B7A4 -  -  -  -  ;
   10 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   11 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   12 D1:B7A4 -  -  -  -  
   13 D1:B7A4 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B7A4             
   15 D1:B7A4             ; ***************************************************************************************
   16 D1:B7A4             ;
   17 D1:B7A4             ;								Initialise system stuff
   18 D1:B7A4             ;
   19 D1:B7A4             ; ***************************************************************************************
   20 D1:B7A4             
   21 D1:B7A4             SYSInitialise:
   22 D1:B7A4             	ret
   23 D1:B7A4             
   24 D1:B7A4             ; ***************************************************************************************
   25 D1:B7A4             ;
   26 D1:B7A4             ;								Terminate system stuff
   27 D1:B7A4             ;
   28 D1:B7A4             ; ***************************************************************************************
   29 D1:B7A4             
   30 D1:B7A4             SYSTerminate:
   31 D1:B7A4             	ret
   32 D1:B7A4             
   33 D1:B7A4             ; ***************************************************************************************
   34 D1:B7A4             ;
   35 D1:B7A4             ;								Print A character
   36 D1:B7A4             ;
   37 D1:B7A4             ; ***************************************************************************************
   38 D1:B7A4             
   39 D1:B7A4             SYSPrintChar:
   40 D1:B7A4             	ret		
   41 D1:B7A4             
   42 D1:B7A4             ; ***************************************************************************************
   43 D1:B7A4             ;
   44 D1:B7A4             ;									Print Newline
   45 D1:B7A4             ;
   46 D1:B7A4             ; ***************************************************************************************
   47 D1:B7A4             
   48 D1:B7A4             SYSPrintCRLF:
   49 D1:B7A4             	ret
   50 D1:B7A4             
   51 D1:B7A4             ; ***************************************************************************************
   52 D1:B7A4             ;
   53 D1:B7A4             ;									Get time into HL'HL
   54 D1:B7A4             ;
   55 D1:B7A4             ; ***************************************************************************************
   56 D1:B7A4             
   57 D1:B7A4             SYSGetTimer:
   58 D1:B7A4             	ret
   59 D1:B7A4             
   60 D1:B7A4             #endif
   61 D1:B7A4 -  -  -  -  
   62 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   63 D1:B7A4 -  -  -  -  ;
   64 D1:B7A4 -  -  -  -  ;									Changes and Updates
   65 D1:B7A4 -  -  -  -  ;
   66 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   67 D1:B7A4 -  -  -  -  ;
   68 D1:B7A4 -  -  -  -  ;		Date			Notes
   69 D1:B7A4 -  -  -  -  ;		==== 			=====
   70 D1:B7A4 -  -  -  -  ;
   71 D1:B7A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B7A4 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B7A4 -  -  -  -  ; ***************************************************************************************
    2 D1:B7A4 -  -  -  -  ; ***************************************************************************************
    3 D1:B7A4 -  -  -  -  ;
    4 D1:B7A4 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B7A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B7A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B7A4 -  -  -  -  ;		Reviewed :	No
    8 D1:B7A4 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B7A4 -  -  -  -  ;
   10 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   11 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   12 D1:B7A4 -  -  -  -  
   13 D1:B7A4 -  -  -  -  #ifdef TI84
   14 D1:B7A4 -  -  -  -  
   15 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   16 D1:B7A4 -  -  -  -  ;
   17 D1:B7A4 -  -  -  -  ;								Initialise system stuff
   18 D1:B7A4 -  -  -  -  ;
   19 D1:B7A4 -  -  -  -  ; ***************************************************************************************
   20 D1:B7A4 -  -  -  -  
   21 D1:B7A4 -  -  -  -  SYSInitialise:
   22 D1:B7A4 F3 -  -  -  	di
   23 D1:B7A5 ED 73 C2 B7 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B7AA FD 22 C6 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B7AF C9 -  -  -  	ret
   26 D1:B7B0 -  -  -  -  
   27 D1:B7B0 -  -  -  -  ; ***************************************************************************************
   28 D1:B7B0 -  -  -  -  ;
   29 D1:B7B0 -  -  -  -  ;								Terminate system stuff
   30 D1:B7B0 -  -  -  -  ;
   31 D1:B7B0 -  -  -  -  ; ***************************************************************************************
   32 D1:B7B0 -  -  -  -  
   33 D1:B7B0 -  -  -  -  SYSTerminate:
   34 D1:B7B0 ED 7B C2 B7 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B7B5 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B7B7 FD 2A C6 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B7BC FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B7C0 FB -  -  -  	ei
   39 D1:B7C1 C9 -  -  -  	ret 										; and exit.
   40 D1:B7C2 -  -  -  -  
   41 D1:B7C2 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B7C2 00 00 00 00 	.dw 	0,0
   43 D1:B7C6 -  -  -  -  _IYTemp84:
   44 D1:B7C6 00 00 00 00 	.dw 	0,0		
   45 D1:B7CA -  -  -  -  
   46 D1:B7CA -  -  -  -  ; ***************************************************************************************
   47 D1:B7CA -  -  -  -  ;
   48 D1:B7CA -  -  -  -  ;								Print A character
   49 D1:B7CA -  -  -  -  ;
   50 D1:B7CA -  -  -  -  ; ***************************************************************************************
   51 D1:B7CA -  -  -  -  
   52 D1:B7CA -  -  -  -  SYSPrintChar:
   53 D1:B7CA F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B7CB C5 -  -  -  	push 	bc
   55 D1:B7CC D5 -  -  -  	push 	de
   56 D1:B7CD E5 -  -  -  	push 	hl
   57 D1:B7CE DD E5 -  -  	push 	ix
   58 D1:B7D0 FD E5 -  -  	push 	iy
   59 D1:B7D2 D9 -  -  -  	exx
   60 D1:B7D3 C5 -  -  -  	push 	bc
   61 D1:B7D4 D5 -  -  -  	push 	de
   62 D1:B7D5 E5 -  -  -  	push 	hl
   63 D1:B7D6 -  -  -  -  
   64 D1:B7D6 FD 2A C6 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B7DB CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B7DF F3 -  -  -  	di
   67 D1:B7E0 FD 22 C6 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B7E5 -  -  -  -  
   69 D1:B7E5 E1 -  -  -  	pop 	hl
   70 D1:B7E6 D1 -  -  -  	pop 	de
   71 D1:B7E7 C1 -  -  -  	pop 	bc
   72 D1:B7E8 D9 -  -  -  	exx
   73 D1:B7E9 FD E1 -  -  	pop 	iy
   74 D1:B7EB DD E1 -  -  	pop 	ix
   75 D1:B7ED E1 -  -  -  	pop 	hl
   76 D1:B7EE D1 -  -  -  	pop 	de
   77 D1:B7EF C1 -  -  -  	pop 	bc
   78 D1:B7F0 F1 -  -  -  	pop 	af
   79 D1:B7F1 C9 -  -  -  	ret		
   80 D1:B7F2 -  -  -  -  
   81 D1:B7F2 -  -  -  -  ; ***************************************************************************************
   82 D1:B7F2 -  -  -  -  ;
   83 D1:B7F2 -  -  -  -  ;									Print Newline
   84 D1:B7F2 -  -  -  -  ;
   85 D1:B7F2 -  -  -  -  ; ***************************************************************************************
   86 D1:B7F2 -  -  -  -  
   87 D1:B7F2 -  -  -  -  SYSPrintCRLF:
   88 D1:B7F2 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B7F3 C5 -  -  -  	push 	bc
   90 D1:B7F4 D5 -  -  -  	push 	de
   91 D1:B7F5 E5 -  -  -  	push 	hl
   92 D1:B7F6 DD E5 -  -  	push 	ix
   93 D1:B7F8 FD E5 -  -  	push 	iy
   94 D1:B7FA D9 -  -  -  	exx
   95 D1:B7FB C5 -  -  -  	push 	bc
   96 D1:B7FC D5 -  -  -  	push 	de
   97 D1:B7FD E5 -  -  -  	push 	hl
   98 D1:B7FE -  -  -  -  
   99 D1:B7FE FD 2A C6 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B803 CD F0 07 02 	call 	_newline
  101 D1:B807 F3 -  -  -  	di
  102 D1:B808 FD 22 C6 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B80D -  -  -  -  
  104 D1:B80D E1 -  -  -  	pop 	hl
  105 D1:B80E D1 -  -  -  	pop 	de
  106 D1:B80F C1 -  -  -  	pop 	bc
  107 D1:B810 D9 -  -  -  	exx
  108 D1:B811 FD E1 -  -  	pop 	iy
  109 D1:B813 DD E1 -  -  	pop 	ix
  110 D1:B815 E1 -  -  -  	pop 	hl
  111 D1:B816 D1 -  -  -  	pop 	de
  112 D1:B817 C1 -  -  -  	pop 	bc
  113 D1:B818 F1 -  -  -  	pop 	af
  114 D1:B819 C9 -  -  -  	ret
  115 D1:B81A -  -  -  -  
  116 D1:B81A -  -  -  -  ; ***************************************************************************************
  117 D1:B81A -  -  -  -  ;
  118 D1:B81A -  -  -  -  ;									Get time into HL'HL
  119 D1:B81A -  -  -  -  ;
  120 D1:B81A -  -  -  -  ; ***************************************************************************************
  121 D1:B81A -  -  -  -  
  122 D1:B81A -  -  -  -  SYSGetTimer:
  123 D1:B81A 21 34 12 00 	ld 		hl,$1234
  124 D1:B81E D9 -  -  -  	exx
  125 D1:B81F 21 78 56 00 	ld 		hl,$5678
  126 D1:B823 D9 -  -  -  	exx
  127 D1:B824 C9 -  -  -  	ret
  128 D1:B825 -  -  -  -  
  129 D1:B825 -  -  -  -  #endif
  130 D1:B825 -  -  -  -  
  131 D1:B825 -  -  -  -  ; ***************************************************************************************
  132 D1:B825 -  -  -  -  ;
  133 D1:B825 -  -  -  -  ;									Changes and Updates
  134 D1:B825 -  -  -  -  ;
  135 D1:B825 -  -  -  -  ; ***************************************************************************************
  136 D1:B825 -  -  -  -  ;
  137 D1:B825 -  -  -  -  ;		Date			Notes
  138 D1:B825 -  -  -  -  ;		==== 			=====
  139 D1:B825 -  -  -  -  ;
  140 D1:B825 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:B825 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B825 -  -  -  -  ; ***************************************************************************************
    2 D1:B825 -  -  -  -  ; ***************************************************************************************
    3 D1:B825 -  -  -  -  ;
    4 D1:B825 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B825 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B825 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B825 -  -  -  -  ;		Reviewed :	No
    8 D1:B825 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B825 -  -  -  -  ;
   10 D1:B825 -  -  -  -  ; ***************************************************************************************
   11 D1:B825 -  -  -  -  ; ***************************************************************************************
   12 D1:B825 -  -  -  -  
   13 D1:B825 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 D1:BC00 -  -  -  -  TestInstance:
   15 D1:BC00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:BC00 -  -  -  -  ;
    2 D1:BC00 -  -  -  -  ;	This code automatically generated.
    3 D1:BC00 -  -  -  -  ;
    4 D1:BC00 -  -  -  -  TestProgram:
    5 D1:BC00 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 05 02 00 
              BE 80 0C 03 
              00 BD 13 04 
              12 13 95 44 
              A5 80 0D 04 
              00 13 04 12 
              13 95 40 A5 
              8F 6A 80 0E 
              05 00 13 04 
              12 13 95 41 
              A5 8F 46 67 
              80 0E 06 00 
              13 04 12 13 
              95 42 A5 8F 
              46 68 80 0E 
              07 00 13 04 
              12 13 95 43 
              A5 8F 46 6A 
              80 0E 08 00 
              13 04 12 13 
              95 44 A5 8F 
              46 6C 80 0C 
              09 00 C1 13 
              04 12 13 95 
              40 A5 80 0C 
              0A 00 C1 13 
              04 12 13 95 
              41 A5 80 0C 
              0B 00 C1 13 
              04 12 13 95 
              42 A5 80 0C 
              0C 00 C1 13 
              04 12 13 95 
              43 A5 80 0C 
              0D 00 C1 13 
              04 12 13 95 
              44 A5 80 00 	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$05,$02,$00,$be,$80,$0c,$03,$00,$bd,$13,$04,$12,$13,$95,$44,$a5,$80,$0d,$04,$00,$13,$04,$12,$13,$95,$40,$a5,$8f,$6a,$80,$0e,$05,$00,$13,$04,$12,$13,$95,$41,$a5,$8f,$46,$67,$80,$0e,$06,$00,$13,$04,$12,$13,$95,$42,$a5,$8f,$46,$68,$80,$0e,$07,$00,$13,$04,$12,$13,$95,$43,$a5,$8f,$46,$6a,$80,$0e,$08,$00,$13,$04,$12,$13,$95,$44,$a5,$8f,$46,$6c,$80,$0c,$09,$00,$c1,$13,$04,$12,$13,$95,$40,$a5,$80,$0c,$0a,$00,$c1,$13,$04,$12,$13,$95,$41,$a5,$80,$0c,$0b,$00,$c1,$13,$04,$12,$13,$95,$42,$a5,$80,$0c,$0c,$00,$c1,$13,$04,$12,$13,$95,$43,$a5,$80,$0c,$0d,$00,$c1,$13,$04,$12,$13,$95,$44,$a5,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:BCB4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:CCB4 -  -  -  -  EndTestInstance:
   18 D1:CCB4 -  -  -  -  		
   19 D1:CCB4 -  -  -  -  ; ***************************************************************************************
   20 D1:CCB4 -  -  -  -  ;
   21 D1:CCB4 -  -  -  -  ;									Changes and Updates
   22 D1:CCB4 -  -  -  -  ;
   23 D1:CCB4 -  -  -  -  ; ***************************************************************************************
   24 D1:CCB4 -  -  -  -  ;
   25 D1:CCB4 -  -  -  -  ;		Date			Notes
   26 D1:CCB4 -  -  -  -  ;		==== 			=====
   27 D1:CCB4 -  -  -  -  ;
   28 D1:CCB4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   70 D1:CCB4 -  -  -  -  FinalAddress:
