    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ac ; repeat
   54 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ad ; until
   55 00:0000 -  -  -  -  #define KWD_IF                              	$00ae ; if
   56 00:0000 -  -  -  -  #define KWD_THEN                            	$00af ; then
   57 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b0 ; else
   58 00:0000 -  -  -  -  #define KWD_FOR                             	$00b1 ; for
   59 00:0000 -  -  -  -  #define KWD_TO                              	$00b2 ; to
   60 00:0000 -  -  -  -  #define KWD_STEP                            	$00b3 ; step
   61 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b4 ; next
   62 00:0000 -  -  -  -  #define KWD_DEF                             	$00b5 ; def
   63 00:0000 -  -  -  -  #define KWD_PROC                            	$00b6 ; proc
   64 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b7 ; endproc
   65 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b8 ; gosub
   66 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b9 ; return
   67 00:0000 -  -  -  -  #define KWD_GOTO                            	$00ba ; goto
   68 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bb ; local
   69 00:0000 -  -  -  -  #define KWD_DIM                             	$00bc ; dim
   70 00:0000 -  -  -  -  #define KWD_REM                             	$00bd ; rem
   71 00:0000 -  -  -  -  #define KWD_LET                             	$00be ; let
   72 00:0000 -  -  -  -  #define KWD_VDU                             	$00bf ; vdu
   73 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c0 ; print
   74 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c1 ; load
   75 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c2 ; save
   76 00:0000 -  -  -  -  #define KWD_LIST                            	$00c3 ; list
   77 00:0000 -  -  -  -  #define KWD_NEW                             	$00c4 ; new
   78 00:0000 -  -  -  -  #define KWD_RUN                             	$00c5 ; run
   79 00:0000 -  -  -  -  #define KWD_READ                            	$00c6 ; read
   80 00:0000 -  -  -  -  #define KWD_DATA                            	$00c7 ; data
   81 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c8 ; restore
   82 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c9 ; assert
   83 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00ca ; clear
   84 00:0000 -  -  -  -  #define KWD_END                             	$00cb ; end
   85 00:0000 -  -  -  -  #define KWD_STOP                            	$00cc ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD EC B6 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 6C C8 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 10 B1 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 E1 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 D8 AA D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 12 B7 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD F8 B6 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 05 C3 95 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 06 C3 95 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  		
   78 D1:A8DD -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  
   81 D1:A8E1 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 D1:A8E1 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 D1:A8E7 -  -  -  -  
   84 D1:A8E7 -  -  -  -  AConvert: 									; used for address conversions.
   85 D1:A8E7 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8ED -  -  -  -  		
   87 D1:A8ED -  -  -  -  RandomSeed: 								; random number seeds.
   88 D1:A8ED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 D1:A8FD -  -  -  -  
   90 D1:A8FD -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 D1:A8FD 00 00 -  -  		.dw 	0
   92 D1:A8FF -  -  -  -  
   93 D1:A8FF -  -  -  -  ; ***************************************************************************************
   94 D1:A8FF -  -  -  -  ;
   95 D1:A8FF -  -  -  -  ;									Variable Information
   96 D1:A8FF -  -  -  -  ;
   97 D1:A8FF -  -  -  -  ; ***************************************************************************************
   98 D1:A8FF -  -  -  -  
   99 D1:A8FF -  -  -  -  VarNameStart: 								; first byte of name
  100 D1:A8FF 00 00 00 00 		.dw 	0,0
  101 D1:A903 -  -  -  -  VarHash: 									; name hash value
  102 D1:A903 00 00 -  -  		.dw 	0		
  103 D1:A905 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 D1:A905 00 00 00 00 		.dw 	0,0
  105 D1:A909 -  -  -  -  		
  106 D1:A909 -  -  -  -  ; ***************************************************************************************
  107 D1:A909 -  -  -  -  ;
  108 D1:A909 -  -  -  -  ;										  Buffers
  109 D1:A909 -  -  -  -  ;
  110 D1:A909 -  -  -  -  ; ***************************************************************************************
  111 D1:A909 -  -  -  -  
  112 D1:A909 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 D1:A909 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 D1:A919 -  -  -  -  
  115 D1:A919 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 D1:A919 00 00 -  -  		.dw 	0
  117 D1:A91B -  -  -  -  
  118 D1:A91B -  -  -  -  ConvertBuffer: 								; general usage
  119 D1:A91B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 D1:A95B -  -  -  -  
  121 D1:A95B -  -  -  -  ; ***************************************************************************************
  122 D1:A95B -  -  -  -  ;
  123 D1:A95B -  -  -  -  ;									Changes and Updates
  124 D1:A95B -  -  -  -  ;
  125 D1:A95B -  -  -  -  ; ***************************************************************************************
  126 D1:A95B -  -  -  -  ;
  127 D1:A95B -  -  -  -  ;		Date			Notes
  128 D1:A95B -  -  -  -  ;		==== 			=====
  129 D1:A95B -  -  -  -  ;
  130 D1:A95B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A95B -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A95B -  -  -  -  ; ***************************************************************************************
    2 D1:A95B -  -  -  -  ; ***************************************************************************************
    3 D1:A95B -  -  -  -  ;
    4 D1:A95B -  -  -  -  ;		Name : 		assert.asm
    5 D1:A95B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95B -  -  -  -  ;		Reviewed :	No
    8 D1:A95B -  -  -  -  ;		Purpose :	Assert command
    9 D1:A95B -  -  -  -  ;
   10 D1:A95B -  -  -  -  ; ***************************************************************************************
   11 D1:A95B -  -  -  -  ; ***************************************************************************************
   12 D1:A95B -  -  -  -  
   13 D1:A95B -  -  -  -  ; ***************************************************************************************
   14 D1:A95B -  -  -  -  ;
   15 D1:A95B -  -  -  -  ;									ASSERT command
   16 D1:A95B -  -  -  -  ;
   17 D1:A95B -  -  -  -  ; ***************************************************************************************
   18 D1:A95B -  -  -  -  
   19 D1:A95B -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A95B CD C8 AD D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A95F 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A965 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A966 3E 01 C3 95 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A96C -  -  -  -  
   25 D1:A96C -  -  -  -  ; ***************************************************************************************
   26 D1:A96C -  -  -  -  ;
   27 D1:A96C -  -  -  -  ;									Changes and Updates
   28 D1:A96C -  -  -  -  ;
   29 D1:A96C -  -  -  -  ; ***************************************************************************************
   30 D1:A96C -  -  -  -  ;
   31 D1:A96C -  -  -  -  ;		Date			Notes
   32 D1:A96C -  -  -  -  ;		==== 			=====
   33 D1:A96C -  -  -  -  ;
   34 D1:A96C -  -  -  -  ; ***************************************************************************************
   35 D1:A96C -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A96C -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A96C -  -  -  -  ; ***************************************************************************************
    2 D1:A96C -  -  -  -  ; ***************************************************************************************
    3 D1:A96C -  -  -  -  ;
    4 D1:A96C -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A96C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A96C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A96C -  -  -  -  ;		Reviewed :	No
    8 D1:A96C -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A96C -  -  -  -  ;
   10 D1:A96C -  -  -  -  ; ***************************************************************************************
   11 D1:A96C -  -  -  -  ; ***************************************************************************************
   12 D1:A96C -  -  -  -  
   13 D1:A96C -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A96C -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A96C -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A96C -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A96C -  -  -  -  BadCmd_To: 			;; [to]
   18 D1:A96C C3 FF AB D1 		jp 		SyntaxError
   19 D1:A970 -  -  -  -  
   20 D1:A970 -  -  -  -  ; ***************************************************************************************
   21 D1:A970 -  -  -  -  ;
   22 D1:A970 -  -  -  -  ;									Changes and Updates
   23 D1:A970 -  -  -  -  ;
   24 D1:A970 -  -  -  -  ; ***************************************************************************************
   25 D1:A970 -  -  -  -  ;
   26 D1:A970 -  -  -  -  ;		Date			Notes
   27 D1:A970 -  -  -  -  ;		==== 			=====
   28 D1:A970 -  -  -  -  ;
   29 D1:A970 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A970 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A970 -  -  -  -  ; ***************************************************************************************
    2 D1:A970 -  -  -  -  ; ***************************************************************************************
    3 D1:A970 -  -  -  -  ;
    4 D1:A970 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A970 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A970 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A970 -  -  -  -  ;		Reviewed :	No
    8 D1:A970 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A970 -  -  -  -  ;
   10 D1:A970 -  -  -  -  ; ***************************************************************************************
   11 D1:A970 -  -  -  -  ; ***************************************************************************************
   12 D1:A970 -  -  -  -  
   13 D1:A970 -  -  -  -  ; ***************************************************************************************
   14 D1:A970 -  -  -  -  ;
   15 D1:A970 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A970 -  -  -  -  ;
   17 D1:A970 -  -  -  -  ; ***************************************************************************************
   18 D1:A970 -  -  -  -  
   19 D1:A970 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A970 C9 -  -  -  		ret
   21 D1:A971 -  -  -  -  
   22 D1:A971 -  -  -  -  ; ***************************************************************************************
   23 D1:A971 -  -  -  -  ;
   24 D1:A971 -  -  -  -  ;									Changes and Updates
   25 D1:A971 -  -  -  -  ;
   26 D1:A971 -  -  -  -  ; ***************************************************************************************
   27 D1:A971 -  -  -  -  ;
   28 D1:A971 -  -  -  -  ;		Date			Notes
   29 D1:A971 -  -  -  -  ;		==== 			=====
   30 D1:A971 -  -  -  -  ;
   31 D1:A971 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A971 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A971 -  -  -  -  ; ***************************************************************************************
    2 D1:A971 -  -  -  -  ; ***************************************************************************************
    3 D1:A971 -  -  -  -  ;
    4 D1:A971 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A971 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A971 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A971 -  -  -  -  ;		Reviewed :	No
    8 D1:A971 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A971 -  -  -  -  ;
   10 D1:A971 -  -  -  -  ; ***************************************************************************************
   11 D1:A971 -  -  -  -  ; ***************************************************************************************
   12 D1:A971 -  -  -  -  
   13 D1:A971 -  -  -  -  ; ***************************************************************************************
   14 D1:A971 -  -  -  -  ;
   15 D1:A971 -  -  -  -  ;		DIM command
   16 D1:A971 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 D1:A971 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 D1:A971 -  -  -  -  ;								(can be comma chained)
   19 D1:A971 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 D1:A971 -  -  -  -  ;
   21 D1:A971 -  -  -  -  ; ***************************************************************************************
   22 D1:A971 -  -  -  -  
   23 D1:A971 -  -  -  -  Command_DIM: 	;; [dim]
   24 D1:A971 -  -  -  -  		;
   25 D1:A971 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   26 D1:A971 -  -  -  -  		; 		we cannot just get a l-value here.
   27 D1:A971 -  -  -  -  		;
   28 D1:A971 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   29 D1:A973 D1 -  -  -  		pop 	de
   30 D1:A974 -  -  -  -  		;
   31 D1:A974 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   32 D1:A977 FE 26 -  -  		cp 		IDENTIFIER_END 				
   33 D1:A979 D2 FF AB D1 		jp 		nc,SyntaxError 				; no identifier here
   34 D1:A97D -  -  -  -  _DISkip:
   35 D1:A97D DD 23 -  -  		inc 	ix 							; skip over identifier
   36 D1:A97F DD 7E 00 -  		ld 		a,(ix+0)
   37 D1:A982 FE 26 -  -  		cp 		IDENTIFIER_END
   38 D1:A984 38 F7 -  -  		jr 		c,_DISkip 					
   39 D1:A986 -  -  -  -  		;
   40 D1:A986 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   41 D1:A989 FE 95 -  -  		cp 		KWD_LPAREN
   42 D1:A98B F5 -  -  -  		push 	af 							; call whichever function depending.
   43 D1:A98C CC ED A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   44 D1:A990 F1 -  -  -  		pop 	af
   45 D1:A991 C4 A5 A9 D1 		call 	nz,DimensionAllocate
   46 D1:A995 -  -  -  -  		;
   47 D1:A995 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   48 D1:A998 FE A6 -  -  		cp 		KWD_COMMA
   49 D1:A99A C0 -  -  -  		ret 	nz
   50 D1:A99B DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   51 D1:A99D 18 D2 -  -  		jr 		Command_DIM
   52 D1:A99F -  -  -  -  
   53 D1:A99F -  -  -  -  _CDError:
   54 D1:A99F 3E 04 C3 95 
              AB D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   55 D1:A9A5 -  -  -  -  
   56 D1:A9A5 -  -  -  -  ; ***************************************************************************************
   57 D1:A9A5 -  -  -  -  ;
   58 D1:A9A5 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   59 D1:A9A5 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   60 D1:A9A5 -  -  -  -  ;
   61 D1:A9A5 -  -  -  -  ; ***************************************************************************************
   62 D1:A9A5 -  -  -  -  
   63 D1:A9A5 -  -  -  -  DimensionAllocate:
   64 D1:A9A5 D5 -  -  -  		push 	de 							; save start on stack
   65 D1:A9A6 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   66 D1:A9A8 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   67 D1:A9AA 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   68 D1:A9AE CD 7D B1 D1 		call 	FindVariable 				; find/create the variable appropriately.
   69 D1:A9B2 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   70 D1:A9B4 28 E9 -  -  		jr 		z,_CDError
   71 D1:A9B6 CB 41 -  -  		bit 	CIsString,c
   72 D1:A9B8 20 E5 -  -  		jr 		nz,_CDError
   73 D1:A9BA DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   74 D1:A9BC E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   75 D1:A9BD 3E AA -  -  		ld  	a,KWD_LSQPAREN
   76 D1:A9BF CD 89 AB D1 		call 	CheckNextA 					; check for [
   77 D1:A9C3 CD C8 AD D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   78 D1:A9C7 3E AB -  -  		ld  	a,KWD_RSQPAREN
   79 D1:A9C9 CD 89 AB D1 		call 	CheckNextA 					; check for ]
   80 D1:A9CD 23 -  -  -  		inc 	hl 							; increment HL,HL'
   81 D1:A9CE 7C -  -  -  		ld 		a,h
   82 D1:A9CF B5 -  -  -  		or 		l
   83 D1:A9D0 20 03 -  -  		jr 		nz,_DANoCarry
   84 D1:A9D2 D9 -  -  -  		exx
   85 D1:A9D3 23 -  -  -  		inc 	hl
   86 D1:A9D4 D9 -  -  -  		exx
   87 D1:A9D5 -  -  -  -  _DANoCarry:
   88 D1:A9D5 D9 -  -  -  		exx 								; check if HL' is zero
   89 D1:A9D6 7C -  -  -  		ld 		a,h
   90 D1:A9D7 B5 -  -  -  		or 		l
   91 D1:A9D8 D9 -  -  -  		exx
   92 D1:A9D9 20 C4 -  -  		jr 		nz,_CDError
   93 D1:A9DB CD 9F B0 D1 		call 	AllocateBytes 				; allocate that much memory.
   94 D1:A9DF EB -  -  -  		ex 		de,hl 						; put address into UDE
   95 D1:A9E0 E1 -  -  -  		pop 	hl 							; this is where it goes.
   96 D1:A9E1 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   97 D1:A9E7 AF -  -  -  		xor 	a 							; autocreate off
   98 D1:A9E8 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   99 D1:A9EC C9 -  -  -  		ret
  100 D1:A9ED -  -  -  -  
  101 D1:A9ED -  -  -  -  ; ***************************************************************************************
  102 D1:A9ED -  -  -  -  ;
  103 D1:A9ED -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  104 D1:A9ED -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  105 D1:A9ED -  -  -  -  ;
  106 D1:A9ED -  -  -  -  ; ***************************************************************************************
  107 D1:A9ED -  -  -  -  
  108 D1:A9ED -  -  -  -  DimensionArray:
  109 D1:A9ED 3E 0F C3 95 
              AB D1 -  -  		ERR_TODO
  110 D1:A9F3 -  -  -  -  
  111 D1:A9F3 -  -  -  -  
  112 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  113 D1:A9F3 -  -  -  -  ;
  114 D1:A9F3 -  -  -  -  ;									Changes and Updates
  115 D1:A9F3 -  -  -  -  ;
  116 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  117 D1:A9F3 -  -  -  -  ;
  118 D1:A9F3 -  -  -  -  ;		Date			Notes
  119 D1:A9F3 -  -  -  -  ;		==== 			=====
  120 D1:A9F3 -  -  -  -  ;
  121 D1:A9F3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A9F3 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A9F3 -  -  -  -  ; ***************************************************************************************
    2 D1:A9F3 -  -  -  -  ; ***************************************************************************************
    3 D1:A9F3 -  -  -  -  ;
    4 D1:A9F3 -  -  -  -  ;		Name : 		end.asm
    5 D1:A9F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9F3 -  -  -  -  ;		Reviewed :	No
    8 D1:A9F3 -  -  -  -  ;		Purpose :	End command
    9 D1:A9F3 -  -  -  -  ;
   10 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   11 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   12 D1:A9F3 -  -  -  -  
   13 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   14 D1:A9F3 -  -  -  -  ;
   15 D1:A9F3 -  -  -  -  ;										END command
   16 D1:A9F3 -  -  -  -  ;
   17 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   18 D1:A9F3 -  -  -  -  
   19 D1:A9F3 -  -  -  -  Command_END: 	;; [end]
   20 D1:A9F3 3E 00 C3 95 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A9F9 -  -  -  -  
   22 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   23 D1:A9F9 -  -  -  -  ;
   24 D1:A9F9 -  -  -  -  ;									Changes and Updates
   25 D1:A9F9 -  -  -  -  ;
   26 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   27 D1:A9F9 -  -  -  -  ;
   28 D1:A9F9 -  -  -  -  ;		Date			Notes
   29 D1:A9F9 -  -  -  -  ;		==== 			=====
   30 D1:A9F9 -  -  -  -  ;
   31 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   32 D1:A9F9 -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A9F9 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A9F9 -  -  -  -  ; ***************************************************************************************
    2 D1:A9F9 -  -  -  -  ; ***************************************************************************************
    3 D1:A9F9 -  -  -  -  ;
    4 D1:A9F9 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A9F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9F9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9F9 -  -  -  -  ;		Reviewed :	None
    8 D1:A9F9 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A9F9 -  -  -  -  ;
   10 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   11 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   12 D1:A9F9 -  -  -  -  
   13 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   14 D1:A9F9 -  -  -  -  ;
   15 D1:A9F9 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A9F9 -  -  -  -  ;
   17 D1:A9F9 -  -  -  -  ; ***************************************************************************************
   18 D1:A9F9 -  -  -  -  
   19 D1:A9F9 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A9F9 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A9FE 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA02 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA05 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA07 -  -  -  -  		;
   25 D1:AA07 ED 7B DD A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA0C C3 EB AA D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA10 -  -  -  -  
   28 D1:AA10 -  -  -  -  ; ***************************************************************************************
   29 D1:AA10 -  -  -  -  ;
   30 D1:AA10 -  -  -  -  ;									Changes and Updates
   31 D1:AA10 -  -  -  -  ;
   32 D1:AA10 -  -  -  -  ; ***************************************************************************************
   33 D1:AA10 -  -  -  -  ;
   34 D1:AA10 -  -  -  -  ;		Date			Notes
   35 D1:AA10 -  -  -  -  ;		==== 			=====
   36 D1:AA10 -  -  -  -  ;
   37 D1:AA10 -  -  -  -  ; ***************************************************************************************
   38 D1:AA10 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA10 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA10 -  -  -  -  ; ***************************************************************************************
    2 D1:AA10 -  -  -  -  ; ***************************************************************************************
    3 D1:AA10 -  -  -  -  ;
    4 D1:AA10 -  -  -  -  ;		Name : 		let.asm
    5 D1:AA10 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA10 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA10 -  -  -  -  ;		Reviewed :	No
    8 D1:AA10 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA10 -  -  -  -  ;
   10 D1:AA10 -  -  -  -  ; ***************************************************************************************
   11 D1:AA10 -  -  -  -  ; ***************************************************************************************
   12 D1:AA10 -  -  -  -  
   13 D1:AA10 -  -  -  -  ; ***************************************************************************************
   14 D1:AA10 -  -  -  -  ;
   15 D1:AA10 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA10 -  -  -  -  ;
   17 D1:AA10 -  -  -  -  ; ***************************************************************************************
   18 D1:AA10 -  -  -  -  
   19 D1:AA10 -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA10 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA13 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA15 28 2F -  -  		jr 		z,_CLString
   23 D1:AA17 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA19 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA1B 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA1D 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA21 -  -  -  -  _CLNoAuto:
   28 D1:AA21 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA23 CD 4A AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA27 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA29 CA FF AB D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA2D E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA2E C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA2F AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA30 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA34 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA36 CD 89 AB D1 		call 	CheckNextA
   38 D1:AA3A -  -  -  -  
   39 D1:AA3A CD C0 AD D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA3E -  -  -  -  
   41 D1:AA3E D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA3F 43 -  -  -  		ld 		b,e 						
   43 D1:AA40 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA41 -  -  -  -  		;
   45 D1:AA41 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA41 -  -  -  -  		;
   47 D1:AA41 CD 4E AA D1 		call 	WriteHLToDE
   48 D1:AA45 C9 -  -  -  		ret
   49 D1:AA46 -  -  -  -  		;
   50 D1:AA46 -  -  -  -  		; 		String assignment code.
   51 D1:AA46 -  -  -  -  		;
   52 D1:AA46 -  -  -  -  _CLString:
   53 D1:AA46 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:AA4E -  -  -  -  
   55 D1:AA4E -  -  -  -  ; ***************************************************************************************
   56 D1:AA4E -  -  -  -  ;
   57 D1:AA4E -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:AA4E -  -  -  -  ;
   59 D1:AA4E -  -  -  -  ; ***************************************************************************************
   60 D1:AA4E -  -  -  -  
   61 D1:AA4E -  -  -  -  WriteHLToDE:
   62 D1:AA4E CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:AA50 C2 F3 AB D1 		jp 		nz,TypeMismatch
   64 D1:AA54 -  -  -  -  		;
   65 D1:AA54 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:AA54 -  -  -  -  		;		
   67 D1:AA54 -  -  -  -  _WHDWriteNumber:
   68 D1:AA54 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:AA55 D9 -  -  -  		exx
   70 D1:AA56 EB -  -  -  		ex 		de,hl
   71 D1:AA57 D9 -  -  -  		exx
   72 D1:AA58 -  -  -  -  
   73 D1:AA58 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:AA59 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:AA5A 72 -  -  -  		ld 		(hl),d
   76 D1:AA5B 23 -  -  -  		inc 	hl
   77 D1:AA5C E5 -  -  -  		push 	hl
   78 D1:AA5D D9 -  -  -  		exx
   79 D1:AA5E E1 -  -  -  		pop 	hl
   80 D1:AA5F 73 -  -  -  		ld 		(hl),e
   81 D1:AA60 23 -  -  -  		inc 	hl
   82 D1:AA61 72 -  -  -  		ld 		(hl),d
   83 D1:AA62 D9 -  -  -  		exx
   84 D1:AA63 -  -  -  -  
   85 D1:AA63 C9 -  -  -  		ret
   86 D1:AA64 -  -  -  -  
   87 D1:AA64 -  -  -  -  ; ***************************************************************************************
   88 D1:AA64 -  -  -  -  ;
   89 D1:AA64 -  -  -  -  ;									Changes and Updates
   90 D1:AA64 -  -  -  -  ;
   91 D1:AA64 -  -  -  -  ; ***************************************************************************************
   92 D1:AA64 -  -  -  -  ;
   93 D1:AA64 -  -  -  -  ;		Date			Notes
   94 D1:AA64 -  -  -  -  ;		==== 			=====
   95 D1:AA64 -  -  -  -  ;
   96 D1:AA64 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:AA64 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AA64 -  -  -  -  ; ***************************************************************************************
    2 D1:AA64 -  -  -  -  ; ***************************************************************************************
    3 D1:AA64 -  -  -  -  ;
    4 D1:AA64 -  -  -  -  ;		Name : 		print.asm
    5 D1:AA64 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA64 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA64 -  -  -  -  ;		Reviewed :	No
    8 D1:AA64 -  -  -  -  ;		Purpose :	Print command
    9 D1:AA64 -  -  -  -  ;
   10 D1:AA64 -  -  -  -  ; ***************************************************************************************
   11 D1:AA64 -  -  -  -  ; ***************************************************************************************
   12 D1:AA64 -  -  -  -  
   13 D1:AA64 -  -  -  -  ; ***************************************************************************************
   14 D1:AA64 -  -  -  -  ;
   15 D1:AA64 -  -  -  -  ;										PRINT command
   16 D1:AA64 -  -  -  -  ;
   17 D1:AA64 -  -  -  -  ; ***************************************************************************************
   18 D1:AA64 -  -  -  -  
   19 D1:AA64 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AA64 -  -  -  -  		;
   21 D1:AA64 -  -  -  -  		;		Main loop
   22 D1:AA64 -  -  -  -  		;
   23 D1:AA64 -  -  -  -  _CPRLoop:
   24 D1:AA64 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:AA67 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:AA69 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:AA6B FE A7 -  -  		cp 		KWD_COLON 	
   28 D1:AA6D 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:AA6F FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:AA71 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:AA73 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:AA75 28 2C -  -  		jr 		z,_CPRTab
   33 D1:AA77 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:AA79 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:AA7B -  -  -  -  		;
   36 D1:AA7B CD C0 AD D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:AA7F CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:AA81 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:AA83 -  -  -  -  		;
   40 D1:AA83 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:AA85 -  -  -  -  _CPRPrintNumber:
   42 D1:AA85 F5 -  -  -  		push 	af 							; print leading space
   43 D1:AA86 3E 20 -  -  		ld 		a,' '
   44 D1:AA88 CD 12 B7 D1 		call 	SYSPrintChar
   45 D1:AA8C F1 -  -  -  		pop 	af
   46 D1:AA8D 01 1B A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AA91 C5 -  -  -  		push 	bc
   48 D1:AA92 CD 9F B6 D1 		call 	Int32ToString 				; convert to string
   49 D1:AA96 E1 -  -  -  		pop 	hl
   50 D1:AA97 -  -  -  -  		;
   51 D1:AA97 -  -  -  -  		; 		Print text at HL.
   52 D1:AA97 -  -  -  -  		;
   53 D1:AA97 -  -  -  -  _CPRPrintHL:
   54 D1:AA97 CD 2F B1 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AA9B 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AA9D -  -  -  -  		;
   57 D1:AA9D -  -  -  -  		; 		New line (')
   58 D1:AA9D -  -  -  -  		;
   59 D1:AA9D -  -  -  -  _CPRNewLine:
   60 D1:AA9D CD 3A B7 D1 		call 	SYSPrintCRLF
   61 D1:AAA1 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:AAA3 -  -  -  -  		;
   63 D1:AAA3 -  -  -  -  		; 		Tab command (,)
   64 D1:AAA3 -  -  -  -  		;
   65 D1:AAA3 -  -  -  -  _CPRTab:
   66 D1:AAA3 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:AAA5 CD 12 B7 D1 		call 	SYSPrintChar
   68 D1:AAA9 -  -  -  -  		;
   69 D1:AAA9 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:AAA9 -  -  -  -  		;
   71 D1:AAA9 -  -  -  -  _CPRCheckNext:
   72 D1:AAA9 DD 23 -  -  		inc 	ix 							; consume current
   73 D1:AAAB DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:AAAE FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:AAB0 C8 -  -  -  		ret 	z
   76 D1:AAB1 FE A7 -  -  		cp 		KWD_COLON
   77 D1:AAB3 C8 -  -  -  		ret 	z
   78 D1:AAB4 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:AAB6 -  -  -  -  		;
   80 D1:AAB6 -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:AAB6 -  -  -  -  		;
   82 D1:AAB6 -  -  -  -  _CPRExitNL:
   83 D1:AAB6 CD 3A B7 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:AABA C9 -  -  -  		ret
Listing for file "_build.asm"
   21 D1:AABB -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AABB -  -  -  -  ; ***************************************************************************************
    2 D1:AABB -  -  -  -  ; ***************************************************************************************
    3 D1:AABB -  -  -  -  ;
    4 D1:AABB -  -  -  -  ;		Name : 		rem.asm
    5 D1:AABB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AABB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AABB -  -  -  -  ;		Reviewed :	No
    8 D1:AABB -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AABB -  -  -  -  ;
   10 D1:AABB -  -  -  -  ; ***************************************************************************************
   11 D1:AABB -  -  -  -  ; ***************************************************************************************
   12 D1:AABB -  -  -  -  
   13 D1:AABB -  -  -  -  ; ***************************************************************************************
   14 D1:AABB -  -  -  -  ;
   15 D1:AABB -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AABB -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AABB -  -  -  -  ;
   18 D1:AABB -  -  -  -  ; ***************************************************************************************
   19 D1:AABB -  -  -  -  
   20 D1:AABB -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AABB -  -  -  -  Command_REM2: 	;; [']
   22 D1:AABB DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AABE DD 23 -  -  		inc 	ix
   24 D1:AAC0 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AAC2 C8 -  -  -  		ret 	z
   26 D1:AAC3 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AAC5 C8 -  -  -  		ret 	z
   28 D1:AAC6 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AAC8 C2 FF AB D1 		jp 		nz,SyntaxError
   30 D1:AACC -  -  -  -  		;		
   31 D1:AACC 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AAD0 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AAD3 13 -  -  -  		inc 	de 
   34 D1:AAD4 13 -  -  -  		inc 	de
   35 D1:AAD5 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AAD7 C9 -  -  -  		ret
   37 D1:AAD8 -  -  -  -  
   38 D1:AAD8 -  -  -  -  ; ***************************************************************************************
   39 D1:AAD8 -  -  -  -  ;
   40 D1:AAD8 -  -  -  -  ;									Changes and Updates
   41 D1:AAD8 -  -  -  -  ;
   42 D1:AAD8 -  -  -  -  ; ***************************************************************************************
   43 D1:AAD8 -  -  -  -  ;
   44 D1:AAD8 -  -  -  -  ;		Date			Notes
   45 D1:AAD8 -  -  -  -  ;		==== 			=====
   46 D1:AAD8 -  -  -  -  ;
   47 D1:AAD8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AAD8 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AAD8 -  -  -  -  ; ***************************************************************************************
    2 D1:AAD8 -  -  -  -  ; ***************************************************************************************
    3 D1:AAD8 -  -  -  -  ;
    4 D1:AAD8 -  -  -  -  ;		Name : 		run.asm
    5 D1:AAD8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAD8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAD8 -  -  -  -  ;		Reviewed :	No
    8 D1:AAD8 -  -  -  -  ;		Purpose :	Run command
    9 D1:AAD8 -  -  -  -  ;
   10 D1:AAD8 -  -  -  -  ; ***************************************************************************************
   11 D1:AAD8 -  -  -  -  ; ***************************************************************************************
   12 D1:AAD8 -  -  -  -  
   13 D1:AAD8 -  -  -  -  ; ***************************************************************************************
   14 D1:AAD8 -  -  -  -  ;
   15 D1:AAD8 -  -  -  -  ;										RUN command
   16 D1:AAD8 -  -  -  -  ;
   17 D1:AAD8 -  -  -  -  ; ***************************************************************************************
   18 D1:AAD8 -  -  -  -  
   19 D1:AAD8 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AAD8 CD C1 B0 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AADC -  -  -  -  
   22 D1:AADC DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AAE1 ED 73 DD A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AAE6 AF -  -  -  		xor 	a
   25 D1:AAE7 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AAEB -  -  -  -  		;
   27 D1:AAEB -  -  -  -  		; 		New line at IX.
   28 D1:AAEB -  -  -  -  		;
   29 D1:AAEB -  -  -  -  CRNewLine:
   30 D1:AAEB DD 22 D9 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AAF0 -  -  -  -  		;
   32 D1:AAF0 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AAF3 B7 -  -  -  		or 		a
   34 D1:AAF4 CA F3 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AAF8 -  -  -  -  		;
   36 D1:AAF8 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AAFA DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AAFC DD 23 -  -  		inc 	ix
   39 D1:AAFE -  -  -  -  		;
   40 D1:AAFE -  -  -  -  		; 		New command at IX
   41 D1:AAFE -  -  -  -  		;
   42 D1:AAFE -  -  -  -  _CRNewCommand:	
   43 D1:AAFE DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB01 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB02 F2 3D AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB06 -  -  -  -  		;
   47 D1:AB06 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB08 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB0A FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB0C D2 2D AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB10 -  -  -  -  		;
   52 D1:AB10 -  -  -  -  _CRDoCommand:		
   53 D1:AB10 E6 7F 21 00 
              00 00 6F 29 
              29 11 AC B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB25 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB27 CD E1 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB2B 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB2D -  -  -  -  		;
   58 D1:AB2D -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB2D -  -  -  -  		;
   60 D1:AB2D -  -  -  -  		;
   61 D1:AB2D -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB2D -  -  -  -  		;		
   63 D1:AB2D -  -  -  -  _CRAlternateLets:		
   64 D1:AB2D FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB2F 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB31 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB33 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB35 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB37 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB39 C3 FF AB D1 		jp 		SyntaxError
   71 D1:AB3D -  -  -  -  		;
   72 D1:AB3D -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB3D -  -  -  -  		;
   74 D1:AB3D -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB3D FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB3F D2 FF AB D1 		jp 		nc,SyntaxError
   77 D1:AB43 -  -  -  -  _CRAssignmentLet:		
   78 D1:AB43 CD 10 AA D1 		call	Command_LET 				; do LET.
   79 D1:AB47 C3 FE AA D1 		jp 		_CRNewCommand
   80 D1:AB4B -  -  -  -  
   81 D1:AB4B -  -  -  -  ; ***************************************************************************************
   82 D1:AB4B -  -  -  -  ;
   83 D1:AB4B -  -  -  -  ;									Changes and Updates
   84 D1:AB4B -  -  -  -  ;
   85 D1:AB4B -  -  -  -  ; ***************************************************************************************
   86 D1:AB4B -  -  -  -  ;
   87 D1:AB4B -  -  -  -  ;		Date			Notes
   88 D1:AB4B -  -  -  -  ;		==== 			=====
   89 D1:AB4B -  -  -  -  ;
   90 D1:AB4B -  -  -  -  ; ***************************************************************************************
   91 D1:AB4B -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AB4B -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AB4B -  -  -  -  ; ***************************************************************************************
    2 D1:AB4B -  -  -  -  ; ***************************************************************************************
    3 D1:AB4B -  -  -  -  ;
    4 D1:AB4B -  -  -  -  ;		Name : 		stop.asm
    5 D1:AB4B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB4B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB4B -  -  -  -  ;		Reviewed :	No
    8 D1:AB4B -  -  -  -  ;		Purpose :	Stop command
    9 D1:AB4B -  -  -  -  ;
   10 D1:AB4B -  -  -  -  ; ***************************************************************************************
   11 D1:AB4B -  -  -  -  ; ***************************************************************************************
   12 D1:AB4B -  -  -  -  
   13 D1:AB4B -  -  -  -  ; ***************************************************************************************
   14 D1:AB4B -  -  -  -  ;
   15 D1:AB4B -  -  -  -  ;										STOP command
   16 D1:AB4B -  -  -  -  ;
   17 D1:AB4B -  -  -  -  ; ***************************************************************************************
   18 D1:AB4B -  -  -  -  
   19 D1:AB4B -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AB4B 3E 0D C3 95 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AB51 -  -  -  -  
   22 D1:AB51 -  -  -  -  ; ***************************************************************************************
   23 D1:AB51 -  -  -  -  ;
   24 D1:AB51 -  -  -  -  ;									Changes and Updates
   25 D1:AB51 -  -  -  -  ;
   26 D1:AB51 -  -  -  -  ; ***************************************************************************************
   27 D1:AB51 -  -  -  -  ;
   28 D1:AB51 -  -  -  -  ;		Date			Notes
   29 D1:AB51 -  -  -  -  ;		==== 			=====
   30 D1:AB51 -  -  -  -  ;
   31 D1:AB51 -  -  -  -  ; ***************************************************************************************
   32 D1:AB51 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB51 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AB51 -  -  -  -  ; ***************************************************************************************
    2 D1:AB51 -  -  -  -  ; ***************************************************************************************
    3 D1:AB51 -  -  -  -  ;
    4 D1:AB51 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AB51 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB51 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB51 -  -  -  -  ;		Reviewed :	No
    8 D1:AB51 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AB51 -  -  -  -  ;
   10 D1:AB51 -  -  -  -  ; ***************************************************************************************
   11 D1:AB51 -  -  -  -  ; ***************************************************************************************
   12 D1:AB51 -  -  -  -  
   13 D1:AB51 -  -  -  -  ; ***************************************************************************************
   14 D1:AB51 -  -  -  -  ;
   15 D1:AB51 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AB51 -  -  -  -  ;
   17 D1:AB51 -  -  -  -  ; ***************************************************************************************
   18 D1:AB51 -  -  -  -  
   19 D1:AB51 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AB51             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AB51             		inc 	ix
   22 D1:AB51             		cp 		ch 							; exit if matches
   23 D1:AB51             		ret 	z
   24 D1:AB51             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AB51             		jp 		ErrorHandler
   26 D1:AB51             #endmacro
   27 D1:AB51 -  -  -  -  
   28 D1:AB51 -  -  -  -  CheckLeftBracket:
   29 D1:AB51 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 95 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AB5F -  -  -  -  
   31 D1:AB5F -  -  -  -  CheckRightBracket:
   32 D1:AB5F DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 95 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AB6D -  -  -  -  
   34 D1:AB6D -  -  -  -  CheckDollar:
   35 D1:AB6D DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 95 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AB7B -  -  -  -  		
   37 D1:AB7B -  -  -  -  CheckComma:
   38 D1:AB7B DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 95 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AB89 -  -  -  -  
   40 D1:AB89 -  -  -  -  ; ***************************************************************************************
   41 D1:AB89 -  -  -  -  ;
   42 D1:AB89 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AB89 -  -  -  -  ;
   44 D1:AB89 -  -  -  -  ; ***************************************************************************************
   45 D1:AB89 -  -  -  -  
   46 D1:AB89 -  -  -  -  CheckNextA:
   47 D1:AB89 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AB8C DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AB8E C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AB8F 3E 0E C3 95 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AB95 -  -  -  -  		
   52 D1:AB95 -  -  -  -  ; ***************************************************************************************
   53 D1:AB95 -  -  -  -  ;
   54 D1:AB95 -  -  -  -  ;									Changes and Updates
   55 D1:AB95 -  -  -  -  ;
   56 D1:AB95 -  -  -  -  ; ***************************************************************************************
   57 D1:AB95 -  -  -  -  ;
   58 D1:AB95 -  -  -  -  ;		Date			Notes
   59 D1:AB95 -  -  -  -  ;		==== 			=====
   60 D1:AB95 -  -  -  -  ;
   61 D1:AB95 -  -  -  -  ; ***************************************************************************************
   62 D1:AB95 -  -  -  -  		
Listing for file "_build.asm"
   25 D1:AB95 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AB95 -  -  -  -  ; ***************************************************************************************
    2 D1:AB95 -  -  -  -  ; ***************************************************************************************
    3 D1:AB95 -  -  -  -  ;
    4 D1:AB95 -  -  -  -  ;		Name : 		errors.asm
    5 D1:AB95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB95 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB95 -  -  -  -  ;		Reviewed :	No
    8 D1:AB95 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AB95 -  -  -  -  ;
   10 D1:AB95 -  -  -  -  ; ***************************************************************************************
   11 D1:AB95 -  -  -  -  ; ***************************************************************************************
   12 D1:AB95 -  -  -  -  
   13 D1:AB95 -  -  -  -  ; ***************************************************************************************
   14 D1:AB95 -  -  -  -  ;
   15 D1:AB95 -  -  -  -  ;								Error handler, message A 
   16 D1:AB95 -  -  -  -  ;
   17 D1:AB95 -  -  -  -  ; ***************************************************************************************
   18 D1:AB95 -  -  -  -  
   19 D1:AB95 -  -  -  -  ErrorHandler:
   20 D1:AB95 F5 -  -  -  		push 	af 						; save error ID
   21 D1:AB96 -  -  -  -  
   22 D1:AB96 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AB9A 6F -  -  -  		ld 		l,a
   24 D1:AB9B 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AB9C 29 -  -  -  		add 	hl,hl 		
   26 D1:AB9D 11 71 B2 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:ABA1 19 -  -  -  		add 	hl,de
   28 D1:ABA2 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:ABA4 CD 2F B1 D1 		call 	PrintStringAtHL
   30 D1:ABA8 -  -  -  -  		;
   31 D1:ABA8 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:ABA9 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:ABAA 28 2F -  -  		jr 		z,_EHExit
   34 D1:ABAC -  -  -  -  		;
   35 D1:ABAC DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:ABB1 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:ABB4 B7 -  -  -  		or 		a
   38 D1:ABB5 28 24 -  -  		jr 		z,_EHExit
   39 D1:ABB7 -  -  -  -  
   40 D1:ABB7 21 E3 AB D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:ABBB CD 2F B1 D1 		call 	PrintStringAtHL 
   42 D1:ABBF -  -  -  -  		
   43 D1:ABBF D9 -  -  -  		exx								; HL'HL = line number
   44 D1:ABC0 21 00 00 00 		ld 		hl,$0000 		
   45 D1:ABC4 D9 -  -  -  		exx 
   46 D1:ABC5 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:ABC8 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:ABCB 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:ABCD 01 1B A9 D1 		ld 		bc,ConvertBuffer
   50 D1:ABD1 CD 9F B6 D1 		call 	Int32ToString
   51 D1:ABD5 C5 -  -  -  		push 	bc
   52 D1:ABD6 E1 -  -  -  		pop 	hl
   53 D1:ABD7 CD 2F B1 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:ABDB -  -  -  -  _EHExit:		
   55 D1:ABDB CD 3A B7 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:ABDF C3 9B A8 D1 		jp 		WarmStart
   57 D1:ABE3 -  -  -  -  
   58 D1:ABE3 -  -  -  -  _EHAtText:
   59 D1:ABE3 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:ABED -  -  -  -  
   61 D1:ABED -  -  -  -  NotImplemented:
   62 D1:ABED 3E 05 C3 95 
              AB D1 -  -  		ERR_DISABLED
   63 D1:ABF3 -  -  -  -  TypeMismatch:
   64 D1:ABF3 3E 02 C3 95 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:ABF9 -  -  -  -  BadValue:
   66 D1:ABF9 3E 03 C3 95 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:ABFF -  -  -  -  SyntaxError:
   68 D1:ABFF 3E 0E C3 95 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AC05 -  -  -  -  						
   70 D1:AC05 -  -  -  -  ; ***************************************************************************************
   71 D1:AC05 -  -  -  -  ;
   72 D1:AC05 -  -  -  -  ;									Changes and Updates
   73 D1:AC05 -  -  -  -  ;
   74 D1:AC05 -  -  -  -  ; ***************************************************************************************
   75 D1:AC05 -  -  -  -  ;
   76 D1:AC05 -  -  -  -  ;		Date			Notes
   77 D1:AC05 -  -  -  -  ;		==== 			=====
   78 D1:AC05 -  -  -  -  ;
   79 D1:AC05 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AC05 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AC05 -  -  -  -  ; ***************************************************************************************
    2 D1:AC05 -  -  -  -  ; ***************************************************************************************
    3 D1:AC05 -  -  -  -  ;
    4 D1:AC05 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AC05 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC05 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC05 -  -  -  -  ;		Reviewed :	No
    8 D1:AC05 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AC05 -  -  -  -  ;
   10 D1:AC05 -  -  -  -  ; ***************************************************************************************
   11 D1:AC05 -  -  -  -  ; ***************************************************************************************
   12 D1:AC05 -  -  -  -  
   13 D1:AC05 -  -  -  -  ; ***************************************************************************************
   14 D1:AC05 -  -  -  -  ;
   15 D1:AC05 -  -  -  -  ; 									Addition
   16 D1:AC05 -  -  -  -  ;
   17 D1:AC05 -  -  -  -  ; ***************************************************************************************
   18 D1:AC05 -  -  -  -  
   19 D1:AC05 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AC05 CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 1E 
              B6 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AC13 -  -  -  -  
   22 D1:AC13 -  -  -  -  ; ***************************************************************************************
   23 D1:AC13 -  -  -  -  ;
   24 D1:AC13 -  -  -  -  ; 									Subtraction
   25 D1:AC13 -  -  -  -  ;
   26 D1:AC13 -  -  -  -  ; ***************************************************************************************
   27 D1:AC13 -  -  -  -  
   28 D1:AC13 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AC13 CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 26 
              B6 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AC21 -  -  -  -  
   31 D1:AC21 -  -  -  -  ; ***************************************************************************************
   32 D1:AC21 -  -  -  -  ;
   33 D1:AC21 -  -  -  -  ; 									  Multiply
   34 D1:AC21 -  -  -  -  ;
   35 D1:AC21 -  -  -  -  ; ***************************************************************************************
   36 D1:AC21 -  -  -  -  
   37 D1:AC21 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AC21 CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 E5 
              B5 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AC2F -  -  -  -  
   40 D1:AC2F -  -  -  -  ; ***************************************************************************************
   41 D1:AC2F -  -  -  -  ;
   42 D1:AC2F -  -  -  -  ; 									  Divide
   43 D1:AC2F -  -  -  -  ;
   44 D1:AC2F -  -  -  -  ; ***************************************************************************************
   45 D1:AC2F -  -  -  -  
   46 D1:AC2F -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AC2F -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AC2F CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 E5 
              B4 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AC3D -  -  -  -  
   50 D1:AC3D -  -  -  -  ; ***************************************************************************************
   51 D1:AC3D -  -  -  -  ;
   52 D1:AC3D -  -  -  -  ; 									  Modulus
   53 D1:AC3D -  -  -  -  ;
   54 D1:AC3D -  -  -  -  ; ***************************************************************************************
   55 D1:AC3D -  -  -  -  
   56 D1:AC3D -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AC3D CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 E8 
              B4 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AC4B -  -  -  -  
   59 D1:AC4B -  -  -  -  ; ***************************************************************************************
   60 D1:AC4B -  -  -  -  ;
   61 D1:AC4B -  -  -  -  ; 									  Logical
   62 D1:AC4B -  -  -  -  ;
   63 D1:AC4B -  -  -  -  ; ***************************************************************************************
   64 D1:AC4B -  -  -  -  
   65 D1:AC4B -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AC4B CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 30 
              B6 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AC59 -  -  -  -  
   68 D1:AC59 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AC59 CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 3D 
              B6 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AC67 -  -  -  -  
   71 D1:AC67 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AC67 CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 4A 
              B6 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AC75 -  -  -  -  
   74 D1:AC75 -  -  -  -  ; ***************************************************************************************
   75 D1:AC75 -  -  -  -  ;
   76 D1:AC75 -  -  -  -  ;									Changes and Updates
   77 D1:AC75 -  -  -  -  ;
   78 D1:AC75 -  -  -  -  ; ***************************************************************************************
   79 D1:AC75 -  -  -  -  ;
   80 D1:AC75 -  -  -  -  ;		Date			Notes
   81 D1:AC75 -  -  -  -  ;		==== 			=====
   82 D1:AC75 -  -  -  -  ;
   83 D1:AC75 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC75 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AC75 -  -  -  -  ; ***************************************************************************************
    2 D1:AC75 -  -  -  -  ; ***************************************************************************************
    3 D1:AC75 -  -  -  -  ;
    4 D1:AC75 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AC75 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC75 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC75 -  -  -  -  ;		Reviewed :	No
    8 D1:AC75 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AC75 -  -  -  -  ;
   10 D1:AC75 -  -  -  -  ; ***************************************************************************************
   11 D1:AC75 -  -  -  -  ; ***************************************************************************************
   12 D1:AC75 -  -  -  -  
   13 D1:AC75 -  -  -  -  ; ***************************************************************************************
   14 D1:AC75 -  -  -  -  ;
   15 D1:AC75 -  -  -  -  ; 									<l> <op> <r>
   16 D1:AC75 -  -  -  -  ;
   17 D1:AC75 -  -  -  -  ; ***************************************************************************************
   18 D1:AC75 -  -  -  -  
   19 D1:AC75 -  -  -  -  ALULongReference:			;; [!]
   20 D1:AC75 CD 85 AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:AC79 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AC7B CB F9 -  -  		set 	CIsReference,c
   23 D1:AC7D C9 -  -  -  		ret
   24 D1:AC7E -  -  -  -  
   25 D1:AC7E -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AC7E CD 75 AC D1 		call 	ALULongReference
   27 D1:AC82 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AC84 C9 -  -  -  		ret
   29 D1:AC85 -  -  -  -  
   30 D1:AC85 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AC85 CD 22 AD D1 
              78 B1 C2 F3 
              AB D1 C3 93 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AC93 -  -  -  -  _BRGAMain:		
   33 D1:AC93 CD 1E B6 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AC97 CD 28 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AC9B C9 -  -  -  		ret
   36 D1:AC9C -  -  -  -  
   37 D1:AC9C -  -  -  -  ; ***************************************************************************************
   38 D1:AC9C -  -  -  -  ;
   39 D1:AC9C -  -  -  -  ;									Changes and Updates
   40 D1:AC9C -  -  -  -  ;
   41 D1:AC9C -  -  -  -  ; ***************************************************************************************
   42 D1:AC9C -  -  -  -  ;
   43 D1:AC9C -  -  -  -  ;		Date			Notes
   44 D1:AC9C -  -  -  -  ;		==== 			=====
   45 D1:AC9C -  -  -  -  ;
   46 D1:AC9C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC9C -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AC9C -  -  -  -  ; ***************************************************************************************
    2 D1:AC9C -  -  -  -  ; ***************************************************************************************
    3 D1:AC9C -  -  -  -  ;
    4 D1:AC9C -  -  -  -  ;		Name : 		compare.asm
    5 D1:AC9C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC9C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC9C -  -  -  -  ;		Reviewed :	No
    8 D1:AC9C -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AC9C -  -  -  -  ;
   10 D1:AC9C -  -  -  -  ; ***************************************************************************************
   11 D1:AC9C -  -  -  -  ; ***************************************************************************************
   12 D1:AC9C -  -  -  -  
   13 D1:AC9C -  -  -  -  #macro compare_equals(n)
   14 D1:AC9C             		call 	CompareBaseCode
   15 D1:AC9C             		cp 		n
   16 D1:AC9C             		jr 		z,UnaryInt32True
   17 D1:AC9C             		jr 		UnaryInt32False
   18 D1:AC9C             #endmacro
   19 D1:AC9C -  -  -  -  
   20 D1:AC9C -  -  -  -  #macro compare_not_equals(n)
   21 D1:AC9C             		call 	CompareBaseCode
   22 D1:AC9C             		cp 		n
   23 D1:AC9C             		jr 		nz,UnaryInt32True
   24 D1:AC9C             		jr 		UnaryInt32False
   25 D1:AC9C             #endmacro
   26 D1:AC9C -  -  -  -  
   27 D1:AC9C -  -  -  -  ; ***************************************************************************************
   28 D1:AC9C -  -  -  -  ;
   29 D1:AC9C -  -  -  -  ; 								Return True/False
   30 D1:AC9C -  -  -  -  ;
   31 D1:AC9C -  -  -  -  ; ***************************************************************************************
   32 D1:AC9C -  -  -  -  
   33 D1:AC9C -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AC9C 3E FF -  -  		ld 		a,255
   35 D1:AC9E 18 01 -  -  		jr 		_Int32Logical
   36 D1:ACA0 -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:ACA0 AF -  -  -  		xor 	a
   38 D1:ACA1 -  -  -  -  _Int32Logical:
   39 D1:ACA1 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ACA2 67 -  -  -  		ld 		h,a
   41 D1:ACA3 D9 -  -  -  		exx
   42 D1:ACA4 6F -  -  -  		ld 		l,a
   43 D1:ACA5 67 -  -  -  		ld 		h,a
   44 D1:ACA6 D9 -  -  -  		exx
   45 D1:ACA7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:ACA9 C9 -  -  -  		ret
   47 D1:ACAA -  -  -  -  
   48 D1:ACAA -  -  -  -  ; ***************************************************************************************
   49 D1:ACAA -  -  -  -  ;
   50 D1:ACAA -  -  -  -  ; 										> = < (compare == value)
   51 D1:ACAA -  -  -  -  ;
   52 D1:ACAA -  -  -  -  ; ***************************************************************************************
   53 D1:ACAA -  -  -  -  
   54 D1:ACAA -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:ACAA CD E6 AC D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:ACB4 -  -  -  -  
   57 D1:ACB4 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:ACB4 CD E6 AC D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:ACBE -  -  -  -  
   60 D1:ACBE -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:ACBE CD E6 AC D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:ACC8 -  -  -  -  
   63 D1:ACC8 -  -  -  -  ; ***************************************************************************************
   64 D1:ACC8 -  -  -  -  ;
   65 D1:ACC8 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:ACC8 -  -  -  -  ;
   67 D1:ACC8 -  -  -  -  ; ***************************************************************************************
   68 D1:ACC8 -  -  -  -  
   69 D1:ACC8 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:ACC8 CD E6 AC D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:ACD2 -  -  -  -  
   72 D1:ACD2 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:ACD2 CD E6 AC D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:ACDC -  -  -  -  
   75 D1:ACDC -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:ACDC CD E6 AC D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:ACE6 -  -  -  -  
   78 D1:ACE6 -  -  -  -  ; ***************************************************************************************
   79 D1:ACE6 -  -  -  -  ;
   80 D1:ACE6 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:ACE6 -  -  -  -  ;
   82 D1:ACE6 -  -  -  -  ; ***************************************************************************************
   83 D1:ACE6 -  -  -  -  
   84 D1:ACE6 -  -  -  -  CompareBaseCode:
   85 D1:ACE6 CD 22 AD D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:ACEA -  -  -  -  
   87 D1:ACEA 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:ACEB A1 -  -  -  		and 	c
   89 D1:ACEC CB 47 -  -  		bit 	CIsString,a 
   90 D1:ACEE C2 00 AD D1 		jp 		nz,StringCompare
   91 D1:ACF2 -  -  -  -  
   92 D1:ACF2 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:ACF3 B1 -  -  -  		or 		c
   94 D1:ACF4 CB 47 -  -  		bit 	CIsString,a 
   95 D1:ACF6 CA 5E B6 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:ACFA -  -  -  -  
   97 D1:ACFA 3E 02 C3 95 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AD00 -  -  -  -  ;
   99 D1:AD00 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AD00 -  -  -  -  ;
  101 D1:AD00 -  -  -  -  StringCompare:
  102 D1:AD00 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AD01 BE -  -  -  		cp 		(hl)
  104 D1:AD02 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AD04 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AD06 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AD07 23 -  -  -  		inc 	hl
  108 D1:AD08 FE 20 -  -  		cp 		' '
  109 D1:AD0A 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AD0C AF -  -  -  		xor 	a 							; return 0.
  111 D1:AD0D C9 -  -  -  		ret
  112 D1:AD0E -  -  -  -  
  113 D1:AD0E -  -  -  -  _SCLess:
  114 D1:AD0E 3E FF -  -  		ld 		a,$FF
  115 D1:AD10 C9 -  -  -  		ret
  116 D1:AD11 -  -  -  -  _SCGreater:
  117 D1:AD11 3E 01 -  -  		ld 		a,1
  118 D1:AD13 C9 -  -  -  		ret
  119 D1:AD14 -  -  -  -  
  120 D1:AD14 3E 0F C3 95 
              AB D1 -  -  		ERR_TODO()
  121 D1:AD1A -  -  -  -  
  122 D1:AD1A -  -  -  -  ; ***************************************************************************************
  123 D1:AD1A -  -  -  -  ;
  124 D1:AD1A -  -  -  -  ;									Changes and Updates
  125 D1:AD1A -  -  -  -  ;
  126 D1:AD1A -  -  -  -  ; ***************************************************************************************
  127 D1:AD1A -  -  -  -  ;
  128 D1:AD1A -  -  -  -  ;		Date			Notes
  129 D1:AD1A -  -  -  -  ;		==== 			=====
  130 D1:AD1A -  -  -  -  ;
  131 D1:AD1A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AD1A -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AD1A -  -  -  -  ; ***************************************************************************************
    2 D1:AD1A -  -  -  -  ; ***************************************************************************************
    3 D1:AD1A -  -  -  -  ;
    4 D1:AD1A -  -  -  -  ;		Name : 		utility.asm
    5 D1:AD1A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD1A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD1A -  -  -  -  ;		Reviewed :	No
    8 D1:AD1A -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AD1A -  -  -  -  ;
   10 D1:AD1A -  -  -  -  ; ***************************************************************************************
   11 D1:AD1A -  -  -  -  ; ***************************************************************************************
   12 D1:AD1A -  -  -  -  
   13 D1:AD1A -  -  -  -  ; ***************************************************************************************
   14 D1:AD1A -  -  -  -  ;
   15 D1:AD1A -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AD1A -  -  -  -  ;
   17 D1:AD1A -  -  -  -  ; ***************************************************************************************
   18 D1:AD1A -  -  -  -  
   19 D1:AD1A -  -  -  -  SwapHLDE:
   20 D1:AD1A EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AD1B D9 -  -  -  			exx
   22 D1:AD1C EB -  -  -  			ex 		de,hl
   23 D1:AD1D D9 -  -  -  			exx
   24 D1:AD1E 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AD1F 41 -  -  -  			ld 		b,c
   26 D1:AD20 4F -  -  -  			ld 		c,a
   27 D1:AD21 C9 -  -  -  			ret
   28 D1:AD22 -  -  -  -  
   29 D1:AD22 -  -  -  -  ; ***************************************************************************************
   30 D1:AD22 -  -  -  -  ;
   31 D1:AD22 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AD22 -  -  -  -  ;
   33 D1:AD22 -  -  -  -  ; ***************************************************************************************
   34 D1:AD22 -  -  -  -  
   35 D1:AD22 -  -  -  -  DereferenceBoth:
   36 D1:AD22 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AD24 C4 FB AD D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AD28 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AD2A C8 -  -  -  			ret 	z
   40 D1:AD2B CD 1A AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AD2F CD FB AD D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AD33 CD 1A AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AD37 C9 -  -  -  			ret
   44 D1:AD38 -  -  -  -  
   45 D1:AD38 -  -  -  -  ; ***************************************************************************************
   46 D1:AD38 -  -  -  -  ;
   47 D1:AD38 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AD38 -  -  -  -  ;
   49 D1:AD38 -  -  -  -  ; ***************************************************************************************
   50 D1:AD38 -  -  -  -  
   51 D1:AD38 -  -  -  -  NegateHLHL:	
   52 D1:AD38 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AD3A C2 F3 AB D1 			jp 		nz,TypeMismatch
   54 D1:AD3E CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AD40 C4 FB AD D1 			call 	nz,Dereference 			; if required.
   56 D1:AD44 CD 88 B6 D1 			call 	Int32Negate
   57 D1:AD48 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 D1:AD49 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AD49 -  -  -  -  ; ***************************************************************************************
    2 D1:AD49 -  -  -  -  ; ***************************************************************************************
    3 D1:AD49 -  -  -  -  ;
    4 D1:AD49 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AD49 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD49 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD49 -  -  -  -  ;		Reviewed :	None
    8 D1:AD49 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AD49 -  -  -  -  ;
   10 D1:AD49 -  -  -  -  ; ***************************************************************************************
   11 D1:AD49 -  -  -  -  ; ***************************************************************************************
   12 D1:AD49 -  -  -  -  
   13 D1:AD49 -  -  -  -  ; ***************************************************************************************
   14 D1:AD49 -  -  -  -  ;
   15 D1:AD49 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AD49 -  -  -  -  ;
   17 D1:AD49 -  -  -  -  ; ***************************************************************************************
   18 D1:AD49 -  -  -  -  
   19 D1:AD49 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AD49 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AD4A -  -  -  -  EvaluateAtPrecedence:
   22 D1:AD4A F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AD4B -  -  -  -  		;
   24 D1:AD4B -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AD4B -  -  -  -  		;
   26 D1:AD4B CD 57 AE D1 		call 	EvaluateTerm 				; get term
   27 D1:AD4F -  -  -  -  		;
   28 D1:AD4F -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AD4F -  -  -  -  		;
   30 D1:AD4F D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AD50 -  -  -  -  _EAPLoop:
   32 D1:AD50 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AD53 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AD55 D8 -  -  -  		ret 	c
   35 D1:AD56 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AD58 D0 -  -  -  		ret 	nc
   37 D1:AD59 -  -  -  -  		;
   38 D1:AD59 -  -  -  -  		; 		Get the precedence.
   39 D1:AD59 -  -  -  -  		;
   40 D1:AD59 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AD5A D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AD5C 21 60 B2 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AD60 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AD61 6F -  -  -  		ld 		l,a
   45 D1:AD62 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AD63 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AD64 -  -  -  -  		;
   48 D1:AD64 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AD64 -  -  -  -  		;
   50 D1:AD64 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AD65 BB -  -  -  		cp 		e
   52 D1:AD66 D0 -  -  -  		ret 	nc
   53 D1:AD67 -  -  -  -  
   54 D1:AD67 -  -  -  -  		;
   55 D1:AD67 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AD67 -  -  -  -  		;
   57 D1:AD67 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AD68 -  -  -  -  		;
   59 D1:AD68 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AD6B F5 -  -  -  		push 	af
   61 D1:AD6C -  -  -  -  		;
   62 D1:AD6C C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AD6D D9 -  -  -  		exx 								; save HL'
   64 D1:AD6E E5 -  -  -  		push 	hl
   65 D1:AD6F D9 -  -  -  		exx 								
   66 D1:AD70 E5 -  -  -  		push 	hl 							; save HL
   67 D1:AD71 -  -  -  -  		;
   68 D1:AD71 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AD73 -  -  -  -  		;
   70 D1:AD73 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AD73 -  -  -  -  		;
   72 D1:AD73 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AD74 CD 4A AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AD78 -  -  -  -  		;
   75 D1:AD78 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AD78 -  -  -  -  		;
   77 D1:AD78 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AD79 -  -  -  -  
   79 D1:AD79 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AD7A E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AD7B D9 -  -  -  		exx
   82 D1:AD7C EB -  -  -  		ex 		de,hl
   83 D1:AD7D E1 -  -  -  		pop 	hl
   84 D1:AD7E D9 -  -  -  		exx
   85 D1:AD7F C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AD80 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AD81 -  -  -  -  		;
   88 D1:AD81 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AD81 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AD81 -  -  -  -  		;
   91 D1:AD81 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AD82 -  -  -  -  		;
   93 D1:AD82 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AD82 -  -  -  -  		;
   95 D1:AD82 D5 -  -  -  		push 	de
   96 D1:AD83 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AD84 E6 7F 21 00 
              00 00 6F 29 
              29 11 AC B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AD99 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AD9A D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AD9B CD E1 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AD9F -  -  -  -  		;
  102 D1:AD9F D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:ADA0 -  -  -  -  		;
  104 D1:ADA0 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:ADA2 -  -  -  -  
  106 D1:ADA2 -  -  -  -  ; ***************************************************************************************
  107 D1:ADA2 -  -  -  -  ;
  108 D1:ADA2 -  -  -  -  ;									Changes and Updates
  109 D1:ADA2 -  -  -  -  ;
  110 D1:ADA2 -  -  -  -  ; ***************************************************************************************
  111 D1:ADA2 -  -  -  -  ;
  112 D1:ADA2 -  -  -  -  ;		Date			Notes
  113 D1:ADA2 -  -  -  -  ;		==== 			=====
  114 D1:ADA2 -  -  -  -  ;
  115 D1:ADA2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:ADA2 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:ADA2 -  -  -  -  ; ***************************************************************************************
    2 D1:ADA2 -  -  -  -  ; ***************************************************************************************
    3 D1:ADA2 -  -  -  -  ;
    4 D1:ADA2 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:ADA2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADA2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADA2 -  -  -  -  ;		Reviewed :	No
    8 D1:ADA2 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:ADA2 -  -  -  -  ;
   10 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   11 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   12 D1:ADA2 -  -  -  -  
   13 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   14 D1:ADA2 -  -  -  -  ;
   15 D1:ADA2 -  -  -  -  ; 								Evaluate an integer term
   16 D1:ADA2 -  -  -  -  ;
   17 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   18 D1:ADA2 -  -  -  -  
   19 D1:ADA2 -  -  -  -  EvaluateIntegerTerm:
   20 D1:ADA2 CD 57 AE D1 		call 	EvaluateTerm
   21 D1:ADA6 CD FB AD D1 		call 	DeReference
   22 D1:ADAA CB 41 -  -  		bit 	CIsString,c
   23 D1:ADAC C8 -  -  -  		ret 	z
   24 D1:ADAD C3 F3 AB D1 		jp 		TypeMismatch
   25 D1:ADB1 -  -  -  -  
   26 D1:ADB1 -  -  -  -  ; ***************************************************************************************
   27 D1:ADB1 -  -  -  -  ;
   28 D1:ADB1 -  -  -  -  ; 								Evaluate a string term
   29 D1:ADB1 -  -  -  -  ;
   30 D1:ADB1 -  -  -  -  ; ***************************************************************************************
   31 D1:ADB1 -  -  -  -  
   32 D1:ADB1 -  -  -  -  EvaluateStringTerm:
   33 D1:ADB1 CD 57 AE D1 		call 	EvaluateTerm
   34 D1:ADB5 CD FB AD D1 		call 	DeReference
   35 D1:ADB9 CB 41 -  -  		bit 	CIsString,c
   36 D1:ADBB C0 -  -  -  		ret 	nz
   37 D1:ADBC C3 F3 AB D1 		jp 		TypeMismatch
   38 D1:ADC0 -  -  -  -  
   39 D1:ADC0 -  -  -  -  ; ***************************************************************************************
   40 D1:ADC0 -  -  -  -  ;
   41 D1:ADC0 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:ADC0 -  -  -  -  ;
   43 D1:ADC0 -  -  -  -  ; ***************************************************************************************
   44 D1:ADC0 -  -  -  -  
   45 D1:ADC0 -  -  -  -  EvaluateValue:
   46 D1:ADC0 CD 49 AD D1 		call 	EvaluateAtPrecedence0
   47 D1:ADC4 C3 FB AD D1 		jp 		Dereference
   48 D1:ADC8 -  -  -  -  
   49 D1:ADC8 -  -  -  -  ; ***************************************************************************************
   50 D1:ADC8 -  -  -  -  ;
   51 D1:ADC8 -  -  -  -  ; 									Evaluate a number
   52 D1:ADC8 -  -  -  -  ;
   53 D1:ADC8 -  -  -  -  ; ***************************************************************************************
   54 D1:ADC8 -  -  -  -  
   55 D1:ADC8 -  -  -  -  EvaluateInteger:
   56 D1:ADC8 CD C0 AD D1 		call 	EvaluateValue
   57 D1:ADCC CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:ADCE C8 -  -  -  		ret 	z
   59 D1:ADCF C3 F3 AB D1 		jp 		TypeMismatch
   60 D1:ADD3 -  -  -  -  
   61 D1:ADD3 -  -  -  -  ; ***************************************************************************************
   62 D1:ADD3 -  -  -  -  ;
   63 D1:ADD3 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:ADD3 -  -  -  -  ;
   65 D1:ADD3 -  -  -  -  ; ***************************************************************************************
   66 D1:ADD3 -  -  -  -  
   67 D1:ADD3 -  -  -  -  Evaluate8BitInteger:
   68 D1:ADD3 CD C8 AD D1 		call 	EvaluateInteger
   69 D1:ADD7 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:ADD8 7C -  -  -  		ld 		a,h
   71 D1:ADD9 B5 -  -  -  		or 		l
   72 D1:ADDA D9 -  -  -  		exx 	
   73 D1:ADDB B4 -  -  -  		or 		h
   74 D1:ADDC C2 F9 AB D1 		jp 		nz,BadValue
   75 D1:ADE0 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:ADE1 C9 -  -  -  		ret
   77 D1:ADE2 -  -  -  -  		
   78 D1:ADE2 -  -  -  -  ; ***************************************************************************************
   79 D1:ADE2 -  -  -  -  ;
   80 D1:ADE2 -  -  -  -  ; 									Evaluate a string
   81 D1:ADE2 -  -  -  -  ;
   82 D1:ADE2 -  -  -  -  ; ***************************************************************************************
   83 D1:ADE2 -  -  -  -  
   84 D1:ADE2 -  -  -  -  EvaluateStringOnly:
   85 D1:ADE2 CD C0 AD D1 		call 	EvaluateValue
   86 D1:ADE6 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:ADE8 CA F3 AB D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:ADEC C9 -  -  -  		ret
   89 D1:ADED -  -  -  -  
   90 D1:ADED -  -  -  -  ; ***************************************************************************************
   91 D1:ADED -  -  -  -  ;
   92 D1:ADED -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:ADED -  -  -  -  ;
   94 D1:ADED -  -  -  -  ; ***************************************************************************************
   95 D1:ADED -  -  -  -  
   96 D1:ADED -  -  -  -  Return8BitConstant:
   97 D1:ADED 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:ADF1 6F -  -  -  		ld 		l,a
   99 D1:ADF2 -  -  -  -  Return16BitConstant:
  100 D1:ADF2 D9 -  -  -  		exx 								; clear HL'
  101 D1:ADF3 21 00 00 00 		ld 		hl,0
  102 D1:ADF7 D9 -  -  -  		exx
  103 D1:ADF8 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:ADFA C9 -  -  -  		ret
  105 D1:ADFB -  -  -  -  
  106 D1:ADFB -  -  -  -  ; ***************************************************************************************
  107 D1:ADFB -  -  -  -  ;
  108 D1:ADFB -  -  -  -  ;									Changes and Updates
  109 D1:ADFB -  -  -  -  ;
  110 D1:ADFB -  -  -  -  ; ***************************************************************************************
  111 D1:ADFB -  -  -  -  ;
  112 D1:ADFB -  -  -  -  ;		Date			Notes
  113 D1:ADFB -  -  -  -  ;		==== 			=====
  114 D1:ADFB -  -  -  -  ;
  115 D1:ADFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:ADFB -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:ADFB -  -  -  -  ; ***************************************************************************************
    2 D1:ADFB -  -  -  -  ; ***************************************************************************************
    3 D1:ADFB -  -  -  -  ;
    4 D1:ADFB -  -  -  -  ;		Name : 		reference.asm
    5 D1:ADFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADFB -  -  -  -  ;		Date : 		1st May 2022
    7 D1:ADFB -  -  -  -  ;		Reviewed :	No
    8 D1:ADFB -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:ADFB -  -  -  -  ;
   10 D1:ADFB -  -  -  -  ; ***************************************************************************************
   11 D1:ADFB -  -  -  -  ; ***************************************************************************************
   12 D1:ADFB -  -  -  -  
   13 D1:ADFB -  -  -  -  ; ***************************************************************************************
   14 D1:ADFB -  -  -  -  ;
   15 D1:ADFB -  -  -  -  ; 									Dereference HL'HL C
   16 D1:ADFB -  -  -  -  ;
   17 D1:ADFB -  -  -  -  ; ***************************************************************************************
   18 D1:ADFB -  -  -  -  
   19 D1:ADFB -  -  -  -  Dereference:
   20 D1:ADFB CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:ADFD C8 -  -  -  		ret 	z
   22 D1:ADFE -  -  -  -  
   23 D1:ADFE CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AE00 -  -  -  -  		
   25 D1:AE00 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AE02 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AE04 -  -  -  -  
   28 D1:AE04 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AE06 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AE08 -  -  -  -  
   31 D1:AE08 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AE09 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AE0B D9 -  -  -  		exx
   34 D1:AE0C E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AE0D 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AE0E 23 -  -  -  		inc  	hl
   37 D1:AE0F ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AE11 D9 -  -  -  		exx 								; fix back
   39 D1:AE12 C9 -  -  -  		ret
   40 D1:AE13 -  -  -  -  
   41 D1:AE13 -  -  -  -  _DeRefByte:		
   42 D1:AE13 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AE14 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AE18 6F -  -  -  		ld	 	l,a
   45 D1:AE19 D9 -  -  -  		exx
   46 D1:AE1A 21 00 00 00 		ld 		hl,$0000
   47 D1:AE1E D9 -  -  -  		exx
   48 D1:AE1F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AE21 C9 -  -  -  		ret
   50 D1:AE22 -  -  -  -  
   51 D1:AE22 -  -  -  -  _DRInternal:
   52 D1:AE22 3E 05 C3 95 
              AB D1 -  -  		ERR_DISABLED
   53 D1:AE28 -  -  -  -  
   54 D1:AE28 -  -  -  -  ; ***************************************************************************************
   55 D1:AE28 -  -  -  -  ;
   56 D1:AE28 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AE28 -  -  -  -  ;
   58 D1:AE28 -  -  -  -  ; ***************************************************************************************
   59 D1:AE28 -  -  -  -  
   60 D1:AE28 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AE28 -  -  -  -  		#ifdef EZ80
   62 D1:AE28 22 E7 A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AE2C D9 -  -  -  		exx
   64 D1:AE2D 22 E9 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AE31 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AE35 D9 -  -  -  		exx
   67 D1:AE36 2A E7 A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AE3A -  -  -  -  		#endif
   69 D1:AE3A C9 -  -  -  		ret
   70 D1:AE3B -  -  -  -  
   71 D1:AE3B -  -  -  -  ; ***************************************************************************************
   72 D1:AE3B -  -  -  -  ;
   73 D1:AE3B -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AE3B -  -  -  -  ;
   75 D1:AE3B -  -  -  -  ; ***************************************************************************************
   76 D1:AE3B -  -  -  -  
   77 D1:AE3B -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AE3B -  -  -  -  		#ifdef EZ80
   79 D1:AE3B 22 E7 A8 D1 		ld 		(AConvert),hl
   80 D1:AE3F 21 00 00 00 		ld 		hl,$0000
   81 D1:AE43 22 EA A8 D1 		ld 		(AConvert+3),hl
   82 D1:AE47 D9 -  -  -  		exx
   83 D1:AE48 2A E9 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AE4C D9 -  -  -  		exx
   85 D1:AE4D AF -  -  -  		xor 	a
   86 D1:AE4E 32 E9 A8 D1 		ld 		(AConvert+2),a
   87 D1:AE52 2A E7 A8 D1 		ld 		hl,(AConvert)
   88 D1:AE56 -  -  -  -  		#endif
   89 D1:AE56 C9 -  -  -  		ret
   90 D1:AE57 -  -  -  -  
   91 D1:AE57 -  -  -  -  ; ***************************************************************************************
   92 D1:AE57 -  -  -  -  ;
   93 D1:AE57 -  -  -  -  ;									Changes and Updates
   94 D1:AE57 -  -  -  -  ;
   95 D1:AE57 -  -  -  -  ; ***************************************************************************************
   96 D1:AE57 -  -  -  -  ;
   97 D1:AE57 -  -  -  -  ;		Date			Notes
   98 D1:AE57 -  -  -  -  ;		==== 			=====
   99 D1:AE57 -  -  -  -  ;
  100 D1:AE57 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE57 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AE57 -  -  -  -  ; ***************************************************************************************
    2 D1:AE57 -  -  -  -  ; ***************************************************************************************
    3 D1:AE57 -  -  -  -  ;
    4 D1:AE57 -  -  -  -  ;		Name : 		term.asm
    5 D1:AE57 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE57 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE57 -  -  -  -  ;		Reviewed :	No
    8 D1:AE57 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AE57 -  -  -  -  ;
   10 D1:AE57 -  -  -  -  ; ***************************************************************************************
   11 D1:AE57 -  -  -  -  ; ***************************************************************************************
   12 D1:AE57 -  -  -  -  
   13 D1:AE57 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AE57             		add_hlhl_16
   15 D1:AE57             		exx
   16 D1:AE57             		adc_hlhl_16
   17 D1:AE57             		exx
   18 D1:AE57             #endmacro
   19 D1:AE57 -  -  -  -  
   20 D1:AE57 -  -  -  -  ; ***************************************************************************************
   21 D1:AE57 -  -  -  -  ;
   22 D1:AE57 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AE57 -  -  -  -  ;
   24 D1:AE57 -  -  -  -  ; ***************************************************************************************
   25 D1:AE57 -  -  -  -  ;
   26 D1:AE57 -  -  -  -  ; 		Terms can be:
   27 D1:AE57 -  -  -  -  ;
   28 D1:AE57 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AE57 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AE57 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AE57 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AE57 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AE57 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AE57 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AE57 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AE57 -  -  -  -  ; 														reference of some sort.
   37 D1:AE57 -  -  -  -  ;
   38 D1:AE57 -  -  -  -  ; ***************************************************************************************
   39 D1:AE57 -  -  -  -  
   40 D1:AE57 -  -  -  -  EvaluateTerm:		
   41 D1:AE57 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AE59 D9 -  -  -  		exx
   43 D1:AE5A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AE5E D9 -  -  -  		exx
   45 D1:AE5F 21 00 00 00 		ld 		hl,$0000		
   46 D1:AE63 -  -  -  -  		;
   47 D1:AE63 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AE66 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AE68 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AE6A DA 22 AF D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AE6E CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AE70 C2 C6 AE D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AE74 -  -  -  -  		;
   54 D1:AE74 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AE74 -  -  -  -  		;
   56 D1:AE74 -  -  -  -  _ETIntegerConstant:
   57 D1:AE74 -  -  -  -  		;
   58 D1:AE74 -  -  -  -  _ETIntegerLoop:		
   59 D1:AE74 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AE77 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AE79 B5 -  -  -  		or 		l 							; or into L
   62 D1:AE7A 6F -  -  -  		ld 		l,a
   63 D1:AE7B DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AE7D DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AE80 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AE82 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AE84 D8 -  -  -  		ret 	c
   68 D1:AE85 -  -  -  -  
   69 D1:AE85 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AE8C 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AE93 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AE9A 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AEA1 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AEA8 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AEAF -  -  -  -  
   76 D1:AEAF 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AEB1 -  -  -  -  		;
   78 D1:AEB1 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AEB1 -  -  -  -  		;
   80 D1:AEB1 -  -  -  -  _ETStringMarker:		
   81 D1:AEB1 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AEB3 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AEB5 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AEB7 E1 -  -  -  		pop 	hl
   85 D1:AEB8 11 00 00 00 		ld 		de,$0000
   86 D1:AEBC DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AEBF DD 19 -  -  		add 	ix,de
   88 D1:AEC1 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AEC3 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AEC5 C9 -  -  -  		ret
   91 D1:AEC6 -  -  -  -  		;
   92 D1:AEC6 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AEC6 -  -  -  -  		;
   94 D1:AEC6 -  -  -  -  _ETFoundKeyword:
   95 D1:AEC6 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AEC8 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AECA 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AECC FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AECE 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AED0 -  -  -  -  		;
  101 D1:AED0 -  -  -  -  		;		Unary group 0
  102 D1:AED0 -  -  -  -  		;
  103 D1:AED0 E6 7F 21 00 
              00 00 6F 29 
              29 11 AC B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AEE5 C3 E1 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AEE9 -  -  -  -  
  106 D1:AEE9 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AEE9 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AEEB 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AEED -  -  -  -  		;
  110 D1:AEED -  -  -  -  		; 		- term
  111 D1:AEED -  -  -  -  		;
  112 D1:AEED CD A2 AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AEF1 CD 38 AD D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AEF5 C9 -  -  -  		ret
  115 D1:AEF6 -  -  -  -  		;
  116 D1:AEF6 -  -  -  -  		;		! ? indirection check
  117 D1:AEF6 -  -  -  -  		;
  118 D1:AEF6 -  -  -  -  _ETCheckIndirection:	
  119 D1:AEF6 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AEF8 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AEFA FE 83 -  -  		cp 		KWD_PLING
  122 D1:AEFC C2 FF AB D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AF00 -  -  -  -  		;
  124 D1:AF00 -  -  -  -  		; 		! ? indirection
  125 D1:AF00 -  -  -  -  		;
  126 D1:AF00 -  -  -  -  _ETIndirection:
  127 D1:AF00 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AF01 CD 57 AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AF05 CD FB AD D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AF09 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AF0B 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AF0D CD 28 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AF11 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AF12 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AF14 CB F9 -  -  		set 	CIsReference,c
  136 D1:AF16 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AF18 C8 -  -  -  		ret 	z
  138 D1:AF19 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AF1B C9 -  -  -  		ret
  140 D1:AF1C -  -  -  -  _ETStringIndirect:
  141 D1:AF1C 3E 02 C3 95 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AF22 -  -  -  -  		;
  143 D1:AF22 -  -  -  -  		; 		Found an identifier.
  144 D1:AF22 -  -  -  -  		;
  145 D1:AF22 -  -  -  -  _ETVariable:
  146 D1:AF22 CD 7D B1 D1 		call 	FindVariable 				; find the variable.
  147 D1:AF26 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AF27 3E 10 C3 95 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AF2D -  -  -  -  		
  150 D1:AF2D -  -  -  -  ; ***************************************************************************************
  151 D1:AF2D -  -  -  -  ;
  152 D1:AF2D -  -  -  -  ;									Changes and Updates
  153 D1:AF2D -  -  -  -  ;
  154 D1:AF2D -  -  -  -  ; ***************************************************************************************
  155 D1:AF2D -  -  -  -  ;
  156 D1:AF2D -  -  -  -  ;		Date			Notes
  157 D1:AF2D -  -  -  -  ;		==== 			=====
  158 D1:AF2D -  -  -  -  ;
  159 D1:AF2D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AF2D -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AF2D -  -  -  -  ; ***************************************************************************************
    2 D1:AF2D -  -  -  -  ; ***************************************************************************************
    3 D1:AF2D -  -  -  -  ;
    4 D1:AF2D -  -  -  -  ;		Name : 		abs.asm
    5 D1:AF2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF2D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF2D -  -  -  -  ;		Reviewed :	No
    8 D1:AF2D -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AF2D -  -  -  -  ;
   10 D1:AF2D -  -  -  -  ; ***************************************************************************************
   11 D1:AF2D -  -  -  -  ; ***************************************************************************************
   12 D1:AF2D -  -  -  -  
   13 D1:AF2D -  -  -  -  ; ***************************************************************************************
   14 D1:AF2D -  -  -  -  ;
   15 D1:AF2D -  -  -  -  ;								abs( unary function
   16 D1:AF2D -  -  -  -  ;
   17 D1:AF2D -  -  -  -  ; ***************************************************************************************
   18 D1:AF2D -  -  -  -  
   19 D1:AF2D -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AF2D CD A2 AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AF31 D9 -  -  -  		exx 								; test MSB
   22 D1:AF32 CB 7C -  -  		bit 	7,h
   23 D1:AF34 D9 -  -  -  		exx
   24 D1:AF35 C4 38 AD D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AF39 C9 -  -  -  		ret
   26 D1:AF3A -  -  -  -  
   27 D1:AF3A -  -  -  -  ; ***************************************************************************************
   28 D1:AF3A -  -  -  -  ;
   29 D1:AF3A -  -  -  -  ;									Changes and Updates
   30 D1:AF3A -  -  -  -  ;
   31 D1:AF3A -  -  -  -  ; ***************************************************************************************
   32 D1:AF3A -  -  -  -  ;
   33 D1:AF3A -  -  -  -  ;		Date			Notes
   34 D1:AF3A -  -  -  -  ;		==== 			=====
   35 D1:AF3A -  -  -  -  ;
   36 D1:AF3A -  -  -  -  ; ***************************************************************************************
   37 D1:AF3A -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AF3A -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AF3A -  -  -  -  ; ***************************************************************************************
    2 D1:AF3A -  -  -  -  ; ***************************************************************************************
    3 D1:AF3A -  -  -  -  ;
    4 D1:AF3A -  -  -  -  ;		Name : 		asc.asm
    5 D1:AF3A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF3A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF3A -  -  -  -  ;		Reviewed :	No
    8 D1:AF3A -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AF3A -  -  -  -  ;
   10 D1:AF3A -  -  -  -  ; ***************************************************************************************
   11 D1:AF3A -  -  -  -  ; ***************************************************************************************
   12 D1:AF3A -  -  -  -  
   13 D1:AF3A -  -  -  -  ; ***************************************************************************************
   14 D1:AF3A -  -  -  -  ;
   15 D1:AF3A -  -  -  -  ;								Asc unary function
   16 D1:AF3A -  -  -  -  ;
   17 D1:AF3A -  -  -  -  ; ***************************************************************************************
   18 D1:AF3A -  -  -  -  
   19 D1:AF3A -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AF3A CD B1 AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AF3E 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AF3F C3 ED AD D1 		jp 		Return8BitConstant
   23 D1:AF43 -  -  -  -  
   24 D1:AF43 -  -  -  -  ; ***************************************************************************************
   25 D1:AF43 -  -  -  -  ;
   26 D1:AF43 -  -  -  -  ;									Changes and Updates
   27 D1:AF43 -  -  -  -  ;
   28 D1:AF43 -  -  -  -  ; ***************************************************************************************
   29 D1:AF43 -  -  -  -  ;
   30 D1:AF43 -  -  -  -  ;		Date			Notes
   31 D1:AF43 -  -  -  -  ;		==== 			=====
   32 D1:AF43 -  -  -  -  ;
   33 D1:AF43 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AF43 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AF43 -  -  -  -  ; ***************************************************************************************
    2 D1:AF43 -  -  -  -  ; ***************************************************************************************
    3 D1:AF43 -  -  -  -  ;
    4 D1:AF43 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AF43 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF43 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF43 -  -  -  -  ;		Reviewed :	No
    8 D1:AF43 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AF43 -  -  -  -  ;
   10 D1:AF43 -  -  -  -  ; ***************************************************************************************
   11 D1:AF43 -  -  -  -  ; ***************************************************************************************
   12 D1:AF43 -  -  -  -  
   13 D1:AF43 -  -  -  -  ; ***************************************************************************************
   14 D1:AF43 -  -  -  -  ;
   15 D1:AF43 -  -  -  -  ;								Chr$() unary function
   16 D1:AF43 -  -  -  -  ;
   17 D1:AF43 -  -  -  -  ; ***************************************************************************************
   18 D1:AF43 -  -  -  -  
   19 D1:AF43 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AF43 CD 6D AB D1 		call 	CheckDollar
   21 D1:AF47 CD A2 AD D1 		call 	EvaluateIntegerTerm
   22 D1:AF4B 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AF4C 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AF4E 21 1A A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AF52 36 0D -  -  		ld 		(hl),13
   26 D1:AF54 2B -  -  -  		dec 	hl
   27 D1:AF55 77 -  -  -  		ld 		(hl),a
   28 D1:AF56 C9 -  -  -  		ret
   29 D1:AF57 -  -  -  -  
   30 D1:AF57 -  -  -  -  ; ***************************************************************************************
   31 D1:AF57 -  -  -  -  ;
   32 D1:AF57 -  -  -  -  ;									Changes and Updates
   33 D1:AF57 -  -  -  -  ;
   34 D1:AF57 -  -  -  -  ; ***************************************************************************************
   35 D1:AF57 -  -  -  -  ;
   36 D1:AF57 -  -  -  -  ;		Date			Notes
   37 D1:AF57 -  -  -  -  ;		==== 			=====
   38 D1:AF57 -  -  -  -  ;
   39 D1:AF57 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF57 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AF57 -  -  -  -  ; ***************************************************************************************
    2 D1:AF57 -  -  -  -  ; ***************************************************************************************
    3 D1:AF57 -  -  -  -  ;
    4 D1:AF57 -  -  -  -  ;		Name : 		len.asm
    5 D1:AF57 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF57 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF57 -  -  -  -  ;		Reviewed :	None
    8 D1:AF57 -  -  -  -  ;		Purpose :	String Length
    9 D1:AF57 -  -  -  -  ;
   10 D1:AF57 -  -  -  -  ; ***************************************************************************************
   11 D1:AF57 -  -  -  -  ; ***************************************************************************************
   12 D1:AF57 -  -  -  -  
   13 D1:AF57 -  -  -  -  ; ***************************************************************************************
   14 D1:AF57 -  -  -  -  ;
   15 D1:AF57 -  -  -  -  ;								Len unary function
   16 D1:AF57 -  -  -  -  ;
   17 D1:AF57 -  -  -  -  ; ***************************************************************************************
   18 D1:AF57 -  -  -  -  
   19 D1:AF57 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AF57 CD B1 AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AF5B EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AF5C CD A0 AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AF60 -  -  -  -  _ULCount:
   24 D1:AF60 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AF61 FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AF63 D8 -  -  -  		ret 	c
   27 D1:AF64 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AF65 13 -  -  -  		inc 	de
   29 D1:AF66 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AF68 -  -  -  -  
   31 D1:AF68 -  -  -  -  ; ***************************************************************************************
   32 D1:AF68 -  -  -  -  ;
   33 D1:AF68 -  -  -  -  ;									Changes and Updates
   34 D1:AF68 -  -  -  -  ;
   35 D1:AF68 -  -  -  -  ; ***************************************************************************************
   36 D1:AF68 -  -  -  -  ;
   37 D1:AF68 -  -  -  -  ;		Date			Notes
   38 D1:AF68 -  -  -  -  ;		==== 			=====
   39 D1:AF68 -  -  -  -  ;
   40 D1:AF68 -  -  -  -  ; ***************************************************************************************
   41 D1:AF68 -  -  -  -  		
Listing for file "_build.asm"
   38 D1:AF68 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AF68 -  -  -  -  ; ***************************************************************************************
    2 D1:AF68 -  -  -  -  ; ***************************************************************************************
    3 D1:AF68 -  -  -  -  ;
    4 D1:AF68 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AF68 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF68 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF68 -  -  -  -  ;		Reviewed :	No
    8 D1:AF68 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AF68 -  -  -  -  ;
   10 D1:AF68 -  -  -  -  ; ***************************************************************************************
   11 D1:AF68 -  -  -  -  ; ***************************************************************************************
   12 D1:AF68 -  -  -  -  
   13 D1:AF68 -  -  -  -  ; ***************************************************************************************
   14 D1:AF68 -  -  -  -  ;
   15 D1:AF68 -  -  -  -  ;								Str$() unary function
   16 D1:AF68 -  -  -  -  ;
   17 D1:AF68 -  -  -  -  ; ***************************************************************************************
   18 D1:AF68 -  -  -  -  
   19 D1:AF68 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AF68 CD A2 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AF6C CD 28 AE D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AF70 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AF72 C9 -  -  -  		ret
   24 D1:AF73 -  -  -  -  
   25 D1:AF73 -  -  -  -  ; ***************************************************************************************
   26 D1:AF73 -  -  -  -  ;
   27 D1:AF73 -  -  -  -  ;									Changes and Updates
   28 D1:AF73 -  -  -  -  ;
   29 D1:AF73 -  -  -  -  ; ***************************************************************************************
   30 D1:AF73 -  -  -  -  ;
   31 D1:AF73 -  -  -  -  ;		Date			Notes
   32 D1:AF73 -  -  -  -  ;		==== 			=====
   33 D1:AF73 -  -  -  -  ;
   34 D1:AF73 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AF73 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AF73 -  -  -  -  ; ***************************************************************************************
    2 D1:AF73 -  -  -  -  ; ***************************************************************************************
    3 D1:AF73 -  -  -  -  ;
    4 D1:AF73 -  -  -  -  ;		Name : 		not.asm
    5 D1:AF73 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF73 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AF73 -  -  -  -  ;		Reviewed :	No
    8 D1:AF73 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AF73 -  -  -  -  ;
   10 D1:AF73 -  -  -  -  ; ***************************************************************************************
   11 D1:AF73 -  -  -  -  ; ***************************************************************************************
   12 D1:AF73 -  -  -  -  
   13 D1:AF73 -  -  -  -  ; ***************************************************************************************
   14 D1:AF73 -  -  -  -  ;
   15 D1:AF73 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AF73 -  -  -  -  ;
   17 D1:AF73 -  -  -  -  ; ***************************************************************************************
   18 D1:AF73 -  -  -  -  
   19 D1:AF73 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AF73 CD A2 AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AF77 CD 80 AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AF7B CD 80 AF D1 		call 	__UNSwap		
   23 D1:AF7F C9 -  -  -  		ret
   24 D1:AF80 -  -  -  -  
   25 D1:AF80 -  -  -  -  __UNSwap:
   26 D1:AF80 7C -  -  -  		ld 		a,h
   27 D1:AF81 2F -  -  -  		cpl
   28 D1:AF82 67 -  -  -  		ld 		h,a
   29 D1:AF83 7D -  -  -  		ld 		a,l
   30 D1:AF84 2F -  -  -  		cpl 	
   31 D1:AF85 6F -  -  -  		ld 		l,a
   32 D1:AF86 D9 -  -  -  		exx
   33 D1:AF87 C9 -  -  -  		ret
   34 D1:AF88 -  -  -  -  
   35 D1:AF88 -  -  -  -  ; ***************************************************************************************
   36 D1:AF88 -  -  -  -  ;
   37 D1:AF88 -  -  -  -  ;									Changes and Updates
   38 D1:AF88 -  -  -  -  ;
   39 D1:AF88 -  -  -  -  ; ***************************************************************************************
   40 D1:AF88 -  -  -  -  ;
   41 D1:AF88 -  -  -  -  ;		Date			Notes
   42 D1:AF88 -  -  -  -  ;		==== 			=====
   43 D1:AF88 -  -  -  -  ;
   44 D1:AF88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AF88 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AF88 -  -  -  -  ; ***************************************************************************************
    2 D1:AF88 -  -  -  -  ; ***************************************************************************************
    3 D1:AF88 -  -  -  -  ;
    4 D1:AF88 -  -  -  -  ;		Name : 		page.asm
    5 D1:AF88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF88 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF88 -  -  -  -  ;		Reviewed :	No
    8 D1:AF88 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AF88 -  -  -  -  ;
   10 D1:AF88 -  -  -  -  ; ***************************************************************************************
   11 D1:AF88 -  -  -  -  ; ***************************************************************************************
   12 D1:AF88 -  -  -  -  
   13 D1:AF88 -  -  -  -  ; ***************************************************************************************
   14 D1:AF88 -  -  -  -  ;
   15 D1:AF88 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AF88 -  -  -  -  ;
   17 D1:AF88 -  -  -  -  ; ***************************************************************************************
   18 D1:AF88 -  -  -  -  
   19 D1:AF88 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AF88 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AF8C D9 -  -  -  			exx
   22 D1:AF8D 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AF91 D9 -  -  -  			exx
   24 D1:AF92 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF94 C9 -  -  -  			ret
   26 D1:AF95 -  -  -  -  
   27 D1:AF95 -  -  -  -  ; ***************************************************************************************
   28 D1:AF95 -  -  -  -  ;
   29 D1:AF95 -  -  -  -  ;									Changes and Updates
   30 D1:AF95 -  -  -  -  ;
   31 D1:AF95 -  -  -  -  ; ***************************************************************************************
   32 D1:AF95 -  -  -  -  ;
   33 D1:AF95 -  -  -  -  ;		Date			Notes
   34 D1:AF95 -  -  -  -  ;		==== 			=====
   35 D1:AF95 -  -  -  -  ;
   36 D1:AF95 -  -  -  -  ; ***************************************************************************************
   37 D1:AF95 -  -  -  -  			
Listing for file "_build.asm"
   41 D1:AF95 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AF95 -  -  -  -  ; ***************************************************************************************
    2 D1:AF95 -  -  -  -  ; ***************************************************************************************
    3 D1:AF95 -  -  -  -  ;
    4 D1:AF95 -  -  -  -  ;		Name : 		random.asm
    5 D1:AF95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF95 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF95 -  -  -  -  ;		Reviewed :	No
    8 D1:AF95 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AF95 -  -  -  -  ;
   10 D1:AF95 -  -  -  -  ; ***************************************************************************************
   11 D1:AF95 -  -  -  -  ; ***************************************************************************************
   12 D1:AF95 -  -  -  -  
   13 D1:AF95 -  -  -  -  ; ***************************************************************************************
   14 D1:AF95 -  -  -  -  ;
   15 D1:AF95 -  -  -  -  ;								Random unary function
   16 D1:AF95 -  -  -  -  ;
   17 D1:AF95 -  -  -  -  ; ***************************************************************************************
   18 D1:AF95 -  -  -  -  
   19 D1:AF95 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AF95 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AF9D CD A2 AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AFA1 D9 -  -  -  		exx 								; is it -ve
   23 D1:AFA2 CB 7C -  -  		bit 	7,h
   24 D1:AFA4 D9 -  -  -  		exx
   25 D1:AFA5 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AFA7 22 ED A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AFAB D9 -  -  -  		exx
   28 D1:AFAC 22 F1 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AFB0 D9 -  -  -  		exx
   30 D1:AFB1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AFB3 C9 -  -  -  		ret
   32 D1:AFB4 -  -  -  -  _URDontSeed:		
   33 D1:AFB4 -  -  -  -  
   34 D1:AFB4 CD 57 B6 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AFB8 28 1C -  -  		jr 		z,_URFail
   36 D1:AFBA E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AFBB D9 -  -  -  		exx
   38 D1:AFBC E5 -  -  -  		push 	hl
   39 D1:AFBD D9 -  -  -  		exx
   40 D1:AFBE -  -  -  -  		;
   41 D1:AFBE CD E7 AF D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AFC2 D9 -  -  -  		exx
   43 D1:AFC3 CD E7 AF D1 		call 	URandomHL
   44 D1:AFC7 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AFC9 D9 -  -  -  		exx
   46 D1:AFCA -  -  -  -  		;
   47 D1:AFCA D9 -  -  -  		exx 								; restore range.
   48 D1:AFCB D1 -  -  -  		pop 	de
   49 D1:AFCC D9 -  -  -  		exx
   50 D1:AFCD D1 -  -  -  		pop 	de
   51 D1:AFCE -  -  -  -  		;
   52 D1:AFCE CD E8 B4 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AFD2 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AFD3 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AFD5 C9 -  -  -  		ret
   56 D1:AFD6 -  -  -  -  _URFail:
   57 D1:AFD6 3E 03 C3 95 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:AFDC -  -  -  -  ; ***************************************************************************************
   59 D1:AFDC -  -  -  -  ;
   60 D1:AFDC -  -  -  -  ; 									Push RNG off zero
   61 D1:AFDC -  -  -  -  ;
   62 D1:AFDC -  -  -  -  ; ***************************************************************************************
   63 D1:AFDC -  -  -  -  
   64 D1:AFDC -  -  -  -  UnaryRandomInitialise:
   65 D1:AFDC 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AFDE -  -  -  -  _URILoop:
   67 D1:AFDE C5 -  -  -  		push 	bc
   68 D1:AFDF CD E7 AF D1 		call 	URandomHL
   69 D1:AFE3 C1 -  -  -  		pop 	bc
   70 D1:AFE4 10 F8 -  -  		djnz 	_URILoop
   71 D1:AFE6 C9 -  -  -  		ret
   72 D1:AFE7 -  -  -  -  
   73 D1:AFE7 -  -  -  -  ; ***************************************************************************************
   74 D1:AFE7 -  -  -  -  ;
   75 D1:AFE7 -  -  -  -  ;							16 bit random number generator
   76 D1:AFE7 -  -  -  -  ;
   77 D1:AFE7 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AFE7 -  -  -  -  ;		Actual author unspecified.
   79 D1:AFE7 -  -  -  -  ;
   80 D1:AFE7 -  -  -  -  ; ***************************************************************************************
   81 D1:AFE7 -  -  -  -  
   82 D1:AFE7 -  -  -  -  URandomHL:
   83 D1:AFE7 2A ED A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AFEB ED 5B F1 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AFF0 44 -  -  -  	    ld 		b,h
   86 D1:AFF1 4D -  -  -  	    ld 		c,l
   87 D1:AFF2 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AFF7 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AFFC 2C -  -  -  	    inc 	l
   90 D1:AFFD 09 -  -  -  	    add 	hl,bc
   91 D1:AFFE 22 ED A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B002 2A F1 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B006 ED 5A -  -  	    adc 	hl,de
   94 D1:B008 22 F1 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B00C EB -  -  -  	    ex 		de,hl
   96 D1:B00D 2A F5 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B011 ED 4B F9 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B016 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B01B ED 43 F9 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B020 9F -  -  -  	    sbc 	a,a
  101 D1:B021 E6 C5 -  -  	    and 	%11000101
  102 D1:B023 AD -  -  -  	    xor 	l
  103 D1:B024 6F -  -  -  	    ld 		l,a
  104 D1:B025 22 F5 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B029 EB -  -  -  	    ex 		de,hl
  106 D1:B02A 09 -  -  -  	    add 	hl,bc
  107 D1:B02B C9 -  -  -  	    ret		
  108 D1:B02C -  -  -  -  
  109 D1:B02C -  -  -  -  ; ***************************************************************************************
  110 D1:B02C -  -  -  -  ;
  111 D1:B02C -  -  -  -  ;									Changes and Updates
  112 D1:B02C -  -  -  -  ;
  113 D1:B02C -  -  -  -  ; ***************************************************************************************
  114 D1:B02C -  -  -  -  ;
  115 D1:B02C -  -  -  -  ;		Date			Notes
  116 D1:B02C -  -  -  -  ;		==== 			=====
  117 D1:B02C -  -  -  -  ;
  118 D1:B02C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:B02C -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B02C -  -  -  -  ; ***************************************************************************************
    2 D1:B02C -  -  -  -  ; ***************************************************************************************
    3 D1:B02C -  -  -  -  ;
    4 D1:B02C -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B02C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B02C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B02C -  -  -  -  ;		Reviewed :	No
    8 D1:B02C -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B02C -  -  -  -  ;
   10 D1:B02C -  -  -  -  ; ***************************************************************************************
   11 D1:B02C -  -  -  -  ; ***************************************************************************************
   12 D1:B02C -  -  -  -  
   13 D1:B02C -  -  -  -  ; ***************************************************************************************
   14 D1:B02C -  -  -  -  ;
   15 D1:B02C -  -  -  -  ;								sgn unary function
   16 D1:B02C -  -  -  -  ;
   17 D1:B02C -  -  -  -  ; ***************************************************************************************
   18 D1:B02C -  -  -  -  
   19 D1:B02C -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B02C CD A2 AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B030 CD 57 B6 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B034 CA A0 AC D1 		jp 		z,UnaryInt32False
   23 D1:B038 D9 -  -  -  		exx
   24 D1:B039 CB 7C -  -  		bit 	7,h
   25 D1:B03B D9 -  -  -  		exx
   26 D1:B03C C2 9C AC D1 		jp 		nz,UnaryInt32True
   27 D1:B040 3E 01 -  -  		ld 		a,1
   28 D1:B042 C3 ED AD D1 		jp 		Return8BitConstant
   29 D1:B046 -  -  -  -  
   30 D1:B046 -  -  -  -  ; ***************************************************************************************
   31 D1:B046 -  -  -  -  ;
   32 D1:B046 -  -  -  -  ;									Changes and Updates
   33 D1:B046 -  -  -  -  ;
   34 D1:B046 -  -  -  -  ; ***************************************************************************************
   35 D1:B046 -  -  -  -  ;
   36 D1:B046 -  -  -  -  ;		Date			Notes
   37 D1:B046 -  -  -  -  ;		==== 			=====
   38 D1:B046 -  -  -  -  ;
   39 D1:B046 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B046 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B046 -  -  -  -  ; ***************************************************************************************
    2 D1:B046 -  -  -  -  ; ***************************************************************************************
    3 D1:B046 -  -  -  -  ;
    4 D1:B046 -  -  -  -  ;		Name : 		simple.asm
    5 D1:B046 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B046 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B046 -  -  -  -  ;		Reviewed :	No
    8 D1:B046 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B046 -  -  -  -  ;
   10 D1:B046 -  -  -  -  ; ***************************************************************************************
   11 D1:B046 -  -  -  -  ; ***************************************************************************************
   12 D1:B046 -  -  -  -  
   13 D1:B046 -  -  -  -  ; ***************************************************************************************
   14 D1:B046 -  -  -  -  ;
   15 D1:B046 -  -  -  -  ;								( unary function (think about it)
   16 D1:B046 -  -  -  -  ;
   17 D1:B046 -  -  -  -  ; ***************************************************************************************
   18 D1:B046 -  -  -  -  
   19 D1:B046 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B046 CD 49 AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B04A C3 5F AB D1 		jp  	CheckRightBracket
   22 D1:B04E -  -  -  -  
   23 D1:B04E -  -  -  -  ; ***************************************************************************************
   24 D1:B04E -  -  -  -  ;
   25 D1:B04E -  -  -  -  ;									Handle &x
   26 D1:B04E -  -  -  -  ;
   27 D1:B04E -  -  -  -  ; ***************************************************************************************
   28 D1:B04E -  -  -  -  
   29 D1:B04E -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B04E DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B051 E6 C0 -  -  		and 		$C0
   32 D1:B053 FE 40 -  -  		cp 			$40
   33 D1:B055 C2 FF AB D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B059 C3 57 AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B05D -  -  -  -  
   36 D1:B05D -  -  -  -  ; ***************************************************************************************
   37 D1:B05D -  -  -  -  ;
   38 D1:B05D -  -  -  -  ;									Changes and Updates
   39 D1:B05D -  -  -  -  ;
   40 D1:B05D -  -  -  -  ; ***************************************************************************************
   41 D1:B05D -  -  -  -  ;
   42 D1:B05D -  -  -  -  ;		Date			Notes
   43 D1:B05D -  -  -  -  ;		==== 			=====
   44 D1:B05D -  -  -  -  ;
   45 D1:B05D -  -  -  -  ; ***************************************************************************************
   46 D1:B05D -  -  -  -  		
Listing for file "_build.asm"
   44 D1:B05D -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B05D -  -  -  -  ; ***************************************************************************************
    2 D1:B05D -  -  -  -  ; ***************************************************************************************
    3 D1:B05D -  -  -  -  ;
    4 D1:B05D -  -  -  -  ;		Name : 		str.asm
    5 D1:B05D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B05D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B05D -  -  -  -  ;		Reviewed :	No
    8 D1:B05D -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B05D -  -  -  -  ;
   10 D1:B05D -  -  -  -  ; ***************************************************************************************
   11 D1:B05D -  -  -  -  ; ***************************************************************************************
   12 D1:B05D -  -  -  -  
   13 D1:B05D -  -  -  -  ; ***************************************************************************************
   14 D1:B05D -  -  -  -  ;
   15 D1:B05D -  -  -  -  ;								Str$() unary function
   16 D1:B05D -  -  -  -  ;
   17 D1:B05D -  -  -  -  ; ***************************************************************************************
   18 D1:B05D -  -  -  -  
   19 D1:B05D -  -  -  -  Unary_Str:	;; [str]
   20 D1:B05D CD 6D AB D1 		call 	CheckDollar
   21 D1:B061 CD A2 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:B065 01 09 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:B069 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:B06B CD 9F B6 D1 		call 	Int32ToString 				
   25 D1:B06F 21 09 A9 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:B073 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:B075 C9 -  -  -  		ret
   28 D1:B076 -  -  -  -  
   29 D1:B076 -  -  -  -  ; ***************************************************************************************
   30 D1:B076 -  -  -  -  ;
   31 D1:B076 -  -  -  -  ;									Changes and Updates
   32 D1:B076 -  -  -  -  ;
   33 D1:B076 -  -  -  -  ; ***************************************************************************************
   34 D1:B076 -  -  -  -  ;
   35 D1:B076 -  -  -  -  ;		Date			Notes
   36 D1:B076 -  -  -  -  ;		==== 			=====
   37 D1:B076 -  -  -  -  ;
   38 D1:B076 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:B076 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B076 -  -  -  -  ; ***************************************************************************************
    2 D1:B076 -  -  -  -  ; ***************************************************************************************
    3 D1:B076 -  -  -  -  ;
    4 D1:B076 -  -  -  -  ;		Name : 		time.asm
    5 D1:B076 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B076 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B076 -  -  -  -  ;		Reviewed :	No
    8 D1:B076 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B076 -  -  -  -  ;
   10 D1:B076 -  -  -  -  ; ***************************************************************************************
   11 D1:B076 -  -  -  -  ; ***************************************************************************************
   12 D1:B076 -  -  -  -  
   13 D1:B076 -  -  -  -  ; ***************************************************************************************
   14 D1:B076 -  -  -  -  ;
   15 D1:B076 -  -  -  -  ;							Get system time in ms
   16 D1:B076 -  -  -  -  ;
   17 D1:B076 -  -  -  -  ; ***************************************************************************************
   18 D1:B076 -  -  -  -  
   19 D1:B076 -  -  -  -  Unary_Time:	;; [time]
   20 D1:B076 CD 62 B7 D1 			call 	SYSGetTimer
   21 D1:B07A 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B07C C9 -  -  -  			ret
   23 D1:B07D -  -  -  -  
   24 D1:B07D -  -  -  -  ; ***************************************************************************************
   25 D1:B07D -  -  -  -  ;
   26 D1:B07D -  -  -  -  ;									Changes and Updates
   27 D1:B07D -  -  -  -  ;
   28 D1:B07D -  -  -  -  ; ***************************************************************************************
   29 D1:B07D -  -  -  -  ;
   30 D1:B07D -  -  -  -  ;		Date			Notes
   31 D1:B07D -  -  -  -  ;		==== 			=====
   32 D1:B07D -  -  -  -  ;
   33 D1:B07D -  -  -  -  ; ***************************************************************************************
   34 D1:B07D -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B07D -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B07D -  -  -  -  ; ***************************************************************************************
    2 D1:B07D -  -  -  -  ; ***************************************************************************************
    3 D1:B07D -  -  -  -  ;
    4 D1:B07D -  -  -  -  ;		Name : 		top.asm
    5 D1:B07D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B07D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B07D -  -  -  -  ;		Reviewed :	No
    8 D1:B07D -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B07D -  -  -  -  ;
   10 D1:B07D -  -  -  -  ; ***************************************************************************************
   11 D1:B07D -  -  -  -  ; ***************************************************************************************
   12 D1:B07D -  -  -  -  
   13 D1:B07D -  -  -  -  ; ***************************************************************************************
   14 D1:B07D -  -  -  -  ;
   15 D1:B07D -  -  -  -  ;							page unary function (no bracket)
   16 D1:B07D -  -  -  -  ;
   17 D1:B07D -  -  -  -  ; ***************************************************************************************
   18 D1:B07D -  -  -  -  
   19 D1:B07D -  -  -  -  Unary_Top:	;; [top]
   20 D1:B07D 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B081 D9 -  -  -  			exx
   22 D1:B082 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B086 D9 -  -  -  			exx
   24 D1:B087 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B089 C9 -  -  -  			ret
   26 D1:B08A -  -  -  -  
   27 D1:B08A -  -  -  -  ; ***************************************************************************************
   28 D1:B08A -  -  -  -  ;
   29 D1:B08A -  -  -  -  ;									Changes and Updates
   30 D1:B08A -  -  -  -  ;
   31 D1:B08A -  -  -  -  ; ***************************************************************************************
   32 D1:B08A -  -  -  -  ;
   33 D1:B08A -  -  -  -  ;		Date			Notes
   34 D1:B08A -  -  -  -  ;		==== 			=====
   35 D1:B08A -  -  -  -  ;
   36 D1:B08A -  -  -  -  ; ***************************************************************************************
   37 D1:B08A -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B08A -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B08A -  -  -  -  ; ***************************************************************************************
    2 D1:B08A -  -  -  -  ; ***************************************************************************************
    3 D1:B08A -  -  -  -  ;
    4 D1:B08A -  -  -  -  ;		Name : 		val.asm
    5 D1:B08A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B08A -  -  -  -  ;		Reviewed :	No
    8 D1:B08A -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B08A -  -  -  -  ;
   10 D1:B08A -  -  -  -  ; ***************************************************************************************
   11 D1:B08A -  -  -  -  ; ***************************************************************************************
   12 D1:B08A -  -  -  -  
   13 D1:B08A -  -  -  -  ; ***************************************************************************************
   14 D1:B08A -  -  -  -  ;
   15 D1:B08A -  -  -  -  ;								val( unary function
   16 D1:B08A -  -  -  -  ;
   17 D1:B08A -  -  -  -  ; ***************************************************************************************
   18 D1:B08A -  -  -  -  
   19 D1:B08A -  -  -  -  Unary_Val:	;; [val]
   20 D1:B08A CD B1 AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B08E E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B08F C1 -  -  -  		pop 	bc
   23 D1:B090 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B092 CD 7D B5 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B096 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B098 C8 -  -  -  		ret		z 							; okay
   27 D1:B099 3E 03 C3 95 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B09F -  -  -  -  
   29 D1:B09F -  -  -  -  ; ***************************************************************************************
   30 D1:B09F -  -  -  -  ;
   31 D1:B09F -  -  -  -  ;									Changes and Updates
   32 D1:B09F -  -  -  -  ;
   33 D1:B09F -  -  -  -  ; ***************************************************************************************
   34 D1:B09F -  -  -  -  ;
   35 D1:B09F -  -  -  -  ;		Date			Notes
   36 D1:B09F -  -  -  -  ;		==== 			=====
   37 D1:B09F -  -  -  -  ;
   38 D1:B09F -  -  -  -  ; ***************************************************************************************
   39 D1:B09F -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B09F -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B09F -  -  -  -  ; ***************************************************************************************
    2 D1:B09F -  -  -  -  ; ***************************************************************************************
    3 D1:B09F -  -  -  -  ;
    4 D1:B09F -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B09F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B09F -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B09F -  -  -  -  ;		Reviewed :	No
    8 D1:B09F -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B09F -  -  -  -  ;
   10 D1:B09F -  -  -  -  ; ***************************************************************************************
   11 D1:B09F -  -  -  -  ; ***************************************************************************************
   12 D1:B09F -  -  -  -  
   13 D1:B09F -  -  -  -  ; ***************************************************************************************
   14 D1:B09F -  -  -  -  ;
   15 D1:B09F -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B09F -  -  -  -  ;
   17 D1:B09F -  -  -  -  ; ***************************************************************************************
   18 D1:B09F -  -  -  -  
   19 D1:B09F -  -  -  -  AllocateBytes:
   20 D1:B09F EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B0A0 21 00 00 00 		ld 		hl,$000000
   22 D1:B0A4 62 -  -  -  		ld 		h,d
   23 D1:B0A5 6B -  -  -  		ld 		l,e
   24 D1:B0A6 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   25 D1:B0AB D5 -  -  -  		push 	de 							; save on stack
   26 D1:B0AC 19 -  -  -  		add 	hl,de 						; HL is the new highest
   27 D1:B0AD 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   28 D1:B0B1 EB -  -  -  		ex 		de,hl 						; put in DE
   29 D1:B0B2 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   30 D1:B0B6 AF -  -  -  		xor 	a
   31 D1:B0B7 ED 52 -  -  		sbc 	hl,de
   32 D1:B0B9 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   33 D1:B0BA D0 -  -  -  		ret 	nc 							; return if high >= low
   34 D1:B0BB 3E 07 C3 95 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   35 D1:B0C1 -  -  -  -  
   36 D1:B0C1 -  -  -  -  ; ***************************************************************************************
   37 D1:B0C1 -  -  -  -  ;
   38 D1:B0C1 -  -  -  -  ;									Changes and Updates
   39 D1:B0C1 -  -  -  -  ;
   40 D1:B0C1 -  -  -  -  ; ***************************************************************************************
   41 D1:B0C1 -  -  -  -  ;
   42 D1:B0C1 -  -  -  -  ;		Date			Notes
   43 D1:B0C1 -  -  -  -  ;		==== 			=====
   44 D1:B0C1 -  -  -  -  ;
   45 D1:B0C1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B0C1 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B0C1 -  -  -  -  ; ***************************************************************************************
    2 D1:B0C1 -  -  -  -  ; ***************************************************************************************
    3 D1:B0C1 -  -  -  -  ;
    4 D1:B0C1 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B0C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0C1 -  -  -  -  ;		Reviewed :	No
    8 D1:B0C1 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B0C1 -  -  -  -  ;
   10 D1:B0C1 -  -  -  -  ; ***************************************************************************************
   11 D1:B0C1 -  -  -  -  ; ***************************************************************************************
   12 D1:B0C1 -  -  -  -  
   13 D1:B0C1 -  -  -  -  ; ***************************************************************************************
   14 D1:B0C1 -  -  -  -  ;
   15 D1:B0C1 -  -  -  -  ;										CLEAR command
   16 D1:B0C1 -  -  -  -  ;
   17 D1:B0C1 -  -  -  -  ; ***************************************************************************************
   18 D1:B0C1 -  -  -  -  
   19 D1:B0C1 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B0C1 -  -  -  -  		;
   21 D1:B0C1 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B0C1 -  -  -  -  		;
   23 D1:B0C1 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B0C5 -  -  -  -  _CCFindLow:
   25 D1:B0C5 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B0C9 5E -  -  -  		ld 		e,(hl)		
   27 D1:B0CA 19 -  -  -  		add 	hl,de
   28 D1:B0CB 7B -  -  -  		ld 		a,e
   29 D1:B0CC B7 -  -  -  		or 		a
   30 D1:B0CD 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B0CF 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B0D0 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B0D4 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B0D5 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B0D9 -  -  -  -  		;
   36 D1:B0D9 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B0D9 -  -  -  -  		;
   38 D1:B0D9 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B0DD -  -  -  -  		;
   40 D1:B0DD 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B0DF 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B0E3 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B0E7 19 -  -  -  		add 	hl,de
   44 D1:B0E8 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B0EA 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B0EE -  -  -  -  		;
   47 D1:B0EE 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B0F2 19 -  -  -  		add 	hl,de
   49 D1:B0F3 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B0F7 -  -  -  -  		;
   51 D1:B0F7 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 D1:B0F7 -  -  -  -  		;
   53 D1:B0F7 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 D1:B0FB -  -  -  -  _CCFClearHT:
   55 D1:B0FB 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 D1:B0FC 36 00 -  -  		ld 		(hl),0
   57 D1:B0FE 1B -  -  -  		dec 	de
   58 D1:B0FF 7A -  -  -  		ld 		a,d
   59 D1:B100 B3 -  -  -  		or 		e
   60 D1:B101 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 D1:B103 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   62 D1:B107 -  -  -  -  		;
   63 D1:B107 -  -  -  -  		; 		Save highest byte that can be allocate
   64 D1:B107 -  -  -  -  		;
   65 D1:B107 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   66 D1:B10B -  -  -  -  		;
   67 D1:B10B -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 D1:B10B -  -  -  -  		;
   69 D1:B10B CD DC AF D1 		call 	UnaryRandomInitialise
   70 D1:B10F C9 -  -  -  		ret
   71 D1:B110 -  -  -  -  
   72 D1:B110 -  -  -  -  ; ***************************************************************************************
   73 D1:B110 -  -  -  -  ;
   74 D1:B110 -  -  -  -  ;									Changes and Updates
   75 D1:B110 -  -  -  -  ;
   76 D1:B110 -  -  -  -  ; ***************************************************************************************
   77 D1:B110 -  -  -  -  ;
   78 D1:B110 -  -  -  -  ;		Date			Notes
   79 D1:B110 -  -  -  -  ;		==== 			=====
   80 D1:B110 -  -  -  -  ;
   81 D1:B110 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B110 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B110 -  -  -  -  ; ***************************************************************************************
    2 D1:B110 -  -  -  -  ; ***************************************************************************************
    3 D1:B110 -  -  -  -  ;
    4 D1:B110 -  -  -  -  ;		Name : 		instance.asm
    5 D1:B110 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B110 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B110 -  -  -  -  ;		Reviewed :	No
    8 D1:B110 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B110 -  -  -  -  ;
   10 D1:B110 -  -  -  -  ; ***************************************************************************************
   11 D1:B110 -  -  -  -  ; ***************************************************************************************
   12 D1:B110 -  -  -  -  
   13 D1:B110 -  -  -  -  ; ***************************************************************************************
   14 D1:B110 -  -  -  -  ;
   15 D1:B110 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B110 -  -  -  -  ;
   17 D1:B110 -  -  -  -  ; ***************************************************************************************
   18 D1:B110 -  -  -  -  
   19 D1:B110 -  -  -  -  SetCurrentInstance:
   20 D1:B110 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B115 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B119 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B11E -  -  -  -  
   24 D1:B11E C9 -  -  -  		ret
   25 D1:B11F -  -  -  -  
   26 D1:B11F -  -  -  -  
   27 D1:B11F -  -  -  -  ; ***************************************************************************************
   28 D1:B11F -  -  -  -  ;
   29 D1:B11F -  -  -  -  ;									Changes and Updates
   30 D1:B11F -  -  -  -  ;
   31 D1:B11F -  -  -  -  ; ***************************************************************************************
   32 D1:B11F -  -  -  -  ;
   33 D1:B11F -  -  -  -  ;		Date			Notes
   34 D1:B11F -  -  -  -  ;		==== 			=====
   35 D1:B11F -  -  -  -  ;
   36 D1:B11F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B11F -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B11F -  -  -  -  ; ***************************************************************************************
    2 D1:B11F -  -  -  -  ; ***************************************************************************************
    3 D1:B11F -  -  -  -  ;
    4 D1:B11F -  -  -  -  ;		Name : 		new.asm
    5 D1:B11F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B11F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B11F -  -  -  -  ;		Reviewed :	No
    8 D1:B11F -  -  -  -  ;		Purpose :	New command.
    9 D1:B11F -  -  -  -  ;
   10 D1:B11F -  -  -  -  ; ***************************************************************************************
   11 D1:B11F -  -  -  -  ; ***************************************************************************************
   12 D1:B11F -  -  -  -  
   13 D1:B11F -  -  -  -  ; ***************************************************************************************
   14 D1:B11F -  -  -  -  ;
   15 D1:B11F -  -  -  -  ;										NEW command
   16 D1:B11F -  -  -  -  ;
   17 D1:B11F -  -  -  -  ; ***************************************************************************************
   18 D1:B11F -  -  -  -  
   19 D1:B11F -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B11F 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B123 36 00 -  -  		ld 		(hl),0
   22 D1:B125 CD C1 B0 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B129 3E 00 C3 95 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B12F -  -  -  -  
   25 D1:B12F -  -  -  -  ; ***************************************************************************************
   26 D1:B12F -  -  -  -  ;
   27 D1:B12F -  -  -  -  ;									Changes and Updates
   28 D1:B12F -  -  -  -  ;
   29 D1:B12F -  -  -  -  ; ***************************************************************************************
   30 D1:B12F -  -  -  -  ;
   31 D1:B12F -  -  -  -  ;		Date			Notes
   32 D1:B12F -  -  -  -  ;		==== 			=====
   33 D1:B12F -  -  -  -  ;
   34 D1:B12F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B12F -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B12F -  -  -  -  ; ***************************************************************************************
    2 D1:B12F -  -  -  -  ; ***************************************************************************************
    3 D1:B12F -  -  -  -  ;
    4 D1:B12F -  -  -  -  ;		Name : 		utility.asm
    5 D1:B12F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B12F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B12F -  -  -  -  ;		Reviewed :	No
    8 D1:B12F -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B12F -  -  -  -  ;
   10 D1:B12F -  -  -  -  ; ***************************************************************************************
   11 D1:B12F -  -  -  -  ; ***************************************************************************************
   12 D1:B12F -  -  -  -  
   13 D1:B12F -  -  -  -  ; ***************************************************************************************
   14 D1:B12F -  -  -  -  ;
   15 D1:B12F -  -  -  -  ;							Print ASCII string at HL
   16 D1:B12F -  -  -  -  ;
   17 D1:B12F -  -  -  -  ; ***************************************************************************************
   18 D1:B12F -  -  -  -  
   19 D1:B12F -  -  -  -  PrintStringAtHL:
   20 D1:B12F 7E -  -  -  		ld 		a,(hl)
   21 D1:B130 FE 20 -  -  		cp 		$20		
   22 D1:B132 D8 -  -  -  		ret 	c
   23 D1:B133 CD 12 B7 D1 		call 	SYSPrintChar
   24 D1:B137 23 -  -  -  		inc 	hl
   25 D1:B138 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B13A -  -  -  -  
   27 D1:B13A -  -  -  -  ; ***************************************************************************************
   28 D1:B13A -  -  -  -  ;
   29 D1:B13A -  -  -  -  ;									Changes and Updates
   30 D1:B13A -  -  -  -  ;
   31 D1:B13A -  -  -  -  ; ***************************************************************************************
   32 D1:B13A -  -  -  -  ;
   33 D1:B13A -  -  -  -  ;		Date			Notes
   34 D1:B13A -  -  -  -  ;		==== 			=====
   35 D1:B13A -  -  -  -  ;
   36 D1:B13A -  -  -  -  ; ***************************************************************************************
   37 D1:B13A -  -  -  -  		
Listing for file "_build.asm"
   53 D1:B13A -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B13A -  -  -  -  ; ***************************************************************************************
    2 D1:B13A -  -  -  -  ; ***************************************************************************************
    3 D1:B13A -  -  -  -  ;
    4 D1:B13A -  -  -  -  ;		Name : 		create.asm
    5 D1:B13A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B13A -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B13A -  -  -  -  ;		Reviewed :	No
    8 D1:B13A -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B13A -  -  -  -  ;
   10 D1:B13A -  -  -  -  ; ***************************************************************************************
   11 D1:B13A -  -  -  -  ; ***************************************************************************************
   12 D1:B13A -  -  -  -  
   13 D1:B13A -  -  -  -  ; ***************************************************************************************
   14 D1:B13A -  -  -  -  ;
   15 D1:B13A -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B13A -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B13A -  -  -  -  ;
   18 D1:B13A -  -  -  -  ; ***************************************************************************************
   19 D1:B13A -  -  -  -  
   20 D1:B13A -  -  -  -  VariableCreate:		
   21 D1:B13A -  -  -  -  		;
   22 D1:B13A -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 D1:B13A -  -  -  -  		;
   24 D1:B13A 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   25 D1:B13E 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B13F E5 -  -  -  		push 	hl 							; save count.
   27 D1:B140 CD 9F B0 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B144 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B145 -  -  -  -  		;
   30 D1:B145 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B145 -  -  -  -  		;
   32 D1:B145 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B146 -  -  -  -  _VCClear:
   34 D1:B146 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B148 23 -  -  -  		inc 	hl
   36 D1:B149 0B -  -  -  		dec 	bc
   37 D1:B14A 78 -  -  -  		ld		a,b
   38 D1:B14B B1 -  -  -  		or 		c
   39 D1:B14C 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B14E E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B14F -  -  -  -  		;
   42 D1:B14F -  -  -  -  		;		Now start to create the data.
   43 D1:B14F -  -  -  -  		;
   44 D1:B14F E5 -  -  -  		push 	hl 							; save start
   45 D1:B150 -  -  -  -  		;
   46 D1:B150 -  -  -  -  		;		Write hash to +0
   47 D1:B150 -  -  -  -  		;
   48 D1:B150 3A 03 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B154 77 -  -  -  		ld 		(hl),a
   50 D1:B155 23 -  -  -  		inc 	hl
   51 D1:B156 -  -  -  -  		;
   52 D1:B156 -  -  -  -  		;		Write list head to +1
   53 D1:B156 -  -  -  -  		;
   54 D1:B156 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B157 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B15B ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B15D EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B15E E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B15F ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B165 -  -  -  -  		;
   61 D1:B165 -  -  -  -  		;		Write variable name to +5
   62 D1:B165 -  -  -  -  		;
   63 D1:B165 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B16A ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B170 -  -  -  -  		;
   66 D1:B170 D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B171 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B175 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B17B -  -  -  -  		;
   70 D1:B17B EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B17C C9 -  -  -  		ret
   72 D1:B17D -  -  -  -  
   73 D1:B17D -  -  -  -  ; ***************************************************************************************
   74 D1:B17D -  -  -  -  ;
   75 D1:B17D -  -  -  -  ;									Changes and Updates
   76 D1:B17D -  -  -  -  ;
   77 D1:B17D -  -  -  -  ; ***************************************************************************************
   78 D1:B17D -  -  -  -  ;
   79 D1:B17D -  -  -  -  ;		Date			Notes
   80 D1:B17D -  -  -  -  ;		==== 			=====
   81 D1:B17D -  -  -  -  ;
   82 D1:B17D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B17D -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B17D -  -  -  -  ; ***************************************************************************************
    2 D1:B17D -  -  -  -  ; ***************************************************************************************
    3 D1:B17D -  -  -  -  ;
    4 D1:B17D -  -  -  -  ;		Name : 		find.asm
    5 D1:B17D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B17D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B17D -  -  -  -  ;		Reviewed :	No
    8 D1:B17D -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B17D -  -  -  -  ;
   10 D1:B17D -  -  -  -  ; ***************************************************************************************
   11 D1:B17D -  -  -  -  ; ***************************************************************************************
   12 D1:B17D -  -  -  -  
   13 D1:B17D -  -  -  -  ; ***************************************************************************************
   14 D1:B17D -  -  -  -  ;
   15 D1:B17D -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B17D -  -  -  -  ; 		variable information at (IX)
   17 D1:B17D -  -  -  -  ;
   18 D1:B17D -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B17D -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B17D -  -  -  -  ;
   21 D1:B17D -  -  -  -  ; ***************************************************************************************
   22 D1:B17D -  -  -  -  
   23 D1:B17D -  -  -  -  FindVariable:
   24 D1:B17D DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B180 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B182 D2 FF AB D1 		jp 		nc,SyntaxError 		
   27 D1:B186 -  -  -  -  
   28 D1:B186 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B189 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B18B 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B18D FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B18F 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B191 -  -  -  -  		;
   34 D1:B191 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B191 -  -  -  -  		;
   36 D1:B191 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B195 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B198 87 -  -  -  		add 	a,a 						; x4
   39 D1:B199 87 -  -  -  		add 	a,a
   40 D1:B19A B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B19B 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B19C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B19E CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B1A0 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B1A2 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B1A3 C9 -  -  -  		ret
   47 D1:B1A4 -  -  -  -  		;
   48 D1:B1A4 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B1A4 -  -  -  -  		;
   50 D1:B1A4 -  -  -  -  _FVNotSimple:
   51 D1:B1A4 CD D8 B1 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B1A8 CD 14 B2 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B1AC 38 0B -  -  		jr 		c,_FVNotFound  				
   54 D1:B1AE -  -  -  -  		;
   55 D1:B1AE -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B1AE -  -  -  -  		;
   57 D1:B1AE -  -  -  -  _FVExitReference:		
   58 D1:B1AE 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B1B2 19 -  -  -  		add 	hl,de 
   60 D1:B1B3 -  -  -  -  		;
   61 D1:B1B3 -  -  -  -  		; 		TODO: Array check code.
   62 D1:B1B3 -  -  -  -  		;
   63 D1:B1B3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 D1:B1B5 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 D1:B1B7 AF -  -  -  		xor 	a 							; clear carry and return
   66 D1:B1B8 C9 -  -  -  		ret
   67 D1:B1B9 -  -  -  -  		;
   68 D1:B1B9 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 D1:B1B9 -  -  -  -  		;
   70 D1:B1B9 -  -  -  -  _FVNotFound:		
   71 D1:B1B9 3A FD A8 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 D1:B1BD B7 -  -  -  		or 		a
   73 D1:B1BE 28 11 -  -  		jr 		z,_FVFail
   74 D1:B1C0 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 D1:B1C3 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 D1:B1C5 28 0A -  -  		jr 		z,_FVFail
   77 D1:B1C7 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 D1:B1CB CD 3A B1 D1 		call 	VariableCreate 				; create a new variable.
   79 D1:B1CF 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 D1:B1D1 -  -  -  -  
   81 D1:B1D1 -  -  -  -  _FVFail:
   82 D1:B1D1 DD 2A FF A8 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 D1:B1D6 37 -  -  -  		scf
   84 D1:B1D7 C9 -  -  -  		ret
   85 D1:B1D8 -  -  -  -  
   86 D1:B1D8 -  -  -  -  ; ***************************************************************************************
   87 D1:B1D8 -  -  -  -  ;
   88 D1:B1D8 -  -  -  -  ;									Changes and Updates
   89 D1:B1D8 -  -  -  -  ;
   90 D1:B1D8 -  -  -  -  ; ***************************************************************************************
   91 D1:B1D8 -  -  -  -  ;
   92 D1:B1D8 -  -  -  -  ;		Date			Notes
   93 D1:B1D8 -  -  -  -  ;		==== 			=====
   94 D1:B1D8 -  -  -  -  ;
   95 D1:B1D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B1D8 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B1D8 -  -  -  -  ; ***************************************************************************************
    2 D1:B1D8 -  -  -  -  ; ***************************************************************************************
    3 D1:B1D8 -  -  -  -  ;
    4 D1:B1D8 -  -  -  -  ;		Name : 		info.asm
    5 D1:B1D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1D8 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B1D8 -  -  -  -  ;		Reviewed :	No
    8 D1:B1D8 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B1D8 -  -  -  -  ;
   10 D1:B1D8 -  -  -  -  ; ***************************************************************************************
   11 D1:B1D8 -  -  -  -  ; ***************************************************************************************
   12 D1:B1D8 -  -  -  -  
   13 D1:B1D8 -  -  -  -  ; ***************************************************************************************
   14 D1:B1D8 -  -  -  -  ;
   15 D1:B1D8 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B1D8 -  -  -  -  ; 		after the identifier.
   17 D1:B1D8 -  -  -  -  ;
   18 D1:B1D8 -  -  -  -  ; ***************************************************************************************
   19 D1:B1D8 -  -  -  -  
   20 D1:B1D8 -  -  -  -  VariableInformation:
   21 D1:B1D8 DD 22 FF A8 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B1DD -  -  -  -  		;
   23 D1:B1DD -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B1DD -  -  -  -  		;
   25 D1:B1DD 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B1DF -  -  -  -  _VICalculateHash:
   27 D1:B1DF DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B1E2 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B1E4 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B1E6 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B1E7 07 -  -  -  		rlca
   32 D1:B1E8 07 -  -  -  		rlca
   33 D1:B1E9 80 -  -  -  		add 	a,b
   34 D1:B1EA 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B1EB DD 23 -  -  		inc 	ix 							; next character
   36 D1:B1ED 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B1EF -  -  -  -  		;
   38 D1:B1EF -  -  -  -  _VIHashDone:
   39 D1:B1EF 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B1F0 -  -  -  -  		;
   41 D1:B1F0 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B1F0 -  -  -  -  		;
   43 D1:B1F0 32 03 A9 D1 		ld 		(VarHash),a
   44 D1:B1F4 -  -  -  -  		;
   45 D1:B1F4 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B1F4 -  -  -  -  		;		
   47 D1:B1F4 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B1F6 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B1FA 6F -  -  -  		ld 		l,a
   50 D1:B1FB 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B1FC 29 -  -  -  		add 	hl,hl
   52 D1:B1FD -  -  -  -  		;
   53 D1:B1FD ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B202 19 -  -  -  		add 	hl,de
   55 D1:B203 -  -  -  -  		;
   56 D1:B203 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B206 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B208 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B20A 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B20E 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B20F -  -  -  -  _VINotArray:
   62 D1:B20F 22 05 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B213 C9 -  -  -  		ret
   64 D1:B214 -  -  -  -  
   65 D1:B214 -  -  -  -  ; ***************************************************************************************
   66 D1:B214 -  -  -  -  ;
   67 D1:B214 -  -  -  -  ;									Changes and Updates
   68 D1:B214 -  -  -  -  ;
   69 D1:B214 -  -  -  -  ; ***************************************************************************************
   70 D1:B214 -  -  -  -  ;
   71 D1:B214 -  -  -  -  ;		Date			Notes
   72 D1:B214 -  -  -  -  ;		==== 			=====
   73 D1:B214 -  -  -  -  ;
   74 D1:B214 -  -  -  -  ; ***************************************************************************************
   75 D1:B214 -  -  -  -  
Listing for file "_build.asm"
   56 D1:B214 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B214 -  -  -  -  ; ***************************************************************************************
    2 D1:B214 -  -  -  -  ; ***************************************************************************************
    3 D1:B214 -  -  -  -  ;
    4 D1:B214 -  -  -  -  ;		Name : 		search.asm
    5 D1:B214 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B214 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B214 -  -  -  -  ;		Reviewed :	No
    8 D1:B214 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B214 -  -  -  -  ;
   10 D1:B214 -  -  -  -  ; ***************************************************************************************
   11 D1:B214 -  -  -  -  ; ***************************************************************************************
   12 D1:B214 -  -  -  -  
   13 D1:B214 -  -  -  -  ; ***************************************************************************************
   14 D1:B214 -  -  -  -  ;
   15 D1:B214 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B214 -  -  -  -  ;		CS if failed.
   17 D1:B214 -  -  -  -  ;
   18 D1:B214 -  -  -  -  ; ***************************************************************************************
   19 D1:B214 -  -  -  -  
   20 D1:B214 -  -  -  -  VariableSearchList:
   21 D1:B214 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B218 -  -  -  -  		;
   23 D1:B218 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B218 -  -  -  -  		;		the address of the hash record
   25 D1:B218 -  -  -  -  		;
   26 D1:B218 -  -  -  -  _VSLLoop:
   27 D1:B218 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B21A -  -  -  -  		;
   29 D1:B21A E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B21B AF -  -  -  		xor 	a
   31 D1:B21C ED 6A -  -  		adc 	hl,hl
   32 D1:B21E E1 -  -  -  		pop 	hl
   33 D1:B21F 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B221 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B222 C8 -  -  -  		ret 	z
   36 D1:B223 -  -  -  -  _VSLRecord:
   37 D1:B223 -  -  -  -  		;
   38 D1:B223 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B223 -  -  -  -  		;
   40 D1:B223 3A 03 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B227 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B228 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B229 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B22B -  -  -  -  		;
   45 D1:B22B -  -  -  -  		;		Now check the name
   46 D1:B22B -  -  -  -  		;
   47 D1:B22B E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B22C 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B22D 23 -  -  -  		inc 	hl
   50 D1:B22E 23 -  -  -  		inc 	hl
   51 D1:B22F 23 -  -  -  		inc 	hl
   52 D1:B230 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B232 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B237 -  -  -  -  		;
   55 D1:B237 -  -  -  -  		;		Check individual characters
   56 D1:B237 -  -  -  -  		;
   57 D1:B237 -  -  -  -  _VSLCharacter:
   58 D1:B237 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B238 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B23A 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B23C BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B23D 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B23E 13 -  -  -  		inc 	de
   64 D1:B23F 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B241 -  -  -  -  		;
   66 D1:B241 -  -  -  -  _VSLFailed:
   67 D1:B241 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B242 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B244 -  -  -  -  		;
   70 D1:B244 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B244 -  -  -  -  		;		
   72 D1:B244 -  -  -  -  _VSLEndIdentifier:
   73 D1:B244 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B245 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B247 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B249 -  -  -  -  		;
   77 D1:B249 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B24A 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B24B AF -  -  -  		xor 	a 							; clear carry
   80 D1:B24C C9 -  -  -  		ret
   81 D1:B24D -  -  -  -  
   82 D1:B24D -  -  -  -  ; ***************************************************************************************
   83 D1:B24D -  -  -  -  ;
   84 D1:B24D -  -  -  -  ;									Changes and Updates
   85 D1:B24D -  -  -  -  ;
   86 D1:B24D -  -  -  -  ; ***************************************************************************************
   87 D1:B24D -  -  -  -  ;
   88 D1:B24D -  -  -  -  ;		Date			Notes
   89 D1:B24D -  -  -  -  ;		==== 			=====
   90 D1:B24D -  -  -  -  ;
   91 D1:B24D -  -  -  -  ; ***************************************************************************************
   92 D1:B24D -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B24D -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B24D -  -  -  -  ;
    2 D1:B24D -  -  -  -  ;	This file is automatically generated.
    3 D1:B24D -  -  -  -  ;
    4 D1:B24D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 D1:B260 -  -  -  -  PrecedenceTable:
    6 D1:B260 06 -  -  -  	.db	6	; $0083 !
    7 D1:B261 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B262 05 -  -  -  	.db	5	; $0085 *
    9 D1:B263 05 -  -  -  	.db	5	; $0086 /
   10 D1:B264 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B265 05 -  -  -  	.db	5	; $0088 div
   12 D1:B266 04 -  -  -  	.db	4	; $0089 +
   13 D1:B267 04 -  -  -  	.db	4	; $008a -
   14 D1:B268 03 -  -  -  	.db	3	; $008b >=
   15 D1:B269 03 -  -  -  	.db	3	; $008c <=
   16 D1:B26A 03 -  -  -  	.db	3	; $008d >
   17 D1:B26B 03 -  -  -  	.db	3	; $008e <
   18 D1:B26C 03 -  -  -  	.db	3	; $008f =
   19 D1:B26D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B26E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B26F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B270 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B271 -  -  -  -  
Listing for file "_build.asm"
   58 D1:B271 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B271 -  -  -  -  ;
    2 D1:B271 -  -  -  -  ;	This is automatically generated.
    3 D1:B271 -  -  -  -  ;
    4 D1:B271 -  -  -  -  ErrorIDTable:
    5 D1:B271 B5 B2 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B275 BB B2 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B279 CC B2 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B27D DA B2 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B281 E4 B2 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B285 EE B2 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B289 08 B3 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B28D 19 B3 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 D1:B291 27 B3 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 D1:B295 35 B3 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 D1:B299 3F B3 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 D1:B29D 54 B3 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 D1:B2A1 6A B3 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 D1:B2A5 78 B3 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 D1:B2A9 7D B3 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 D1:B2AD 8A B3 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 D1:B2B1 9B B3 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 D1:B2B5 -  -  -  -  
   23 D1:B2B5 -  -  -  -  ErrText_warmstart:
   24 D1:B2B5 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 D1:B2BB -  -  -  -  ErrText_assert:
   26 D1:B2BB 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 D1:B2CC -  -  -  -  ErrText_badtype:
   28 D1:B2CC 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 D1:B2DA -  -  -  -  ErrText_badvalue:
   30 D1:B2DA 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 D1:B2E4 -  -  -  -  ErrText_dim:
   32 D1:B2E4 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 D1:B2EE -  -  -  -  ErrText_disabled:
   34 D1:B2EE 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 D1:B308 -  -  -  -  ErrText_divzero:
   36 D1:B308 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 D1:B319 -  -  -  -  ErrText_memory:
   38 D1:B319 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 D1:B327 -  -  -  -  ErrText_nocomma:
   40 D1:B327 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 D1:B335 -  -  -  -  ErrText_nodollar:
   42 D1:B335 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 D1:B33F -  -  -  -  ErrText_nolbracket:
   44 D1:B33F 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 D1:B354 -  -  -  -  ErrText_norbracket:
   46 D1:B354 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 D1:B36A -  -  -  -  ErrText_notref:
   48 D1:B36A 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 D1:B378 -  -  -  -  ErrText_stop:
   50 D1:B378 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 D1:B37D -  -  -  -  ErrText_syntax:
   52 D1:B37D 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 D1:B38A -  -  -  -  ErrText_todo:
   54 D1:B38A 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 D1:B39B -  -  -  -  ErrText_unknownvar:
   56 D1:B39B 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 D1:B3AC -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B3AC -  -  -  -  ;
    2 D1:B3AC -  -  -  -  ;	Vectors for set 0
    3 D1:B3AC -  -  -  -  ;
    4 D1:B3AC -  -  -  -  VectorsSet0:
    5 D1:B3AC F9 A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B3B0 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B3B4 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B3B8 75 AC D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B3BC 7E AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B3C0 21 AC D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B3C4 2F AC D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B3C8 3D AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B3CC 2F AC D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B3D0 05 AC D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B3D4 13 AC D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B3D8 DC AC D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B3DC D2 AC D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B3E0 BE AC D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B3E4 B4 AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B3E8 AA AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B3EC C8 AC D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B3F0 4B AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B3F4 59 AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B3F8 67 AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B3FC 4E B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B400 46 B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B404 68 AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B408 95 AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B40C 57 AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B410 2D AF D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B414 2C B0 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B418 5D B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B41C 43 AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B420 3A AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B424 73 AF D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B428 88 AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B42C 76 B0 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B430 7D B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B434 8A B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B438 9C AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B43C A0 AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B440 6C A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B444 6C A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B448 70 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B44C 6C A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B450 BB AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B454 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa [
   48 D1:B458 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab ]
   49 D1:B45C A5 A8 D1 00 	addr(Unimplemented)              ; $00ac repeat
   50 D1:B460 A5 A8 D1 00 	addr(Unimplemented)              ; $00ad until
   51 D1:B464 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae if
   52 D1:B468 6C A9 D1 00 	addr(BadCmd_Then)                ; $00af then
   53 D1:B46C A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 else
   54 D1:B470 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 for
   55 D1:B474 6C A9 D1 00 	addr(BadCmd_To)                  ; $00b2 to
   56 D1:B478 A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 step
   57 D1:B47C A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 next
   58 D1:B480 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 def
   59 D1:B484 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 proc
   60 D1:B488 A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 endproc
   61 D1:B48C A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 gosub
   62 D1:B490 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 return
   63 D1:B494 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba goto
   64 D1:B498 A5 A8 D1 00 	addr(Unimplemented)              ; $00bb local
   65 D1:B49C 71 A9 D1 00 	addr(Command_DIM)                ; $00bc dim
   66 D1:B4A0 BB AA D1 00 	addr(Command_REM)                ; $00bd rem
   67 D1:B4A4 10 AA D1 00 	addr(Command_LET)                ; $00be let
   68 D1:B4A8 A5 A8 D1 00 	addr(Unimplemented)              ; $00bf vdu
   69 D1:B4AC 64 AA D1 00 	addr(Command_PRINT)              ; $00c0 print
   70 D1:B4B0 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 load
   71 D1:B4B4 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 save
   72 D1:B4B8 A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 list
   73 D1:B4BC 1F B1 D1 00 	addr(Command_NEW)                ; $00c4 new
   74 D1:B4C0 D8 AA D1 00 	addr(Command_RUN)                ; $00c5 run
   75 D1:B4C4 A5 A8 D1 00 	addr(Unimplemented)              ; $00c6 read
   76 D1:B4C8 A5 A8 D1 00 	addr(Unimplemented)              ; $00c7 data
   77 D1:B4CC A5 A8 D1 00 	addr(Unimplemented)              ; $00c8 restore
   78 D1:B4D0 5B A9 D1 00 	addr(Command_ASSERT)             ; $00c9 assert
   79 D1:B4D4 C1 B0 D1 00 	addr(Command_CLEAR)              ; $00ca clear
   80 D1:B4D8 F3 A9 D1 00 	addr(Command_END)                ; $00cb end
   81 D1:B4DC 4B AB D1 00 	addr(Command_STOP)               ; $00cc stop
   82 D1:B4E0 -  -  -  -  ;
   83 D1:B4E0 -  -  -  -  ;	Vectors for set 1
   84 D1:B4E0 -  -  -  -  ;
   85 D1:B4E0 -  -  -  -  VectorsSet1:
   86 D1:B4E0 -  -  -  -  ;
   87 D1:B4E0 -  -  -  -  ;	Vectors for set 2
   88 D1:B4E0 -  -  -  -  ;
   89 D1:B4E0 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 D1:B4E0 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B4E0 -  -  -  -  ; ***************************************************************************************
    2 D1:B4E0 -  -  -  -  ; ***************************************************************************************
    3 D1:B4E0 -  -  -  -  ;
    4 D1:B4E0 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B4E0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4E0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B4E0 -  -  -  -  ;		Reviewed :	No
    8 D1:B4E0 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B4E0 -  -  -  -  ;
   10 D1:B4E0 -  -  -  -  ; ***************************************************************************************
   11 D1:B4E0 -  -  -  -  ; ***************************************************************************************
   12 D1:B4E0 -  -  -  -  
   13 D1:B4E0 -  -  -  -  ; ***************************************************************************************
   14 D1:B4E0 -  -  -  -  ;
   15 D1:B4E0 -  -  -  -  ;								Unsigned integer divide
   16 D1:B4E0 -  -  -  -  ;
   17 D1:B4E0 -  -  -  -  ; ***************************************************************************************
   18 D1:B4E0 -  -  -  -  
   19 D1:B4E0 -  -  -  -  Int32UDivide:
   20 D1:B4E0 37 -  -  -  		scf
   21 D1:B4E1 C3 25 B5 D1 		jp 		_I32UnsignedDivide		
   22 D1:B4E5 -  -  -  -  
   23 D1:B4E5 -  -  -  -  ; ***************************************************************************************
   24 D1:B4E5 -  -  -  -  ;
   25 D1:B4E5 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B4E5 -  -  -  -  ;
   27 D1:B4E5 -  -  -  -  ; ***************************************************************************************
   28 D1:B4E5 -  -  -  -  
   29 D1:B4E5 -  -  -  -  Int32SDivide:
   30 D1:B4E5 37 -  -  -  		scf
   31 D1:B4E6 18 01 -  -  		jr 		_I32SDivide
   32 D1:B4E8 -  -  -  -  Int32Modulus:
   33 D1:B4E8 AF -  -  -  		xor 	a
   34 D1:B4E9 -  -  -  -  _I32SDivide:
   35 D1:B4E9 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B4EA F5 -  -  -  		push 	af
   37 D1:B4EB 08 -  -  -  		ex 		af,af'
   38 D1:B4EC -  -  -  -  
   39 D1:B4EC D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B4ED D9 -  -  -  		exx
   41 D1:B4EE D5 -  -  -  		push 	de
   42 D1:B4EF D9 -  -  -  		exx
   43 D1:B4F0 -  -  -  -  
   44 D1:B4F0 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B4F1 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B4F2 CD 12 B5 D1 		call 	_I32CheckHLSignSwap
   47 D1:B4F6 CD 12 B5 D1 		call 	_I32CheckHLSignSwap
   48 D1:B4FA 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B4FB F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B4FC F5 -  -  -  		push 	af
   51 D1:B4FD CD 25 B5 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B501 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B502 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B504 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B505 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B507 C4 88 B6 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B50B -  -  -  -  _I32SDExit:
   58 D1:B50B D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B50C D1 -  -  -  		pop 	de
   60 D1:B50D D9 -  -  -  		exx
   61 D1:B50E D1 -  -  -  		pop 	de
   62 D1:B50F F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B510 08 -  -  -  		ex 		af,af'
   64 D1:B511 C9 -  -  -  		ret
   65 D1:B512 -  -  -  -  
   66 D1:B512 -  -  -  -  
   67 D1:B512 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B512 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B513 CB 7C -  -  		bit 	7,h
   70 D1:B515 D9 -  -  -  		exx
   71 D1:B516 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B518 -  -  -  -  		;
   73 D1:B518 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B51A F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B51B CD 88 B6 D1 		call 	Int32Negate 				
   76 D1:B51F F1 -  -  -  		pop 	af
   77 D1:B520 -  -  -  -  _I32CHSPositive:
   78 D1:B520 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B521 EB -  -  -  		ex 		de,hl
   80 D1:B522 D9 -  -  -  		exx		
   81 D1:B523 EB -  -  -  		ex 		de,hl
   82 D1:B524 C9 -  -  -  		ret
   83 D1:B525 -  -  -  -  
   84 D1:B525 -  -  -  -  ; ***************************************************************************************
   85 D1:B525 -  -  -  -  ;
   86 D1:B525 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B525 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B525 -  -  -  -  ;
   89 D1:B525 -  -  -  -  ; ***************************************************************************************
   90 D1:B525 -  -  -  -  
   91 D1:B525 -  -  -  -  _I32UnsignedDivide:
   92 D1:B525 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B526 D5 -  -  -  		push 	de
   94 D1:B527 D9 -  -  -  		exx
   95 D1:B528 C5 -  -  -  		push 	bc
   96 D1:B529 D5 -  -  -  		push 	de 							
   97 D1:B52A D9 -  -  -  		exx
   98 D1:B52B -  -  -  -  
   99 D1:B52B F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B52C -  -  -  -  
  101 D1:B52C 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B52D B3 -  -  -  		or 		e
  103 D1:B52E D9 -  -  -  		exx
  104 D1:B52F B2 -  -  -  		or 		d
  105 D1:B530 B3 -  -  -  		or 		e
  106 D1:B531 D9 -  -  -  		exx
  107 D1:B532 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B536 -  -  -  -  
  109 D1:B536 -  -  -  -  
  110 D1:B536 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B537 4D -  -  -  		ld		c,l
  112 D1:B538 21 00 00 00 		ld 		hl,$0000
  113 D1:B53C D9 -  -  -  		exx
  114 D1:B53D 44 -  -  -  		ld 		b,h
  115 D1:B53E 4D -  -  -  		ld		c,l
  116 D1:B53F 21 00 00 00 		ld 		hl,$0000
  117 D1:B543 D9 -  -  -  		exx
  118 D1:B544 -  -  -  -  
  119 D1:B544 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B546 -  -  -  -  _I32DivideLoop:
  121 D1:B546 F5 -  -  -  		push 	af
  122 D1:B547 -  -  -  -  
  123 D1:B547 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B549 CB 10 -  -  		rl 		b
  125 D1:B54B D9 -  -  -  		exx
  126 D1:B54C CB 11 -  -  		rl 		c
  127 D1:B54E CB 10 -  -  		rl 		b
  128 D1:B550 D9 -  -  -  		exx
  129 D1:B551 CB 15 -  -  		rl 		l
  130 D1:B553 CB 14 -  -  		rl 		h
  131 D1:B555 D9 -  -  -  		exx
  132 D1:B556 CB 15 -  -  		rl 		l
  133 D1:B558 CB 14 -  -  		rl 		h
  134 D1:B55A D9 -  -  -  		exx
  135 D1:B55B -  -  -  -  
  136 D1:B55B CD 26 B6 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B55F 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B561 -  -  -  -  
  139 D1:B561 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B562 18 04 -  -  		jr 		_I32Next
  141 D1:B564 -  -  -  -  
  142 D1:B564 -  -  -  -  _I32Borrow:
  143 D1:B564 CD 1E B6 D1 		call 	Int32Add 					; A = A + M
  144 D1:B568 -  -  -  -  _I32Next:
  145 D1:B568 F1 -  -  -  		pop 	af
  146 D1:B569 3D -  -  -  		dec 	a
  147 D1:B56A 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B56C -  -  -  -  
  149 D1:B56C F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B56D -  -  -  -  
  151 D1:B56D 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B56E 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B570 -  -  -  -  
  154 D1:B570 60 -  -  -  		ld  	h,b
  155 D1:B571 69 -  -  -  		ld 		l,c
  156 D1:B572 D9 -  -  -  		exx
  157 D1:B573 60 -  -  -  		ld  	h,b
  158 D1:B574 69 -  -  -  		ld 		l,c
  159 D1:B575 D9 -  -  -  		exx
  160 D1:B576 -  -  -  -  _I32Modulus1:		
  161 D1:B576 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B577 D1 -  -  -  		pop 	de
  163 D1:B578 C1 -  -  -  		pop 	bc
  164 D1:B579 D9 -  -  -  		exx
  165 D1:B57A D1 -  -  -  		pop 	de
  166 D1:B57B C1 -  -  -  		pop 	bc
  167 D1:B57C C9 -  -  -  		ret
  168 D1:B57D -  -  -  -  
  169 D1:B57D -  -  -  -  ; ***************************************************************************************
  170 D1:B57D -  -  -  -  ;
  171 D1:B57D -  -  -  -  ;									Changes and Updates
  172 D1:B57D -  -  -  -  ;
  173 D1:B57D -  -  -  -  ; ***************************************************************************************
  174 D1:B57D -  -  -  -  ;
  175 D1:B57D -  -  -  -  ;		Date			Notes
  176 D1:B57D -  -  -  -  ;		==== 			=====
  177 D1:B57D -  -  -  -  ;
  178 D1:B57D -  -  -  -  ; ***************************************************************************************
  179 D1:B57D -  -  -  -  		
Listing for file "_build.asm"
   61 D1:B57D -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B57D -  -  -  -  ; ***************************************************************************************
    2 D1:B57D -  -  -  -  ; ***************************************************************************************
    3 D1:B57D -  -  -  -  ;
    4 D1:B57D -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B57D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B57D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B57D -  -  -  -  ;		Reviewed :	No
    8 D1:B57D -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B57D -  -  -  -  ;
   10 D1:B57D -  -  -  -  ; ***************************************************************************************
   11 D1:B57D -  -  -  -  ; ***************************************************************************************
   12 D1:B57D -  -  -  -  
   13 D1:B57D -  -  -  -  ; ***************************************************************************************
   14 D1:B57D -  -  -  -  ;
   15 D1:B57D -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B57D -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B57D -  -  -  -  ;
   18 D1:B57D -  -  -  -  ; ***************************************************************************************
   19 D1:B57D -  -  -  -  
   20 D1:B57D -  -  -  -  Int32FromString:
   21 D1:B57D C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B57E D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B57F D5 -  -  -  		push 	de
   24 D1:B580 D9 -  -  -  		exx
   25 D1:B581 D5 -  -  -  		push 	de
   26 D1:B582 -  -  -  -  
   27 D1:B582 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B586 11 00 00 00 		ld 		de,$0000
   29 D1:B58A D9 -  -  -  		exx
   30 D1:B58B 21 00 00 00 		ld 		hl,$0000
   31 D1:B58F 11 00 00 00 		ld 		de,$0000
   32 D1:B593 D9 -  -  -  		exx
   33 D1:B594 -  -  -  -  
   34 D1:B594 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B595 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B597 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B599 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B59B 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B59C -  -  -  -  		;
   40 D1:B59C 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B59D F5 -  -  -  		push 	af
   42 D1:B59E FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B5A0 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B5A1 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B5A3 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B5A4 18 01 -  -  		jr 		_I32FSMain
   47 D1:B5A6 -  -  -  -  _I32FSNotSigned:		
   48 D1:B5A6 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B5A7 -  -  -  -  		;
   50 D1:B5A7 -  -  -  -  		; 		Main conversion loop.
   51 D1:B5A7 -  -  -  -  		; 		
   52 D1:B5A7 -  -  -  -  _I32FSMain:		
   53 D1:B5A7 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B5A8 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B5AA 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B5AC D6 20 -  -  		sub 	32
   57 D1:B5AE -  -  -  -  _I32FSNotLower:
   58 D1:B5AE FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B5B0 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B5B2 FE 3A -  -  		cp 		'9'+1
   61 D1:B5B4 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B5B6 FE 41 -  -  		cp 		'A'
   63 D1:B5B8 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B5BA FE 47 -  -  		cp 		'F'+1
   65 D1:B5BC 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B5BE D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B5C0 -  -  -  -  _I32FSOkay:
   68 D1:B5C0 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B5C2 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B5C3 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B5C5 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B5C6 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B5C7 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B5C8 CD E5 B5 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B5CC F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B5CD 5F -  -  -  		ld 		e,a
   77 D1:B5CE CD 1E B6 D1 		call 	Int32Add 					; and add it.
   78 D1:B5D2 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B5D3 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B5D5 -  -  -  -  
   81 D1:B5D5 -  -  -  -  _I32FSExit:
   82 D1:B5D5 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B5D6 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B5D8 CC 88 B6 D1 		call 	z,Int32Negate
   85 D1:B5DC 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B5DD D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B5DE D9 -  -  -  		exx
   88 D1:B5DF D1 -  -  -  		pop 	de
   89 D1:B5E0 D9 -  -  -  		exx
   90 D1:B5E1 C1 -  -  -  		pop 	bc
   91 D1:B5E2 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B5E4 C9 -  -  -  		ret				
   93 D1:B5E5 -  -  -  -  
   94 D1:B5E5 -  -  -  -  ; ***************************************************************************************
   95 D1:B5E5 -  -  -  -  ;
   96 D1:B5E5 -  -  -  -  ;									Changes and Updates
   97 D1:B5E5 -  -  -  -  ;
   98 D1:B5E5 -  -  -  -  ; ***************************************************************************************
   99 D1:B5E5 -  -  -  -  ;
  100 D1:B5E5 -  -  -  -  ;		Date			Notes
  101 D1:B5E5 -  -  -  -  ;		==== 			=====
  102 D1:B5E5 -  -  -  -  ;
  103 D1:B5E5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B5E5 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B5E5 -  -  -  -  ; ***************************************************************************************
    2 D1:B5E5 -  -  -  -  ; ***************************************************************************************
    3 D1:B5E5 -  -  -  -  ;
    4 D1:B5E5 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B5E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5E5 -  -  -  -  ;		Reviewed :	No
    8 D1:B5E5 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B5E5 -  -  -  -  ;
   10 D1:B5E5 -  -  -  -  ; ***************************************************************************************
   11 D1:B5E5 -  -  -  -  ; ***************************************************************************************
   12 D1:B5E5 -  -  -  -  
   13 D1:B5E5 -  -  -  -  Int32Multiply:
   14 D1:B5E5 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B5E6 D5 -  -  -  		push 	de
   16 D1:B5E7 44 -  -  -  		ld 		b,h
   17 D1:B5E8 4D -  -  -  		ld 		c,l
   18 D1:B5E9 21 00 00 00 		ld 		hl,$0000
   19 D1:B5ED -  -  -  -  
   20 D1:B5ED D9 -  -  -  		exx
   21 D1:B5EE C5 -  -  -  		push 	bc
   22 D1:B5EF D5 -  -  -  		push 	de
   23 D1:B5F0 44 -  -  -  		ld 		b,h
   24 D1:B5F1 4D -  -  -  		ld 		c,l
   25 D1:B5F2 21 00 00 00 		ld 		hl,$0000		
   26 D1:B5F6 D9 -  -  -  		exx
   27 D1:B5F7 -  -  -  -  
   28 D1:B5F7 -  -  -  -  _I32MultiplyLoop:
   29 D1:B5F7 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B5F9 C4 1E B6 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B5FD -  -  -  -  		;
   32 D1:B5FD D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B5FE CB 38 -  -  		srl 	b
   34 D1:B600 CB 19 -  -  		rr 		c
   35 D1:B602 D9 -  -  -  		exx
   36 D1:B603 CB 18 -  -  		rr 		b
   37 D1:B605 CB 19 -  -  		rr 		c
   38 D1:B607 -  -  -  -  		;
   39 D1:B607 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B609 CB 12 -  -  		rl 		d
   41 D1:B60B D9 -  -  -  		exx
   42 D1:B60C CB 13 -  -  		rl 		e
   43 D1:B60E CB 12 -  -  		rl 		d
   44 D1:B610 -  -  -  -  
   45 D1:B610 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B611 B1 -  -  -  		or 		c
   47 D1:B612 D9 -  -  -  		exx
   48 D1:B613 B0 -  -  -  		or 		b
   49 D1:B614 B1 -  -  -  		or 		c
   50 D1:B615 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B617 -  -  -  -  
   52 D1:B617 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B618 D1 -  -  -  		pop 	de
   54 D1:B619 C1 -  -  -  		pop 	bc
   55 D1:B61A D9 -  -  -  		exx
   56 D1:B61B D1 -  -  -  		pop 	de
   57 D1:B61C C1 -  -  -  		pop 	bc
   58 D1:B61D C9 -  -  -  		ret
   59 D1:B61E -  -  -  -  
   60 D1:B61E -  -  -  -  ; ***************************************************************************************
   61 D1:B61E -  -  -  -  ;
   62 D1:B61E -  -  -  -  ;									Changes and Updates
   63 D1:B61E -  -  -  -  ;
   64 D1:B61E -  -  -  -  ; ***************************************************************************************
   65 D1:B61E -  -  -  -  ;
   66 D1:B61E -  -  -  -  ;		Date			Notes
   67 D1:B61E -  -  -  -  ;		==== 			=====
   68 D1:B61E -  -  -  -  ;
   69 D1:B61E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B61E -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B61E -  -  -  -  ; ***************************************************************************************
    2 D1:B61E -  -  -  -  ; ***************************************************************************************
    3 D1:B61E -  -  -  -  ;
    4 D1:B61E -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B61E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B61E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B61E -  -  -  -  ;		Reviewed :	No
    8 D1:B61E -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B61E -  -  -  -  ;
   10 D1:B61E -  -  -  -  ; ***************************************************************************************
   11 D1:B61E -  -  -  -  ; ***************************************************************************************
   12 D1:B61E -  -  -  -  
   13 D1:B61E -  -  -  -  ; ***************************************************************************************
   14 D1:B61E -  -  -  -  ;
   15 D1:B61E -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B61E -  -  -  -  ;
   17 D1:B61E -  -  -  -  ; ***************************************************************************************
   18 D1:B61E -  -  -  -  
   19 D1:B61E -  -  -  -  Int32Add:
   20 D1:B61E 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B620 D9 -  -  -  		exx
   22 D1:B621 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B624 D9 -  -  -  		exx
   24 D1:B625 C9 -  -  -  		ret
   25 D1:B626 -  -  -  -  
   26 D1:B626 -  -  -  -  ; ***************************************************************************************
   27 D1:B626 -  -  -  -  ;
   28 D1:B626 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B626 -  -  -  -  ;
   30 D1:B626 -  -  -  -  ; ***************************************************************************************
   31 D1:B626 -  -  -  -  
   32 D1:B626 -  -  -  -  Int32Subtract:
   33 D1:B626 AF -  -  -  		xor 	a 							; clear carry
   34 D1:B627 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B62A D9 -  -  -  		exx
   36 D1:B62B 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B62E D9 -  -  -  		exx
   38 D1:B62F C9 -  -  -  		ret
   39 D1:B630 -  -  -  -  
   40 D1:B630 -  -  -  -  ; ***************************************************************************************
   41 D1:B630 -  -  -  -  ;
   42 D1:B630 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B630 -  -  -  -  ;
   44 D1:B630 -  -  -  -  ; ***************************************************************************************
   45 D1:B630 -  -  -  -  
   46 D1:B630 -  -  -  -  Int32And:
   47 D1:B630 D9 -  -  -  		exx
   48 D1:B631 CD 36 B6 D1 		call 	_I32AndHLDE
   49 D1:B635 D9 -  -  -  		exx
   50 D1:B636 -  -  -  -  _I32AndHLDE:		
   51 D1:B636 7C -  -  -  		ld 		a,h
   52 D1:B637 A2 -  -  -  		and 	d
   53 D1:B638 67 -  -  -  		ld 		h,a
   54 D1:B639 7D -  -  -  		ld 		a,l
   55 D1:B63A A3 -  -  -  		and 	e
   56 D1:B63B 6F -  -  -  		ld 		l,a
   57 D1:B63C C9 -  -  -  		ret
   58 D1:B63D -  -  -  -  
   59 D1:B63D -  -  -  -  ; ***************************************************************************************
   60 D1:B63D -  -  -  -  ;
   61 D1:B63D -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B63D -  -  -  -  ;
   63 D1:B63D -  -  -  -  ; ***************************************************************************************
   64 D1:B63D -  -  -  -  
   65 D1:B63D -  -  -  -  Int32Or:
   66 D1:B63D D9 -  -  -  		exx
   67 D1:B63E CD 43 B6 D1 		call 	_I32OrHLDE
   68 D1:B642 D9 -  -  -  		exx
   69 D1:B643 -  -  -  -  _I32OrHLDE:		
   70 D1:B643 7C -  -  -  		ld 		a,h
   71 D1:B644 B2 -  -  -  		or 		d
   72 D1:B645 67 -  -  -  		ld 		h,a
   73 D1:B646 7D -  -  -  		ld 		a,l
   74 D1:B647 B3 -  -  -  		or 		e
   75 D1:B648 6F -  -  -  		ld 		l,a
   76 D1:B649 C9 -  -  -  		ret
   77 D1:B64A -  -  -  -  
   78 D1:B64A -  -  -  -  ; ***************************************************************************************
   79 D1:B64A -  -  -  -  ;
   80 D1:B64A -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B64A -  -  -  -  ;
   82 D1:B64A -  -  -  -  ; ***************************************************************************************
   83 D1:B64A -  -  -  -  
   84 D1:B64A -  -  -  -  Int32Xor:
   85 D1:B64A D9 -  -  -  		exx
   86 D1:B64B CD 50 B6 D1 		call 	_I32XorHLDE
   87 D1:B64F D9 -  -  -  		exx
   88 D1:B650 -  -  -  -  _I32XorHLDE:		
   89 D1:B650 7C -  -  -  		ld 		a,h
   90 D1:B651 AA -  -  -  		xor 	d
   91 D1:B652 67 -  -  -  		ld 		h,a
   92 D1:B653 7D -  -  -  		ld 		a,l
   93 D1:B654 AB -  -  -  		xor 	e
   94 D1:B655 6F -  -  -  		ld 		l,a
   95 D1:B656 C9 -  -  -  		ret
   96 D1:B657 -  -  -  -  
   97 D1:B657 -  -  -  -  ; ***************************************************************************************
   98 D1:B657 -  -  -  -  ;
   99 D1:B657 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B657 -  -  -  -  ;
  101 D1:B657 -  -  -  -  ; ***************************************************************************************
  102 D1:B657 -  -  -  -  
  103 D1:B657 -  -  -  -  Int32Zero:
  104 D1:B657 D9 -  -  -  		exx
  105 D1:B658 7D -  -  -  		ld 		a,l
  106 D1:B659 B4 -  -  -  		or 		h
  107 D1:B65A D9 -  -  -  		exx
  108 D1:B65B B5 -  -  -  		or 		l
  109 D1:B65C B4 -  -  -  		or 		h
  110 D1:B65D C9 -  -  -  		ret
  111 D1:B65E -  -  -  -  
  112 D1:B65E -  -  -  -  ; ***************************************************************************************
  113 D1:B65E -  -  -  -  ;
  114 D1:B65E -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B65E -  -  -  -  ;
  116 D1:B65E -  -  -  -  ; ***************************************************************************************
  117 D1:B65E -  -  -  -  
  118 D1:B65E -  -  -  -  Int32Compare:
  119 D1:B65E E5 -  -  -  		push 	hl 							; save HL
  120 D1:B65F AF -  -  -  		xor 	a 							; clear carry
  121 D1:B660 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B663 D9 -  -  -  		exx
  123 D1:B664 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B665 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B668 -  -  -  -  		;
  126 D1:B668 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B669 E2 71 B6 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B66D 78 -  -  -  		ld 		a,b
  129 D1:B66E EE 80 -  -  		xor 	$80
  130 D1:B670 47 -  -  -  		ld 		b,a
  131 D1:B671 -  -  -  -  _I32CNoOverflow:
  132 D1:B671 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B672 B5 -  -  -  		or 		l
  134 D1:B673 D9 -  -  -  		exx 
  135 D1:B674 B4 -  -  -  		or 		h
  136 D1:B675 B5 -  -  -  		or 		l
  137 D1:B676 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B678 -  -  -  -  		;
  139 D1:B678 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B679 CB 78 -  -  		bit 	7,b
  141 D1:B67B D9 -  -  -  		exx
  142 D1:B67C 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B67E 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B680 3E FF -  -  		ld 		a,$FF
  145 D1:B682 -  -  -  -  _I32NotPos:
  146 D1:B682 D9 -  -  -  		exx
  147 D1:B683 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B684 D9 -  -  -  		exx
  149 D1:B685 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B686 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B687 C9 -  -  -  		ret
  152 D1:B688 -  -  -  -  
  153 D1:B688 -  -  -  -  ; ***************************************************************************************
  154 D1:B688 -  -  -  -  ;
  155 D1:B688 -  -  -  -  ;										Negate HL'HL
  156 D1:B688 -  -  -  -  ;
  157 D1:B688 -  -  -  -  ; ***************************************************************************************
  158 D1:B688 -  -  -  -  
  159 D1:B688 -  -  -  -  Int32Negate:
  160 D1:B688 AF -  -  -  		xor 	a
  161 D1:B689 CD 94 B6 D1 		call 	_I32NSubtract
  162 D1:B68D D9 -  -  -  		exx
  163 D1:B68E CD 94 B6 D1 		call 	_I32NSubtract
  164 D1:B692 D9 -  -  -  		exx
  165 D1:B693 C9 -  -  -  		ret
  166 D1:B694 -  -  -  -  _I32NSubtract:
  167 D1:B694 D5 -  -  -  		push 	de
  168 D1:B695 EB -  -  -  		ex 		de,hl
  169 D1:B696 21 00 00 00 		ld 		hl,$0000
  170 D1:B69A 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B69D D1 -  -  -  		pop 	de
  172 D1:B69E C9 -  -  -  		ret
  173 D1:B69F -  -  -  -  		
  174 D1:B69F -  -  -  -  ; ***************************************************************************************
  175 D1:B69F -  -  -  -  ;
  176 D1:B69F -  -  -  -  ;									Changes and Updates
  177 D1:B69F -  -  -  -  ;
  178 D1:B69F -  -  -  -  ; ***************************************************************************************
  179 D1:B69F -  -  -  -  ;
  180 D1:B69F -  -  -  -  ;		Date			Notes
  181 D1:B69F -  -  -  -  ;		==== 			=====
  182 D1:B69F -  -  -  -  ;
  183 D1:B69F -  -  -  -  ; ***************************************************************************************
  184 D1:B69F -  -  -  -  		
Listing for file "_build.asm"
   64 D1:B69F -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B69F -  -  -  -  ; ***************************************************************************************
    2 D1:B69F -  -  -  -  ; ***************************************************************************************
    3 D1:B69F -  -  -  -  ;
    4 D1:B69F -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B69F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B69F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B69F -  -  -  -  ;		Reviewed :	No
    8 D1:B69F -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B69F -  -  -  -  ;
   10 D1:B69F -  -  -  -  ; ***************************************************************************************
   11 D1:B69F -  -  -  -  ;
   12 D1:B69F -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B69F -  -  -  -  ;
   14 D1:B69F -  -  -  -  ; ***************************************************************************************
   15 D1:B69F -  -  -  -  
   16 D1:B69F -  -  -  -  Int32ToString:
   17 D1:B69F C5 -  -  -  		push 	bc 							; save string start
   18 D1:B6A0 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B6A1 E5 -  -  -  		push 	hl
   20 D1:B6A2 11 00 00 00 		ld	 	de,$0000
   21 D1:B6A6 D9 -  -  -  		exx
   22 D1:B6A7 D5 -  -  -  		push 	de
   23 D1:B6A8 E5 -  -  -  		push 	hl
   24 D1:B6A9 11 00 00 00 		ld 		de,$000
   25 D1:B6AD D9 -  -  -  		exx
   26 D1:B6AE 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B6AF -  -  -  -  		;
   28 D1:B6AF CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B6B1 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B6B3 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B6B5 5F -  -  -  		ld 		e,a
   32 D1:B6B6 -  -  -  -  		;
   33 D1:B6B6 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B6B7 CB 7C -  -  		bit 	7,h
   35 D1:B6B9 D9 -  -  -  		exx
   36 D1:B6BA 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B6BC -  -  -  -  		;
   38 D1:B6BC CD 88 B6 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B6C0 -  -  -  -  		;
   40 D1:B6C0 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B6C2 02 -  -  -  		ld 		(bc),a
   42 D1:B6C3 03 -  -  -  		inc 	bc
   43 D1:B6C4 -  -  -  -  _I32TSNotNegative:	
   44 D1:B6C4 CD D3 B6 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B6C8 -  -  -  -  _I32TSExit:
   46 D1:B6C8 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B6CA 02 -  -  -  		ld 		(bc),a 
   48 D1:B6CB -  -  -  -  
   49 D1:B6CB D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B6CC E1 -  -  -  		pop 	hl
   51 D1:B6CD D1 -  -  -  		pop 	de
   52 D1:B6CE D9 -  -  -  		exx
   53 D1:B6CF E1 -  -  -  		pop 	hl
   54 D1:B6D0 D1 -  -  -  		pop 	de
   55 D1:B6D1 C1 -  -  -  		pop 	bc
   56 D1:B6D2 C9 -  -  -  		ret
   57 D1:B6D3 -  -  -  -  
   58 D1:B6D3 -  -  -  -  _I32RecursiveConvert:
   59 D1:B6D3 CD E0 B4 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B6D7 F5 -  -  -  		push 	af 							; save remainder
   61 D1:B6D8 CD 57 B6 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B6DC C4 D3 B6 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B6E0 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B6E1 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B6E3 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B6E5 C6 07 -  -  		add 	a,7
   67 D1:B6E7 -  -  -  -  _I32NotHex:
   68 D1:B6E7 C6 30 -  -  		add 	a,48
   69 D1:B6E9 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B6EA 03 -  -  -  		inc 	bc
   71 D1:B6EB C9 -  -  -  		ret		
   72 D1:B6EC -  -  -  -  
   73 D1:B6EC -  -  -  -  ; ***************************************************************************************
   74 D1:B6EC -  -  -  -  ;
   75 D1:B6EC -  -  -  -  ;									Changes and Updates
   76 D1:B6EC -  -  -  -  ;
   77 D1:B6EC -  -  -  -  ; ***************************************************************************************
   78 D1:B6EC -  -  -  -  ;
   79 D1:B6EC -  -  -  -  ;		Date			Notes
   80 D1:B6EC -  -  -  -  ;		==== 			=====
   81 D1:B6EC -  -  -  -  ;
   82 D1:B6EC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B6EC -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B6EC -  -  -  -  ; ***************************************************************************************
    2 D1:B6EC -  -  -  -  ; ***************************************************************************************
    3 D1:B6EC -  -  -  -  ;
    4 D1:B6EC -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B6EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6EC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6EC -  -  -  -  ;		Reviewed :	No
    8 D1:B6EC -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B6EC -  -  -  -  ;
   10 D1:B6EC -  -  -  -  ; ***************************************************************************************
   11 D1:B6EC -  -  -  -  ; ***************************************************************************************
   12 D1:B6EC -  -  -  -  
   13 D1:B6EC -  -  -  -  #ifdef AQUARIUS
   14 D1:B6EC             
   15 D1:B6EC             ; ***************************************************************************************
   16 D1:B6EC             ;
   17 D1:B6EC             ;								Initialise system stuff
   18 D1:B6EC             ;
   19 D1:B6EC             ; ***************************************************************************************
   20 D1:B6EC             
   21 D1:B6EC             SYSInitialise:
   22 D1:B6EC             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B6EC             	call 	SYSPrintChar
   24 D1:B6EC             	ret
   25 D1:B6EC             
   26 D1:B6EC             ; ***************************************************************************************
   27 D1:B6EC             ;
   28 D1:B6EC             ;								Terminate system stuff
   29 D1:B6EC             ;
   30 D1:B6EC             ; ***************************************************************************************
   31 D1:B6EC             
   32 D1:B6EC             SYSTerminate:
   33 D1:B6EC             	jr 		SYSTerminate
   34 D1:B6EC             
   35 D1:B6EC             ; ***************************************************************************************
   36 D1:B6EC             ;
   37 D1:B6EC             ;								Print A character
   38 D1:B6EC             ;
   39 D1:B6EC             ; ***************************************************************************************
   40 D1:B6EC             
   41 D1:B6EC             SYSPrintChar:
   42 D1:B6EC             	push 	af 									; we stack everything including alt registers
   43 D1:B6EC             	push 	bc
   44 D1:B6EC             	push 	de
   45 D1:B6EC             	push 	hl
   46 D1:B6EC             	push 	ix
   47 D1:B6EC             	push 	iy
   48 D1:B6EC             	exx
   49 D1:B6EC             	push 	bc
   50 D1:B6EC             	push 	de
   51 D1:B6EC             	push 	hl
   52 D1:B6EC             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B6EC             	pop 	hl
   54 D1:B6EC             	pop 	de
   55 D1:B6EC             	pop 	bc
   56 D1:B6EC             	exx
   57 D1:B6EC             	pop 	iy
   58 D1:B6EC             	pop 	ix
   59 D1:B6EC             	pop 	hl
   60 D1:B6EC             	pop 	de
   61 D1:B6EC             	pop 	bc
   62 D1:B6EC             	pop 	af
   63 D1:B6EC             	ret		
   64 D1:B6EC             
   65 D1:B6EC             ; ***************************************************************************************
   66 D1:B6EC             ;
   67 D1:B6EC             ;									Print Newline
   68 D1:B6EC             ;
   69 D1:B6EC             ; ***************************************************************************************
   70 D1:B6EC             
   71 D1:B6EC             SYSPrintCRLF:
   72 D1:B6EC             	push 	af
   73 D1:B6EC             	ld 		a,13
   74 D1:B6EC             	call 	SYSPrintChar
   75 D1:B6EC             	ld 		a,10
   76 D1:B6EC             	call 	SYSPrintChar
   77 D1:B6EC             	pop 	af
   78 D1:B6EC             	ret
   79 D1:B6EC             
   80 D1:B6EC             ; ***************************************************************************************
   81 D1:B6EC             ;
   82 D1:B6EC             ;									Get time into HL'HL
   83 D1:B6EC             ;
   84 D1:B6EC             ; ***************************************************************************************
   85 D1:B6EC             
   86 D1:B6EC             SYSGetTimer:
   87 D1:B6EC              	in 		a,($00)
   88 D1:B6EC              	ld 		l,a
   89 D1:B6EC              	in 		a,($01)
   90 D1:B6EC              	ld 		h,a
   91 D1:B6EC              	exx
   92 D1:B6EC              	in 		a,($02)
   93 D1:B6EC              	ld 		l,a
   94 D1:B6EC              	in 		a,($03)
   95 D1:B6EC              	ld 		h,a
   96 D1:B6EC              	exx
   97 D1:B6EC             	ret 	
   98 D1:B6EC             	
   99 D1:B6EC             #endif
  100 D1:B6EC -  -  -  -  
  101 D1:B6EC -  -  -  -  ; ***************************************************************************************
  102 D1:B6EC -  -  -  -  ;
  103 D1:B6EC -  -  -  -  ;									Changes and Updates
  104 D1:B6EC -  -  -  -  ;
  105 D1:B6EC -  -  -  -  ; ***************************************************************************************
  106 D1:B6EC -  -  -  -  ;
  107 D1:B6EC -  -  -  -  ;		Date			Notes
  108 D1:B6EC -  -  -  -  ;		==== 			=====
  109 D1:B6EC -  -  -  -  ;
  110 D1:B6EC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B6EC -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B6EC -  -  -  -  ; ***************************************************************************************
    2 D1:B6EC -  -  -  -  ; ***************************************************************************************
    3 D1:B6EC -  -  -  -  ;
    4 D1:B6EC -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B6EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6EC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6EC -  -  -  -  ;		Reviewed :	No
    8 D1:B6EC -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B6EC -  -  -  -  ;
   10 D1:B6EC -  -  -  -  ; ***************************************************************************************
   11 D1:B6EC -  -  -  -  ; ***************************************************************************************
   12 D1:B6EC -  -  -  -  
   13 D1:B6EC -  -  -  -  #ifdef CLEANEZ80
   14 D1:B6EC             
   15 D1:B6EC             ; ***************************************************************************************
   16 D1:B6EC             ;
   17 D1:B6EC             ;								Initialise system stuff
   18 D1:B6EC             ;
   19 D1:B6EC             ; ***************************************************************************************
   20 D1:B6EC             
   21 D1:B6EC             SYSInitialise:
   22 D1:B6EC             	ret
   23 D1:B6EC             
   24 D1:B6EC             ; ***************************************************************************************
   25 D1:B6EC             ;
   26 D1:B6EC             ;								Terminate system stuff
   27 D1:B6EC             ;
   28 D1:B6EC             ; ***************************************************************************************
   29 D1:B6EC             
   30 D1:B6EC             SYSTerminate:
   31 D1:B6EC             	ret
   32 D1:B6EC             
   33 D1:B6EC             ; ***************************************************************************************
   34 D1:B6EC             ;
   35 D1:B6EC             ;								Print A character
   36 D1:B6EC             ;
   37 D1:B6EC             ; ***************************************************************************************
   38 D1:B6EC             
   39 D1:B6EC             SYSPrintChar:
   40 D1:B6EC             	ret		
   41 D1:B6EC             
   42 D1:B6EC             ; ***************************************************************************************
   43 D1:B6EC             ;
   44 D1:B6EC             ;									Print Newline
   45 D1:B6EC             ;
   46 D1:B6EC             ; ***************************************************************************************
   47 D1:B6EC             
   48 D1:B6EC             SYSPrintCRLF:
   49 D1:B6EC             	ret
   50 D1:B6EC             
   51 D1:B6EC             ; ***************************************************************************************
   52 D1:B6EC             ;
   53 D1:B6EC             ;									Get time into HL'HL
   54 D1:B6EC             ;
   55 D1:B6EC             ; ***************************************************************************************
   56 D1:B6EC             
   57 D1:B6EC             SYSGetTimer:
   58 D1:B6EC             	ret
   59 D1:B6EC             
   60 D1:B6EC             #endif
   61 D1:B6EC -  -  -  -  
   62 D1:B6EC -  -  -  -  ; ***************************************************************************************
   63 D1:B6EC -  -  -  -  ;
   64 D1:B6EC -  -  -  -  ;									Changes and Updates
   65 D1:B6EC -  -  -  -  ;
   66 D1:B6EC -  -  -  -  ; ***************************************************************************************
   67 D1:B6EC -  -  -  -  ;
   68 D1:B6EC -  -  -  -  ;		Date			Notes
   69 D1:B6EC -  -  -  -  ;		==== 			=====
   70 D1:B6EC -  -  -  -  ;
   71 D1:B6EC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B6EC -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B6EC -  -  -  -  ; ***************************************************************************************
    2 D1:B6EC -  -  -  -  ; ***************************************************************************************
    3 D1:B6EC -  -  -  -  ;
    4 D1:B6EC -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B6EC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6EC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6EC -  -  -  -  ;		Reviewed :	No
    8 D1:B6EC -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B6EC -  -  -  -  ;
   10 D1:B6EC -  -  -  -  ; ***************************************************************************************
   11 D1:B6EC -  -  -  -  ; ***************************************************************************************
   12 D1:B6EC -  -  -  -  
   13 D1:B6EC -  -  -  -  #ifdef TI84
   14 D1:B6EC -  -  -  -  
   15 D1:B6EC -  -  -  -  ; ***************************************************************************************
   16 D1:B6EC -  -  -  -  ;
   17 D1:B6EC -  -  -  -  ;								Initialise system stuff
   18 D1:B6EC -  -  -  -  ;
   19 D1:B6EC -  -  -  -  ; ***************************************************************************************
   20 D1:B6EC -  -  -  -  
   21 D1:B6EC -  -  -  -  SYSInitialise:
   22 D1:B6EC F3 -  -  -  	di
   23 D1:B6ED ED 73 0A B7 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B6F2 FD 22 0E B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B6F7 C9 -  -  -  	ret
   26 D1:B6F8 -  -  -  -  
   27 D1:B6F8 -  -  -  -  ; ***************************************************************************************
   28 D1:B6F8 -  -  -  -  ;
   29 D1:B6F8 -  -  -  -  ;								Terminate system stuff
   30 D1:B6F8 -  -  -  -  ;
   31 D1:B6F8 -  -  -  -  ; ***************************************************************************************
   32 D1:B6F8 -  -  -  -  
   33 D1:B6F8 -  -  -  -  SYSTerminate:
   34 D1:B6F8 ED 7B 0A B7 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B6FD FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B6FF FD 2A 0E B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B704 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B708 FB -  -  -  	ei
   39 D1:B709 C9 -  -  -  	ret 										; and exit.
   40 D1:B70A -  -  -  -  
   41 D1:B70A -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B70A 00 00 00 00 	.dw 	0,0
   43 D1:B70E -  -  -  -  _IYTemp84:
   44 D1:B70E 00 00 00 00 	.dw 	0,0		
   45 D1:B712 -  -  -  -  
   46 D1:B712 -  -  -  -  ; ***************************************************************************************
   47 D1:B712 -  -  -  -  ;
   48 D1:B712 -  -  -  -  ;								Print A character
   49 D1:B712 -  -  -  -  ;
   50 D1:B712 -  -  -  -  ; ***************************************************************************************
   51 D1:B712 -  -  -  -  
   52 D1:B712 -  -  -  -  SYSPrintChar:
   53 D1:B712 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B713 C5 -  -  -  	push 	bc
   55 D1:B714 D5 -  -  -  	push 	de
   56 D1:B715 E5 -  -  -  	push 	hl
   57 D1:B716 DD E5 -  -  	push 	ix
   58 D1:B718 FD E5 -  -  	push 	iy
   59 D1:B71A D9 -  -  -  	exx
   60 D1:B71B C5 -  -  -  	push 	bc
   61 D1:B71C D5 -  -  -  	push 	de
   62 D1:B71D E5 -  -  -  	push 	hl
   63 D1:B71E -  -  -  -  
   64 D1:B71E FD 2A 0E B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B723 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B727 F3 -  -  -  	di
   67 D1:B728 FD 22 0E B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B72D -  -  -  -  
   69 D1:B72D E1 -  -  -  	pop 	hl
   70 D1:B72E D1 -  -  -  	pop 	de
   71 D1:B72F C1 -  -  -  	pop 	bc
   72 D1:B730 D9 -  -  -  	exx
   73 D1:B731 FD E1 -  -  	pop 	iy
   74 D1:B733 DD E1 -  -  	pop 	ix
   75 D1:B735 E1 -  -  -  	pop 	hl
   76 D1:B736 D1 -  -  -  	pop 	de
   77 D1:B737 C1 -  -  -  	pop 	bc
   78 D1:B738 F1 -  -  -  	pop 	af
   79 D1:B739 C9 -  -  -  	ret		
   80 D1:B73A -  -  -  -  
   81 D1:B73A -  -  -  -  ; ***************************************************************************************
   82 D1:B73A -  -  -  -  ;
   83 D1:B73A -  -  -  -  ;									Print Newline
   84 D1:B73A -  -  -  -  ;
   85 D1:B73A -  -  -  -  ; ***************************************************************************************
   86 D1:B73A -  -  -  -  
   87 D1:B73A -  -  -  -  SYSPrintCRLF:
   88 D1:B73A F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B73B C5 -  -  -  	push 	bc
   90 D1:B73C D5 -  -  -  	push 	de
   91 D1:B73D E5 -  -  -  	push 	hl
   92 D1:B73E DD E5 -  -  	push 	ix
   93 D1:B740 FD E5 -  -  	push 	iy
   94 D1:B742 D9 -  -  -  	exx
   95 D1:B743 C5 -  -  -  	push 	bc
   96 D1:B744 D5 -  -  -  	push 	de
   97 D1:B745 E5 -  -  -  	push 	hl
   98 D1:B746 -  -  -  -  
   99 D1:B746 FD 2A 0E B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B74B CD F0 07 02 	call 	_newline
  101 D1:B74F F3 -  -  -  	di
  102 D1:B750 FD 22 0E B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B755 -  -  -  -  
  104 D1:B755 E1 -  -  -  	pop 	hl
  105 D1:B756 D1 -  -  -  	pop 	de
  106 D1:B757 C1 -  -  -  	pop 	bc
  107 D1:B758 D9 -  -  -  	exx
  108 D1:B759 FD E1 -  -  	pop 	iy
  109 D1:B75B DD E1 -  -  	pop 	ix
  110 D1:B75D E1 -  -  -  	pop 	hl
  111 D1:B75E D1 -  -  -  	pop 	de
  112 D1:B75F C1 -  -  -  	pop 	bc
  113 D1:B760 F1 -  -  -  	pop 	af
  114 D1:B761 C9 -  -  -  	ret
  115 D1:B762 -  -  -  -  
  116 D1:B762 -  -  -  -  ; ***************************************************************************************
  117 D1:B762 -  -  -  -  ;
  118 D1:B762 -  -  -  -  ;									Get time into HL'HL
  119 D1:B762 -  -  -  -  ;
  120 D1:B762 -  -  -  -  ; ***************************************************************************************
  121 D1:B762 -  -  -  -  
  122 D1:B762 -  -  -  -  SYSGetTimer:
  123 D1:B762 21 34 12 00 	ld 		hl,$1234
  124 D1:B766 D9 -  -  -  	exx
  125 D1:B767 21 78 56 00 	ld 		hl,$5678
  126 D1:B76B D9 -  -  -  	exx
  127 D1:B76C C9 -  -  -  	ret
  128 D1:B76D -  -  -  -  
  129 D1:B76D -  -  -  -  #endif
  130 D1:B76D -  -  -  -  
  131 D1:B76D -  -  -  -  ; ***************************************************************************************
  132 D1:B76D -  -  -  -  ;
  133 D1:B76D -  -  -  -  ;									Changes and Updates
  134 D1:B76D -  -  -  -  ;
  135 D1:B76D -  -  -  -  ; ***************************************************************************************
  136 D1:B76D -  -  -  -  ;
  137 D1:B76D -  -  -  -  ;		Date			Notes
  138 D1:B76D -  -  -  -  ;		==== 			=====
  139 D1:B76D -  -  -  -  ;
  140 D1:B76D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B76D -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B76D -  -  -  -  ; ***************************************************************************************
    2 D1:B76D -  -  -  -  ; ***************************************************************************************
    3 D1:B76D -  -  -  -  ;
    4 D1:B76D -  -  -  -  ;		Name : 		basic.asm
    5 D1:B76D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B76D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B76D -  -  -  -  ;		Reviewed :	No
    8 D1:B76D -  -  -  -  ;		Purpose :	Main program.
    9 D1:B76D -  -  -  -  ;
   10 D1:B76D -  -  -  -  ; ***************************************************************************************
   11 D1:B76D -  -  -  -  ; ***************************************************************************************
   12 D1:B76D -  -  -  -  
   13 D1:B76D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 21 01 00 BD 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 15 02 00 
              BC 12 13 00 
              11 13 AA 8A 
              41 AB A7 C0 
              12 13 00 11 
              13 80 09 03 
              00 BC 00 AA 
              4C AB 80 06 
              04 00 C0 00 
              80 09 05 00 
              BC 04 AA 42 
              AB 80 09 06 
              00 BC 05 AA 
              4C AB 80 0A 
              07 00 C0 00 
              A6 04 A6 05 
              80 0A 08 00 
              BC 19 AA 8A 
              41 AB 80 00 	.db	$21,$01,$00,$bd,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$15,$02,$00,$bc,$12,$13,$00,$11,$13,$aa,$8a,$41,$ab,$a7,$c0,$12,$13,$00,$11,$13,$80,$09,$03,$00,$bc,$00,$aa,$4c,$ab,$80,$06,$04,$00,$c0,$00,$80,$09,$05,$00,$bc,$04,$aa,$42,$ab,$80,$09,$06,$00,$bc,$05,$aa,$4c,$ab,$80,$0a,$07,$00,$c0,$00,$a6,$04,$a6,$05,$80,$0a,$08,$00,$bc,$19,$aa,$8a,$41,$ab,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:B86C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:C86C -  -  -  -  EndTestInstance:
   18 D1:C86C -  -  -  -  		
   19 D1:C86C -  -  -  -  ; ***************************************************************************************
   20 D1:C86C -  -  -  -  ;
   21 D1:C86C -  -  -  -  ;									Changes and Updates
   22 D1:C86C -  -  -  -  ;
   23 D1:C86C -  -  -  -  ; ***************************************************************************************
   24 D1:C86C -  -  -  -  ;
   25 D1:C86C -  -  -  -  ;		Date			Notes
   26 D1:C86C -  -  -  -  ;		==== 			=====
   27 D1:C86C -  -  -  -  ;
   28 D1:C86C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:C86C -  -  -  -  FinalAddress:
