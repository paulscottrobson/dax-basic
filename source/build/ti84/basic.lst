    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b6 ; gosub
   64 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b7 ; return
   65 00:0000 -  -  -  -  #define KWD_GOTO                            	$00b8 ; goto
   66 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b9 ; local
   67 00:0000 -  -  -  -  #define KWD_DIM                             	$00ba ; dim
   68 00:0000 -  -  -  -  #define KWD_REM                             	$00bb ; rem
   69 00:0000 -  -  -  -  #define KWD_LET                             	$00bc ; let
   70 00:0000 -  -  -  -  #define KWD_VDU                             	$00bd ; vdu
   71 00:0000 -  -  -  -  #define KWD_PRINT                           	$00be ; print
   72 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bf ; load
   73 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c0 ; save
   74 00:0000 -  -  -  -  #define KWD_LIST                            	$00c1 ; list
   75 00:0000 -  -  -  -  #define KWD_NEW                             	$00c2 ; new
   76 00:0000 -  -  -  -  #define KWD_RUN                             	$00c3 ; run
   77 00:0000 -  -  -  -  #define KWD_READ                            	$00c4 ; read
   78 00:0000 -  -  -  -  #define KWD_DATA                            	$00c5 ; data
   79 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c6 ; restore
   80 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c7 ; assert
   81 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c8 ; clear
   82 00:0000 -  -  -  -  #define KWD_END                             	$00c9 ; end
   83 00:0000 -  -  -  -  #define KWD_STOP                            	$00ca ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD A4 B6 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 7C D5 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD CF B0 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 E1 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 9E AA D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD CA B6 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD B0 B6 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 05 C3 5B 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 06 C3 5B 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  		
   78 D1:A8DD -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  
   81 D1:A8E1 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 D1:A8E1 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 D1:A8E7 -  -  -  -  
   84 D1:A8E7 -  -  -  -  AConvert: 									; used for address conversions.
   85 D1:A8E7 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8ED -  -  -  -  		
   87 D1:A8ED -  -  -  -  RandomSeed: 								; random number seeds.
   88 D1:A8ED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 D1:A8FD -  -  -  -  
   90 D1:A8FD -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 D1:A8FD 00 00 -  -  		.dw 	0
   92 D1:A8FF -  -  -  -  
   93 D1:A8FF -  -  -  -  ; ***************************************************************************************
   94 D1:A8FF -  -  -  -  ;
   95 D1:A8FF -  -  -  -  ;									Variable Information
   96 D1:A8FF -  -  -  -  ;
   97 D1:A8FF -  -  -  -  ; ***************************************************************************************
   98 D1:A8FF -  -  -  -  
   99 D1:A8FF -  -  -  -  VarNameStart: 								; first byte of name
  100 D1:A8FF 00 00 00 00 		.dw 	0,0
  101 D1:A903 -  -  -  -  VarHash: 									; name hash value
  102 D1:A903 00 00 -  -  		.dw 	0		
  103 D1:A905 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 D1:A905 00 00 00 00 		.dw 	0,0
  105 D1:A909 -  -  -  -  		
  106 D1:A909 -  -  -  -  ; ***************************************************************************************
  107 D1:A909 -  -  -  -  ;
  108 D1:A909 -  -  -  -  ;										  Buffers
  109 D1:A909 -  -  -  -  ;
  110 D1:A909 -  -  -  -  ; ***************************************************************************************
  111 D1:A909 -  -  -  -  
  112 D1:A909 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 D1:A909 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 D1:A919 -  -  -  -  
  115 D1:A919 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 D1:A919 00 00 -  -  		.dw 	0
  117 D1:A91B -  -  -  -  
  118 D1:A91B -  -  -  -  ConvertBuffer: 								; general usage
  119 D1:A91B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 D1:A95B -  -  -  -  
  121 D1:A95B -  -  -  -  ; ***************************************************************************************
  122 D1:A95B -  -  -  -  ;
  123 D1:A95B -  -  -  -  ;									Changes and Updates
  124 D1:A95B -  -  -  -  ;
  125 D1:A95B -  -  -  -  ; ***************************************************************************************
  126 D1:A95B -  -  -  -  ;
  127 D1:A95B -  -  -  -  ;		Date			Notes
  128 D1:A95B -  -  -  -  ;		==== 			=====
  129 D1:A95B -  -  -  -  ;
  130 D1:A95B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A95B -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A95B -  -  -  -  ; ***************************************************************************************
    2 D1:A95B -  -  -  -  ; ***************************************************************************************
    3 D1:A95B -  -  -  -  ;
    4 D1:A95B -  -  -  -  ;		Name : 		assert.asm
    5 D1:A95B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95B -  -  -  -  ;		Reviewed :	No
    8 D1:A95B -  -  -  -  ;		Purpose :	Assert command
    9 D1:A95B -  -  -  -  ;
   10 D1:A95B -  -  -  -  ; ***************************************************************************************
   11 D1:A95B -  -  -  -  ; ***************************************************************************************
   12 D1:A95B -  -  -  -  
   13 D1:A95B -  -  -  -  ; ***************************************************************************************
   14 D1:A95B -  -  -  -  ;
   15 D1:A95B -  -  -  -  ;									ASSERT command
   16 D1:A95B -  -  -  -  ;
   17 D1:A95B -  -  -  -  ; ***************************************************************************************
   18 D1:A95B -  -  -  -  
   19 D1:A95B -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A95B CD 8E AD D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A95F 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A965 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A966 3E 01 C3 5B 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A96C -  -  -  -  
   25 D1:A96C -  -  -  -  ; ***************************************************************************************
   26 D1:A96C -  -  -  -  ;
   27 D1:A96C -  -  -  -  ;									Changes and Updates
   28 D1:A96C -  -  -  -  ;
   29 D1:A96C -  -  -  -  ; ***************************************************************************************
   30 D1:A96C -  -  -  -  ;
   31 D1:A96C -  -  -  -  ;		Date			Notes
   32 D1:A96C -  -  -  -  ;		==== 			=====
   33 D1:A96C -  -  -  -  ;
   34 D1:A96C -  -  -  -  ; ***************************************************************************************
   35 D1:A96C -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A96C -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A96C -  -  -  -  ; ***************************************************************************************
    2 D1:A96C -  -  -  -  ; ***************************************************************************************
    3 D1:A96C -  -  -  -  ;
    4 D1:A96C -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A96C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A96C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A96C -  -  -  -  ;		Reviewed :	No
    8 D1:A96C -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A96C -  -  -  -  ;
   10 D1:A96C -  -  -  -  ; ***************************************************************************************
   11 D1:A96C -  -  -  -  ; ***************************************************************************************
   12 D1:A96C -  -  -  -  
   13 D1:A96C -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A96C -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A96C -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A96C -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A96C -  -  -  -  BadCmd_To: 			;; [to]
   18 D1:A96C C3 C5 AB D1 		jp 		SyntaxError
   19 D1:A970 -  -  -  -  
   20 D1:A970 -  -  -  -  ; ***************************************************************************************
   21 D1:A970 -  -  -  -  ;
   22 D1:A970 -  -  -  -  ;									Changes and Updates
   23 D1:A970 -  -  -  -  ;
   24 D1:A970 -  -  -  -  ; ***************************************************************************************
   25 D1:A970 -  -  -  -  ;
   26 D1:A970 -  -  -  -  ;		Date			Notes
   27 D1:A970 -  -  -  -  ;		==== 			=====
   28 D1:A970 -  -  -  -  ;
   29 D1:A970 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A970 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A970 -  -  -  -  ; ***************************************************************************************
    2 D1:A970 -  -  -  -  ; ***************************************************************************************
    3 D1:A970 -  -  -  -  ;
    4 D1:A970 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A970 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A970 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A970 -  -  -  -  ;		Reviewed :	No
    8 D1:A970 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A970 -  -  -  -  ;
   10 D1:A970 -  -  -  -  ; ***************************************************************************************
   11 D1:A970 -  -  -  -  ; ***************************************************************************************
   12 D1:A970 -  -  -  -  
   13 D1:A970 -  -  -  -  ; ***************************************************************************************
   14 D1:A970 -  -  -  -  ;
   15 D1:A970 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A970 -  -  -  -  ;
   17 D1:A970 -  -  -  -  ; ***************************************************************************************
   18 D1:A970 -  -  -  -  
   19 D1:A970 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A970 C9 -  -  -  		ret
   21 D1:A971 -  -  -  -  
   22 D1:A971 -  -  -  -  ; ***************************************************************************************
   23 D1:A971 -  -  -  -  ;
   24 D1:A971 -  -  -  -  ;									Changes and Updates
   25 D1:A971 -  -  -  -  ;
   26 D1:A971 -  -  -  -  ; ***************************************************************************************
   27 D1:A971 -  -  -  -  ;
   28 D1:A971 -  -  -  -  ;		Date			Notes
   29 D1:A971 -  -  -  -  ;		==== 			=====
   30 D1:A971 -  -  -  -  ;
   31 D1:A971 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A971 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A971 -  -  -  -  ; ***************************************************************************************
    2 D1:A971 -  -  -  -  ; ***************************************************************************************
    3 D1:A971 -  -  -  -  ;
    4 D1:A971 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A971 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A971 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A971 -  -  -  -  ;		Reviewed :	No
    8 D1:A971 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A971 -  -  -  -  ;
   10 D1:A971 -  -  -  -  ; ***************************************************************************************
   11 D1:A971 -  -  -  -  ; ***************************************************************************************
   12 D1:A971 -  -  -  -  
   13 D1:A971 -  -  -  -  ; ***************************************************************************************
   14 D1:A971 -  -  -  -  ;
   15 D1:A971 -  -  -  -  ;		DIM command
   16 D1:A971 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 D1:A971 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 D1:A971 -  -  -  -  ;								(can be comma chained)
   19 D1:A971 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 D1:A971 -  -  -  -  ;
   21 D1:A971 -  -  -  -  ; ***************************************************************************************
   22 D1:A971 -  -  -  -  
   23 D1:A971 -  -  -  -  Command_DIM: 	;; [dim]
   24 D1:A971 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   25 D1:A979 -  -  -  -  		;
   26 D1:A979 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A979 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A979 -  -  -  -  		;
   29 D1:A979 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A97B D1 -  -  -  		pop 	de
   31 D1:A97C -  -  -  -  		;
   32 D1:A97C DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A97F FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A981 D2 C5 AB D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A985 -  -  -  -  _DISkip:
   36 D1:A985 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A987 DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A98A FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A98C 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A98E -  -  -  -  		;
   41 D1:A98E DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A991 FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A993 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A994 CC AD A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A998 F1 -  -  -  		pop 	af
   46 D1:A999 C4 B3 A9 D1 		call 	nz,DimensionAllocate
   47 D1:A99D -  -  -  -  		;
   48 D1:A99D DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A9A0 FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A9A2 C0 -  -  -  		ret 	nz
   51 D1:A9A3 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A9A5 18 CA -  -  		jr 		Command_DIM
   53 D1:A9A7 -  -  -  -  
   54 D1:A9A7 -  -  -  -  _CDError:
   55 D1:A9A7 3E 04 C3 5B 
              AB D1 -  -  		ERR_DIM		
   56 D1:A9AD -  -  -  -  
   57 D1:A9AD -  -  -  -  ; ***************************************************************************************
   58 D1:A9AD -  -  -  -  ;
   59 D1:A9AD -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
   60 D1:A9AD -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
   61 D1:A9AD -  -  -  -  ;
   62 D1:A9AD -  -  -  -  ; ***************************************************************************************
   63 D1:A9AD -  -  -  -  
   64 D1:A9AD -  -  -  -  DimensionArray:
   65 D1:A9AD 3E 0F C3 5B 
              AB D1 -  -  		ERR_TODO
   66 D1:A9B3 -  -  -  -  
   67 D1:A9B3 -  -  -  -  ; ***************************************************************************************
   68 D1:A9B3 -  -  -  -  ;
   69 D1:A9B3 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   70 D1:A9B3 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   71 D1:A9B3 -  -  -  -  ;
   72 D1:A9B3 -  -  -  -  ; ***************************************************************************************
   73 D1:A9B3 -  -  -  -  
   74 D1:A9B3 -  -  -  -  DimensionAllocate:
   75 D1:A9B3 3E 0F C3 5B 
              AB D1 -  -  		ERR_TODO
   76 D1:A9B9 -  -  -  -  
   77 D1:A9B9 -  -  -  -  ; ***************************************************************************************
   78 D1:A9B9 -  -  -  -  ;
   79 D1:A9B9 -  -  -  -  ;									Changes and Updates
   80 D1:A9B9 -  -  -  -  ;
   81 D1:A9B9 -  -  -  -  ; ***************************************************************************************
   82 D1:A9B9 -  -  -  -  ;
   83 D1:A9B9 -  -  -  -  ;		Date			Notes
   84 D1:A9B9 -  -  -  -  ;		==== 			=====
   85 D1:A9B9 -  -  -  -  ;
   86 D1:A9B9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A9B9 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A9B9 -  -  -  -  ; ***************************************************************************************
    2 D1:A9B9 -  -  -  -  ; ***************************************************************************************
    3 D1:A9B9 -  -  -  -  ;
    4 D1:A9B9 -  -  -  -  ;		Name : 		end.asm
    5 D1:A9B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9B9 -  -  -  -  ;		Reviewed :	No
    8 D1:A9B9 -  -  -  -  ;		Purpose :	End command
    9 D1:A9B9 -  -  -  -  ;
   10 D1:A9B9 -  -  -  -  ; ***************************************************************************************
   11 D1:A9B9 -  -  -  -  ; ***************************************************************************************
   12 D1:A9B9 -  -  -  -  
   13 D1:A9B9 -  -  -  -  ; ***************************************************************************************
   14 D1:A9B9 -  -  -  -  ;
   15 D1:A9B9 -  -  -  -  ;										END command
   16 D1:A9B9 -  -  -  -  ;
   17 D1:A9B9 -  -  -  -  ; ***************************************************************************************
   18 D1:A9B9 -  -  -  -  
   19 D1:A9B9 -  -  -  -  Command_END: 	;; [end]
   20 D1:A9B9 3E 00 C3 5B 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A9BF -  -  -  -  
   22 D1:A9BF -  -  -  -  ; ***************************************************************************************
   23 D1:A9BF -  -  -  -  ;
   24 D1:A9BF -  -  -  -  ;									Changes and Updates
   25 D1:A9BF -  -  -  -  ;
   26 D1:A9BF -  -  -  -  ; ***************************************************************************************
   27 D1:A9BF -  -  -  -  ;
   28 D1:A9BF -  -  -  -  ;		Date			Notes
   29 D1:A9BF -  -  -  -  ;		==== 			=====
   30 D1:A9BF -  -  -  -  ;
   31 D1:A9BF -  -  -  -  ; ***************************************************************************************
   32 D1:A9BF -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A9BF -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A9BF -  -  -  -  ; ***************************************************************************************
    2 D1:A9BF -  -  -  -  ; ***************************************************************************************
    3 D1:A9BF -  -  -  -  ;
    4 D1:A9BF -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A9BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9BF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9BF -  -  -  -  ;		Reviewed :	None
    8 D1:A9BF -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A9BF -  -  -  -  ;
   10 D1:A9BF -  -  -  -  ; ***************************************************************************************
   11 D1:A9BF -  -  -  -  ; ***************************************************************************************
   12 D1:A9BF -  -  -  -  
   13 D1:A9BF -  -  -  -  ; ***************************************************************************************
   14 D1:A9BF -  -  -  -  ;
   15 D1:A9BF -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A9BF -  -  -  -  ;
   17 D1:A9BF -  -  -  -  ; ***************************************************************************************
   18 D1:A9BF -  -  -  -  
   19 D1:A9BF -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A9BF DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A9C4 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A9C8 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A9CB DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A9CD -  -  -  -  		;
   25 D1:A9CD ED 7B DD A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A9D2 C3 B1 AA D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A9D6 -  -  -  -  
   28 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   29 D1:A9D6 -  -  -  -  ;
   30 D1:A9D6 -  -  -  -  ;									Changes and Updates
   31 D1:A9D6 -  -  -  -  ;
   32 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   33 D1:A9D6 -  -  -  -  ;
   34 D1:A9D6 -  -  -  -  ;		Date			Notes
   35 D1:A9D6 -  -  -  -  ;		==== 			=====
   36 D1:A9D6 -  -  -  -  ;
   37 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   38 D1:A9D6 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:A9D6 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:A9D6 -  -  -  -  ; ***************************************************************************************
    2 D1:A9D6 -  -  -  -  ; ***************************************************************************************
    3 D1:A9D6 -  -  -  -  ;
    4 D1:A9D6 -  -  -  -  ;		Name : 		let.asm
    5 D1:A9D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9D6 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A9D6 -  -  -  -  ;		Reviewed :	No
    8 D1:A9D6 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:A9D6 -  -  -  -  ;
   10 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   11 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   12 D1:A9D6 -  -  -  -  
   13 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   14 D1:A9D6 -  -  -  -  ;
   15 D1:A9D6 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:A9D6 -  -  -  -  ;
   17 D1:A9D6 -  -  -  -  ; ***************************************************************************************
   18 D1:A9D6 -  -  -  -  
   19 D1:A9D6 -  -  -  -  Command_LET: 	;; [let]
   20 D1:A9D6 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:A9D9 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:A9DB 28 2F -  -  		jr 		z,_CLString
   23 D1:A9DD FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:A9DF 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:A9E1 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:A9E3 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:A9E7 -  -  -  -  _CLNoAuto:
   28 D1:A9E7 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:A9E9 CD 10 AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:A9ED CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:A9EF CA C5 AB D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:A9F3 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:A9F4 C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:A9F5 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:A9F6 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:A9FA 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:A9FC CD 4F AB D1 		call 	CheckNextA
   38 D1:AA00 -  -  -  -  
   39 D1:AA00 CD 86 AD D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA04 -  -  -  -  
   41 D1:AA04 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA05 43 -  -  -  		ld 		b,e 						
   43 D1:AA06 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA07 -  -  -  -  		;
   45 D1:AA07 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA07 -  -  -  -  		;
   47 D1:AA07 CD 14 AA D1 		call 	WriteHLToDE
   48 D1:AA0B C9 -  -  -  		ret
   49 D1:AA0C -  -  -  -  		;
   50 D1:AA0C -  -  -  -  		; 		String assignment code.
   51 D1:AA0C -  -  -  -  		;
   52 D1:AA0C -  -  -  -  _CLString:
   53 D1:AA0C F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:AA14 -  -  -  -  
   55 D1:AA14 -  -  -  -  ; ***************************************************************************************
   56 D1:AA14 -  -  -  -  ;
   57 D1:AA14 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:AA14 -  -  -  -  ;
   59 D1:AA14 -  -  -  -  ; ***************************************************************************************
   60 D1:AA14 -  -  -  -  
   61 D1:AA14 -  -  -  -  WriteHLToDE:
   62 D1:AA14 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:AA16 C2 B9 AB D1 		jp 		nz,TypeMismatch
   64 D1:AA1A -  -  -  -  		;
   65 D1:AA1A -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:AA1A -  -  -  -  		;		
   67 D1:AA1A -  -  -  -  _WHDWriteNumber:
   68 D1:AA1A EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:AA1B D9 -  -  -  		exx
   70 D1:AA1C EB -  -  -  		ex 		de,hl
   71 D1:AA1D D9 -  -  -  		exx
   72 D1:AA1E -  -  -  -  
   73 D1:AA1E 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:AA1F 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:AA20 72 -  -  -  		ld 		(hl),d
   76 D1:AA21 23 -  -  -  		inc 	hl
   77 D1:AA22 E5 -  -  -  		push 	hl
   78 D1:AA23 D9 -  -  -  		exx
   79 D1:AA24 E1 -  -  -  		pop 	hl
   80 D1:AA25 73 -  -  -  		ld 		(hl),e
   81 D1:AA26 23 -  -  -  		inc 	hl
   82 D1:AA27 72 -  -  -  		ld 		(hl),d
   83 D1:AA28 D9 -  -  -  		exx
   84 D1:AA29 -  -  -  -  
   85 D1:AA29 C9 -  -  -  		ret
   86 D1:AA2A -  -  -  -  
   87 D1:AA2A -  -  -  -  ; ***************************************************************************************
   88 D1:AA2A -  -  -  -  ;
   89 D1:AA2A -  -  -  -  ;									Changes and Updates
   90 D1:AA2A -  -  -  -  ;
   91 D1:AA2A -  -  -  -  ; ***************************************************************************************
   92 D1:AA2A -  -  -  -  ;
   93 D1:AA2A -  -  -  -  ;		Date			Notes
   94 D1:AA2A -  -  -  -  ;		==== 			=====
   95 D1:AA2A -  -  -  -  ;
   96 D1:AA2A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:AA2A -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AA2A -  -  -  -  ; ***************************************************************************************
    2 D1:AA2A -  -  -  -  ; ***************************************************************************************
    3 D1:AA2A -  -  -  -  ;
    4 D1:AA2A -  -  -  -  ;		Name : 		print.asm
    5 D1:AA2A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA2A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA2A -  -  -  -  ;		Reviewed :	No
    8 D1:AA2A -  -  -  -  ;		Purpose :	Print command
    9 D1:AA2A -  -  -  -  ;
   10 D1:AA2A -  -  -  -  ; ***************************************************************************************
   11 D1:AA2A -  -  -  -  ; ***************************************************************************************
   12 D1:AA2A -  -  -  -  
   13 D1:AA2A -  -  -  -  ; ***************************************************************************************
   14 D1:AA2A -  -  -  -  ;
   15 D1:AA2A -  -  -  -  ;										PRINT command
   16 D1:AA2A -  -  -  -  ;
   17 D1:AA2A -  -  -  -  ; ***************************************************************************************
   18 D1:AA2A -  -  -  -  
   19 D1:AA2A -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AA2A -  -  -  -  		;
   21 D1:AA2A -  -  -  -  		;		Main loop
   22 D1:AA2A -  -  -  -  		;
   23 D1:AA2A -  -  -  -  _CPRLoop:
   24 D1:AA2A DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:AA2D FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:AA2F 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:AA31 FE A7 -  -  		cp 		KWD_COLON 	
   28 D1:AA33 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:AA35 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:AA37 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:AA39 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:AA3B 28 2C -  -  		jr 		z,_CPRTab
   33 D1:AA3D FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:AA3F 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:AA41 -  -  -  -  		;
   36 D1:AA41 CD 86 AD D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:AA45 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:AA47 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:AA49 -  -  -  -  		;
   40 D1:AA49 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:AA4B -  -  -  -  _CPRPrintNumber:
   42 D1:AA4B F5 -  -  -  		push 	af 							; print leading space
   43 D1:AA4C 3E 20 -  -  		ld 		a,' '
   44 D1:AA4E CD CA B6 D1 		call 	SYSPrintChar
   45 D1:AA52 F1 -  -  -  		pop 	af
   46 D1:AA53 01 1B A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AA57 C5 -  -  -  		push 	bc
   48 D1:AA58 CD 57 B6 D1 		call 	Int32ToString 				; convert to string
   49 D1:AA5C E1 -  -  -  		pop 	hl
   50 D1:AA5D -  -  -  -  		;
   51 D1:AA5D -  -  -  -  		; 		Print text at HL.
   52 D1:AA5D -  -  -  -  		;
   53 D1:AA5D -  -  -  -  _CPRPrintHL:
   54 D1:AA5D CD EE B0 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AA61 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AA63 -  -  -  -  		;
   57 D1:AA63 -  -  -  -  		; 		New line (')
   58 D1:AA63 -  -  -  -  		;
   59 D1:AA63 -  -  -  -  _CPRNewLine:
   60 D1:AA63 CD F2 B6 D1 		call 	SYSPrintCRLF
   61 D1:AA67 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:AA69 -  -  -  -  		;
   63 D1:AA69 -  -  -  -  		; 		Tab command (,)
   64 D1:AA69 -  -  -  -  		;
   65 D1:AA69 -  -  -  -  _CPRTab:
   66 D1:AA69 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:AA6B CD CA B6 D1 		call 	SYSPrintChar
   68 D1:AA6F -  -  -  -  		;
   69 D1:AA6F -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:AA6F -  -  -  -  		;
   71 D1:AA6F -  -  -  -  _CPRCheckNext:
   72 D1:AA6F DD 23 -  -  		inc 	ix 							; consume current
   73 D1:AA71 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:AA74 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:AA76 C8 -  -  -  		ret 	z
   76 D1:AA77 FE A7 -  -  		cp 		KWD_COLON
   77 D1:AA79 C8 -  -  -  		ret 	z
   78 D1:AA7A 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:AA7C -  -  -  -  		;
   80 D1:AA7C -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:AA7C -  -  -  -  		;
   82 D1:AA7C -  -  -  -  _CPRExitNL:
   83 D1:AA7C CD F2 B6 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:AA80 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 D1:AA81 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AA81 -  -  -  -  ; ***************************************************************************************
    2 D1:AA81 -  -  -  -  ; ***************************************************************************************
    3 D1:AA81 -  -  -  -  ;
    4 D1:AA81 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AA81 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA81 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA81 -  -  -  -  ;		Reviewed :	No
    8 D1:AA81 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AA81 -  -  -  -  ;
   10 D1:AA81 -  -  -  -  ; ***************************************************************************************
   11 D1:AA81 -  -  -  -  ; ***************************************************************************************
   12 D1:AA81 -  -  -  -  
   13 D1:AA81 -  -  -  -  ; ***************************************************************************************
   14 D1:AA81 -  -  -  -  ;
   15 D1:AA81 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AA81 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AA81 -  -  -  -  ;
   18 D1:AA81 -  -  -  -  ; ***************************************************************************************
   19 D1:AA81 -  -  -  -  
   20 D1:AA81 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AA81 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AA81 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AA84 DD 23 -  -  		inc 	ix
   24 D1:AA86 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AA88 C8 -  -  -  		ret 	z
   26 D1:AA89 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AA8B C8 -  -  -  		ret 	z
   28 D1:AA8C FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AA8E C2 C5 AB D1 		jp 		nz,SyntaxError
   30 D1:AA92 -  -  -  -  		;		
   31 D1:AA92 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AA96 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AA99 13 -  -  -  		inc 	de 
   34 D1:AA9A 13 -  -  -  		inc 	de
   35 D1:AA9B DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AA9D C9 -  -  -  		ret
   37 D1:AA9E -  -  -  -  
   38 D1:AA9E -  -  -  -  ; ***************************************************************************************
   39 D1:AA9E -  -  -  -  ;
   40 D1:AA9E -  -  -  -  ;									Changes and Updates
   41 D1:AA9E -  -  -  -  ;
   42 D1:AA9E -  -  -  -  ; ***************************************************************************************
   43 D1:AA9E -  -  -  -  ;
   44 D1:AA9E -  -  -  -  ;		Date			Notes
   45 D1:AA9E -  -  -  -  ;		==== 			=====
   46 D1:AA9E -  -  -  -  ;
   47 D1:AA9E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AA9E -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AA9E -  -  -  -  ; ***************************************************************************************
    2 D1:AA9E -  -  -  -  ; ***************************************************************************************
    3 D1:AA9E -  -  -  -  ;
    4 D1:AA9E -  -  -  -  ;		Name : 		run.asm
    5 D1:AA9E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA9E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA9E -  -  -  -  ;		Reviewed :	No
    8 D1:AA9E -  -  -  -  ;		Purpose :	Run command
    9 D1:AA9E -  -  -  -  ;
   10 D1:AA9E -  -  -  -  ; ***************************************************************************************
   11 D1:AA9E -  -  -  -  ; ***************************************************************************************
   12 D1:AA9E -  -  -  -  
   13 D1:AA9E -  -  -  -  ; ***************************************************************************************
   14 D1:AA9E -  -  -  -  ;
   15 D1:AA9E -  -  -  -  ;										RUN command
   16 D1:AA9E -  -  -  -  ;
   17 D1:AA9E -  -  -  -  ; ***************************************************************************************
   18 D1:AA9E -  -  -  -  
   19 D1:AA9E -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AA9E CD 80 B0 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AAA2 -  -  -  -  
   22 D1:AAA2 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AAA7 ED 73 DD A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AAAC AF -  -  -  		xor 	a
   25 D1:AAAD 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AAB1 -  -  -  -  		;
   27 D1:AAB1 -  -  -  -  		; 		New line at IX.
   28 D1:AAB1 -  -  -  -  		;
   29 D1:AAB1 -  -  -  -  CRNewLine:
   30 D1:AAB1 DD 22 D9 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AAB6 -  -  -  -  		;
   32 D1:AAB6 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AAB9 B7 -  -  -  		or 		a
   34 D1:AABA CA B9 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AABE -  -  -  -  		;
   36 D1:AABE DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AAC0 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AAC2 DD 23 -  -  		inc 	ix
   39 D1:AAC4 -  -  -  -  		;
   40 D1:AAC4 -  -  -  -  		; 		New command at IX
   41 D1:AAC4 -  -  -  -  		;
   42 D1:AAC4 -  -  -  -  _CRNewCommand:	
   43 D1:AAC4 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AAC7 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AAC8 F2 03 AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AACC -  -  -  -  		;
   47 D1:AACC FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AACE 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AAD0 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AAD2 D2 F3 AA D1 		jp 		nc,_CRAlternateLets
   51 D1:AAD6 -  -  -  -  		;
   52 D1:AAD6 -  -  -  -  _CRDoCommand:		
   53 D1:AAD6 E6 7F 21 00 
              00 00 6F 29 
              29 11 6C B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AAEB DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AAED CD E1 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AAF1 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AAF3 -  -  -  -  		;
   58 D1:AAF3 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AAF3 -  -  -  -  		;
   60 D1:AAF3 -  -  -  -  		;
   61 D1:AAF3 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AAF3 -  -  -  -  		;		
   63 D1:AAF3 -  -  -  -  _CRAlternateLets:		
   64 D1:AAF3 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AAF5 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AAF7 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AAF9 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AAFB FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AAFD 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AAFF C3 C5 AB D1 		jp 		SyntaxError
   71 D1:AB03 -  -  -  -  		;
   72 D1:AB03 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB03 -  -  -  -  		;
   74 D1:AB03 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB03 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB05 D2 C5 AB D1 		jp 		nc,SyntaxError
   77 D1:AB09 -  -  -  -  _CRAssignmentLet:		
   78 D1:AB09 CD D6 A9 D1 		call	Command_LET 				; do LET.
   79 D1:AB0D C3 C4 AA D1 		jp 		_CRNewCommand
   80 D1:AB11 -  -  -  -  
   81 D1:AB11 -  -  -  -  ; ***************************************************************************************
   82 D1:AB11 -  -  -  -  ;
   83 D1:AB11 -  -  -  -  ;									Changes and Updates
   84 D1:AB11 -  -  -  -  ;
   85 D1:AB11 -  -  -  -  ; ***************************************************************************************
   86 D1:AB11 -  -  -  -  ;
   87 D1:AB11 -  -  -  -  ;		Date			Notes
   88 D1:AB11 -  -  -  -  ;		==== 			=====
   89 D1:AB11 -  -  -  -  ;
   90 D1:AB11 -  -  -  -  ; ***************************************************************************************
   91 D1:AB11 -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AB11 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AB11 -  -  -  -  ; ***************************************************************************************
    2 D1:AB11 -  -  -  -  ; ***************************************************************************************
    3 D1:AB11 -  -  -  -  ;
    4 D1:AB11 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AB11 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB11 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB11 -  -  -  -  ;		Reviewed :	No
    8 D1:AB11 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AB11 -  -  -  -  ;
   10 D1:AB11 -  -  -  -  ; ***************************************************************************************
   11 D1:AB11 -  -  -  -  ; ***************************************************************************************
   12 D1:AB11 -  -  -  -  
   13 D1:AB11 -  -  -  -  ; ***************************************************************************************
   14 D1:AB11 -  -  -  -  ;
   15 D1:AB11 -  -  -  -  ;										STOP command
   16 D1:AB11 -  -  -  -  ;
   17 D1:AB11 -  -  -  -  ; ***************************************************************************************
   18 D1:AB11 -  -  -  -  
   19 D1:AB11 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AB11 3E 0D C3 5B 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AB17 -  -  -  -  
   22 D1:AB17 -  -  -  -  ; ***************************************************************************************
   23 D1:AB17 -  -  -  -  ;
   24 D1:AB17 -  -  -  -  ;									Changes and Updates
   25 D1:AB17 -  -  -  -  ;
   26 D1:AB17 -  -  -  -  ; ***************************************************************************************
   27 D1:AB17 -  -  -  -  ;
   28 D1:AB17 -  -  -  -  ;		Date			Notes
   29 D1:AB17 -  -  -  -  ;		==== 			=====
   30 D1:AB17 -  -  -  -  ;
   31 D1:AB17 -  -  -  -  ; ***************************************************************************************
   32 D1:AB17 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB17 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AB17 -  -  -  -  ; ***************************************************************************************
    2 D1:AB17 -  -  -  -  ; ***************************************************************************************
    3 D1:AB17 -  -  -  -  ;
    4 D1:AB17 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AB17 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB17 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB17 -  -  -  -  ;		Reviewed :	No
    8 D1:AB17 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AB17 -  -  -  -  ;
   10 D1:AB17 -  -  -  -  ; ***************************************************************************************
   11 D1:AB17 -  -  -  -  ; ***************************************************************************************
   12 D1:AB17 -  -  -  -  
   13 D1:AB17 -  -  -  -  ; ***************************************************************************************
   14 D1:AB17 -  -  -  -  ;
   15 D1:AB17 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AB17 -  -  -  -  ;
   17 D1:AB17 -  -  -  -  ; ***************************************************************************************
   18 D1:AB17 -  -  -  -  
   19 D1:AB17 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AB17             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AB17             		inc 	ix
   22 D1:AB17             		cp 		ch 							; exit if matches
   23 D1:AB17             		ret 	z
   24 D1:AB17             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AB17             		jp 		ErrorHandler
   26 D1:AB17             #endmacro
   27 D1:AB17 -  -  -  -  
   28 D1:AB17 -  -  -  -  CheckLeftBracket:
   29 D1:AB17 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 5B 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AB25 -  -  -  -  
   31 D1:AB25 -  -  -  -  CheckRightBracket:
   32 D1:AB25 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 5B 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AB33 -  -  -  -  
   34 D1:AB33 -  -  -  -  CheckDollar:
   35 D1:AB33 DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 5B 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AB41 -  -  -  -  		
   37 D1:AB41 -  -  -  -  CheckComma:
   38 D1:AB41 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 5B 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AB4F -  -  -  -  
   40 D1:AB4F -  -  -  -  ; ***************************************************************************************
   41 D1:AB4F -  -  -  -  ;
   42 D1:AB4F -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AB4F -  -  -  -  ;
   44 D1:AB4F -  -  -  -  ; ***************************************************************************************
   45 D1:AB4F -  -  -  -  
   46 D1:AB4F -  -  -  -  CheckNextA:
   47 D1:AB4F DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AB52 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AB54 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AB55 3E 0E C3 5B 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AB5B -  -  -  -  		
   52 D1:AB5B -  -  -  -  ; ***************************************************************************************
   53 D1:AB5B -  -  -  -  ;
   54 D1:AB5B -  -  -  -  ;									Changes and Updates
   55 D1:AB5B -  -  -  -  ;
   56 D1:AB5B -  -  -  -  ; ***************************************************************************************
   57 D1:AB5B -  -  -  -  ;
   58 D1:AB5B -  -  -  -  ;		Date			Notes
   59 D1:AB5B -  -  -  -  ;		==== 			=====
   60 D1:AB5B -  -  -  -  ;
   61 D1:AB5B -  -  -  -  ; ***************************************************************************************
   62 D1:AB5B -  -  -  -  		
Listing for file "_build.asm"
   25 D1:AB5B -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AB5B -  -  -  -  ; ***************************************************************************************
    2 D1:AB5B -  -  -  -  ; ***************************************************************************************
    3 D1:AB5B -  -  -  -  ;
    4 D1:AB5B -  -  -  -  ;		Name : 		errors.asm
    5 D1:AB5B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB5B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB5B -  -  -  -  ;		Reviewed :	No
    8 D1:AB5B -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AB5B -  -  -  -  ;
   10 D1:AB5B -  -  -  -  ; ***************************************************************************************
   11 D1:AB5B -  -  -  -  ; ***************************************************************************************
   12 D1:AB5B -  -  -  -  
   13 D1:AB5B -  -  -  -  ; ***************************************************************************************
   14 D1:AB5B -  -  -  -  ;
   15 D1:AB5B -  -  -  -  ;								Error handler, message A 
   16 D1:AB5B -  -  -  -  ;
   17 D1:AB5B -  -  -  -  ; ***************************************************************************************
   18 D1:AB5B -  -  -  -  
   19 D1:AB5B -  -  -  -  ErrorHandler:
   20 D1:AB5B F5 -  -  -  		push 	af 						; save error ID
   21 D1:AB5C -  -  -  -  
   22 D1:AB5C 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AB60 6F -  -  -  		ld 		l,a
   24 D1:AB61 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AB62 29 -  -  -  		add 	hl,hl 		
   26 D1:AB63 11 31 B2 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AB67 19 -  -  -  		add 	hl,de
   28 D1:AB68 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AB6A CD EE B0 D1 		call 	PrintStringAtHL
   30 D1:AB6E -  -  -  -  		;
   31 D1:AB6E F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AB6F B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AB70 28 2F -  -  		jr 		z,_EHExit
   34 D1:AB72 -  -  -  -  		;
   35 D1:AB72 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AB77 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AB7A B7 -  -  -  		or 		a
   38 D1:AB7B 28 24 -  -  		jr 		z,_EHExit
   39 D1:AB7D -  -  -  -  
   40 D1:AB7D 21 A9 AB D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AB81 CD EE B0 D1 		call 	PrintStringAtHL 
   42 D1:AB85 -  -  -  -  		
   43 D1:AB85 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AB86 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AB8A D9 -  -  -  		exx 
   46 D1:AB8B DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AB8E DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AB91 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AB93 01 1B A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AB97 CD 57 B6 D1 		call 	Int32ToString
   51 D1:AB9B C5 -  -  -  		push 	bc
   52 D1:AB9C E1 -  -  -  		pop 	hl
   53 D1:AB9D CD EE B0 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:ABA1 -  -  -  -  _EHExit:		
   55 D1:ABA1 CD F2 B6 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:ABA5 C3 9B A8 D1 		jp 		WarmStart
   57 D1:ABA9 -  -  -  -  
   58 D1:ABA9 -  -  -  -  _EHAtText:
   59 D1:ABA9 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:ABB3 -  -  -  -  
   61 D1:ABB3 -  -  -  -  NotImplemented:
   62 D1:ABB3 3E 05 C3 5B 
              AB D1 -  -  		ERR_DISABLED
   63 D1:ABB9 -  -  -  -  TypeMismatch:
   64 D1:ABB9 3E 02 C3 5B 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:ABBF -  -  -  -  BadValue:
   66 D1:ABBF 3E 03 C3 5B 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:ABC5 -  -  -  -  SyntaxError:
   68 D1:ABC5 3E 0E C3 5B 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:ABCB -  -  -  -  						
   70 D1:ABCB -  -  -  -  ; ***************************************************************************************
   71 D1:ABCB -  -  -  -  ;
   72 D1:ABCB -  -  -  -  ;									Changes and Updates
   73 D1:ABCB -  -  -  -  ;
   74 D1:ABCB -  -  -  -  ; ***************************************************************************************
   75 D1:ABCB -  -  -  -  ;
   76 D1:ABCB -  -  -  -  ;		Date			Notes
   77 D1:ABCB -  -  -  -  ;		==== 			=====
   78 D1:ABCB -  -  -  -  ;
   79 D1:ABCB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:ABCB -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:ABCB -  -  -  -  ; ***************************************************************************************
    2 D1:ABCB -  -  -  -  ; ***************************************************************************************
    3 D1:ABCB -  -  -  -  ;
    4 D1:ABCB -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:ABCB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABCB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABCB -  -  -  -  ;		Reviewed :	No
    8 D1:ABCB -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:ABCB -  -  -  -  ;
   10 D1:ABCB -  -  -  -  ; ***************************************************************************************
   11 D1:ABCB -  -  -  -  ; ***************************************************************************************
   12 D1:ABCB -  -  -  -  
   13 D1:ABCB -  -  -  -  ; ***************************************************************************************
   14 D1:ABCB -  -  -  -  ;
   15 D1:ABCB -  -  -  -  ; 									Addition
   16 D1:ABCB -  -  -  -  ;
   17 D1:ABCB -  -  -  -  ; ***************************************************************************************
   18 D1:ABCB -  -  -  -  
   19 D1:ABCB -  -  -  -  ALUAdd: 		;; [+]
   20 D1:ABCB CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 D6 
              B5 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:ABD9 -  -  -  -  
   22 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   23 D1:ABD9 -  -  -  -  ;
   24 D1:ABD9 -  -  -  -  ; 									Subtraction
   25 D1:ABD9 -  -  -  -  ;
   26 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   27 D1:ABD9 -  -  -  -  
   28 D1:ABD9 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:ABD9 CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 DE 
              B5 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:ABE7 -  -  -  -  
   31 D1:ABE7 -  -  -  -  ; ***************************************************************************************
   32 D1:ABE7 -  -  -  -  ;
   33 D1:ABE7 -  -  -  -  ; 									  Multiply
   34 D1:ABE7 -  -  -  -  ;
   35 D1:ABE7 -  -  -  -  ; ***************************************************************************************
   36 D1:ABE7 -  -  -  -  
   37 D1:ABE7 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:ABE7 CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 9D 
              B5 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:ABF5 -  -  -  -  
   40 D1:ABF5 -  -  -  -  ; ***************************************************************************************
   41 D1:ABF5 -  -  -  -  ;
   42 D1:ABF5 -  -  -  -  ; 									  Divide
   43 D1:ABF5 -  -  -  -  ;
   44 D1:ABF5 -  -  -  -  ; ***************************************************************************************
   45 D1:ABF5 -  -  -  -  
   46 D1:ABF5 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:ABF5 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:ABF5 CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 9D 
              B4 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AC03 -  -  -  -  
   50 D1:AC03 -  -  -  -  ; ***************************************************************************************
   51 D1:AC03 -  -  -  -  ;
   52 D1:AC03 -  -  -  -  ; 									  Modulus
   53 D1:AC03 -  -  -  -  ;
   54 D1:AC03 -  -  -  -  ; ***************************************************************************************
   55 D1:AC03 -  -  -  -  
   56 D1:AC03 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AC03 CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 A0 
              B4 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AC11 -  -  -  -  
   59 D1:AC11 -  -  -  -  ; ***************************************************************************************
   60 D1:AC11 -  -  -  -  ;
   61 D1:AC11 -  -  -  -  ; 									  Logical
   62 D1:AC11 -  -  -  -  ;
   63 D1:AC11 -  -  -  -  ; ***************************************************************************************
   64 D1:AC11 -  -  -  -  
   65 D1:AC11 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AC11 CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 E8 
              B5 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AC1F -  -  -  -  
   68 D1:AC1F -  -  -  -  ALUOr: 			;; [or]
   69 D1:AC1F CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 F5 
              B5 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AC2D -  -  -  -  
   71 D1:AC2D -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AC2D CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 02 
              B6 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AC3B -  -  -  -  
   74 D1:AC3B -  -  -  -  ; ***************************************************************************************
   75 D1:AC3B -  -  -  -  ;
   76 D1:AC3B -  -  -  -  ;									Changes and Updates
   77 D1:AC3B -  -  -  -  ;
   78 D1:AC3B -  -  -  -  ; ***************************************************************************************
   79 D1:AC3B -  -  -  -  ;
   80 D1:AC3B -  -  -  -  ;		Date			Notes
   81 D1:AC3B -  -  -  -  ;		==== 			=====
   82 D1:AC3B -  -  -  -  ;
   83 D1:AC3B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC3B -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AC3B -  -  -  -  ; ***************************************************************************************
    2 D1:AC3B -  -  -  -  ; ***************************************************************************************
    3 D1:AC3B -  -  -  -  ;
    4 D1:AC3B -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AC3B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC3B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC3B -  -  -  -  ;		Reviewed :	No
    8 D1:AC3B -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AC3B -  -  -  -  ;
   10 D1:AC3B -  -  -  -  ; ***************************************************************************************
   11 D1:AC3B -  -  -  -  ; ***************************************************************************************
   12 D1:AC3B -  -  -  -  
   13 D1:AC3B -  -  -  -  ; ***************************************************************************************
   14 D1:AC3B -  -  -  -  ;
   15 D1:AC3B -  -  -  -  ; 									<l> <op> <r>
   16 D1:AC3B -  -  -  -  ;
   17 D1:AC3B -  -  -  -  ; ***************************************************************************************
   18 D1:AC3B -  -  -  -  
   19 D1:AC3B -  -  -  -  ALULongReference:			;; [!]
   20 D1:AC3B CD 4B AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:AC3F 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AC41 CB F9 -  -  		set 	CIsReference,c
   23 D1:AC43 C9 -  -  -  		ret
   24 D1:AC44 -  -  -  -  
   25 D1:AC44 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AC44 CD 3B AC D1 		call 	ALULongReference
   27 D1:AC48 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AC4A C9 -  -  -  		ret
   29 D1:AC4B -  -  -  -  
   30 D1:AC4B -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AC4B CD E8 AC D1 
              78 B1 C2 B9 
              AB D1 C3 59 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AC59 -  -  -  -  _BRGAMain:		
   33 D1:AC59 CD D6 B5 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AC5D CD EE AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AC61 C9 -  -  -  		ret
   36 D1:AC62 -  -  -  -  
   37 D1:AC62 -  -  -  -  ; ***************************************************************************************
   38 D1:AC62 -  -  -  -  ;
   39 D1:AC62 -  -  -  -  ;									Changes and Updates
   40 D1:AC62 -  -  -  -  ;
   41 D1:AC62 -  -  -  -  ; ***************************************************************************************
   42 D1:AC62 -  -  -  -  ;
   43 D1:AC62 -  -  -  -  ;		Date			Notes
   44 D1:AC62 -  -  -  -  ;		==== 			=====
   45 D1:AC62 -  -  -  -  ;
   46 D1:AC62 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC62 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AC62 -  -  -  -  ; ***************************************************************************************
    2 D1:AC62 -  -  -  -  ; ***************************************************************************************
    3 D1:AC62 -  -  -  -  ;
    4 D1:AC62 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AC62 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC62 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC62 -  -  -  -  ;		Reviewed :	No
    8 D1:AC62 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AC62 -  -  -  -  ;
   10 D1:AC62 -  -  -  -  ; ***************************************************************************************
   11 D1:AC62 -  -  -  -  ; ***************************************************************************************
   12 D1:AC62 -  -  -  -  
   13 D1:AC62 -  -  -  -  #macro compare_equals(n)
   14 D1:AC62             		call 	CompareBaseCode
   15 D1:AC62             		cp 		n
   16 D1:AC62             		jr 		z,UnaryInt32True
   17 D1:AC62             		jr 		UnaryInt32False
   18 D1:AC62             #endmacro
   19 D1:AC62 -  -  -  -  
   20 D1:AC62 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AC62             		call 	CompareBaseCode
   22 D1:AC62             		cp 		n
   23 D1:AC62             		jr 		nz,UnaryInt32True
   24 D1:AC62             		jr 		UnaryInt32False
   25 D1:AC62             #endmacro
   26 D1:AC62 -  -  -  -  
   27 D1:AC62 -  -  -  -  ; ***************************************************************************************
   28 D1:AC62 -  -  -  -  ;
   29 D1:AC62 -  -  -  -  ; 								Return True/False
   30 D1:AC62 -  -  -  -  ;
   31 D1:AC62 -  -  -  -  ; ***************************************************************************************
   32 D1:AC62 -  -  -  -  
   33 D1:AC62 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AC62 3E FF -  -  		ld 		a,255
   35 D1:AC64 18 01 -  -  		jr 		_Int32Logical
   36 D1:AC66 -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:AC66 AF -  -  -  		xor 	a
   38 D1:AC67 -  -  -  -  _Int32Logical:
   39 D1:AC67 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AC68 67 -  -  -  		ld 		h,a
   41 D1:AC69 D9 -  -  -  		exx
   42 D1:AC6A 6F -  -  -  		ld 		l,a
   43 D1:AC6B 67 -  -  -  		ld 		h,a
   44 D1:AC6C D9 -  -  -  		exx
   45 D1:AC6D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AC6F C9 -  -  -  		ret
   47 D1:AC70 -  -  -  -  
   48 D1:AC70 -  -  -  -  ; ***************************************************************************************
   49 D1:AC70 -  -  -  -  ;
   50 D1:AC70 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AC70 -  -  -  -  ;
   52 D1:AC70 -  -  -  -  ; ***************************************************************************************
   53 D1:AC70 -  -  -  -  
   54 D1:AC70 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AC70 CD AC AC D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AC7A -  -  -  -  
   57 D1:AC7A -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AC7A CD AC AC D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AC84 -  -  -  -  
   60 D1:AC84 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AC84 CD AC AC D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AC8E -  -  -  -  
   63 D1:AC8E -  -  -  -  ; ***************************************************************************************
   64 D1:AC8E -  -  -  -  ;
   65 D1:AC8E -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AC8E -  -  -  -  ;
   67 D1:AC8E -  -  -  -  ; ***************************************************************************************
   68 D1:AC8E -  -  -  -  
   69 D1:AC8E -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AC8E CD AC AC D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AC98 -  -  -  -  
   72 D1:AC98 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AC98 CD AC AC D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:ACA2 -  -  -  -  
   75 D1:ACA2 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:ACA2 CD AC AC D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:ACAC -  -  -  -  
   78 D1:ACAC -  -  -  -  ; ***************************************************************************************
   79 D1:ACAC -  -  -  -  ;
   80 D1:ACAC -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:ACAC -  -  -  -  ;
   82 D1:ACAC -  -  -  -  ; ***************************************************************************************
   83 D1:ACAC -  -  -  -  
   84 D1:ACAC -  -  -  -  CompareBaseCode:
   85 D1:ACAC CD E8 AC D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:ACB0 -  -  -  -  
   87 D1:ACB0 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:ACB1 A1 -  -  -  		and 	c
   89 D1:ACB2 CB 47 -  -  		bit 	CIsString,a 
   90 D1:ACB4 C2 C6 AC D1 		jp 		nz,StringCompare
   91 D1:ACB8 -  -  -  -  
   92 D1:ACB8 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:ACB9 B1 -  -  -  		or 		c
   94 D1:ACBA CB 47 -  -  		bit 	CIsString,a 
   95 D1:ACBC CA 16 B6 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:ACC0 -  -  -  -  
   97 D1:ACC0 3E 02 C3 5B 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:ACC6 -  -  -  -  ;
   99 D1:ACC6 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:ACC6 -  -  -  -  ;
  101 D1:ACC6 -  -  -  -  StringCompare:
  102 D1:ACC6 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:ACC7 BE -  -  -  		cp 		(hl)
  104 D1:ACC8 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:ACCA 20 08 -  -  		jr 		nz,_SCLess
  106 D1:ACCC 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:ACCD 23 -  -  -  		inc 	hl
  108 D1:ACCE FE 20 -  -  		cp 		' '
  109 D1:ACD0 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:ACD2 AF -  -  -  		xor 	a 							; return 0.
  111 D1:ACD3 C9 -  -  -  		ret
  112 D1:ACD4 -  -  -  -  
  113 D1:ACD4 -  -  -  -  _SCLess:
  114 D1:ACD4 3E FF -  -  		ld 		a,$FF
  115 D1:ACD6 C9 -  -  -  		ret
  116 D1:ACD7 -  -  -  -  _SCGreater:
  117 D1:ACD7 3E 01 -  -  		ld 		a,1
  118 D1:ACD9 C9 -  -  -  		ret
  119 D1:ACDA -  -  -  -  
  120 D1:ACDA 3E 0F C3 5B 
              AB D1 -  -  		ERR_TODO()
  121 D1:ACE0 -  -  -  -  
  122 D1:ACE0 -  -  -  -  ; ***************************************************************************************
  123 D1:ACE0 -  -  -  -  ;
  124 D1:ACE0 -  -  -  -  ;									Changes and Updates
  125 D1:ACE0 -  -  -  -  ;
  126 D1:ACE0 -  -  -  -  ; ***************************************************************************************
  127 D1:ACE0 -  -  -  -  ;
  128 D1:ACE0 -  -  -  -  ;		Date			Notes
  129 D1:ACE0 -  -  -  -  ;		==== 			=====
  130 D1:ACE0 -  -  -  -  ;
  131 D1:ACE0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:ACE0 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:ACE0 -  -  -  -  ; ***************************************************************************************
    2 D1:ACE0 -  -  -  -  ; ***************************************************************************************
    3 D1:ACE0 -  -  -  -  ;
    4 D1:ACE0 -  -  -  -  ;		Name : 		utility.asm
    5 D1:ACE0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACE0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACE0 -  -  -  -  ;		Reviewed :	No
    8 D1:ACE0 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:ACE0 -  -  -  -  ;
   10 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   11 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   12 D1:ACE0 -  -  -  -  
   13 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   14 D1:ACE0 -  -  -  -  ;
   15 D1:ACE0 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:ACE0 -  -  -  -  ;
   17 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   18 D1:ACE0 -  -  -  -  
   19 D1:ACE0 -  -  -  -  SwapHLDE:
   20 D1:ACE0 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ACE1 D9 -  -  -  			exx
   22 D1:ACE2 EB -  -  -  			ex 		de,hl
   23 D1:ACE3 D9 -  -  -  			exx
   24 D1:ACE4 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ACE5 41 -  -  -  			ld 		b,c
   26 D1:ACE6 4F -  -  -  			ld 		c,a
   27 D1:ACE7 C9 -  -  -  			ret
   28 D1:ACE8 -  -  -  -  
   29 D1:ACE8 -  -  -  -  ; ***************************************************************************************
   30 D1:ACE8 -  -  -  -  ;
   31 D1:ACE8 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ACE8 -  -  -  -  ;
   33 D1:ACE8 -  -  -  -  ; ***************************************************************************************
   34 D1:ACE8 -  -  -  -  
   35 D1:ACE8 -  -  -  -  DereferenceBoth:
   36 D1:ACE8 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ACEA C4 C1 AD D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ACEE CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ACF0 C8 -  -  -  			ret 	z
   40 D1:ACF1 CD E0 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ACF5 CD C1 AD D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ACF9 CD E0 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ACFD C9 -  -  -  			ret
   44 D1:ACFE -  -  -  -  
   45 D1:ACFE -  -  -  -  ; ***************************************************************************************
   46 D1:ACFE -  -  -  -  ;
   47 D1:ACFE -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ACFE -  -  -  -  ;
   49 D1:ACFE -  -  -  -  ; ***************************************************************************************
   50 D1:ACFE -  -  -  -  
   51 D1:ACFE -  -  -  -  NegateHLHL:	
   52 D1:ACFE CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AD00 C2 B9 AB D1 			jp 		nz,TypeMismatch
   54 D1:AD04 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AD06 C4 C1 AD D1 			call 	nz,Dereference 			; if required.
   56 D1:AD0A CD 40 B6 D1 			call 	Int32Negate
   57 D1:AD0E C9 -  -  -  			ret
Listing for file "_build.asm"
   30 D1:AD0F -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AD0F -  -  -  -  ; ***************************************************************************************
    2 D1:AD0F -  -  -  -  ; ***************************************************************************************
    3 D1:AD0F -  -  -  -  ;
    4 D1:AD0F -  -  -  -  ;		Name : 		expression.asm
    5 D1:AD0F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD0F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD0F -  -  -  -  ;		Reviewed :	None
    8 D1:AD0F -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AD0F -  -  -  -  ;
   10 D1:AD0F -  -  -  -  ; ***************************************************************************************
   11 D1:AD0F -  -  -  -  ; ***************************************************************************************
   12 D1:AD0F -  -  -  -  
   13 D1:AD0F -  -  -  -  ; ***************************************************************************************
   14 D1:AD0F -  -  -  -  ;
   15 D1:AD0F -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AD0F -  -  -  -  ;
   17 D1:AD0F -  -  -  -  ; ***************************************************************************************
   18 D1:AD0F -  -  -  -  
   19 D1:AD0F -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AD0F AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AD10 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AD10 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AD11 -  -  -  -  		;
   24 D1:AD11 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AD11 -  -  -  -  		;
   26 D1:AD11 CD 1D AE D1 		call 	EvaluateTerm 				; get term
   27 D1:AD15 -  -  -  -  		;
   28 D1:AD15 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AD15 -  -  -  -  		;
   30 D1:AD15 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AD16 -  -  -  -  _EAPLoop:
   32 D1:AD16 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AD19 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AD1B D8 -  -  -  		ret 	c
   35 D1:AD1C FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AD1E D0 -  -  -  		ret 	nc
   37 D1:AD1F -  -  -  -  		;
   38 D1:AD1F -  -  -  -  		; 		Get the precedence.
   39 D1:AD1F -  -  -  -  		;
   40 D1:AD1F E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AD20 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AD22 21 20 B2 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AD26 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AD27 6F -  -  -  		ld 		l,a
   45 D1:AD28 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AD29 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AD2A -  -  -  -  		;
   48 D1:AD2A -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AD2A -  -  -  -  		;
   50 D1:AD2A 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AD2B BB -  -  -  		cp 		e
   52 D1:AD2C D0 -  -  -  		ret 	nc
   53 D1:AD2D -  -  -  -  
   54 D1:AD2D -  -  -  -  		;
   55 D1:AD2D -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AD2D -  -  -  -  		;
   57 D1:AD2D D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AD2E -  -  -  -  		;
   59 D1:AD2E DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AD31 F5 -  -  -  		push 	af
   61 D1:AD32 -  -  -  -  		;
   62 D1:AD32 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AD33 D9 -  -  -  		exx 								; save HL'
   64 D1:AD34 E5 -  -  -  		push 	hl
   65 D1:AD35 D9 -  -  -  		exx 								
   66 D1:AD36 E5 -  -  -  		push 	hl 							; save HL
   67 D1:AD37 -  -  -  -  		;
   68 D1:AD37 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AD39 -  -  -  -  		;
   70 D1:AD39 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AD39 -  -  -  -  		;
   72 D1:AD39 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AD3A CD 10 AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AD3E -  -  -  -  		;
   75 D1:AD3E -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AD3E -  -  -  -  		;
   77 D1:AD3E 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AD3F -  -  -  -  
   79 D1:AD3F EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AD40 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AD41 D9 -  -  -  		exx
   82 D1:AD42 EB -  -  -  		ex 		de,hl
   83 D1:AD43 E1 -  -  -  		pop 	hl
   84 D1:AD44 D9 -  -  -  		exx
   85 D1:AD45 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AD46 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AD47 -  -  -  -  		;
   88 D1:AD47 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AD47 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AD47 -  -  -  -  		;
   91 D1:AD47 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AD48 -  -  -  -  		;
   93 D1:AD48 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AD48 -  -  -  -  		;
   95 D1:AD48 D5 -  -  -  		push 	de
   96 D1:AD49 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AD4A E6 7F 21 00 
              00 00 6F 29 
              29 11 6C B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AD5F E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AD60 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AD61 CD E1 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AD65 -  -  -  -  		;
  102 D1:AD65 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AD66 -  -  -  -  		;
  104 D1:AD66 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AD68 -  -  -  -  
  106 D1:AD68 -  -  -  -  ; ***************************************************************************************
  107 D1:AD68 -  -  -  -  ;
  108 D1:AD68 -  -  -  -  ;									Changes and Updates
  109 D1:AD68 -  -  -  -  ;
  110 D1:AD68 -  -  -  -  ; ***************************************************************************************
  111 D1:AD68 -  -  -  -  ;
  112 D1:AD68 -  -  -  -  ;		Date			Notes
  113 D1:AD68 -  -  -  -  ;		==== 			=====
  114 D1:AD68 -  -  -  -  ;
  115 D1:AD68 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD68 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AD68 -  -  -  -  ; ***************************************************************************************
    2 D1:AD68 -  -  -  -  ; ***************************************************************************************
    3 D1:AD68 -  -  -  -  ;
    4 D1:AD68 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AD68 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD68 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD68 -  -  -  -  ;		Reviewed :	No
    8 D1:AD68 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AD68 -  -  -  -  ;
   10 D1:AD68 -  -  -  -  ; ***************************************************************************************
   11 D1:AD68 -  -  -  -  ; ***************************************************************************************
   12 D1:AD68 -  -  -  -  
   13 D1:AD68 -  -  -  -  ; ***************************************************************************************
   14 D1:AD68 -  -  -  -  ;
   15 D1:AD68 -  -  -  -  ; 								Evaluate an integer term
   16 D1:AD68 -  -  -  -  ;
   17 D1:AD68 -  -  -  -  ; ***************************************************************************************
   18 D1:AD68 -  -  -  -  
   19 D1:AD68 -  -  -  -  EvaluateIntegerTerm:
   20 D1:AD68 CD 1D AE D1 		call 	EvaluateTerm
   21 D1:AD6C CD C1 AD D1 		call 	DeReference
   22 D1:AD70 CB 41 -  -  		bit 	CIsString,c
   23 D1:AD72 C8 -  -  -  		ret 	z
   24 D1:AD73 C3 B9 AB D1 		jp 		TypeMismatch
   25 D1:AD77 -  -  -  -  
   26 D1:AD77 -  -  -  -  ; ***************************************************************************************
   27 D1:AD77 -  -  -  -  ;
   28 D1:AD77 -  -  -  -  ; 								Evaluate a string term
   29 D1:AD77 -  -  -  -  ;
   30 D1:AD77 -  -  -  -  ; ***************************************************************************************
   31 D1:AD77 -  -  -  -  
   32 D1:AD77 -  -  -  -  EvaluateStringTerm:
   33 D1:AD77 CD 1D AE D1 		call 	EvaluateTerm
   34 D1:AD7B CD C1 AD D1 		call 	DeReference
   35 D1:AD7F CB 41 -  -  		bit 	CIsString,c
   36 D1:AD81 C0 -  -  -  		ret 	nz
   37 D1:AD82 C3 B9 AB D1 		jp 		TypeMismatch
   38 D1:AD86 -  -  -  -  
   39 D1:AD86 -  -  -  -  ; ***************************************************************************************
   40 D1:AD86 -  -  -  -  ;
   41 D1:AD86 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AD86 -  -  -  -  ;
   43 D1:AD86 -  -  -  -  ; ***************************************************************************************
   44 D1:AD86 -  -  -  -  
   45 D1:AD86 -  -  -  -  EvaluateValue:
   46 D1:AD86 CD 0F AD D1 		call 	EvaluateAtPrecedence0
   47 D1:AD8A C3 C1 AD D1 		jp 		Dereference
   48 D1:AD8E -  -  -  -  
   49 D1:AD8E -  -  -  -  ; ***************************************************************************************
   50 D1:AD8E -  -  -  -  ;
   51 D1:AD8E -  -  -  -  ; 									Evaluate a number
   52 D1:AD8E -  -  -  -  ;
   53 D1:AD8E -  -  -  -  ; ***************************************************************************************
   54 D1:AD8E -  -  -  -  
   55 D1:AD8E -  -  -  -  EvaluateInteger:
   56 D1:AD8E CD 86 AD D1 		call 	EvaluateValue
   57 D1:AD92 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AD94 C8 -  -  -  		ret 	z
   59 D1:AD95 C3 B9 AB D1 		jp 		TypeMismatch
   60 D1:AD99 -  -  -  -  
   61 D1:AD99 -  -  -  -  ; ***************************************************************************************
   62 D1:AD99 -  -  -  -  ;
   63 D1:AD99 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AD99 -  -  -  -  ;
   65 D1:AD99 -  -  -  -  ; ***************************************************************************************
   66 D1:AD99 -  -  -  -  
   67 D1:AD99 -  -  -  -  Evaluate8BitInteger:
   68 D1:AD99 CD 8E AD D1 		call 	EvaluateInteger
   69 D1:AD9D D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AD9E 7C -  -  -  		ld 		a,h
   71 D1:AD9F B5 -  -  -  		or 		l
   72 D1:ADA0 D9 -  -  -  		exx 	
   73 D1:ADA1 B4 -  -  -  		or 		h
   74 D1:ADA2 C2 BF AB D1 		jp 		nz,BadValue
   75 D1:ADA6 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:ADA7 C9 -  -  -  		ret
   77 D1:ADA8 -  -  -  -  		
   78 D1:ADA8 -  -  -  -  ; ***************************************************************************************
   79 D1:ADA8 -  -  -  -  ;
   80 D1:ADA8 -  -  -  -  ; 									Evaluate a string
   81 D1:ADA8 -  -  -  -  ;
   82 D1:ADA8 -  -  -  -  ; ***************************************************************************************
   83 D1:ADA8 -  -  -  -  
   84 D1:ADA8 -  -  -  -  EvaluateStringOnly:
   85 D1:ADA8 CD 86 AD D1 		call 	EvaluateValue
   86 D1:ADAC CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:ADAE CA B9 AB D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:ADB2 C9 -  -  -  		ret
   89 D1:ADB3 -  -  -  -  
   90 D1:ADB3 -  -  -  -  ; ***************************************************************************************
   91 D1:ADB3 -  -  -  -  ;
   92 D1:ADB3 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:ADB3 -  -  -  -  ;
   94 D1:ADB3 -  -  -  -  ; ***************************************************************************************
   95 D1:ADB3 -  -  -  -  
   96 D1:ADB3 -  -  -  -  Return8BitConstant:
   97 D1:ADB3 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:ADB7 6F -  -  -  		ld 		l,a
   99 D1:ADB8 -  -  -  -  Return16BitConstant:
  100 D1:ADB8 D9 -  -  -  		exx 								; clear HL'
  101 D1:ADB9 21 00 00 00 		ld 		hl,0
  102 D1:ADBD D9 -  -  -  		exx
  103 D1:ADBE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:ADC0 C9 -  -  -  		ret
  105 D1:ADC1 -  -  -  -  
  106 D1:ADC1 -  -  -  -  ; ***************************************************************************************
  107 D1:ADC1 -  -  -  -  ;
  108 D1:ADC1 -  -  -  -  ;									Changes and Updates
  109 D1:ADC1 -  -  -  -  ;
  110 D1:ADC1 -  -  -  -  ; ***************************************************************************************
  111 D1:ADC1 -  -  -  -  ;
  112 D1:ADC1 -  -  -  -  ;		Date			Notes
  113 D1:ADC1 -  -  -  -  ;		==== 			=====
  114 D1:ADC1 -  -  -  -  ;
  115 D1:ADC1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:ADC1 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:ADC1 -  -  -  -  ; ***************************************************************************************
    2 D1:ADC1 -  -  -  -  ; ***************************************************************************************
    3 D1:ADC1 -  -  -  -  ;
    4 D1:ADC1 -  -  -  -  ;		Name : 		reference.asm
    5 D1:ADC1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADC1 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:ADC1 -  -  -  -  ;		Reviewed :	No
    8 D1:ADC1 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:ADC1 -  -  -  -  ;
   10 D1:ADC1 -  -  -  -  ; ***************************************************************************************
   11 D1:ADC1 -  -  -  -  ; ***************************************************************************************
   12 D1:ADC1 -  -  -  -  
   13 D1:ADC1 -  -  -  -  ; ***************************************************************************************
   14 D1:ADC1 -  -  -  -  ;
   15 D1:ADC1 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:ADC1 -  -  -  -  ;
   17 D1:ADC1 -  -  -  -  ; ***************************************************************************************
   18 D1:ADC1 -  -  -  -  
   19 D1:ADC1 -  -  -  -  Dereference:
   20 D1:ADC1 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:ADC3 C8 -  -  -  		ret 	z
   22 D1:ADC4 -  -  -  -  
   23 D1:ADC4 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:ADC6 -  -  -  -  		
   25 D1:ADC6 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:ADC8 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:ADCA -  -  -  -  
   28 D1:ADCA CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:ADCC 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:ADCE -  -  -  -  
   31 D1:ADCE E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:ADCF ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:ADD1 D9 -  -  -  		exx
   34 D1:ADD2 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:ADD3 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:ADD4 23 -  -  -  		inc  	hl
   37 D1:ADD5 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:ADD7 D9 -  -  -  		exx 								; fix back
   39 D1:ADD8 C9 -  -  -  		ret
   40 D1:ADD9 -  -  -  -  
   41 D1:ADD9 -  -  -  -  _DeRefByte:		
   42 D1:ADD9 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:ADDA 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:ADDE 6F -  -  -  		ld	 	l,a
   45 D1:ADDF D9 -  -  -  		exx
   46 D1:ADE0 21 00 00 00 		ld 		hl,$0000
   47 D1:ADE4 D9 -  -  -  		exx
   48 D1:ADE5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:ADE7 C9 -  -  -  		ret
   50 D1:ADE8 -  -  -  -  
   51 D1:ADE8 -  -  -  -  _DRInternal:
   52 D1:ADE8 3E 05 C3 5B 
              AB D1 -  -  		ERR_DISABLED
   53 D1:ADEE -  -  -  -  
   54 D1:ADEE -  -  -  -  ; ***************************************************************************************
   55 D1:ADEE -  -  -  -  ;
   56 D1:ADEE -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:ADEE -  -  -  -  ;
   58 D1:ADEE -  -  -  -  ; ***************************************************************************************
   59 D1:ADEE -  -  -  -  
   60 D1:ADEE -  -  -  -  DRConvertHLHLToAddress:
   61 D1:ADEE -  -  -  -  		#ifdef EZ80
   62 D1:ADEE 22 E7 A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:ADF2 D9 -  -  -  		exx
   64 D1:ADF3 22 E9 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:ADF7 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:ADFB D9 -  -  -  		exx
   67 D1:ADFC 2A E7 A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AE00 -  -  -  -  		#endif
   69 D1:AE00 C9 -  -  -  		ret
   70 D1:AE01 -  -  -  -  
   71 D1:AE01 -  -  -  -  ; ***************************************************************************************
   72 D1:AE01 -  -  -  -  ;
   73 D1:AE01 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AE01 -  -  -  -  ;
   75 D1:AE01 -  -  -  -  ; ***************************************************************************************
   76 D1:AE01 -  -  -  -  
   77 D1:AE01 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AE01 -  -  -  -  		#ifdef EZ80
   79 D1:AE01 22 E7 A8 D1 		ld 		(AConvert),hl
   80 D1:AE05 21 00 00 00 		ld 		hl,$0000
   81 D1:AE09 22 EA A8 D1 		ld 		(AConvert+3),hl
   82 D1:AE0D D9 -  -  -  		exx
   83 D1:AE0E 2A E9 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AE12 D9 -  -  -  		exx
   85 D1:AE13 AF -  -  -  		xor 	a
   86 D1:AE14 32 E9 A8 D1 		ld 		(AConvert+2),a
   87 D1:AE18 2A E7 A8 D1 		ld 		hl,(AConvert)
   88 D1:AE1C -  -  -  -  		#endif
   89 D1:AE1C C9 -  -  -  		ret
   90 D1:AE1D -  -  -  -  
   91 D1:AE1D -  -  -  -  ; ***************************************************************************************
   92 D1:AE1D -  -  -  -  ;
   93 D1:AE1D -  -  -  -  ;									Changes and Updates
   94 D1:AE1D -  -  -  -  ;
   95 D1:AE1D -  -  -  -  ; ***************************************************************************************
   96 D1:AE1D -  -  -  -  ;
   97 D1:AE1D -  -  -  -  ;		Date			Notes
   98 D1:AE1D -  -  -  -  ;		==== 			=====
   99 D1:AE1D -  -  -  -  ;
  100 D1:AE1D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE1D -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AE1D -  -  -  -  ; ***************************************************************************************
    2 D1:AE1D -  -  -  -  ; ***************************************************************************************
    3 D1:AE1D -  -  -  -  ;
    4 D1:AE1D -  -  -  -  ;		Name : 		term.asm
    5 D1:AE1D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE1D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE1D -  -  -  -  ;		Reviewed :	No
    8 D1:AE1D -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AE1D -  -  -  -  ;
   10 D1:AE1D -  -  -  -  ; ***************************************************************************************
   11 D1:AE1D -  -  -  -  ; ***************************************************************************************
   12 D1:AE1D -  -  -  -  
   13 D1:AE1D -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AE1D             		add_hlhl_16
   15 D1:AE1D             		exx
   16 D1:AE1D             		adc_hlhl_16
   17 D1:AE1D             		exx
   18 D1:AE1D             #endmacro
   19 D1:AE1D -  -  -  -  
   20 D1:AE1D -  -  -  -  ; ***************************************************************************************
   21 D1:AE1D -  -  -  -  ;
   22 D1:AE1D -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AE1D -  -  -  -  ;
   24 D1:AE1D -  -  -  -  ; ***************************************************************************************
   25 D1:AE1D -  -  -  -  ;
   26 D1:AE1D -  -  -  -  ; 		Terms can be:
   27 D1:AE1D -  -  -  -  ;
   28 D1:AE1D -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AE1D -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AE1D -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AE1D -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AE1D -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AE1D -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AE1D -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AE1D -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AE1D -  -  -  -  ; 														reference of some sort.
   37 D1:AE1D -  -  -  -  ;
   38 D1:AE1D -  -  -  -  ; ***************************************************************************************
   39 D1:AE1D -  -  -  -  
   40 D1:AE1D -  -  -  -  EvaluateTerm:		
   41 D1:AE1D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AE1F D9 -  -  -  		exx
   43 D1:AE20 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AE24 D9 -  -  -  		exx
   45 D1:AE25 21 00 00 00 		ld 		hl,$0000		
   46 D1:AE29 -  -  -  -  		;
   47 D1:AE29 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AE2C FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AE2E 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AE30 DA E8 AE D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AE34 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AE36 C2 8C AE D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AE3A -  -  -  -  		;
   54 D1:AE3A -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AE3A -  -  -  -  		;
   56 D1:AE3A -  -  -  -  _ETIntegerConstant:
   57 D1:AE3A -  -  -  -  		;
   58 D1:AE3A -  -  -  -  _ETIntegerLoop:		
   59 D1:AE3A DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AE3D E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AE3F B5 -  -  -  		or 		l 							; or into L
   62 D1:AE40 6F -  -  -  		ld 		l,a
   63 D1:AE41 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AE43 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AE46 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AE48 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AE4A D8 -  -  -  		ret 	c
   68 D1:AE4B -  -  -  -  
   69 D1:AE4B 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AE52 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AE59 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AE60 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AE67 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AE6E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AE75 -  -  -  -  
   76 D1:AE75 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AE77 -  -  -  -  		;
   78 D1:AE77 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AE77 -  -  -  -  		;
   80 D1:AE77 -  -  -  -  _ETStringMarker:		
   81 D1:AE77 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AE79 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AE7B DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AE7D E1 -  -  -  		pop 	hl
   85 D1:AE7E 11 00 00 00 		ld 		de,$0000
   86 D1:AE82 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AE85 DD 19 -  -  		add 	ix,de
   88 D1:AE87 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AE89 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AE8B C9 -  -  -  		ret
   91 D1:AE8C -  -  -  -  		;
   92 D1:AE8C -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AE8C -  -  -  -  		;
   94 D1:AE8C -  -  -  -  _ETFoundKeyword:
   95 D1:AE8C DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AE8E FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AE90 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AE92 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AE94 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AE96 -  -  -  -  		;
  101 D1:AE96 -  -  -  -  		;		Unary group 0
  102 D1:AE96 -  -  -  -  		;
  103 D1:AE96 E6 7F 21 00 
              00 00 6F 29 
              29 11 6C B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AEAB C3 E1 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AEAF -  -  -  -  
  106 D1:AEAF -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AEAF FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AEB1 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AEB3 -  -  -  -  		;
  110 D1:AEB3 -  -  -  -  		; 		- term
  111 D1:AEB3 -  -  -  -  		;
  112 D1:AEB3 CD 68 AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AEB7 CD FE AC D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AEBB C9 -  -  -  		ret
  115 D1:AEBC -  -  -  -  		;
  116 D1:AEBC -  -  -  -  		;		! ? indirection check
  117 D1:AEBC -  -  -  -  		;
  118 D1:AEBC -  -  -  -  _ETCheckIndirection:	
  119 D1:AEBC FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AEBE 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AEC0 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AEC2 C2 C5 AB D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AEC6 -  -  -  -  		;
  124 D1:AEC6 -  -  -  -  		; 		! ? indirection
  125 D1:AEC6 -  -  -  -  		;
  126 D1:AEC6 -  -  -  -  _ETIndirection:
  127 D1:AEC6 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AEC7 CD 1D AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AECB CD C1 AD D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AECF CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AED1 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AED3 CD EE AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AED7 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AED8 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AEDA CB F9 -  -  		set 	CIsReference,c
  136 D1:AEDC FE 83 -  -  		cp 		KWD_PLING
  137 D1:AEDE C8 -  -  -  		ret 	z
  138 D1:AEDF CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AEE1 C9 -  -  -  		ret
  140 D1:AEE2 -  -  -  -  _ETStringIndirect:
  141 D1:AEE2 3E 02 C3 5B 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AEE8 -  -  -  -  		;
  143 D1:AEE8 -  -  -  -  		; 		Found an identifier.
  144 D1:AEE8 -  -  -  -  		;
  145 D1:AEE8 -  -  -  -  _ETVariable:
  146 D1:AEE8 CD 3C B1 D1 		call 	FindVariable 				; find the variable.
  147 D1:AEEC D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AEED 3E 10 C3 5B 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AEF3 -  -  -  -  		
  150 D1:AEF3 -  -  -  -  ; ***************************************************************************************
  151 D1:AEF3 -  -  -  -  ;
  152 D1:AEF3 -  -  -  -  ;									Changes and Updates
  153 D1:AEF3 -  -  -  -  ;
  154 D1:AEF3 -  -  -  -  ; ***************************************************************************************
  155 D1:AEF3 -  -  -  -  ;
  156 D1:AEF3 -  -  -  -  ;		Date			Notes
  157 D1:AEF3 -  -  -  -  ;		==== 			=====
  158 D1:AEF3 -  -  -  -  ;
  159 D1:AEF3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AEF3 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AEF3 -  -  -  -  ; ***************************************************************************************
    2 D1:AEF3 -  -  -  -  ; ***************************************************************************************
    3 D1:AEF3 -  -  -  -  ;
    4 D1:AEF3 -  -  -  -  ;		Name : 		abs.asm
    5 D1:AEF3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEF3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEF3 -  -  -  -  ;		Reviewed :	No
    8 D1:AEF3 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AEF3 -  -  -  -  ;
   10 D1:AEF3 -  -  -  -  ; ***************************************************************************************
   11 D1:AEF3 -  -  -  -  ; ***************************************************************************************
   12 D1:AEF3 -  -  -  -  
   13 D1:AEF3 -  -  -  -  ; ***************************************************************************************
   14 D1:AEF3 -  -  -  -  ;
   15 D1:AEF3 -  -  -  -  ;								abs( unary function
   16 D1:AEF3 -  -  -  -  ;
   17 D1:AEF3 -  -  -  -  ; ***************************************************************************************
   18 D1:AEF3 -  -  -  -  
   19 D1:AEF3 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AEF3 CD 68 AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AEF7 D9 -  -  -  		exx 								; test MSB
   22 D1:AEF8 CB 7C -  -  		bit 	7,h
   23 D1:AEFA D9 -  -  -  		exx
   24 D1:AEFB C4 FE AC D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AEFF C9 -  -  -  		ret
   26 D1:AF00 -  -  -  -  
   27 D1:AF00 -  -  -  -  ; ***************************************************************************************
   28 D1:AF00 -  -  -  -  ;
   29 D1:AF00 -  -  -  -  ;									Changes and Updates
   30 D1:AF00 -  -  -  -  ;
   31 D1:AF00 -  -  -  -  ; ***************************************************************************************
   32 D1:AF00 -  -  -  -  ;
   33 D1:AF00 -  -  -  -  ;		Date			Notes
   34 D1:AF00 -  -  -  -  ;		==== 			=====
   35 D1:AF00 -  -  -  -  ;
   36 D1:AF00 -  -  -  -  ; ***************************************************************************************
   37 D1:AF00 -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AF00 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AF00 -  -  -  -  ; ***************************************************************************************
    2 D1:AF00 -  -  -  -  ; ***************************************************************************************
    3 D1:AF00 -  -  -  -  ;
    4 D1:AF00 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AF00 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF00 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF00 -  -  -  -  ;		Reviewed :	No
    8 D1:AF00 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AF00 -  -  -  -  ;
   10 D1:AF00 -  -  -  -  ; ***************************************************************************************
   11 D1:AF00 -  -  -  -  ; ***************************************************************************************
   12 D1:AF00 -  -  -  -  
   13 D1:AF00 -  -  -  -  ; ***************************************************************************************
   14 D1:AF00 -  -  -  -  ;
   15 D1:AF00 -  -  -  -  ;								Asc unary function
   16 D1:AF00 -  -  -  -  ;
   17 D1:AF00 -  -  -  -  ; ***************************************************************************************
   18 D1:AF00 -  -  -  -  
   19 D1:AF00 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AF00 CD 77 AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AF04 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AF05 C3 B3 AD D1 		jp 		Return8BitConstant
   23 D1:AF09 -  -  -  -  
   24 D1:AF09 -  -  -  -  ; ***************************************************************************************
   25 D1:AF09 -  -  -  -  ;
   26 D1:AF09 -  -  -  -  ;									Changes and Updates
   27 D1:AF09 -  -  -  -  ;
   28 D1:AF09 -  -  -  -  ; ***************************************************************************************
   29 D1:AF09 -  -  -  -  ;
   30 D1:AF09 -  -  -  -  ;		Date			Notes
   31 D1:AF09 -  -  -  -  ;		==== 			=====
   32 D1:AF09 -  -  -  -  ;
   33 D1:AF09 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AF09 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AF09 -  -  -  -  ; ***************************************************************************************
    2 D1:AF09 -  -  -  -  ; ***************************************************************************************
    3 D1:AF09 -  -  -  -  ;
    4 D1:AF09 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AF09 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF09 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF09 -  -  -  -  ;		Reviewed :	No
    8 D1:AF09 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AF09 -  -  -  -  ;
   10 D1:AF09 -  -  -  -  ; ***************************************************************************************
   11 D1:AF09 -  -  -  -  ; ***************************************************************************************
   12 D1:AF09 -  -  -  -  
   13 D1:AF09 -  -  -  -  ; ***************************************************************************************
   14 D1:AF09 -  -  -  -  ;
   15 D1:AF09 -  -  -  -  ;								Chr$() unary function
   16 D1:AF09 -  -  -  -  ;
   17 D1:AF09 -  -  -  -  ; ***************************************************************************************
   18 D1:AF09 -  -  -  -  
   19 D1:AF09 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AF09 CD 33 AB D1 		call 	CheckDollar
   21 D1:AF0D CD 68 AD D1 		call 	EvaluateIntegerTerm
   22 D1:AF11 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AF12 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AF14 21 1A A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AF18 36 0D -  -  		ld 		(hl),13
   26 D1:AF1A 2B -  -  -  		dec 	hl
   27 D1:AF1B 77 -  -  -  		ld 		(hl),a
   28 D1:AF1C C9 -  -  -  		ret
   29 D1:AF1D -  -  -  -  
   30 D1:AF1D -  -  -  -  ; ***************************************************************************************
   31 D1:AF1D -  -  -  -  ;
   32 D1:AF1D -  -  -  -  ;									Changes and Updates
   33 D1:AF1D -  -  -  -  ;
   34 D1:AF1D -  -  -  -  ; ***************************************************************************************
   35 D1:AF1D -  -  -  -  ;
   36 D1:AF1D -  -  -  -  ;		Date			Notes
   37 D1:AF1D -  -  -  -  ;		==== 			=====
   38 D1:AF1D -  -  -  -  ;
   39 D1:AF1D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF1D -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AF1D -  -  -  -  ; ***************************************************************************************
    2 D1:AF1D -  -  -  -  ; ***************************************************************************************
    3 D1:AF1D -  -  -  -  ;
    4 D1:AF1D -  -  -  -  ;		Name : 		len.asm
    5 D1:AF1D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF1D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF1D -  -  -  -  ;		Reviewed :	None
    8 D1:AF1D -  -  -  -  ;		Purpose :	String Length
    9 D1:AF1D -  -  -  -  ;
   10 D1:AF1D -  -  -  -  ; ***************************************************************************************
   11 D1:AF1D -  -  -  -  ; ***************************************************************************************
   12 D1:AF1D -  -  -  -  
   13 D1:AF1D -  -  -  -  ; ***************************************************************************************
   14 D1:AF1D -  -  -  -  ;
   15 D1:AF1D -  -  -  -  ;								Len unary function
   16 D1:AF1D -  -  -  -  ;
   17 D1:AF1D -  -  -  -  ; ***************************************************************************************
   18 D1:AF1D -  -  -  -  
   19 D1:AF1D -  -  -  -  Unary_Len:	;; [len]
   20 D1:AF1D CD 77 AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AF21 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AF22 CD 66 AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AF26 -  -  -  -  _ULCount:
   24 D1:AF26 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AF27 FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AF29 D8 -  -  -  		ret 	c
   27 D1:AF2A 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AF2B 13 -  -  -  		inc 	de
   29 D1:AF2C 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AF2E -  -  -  -  
   31 D1:AF2E -  -  -  -  ; ***************************************************************************************
   32 D1:AF2E -  -  -  -  ;
   33 D1:AF2E -  -  -  -  ;									Changes and Updates
   34 D1:AF2E -  -  -  -  ;
   35 D1:AF2E -  -  -  -  ; ***************************************************************************************
   36 D1:AF2E -  -  -  -  ;
   37 D1:AF2E -  -  -  -  ;		Date			Notes
   38 D1:AF2E -  -  -  -  ;		==== 			=====
   39 D1:AF2E -  -  -  -  ;
   40 D1:AF2E -  -  -  -  ; ***************************************************************************************
   41 D1:AF2E -  -  -  -  		
Listing for file "_build.asm"
   38 D1:AF2E -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AF2E -  -  -  -  ; ***************************************************************************************
    2 D1:AF2E -  -  -  -  ; ***************************************************************************************
    3 D1:AF2E -  -  -  -  ;
    4 D1:AF2E -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AF2E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF2E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF2E -  -  -  -  ;		Reviewed :	No
    8 D1:AF2E -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AF2E -  -  -  -  ;
   10 D1:AF2E -  -  -  -  ; ***************************************************************************************
   11 D1:AF2E -  -  -  -  ; ***************************************************************************************
   12 D1:AF2E -  -  -  -  
   13 D1:AF2E -  -  -  -  ; ***************************************************************************************
   14 D1:AF2E -  -  -  -  ;
   15 D1:AF2E -  -  -  -  ;								Str$() unary function
   16 D1:AF2E -  -  -  -  ;
   17 D1:AF2E -  -  -  -  ; ***************************************************************************************
   18 D1:AF2E -  -  -  -  
   19 D1:AF2E -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AF2E CD 68 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AF32 CD EE AD D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AF36 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AF38 C9 -  -  -  		ret
   24 D1:AF39 -  -  -  -  
   25 D1:AF39 -  -  -  -  ; ***************************************************************************************
   26 D1:AF39 -  -  -  -  ;
   27 D1:AF39 -  -  -  -  ;									Changes and Updates
   28 D1:AF39 -  -  -  -  ;
   29 D1:AF39 -  -  -  -  ; ***************************************************************************************
   30 D1:AF39 -  -  -  -  ;
   31 D1:AF39 -  -  -  -  ;		Date			Notes
   32 D1:AF39 -  -  -  -  ;		==== 			=====
   33 D1:AF39 -  -  -  -  ;
   34 D1:AF39 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AF39 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AF39 -  -  -  -  ; ***************************************************************************************
    2 D1:AF39 -  -  -  -  ; ***************************************************************************************
    3 D1:AF39 -  -  -  -  ;
    4 D1:AF39 -  -  -  -  ;		Name : 		not.asm
    5 D1:AF39 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF39 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AF39 -  -  -  -  ;		Reviewed :	No
    8 D1:AF39 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AF39 -  -  -  -  ;
   10 D1:AF39 -  -  -  -  ; ***************************************************************************************
   11 D1:AF39 -  -  -  -  ; ***************************************************************************************
   12 D1:AF39 -  -  -  -  
   13 D1:AF39 -  -  -  -  ; ***************************************************************************************
   14 D1:AF39 -  -  -  -  ;
   15 D1:AF39 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AF39 -  -  -  -  ;
   17 D1:AF39 -  -  -  -  ; ***************************************************************************************
   18 D1:AF39 -  -  -  -  
   19 D1:AF39 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AF39 CD 68 AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AF3D CD 46 AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AF41 CD 46 AF D1 		call 	__UNSwap		
   23 D1:AF45 C9 -  -  -  		ret
   24 D1:AF46 -  -  -  -  
   25 D1:AF46 -  -  -  -  __UNSwap:
   26 D1:AF46 7C -  -  -  		ld 		a,h
   27 D1:AF47 2F -  -  -  		cpl
   28 D1:AF48 67 -  -  -  		ld 		h,a
   29 D1:AF49 7D -  -  -  		ld 		a,l
   30 D1:AF4A 2F -  -  -  		cpl 	
   31 D1:AF4B 6F -  -  -  		ld 		l,a
   32 D1:AF4C D9 -  -  -  		exx
   33 D1:AF4D C9 -  -  -  		ret
   34 D1:AF4E -  -  -  -  
   35 D1:AF4E -  -  -  -  ; ***************************************************************************************
   36 D1:AF4E -  -  -  -  ;
   37 D1:AF4E -  -  -  -  ;									Changes and Updates
   38 D1:AF4E -  -  -  -  ;
   39 D1:AF4E -  -  -  -  ; ***************************************************************************************
   40 D1:AF4E -  -  -  -  ;
   41 D1:AF4E -  -  -  -  ;		Date			Notes
   42 D1:AF4E -  -  -  -  ;		==== 			=====
   43 D1:AF4E -  -  -  -  ;
   44 D1:AF4E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AF4E -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AF4E -  -  -  -  ; ***************************************************************************************
    2 D1:AF4E -  -  -  -  ; ***************************************************************************************
    3 D1:AF4E -  -  -  -  ;
    4 D1:AF4E -  -  -  -  ;		Name : 		page.asm
    5 D1:AF4E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF4E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF4E -  -  -  -  ;		Reviewed :	No
    8 D1:AF4E -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AF4E -  -  -  -  ;
   10 D1:AF4E -  -  -  -  ; ***************************************************************************************
   11 D1:AF4E -  -  -  -  ; ***************************************************************************************
   12 D1:AF4E -  -  -  -  
   13 D1:AF4E -  -  -  -  ; ***************************************************************************************
   14 D1:AF4E -  -  -  -  ;
   15 D1:AF4E -  -  -  -  ;							page unary function (no bracket)
   16 D1:AF4E -  -  -  -  ;
   17 D1:AF4E -  -  -  -  ; ***************************************************************************************
   18 D1:AF4E -  -  -  -  
   19 D1:AF4E -  -  -  -  Unary_Page:	;; [page]
   20 D1:AF4E 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AF52 D9 -  -  -  			exx
   22 D1:AF53 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AF57 D9 -  -  -  			exx
   24 D1:AF58 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF5A C9 -  -  -  			ret
   26 D1:AF5B -  -  -  -  
   27 D1:AF5B -  -  -  -  ; ***************************************************************************************
   28 D1:AF5B -  -  -  -  ;
   29 D1:AF5B -  -  -  -  ;									Changes and Updates
   30 D1:AF5B -  -  -  -  ;
   31 D1:AF5B -  -  -  -  ; ***************************************************************************************
   32 D1:AF5B -  -  -  -  ;
   33 D1:AF5B -  -  -  -  ;		Date			Notes
   34 D1:AF5B -  -  -  -  ;		==== 			=====
   35 D1:AF5B -  -  -  -  ;
   36 D1:AF5B -  -  -  -  ; ***************************************************************************************
   37 D1:AF5B -  -  -  -  			
Listing for file "_build.asm"
   41 D1:AF5B -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AF5B -  -  -  -  ; ***************************************************************************************
    2 D1:AF5B -  -  -  -  ; ***************************************************************************************
    3 D1:AF5B -  -  -  -  ;
    4 D1:AF5B -  -  -  -  ;		Name : 		random.asm
    5 D1:AF5B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF5B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF5B -  -  -  -  ;		Reviewed :	No
    8 D1:AF5B -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AF5B -  -  -  -  ;
   10 D1:AF5B -  -  -  -  ; ***************************************************************************************
   11 D1:AF5B -  -  -  -  ; ***************************************************************************************
   12 D1:AF5B -  -  -  -  
   13 D1:AF5B -  -  -  -  ; ***************************************************************************************
   14 D1:AF5B -  -  -  -  ;
   15 D1:AF5B -  -  -  -  ;								Random unary function
   16 D1:AF5B -  -  -  -  ;
   17 D1:AF5B -  -  -  -  ; ***************************************************************************************
   18 D1:AF5B -  -  -  -  
   19 D1:AF5B -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AF5B F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AF63 CD 68 AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AF67 D9 -  -  -  		exx 								; is it -ve
   23 D1:AF68 CB 7C -  -  		bit 	7,h
   24 D1:AF6A D9 -  -  -  		exx
   25 D1:AF6B 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AF6D 22 ED A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AF71 D9 -  -  -  		exx
   28 D1:AF72 22 F1 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AF76 D9 -  -  -  		exx
   30 D1:AF77 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AF79 C9 -  -  -  		ret
   32 D1:AF7A -  -  -  -  _URDontSeed:		
   33 D1:AF7A -  -  -  -  
   34 D1:AF7A CD 0F B6 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AF7E 28 1C -  -  		jr 		z,_URFail
   36 D1:AF80 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AF81 D9 -  -  -  		exx
   38 D1:AF82 E5 -  -  -  		push 	hl
   39 D1:AF83 D9 -  -  -  		exx
   40 D1:AF84 -  -  -  -  		;
   41 D1:AF84 CD AD AF D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AF88 D9 -  -  -  		exx
   43 D1:AF89 CD AD AF D1 		call 	URandomHL
   44 D1:AF8D CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AF8F D9 -  -  -  		exx
   46 D1:AF90 -  -  -  -  		;
   47 D1:AF90 D9 -  -  -  		exx 								; restore range.
   48 D1:AF91 D1 -  -  -  		pop 	de
   49 D1:AF92 D9 -  -  -  		exx
   50 D1:AF93 D1 -  -  -  		pop 	de
   51 D1:AF94 -  -  -  -  		;
   52 D1:AF94 CD A0 B4 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AF98 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AF99 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AF9B C9 -  -  -  		ret
   56 D1:AF9C -  -  -  -  _URFail:
   57 D1:AF9C 3E 03 C3 5B 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:AFA2 -  -  -  -  ; ***************************************************************************************
   59 D1:AFA2 -  -  -  -  ;
   60 D1:AFA2 -  -  -  -  ; 									Push RNG off zero
   61 D1:AFA2 -  -  -  -  ;
   62 D1:AFA2 -  -  -  -  ; ***************************************************************************************
   63 D1:AFA2 -  -  -  -  
   64 D1:AFA2 -  -  -  -  UnaryRandomInitialise:
   65 D1:AFA2 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AFA4 -  -  -  -  _URILoop:
   67 D1:AFA4 C5 -  -  -  		push 	bc
   68 D1:AFA5 CD AD AF D1 		call 	URandomHL
   69 D1:AFA9 C1 -  -  -  		pop 	bc
   70 D1:AFAA 10 F8 -  -  		djnz 	_URILoop
   71 D1:AFAC C9 -  -  -  		ret
   72 D1:AFAD -  -  -  -  
   73 D1:AFAD -  -  -  -  ; ***************************************************************************************
   74 D1:AFAD -  -  -  -  ;
   75 D1:AFAD -  -  -  -  ;							16 bit random number generator
   76 D1:AFAD -  -  -  -  ;
   77 D1:AFAD -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AFAD -  -  -  -  ;		Actual author unspecified.
   79 D1:AFAD -  -  -  -  ;
   80 D1:AFAD -  -  -  -  ; ***************************************************************************************
   81 D1:AFAD -  -  -  -  
   82 D1:AFAD -  -  -  -  URandomHL:
   83 D1:AFAD 2A ED A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AFB1 ED 5B F1 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AFB6 44 -  -  -  	    ld 		b,h
   86 D1:AFB7 4D -  -  -  	    ld 		c,l
   87 D1:AFB8 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AFBD 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AFC2 2C -  -  -  	    inc 	l
   90 D1:AFC3 09 -  -  -  	    add 	hl,bc
   91 D1:AFC4 22 ED A8 D1 	    ld 		(RandomSeed),hl
   92 D1:AFC8 2A F1 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:AFCC ED 5A -  -  	    adc 	hl,de
   94 D1:AFCE 22 F1 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:AFD2 EB -  -  -  	    ex 		de,hl
   96 D1:AFD3 2A F5 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:AFD7 ED 4B F9 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:AFDC 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:AFE1 ED 43 F9 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:AFE6 9F -  -  -  	    sbc 	a,a
  101 D1:AFE7 E6 C5 -  -  	    and 	%11000101
  102 D1:AFE9 AD -  -  -  	    xor 	l
  103 D1:AFEA 6F -  -  -  	    ld 		l,a
  104 D1:AFEB 22 F5 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:AFEF EB -  -  -  	    ex 		de,hl
  106 D1:AFF0 09 -  -  -  	    add 	hl,bc
  107 D1:AFF1 C9 -  -  -  	    ret		
  108 D1:AFF2 -  -  -  -  
  109 D1:AFF2 -  -  -  -  ; ***************************************************************************************
  110 D1:AFF2 -  -  -  -  ;
  111 D1:AFF2 -  -  -  -  ;									Changes and Updates
  112 D1:AFF2 -  -  -  -  ;
  113 D1:AFF2 -  -  -  -  ; ***************************************************************************************
  114 D1:AFF2 -  -  -  -  ;
  115 D1:AFF2 -  -  -  -  ;		Date			Notes
  116 D1:AFF2 -  -  -  -  ;		==== 			=====
  117 D1:AFF2 -  -  -  -  ;
  118 D1:AFF2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:AFF2 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:AFF2 -  -  -  -  ; ***************************************************************************************
    2 D1:AFF2 -  -  -  -  ; ***************************************************************************************
    3 D1:AFF2 -  -  -  -  ;
    4 D1:AFF2 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:AFF2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFF2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFF2 -  -  -  -  ;		Reviewed :	No
    8 D1:AFF2 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:AFF2 -  -  -  -  ;
   10 D1:AFF2 -  -  -  -  ; ***************************************************************************************
   11 D1:AFF2 -  -  -  -  ; ***************************************************************************************
   12 D1:AFF2 -  -  -  -  
   13 D1:AFF2 -  -  -  -  ; ***************************************************************************************
   14 D1:AFF2 -  -  -  -  ;
   15 D1:AFF2 -  -  -  -  ;								sgn unary function
   16 D1:AFF2 -  -  -  -  ;
   17 D1:AFF2 -  -  -  -  ; ***************************************************************************************
   18 D1:AFF2 -  -  -  -  
   19 D1:AFF2 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:AFF2 CD 68 AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:AFF6 CD 0F B6 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:AFFA CA 66 AC D1 		jp 		z,UnaryInt32False
   23 D1:AFFE D9 -  -  -  		exx
   24 D1:AFFF CB 7C -  -  		bit 	7,h
   25 D1:B001 D9 -  -  -  		exx
   26 D1:B002 C2 62 AC D1 		jp 		nz,UnaryInt32True
   27 D1:B006 3E 01 -  -  		ld 		a,1
   28 D1:B008 C3 B3 AD D1 		jp 		Return8BitConstant
   29 D1:B00C -  -  -  -  
   30 D1:B00C -  -  -  -  ; ***************************************************************************************
   31 D1:B00C -  -  -  -  ;
   32 D1:B00C -  -  -  -  ;									Changes and Updates
   33 D1:B00C -  -  -  -  ;
   34 D1:B00C -  -  -  -  ; ***************************************************************************************
   35 D1:B00C -  -  -  -  ;
   36 D1:B00C -  -  -  -  ;		Date			Notes
   37 D1:B00C -  -  -  -  ;		==== 			=====
   38 D1:B00C -  -  -  -  ;
   39 D1:B00C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B00C -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B00C -  -  -  -  ; ***************************************************************************************
    2 D1:B00C -  -  -  -  ; ***************************************************************************************
    3 D1:B00C -  -  -  -  ;
    4 D1:B00C -  -  -  -  ;		Name : 		simple.asm
    5 D1:B00C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B00C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B00C -  -  -  -  ;		Reviewed :	No
    8 D1:B00C -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B00C -  -  -  -  ;
   10 D1:B00C -  -  -  -  ; ***************************************************************************************
   11 D1:B00C -  -  -  -  ; ***************************************************************************************
   12 D1:B00C -  -  -  -  
   13 D1:B00C -  -  -  -  ; ***************************************************************************************
   14 D1:B00C -  -  -  -  ;
   15 D1:B00C -  -  -  -  ;								( unary function (think about it)
   16 D1:B00C -  -  -  -  ;
   17 D1:B00C -  -  -  -  ; ***************************************************************************************
   18 D1:B00C -  -  -  -  
   19 D1:B00C -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B00C CD 0F AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B010 C3 25 AB D1 		jp  	CheckRightBracket
   22 D1:B014 -  -  -  -  
   23 D1:B014 -  -  -  -  ; ***************************************************************************************
   24 D1:B014 -  -  -  -  ;
   25 D1:B014 -  -  -  -  ;									Handle &x
   26 D1:B014 -  -  -  -  ;
   27 D1:B014 -  -  -  -  ; ***************************************************************************************
   28 D1:B014 -  -  -  -  
   29 D1:B014 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B014 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B017 E6 C0 -  -  		and 		$C0
   32 D1:B019 FE 40 -  -  		cp 			$40
   33 D1:B01B C2 C5 AB D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B01F C3 1D AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B023 -  -  -  -  
   36 D1:B023 -  -  -  -  ; ***************************************************************************************
   37 D1:B023 -  -  -  -  ;
   38 D1:B023 -  -  -  -  ;									Changes and Updates
   39 D1:B023 -  -  -  -  ;
   40 D1:B023 -  -  -  -  ; ***************************************************************************************
   41 D1:B023 -  -  -  -  ;
   42 D1:B023 -  -  -  -  ;		Date			Notes
   43 D1:B023 -  -  -  -  ;		==== 			=====
   44 D1:B023 -  -  -  -  ;
   45 D1:B023 -  -  -  -  ; ***************************************************************************************
   46 D1:B023 -  -  -  -  		
Listing for file "_build.asm"
   44 D1:B023 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B023 -  -  -  -  ; ***************************************************************************************
    2 D1:B023 -  -  -  -  ; ***************************************************************************************
    3 D1:B023 -  -  -  -  ;
    4 D1:B023 -  -  -  -  ;		Name : 		str.asm
    5 D1:B023 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B023 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B023 -  -  -  -  ;		Reviewed :	No
    8 D1:B023 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B023 -  -  -  -  ;
   10 D1:B023 -  -  -  -  ; ***************************************************************************************
   11 D1:B023 -  -  -  -  ; ***************************************************************************************
   12 D1:B023 -  -  -  -  
   13 D1:B023 -  -  -  -  ; ***************************************************************************************
   14 D1:B023 -  -  -  -  ;
   15 D1:B023 -  -  -  -  ;								Str$() unary function
   16 D1:B023 -  -  -  -  ;
   17 D1:B023 -  -  -  -  ; ***************************************************************************************
   18 D1:B023 -  -  -  -  
   19 D1:B023 -  -  -  -  Unary_Str:	;; [str]
   20 D1:B023 CD 33 AB D1 		call 	CheckDollar
   21 D1:B027 CD 68 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:B02B 01 09 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:B02F 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:B031 CD 57 B6 D1 		call 	Int32ToString 				
   25 D1:B035 21 09 A9 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:B039 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:B03B C9 -  -  -  		ret
   28 D1:B03C -  -  -  -  
   29 D1:B03C -  -  -  -  ; ***************************************************************************************
   30 D1:B03C -  -  -  -  ;
   31 D1:B03C -  -  -  -  ;									Changes and Updates
   32 D1:B03C -  -  -  -  ;
   33 D1:B03C -  -  -  -  ; ***************************************************************************************
   34 D1:B03C -  -  -  -  ;
   35 D1:B03C -  -  -  -  ;		Date			Notes
   36 D1:B03C -  -  -  -  ;		==== 			=====
   37 D1:B03C -  -  -  -  ;
   38 D1:B03C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:B03C -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B03C -  -  -  -  ; ***************************************************************************************
    2 D1:B03C -  -  -  -  ; ***************************************************************************************
    3 D1:B03C -  -  -  -  ;
    4 D1:B03C -  -  -  -  ;		Name : 		time.asm
    5 D1:B03C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B03C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B03C -  -  -  -  ;		Reviewed :	No
    8 D1:B03C -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B03C -  -  -  -  ;
   10 D1:B03C -  -  -  -  ; ***************************************************************************************
   11 D1:B03C -  -  -  -  ; ***************************************************************************************
   12 D1:B03C -  -  -  -  
   13 D1:B03C -  -  -  -  ; ***************************************************************************************
   14 D1:B03C -  -  -  -  ;
   15 D1:B03C -  -  -  -  ;							Get system time in ms
   16 D1:B03C -  -  -  -  ;
   17 D1:B03C -  -  -  -  ; ***************************************************************************************
   18 D1:B03C -  -  -  -  
   19 D1:B03C -  -  -  -  Unary_Time:	;; [time]
   20 D1:B03C CD 1A B7 D1 			call 	SYSGetTimer
   21 D1:B040 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B042 C9 -  -  -  			ret
   23 D1:B043 -  -  -  -  
   24 D1:B043 -  -  -  -  ; ***************************************************************************************
   25 D1:B043 -  -  -  -  ;
   26 D1:B043 -  -  -  -  ;									Changes and Updates
   27 D1:B043 -  -  -  -  ;
   28 D1:B043 -  -  -  -  ; ***************************************************************************************
   29 D1:B043 -  -  -  -  ;
   30 D1:B043 -  -  -  -  ;		Date			Notes
   31 D1:B043 -  -  -  -  ;		==== 			=====
   32 D1:B043 -  -  -  -  ;
   33 D1:B043 -  -  -  -  ; ***************************************************************************************
   34 D1:B043 -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B043 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B043 -  -  -  -  ; ***************************************************************************************
    2 D1:B043 -  -  -  -  ; ***************************************************************************************
    3 D1:B043 -  -  -  -  ;
    4 D1:B043 -  -  -  -  ;		Name : 		top.asm
    5 D1:B043 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B043 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B043 -  -  -  -  ;		Reviewed :	No
    8 D1:B043 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B043 -  -  -  -  ;
   10 D1:B043 -  -  -  -  ; ***************************************************************************************
   11 D1:B043 -  -  -  -  ; ***************************************************************************************
   12 D1:B043 -  -  -  -  
   13 D1:B043 -  -  -  -  ; ***************************************************************************************
   14 D1:B043 -  -  -  -  ;
   15 D1:B043 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B043 -  -  -  -  ;
   17 D1:B043 -  -  -  -  ; ***************************************************************************************
   18 D1:B043 -  -  -  -  
   19 D1:B043 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B043 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B047 D9 -  -  -  			exx
   22 D1:B048 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B04C D9 -  -  -  			exx
   24 D1:B04D 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B04F C9 -  -  -  			ret
   26 D1:B050 -  -  -  -  
   27 D1:B050 -  -  -  -  ; ***************************************************************************************
   28 D1:B050 -  -  -  -  ;
   29 D1:B050 -  -  -  -  ;									Changes and Updates
   30 D1:B050 -  -  -  -  ;
   31 D1:B050 -  -  -  -  ; ***************************************************************************************
   32 D1:B050 -  -  -  -  ;
   33 D1:B050 -  -  -  -  ;		Date			Notes
   34 D1:B050 -  -  -  -  ;		==== 			=====
   35 D1:B050 -  -  -  -  ;
   36 D1:B050 -  -  -  -  ; ***************************************************************************************
   37 D1:B050 -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B050 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B050 -  -  -  -  ; ***************************************************************************************
    2 D1:B050 -  -  -  -  ; ***************************************************************************************
    3 D1:B050 -  -  -  -  ;
    4 D1:B050 -  -  -  -  ;		Name : 		val.asm
    5 D1:B050 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B050 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B050 -  -  -  -  ;		Reviewed :	No
    8 D1:B050 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B050 -  -  -  -  ;
   10 D1:B050 -  -  -  -  ; ***************************************************************************************
   11 D1:B050 -  -  -  -  ; ***************************************************************************************
   12 D1:B050 -  -  -  -  
   13 D1:B050 -  -  -  -  ; ***************************************************************************************
   14 D1:B050 -  -  -  -  ;
   15 D1:B050 -  -  -  -  ;								val( unary function
   16 D1:B050 -  -  -  -  ;
   17 D1:B050 -  -  -  -  ; ***************************************************************************************
   18 D1:B050 -  -  -  -  
   19 D1:B050 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B050 CD 77 AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B054 E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B055 C1 -  -  -  		pop 	bc
   23 D1:B056 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B058 CD 35 B5 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B05C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B05E C8 -  -  -  		ret		z 							; okay
   27 D1:B05F 3E 03 C3 5B 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B065 -  -  -  -  
   29 D1:B065 -  -  -  -  ; ***************************************************************************************
   30 D1:B065 -  -  -  -  ;
   31 D1:B065 -  -  -  -  ;									Changes and Updates
   32 D1:B065 -  -  -  -  ;
   33 D1:B065 -  -  -  -  ; ***************************************************************************************
   34 D1:B065 -  -  -  -  ;
   35 D1:B065 -  -  -  -  ;		Date			Notes
   36 D1:B065 -  -  -  -  ;		==== 			=====
   37 D1:B065 -  -  -  -  ;
   38 D1:B065 -  -  -  -  ; ***************************************************************************************
   39 D1:B065 -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B065 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B065 -  -  -  -  ; ***************************************************************************************
    2 D1:B065 -  -  -  -  ; ***************************************************************************************
    3 D1:B065 -  -  -  -  ;
    4 D1:B065 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B065 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B065 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B065 -  -  -  -  ;		Reviewed :	No
    8 D1:B065 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B065 -  -  -  -  ;
   10 D1:B065 -  -  -  -  ; ***************************************************************************************
   11 D1:B065 -  -  -  -  ; ***************************************************************************************
   12 D1:B065 -  -  -  -  
   13 D1:B065 -  -  -  -  ; ***************************************************************************************
   14 D1:B065 -  -  -  -  ;
   15 D1:B065 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B065 -  -  -  -  ;
   17 D1:B065 -  -  -  -  ; ***************************************************************************************
   18 D1:B065 -  -  -  -  
   19 D1:B065 -  -  -  -  AllocateBytes:
   20 D1:B065 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 D1:B06A D5 -  -  -  		push 	de 							; save on stack
   22 D1:B06B 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 D1:B06C 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   24 D1:B070 EB -  -  -  		ex 		de,hl 						; put in DE
   25 D1:B071 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 D1:B075 AF -  -  -  		xor 	a
   27 D1:B076 ED 52 -  -  		sbc 	hl,de
   28 D1:B078 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 D1:B079 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 D1:B07A 3E 07 C3 5B 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 D1:B080 -  -  -  -  
   32 D1:B080 -  -  -  -  ; ***************************************************************************************
   33 D1:B080 -  -  -  -  ;
   34 D1:B080 -  -  -  -  ;									Changes and Updates
   35 D1:B080 -  -  -  -  ;
   36 D1:B080 -  -  -  -  ; ***************************************************************************************
   37 D1:B080 -  -  -  -  ;
   38 D1:B080 -  -  -  -  ;		Date			Notes
   39 D1:B080 -  -  -  -  ;		==== 			=====
   40 D1:B080 -  -  -  -  ;
   41 D1:B080 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B080 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B080 -  -  -  -  ; ***************************************************************************************
    2 D1:B080 -  -  -  -  ; ***************************************************************************************
    3 D1:B080 -  -  -  -  ;
    4 D1:B080 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B080 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B080 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B080 -  -  -  -  ;		Reviewed :	No
    8 D1:B080 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B080 -  -  -  -  ;
   10 D1:B080 -  -  -  -  ; ***************************************************************************************
   11 D1:B080 -  -  -  -  ; ***************************************************************************************
   12 D1:B080 -  -  -  -  
   13 D1:B080 -  -  -  -  ; ***************************************************************************************
   14 D1:B080 -  -  -  -  ;
   15 D1:B080 -  -  -  -  ;										CLEAR command
   16 D1:B080 -  -  -  -  ;
   17 D1:B080 -  -  -  -  ; ***************************************************************************************
   18 D1:B080 -  -  -  -  
   19 D1:B080 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B080 -  -  -  -  		;
   21 D1:B080 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B080 -  -  -  -  		;
   23 D1:B080 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B084 -  -  -  -  _CCFindLow:
   25 D1:B084 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B088 5E -  -  -  		ld 		e,(hl)		
   27 D1:B089 19 -  -  -  		add 	hl,de
   28 D1:B08A 7B -  -  -  		ld 		a,e
   29 D1:B08B B7 -  -  -  		or 		a
   30 D1:B08C 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B08E 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B08F 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B093 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B094 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B098 -  -  -  -  		;
   36 D1:B098 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B098 -  -  -  -  		;
   38 D1:B098 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B09C -  -  -  -  		;
   40 D1:B09C 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B09E 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B0A2 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B0A6 19 -  -  -  		add 	hl,de
   44 D1:B0A7 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B0A9 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B0AD -  -  -  -  		;
   47 D1:B0AD 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B0B1 19 -  -  -  		add 	hl,de
   49 D1:B0B2 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B0B6 -  -  -  -  		;
   51 D1:B0B6 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 D1:B0B6 -  -  -  -  		;
   53 D1:B0B6 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 D1:B0BA -  -  -  -  _CCFClearHT:
   55 D1:B0BA 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 D1:B0BB 36 00 -  -  		ld 		(hl),0
   57 D1:B0BD 1B -  -  -  		dec 	de
   58 D1:B0BE 7A -  -  -  		ld 		a,d
   59 D1:B0BF B3 -  -  -  		or 		e
   60 D1:B0C0 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 D1:B0C2 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   62 D1:B0C6 -  -  -  -  		;
   63 D1:B0C6 -  -  -  -  		; 		Save highest byte that can be allocate
   64 D1:B0C6 -  -  -  -  		;
   65 D1:B0C6 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   66 D1:B0CA -  -  -  -  		;
   67 D1:B0CA -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 D1:B0CA -  -  -  -  		;
   69 D1:B0CA CD A2 AF D1 		call 	UnaryRandomInitialise
   70 D1:B0CE C9 -  -  -  		ret
   71 D1:B0CF -  -  -  -  
   72 D1:B0CF -  -  -  -  ; ***************************************************************************************
   73 D1:B0CF -  -  -  -  ;
   74 D1:B0CF -  -  -  -  ;									Changes and Updates
   75 D1:B0CF -  -  -  -  ;
   76 D1:B0CF -  -  -  -  ; ***************************************************************************************
   77 D1:B0CF -  -  -  -  ;
   78 D1:B0CF -  -  -  -  ;		Date			Notes
   79 D1:B0CF -  -  -  -  ;		==== 			=====
   80 D1:B0CF -  -  -  -  ;
   81 D1:B0CF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B0CF -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B0CF -  -  -  -  ; ***************************************************************************************
    2 D1:B0CF -  -  -  -  ; ***************************************************************************************
    3 D1:B0CF -  -  -  -  ;
    4 D1:B0CF -  -  -  -  ;		Name : 		instance.asm
    5 D1:B0CF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0CF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0CF -  -  -  -  ;		Reviewed :	No
    8 D1:B0CF -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B0CF -  -  -  -  ;
   10 D1:B0CF -  -  -  -  ; ***************************************************************************************
   11 D1:B0CF -  -  -  -  ; ***************************************************************************************
   12 D1:B0CF -  -  -  -  
   13 D1:B0CF -  -  -  -  ; ***************************************************************************************
   14 D1:B0CF -  -  -  -  ;
   15 D1:B0CF -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B0CF -  -  -  -  ;
   17 D1:B0CF -  -  -  -  ; ***************************************************************************************
   18 D1:B0CF -  -  -  -  
   19 D1:B0CF -  -  -  -  SetCurrentInstance:
   20 D1:B0CF ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B0D4 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B0D8 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B0DD -  -  -  -  
   24 D1:B0DD C9 -  -  -  		ret
   25 D1:B0DE -  -  -  -  
   26 D1:B0DE -  -  -  -  
   27 D1:B0DE -  -  -  -  ; ***************************************************************************************
   28 D1:B0DE -  -  -  -  ;
   29 D1:B0DE -  -  -  -  ;									Changes and Updates
   30 D1:B0DE -  -  -  -  ;
   31 D1:B0DE -  -  -  -  ; ***************************************************************************************
   32 D1:B0DE -  -  -  -  ;
   33 D1:B0DE -  -  -  -  ;		Date			Notes
   34 D1:B0DE -  -  -  -  ;		==== 			=====
   35 D1:B0DE -  -  -  -  ;
   36 D1:B0DE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B0DE -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B0DE -  -  -  -  ; ***************************************************************************************
    2 D1:B0DE -  -  -  -  ; ***************************************************************************************
    3 D1:B0DE -  -  -  -  ;
    4 D1:B0DE -  -  -  -  ;		Name : 		new.asm
    5 D1:B0DE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0DE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0DE -  -  -  -  ;		Reviewed :	No
    8 D1:B0DE -  -  -  -  ;		Purpose :	New command.
    9 D1:B0DE -  -  -  -  ;
   10 D1:B0DE -  -  -  -  ; ***************************************************************************************
   11 D1:B0DE -  -  -  -  ; ***************************************************************************************
   12 D1:B0DE -  -  -  -  
   13 D1:B0DE -  -  -  -  ; ***************************************************************************************
   14 D1:B0DE -  -  -  -  ;
   15 D1:B0DE -  -  -  -  ;										NEW command
   16 D1:B0DE -  -  -  -  ;
   17 D1:B0DE -  -  -  -  ; ***************************************************************************************
   18 D1:B0DE -  -  -  -  
   19 D1:B0DE -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B0DE 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B0E2 36 00 -  -  		ld 		(hl),0
   22 D1:B0E4 CD 80 B0 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B0E8 3E 00 C3 5B 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B0EE -  -  -  -  
   25 D1:B0EE -  -  -  -  ; ***************************************************************************************
   26 D1:B0EE -  -  -  -  ;
   27 D1:B0EE -  -  -  -  ;									Changes and Updates
   28 D1:B0EE -  -  -  -  ;
   29 D1:B0EE -  -  -  -  ; ***************************************************************************************
   30 D1:B0EE -  -  -  -  ;
   31 D1:B0EE -  -  -  -  ;		Date			Notes
   32 D1:B0EE -  -  -  -  ;		==== 			=====
   33 D1:B0EE -  -  -  -  ;
   34 D1:B0EE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B0EE -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B0EE -  -  -  -  ; ***************************************************************************************
    2 D1:B0EE -  -  -  -  ; ***************************************************************************************
    3 D1:B0EE -  -  -  -  ;
    4 D1:B0EE -  -  -  -  ;		Name : 		utility.asm
    5 D1:B0EE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0EE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0EE -  -  -  -  ;		Reviewed :	No
    8 D1:B0EE -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B0EE -  -  -  -  ;
   10 D1:B0EE -  -  -  -  ; ***************************************************************************************
   11 D1:B0EE -  -  -  -  ; ***************************************************************************************
   12 D1:B0EE -  -  -  -  
   13 D1:B0EE -  -  -  -  ; ***************************************************************************************
   14 D1:B0EE -  -  -  -  ;
   15 D1:B0EE -  -  -  -  ;							Print ASCII string at HL
   16 D1:B0EE -  -  -  -  ;
   17 D1:B0EE -  -  -  -  ; ***************************************************************************************
   18 D1:B0EE -  -  -  -  
   19 D1:B0EE -  -  -  -  PrintStringAtHL:
   20 D1:B0EE 7E -  -  -  		ld 		a,(hl)
   21 D1:B0EF FE 20 -  -  		cp 		$20		
   22 D1:B0F1 D8 -  -  -  		ret 	c
   23 D1:B0F2 CD CA B6 D1 		call 	SYSPrintChar
   24 D1:B0F6 23 -  -  -  		inc 	hl
   25 D1:B0F7 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B0F9 -  -  -  -  
   27 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   28 D1:B0F9 -  -  -  -  ;
   29 D1:B0F9 -  -  -  -  ;									Changes and Updates
   30 D1:B0F9 -  -  -  -  ;
   31 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   32 D1:B0F9 -  -  -  -  ;
   33 D1:B0F9 -  -  -  -  ;		Date			Notes
   34 D1:B0F9 -  -  -  -  ;		==== 			=====
   35 D1:B0F9 -  -  -  -  ;
   36 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   37 D1:B0F9 -  -  -  -  		
Listing for file "_build.asm"
   53 D1:B0F9 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B0F9 -  -  -  -  ; ***************************************************************************************
    2 D1:B0F9 -  -  -  -  ; ***************************************************************************************
    3 D1:B0F9 -  -  -  -  ;
    4 D1:B0F9 -  -  -  -  ;		Name : 		create.asm
    5 D1:B0F9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0F9 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B0F9 -  -  -  -  ;		Reviewed :	No
    8 D1:B0F9 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B0F9 -  -  -  -  ;
   10 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   11 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   12 D1:B0F9 -  -  -  -  
   13 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   14 D1:B0F9 -  -  -  -  ;
   15 D1:B0F9 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B0F9 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B0F9 -  -  -  -  ;
   18 D1:B0F9 -  -  -  -  ; ***************************************************************************************
   19 D1:B0F9 -  -  -  -  
   20 D1:B0F9 -  -  -  -  VariableCreate:		
   21 D1:B0F9 -  -  -  -  		;
   22 D1:B0F9 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 D1:B0F9 -  -  -  -  		;
   24 D1:B0F9 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   25 D1:B0FD 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B0FE E5 -  -  -  		push 	hl 							; save count.
   27 D1:B0FF CD 65 B0 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B103 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B104 -  -  -  -  		;
   30 D1:B104 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B104 -  -  -  -  		;
   32 D1:B104 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B105 -  -  -  -  _VCClear:
   34 D1:B105 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B107 23 -  -  -  		inc 	hl
   36 D1:B108 0B -  -  -  		dec 	bc
   37 D1:B109 78 -  -  -  		ld		a,b
   38 D1:B10A B1 -  -  -  		or 		c
   39 D1:B10B 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B10D E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B10E -  -  -  -  		;
   42 D1:B10E -  -  -  -  		;		Now start to create the data.
   43 D1:B10E -  -  -  -  		;
   44 D1:B10E E5 -  -  -  		push 	hl 							; save start
   45 D1:B10F -  -  -  -  		;
   46 D1:B10F -  -  -  -  		;		Write hash to +0
   47 D1:B10F -  -  -  -  		;
   48 D1:B10F 3A 03 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B113 77 -  -  -  		ld 		(hl),a
   50 D1:B114 23 -  -  -  		inc 	hl
   51 D1:B115 -  -  -  -  		;
   52 D1:B115 -  -  -  -  		;		Write list head to +1
   53 D1:B115 -  -  -  -  		;
   54 D1:B115 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B116 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B11A ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B11C EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B11D E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B11E ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B124 -  -  -  -  		;
   61 D1:B124 -  -  -  -  		;		Write variable name to +5
   62 D1:B124 -  -  -  -  		;
   63 D1:B124 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B129 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B12F -  -  -  -  		;
   66 D1:B12F D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B130 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B134 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B13A -  -  -  -  		;
   70 D1:B13A EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B13B C9 -  -  -  		ret
   72 D1:B13C -  -  -  -  
   73 D1:B13C -  -  -  -  ; ***************************************************************************************
   74 D1:B13C -  -  -  -  ;
   75 D1:B13C -  -  -  -  ;									Changes and Updates
   76 D1:B13C -  -  -  -  ;
   77 D1:B13C -  -  -  -  ; ***************************************************************************************
   78 D1:B13C -  -  -  -  ;
   79 D1:B13C -  -  -  -  ;		Date			Notes
   80 D1:B13C -  -  -  -  ;		==== 			=====
   81 D1:B13C -  -  -  -  ;
   82 D1:B13C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B13C -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B13C -  -  -  -  ; ***************************************************************************************
    2 D1:B13C -  -  -  -  ; ***************************************************************************************
    3 D1:B13C -  -  -  -  ;
    4 D1:B13C -  -  -  -  ;		Name : 		find.asm
    5 D1:B13C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B13C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B13C -  -  -  -  ;		Reviewed :	No
    8 D1:B13C -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B13C -  -  -  -  ;
   10 D1:B13C -  -  -  -  ; ***************************************************************************************
   11 D1:B13C -  -  -  -  ; ***************************************************************************************
   12 D1:B13C -  -  -  -  
   13 D1:B13C -  -  -  -  ; ***************************************************************************************
   14 D1:B13C -  -  -  -  ;
   15 D1:B13C -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B13C -  -  -  -  ; 		variable information at (IX)
   17 D1:B13C -  -  -  -  ;
   18 D1:B13C -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B13C -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B13C -  -  -  -  ;
   21 D1:B13C -  -  -  -  ; ***************************************************************************************
   22 D1:B13C -  -  -  -  
   23 D1:B13C -  -  -  -  FindVariable:
   24 D1:B13C DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B13F FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B141 D2 C5 AB D1 		jp 		nc,SyntaxError 		
   27 D1:B145 -  -  -  -  
   28 D1:B145 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B148 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B14A 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B14C FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B14E 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B150 -  -  -  -  		;
   34 D1:B150 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B150 -  -  -  -  		;
   36 D1:B150 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B154 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B157 87 -  -  -  		add 	a,a 						; x4
   39 D1:B158 87 -  -  -  		add 	a,a
   40 D1:B159 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B15A 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B15B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B15D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B15F DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B161 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B162 C9 -  -  -  		ret
   47 D1:B163 -  -  -  -  		;
   48 D1:B163 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B163 -  -  -  -  		;
   50 D1:B163 -  -  -  -  _FVNotSimple:
   51 D1:B163 CD 97 B1 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B167 CD D3 B1 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B16B 38 0B -  -  		jr 		c,_FVNotFound  				
   54 D1:B16D -  -  -  -  		;
   55 D1:B16D -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B16D -  -  -  -  		;
   57 D1:B16D -  -  -  -  _FVExitReference:		
   58 D1:B16D 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B171 19 -  -  -  		add 	hl,de 
   60 D1:B172 -  -  -  -  		;
   61 D1:B172 -  -  -  -  		; 		TODO: Array check code.
   62 D1:B172 -  -  -  -  		;
   63 D1:B172 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 D1:B174 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 D1:B176 AF -  -  -  		xor 	a 							; clear carry and return
   66 D1:B177 C9 -  -  -  		ret
   67 D1:B178 -  -  -  -  		;
   68 D1:B178 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 D1:B178 -  -  -  -  		;
   70 D1:B178 -  -  -  -  _FVNotFound:		
   71 D1:B178 3A FD A8 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 D1:B17C B7 -  -  -  		or 		a
   73 D1:B17D 28 11 -  -  		jr 		z,_FVFail
   74 D1:B17F DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 D1:B182 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 D1:B184 28 0A -  -  		jr 		z,_FVFail
   77 D1:B186 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 D1:B18A CD F9 B0 D1 		call 	VariableCreate 				; create a new variable.
   79 D1:B18E 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 D1:B190 -  -  -  -  
   81 D1:B190 -  -  -  -  _FVFail:
   82 D1:B190 DD 2A FF A8 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 D1:B195 37 -  -  -  		scf
   84 D1:B196 C9 -  -  -  		ret
   85 D1:B197 -  -  -  -  
   86 D1:B197 -  -  -  -  ; ***************************************************************************************
   87 D1:B197 -  -  -  -  ;
   88 D1:B197 -  -  -  -  ;									Changes and Updates
   89 D1:B197 -  -  -  -  ;
   90 D1:B197 -  -  -  -  ; ***************************************************************************************
   91 D1:B197 -  -  -  -  ;
   92 D1:B197 -  -  -  -  ;		Date			Notes
   93 D1:B197 -  -  -  -  ;		==== 			=====
   94 D1:B197 -  -  -  -  ;
   95 D1:B197 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B197 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B197 -  -  -  -  ; ***************************************************************************************
    2 D1:B197 -  -  -  -  ; ***************************************************************************************
    3 D1:B197 -  -  -  -  ;
    4 D1:B197 -  -  -  -  ;		Name : 		info.asm
    5 D1:B197 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B197 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B197 -  -  -  -  ;		Reviewed :	No
    8 D1:B197 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B197 -  -  -  -  ;
   10 D1:B197 -  -  -  -  ; ***************************************************************************************
   11 D1:B197 -  -  -  -  ; ***************************************************************************************
   12 D1:B197 -  -  -  -  
   13 D1:B197 -  -  -  -  ; ***************************************************************************************
   14 D1:B197 -  -  -  -  ;
   15 D1:B197 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B197 -  -  -  -  ; 		after the identifier.
   17 D1:B197 -  -  -  -  ;
   18 D1:B197 -  -  -  -  ; ***************************************************************************************
   19 D1:B197 -  -  -  -  
   20 D1:B197 -  -  -  -  VariableInformation:
   21 D1:B197 DD 22 FF A8 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B19C -  -  -  -  		;
   23 D1:B19C -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B19C -  -  -  -  		;
   25 D1:B19C 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B19E -  -  -  -  _VICalculateHash:
   27 D1:B19E DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B1A1 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B1A3 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B1A5 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B1A6 07 -  -  -  		rlca
   32 D1:B1A7 07 -  -  -  		rlca
   33 D1:B1A8 80 -  -  -  		add 	a,b
   34 D1:B1A9 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B1AA DD 23 -  -  		inc 	ix 							; next character
   36 D1:B1AC 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B1AE -  -  -  -  		;
   38 D1:B1AE -  -  -  -  _VIHashDone:
   39 D1:B1AE 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B1AF -  -  -  -  		;
   41 D1:B1AF -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B1AF -  -  -  -  		;
   43 D1:B1AF 32 03 A9 D1 		ld 		(VarHash),a
   44 D1:B1B3 -  -  -  -  		;
   45 D1:B1B3 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B1B3 -  -  -  -  		;		
   47 D1:B1B3 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B1B5 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B1B9 6F -  -  -  		ld 		l,a
   50 D1:B1BA 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B1BB 29 -  -  -  		add 	hl,hl
   52 D1:B1BC -  -  -  -  		;
   53 D1:B1BC ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B1C1 19 -  -  -  		add 	hl,de
   55 D1:B1C2 -  -  -  -  		;
   56 D1:B1C2 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B1C5 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B1C7 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B1C9 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B1CD 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B1CE -  -  -  -  _VINotArray:
   62 D1:B1CE 22 05 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B1D2 C9 -  -  -  		ret
   64 D1:B1D3 -  -  -  -  
   65 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   66 D1:B1D3 -  -  -  -  ;
   67 D1:B1D3 -  -  -  -  ;									Changes and Updates
   68 D1:B1D3 -  -  -  -  ;
   69 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   70 D1:B1D3 -  -  -  -  ;
   71 D1:B1D3 -  -  -  -  ;		Date			Notes
   72 D1:B1D3 -  -  -  -  ;		==== 			=====
   73 D1:B1D3 -  -  -  -  ;
   74 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   75 D1:B1D3 -  -  -  -  
Listing for file "_build.asm"
   56 D1:B1D3 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B1D3 -  -  -  -  ; ***************************************************************************************
    2 D1:B1D3 -  -  -  -  ; ***************************************************************************************
    3 D1:B1D3 -  -  -  -  ;
    4 D1:B1D3 -  -  -  -  ;		Name : 		search.asm
    5 D1:B1D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1D3 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B1D3 -  -  -  -  ;		Reviewed :	No
    8 D1:B1D3 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B1D3 -  -  -  -  ;
   10 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   11 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   12 D1:B1D3 -  -  -  -  
   13 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   14 D1:B1D3 -  -  -  -  ;
   15 D1:B1D3 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B1D3 -  -  -  -  ;		CS if failed.
   17 D1:B1D3 -  -  -  -  ;
   18 D1:B1D3 -  -  -  -  ; ***************************************************************************************
   19 D1:B1D3 -  -  -  -  
   20 D1:B1D3 -  -  -  -  VariableSearchList:
   21 D1:B1D3 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B1D7 -  -  -  -  		;
   23 D1:B1D7 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B1D7 -  -  -  -  		;		the address of the hash record
   25 D1:B1D7 -  -  -  -  		;
   26 D1:B1D7 -  -  -  -  _VSLLoop:
   27 D1:B1D7 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B1D9 -  -  -  -  		;
   29 D1:B1D9 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B1DA AF -  -  -  		xor 	a
   31 D1:B1DB ED 6A -  -  		adc 	hl,hl
   32 D1:B1DD E1 -  -  -  		pop 	hl
   33 D1:B1DE 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B1E0 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B1E1 C8 -  -  -  		ret 	z
   36 D1:B1E2 -  -  -  -  _VSLRecord:
   37 D1:B1E2 -  -  -  -  		;
   38 D1:B1E2 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B1E2 -  -  -  -  		;
   40 D1:B1E2 3A 03 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B1E6 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B1E7 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B1E8 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B1EA -  -  -  -  		;
   45 D1:B1EA -  -  -  -  		;		Now check the name
   46 D1:B1EA -  -  -  -  		;
   47 D1:B1EA E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B1EB 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B1EC 23 -  -  -  		inc 	hl
   50 D1:B1ED 23 -  -  -  		inc 	hl
   51 D1:B1EE 23 -  -  -  		inc 	hl
   52 D1:B1EF ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B1F1 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B1F6 -  -  -  -  		;
   55 D1:B1F6 -  -  -  -  		;		Check individual characters
   56 D1:B1F6 -  -  -  -  		;
   57 D1:B1F6 -  -  -  -  _VSLCharacter:
   58 D1:B1F6 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B1F7 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B1F9 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B1FB BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B1FC 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B1FD 13 -  -  -  		inc 	de
   64 D1:B1FE 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B200 -  -  -  -  		;
   66 D1:B200 -  -  -  -  _VSLFailed:
   67 D1:B200 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B201 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B203 -  -  -  -  		;
   70 D1:B203 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B203 -  -  -  -  		;		
   72 D1:B203 -  -  -  -  _VSLEndIdentifier:
   73 D1:B203 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B204 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B206 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B208 -  -  -  -  		;
   77 D1:B208 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B209 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B20A AF -  -  -  		xor 	a 							; clear carry
   80 D1:B20B C9 -  -  -  		ret
   81 D1:B20C -  -  -  -  
   82 D1:B20C -  -  -  -  ; ***************************************************************************************
   83 D1:B20C -  -  -  -  ;
   84 D1:B20C -  -  -  -  ;									Changes and Updates
   85 D1:B20C -  -  -  -  ;
   86 D1:B20C -  -  -  -  ; ***************************************************************************************
   87 D1:B20C -  -  -  -  ;
   88 D1:B20C -  -  -  -  ;		Date			Notes
   89 D1:B20C -  -  -  -  ;		==== 			=====
   90 D1:B20C -  -  -  -  ;
   91 D1:B20C -  -  -  -  ; ***************************************************************************************
   92 D1:B20C -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B20C -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B20C -  -  -  -  ;
    2 D1:B20C -  -  -  -  ;	This file is automatically generated.
    3 D1:B20C -  -  -  -  ;
    4 D1:B20C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 D1:B220 -  -  -  -  PrecedenceTable:
    6 D1:B220 06 -  -  -  	.db	6	; $0083 !
    7 D1:B221 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B222 05 -  -  -  	.db	5	; $0085 *
    9 D1:B223 05 -  -  -  	.db	5	; $0086 /
   10 D1:B224 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B225 05 -  -  -  	.db	5	; $0088 div
   12 D1:B226 04 -  -  -  	.db	4	; $0089 +
   13 D1:B227 04 -  -  -  	.db	4	; $008a -
   14 D1:B228 03 -  -  -  	.db	3	; $008b >=
   15 D1:B229 03 -  -  -  	.db	3	; $008c <=
   16 D1:B22A 03 -  -  -  	.db	3	; $008d >
   17 D1:B22B 03 -  -  -  	.db	3	; $008e <
   18 D1:B22C 03 -  -  -  	.db	3	; $008f =
   19 D1:B22D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B22E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B22F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B230 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B231 -  -  -  -  
Listing for file "_build.asm"
   58 D1:B231 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B231 -  -  -  -  ;
    2 D1:B231 -  -  -  -  ;	This is automatically generated.
    3 D1:B231 -  -  -  -  ;
    4 D1:B231 -  -  -  -  ErrorIDTable:
    5 D1:B231 75 B2 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B235 7B B2 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B239 8C B2 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B23D 9A B2 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B241 A4 B2 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B245 AE B2 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B249 C8 B2 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B24D D9 B2 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 D1:B251 E7 B2 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 D1:B255 F5 B2 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 D1:B259 FF B2 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 D1:B25D 14 B3 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 D1:B261 2A B3 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 D1:B265 38 B3 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 D1:B269 3D B3 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 D1:B26D 4A B3 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 D1:B271 5B B3 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 D1:B275 -  -  -  -  
   23 D1:B275 -  -  -  -  ErrText_warmstart:
   24 D1:B275 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 D1:B27B -  -  -  -  ErrText_assert:
   26 D1:B27B 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 D1:B28C -  -  -  -  ErrText_badtype:
   28 D1:B28C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 D1:B29A -  -  -  -  ErrText_badvalue:
   30 D1:B29A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 D1:B2A4 -  -  -  -  ErrText_dim:
   32 D1:B2A4 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 D1:B2AE -  -  -  -  ErrText_disabled:
   34 D1:B2AE 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 D1:B2C8 -  -  -  -  ErrText_divzero:
   36 D1:B2C8 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 D1:B2D9 -  -  -  -  ErrText_memory:
   38 D1:B2D9 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 D1:B2E7 -  -  -  -  ErrText_nocomma:
   40 D1:B2E7 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 D1:B2F5 -  -  -  -  ErrText_nodollar:
   42 D1:B2F5 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 D1:B2FF -  -  -  -  ErrText_nolbracket:
   44 D1:B2FF 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 D1:B314 -  -  -  -  ErrText_norbracket:
   46 D1:B314 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 D1:B32A -  -  -  -  ErrText_notref:
   48 D1:B32A 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 D1:B338 -  -  -  -  ErrText_stop:
   50 D1:B338 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 D1:B33D -  -  -  -  ErrText_syntax:
   52 D1:B33D 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 D1:B34A -  -  -  -  ErrText_todo:
   54 D1:B34A 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 D1:B35B -  -  -  -  ErrText_unknownvar:
   56 D1:B35B 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 D1:B36C -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B36C -  -  -  -  ;
    2 D1:B36C -  -  -  -  ;	Vectors for set 0
    3 D1:B36C -  -  -  -  ;
    4 D1:B36C -  -  -  -  VectorsSet0:
    5 D1:B36C BF A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B370 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B374 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B378 3B AC D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B37C 44 AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B380 E7 AB D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B384 F5 AB D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B388 03 AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B38C F5 AB D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B390 CB AB D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B394 D9 AB D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B398 A2 AC D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B39C 98 AC D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B3A0 84 AC D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B3A4 7A AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B3A8 70 AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B3AC 8E AC D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B3B0 11 AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B3B4 1F AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B3B8 2D AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B3BC 14 B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B3C0 0C B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B3C4 2E AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B3C8 5B AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B3CC 1D AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B3D0 F3 AE D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B3D4 F2 AF D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B3D8 23 B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B3DC 09 AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B3E0 00 AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B3E4 39 AF D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B3E8 4E AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B3EC 3C B0 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B3F0 43 B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B3F4 50 B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B3F8 62 AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B3FC 66 AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B400 6C A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B404 6C A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B408 70 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B40C 6C A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B410 81 AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B414 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa repeat
   48 D1:B418 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab until
   49 D1:B41C A5 A8 D1 00 	addr(Unimplemented)              ; $00ac if
   50 D1:B420 6C A9 D1 00 	addr(BadCmd_Then)                ; $00ad then
   51 D1:B424 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae else
   52 D1:B428 A5 A8 D1 00 	addr(Unimplemented)              ; $00af for
   53 D1:B42C 6C A9 D1 00 	addr(BadCmd_To)                  ; $00b0 to
   54 D1:B430 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 step
   55 D1:B434 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 next
   56 D1:B438 A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 def
   57 D1:B43C A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 proc
   58 D1:B440 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 endproc
   59 D1:B444 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 gosub
   60 D1:B448 A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 return
   61 D1:B44C A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 goto
   62 D1:B450 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 local
   63 D1:B454 71 A9 D1 00 	addr(Command_DIM)                ; $00ba dim
   64 D1:B458 81 AA D1 00 	addr(Command_REM)                ; $00bb rem
   65 D1:B45C D6 A9 D1 00 	addr(Command_LET)                ; $00bc let
   66 D1:B460 A5 A8 D1 00 	addr(Unimplemented)              ; $00bd vdu
   67 D1:B464 2A AA D1 00 	addr(Command_PRINT)              ; $00be print
   68 D1:B468 A5 A8 D1 00 	addr(Unimplemented)              ; $00bf load
   69 D1:B46C A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 save
   70 D1:B470 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 list
   71 D1:B474 DE B0 D1 00 	addr(Command_NEW)                ; $00c2 new
   72 D1:B478 9E AA D1 00 	addr(Command_RUN)                ; $00c3 run
   73 D1:B47C A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 read
   74 D1:B480 A5 A8 D1 00 	addr(Unimplemented)              ; $00c5 data
   75 D1:B484 A5 A8 D1 00 	addr(Unimplemented)              ; $00c6 restore
   76 D1:B488 5B A9 D1 00 	addr(Command_ASSERT)             ; $00c7 assert
   77 D1:B48C 80 B0 D1 00 	addr(Command_CLEAR)              ; $00c8 clear
   78 D1:B490 B9 A9 D1 00 	addr(Command_END)                ; $00c9 end
   79 D1:B494 11 AB D1 00 	addr(Command_STOP)               ; $00ca stop
   80 D1:B498 -  -  -  -  ;
   81 D1:B498 -  -  -  -  ;	Vectors for set 1
   82 D1:B498 -  -  -  -  ;
   83 D1:B498 -  -  -  -  VectorsSet1:
   84 D1:B498 -  -  -  -  ;
   85 D1:B498 -  -  -  -  ;	Vectors for set 2
   86 D1:B498 -  -  -  -  ;
   87 D1:B498 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 D1:B498 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B498 -  -  -  -  ; ***************************************************************************************
    2 D1:B498 -  -  -  -  ; ***************************************************************************************
    3 D1:B498 -  -  -  -  ;
    4 D1:B498 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B498 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B498 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B498 -  -  -  -  ;		Reviewed :	No
    8 D1:B498 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B498 -  -  -  -  ;
   10 D1:B498 -  -  -  -  ; ***************************************************************************************
   11 D1:B498 -  -  -  -  ; ***************************************************************************************
   12 D1:B498 -  -  -  -  
   13 D1:B498 -  -  -  -  ; ***************************************************************************************
   14 D1:B498 -  -  -  -  ;
   15 D1:B498 -  -  -  -  ;								Unsigned integer divide
   16 D1:B498 -  -  -  -  ;
   17 D1:B498 -  -  -  -  ; ***************************************************************************************
   18 D1:B498 -  -  -  -  
   19 D1:B498 -  -  -  -  Int32UDivide:
   20 D1:B498 37 -  -  -  		scf
   21 D1:B499 C3 DD B4 D1 		jp 		_I32UnsignedDivide		
   22 D1:B49D -  -  -  -  
   23 D1:B49D -  -  -  -  ; ***************************************************************************************
   24 D1:B49D -  -  -  -  ;
   25 D1:B49D -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B49D -  -  -  -  ;
   27 D1:B49D -  -  -  -  ; ***************************************************************************************
   28 D1:B49D -  -  -  -  
   29 D1:B49D -  -  -  -  Int32SDivide:
   30 D1:B49D 37 -  -  -  		scf
   31 D1:B49E 18 01 -  -  		jr 		_I32SDivide
   32 D1:B4A0 -  -  -  -  Int32Modulus:
   33 D1:B4A0 AF -  -  -  		xor 	a
   34 D1:B4A1 -  -  -  -  _I32SDivide:
   35 D1:B4A1 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B4A2 F5 -  -  -  		push 	af
   37 D1:B4A3 08 -  -  -  		ex 		af,af'
   38 D1:B4A4 -  -  -  -  
   39 D1:B4A4 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B4A5 D9 -  -  -  		exx
   41 D1:B4A6 D5 -  -  -  		push 	de
   42 D1:B4A7 D9 -  -  -  		exx
   43 D1:B4A8 -  -  -  -  
   44 D1:B4A8 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B4A9 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B4AA CD CA B4 D1 		call 	_I32CheckHLSignSwap
   47 D1:B4AE CD CA B4 D1 		call 	_I32CheckHLSignSwap
   48 D1:B4B2 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B4B3 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B4B4 F5 -  -  -  		push 	af
   51 D1:B4B5 CD DD B4 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B4B9 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B4BA 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B4BC 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B4BD CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B4BF C4 40 B6 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B4C3 -  -  -  -  _I32SDExit:
   58 D1:B4C3 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B4C4 D1 -  -  -  		pop 	de
   60 D1:B4C5 D9 -  -  -  		exx
   61 D1:B4C6 D1 -  -  -  		pop 	de
   62 D1:B4C7 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B4C8 08 -  -  -  		ex 		af,af'
   64 D1:B4C9 C9 -  -  -  		ret
   65 D1:B4CA -  -  -  -  
   66 D1:B4CA -  -  -  -  
   67 D1:B4CA -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B4CA D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B4CB CB 7C -  -  		bit 	7,h
   70 D1:B4CD D9 -  -  -  		exx
   71 D1:B4CE 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B4D0 -  -  -  -  		;
   73 D1:B4D0 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B4D2 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B4D3 CD 40 B6 D1 		call 	Int32Negate 				
   76 D1:B4D7 F1 -  -  -  		pop 	af
   77 D1:B4D8 -  -  -  -  _I32CHSPositive:
   78 D1:B4D8 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B4D9 EB -  -  -  		ex 		de,hl
   80 D1:B4DA D9 -  -  -  		exx		
   81 D1:B4DB EB -  -  -  		ex 		de,hl
   82 D1:B4DC C9 -  -  -  		ret
   83 D1:B4DD -  -  -  -  
   84 D1:B4DD -  -  -  -  ; ***************************************************************************************
   85 D1:B4DD -  -  -  -  ;
   86 D1:B4DD -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B4DD -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B4DD -  -  -  -  ;
   89 D1:B4DD -  -  -  -  ; ***************************************************************************************
   90 D1:B4DD -  -  -  -  
   91 D1:B4DD -  -  -  -  _I32UnsignedDivide:
   92 D1:B4DD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B4DE D5 -  -  -  		push 	de
   94 D1:B4DF D9 -  -  -  		exx
   95 D1:B4E0 C5 -  -  -  		push 	bc
   96 D1:B4E1 D5 -  -  -  		push 	de 							
   97 D1:B4E2 D9 -  -  -  		exx
   98 D1:B4E3 -  -  -  -  
   99 D1:B4E3 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B4E4 -  -  -  -  
  101 D1:B4E4 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B4E5 B3 -  -  -  		or 		e
  103 D1:B4E6 D9 -  -  -  		exx
  104 D1:B4E7 B2 -  -  -  		or 		d
  105 D1:B4E8 B3 -  -  -  		or 		e
  106 D1:B4E9 D9 -  -  -  		exx
  107 D1:B4EA CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B4EE -  -  -  -  
  109 D1:B4EE -  -  -  -  
  110 D1:B4EE 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B4EF 4D -  -  -  		ld		c,l
  112 D1:B4F0 21 00 00 00 		ld 		hl,$0000
  113 D1:B4F4 D9 -  -  -  		exx
  114 D1:B4F5 44 -  -  -  		ld 		b,h
  115 D1:B4F6 4D -  -  -  		ld		c,l
  116 D1:B4F7 21 00 00 00 		ld 		hl,$0000
  117 D1:B4FB D9 -  -  -  		exx
  118 D1:B4FC -  -  -  -  
  119 D1:B4FC 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B4FE -  -  -  -  _I32DivideLoop:
  121 D1:B4FE F5 -  -  -  		push 	af
  122 D1:B4FF -  -  -  -  
  123 D1:B4FF CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B501 CB 10 -  -  		rl 		b
  125 D1:B503 D9 -  -  -  		exx
  126 D1:B504 CB 11 -  -  		rl 		c
  127 D1:B506 CB 10 -  -  		rl 		b
  128 D1:B508 D9 -  -  -  		exx
  129 D1:B509 CB 15 -  -  		rl 		l
  130 D1:B50B CB 14 -  -  		rl 		h
  131 D1:B50D D9 -  -  -  		exx
  132 D1:B50E CB 15 -  -  		rl 		l
  133 D1:B510 CB 14 -  -  		rl 		h
  134 D1:B512 D9 -  -  -  		exx
  135 D1:B513 -  -  -  -  
  136 D1:B513 CD DE B5 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B517 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B519 -  -  -  -  
  139 D1:B519 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B51A 18 04 -  -  		jr 		_I32Next
  141 D1:B51C -  -  -  -  
  142 D1:B51C -  -  -  -  _I32Borrow:
  143 D1:B51C CD D6 B5 D1 		call 	Int32Add 					; A = A + M
  144 D1:B520 -  -  -  -  _I32Next:
  145 D1:B520 F1 -  -  -  		pop 	af
  146 D1:B521 3D -  -  -  		dec 	a
  147 D1:B522 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B524 -  -  -  -  
  149 D1:B524 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B525 -  -  -  -  
  151 D1:B525 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B526 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B528 -  -  -  -  
  154 D1:B528 60 -  -  -  		ld  	h,b
  155 D1:B529 69 -  -  -  		ld 		l,c
  156 D1:B52A D9 -  -  -  		exx
  157 D1:B52B 60 -  -  -  		ld  	h,b
  158 D1:B52C 69 -  -  -  		ld 		l,c
  159 D1:B52D D9 -  -  -  		exx
  160 D1:B52E -  -  -  -  _I32Modulus1:		
  161 D1:B52E D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B52F D1 -  -  -  		pop 	de
  163 D1:B530 C1 -  -  -  		pop 	bc
  164 D1:B531 D9 -  -  -  		exx
  165 D1:B532 D1 -  -  -  		pop 	de
  166 D1:B533 C1 -  -  -  		pop 	bc
  167 D1:B534 C9 -  -  -  		ret
  168 D1:B535 -  -  -  -  
  169 D1:B535 -  -  -  -  ; ***************************************************************************************
  170 D1:B535 -  -  -  -  ;
  171 D1:B535 -  -  -  -  ;									Changes and Updates
  172 D1:B535 -  -  -  -  ;
  173 D1:B535 -  -  -  -  ; ***************************************************************************************
  174 D1:B535 -  -  -  -  ;
  175 D1:B535 -  -  -  -  ;		Date			Notes
  176 D1:B535 -  -  -  -  ;		==== 			=====
  177 D1:B535 -  -  -  -  ;
  178 D1:B535 -  -  -  -  ; ***************************************************************************************
  179 D1:B535 -  -  -  -  		
Listing for file "_build.asm"
   61 D1:B535 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B535 -  -  -  -  ; ***************************************************************************************
    2 D1:B535 -  -  -  -  ; ***************************************************************************************
    3 D1:B535 -  -  -  -  ;
    4 D1:B535 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B535 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B535 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B535 -  -  -  -  ;		Reviewed :	No
    8 D1:B535 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B535 -  -  -  -  ;
   10 D1:B535 -  -  -  -  ; ***************************************************************************************
   11 D1:B535 -  -  -  -  ; ***************************************************************************************
   12 D1:B535 -  -  -  -  
   13 D1:B535 -  -  -  -  ; ***************************************************************************************
   14 D1:B535 -  -  -  -  ;
   15 D1:B535 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B535 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B535 -  -  -  -  ;
   18 D1:B535 -  -  -  -  ; ***************************************************************************************
   19 D1:B535 -  -  -  -  
   20 D1:B535 -  -  -  -  Int32FromString:
   21 D1:B535 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B536 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B537 D5 -  -  -  		push 	de
   24 D1:B538 D9 -  -  -  		exx
   25 D1:B539 D5 -  -  -  		push 	de
   26 D1:B53A -  -  -  -  
   27 D1:B53A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B53E 11 00 00 00 		ld 		de,$0000
   29 D1:B542 D9 -  -  -  		exx
   30 D1:B543 21 00 00 00 		ld 		hl,$0000
   31 D1:B547 11 00 00 00 		ld 		de,$0000
   32 D1:B54B D9 -  -  -  		exx
   33 D1:B54C -  -  -  -  
   34 D1:B54C 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B54D CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B54F 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B551 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B553 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B554 -  -  -  -  		;
   40 D1:B554 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B555 F5 -  -  -  		push 	af
   42 D1:B556 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B558 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B559 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B55B 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B55C 18 01 -  -  		jr 		_I32FSMain
   47 D1:B55E -  -  -  -  _I32FSNotSigned:		
   48 D1:B55E E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B55F -  -  -  -  		;
   50 D1:B55F -  -  -  -  		; 		Main conversion loop.
   51 D1:B55F -  -  -  -  		; 		
   52 D1:B55F -  -  -  -  _I32FSMain:		
   53 D1:B55F 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B560 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B562 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B564 D6 20 -  -  		sub 	32
   57 D1:B566 -  -  -  -  _I32FSNotLower:
   58 D1:B566 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B568 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B56A FE 3A -  -  		cp 		'9'+1
   61 D1:B56C 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B56E FE 41 -  -  		cp 		'A'
   63 D1:B570 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B572 FE 47 -  -  		cp 		'F'+1
   65 D1:B574 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B576 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B578 -  -  -  -  _I32FSOkay:
   68 D1:B578 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B57A BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B57B 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B57D 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B57E D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B57F F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B580 CD 9D B5 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B584 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B585 5F -  -  -  		ld 		e,a
   77 D1:B586 CD D6 B5 D1 		call 	Int32Add 					; and add it.
   78 D1:B58A D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B58B 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B58D -  -  -  -  
   81 D1:B58D -  -  -  -  _I32FSExit:
   82 D1:B58D F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B58E FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B590 CC 40 B6 D1 		call 	z,Int32Negate
   85 D1:B594 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B595 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B596 D9 -  -  -  		exx
   88 D1:B597 D1 -  -  -  		pop 	de
   89 D1:B598 D9 -  -  -  		exx
   90 D1:B599 C1 -  -  -  		pop 	bc
   91 D1:B59A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B59C C9 -  -  -  		ret				
   93 D1:B59D -  -  -  -  
   94 D1:B59D -  -  -  -  ; ***************************************************************************************
   95 D1:B59D -  -  -  -  ;
   96 D1:B59D -  -  -  -  ;									Changes and Updates
   97 D1:B59D -  -  -  -  ;
   98 D1:B59D -  -  -  -  ; ***************************************************************************************
   99 D1:B59D -  -  -  -  ;
  100 D1:B59D -  -  -  -  ;		Date			Notes
  101 D1:B59D -  -  -  -  ;		==== 			=====
  102 D1:B59D -  -  -  -  ;
  103 D1:B59D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B59D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B59D -  -  -  -  ; ***************************************************************************************
    2 D1:B59D -  -  -  -  ; ***************************************************************************************
    3 D1:B59D -  -  -  -  ;
    4 D1:B59D -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B59D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B59D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B59D -  -  -  -  ;		Reviewed :	No
    8 D1:B59D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B59D -  -  -  -  ;
   10 D1:B59D -  -  -  -  ; ***************************************************************************************
   11 D1:B59D -  -  -  -  ; ***************************************************************************************
   12 D1:B59D -  -  -  -  
   13 D1:B59D -  -  -  -  Int32Multiply:
   14 D1:B59D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B59E D5 -  -  -  		push 	de
   16 D1:B59F 44 -  -  -  		ld 		b,h
   17 D1:B5A0 4D -  -  -  		ld 		c,l
   18 D1:B5A1 21 00 00 00 		ld 		hl,$0000
   19 D1:B5A5 -  -  -  -  
   20 D1:B5A5 D9 -  -  -  		exx
   21 D1:B5A6 C5 -  -  -  		push 	bc
   22 D1:B5A7 D5 -  -  -  		push 	de
   23 D1:B5A8 44 -  -  -  		ld 		b,h
   24 D1:B5A9 4D -  -  -  		ld 		c,l
   25 D1:B5AA 21 00 00 00 		ld 		hl,$0000		
   26 D1:B5AE D9 -  -  -  		exx
   27 D1:B5AF -  -  -  -  
   28 D1:B5AF -  -  -  -  _I32MultiplyLoop:
   29 D1:B5AF CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B5B1 C4 D6 B5 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B5B5 -  -  -  -  		;
   32 D1:B5B5 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B5B6 CB 38 -  -  		srl 	b
   34 D1:B5B8 CB 19 -  -  		rr 		c
   35 D1:B5BA D9 -  -  -  		exx
   36 D1:B5BB CB 18 -  -  		rr 		b
   37 D1:B5BD CB 19 -  -  		rr 		c
   38 D1:B5BF -  -  -  -  		;
   39 D1:B5BF CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B5C1 CB 12 -  -  		rl 		d
   41 D1:B5C3 D9 -  -  -  		exx
   42 D1:B5C4 CB 13 -  -  		rl 		e
   43 D1:B5C6 CB 12 -  -  		rl 		d
   44 D1:B5C8 -  -  -  -  
   45 D1:B5C8 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B5C9 B1 -  -  -  		or 		c
   47 D1:B5CA D9 -  -  -  		exx
   48 D1:B5CB B0 -  -  -  		or 		b
   49 D1:B5CC B1 -  -  -  		or 		c
   50 D1:B5CD 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B5CF -  -  -  -  
   52 D1:B5CF D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B5D0 D1 -  -  -  		pop 	de
   54 D1:B5D1 C1 -  -  -  		pop 	bc
   55 D1:B5D2 D9 -  -  -  		exx
   56 D1:B5D3 D1 -  -  -  		pop 	de
   57 D1:B5D4 C1 -  -  -  		pop 	bc
   58 D1:B5D5 C9 -  -  -  		ret
   59 D1:B5D6 -  -  -  -  
   60 D1:B5D6 -  -  -  -  ; ***************************************************************************************
   61 D1:B5D6 -  -  -  -  ;
   62 D1:B5D6 -  -  -  -  ;									Changes and Updates
   63 D1:B5D6 -  -  -  -  ;
   64 D1:B5D6 -  -  -  -  ; ***************************************************************************************
   65 D1:B5D6 -  -  -  -  ;
   66 D1:B5D6 -  -  -  -  ;		Date			Notes
   67 D1:B5D6 -  -  -  -  ;		==== 			=====
   68 D1:B5D6 -  -  -  -  ;
   69 D1:B5D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B5D6 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B5D6 -  -  -  -  ; ***************************************************************************************
    2 D1:B5D6 -  -  -  -  ; ***************************************************************************************
    3 D1:B5D6 -  -  -  -  ;
    4 D1:B5D6 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B5D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5D6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5D6 -  -  -  -  ;		Reviewed :	No
    8 D1:B5D6 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B5D6 -  -  -  -  ;
   10 D1:B5D6 -  -  -  -  ; ***************************************************************************************
   11 D1:B5D6 -  -  -  -  ; ***************************************************************************************
   12 D1:B5D6 -  -  -  -  
   13 D1:B5D6 -  -  -  -  ; ***************************************************************************************
   14 D1:B5D6 -  -  -  -  ;
   15 D1:B5D6 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B5D6 -  -  -  -  ;
   17 D1:B5D6 -  -  -  -  ; ***************************************************************************************
   18 D1:B5D6 -  -  -  -  
   19 D1:B5D6 -  -  -  -  Int32Add:
   20 D1:B5D6 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B5D8 D9 -  -  -  		exx
   22 D1:B5D9 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B5DC D9 -  -  -  		exx
   24 D1:B5DD C9 -  -  -  		ret
   25 D1:B5DE -  -  -  -  
   26 D1:B5DE -  -  -  -  ; ***************************************************************************************
   27 D1:B5DE -  -  -  -  ;
   28 D1:B5DE -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B5DE -  -  -  -  ;
   30 D1:B5DE -  -  -  -  ; ***************************************************************************************
   31 D1:B5DE -  -  -  -  
   32 D1:B5DE -  -  -  -  Int32Subtract:
   33 D1:B5DE AF -  -  -  		xor 	a 							; clear carry
   34 D1:B5DF 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B5E2 D9 -  -  -  		exx
   36 D1:B5E3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B5E6 D9 -  -  -  		exx
   38 D1:B5E7 C9 -  -  -  		ret
   39 D1:B5E8 -  -  -  -  
   40 D1:B5E8 -  -  -  -  ; ***************************************************************************************
   41 D1:B5E8 -  -  -  -  ;
   42 D1:B5E8 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B5E8 -  -  -  -  ;
   44 D1:B5E8 -  -  -  -  ; ***************************************************************************************
   45 D1:B5E8 -  -  -  -  
   46 D1:B5E8 -  -  -  -  Int32And:
   47 D1:B5E8 D9 -  -  -  		exx
   48 D1:B5E9 CD EE B5 D1 		call 	_I32AndHLDE
   49 D1:B5ED D9 -  -  -  		exx
   50 D1:B5EE -  -  -  -  _I32AndHLDE:		
   51 D1:B5EE 7C -  -  -  		ld 		a,h
   52 D1:B5EF A2 -  -  -  		and 	d
   53 D1:B5F0 67 -  -  -  		ld 		h,a
   54 D1:B5F1 7D -  -  -  		ld 		a,l
   55 D1:B5F2 A3 -  -  -  		and 	e
   56 D1:B5F3 6F -  -  -  		ld 		l,a
   57 D1:B5F4 C9 -  -  -  		ret
   58 D1:B5F5 -  -  -  -  
   59 D1:B5F5 -  -  -  -  ; ***************************************************************************************
   60 D1:B5F5 -  -  -  -  ;
   61 D1:B5F5 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B5F5 -  -  -  -  ;
   63 D1:B5F5 -  -  -  -  ; ***************************************************************************************
   64 D1:B5F5 -  -  -  -  
   65 D1:B5F5 -  -  -  -  Int32Or:
   66 D1:B5F5 D9 -  -  -  		exx
   67 D1:B5F6 CD FB B5 D1 		call 	_I32OrHLDE
   68 D1:B5FA D9 -  -  -  		exx
   69 D1:B5FB -  -  -  -  _I32OrHLDE:		
   70 D1:B5FB 7C -  -  -  		ld 		a,h
   71 D1:B5FC B2 -  -  -  		or 		d
   72 D1:B5FD 67 -  -  -  		ld 		h,a
   73 D1:B5FE 7D -  -  -  		ld 		a,l
   74 D1:B5FF B3 -  -  -  		or 		e
   75 D1:B600 6F -  -  -  		ld 		l,a
   76 D1:B601 C9 -  -  -  		ret
   77 D1:B602 -  -  -  -  
   78 D1:B602 -  -  -  -  ; ***************************************************************************************
   79 D1:B602 -  -  -  -  ;
   80 D1:B602 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B602 -  -  -  -  ;
   82 D1:B602 -  -  -  -  ; ***************************************************************************************
   83 D1:B602 -  -  -  -  
   84 D1:B602 -  -  -  -  Int32Xor:
   85 D1:B602 D9 -  -  -  		exx
   86 D1:B603 CD 08 B6 D1 		call 	_I32XorHLDE
   87 D1:B607 D9 -  -  -  		exx
   88 D1:B608 -  -  -  -  _I32XorHLDE:		
   89 D1:B608 7C -  -  -  		ld 		a,h
   90 D1:B609 AA -  -  -  		xor 	d
   91 D1:B60A 67 -  -  -  		ld 		h,a
   92 D1:B60B 7D -  -  -  		ld 		a,l
   93 D1:B60C AB -  -  -  		xor 	e
   94 D1:B60D 6F -  -  -  		ld 		l,a
   95 D1:B60E C9 -  -  -  		ret
   96 D1:B60F -  -  -  -  
   97 D1:B60F -  -  -  -  ; ***************************************************************************************
   98 D1:B60F -  -  -  -  ;
   99 D1:B60F -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B60F -  -  -  -  ;
  101 D1:B60F -  -  -  -  ; ***************************************************************************************
  102 D1:B60F -  -  -  -  
  103 D1:B60F -  -  -  -  Int32Zero:
  104 D1:B60F D9 -  -  -  		exx
  105 D1:B610 7D -  -  -  		ld 		a,l
  106 D1:B611 B4 -  -  -  		or 		h
  107 D1:B612 D9 -  -  -  		exx
  108 D1:B613 B5 -  -  -  		or 		l
  109 D1:B614 B4 -  -  -  		or 		h
  110 D1:B615 C9 -  -  -  		ret
  111 D1:B616 -  -  -  -  
  112 D1:B616 -  -  -  -  ; ***************************************************************************************
  113 D1:B616 -  -  -  -  ;
  114 D1:B616 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B616 -  -  -  -  ;
  116 D1:B616 -  -  -  -  ; ***************************************************************************************
  117 D1:B616 -  -  -  -  
  118 D1:B616 -  -  -  -  Int32Compare:
  119 D1:B616 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B617 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B618 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B61B D9 -  -  -  		exx
  123 D1:B61C E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B61D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B620 -  -  -  -  		;
  126 D1:B620 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B621 E2 29 B6 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B625 78 -  -  -  		ld 		a,b
  129 D1:B626 EE 80 -  -  		xor 	$80
  130 D1:B628 47 -  -  -  		ld 		b,a
  131 D1:B629 -  -  -  -  _I32CNoOverflow:
  132 D1:B629 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B62A B5 -  -  -  		or 		l
  134 D1:B62B D9 -  -  -  		exx 
  135 D1:B62C B4 -  -  -  		or 		h
  136 D1:B62D B5 -  -  -  		or 		l
  137 D1:B62E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B630 -  -  -  -  		;
  139 D1:B630 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B631 CB 78 -  -  		bit 	7,b
  141 D1:B633 D9 -  -  -  		exx
  142 D1:B634 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B636 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B638 3E FF -  -  		ld 		a,$FF
  145 D1:B63A -  -  -  -  _I32NotPos:
  146 D1:B63A D9 -  -  -  		exx
  147 D1:B63B E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B63C D9 -  -  -  		exx
  149 D1:B63D E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B63E B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B63F C9 -  -  -  		ret
  152 D1:B640 -  -  -  -  
  153 D1:B640 -  -  -  -  ; ***************************************************************************************
  154 D1:B640 -  -  -  -  ;
  155 D1:B640 -  -  -  -  ;										Negate HL'HL
  156 D1:B640 -  -  -  -  ;
  157 D1:B640 -  -  -  -  ; ***************************************************************************************
  158 D1:B640 -  -  -  -  
  159 D1:B640 -  -  -  -  Int32Negate:
  160 D1:B640 AF -  -  -  		xor 	a
  161 D1:B641 CD 4C B6 D1 		call 	_I32NSubtract
  162 D1:B645 D9 -  -  -  		exx
  163 D1:B646 CD 4C B6 D1 		call 	_I32NSubtract
  164 D1:B64A D9 -  -  -  		exx
  165 D1:B64B C9 -  -  -  		ret
  166 D1:B64C -  -  -  -  _I32NSubtract:
  167 D1:B64C D5 -  -  -  		push 	de
  168 D1:B64D EB -  -  -  		ex 		de,hl
  169 D1:B64E 21 00 00 00 		ld 		hl,$0000
  170 D1:B652 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B655 D1 -  -  -  		pop 	de
  172 D1:B656 C9 -  -  -  		ret
  173 D1:B657 -  -  -  -  		
  174 D1:B657 -  -  -  -  ; ***************************************************************************************
  175 D1:B657 -  -  -  -  ;
  176 D1:B657 -  -  -  -  ;									Changes and Updates
  177 D1:B657 -  -  -  -  ;
  178 D1:B657 -  -  -  -  ; ***************************************************************************************
  179 D1:B657 -  -  -  -  ;
  180 D1:B657 -  -  -  -  ;		Date			Notes
  181 D1:B657 -  -  -  -  ;		==== 			=====
  182 D1:B657 -  -  -  -  ;
  183 D1:B657 -  -  -  -  ; ***************************************************************************************
  184 D1:B657 -  -  -  -  		
Listing for file "_build.asm"
   64 D1:B657 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B657 -  -  -  -  ; ***************************************************************************************
    2 D1:B657 -  -  -  -  ; ***************************************************************************************
    3 D1:B657 -  -  -  -  ;
    4 D1:B657 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B657 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B657 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B657 -  -  -  -  ;		Reviewed :	No
    8 D1:B657 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B657 -  -  -  -  ;
   10 D1:B657 -  -  -  -  ; ***************************************************************************************
   11 D1:B657 -  -  -  -  ;
   12 D1:B657 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B657 -  -  -  -  ;
   14 D1:B657 -  -  -  -  ; ***************************************************************************************
   15 D1:B657 -  -  -  -  
   16 D1:B657 -  -  -  -  Int32ToString:
   17 D1:B657 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B658 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B659 E5 -  -  -  		push 	hl
   20 D1:B65A 11 00 00 00 		ld	 	de,$0000
   21 D1:B65E D9 -  -  -  		exx
   22 D1:B65F D5 -  -  -  		push 	de
   23 D1:B660 E5 -  -  -  		push 	hl
   24 D1:B661 11 00 00 00 		ld 		de,$000
   25 D1:B665 D9 -  -  -  		exx
   26 D1:B666 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B667 -  -  -  -  		;
   28 D1:B667 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B669 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B66B ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B66D 5F -  -  -  		ld 		e,a
   32 D1:B66E -  -  -  -  		;
   33 D1:B66E D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B66F CB 7C -  -  		bit 	7,h
   35 D1:B671 D9 -  -  -  		exx
   36 D1:B672 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B674 -  -  -  -  		;
   38 D1:B674 CD 40 B6 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B678 -  -  -  -  		;
   40 D1:B678 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B67A 02 -  -  -  		ld 		(bc),a
   42 D1:B67B 03 -  -  -  		inc 	bc
   43 D1:B67C -  -  -  -  _I32TSNotNegative:	
   44 D1:B67C CD 8B B6 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B680 -  -  -  -  _I32TSExit:
   46 D1:B680 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B682 02 -  -  -  		ld 		(bc),a 
   48 D1:B683 -  -  -  -  
   49 D1:B683 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B684 E1 -  -  -  		pop 	hl
   51 D1:B685 D1 -  -  -  		pop 	de
   52 D1:B686 D9 -  -  -  		exx
   53 D1:B687 E1 -  -  -  		pop 	hl
   54 D1:B688 D1 -  -  -  		pop 	de
   55 D1:B689 C1 -  -  -  		pop 	bc
   56 D1:B68A C9 -  -  -  		ret
   57 D1:B68B -  -  -  -  
   58 D1:B68B -  -  -  -  _I32RecursiveConvert:
   59 D1:B68B CD 98 B4 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B68F F5 -  -  -  		push 	af 							; save remainder
   61 D1:B690 CD 0F B6 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B694 C4 8B B6 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B698 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B699 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B69B 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B69D C6 07 -  -  		add 	a,7
   67 D1:B69F -  -  -  -  _I32NotHex:
   68 D1:B69F C6 30 -  -  		add 	a,48
   69 D1:B6A1 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B6A2 03 -  -  -  		inc 	bc
   71 D1:B6A3 C9 -  -  -  		ret		
   72 D1:B6A4 -  -  -  -  
   73 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   74 D1:B6A4 -  -  -  -  ;
   75 D1:B6A4 -  -  -  -  ;									Changes and Updates
   76 D1:B6A4 -  -  -  -  ;
   77 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   78 D1:B6A4 -  -  -  -  ;
   79 D1:B6A4 -  -  -  -  ;		Date			Notes
   80 D1:B6A4 -  -  -  -  ;		==== 			=====
   81 D1:B6A4 -  -  -  -  ;
   82 D1:B6A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B6A4 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B6A4 -  -  -  -  ; ***************************************************************************************
    2 D1:B6A4 -  -  -  -  ; ***************************************************************************************
    3 D1:B6A4 -  -  -  -  ;
    4 D1:B6A4 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B6A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6A4 -  -  -  -  ;		Reviewed :	No
    8 D1:B6A4 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B6A4 -  -  -  -  ;
   10 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   11 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   12 D1:B6A4 -  -  -  -  
   13 D1:B6A4 -  -  -  -  #ifdef AQUARIUS
   14 D1:B6A4             
   15 D1:B6A4             ; ***************************************************************************************
   16 D1:B6A4             ;
   17 D1:B6A4             ;								Initialise system stuff
   18 D1:B6A4             ;
   19 D1:B6A4             ; ***************************************************************************************
   20 D1:B6A4             
   21 D1:B6A4             SYSInitialise:
   22 D1:B6A4             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B6A4             	call 	SYSPrintChar
   24 D1:B6A4             	ret
   25 D1:B6A4             
   26 D1:B6A4             ; ***************************************************************************************
   27 D1:B6A4             ;
   28 D1:B6A4             ;								Terminate system stuff
   29 D1:B6A4             ;
   30 D1:B6A4             ; ***************************************************************************************
   31 D1:B6A4             
   32 D1:B6A4             SYSTerminate:
   33 D1:B6A4             	jr 		SYSTerminate
   34 D1:B6A4             
   35 D1:B6A4             ; ***************************************************************************************
   36 D1:B6A4             ;
   37 D1:B6A4             ;								Print A character
   38 D1:B6A4             ;
   39 D1:B6A4             ; ***************************************************************************************
   40 D1:B6A4             
   41 D1:B6A4             SYSPrintChar:
   42 D1:B6A4             	push 	af 									; we stack everything including alt registers
   43 D1:B6A4             	push 	bc
   44 D1:B6A4             	push 	de
   45 D1:B6A4             	push 	hl
   46 D1:B6A4             	push 	ix
   47 D1:B6A4             	push 	iy
   48 D1:B6A4             	exx
   49 D1:B6A4             	push 	bc
   50 D1:B6A4             	push 	de
   51 D1:B6A4             	push 	hl
   52 D1:B6A4             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B6A4             	pop 	hl
   54 D1:B6A4             	pop 	de
   55 D1:B6A4             	pop 	bc
   56 D1:B6A4             	exx
   57 D1:B6A4             	pop 	iy
   58 D1:B6A4             	pop 	ix
   59 D1:B6A4             	pop 	hl
   60 D1:B6A4             	pop 	de
   61 D1:B6A4             	pop 	bc
   62 D1:B6A4             	pop 	af
   63 D1:B6A4             	ret		
   64 D1:B6A4             
   65 D1:B6A4             ; ***************************************************************************************
   66 D1:B6A4             ;
   67 D1:B6A4             ;									Print Newline
   68 D1:B6A4             ;
   69 D1:B6A4             ; ***************************************************************************************
   70 D1:B6A4             
   71 D1:B6A4             SYSPrintCRLF:
   72 D1:B6A4             	push 	af
   73 D1:B6A4             	ld 		a,13
   74 D1:B6A4             	call 	SYSPrintChar
   75 D1:B6A4             	ld 		a,10
   76 D1:B6A4             	call 	SYSPrintChar
   77 D1:B6A4             	pop 	af
   78 D1:B6A4             	ret
   79 D1:B6A4             
   80 D1:B6A4             ; ***************************************************************************************
   81 D1:B6A4             ;
   82 D1:B6A4             ;									Get time into HL'HL
   83 D1:B6A4             ;
   84 D1:B6A4             ; ***************************************************************************************
   85 D1:B6A4             
   86 D1:B6A4             SYSGetTimer:
   87 D1:B6A4              	in 		a,($00)
   88 D1:B6A4              	ld 		l,a
   89 D1:B6A4              	in 		a,($01)
   90 D1:B6A4              	ld 		h,a
   91 D1:B6A4              	exx
   92 D1:B6A4              	in 		a,($02)
   93 D1:B6A4              	ld 		l,a
   94 D1:B6A4              	in 		a,($03)
   95 D1:B6A4              	ld 		h,a
   96 D1:B6A4              	exx
   97 D1:B6A4             	ret 	
   98 D1:B6A4             	
   99 D1:B6A4             #endif
  100 D1:B6A4 -  -  -  -  
  101 D1:B6A4 -  -  -  -  ; ***************************************************************************************
  102 D1:B6A4 -  -  -  -  ;
  103 D1:B6A4 -  -  -  -  ;									Changes and Updates
  104 D1:B6A4 -  -  -  -  ;
  105 D1:B6A4 -  -  -  -  ; ***************************************************************************************
  106 D1:B6A4 -  -  -  -  ;
  107 D1:B6A4 -  -  -  -  ;		Date			Notes
  108 D1:B6A4 -  -  -  -  ;		==== 			=====
  109 D1:B6A4 -  -  -  -  ;
  110 D1:B6A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B6A4 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B6A4 -  -  -  -  ; ***************************************************************************************
    2 D1:B6A4 -  -  -  -  ; ***************************************************************************************
    3 D1:B6A4 -  -  -  -  ;
    4 D1:B6A4 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B6A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6A4 -  -  -  -  ;		Reviewed :	No
    8 D1:B6A4 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B6A4 -  -  -  -  ;
   10 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   11 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   12 D1:B6A4 -  -  -  -  
   13 D1:B6A4 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B6A4             
   15 D1:B6A4             ; ***************************************************************************************
   16 D1:B6A4             ;
   17 D1:B6A4             ;								Initialise system stuff
   18 D1:B6A4             ;
   19 D1:B6A4             ; ***************************************************************************************
   20 D1:B6A4             
   21 D1:B6A4             SYSInitialise:
   22 D1:B6A4             	ret
   23 D1:B6A4             
   24 D1:B6A4             ; ***************************************************************************************
   25 D1:B6A4             ;
   26 D1:B6A4             ;								Terminate system stuff
   27 D1:B6A4             ;
   28 D1:B6A4             ; ***************************************************************************************
   29 D1:B6A4             
   30 D1:B6A4             SYSTerminate:
   31 D1:B6A4             	ret
   32 D1:B6A4             
   33 D1:B6A4             ; ***************************************************************************************
   34 D1:B6A4             ;
   35 D1:B6A4             ;								Print A character
   36 D1:B6A4             ;
   37 D1:B6A4             ; ***************************************************************************************
   38 D1:B6A4             
   39 D1:B6A4             SYSPrintChar:
   40 D1:B6A4             	ret		
   41 D1:B6A4             
   42 D1:B6A4             ; ***************************************************************************************
   43 D1:B6A4             ;
   44 D1:B6A4             ;									Print Newline
   45 D1:B6A4             ;
   46 D1:B6A4             ; ***************************************************************************************
   47 D1:B6A4             
   48 D1:B6A4             SYSPrintCRLF:
   49 D1:B6A4             	ret
   50 D1:B6A4             
   51 D1:B6A4             ; ***************************************************************************************
   52 D1:B6A4             ;
   53 D1:B6A4             ;									Get time into HL'HL
   54 D1:B6A4             ;
   55 D1:B6A4             ; ***************************************************************************************
   56 D1:B6A4             
   57 D1:B6A4             SYSGetTimer:
   58 D1:B6A4             	ret
   59 D1:B6A4             
   60 D1:B6A4             #endif
   61 D1:B6A4 -  -  -  -  
   62 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   63 D1:B6A4 -  -  -  -  ;
   64 D1:B6A4 -  -  -  -  ;									Changes and Updates
   65 D1:B6A4 -  -  -  -  ;
   66 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   67 D1:B6A4 -  -  -  -  ;
   68 D1:B6A4 -  -  -  -  ;		Date			Notes
   69 D1:B6A4 -  -  -  -  ;		==== 			=====
   70 D1:B6A4 -  -  -  -  ;
   71 D1:B6A4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B6A4 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B6A4 -  -  -  -  ; ***************************************************************************************
    2 D1:B6A4 -  -  -  -  ; ***************************************************************************************
    3 D1:B6A4 -  -  -  -  ;
    4 D1:B6A4 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B6A4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6A4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6A4 -  -  -  -  ;		Reviewed :	No
    8 D1:B6A4 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B6A4 -  -  -  -  ;
   10 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   11 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   12 D1:B6A4 -  -  -  -  
   13 D1:B6A4 -  -  -  -  #ifdef TI84
   14 D1:B6A4 -  -  -  -  
   15 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   16 D1:B6A4 -  -  -  -  ;
   17 D1:B6A4 -  -  -  -  ;								Initialise system stuff
   18 D1:B6A4 -  -  -  -  ;
   19 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   20 D1:B6A4 -  -  -  -  
   21 D1:B6A4 -  -  -  -  SYSInitialise:
   22 D1:B6A4 F3 -  -  -  	di
   23 D1:B6A5 ED 73 C2 B6 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B6AA FD 22 C6 B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B6AF C9 -  -  -  	ret
   26 D1:B6B0 -  -  -  -  
   27 D1:B6B0 -  -  -  -  ; ***************************************************************************************
   28 D1:B6B0 -  -  -  -  ;
   29 D1:B6B0 -  -  -  -  ;								Terminate system stuff
   30 D1:B6B0 -  -  -  -  ;
   31 D1:B6B0 -  -  -  -  ; ***************************************************************************************
   32 D1:B6B0 -  -  -  -  
   33 D1:B6B0 -  -  -  -  SYSTerminate:
   34 D1:B6B0 ED 7B C2 B6 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B6B5 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B6B7 FD 2A C6 B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B6BC FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B6C0 FB -  -  -  	ei
   39 D1:B6C1 C9 -  -  -  	ret 										; and exit.
   40 D1:B6C2 -  -  -  -  
   41 D1:B6C2 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B6C2 00 00 00 00 	.dw 	0,0
   43 D1:B6C6 -  -  -  -  _IYTemp84:
   44 D1:B6C6 00 00 00 00 	.dw 	0,0		
   45 D1:B6CA -  -  -  -  
   46 D1:B6CA -  -  -  -  ; ***************************************************************************************
   47 D1:B6CA -  -  -  -  ;
   48 D1:B6CA -  -  -  -  ;								Print A character
   49 D1:B6CA -  -  -  -  ;
   50 D1:B6CA -  -  -  -  ; ***************************************************************************************
   51 D1:B6CA -  -  -  -  
   52 D1:B6CA -  -  -  -  SYSPrintChar:
   53 D1:B6CA F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B6CB C5 -  -  -  	push 	bc
   55 D1:B6CC D5 -  -  -  	push 	de
   56 D1:B6CD E5 -  -  -  	push 	hl
   57 D1:B6CE DD E5 -  -  	push 	ix
   58 D1:B6D0 FD E5 -  -  	push 	iy
   59 D1:B6D2 D9 -  -  -  	exx
   60 D1:B6D3 C5 -  -  -  	push 	bc
   61 D1:B6D4 D5 -  -  -  	push 	de
   62 D1:B6D5 E5 -  -  -  	push 	hl
   63 D1:B6D6 -  -  -  -  
   64 D1:B6D6 FD 2A C6 B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B6DB CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B6DF F3 -  -  -  	di
   67 D1:B6E0 FD 22 C6 B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B6E5 -  -  -  -  
   69 D1:B6E5 E1 -  -  -  	pop 	hl
   70 D1:B6E6 D1 -  -  -  	pop 	de
   71 D1:B6E7 C1 -  -  -  	pop 	bc
   72 D1:B6E8 D9 -  -  -  	exx
   73 D1:B6E9 FD E1 -  -  	pop 	iy
   74 D1:B6EB DD E1 -  -  	pop 	ix
   75 D1:B6ED E1 -  -  -  	pop 	hl
   76 D1:B6EE D1 -  -  -  	pop 	de
   77 D1:B6EF C1 -  -  -  	pop 	bc
   78 D1:B6F0 F1 -  -  -  	pop 	af
   79 D1:B6F1 C9 -  -  -  	ret		
   80 D1:B6F2 -  -  -  -  
   81 D1:B6F2 -  -  -  -  ; ***************************************************************************************
   82 D1:B6F2 -  -  -  -  ;
   83 D1:B6F2 -  -  -  -  ;									Print Newline
   84 D1:B6F2 -  -  -  -  ;
   85 D1:B6F2 -  -  -  -  ; ***************************************************************************************
   86 D1:B6F2 -  -  -  -  
   87 D1:B6F2 -  -  -  -  SYSPrintCRLF:
   88 D1:B6F2 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B6F3 C5 -  -  -  	push 	bc
   90 D1:B6F4 D5 -  -  -  	push 	de
   91 D1:B6F5 E5 -  -  -  	push 	hl
   92 D1:B6F6 DD E5 -  -  	push 	ix
   93 D1:B6F8 FD E5 -  -  	push 	iy
   94 D1:B6FA D9 -  -  -  	exx
   95 D1:B6FB C5 -  -  -  	push 	bc
   96 D1:B6FC D5 -  -  -  	push 	de
   97 D1:B6FD E5 -  -  -  	push 	hl
   98 D1:B6FE -  -  -  -  
   99 D1:B6FE FD 2A C6 B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B703 CD F0 07 02 	call 	_newline
  101 D1:B707 F3 -  -  -  	di
  102 D1:B708 FD 22 C6 B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B70D -  -  -  -  
  104 D1:B70D E1 -  -  -  	pop 	hl
  105 D1:B70E D1 -  -  -  	pop 	de
  106 D1:B70F C1 -  -  -  	pop 	bc
  107 D1:B710 D9 -  -  -  	exx
  108 D1:B711 FD E1 -  -  	pop 	iy
  109 D1:B713 DD E1 -  -  	pop 	ix
  110 D1:B715 E1 -  -  -  	pop 	hl
  111 D1:B716 D1 -  -  -  	pop 	de
  112 D1:B717 C1 -  -  -  	pop 	bc
  113 D1:B718 F1 -  -  -  	pop 	af
  114 D1:B719 C9 -  -  -  	ret
  115 D1:B71A -  -  -  -  
  116 D1:B71A -  -  -  -  ; ***************************************************************************************
  117 D1:B71A -  -  -  -  ;
  118 D1:B71A -  -  -  -  ;									Get time into HL'HL
  119 D1:B71A -  -  -  -  ;
  120 D1:B71A -  -  -  -  ; ***************************************************************************************
  121 D1:B71A -  -  -  -  
  122 D1:B71A -  -  -  -  SYSGetTimer:
  123 D1:B71A 21 34 12 00 	ld 		hl,$1234
  124 D1:B71E D9 -  -  -  	exx
  125 D1:B71F 21 78 56 00 	ld 		hl,$5678
  126 D1:B723 D9 -  -  -  	exx
  127 D1:B724 C9 -  -  -  	ret
  128 D1:B725 -  -  -  -  
  129 D1:B725 -  -  -  -  #endif
  130 D1:B725 -  -  -  -  
  131 D1:B725 -  -  -  -  ; ***************************************************************************************
  132 D1:B725 -  -  -  -  ;
  133 D1:B725 -  -  -  -  ;									Changes and Updates
  134 D1:B725 -  -  -  -  ;
  135 D1:B725 -  -  -  -  ; ***************************************************************************************
  136 D1:B725 -  -  -  -  ;
  137 D1:B725 -  -  -  -  ;		Date			Notes
  138 D1:B725 -  -  -  -  ;		==== 			=====
  139 D1:B725 -  -  -  -  ;
  140 D1:B725 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B725 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B725 -  -  -  -  ; ***************************************************************************************
    2 D1:B725 -  -  -  -  ; ***************************************************************************************
    3 D1:B725 -  -  -  -  ;
    4 D1:B725 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B725 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B725 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B725 -  -  -  -  ;		Reviewed :	No
    8 D1:B725 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B725 -  -  -  -  ;
   10 D1:B725 -  -  -  -  ; ***************************************************************************************
   11 D1:B725 -  -  -  -  ; ***************************************************************************************
   12 D1:B725 -  -  -  -  
   13 D1:B725 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 22 01 00 BB 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 13 02 
              00 BB 3F 0B 
              53 65 65 64 
              20 3D 20 38 
              30 39 33 0D 
              80 0B 03 00 
              14 21 8F 8A 
              47 6B 54 80 
              0D 04 00 10 
              14 20 1C 14 
              8F 48 66 50 
              80 0A 05 00 
              03 8F 8A 42 
              42 78 80 0C 
              06 00 06 1B 
              18 0B 8F 56 
              69 74 80 0C 
              07 00 15 02 
              03 8F 8A 53 
              7B 64 80 09 
              08 00 07 8F 
              49 7C 53 80 
              0A 09 00 11 
              19 8F 4E 68 
              43 80 09 0A 
              00 02 8F 47 
              5D 43 80 0E 
              0B 00 19 1B 
              0F 1D 17 05 
              8F 46 4C 5B 
              80 0C 0C 00 
              10 1C 16 8F 
              8A 56 4D 64 
              80 0E 0D 00 
              01 17 21 01 
              17 25 8F 55 
              6B 53 80 0C 
              0E 00 09 22 
              1F 8F 8A 4A 
              57 7E 80 0B 
              0F 00 00 0F 
              07 8F 45 71 
              60 80 0E 10 
              00 11 15 1B 
              25 18 8F 8A 
              43 5B 6A 80 
              0D 11 00 14 
              25 23 0E 03 
              8F 4A 64 70 
              80 09 12 00 
              18 8F 8A 5C 
              64 80 09 13 
              00 10 8F 55 
              5D 74 80 0A 
              14 00 04 8F 
              8A 41 5A 65 
              80 0A 15 00 
              05 8F 8A 4F 
              7B 71 80 0A 
              16 00 0E 0B 
              8F 4D 7E 6D 
              80 0D 17 00 
              13 1A 16 22 
              16 8F 56 63 
              75 80 0C 18 
              00 11 24 18 
              1F 8F 51 52 
              72 80 0E 19 
              00 0C 17 1D 
              06 04 8F 8A 
              43 66 7D 80 
              0B 1A 00 18 
              09 8F 8A 57 
              40 4D 80 0E 
              1B 00 07 19 
              12 04 09 22 
              8F 8A 69 6F 
              80 0B 1C 00 
              14 14 07 8F 
              41 69 70 80 
              0A 1D 00 14 
              00 8F 57 4F 
              59 80 0E 1E 
              00 03 04 11 
              22 13 22 8F 
              49 4E 61 80 
              0B 1F 00 0A 
              1C 0F 8F 4C 
              43 42 80 0A 
              20 00 16 8F 
              8A 4D 7D 7B 
              80 0F 21 00 
              03 23 13 25 
              17 1D 8F 8A 
              45 68 42 80 
              0E 22 00 01 
              1A 23 0E 08 
              8F 8A 48 43 
              6D 80 0A 23 
              00 14 17 8F 
              4F 41 69 80 
              0B 24 00 18 
              0F 8F 8A 4A 
              6E 5D 80 0D 
              25 00 0E 10 
              0F 13 8F 8A 
              4A 6B 55 80 
              0D 26 00 0D 
              14 0C 03 0C 
              8F 41 5D 73 
              80 0D 27 00 
              0B 1D 1D 00 
              05 8F 46 7C 
              73 80 0D 28 
              00 05 0F 19 
              0A 0E 8F 49 
              5A 68 80 0B 
              29 00 0C 24 
              02 8F 4A 49 
              6E 80 0C 2A 
              00 17 07 04 
              04 8F 49 48 
              71 80 0C 2B 
              00 06 1B 18 
              0B 8F 53 50 
              53 80 0E 2C 
              00 10 14 20 
              1C 14 8F 8A 
              48 58 4B 80 
              0E 2D 00 11 
              15 1B 25 18 
              8F 8A 4D 70 
              7C 80 0D 2E 
              00 14 25 23 
              0E 03 8F 57 
              51 70 80 0B 
              2F 00 14 21 
              8F 8A 52 65 
              6C 80 0A 30 
              00 09 22 1F 
              8F 6C 78 80 
              0D 31 00 05 
              0F 19 0A 0E 
              8F 42 74 5A 
              80 0C 32 00 
              09 22 1F 8F 
              8A 44 73 59 
              80 0B 33 00 
              0A 1C 0F 8F 
              42 47 65 80 
              0A 34 00 18 
              09 8F 44 55 
              47 80 0A 35 
              00 0E 0B 8F 
              47 7B 5A 80 
              0B 36 00 09 
              22 1F 8F 58 
              49 51 80 0B 
              37 00 14 21 
              8F 8A 53 4D 
              74 80 0F 38 
              00 01 17 21 
              01 17 25 8F 
              8A 43 74 7F 
              80 0D 39 00 
              13 1A 16 22 
              16 8F 50 41 
              6D 80 09 3A 
              00 02 8F 41 
              48 4D 80 0D 
              3B 00 0E 10 
              0F 13 8F 8A 
              4F 7F 5C 80 
              0E 3C 00 19 
              1B 0F 1D 17 
              05 8F 50 4E 
              5F 80 0E 3D 
              00 01 1A 23 
              0E 08 8F 8A 
              47 76 7A 80 
              0B 3E 00 18 
              09 8F 8A 55 
              49 53 80 0A 
              3F 00 14 00 
              8F 49 6F 6D 
              80 0A 40 00 
              11 19 8F 4F 
              51 49 80 0A 
              41 00 07 8F 
              8A 47 61 77 
              80 0C 42 00 
              14 14 07 8F 
              8A 55 40 7D 
              80 0A 43 00 
              03 8F 8A 4C 
              68 55 80 0A 
              44 00 14 00 
              8F 8A 43 77 
              80 0E 45 00 
              11 15 1B 25 
              18 8F 8A 4C 
              6F 4A 80 0B 
              46 00 18 09 
              8F 8A 44 69 
              41 80 0D 47 
              00 0E 10 0F 
              13 8F 8A 56 
              6D 7C 80 0B 
              48 00 09 22 
              1F 8F 43 5A 
              6E 80 0B 49 
              00 14 00 8F 
              8A 57 79 51 
              80 0F 4A 00 
              19 1B 0F 1D 
              17 05 8F 8A 
              52 7B 6D 80 
              0E 4B 00 01 
              1A 23 0E 08 
              8F 8A 47 5D 
              7F 80 0D 4C 
              00 17 07 04 
              04 8F 8A 46 
              71 48 80 0B 
              4D 00 0A 1C 
              0F 8F 50 5C 
              6C 80 0B 4E 
              00 15 02 03 
              8F 50 56 4D 
              80 0E 4F 00 
              05 0F 19 0A 
              0E 8F 8A 45 
              7C 50 80 0A 
              50 00 14 00 
              8F 8A 42 72 
              80 0C 51 00 
              11 24 18 1F 
              8F 56 69 71 
              80 0F 52 00 
              19 1B 0F 1D 
              17 05 8F 8A 
              49 61 72 80 
              0F 53 00 01 
              17 21 01 17 
              25 8F 8A 44 
              4E 43 80 0A 
              54 00 18 09 
              8F 43 70 70 
              80 0C 55 00 
              09 22 1F 8F 
              8A 4E 54 75 
              80 0F 56 00 
              03 04 11 22 
              13 22 8F 8A 
              53 7C 5F 80 
              0A 57 00 16 
              8F 8A 48 68 
              4E 80 0C 58 
              00 0C 24 02 
              8F 8A 51 47 
              7E 80 0A 59 
              00 18 09 8F 
              53 57 65 80 
              0D 5A 00 14 
              25 23 0E 03 
              8F 4B 52 48 
              80 0E 5B 00 
              10 14 20 1C 
              14 8F 8A 53 
              45 77 80 0B 
              5C 00 14 14 
              07 8F 55 4D 
              69 80 0D 5D 
              00 0D 14 0C 
              03 0C 8F 56 
              58 59 80 0B 
              5E 00 15 02 
              03 8F 46 62 
              44 80 0D 5F 
              00 10 14 20 
              1C 14 8F 4F 
              75 6A 80 09 
              60 00 18 8F 
              48 53 6D 80 
              0C 61 00 00 
              0F 07 8F 8A 
              56 73 5D 80 
              0F 62 00 03 
              04 11 22 13 
              22 8F 8A 4B 
              7E 62 80 09 
              63 00 05 8F 
              57 56 6A 80 
              0D 64 00 11 
              24 18 1F 8F 
              8A 42 74 42 
              80 0B 65 00 
              00 0F 07 8F 
              42 59 79 80 
              0A 66 00 16 
              8F 8A 43 48 
              6E 80 0E 67 
              00 0C 17 1D 
              06 04 8F 8A 
              55 53 7E 80 
              0E 68 00 0C 
              17 1D 06 04 
              8F 8A 49 6C 
              5C 80 0D 69 
              00 17 07 04 
              04 8F 8A 47 
              41 71 80 0D 
              6A 00 05 0F 
              19 0A 0E 8F 
              54 67 47 80 
              0F 6B 00 19 
              1B 0F 1D 17 
              05 8F 8A 56 
              4D 5E 80 0B 
              6C 00 06 1B 
              18 0B 8F 74 
              68 80 0B 6D 
              00 15 02 03 
              8F 46 67 59 
              80 0A 6E 00 
              18 09 8F 8A 
              57 4C 80 0F 
              6F 00 01 17 
              21 01 17 25 
              8F 8A 50 60 
              66 80 0D 70 
              00 0B 1D 1D 
              00 05 8F 56 
              62 6D 80 0A 
              71 00 11 19 
              8F 57 68 57 
              80 0B 72 00 
              14 17 8F 8A 
              41 4F 44 80 
              0A 73 00 04 
              8F 8A 56 65 
              77 80 0C 74 
              00 11 24 18 
              1F 8F 58 59 
              61 80 0F 75 
              00 01 17 21 
              01 17 25 8F 
              8A 41 48 5E 
              80 0C 76 00 
              0C 24 02 8F 
              8A 45 44 7A 
              80 0B 77 00 
              0E 0B 8F 8A 
              50 4A 7D 80 
              0E 78 00 0C 
              17 1D 06 04 
              8F 8A 48 72 
              78 80 0A 79 
              00 05 8F 8A 
              54 73 40 80 
              0A 7A 00 02 
              8F 8A 43 50 
              5F 80 0D 7B 
              00 0D 14 0C 
              03 0C 8F 4F 
              60 48 80 0D 
              7C 00 06 1B 
              18 0B 8F 8A 
              44 69 46 80 
              09 7D 00 05 
              8F 4A 5A 4E 
              80 09 7E 00 
              04 8F 48 71 
              5D 80 0E 7F 
              00 03 23 13 
              25 17 1D 8F 
              8A 72 5A 80 
              0B 80 00 15 
              02 03 8F 54 
              43 43 80 0E 
              81 00 0B 1D 
              1D 00 05 8F 
              8A 4D 42 43 
              80 0D 82 00 
              01 1A 23 0E 
              08 8F 4F 62 
              72 80 0D 83 
              00 10 14 20 
              1C 14 8F 43 
              78 71 80 0B 
              84 00 0C 24 
              02 8F 4B 6F 
              58 80 0C 85 
              00 10 14 20 
              1C 14 8F 7A 
              62 80 0B 86 
              00 00 0F 07 
              8F 4E 55 4D 
              80 0B 87 00 
              11 19 8F 8A 
              55 78 4D 80 
              0D 88 00 0E 
              10 0F 13 8F 
              8A 42 58 58 
              80 0E 89 00 
              14 25 23 0E 
              03 8F 8A 54 
              45 79 80 0E 
              8A 00 01 1A 
              23 0E 08 8F 
              8A 56 50 6B 
              80 09 8B 00 
              07 8F 47 4F 
              76 80 0B 8C 
              00 14 14 07 
              8F 8A 55 65 
              80 09 8D 00 
              05 8F 4F 49 
              43 80 0B 8E 
              00 14 17 8F 
              8A 4F 79 4C 
              80 0C 8F 00 
              10 1C 16 8F 
              8A 50 54 46 
              80 0F 90 00 
              07 19 12 04 
              09 22 8F 8A 
              4D 45 54 80 
              0F 91 00 01 
              17 21 01 17 
              25 8F 8A 41 
              75 44 80 0F 
              92 00 19 1B 
              0F 1D 17 05 
              8F 8A 54 65 
              7E 80 0C 93 
              00 11 24 18 
              1F 8F 47 6F 
              71 80 0A 94 
              00 02 8F 8A 
              44 5B 71 80 
              0E 95 00 0D 
              14 0C 03 0C 
              8F 8A 58 50 
              4F 80 0E 96 
              00 0D 14 0C 
              03 0C 8F 8A 
              4B 45 53 80 
              0E 97 00 11 
              15 1B 25 18 
              8F 8A 48 6E 
              7D 80 0D 98 
              00 0E 10 0F 
              13 8F 8A 4E 
              62 58 80 0E 
              99 00 13 1A 
              16 22 16 8F 
              8A 50 50 56 
              80 0A 9A 00 
              02 8F 8A 44 
              4A 60 80 0E 
              9B 00 11 15 
              1B 25 18 8F 
              8A 45 49 73 
              80 0E 9C 00 
              0D 14 0C 03 
              0C 8F 8A 51 
              57 7E 80 0B 
              9D 00 0A 1C 
              0F 8F 4A 73 
              67 80 0B 9E 
              00 14 14 07 
              8F 47 4C 66 
              80 0D 9F 00 
              0B 1D 1D 00 
              05 8F 58 47 
              72 80 0B A0 
              00 10 1C 16 
              8F 47 46 40 
              80 0E A1 00 
              03 23 13 25 
              17 1D 8F 46 
              61 6A 80 0B 
              A2 00 18 09 
              8F 8A 44 52 
              48 80 0A A3 
              00 10 8F 8A 
              57 5E 6E 80 
              0B A4 00 14 
              00 8F 8A 47 
              71 4E 80 0B 
              A5 00 0E 0B 
              8F 8A 4A 49 
              45 80 09 A6 
              00 14 17 8F 
              62 6A 80 0C 
              A7 00 06 1B 
              18 0B 8F 48 
              77 63 80 0A 
              A8 00 18 09 
              8F 53 7E 6C 
              80 0F A9 00 
              03 04 11 22 
              13 22 8F 8A 
              51 5D 60 80 
              0D AA 00 0B 
              1D 1D 00 05 
              8F 49 68 51 
              80 0D AB 00 
              14 25 23 0E 
              03 8F 42 4F 
              6D 80 0E AC 
              00 10 14 20 
              1C 14 8F 8A 
              56 40 63 80 
              09 AD 00 14 
              00 8F 4D 64 
              80 0A AE 00 
              14 21 8F 4C 
              7A 6F 80 0E 
              AF 00 03 23 
              13 25 17 1D 
              8F 56 62 6D 
              80 0B B0 00 
              18 0F 8F 8A 
              42 4D 4C 80 
              0E B1 00 05 
              0F 19 0A 0E 
              8F 8A 44 7C 
              68 80 0E B2 
              00 07 19 12 
              04 09 22 8F 
              50 5D 45 80 
              0B B3 00 00 
              0F 07 8F 41 
              6B 41 80 0A 
              B4 00 18 09 
              8F 54 61 57 
              80 0C B5 00 
              00 0F 07 8F 
              8A 4B 4E 6B 
              80 0D B6 00 
              17 07 04 04 
              8F 8A 4C 41 
              50 80 0C B7 
              00 11 24 18 
              1F 8F 47 77 
              46 80 0A B8 
              00 14 17 8F 
              43 4D 67 80 
              0D B9 00 17 
              07 04 04 8F 
              8A 55 52 74 
              80 0E BA 00 
              01 1A 23 0E 
              08 8F 8A 48 
              44 57 80 0A 
              BB 00 02 8F 
              8A 48 7B 50 
              80 0A BC 00 
              03 8F 8A 4F 
              76 77 80 0B 
              BD 00 00 0F 
              07 8F 49 45 
              76 80 0E BE 
              00 0D 14 0C 
              03 0C 8F 8A 
              47 44 67 80 
              09 BF 00 04 
              8F 53 5E 68 
              80 0C C0 00 
              11 24 18 1F 
              8F 47 46 7A 
              80 0E C1 00 
              01 1A 23 0E 
              08 8F 8A 44 
              71 46 80 0A 
              C2 00 10 1C 
              16 8F 70 79 
              80 0F C3 00 
              03 23 13 25 
              17 1D 8F 8A 
              54 4E 57 80 
              0F C4 00 01 
              17 21 01 17 
              25 8F 8A 56 
              53 5A 80 0A 
              C5 00 14 21 
              8F 41 69 49 
              80 0D C6 00 
              11 24 18 1F 
              8F 8A 4E 58 
              42 80 0E C7 
              00 03 04 11 
              22 13 22 8F 
              51 7B 41 80 
              09 C8 00 04 
              8F 45 59 62 
              80 0B C9 00 
              14 21 8F 8A 
              57 6A 66 80 
              0C CA 00 15 
              02 03 8F 8A 
              42 4A 63 80 
              0C CB 00 17 
              07 04 04 8F 
              4A 61 45 80 
              0D CC 00 0B 
              1D 1D 00 05 
              8F 8A 72 59 
              80 0D CD 00 
              0C 17 1D 06 
              04 8F 45 4C 
              69 80 0D CE 
              00 17 07 04 
              04 8F 8A 4F 
              50 6D 80 0D 
              CF 00 0B 1D 
              1D 00 05 8F 
              4C 60 73 80 
              0E D0 00 0C 
              17 1D 06 04 
              8F 8A 54 6D 
              65 80 0B D1 
              00 14 14 07 
              8F 50 6A 72 
              80 0C D2 00 
              14 14 07 8F 
              8A 55 7C 75 
              80 09 D3 00 
              10 8F 52 4C 
              68 80 0C D4 
              00 15 02 03 
              8F 8A 57 67 
              47 80 0C D5 
              00 14 14 07 
              8F 8A 53 5F 
              49 80 0A D6 
              00 16 8F 8A 
              49 7D 66 80 
              0C D7 00 11 
              24 18 1F 8F 
              46 5F 7C 80 
              0A D8 00 07 
              8F 8A 47 70 
              67 80 0B D9 
              00 0C 24 02 
              8F 50 6C 49 
              80 0D DA 00 
              10 14 20 1C 
              14 8F 44 51 
              53 80 0A DB 
              00 18 0F 8F 
              4B 53 7E 80 
              0D DC 00 17 
              07 04 04 8F 
              8A 43 66 5D 
              80 0A DD 00 
              02 8F 8A 48 
              5C 4E 80 0A 
              DE 00 14 17 
              8F 42 41 43 
              80 0E DF 00 
              11 15 1B 25 
              18 8F 8A 4B 
              6A 6F 80 0F 
              E0 00 07 19 
              12 04 09 22 
              8F 8A 49 60 
              4A 80 0B E1 
              00 18 09 8F 
              8A 51 68 5E 
              80 0A E2 00 
              18 0F 8F 4A 
              49 7B 80 0C 
              E3 00 11 24 
              18 1F 8F 53 
              4D 77 80 0A 
              E4 00 18 0F 
              8F 44 52 6E 
              80 0B E5 00 
              18 09 8F 8A 
              42 4A 47 80 
              0D E6 00 01 
              1A 23 0E 08 
              8F 4E 53 4A 
              80 0C E7 00 
              14 14 07 8F 
              8A 4D 7F 6C 
              80 0D E8 00 
              05 0F 19 0A 
              0E 8F 46 69 
              65 80 0D E9 
              00 05 0F 19 
              0A 0E 8F 41 
              6C 71 80 0B 
              EA 00 14 00 
              8F 8A 47 61 
              7B 80 0E EB 
              00 03 23 13 
              25 17 1D 8F 
              43 43 6F 80 
              0B EC 00 09 
              22 1F 8F 4D 
              41 79 80 0A 
              ED 00 11 19 
              8F 50 4C 6A 
              80 0B EE 00 
              14 17 8F 8A 
              44 44 4F 80 
              0F EF 00 07 
              19 12 04 09 
              22 8F 8A 42 
              7E 44 80 09 
              F0 00 05 8F 
              43 61 7C 80 
              0B F1 00 14 
              17 8F 8A 49 
              63 7E 80 0A 
              F2 00 10 8F 
              8A 49 4C 70 
              80 0C F3 00 
              C7 14 21 8F 
              8A 57 6A 66 
              80 0E F4 00 
              C7 10 14 20 
              1C 14 8F 44 
              51 53 80 0B 
              F5 00 C7 03 
              8F 8A 4F 76 
              77 80 0D F6 
              00 C7 06 1B 
              18 0B 8F 48 
              77 63 80 0D 
              F7 00 C7 15 
              02 03 8F 8A 
              57 67 47 80 
              0B F8 00 C7 
              07 8F 8A 47 
              70 67 80 0B 
              F9 00 C7 11 
              19 8F 50 4C 
              6A 80 0B FA 
              00 C7 02 8F 
              8A 48 5C 4E 
              80 10 FB 00 
              C7 19 1B 0F 
              1D 17 05 8F 
              8A 54 65 7E 
              80 0B FC 00 
              C7 10 1C 16 
              8F 70 79 80 
              10 FD 00 C7 
              01 17 21 01 
              17 25 8F 8A 
              56 53 5A 80 
              0C FE 00 C7 
              09 22 1F 8F 
              4D 41 79 80 
              0C FF 00 C7 
              00 0F 07 8F 
              49 45 76 80 
              0F 00 01 C7 
              11 15 1B 25 
              18 8F 8A 4B 
              6A 6F 80 0E 
              01 01 C7 14 
              25 23 0E 03 
              8F 42 4F 6D 
              80 0A 02 01 
              C7 18 8F 48 
              53 6D 80 0B 
              03 01 C7 10 
              8F 8A 49 4C 
              70 80 0A 04 
              01 C7 04 8F 
              45 59 62 80 
              0A 05 01 C7 
              05 8F 43 61 
              7C 80 0C 06 
              01 C7 0E 0B 
              8F 8A 4A 49 
              45 80 0F 07 
              01 C7 13 1A 
              16 22 16 8F 
              8A 50 50 56 
              80 0D 08 01 
              C7 11 24 18 
              1F 8F 53 4D 
              77 80 0F 09 
              01 C7 0C 17 
              1D 06 04 8F 
              8A 54 6D 65 
              80 0C 0A 01 
              C7 18 09 8F 
              8A 42 4A 47 
              80 10 0B 01 
              C7 07 19 12 
              04 09 22 8F 
              8A 42 7E 44 
              80 0D 0C 01 
              C7 14 14 07 
              8F 8A 4D 7F 
              6C 80 0C 0D 
              01 C7 14 00 
              8F 8A 47 61 
              7B 80 0F 0E 
              01 C7 03 04 
              11 22 13 22 
              8F 51 7B 41 
              80 0C 0F 01 
              C7 0A 1C 0F 
              8F 4A 73 67 
              80 0B 10 01 
              C7 16 8F 8A 
              49 7D 66 80 
              0F 11 01 C7 
              03 23 13 25 
              17 1D 8F 43 
              43 6F 80 0E 
              12 01 C7 01 
              1A 23 0E 08 
              8F 4E 53 4A 
              80 0C 13 01 
              C7 14 17 8F 
              8A 49 63 7E 
              80 0B 14 01 
              C7 18 0F 8F 
              44 52 6E 80 
              0E 15 01 C7 
              0E 10 0F 13 
              8F 8A 4E 62 
              58 80 0F 16 
              01 C7 0D 14 
              0C 03 0C 8F 
              8A 47 44 67 
              80 0E 17 01 
              C7 0B 1D 1D 
              00 05 8F 4C 
              60 73 80 0E 
              18 01 C7 05 
              0F 19 0A 0E 
              8F 41 6C 71 
              80 0C 19 01 
              C7 0C 24 02 
              8F 50 6C 49 
              80 0E 1A 01 
              C7 17 07 04 
              04 8F 8A 43 
              66 5D 80 14 
              1B 01 BE 3F 
              0C 4F 6B 20 
              53 65 65 64 
              20 38 30 39 
              33 0D 80 00 	.db	$22,$01,$00,$bb,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$02,$00,$bb,$3f,$0b,$53,$65,$65,$64,$20,$3d,$20,$38,$30,$39,$33,$0d,$80,$0b,$03,$00,$14,$21,$8f,$8a,$47,$6b,$54,$80,$0d,$04,$00,$10,$14,$20,$1c,$14,$8f,$48,$66,$50,$80,$0a,$05,$00,$03,$8f,$8a,$42,$42,$78,$80,$0c,$06,$00,$06,$1b,$18,$0b,$8f,$56,$69,$74,$80,$0c,$07,$00,$15,$02,$03,$8f,$8a,$53,$7b,$64,$80,$09,$08,$00,$07,$8f,$49,$7c,$53,$80,$0a,$09,$00,$11,$19,$8f,$4e,$68,$43,$80,$09,$0a,$00,$02,$8f,$47,$5d,$43,$80,$0e,$0b,$00,$19,$1b,$0f,$1d,$17,$05,$8f,$46,$4c,$5b,$80,$0c,$0c,$00,$10,$1c,$16,$8f,$8a,$56,$4d,$64,$80,$0e,$0d,$00,$01,$17,$21,$01,$17,$25,$8f,$55,$6b,$53,$80,$0c,$0e,$00,$09,$22,$1f,$8f,$8a,$4a,$57,$7e,$80,$0b,$0f,$00,$00,$0f,$07,$8f,$45,$71,$60,$80,$0e,$10,$00,$11,$15,$1b,$25,$18,$8f,$8a,$43,$5b,$6a,$80,$0d,$11,$00,$14,$25,$23,$0e,$03,$8f,$4a,$64,$70,$80,$09,$12,$00,$18,$8f,$8a,$5c,$64,$80,$09,$13,$00,$10,$8f,$55,$5d,$74,$80,$0a,$14,$00,$04,$8f,$8a,$41,$5a,$65,$80,$0a,$15,$00,$05,$8f,$8a,$4f,$7b,$71,$80,$0a,$16,$00,$0e,$0b,$8f,$4d,$7e,$6d,$80,$0d,$17,$00,$13,$1a,$16,$22,$16,$8f,$56,$63,$75,$80,$0c,$18,$00,$11,$24,$18,$1f,$8f,$51,$52,$72,$80,$0e,$19,$00,$0c,$17,$1d,$06,$04,$8f,$8a,$43,$66,$7d,$80,$0b,$1a,$00,$18,$09,$8f,$8a,$57,$40,$4d,$80,$0e,$1b,$00,$07,$19,$12,$04,$09,$22,$8f,$8a,$69,$6f,$80,$0b,$1c,$00,$14,$14,$07,$8f,$41,$69,$70,$80,$0a,$1d,$00,$14,$00,$8f,$57,$4f,$59,$80,$0e,$1e,$00,$03,$04,$11,$22,$13,$22,$8f,$49,$4e,$61,$80,$0b,$1f,$00,$0a,$1c,$0f,$8f,$4c,$43,$42,$80,$0a,$20,$00,$16,$8f,$8a,$4d,$7d,$7b,$80,$0f,$21,$00,$03,$23,$13,$25,$17,$1d,$8f,$8a,$45,$68,$42,$80,$0e,$22,$00,$01,$1a,$23,$0e,$08,$8f,$8a,$48,$43,$6d,$80,$0a,$23,$00,$14,$17,$8f,$4f,$41,$69,$80,$0b,$24,$00,$18,$0f,$8f,$8a,$4a,$6e,$5d,$80,$0d,$25,$00,$0e,$10,$0f,$13,$8f,$8a,$4a,$6b,$55,$80,$0d,$26,$00,$0d,$14,$0c,$03,$0c,$8f,$41,$5d,$73,$80,$0d,$27,$00,$0b,$1d,$1d,$00,$05,$8f,$46,$7c,$73,$80,$0d,$28,$00,$05,$0f,$19,$0a,$0e,$8f,$49,$5a,$68,$80,$0b,$29,$00,$0c,$24,$02,$8f,$4a,$49,$6e,$80,$0c,$2a,$00,$17,$07,$04,$04,$8f,$49,$48,$71,$80,$0c,$2b,$00,$06,$1b,$18,$0b,$8f,$53,$50,$53,$80,$0e,$2c,$00,$10,$14,$20,$1c,$14,$8f,$8a,$48,$58,$4b,$80,$0e,$2d,$00,$11,$15,$1b,$25,$18,$8f,$8a,$4d,$70,$7c,$80,$0d,$2e,$00,$14,$25,$23,$0e,$03,$8f,$57,$51,$70,$80,$0b,$2f,$00,$14,$21,$8f,$8a,$52,$65,$6c,$80,$0a,$30,$00,$09,$22,$1f,$8f,$6c,$78,$80,$0d,$31,$00,$05,$0f,$19,$0a,$0e,$8f,$42,$74,$5a,$80,$0c,$32,$00,$09,$22,$1f,$8f,$8a,$44,$73,$59,$80,$0b,$33,$00,$0a,$1c,$0f,$8f,$42,$47,$65,$80,$0a,$34,$00,$18,$09,$8f,$44,$55,$47,$80,$0a,$35,$00,$0e,$0b,$8f,$47,$7b,$5a,$80,$0b,$36,$00,$09,$22,$1f,$8f,$58,$49,$51,$80,$0b,$37,$00,$14,$21,$8f,$8a,$53,$4d,$74,$80,$0f,$38,$00,$01,$17,$21,$01,$17,$25,$8f,$8a,$43,$74,$7f,$80,$0d,$39,$00,$13,$1a,$16,$22,$16,$8f,$50,$41,$6d,$80,$09,$3a,$00,$02,$8f,$41,$48,$4d,$80,$0d,$3b,$00,$0e,$10,$0f,$13,$8f,$8a,$4f,$7f,$5c,$80,$0e,$3c,$00,$19,$1b,$0f,$1d,$17,$05,$8f,$50,$4e,$5f,$80,$0e,$3d,$00,$01,$1a,$23,$0e,$08,$8f,$8a,$47,$76,$7a,$80,$0b,$3e,$00,$18,$09,$8f,$8a,$55,$49,$53,$80,$0a,$3f,$00,$14,$00,$8f,$49,$6f,$6d,$80,$0a,$40,$00,$11,$19,$8f,$4f,$51,$49,$80,$0a,$41,$00,$07,$8f,$8a,$47,$61,$77,$80,$0c,$42,$00,$14,$14,$07,$8f,$8a,$55,$40,$7d,$80,$0a,$43,$00,$03,$8f,$8a,$4c,$68,$55,$80,$0a,$44,$00,$14,$00,$8f,$8a,$43,$77,$80,$0e,$45,$00,$11,$15,$1b,$25,$18,$8f,$8a,$4c,$6f,$4a,$80,$0b,$46,$00,$18,$09,$8f,$8a,$44,$69,$41,$80,$0d,$47,$00,$0e,$10,$0f,$13,$8f,$8a,$56,$6d,$7c,$80,$0b,$48,$00,$09,$22,$1f,$8f,$43,$5a,$6e,$80,$0b,$49,$00,$14,$00,$8f,$8a,$57,$79,$51,$80,$0f,$4a,$00,$19,$1b,$0f,$1d,$17,$05,$8f,$8a,$52,$7b,$6d,$80,$0e,$4b,$00,$01,$1a,$23,$0e,$08,$8f,$8a,$47,$5d,$7f,$80,$0d,$4c,$00,$17,$07,$04,$04,$8f,$8a,$46,$71,$48,$80,$0b,$4d,$00,$0a,$1c,$0f,$8f,$50,$5c,$6c,$80,$0b,$4e,$00,$15,$02,$03,$8f,$50,$56,$4d,$80,$0e,$4f,$00,$05,$0f,$19,$0a,$0e,$8f,$8a,$45,$7c,$50,$80,$0a,$50,$00,$14,$00,$8f,$8a,$42,$72,$80,$0c,$51,$00,$11,$24,$18,$1f,$8f,$56,$69,$71,$80,$0f,$52,$00,$19,$1b,$0f,$1d,$17,$05,$8f,$8a,$49,$61,$72,$80,$0f,$53,$00,$01,$17,$21,$01,$17,$25,$8f,$8a,$44,$4e,$43,$80,$0a,$54,$00,$18,$09,$8f,$43,$70,$70,$80,$0c,$55,$00,$09,$22,$1f,$8f,$8a,$4e,$54,$75,$80,$0f,$56,$00,$03,$04,$11,$22,$13,$22,$8f,$8a,$53,$7c,$5f,$80,$0a,$57,$00,$16,$8f,$8a,$48,$68,$4e,$80,$0c,$58,$00,$0c,$24,$02,$8f,$8a,$51,$47,$7e,$80,$0a,$59,$00,$18,$09,$8f,$53,$57,$65,$80,$0d,$5a,$00,$14,$25,$23,$0e,$03,$8f,$4b,$52,$48,$80,$0e,$5b,$00,$10,$14,$20,$1c,$14,$8f,$8a,$53,$45,$77,$80,$0b,$5c,$00,$14,$14,$07,$8f,$55,$4d,$69,$80,$0d,$5d,$00,$0d,$14,$0c,$03,$0c,$8f,$56,$58,$59,$80,$0b,$5e,$00,$15,$02,$03,$8f,$46,$62,$44,$80,$0d,$5f,$00,$10,$14,$20,$1c,$14,$8f,$4f,$75,$6a,$80,$09,$60,$00,$18,$8f,$48,$53,$6d,$80,$0c,$61,$00,$00,$0f,$07,$8f,$8a,$56,$73,$5d,$80,$0f,$62,$00,$03,$04,$11,$22,$13,$22,$8f,$8a,$4b,$7e,$62,$80,$09,$63,$00,$05,$8f,$57,$56,$6a,$80,$0d,$64,$00,$11,$24,$18,$1f,$8f,$8a,$42,$74,$42,$80,$0b,$65,$00,$00,$0f,$07,$8f,$42,$59,$79,$80,$0a,$66,$00,$16,$8f,$8a,$43,$48,$6e,$80,$0e,$67,$00,$0c,$17,$1d,$06,$04,$8f,$8a,$55,$53,$7e,$80,$0e,$68,$00,$0c,$17,$1d,$06,$04,$8f,$8a,$49,$6c,$5c,$80,$0d,$69,$00,$17,$07,$04,$04,$8f,$8a,$47,$41,$71,$80,$0d,$6a,$00,$05,$0f,$19,$0a,$0e,$8f,$54,$67,$47,$80,$0f,$6b,$00,$19,$1b,$0f,$1d,$17,$05,$8f,$8a,$56,$4d,$5e,$80,$0b,$6c,$00,$06,$1b,$18,$0b,$8f,$74,$68,$80,$0b,$6d,$00,$15,$02,$03,$8f,$46,$67,$59,$80,$0a,$6e,$00,$18,$09,$8f,$8a,$57,$4c,$80,$0f,$6f,$00,$01,$17,$21,$01,$17,$25,$8f,$8a,$50,$60,$66,$80,$0d,$70,$00,$0b,$1d,$1d,$00,$05,$8f,$56,$62,$6d,$80,$0a,$71,$00,$11,$19,$8f,$57,$68,$57,$80,$0b,$72,$00,$14,$17,$8f,$8a,$41,$4f,$44,$80,$0a,$73,$00,$04,$8f,$8a,$56,$65,$77,$80,$0c,$74,$00,$11,$24,$18,$1f,$8f,$58,$59,$61,$80,$0f,$75,$00,$01,$17,$21,$01,$17,$25,$8f,$8a,$41,$48,$5e,$80,$0c,$76,$00,$0c,$24,$02,$8f,$8a,$45,$44,$7a,$80,$0b,$77,$00,$0e,$0b,$8f,$8a,$50,$4a,$7d,$80,$0e,$78,$00,$0c,$17,$1d,$06,$04,$8f,$8a,$48,$72,$78,$80,$0a,$79,$00,$05,$8f,$8a,$54,$73,$40,$80,$0a,$7a,$00,$02,$8f,$8a,$43,$50,$5f,$80,$0d,$7b,$00,$0d,$14,$0c,$03,$0c,$8f,$4f,$60,$48,$80,$0d,$7c,$00,$06,$1b,$18,$0b,$8f,$8a,$44,$69,$46,$80,$09,$7d,$00,$05,$8f,$4a,$5a,$4e,$80,$09,$7e,$00,$04,$8f,$48,$71,$5d,$80,$0e,$7f,$00,$03,$23,$13,$25,$17,$1d,$8f,$8a,$72,$5a,$80,$0b,$80,$00,$15,$02,$03,$8f,$54,$43,$43,$80,$0e,$81,$00,$0b,$1d,$1d,$00,$05,$8f,$8a,$4d,$42,$43,$80,$0d,$82,$00,$01,$1a,$23,$0e,$08,$8f,$4f,$62,$72,$80,$0d,$83,$00,$10,$14,$20,$1c,$14,$8f,$43,$78,$71,$80,$0b,$84,$00,$0c,$24,$02,$8f,$4b,$6f,$58,$80,$0c,$85,$00,$10,$14,$20,$1c,$14,$8f,$7a,$62,$80,$0b,$86,$00,$00,$0f,$07,$8f,$4e,$55,$4d,$80,$0b,$87,$00,$11,$19,$8f,$8a,$55,$78,$4d,$80,$0d,$88,$00,$0e,$10,$0f,$13,$8f,$8a,$42,$58,$58,$80,$0e,$89,$00,$14,$25,$23,$0e,$03,$8f,$8a,$54,$45,$79,$80,$0e,$8a,$00,$01,$1a,$23,$0e,$08,$8f,$8a,$56,$50,$6b,$80,$09,$8b,$00,$07,$8f,$47,$4f,$76,$80,$0b,$8c,$00,$14,$14,$07,$8f,$8a,$55,$65,$80,$09,$8d,$00,$05,$8f,$4f,$49,$43,$80,$0b,$8e,$00,$14,$17,$8f,$8a,$4f,$79,$4c,$80,$0c,$8f,$00,$10,$1c,$16,$8f,$8a,$50,$54,$46,$80,$0f,$90,$00,$07,$19,$12,$04,$09,$22,$8f,$8a,$4d,$45,$54,$80,$0f,$91,$00,$01,$17,$21,$01,$17,$25,$8f,$8a,$41,$75,$44,$80,$0f,$92,$00,$19,$1b,$0f,$1d,$17,$05,$8f,$8a,$54,$65,$7e,$80,$0c,$93,$00,$11,$24,$18,$1f,$8f,$47,$6f,$71,$80,$0a,$94,$00,$02,$8f,$8a,$44,$5b,$71,$80,$0e,$95,$00,$0d,$14,$0c,$03,$0c,$8f,$8a,$58,$50,$4f,$80,$0e,$96,$00,$0d,$14,$0c,$03,$0c,$8f,$8a,$4b,$45,$53,$80,$0e,$97,$00,$11,$15,$1b,$25,$18,$8f,$8a,$48,$6e,$7d,$80,$0d,$98,$00,$0e,$10,$0f,$13,$8f,$8a,$4e,$62,$58,$80,$0e,$99,$00,$13,$1a,$16,$22,$16,$8f,$8a,$50,$50,$56,$80,$0a,$9a,$00,$02,$8f,$8a,$44,$4a,$60,$80,$0e,$9b,$00,$11,$15,$1b,$25,$18,$8f,$8a,$45,$49,$73,$80,$0e,$9c,$00,$0d,$14,$0c,$03,$0c,$8f,$8a,$51,$57,$7e,$80,$0b,$9d,$00,$0a,$1c,$0f,$8f,$4a,$73,$67,$80,$0b,$9e,$00,$14,$14,$07,$8f,$47,$4c,$66,$80,$0d,$9f,$00,$0b,$1d,$1d,$00,$05,$8f,$58,$47,$72,$80,$0b,$a0,$00,$10,$1c,$16,$8f,$47,$46,$40,$80,$0e,$a1,$00,$03,$23,$13,$25,$17,$1d,$8f,$46,$61,$6a,$80,$0b,$a2,$00,$18,$09,$8f,$8a,$44,$52,$48,$80,$0a,$a3,$00,$10,$8f,$8a,$57,$5e,$6e,$80,$0b,$a4,$00,$14,$00,$8f,$8a,$47,$71,$4e,$80,$0b,$a5,$00,$0e,$0b,$8f,$8a,$4a,$49,$45,$80,$09,$a6,$00,$14,$17,$8f,$62,$6a,$80,$0c,$a7,$00,$06,$1b,$18,$0b,$8f,$48,$77,$63,$80,$0a,$a8,$00,$18,$09,$8f,$53,$7e,$6c,$80,$0f,$a9,$00,$03,$04,$11,$22,$13,$22,$8f,$8a,$51,$5d,$60,$80,$0d,$aa,$00,$0b,$1d,$1d,$00,$05,$8f,$49,$68,$51,$80,$0d,$ab,$00,$14,$25,$23,$0e,$03,$8f,$42,$4f,$6d,$80,$0e,$ac,$00,$10,$14,$20,$1c,$14,$8f,$8a,$56,$40,$63,$80,$09,$ad,$00,$14,$00,$8f,$4d,$64,$80,$0a,$ae,$00,$14,$21,$8f,$4c,$7a,$6f,$80,$0e,$af,$00,$03,$23,$13,$25,$17,$1d,$8f,$56,$62,$6d,$80,$0b,$b0,$00,$18,$0f,$8f,$8a,$42,$4d,$4c,$80,$0e,$b1,$00,$05,$0f,$19,$0a,$0e,$8f,$8a,$44,$7c,$68,$80,$0e,$b2,$00,$07,$19,$12,$04,$09,$22,$8f,$50,$5d,$45,$80,$0b,$b3,$00,$00,$0f,$07,$8f,$41,$6b,$41,$80,$0a,$b4,$00,$18,$09,$8f,$54,$61,$57,$80,$0c,$b5,$00,$00,$0f,$07,$8f,$8a,$4b,$4e,$6b,$80,$0d,$b6,$00,$17,$07,$04,$04,$8f,$8a,$4c,$41,$50,$80,$0c,$b7,$00,$11,$24,$18,$1f,$8f,$47,$77,$46,$80,$0a,$b8,$00,$14,$17,$8f,$43,$4d,$67,$80,$0d,$b9,$00,$17,$07,$04,$04,$8f,$8a,$55,$52,$74,$80,$0e,$ba,$00,$01,$1a,$23,$0e,$08,$8f,$8a,$48,$44,$57,$80,$0a,$bb,$00,$02,$8f,$8a,$48,$7b,$50,$80,$0a,$bc,$00,$03,$8f,$8a,$4f,$76,$77,$80,$0b,$bd,$00,$00,$0f,$07,$8f,$49,$45,$76,$80,$0e,$be,$00,$0d,$14,$0c,$03,$0c,$8f,$8a,$47,$44,$67,$80,$09,$bf,$00,$04,$8f,$53,$5e,$68,$80,$0c,$c0,$00,$11,$24,$18,$1f,$8f,$47,$46,$7a,$80,$0e,$c1,$00,$01,$1a,$23,$0e,$08,$8f,$8a,$44,$71,$46,$80,$0a,$c2,$00,$10,$1c,$16,$8f,$70,$79,$80,$0f,$c3,$00,$03,$23,$13,$25,$17,$1d,$8f,$8a,$54,$4e,$57,$80,$0f,$c4,$00,$01,$17,$21,$01,$17,$25,$8f,$8a,$56,$53,$5a,$80,$0a,$c5,$00,$14,$21,$8f,$41,$69,$49,$80,$0d,$c6,$00,$11,$24,$18,$1f,$8f,$8a,$4e,$58,$42,$80,$0e,$c7,$00,$03,$04,$11,$22,$13,$22,$8f,$51,$7b,$41,$80,$09,$c8,$00,$04,$8f,$45,$59,$62,$80,$0b,$c9,$00,$14,$21,$8f,$8a,$57,$6a,$66,$80,$0c,$ca,$00,$15,$02,$03,$8f,$8a,$42,$4a,$63,$80,$0c,$cb,$00,$17,$07,$04,$04,$8f,$4a,$61,$45,$80,$0d,$cc,$00,$0b,$1d,$1d,$00,$05,$8f,$8a,$72,$59,$80,$0d,$cd,$00,$0c,$17,$1d,$06,$04,$8f,$45,$4c,$69,$80,$0d,$ce,$00,$17,$07,$04,$04,$8f,$8a,$4f,$50,$6d,$80,$0d,$cf,$00,$0b,$1d,$1d,$00,$05,$8f,$4c,$60,$73,$80,$0e,$d0,$00,$0c,$17,$1d,$06,$04,$8f,$8a,$54,$6d,$65,$80,$0b,$d1,$00,$14,$14,$07,$8f,$50,$6a,$72,$80,$0c,$d2,$00,$14,$14,$07,$8f,$8a,$55,$7c,$75,$80,$09,$d3,$00,$10,$8f,$52,$4c,$68,$80,$0c,$d4,$00,$15,$02,$03,$8f,$8a,$57,$67,$47,$80,$0c,$d5,$00,$14,$14,$07,$8f,$8a,$53,$5f,$49,$80,$0a,$d6,$00,$16,$8f,$8a,$49,$7d,$66,$80,$0c,$d7,$00,$11,$24,$18,$1f,$8f,$46,$5f,$7c,$80,$0a,$d8,$00,$07,$8f,$8a,$47,$70,$67,$80,$0b,$d9,$00,$0c,$24,$02,$8f,$50,$6c,$49,$80,$0d,$da,$00,$10,$14,$20,$1c,$14,$8f,$44,$51,$53,$80,$0a,$db,$00,$18,$0f,$8f,$4b,$53,$7e,$80,$0d,$dc,$00,$17,$07,$04,$04,$8f,$8a,$43,$66,$5d,$80,$0a,$dd,$00,$02,$8f,$8a,$48,$5c,$4e,$80,$0a,$de,$00,$14,$17,$8f,$42,$41,$43,$80,$0e,$df,$00,$11,$15,$1b,$25,$18,$8f,$8a,$4b,$6a,$6f,$80,$0f,$e0,$00,$07,$19,$12,$04,$09,$22,$8f,$8a,$49,$60,$4a,$80,$0b,$e1,$00,$18,$09,$8f,$8a,$51,$68,$5e,$80,$0a,$e2,$00,$18,$0f,$8f,$4a,$49,$7b,$80,$0c,$e3,$00,$11,$24,$18,$1f,$8f,$53,$4d,$77,$80,$0a,$e4,$00,$18,$0f,$8f,$44,$52,$6e,$80,$0b,$e5,$00,$18,$09,$8f,$8a,$42,$4a,$47,$80,$0d,$e6,$00,$01,$1a,$23,$0e,$08,$8f,$4e,$53,$4a,$80,$0c,$e7,$00,$14,$14,$07,$8f,$8a,$4d,$7f,$6c,$80,$0d,$e8,$00,$05,$0f,$19,$0a,$0e,$8f,$46,$69,$65,$80,$0d,$e9,$00,$05,$0f,$19,$0a,$0e,$8f,$41,$6c,$71,$80,$0b,$ea,$00,$14,$00,$8f,$8a,$47,$61,$7b,$80,$0e,$eb,$00,$03,$23,$13,$25,$17,$1d,$8f,$43,$43,$6f,$80,$0b,$ec,$00,$09,$22,$1f,$8f,$4d,$41,$79,$80,$0a,$ed,$00,$11,$19,$8f,$50,$4c,$6a,$80,$0b,$ee,$00,$14,$17,$8f,$8a,$44,$44,$4f,$80,$0f,$ef,$00,$07,$19,$12,$04,$09,$22,$8f,$8a,$42,$7e,$44,$80,$09,$f0,$00,$05,$8f,$43,$61,$7c,$80,$0b,$f1,$00,$14,$17,$8f,$8a,$49,$63,$7e,$80,$0a,$f2,$00,$10,$8f,$8a,$49,$4c,$70,$80,$0c,$f3,$00,$c7,$14,$21,$8f,$8a,$57,$6a,$66,$80,$0e,$f4,$00,$c7,$10,$14,$20,$1c,$14,$8f,$44,$51,$53,$80,$0b,$f5,$00,$c7,$03,$8f,$8a,$4f,$76,$77,$80,$0d,$f6,$00,$c7,$06,$1b,$18,$0b,$8f,$48,$77,$63,$80,$0d,$f7,$00,$c7,$15,$02,$03,$8f,$8a,$57,$67,$47,$80,$0b,$f8,$00,$c7,$07,$8f,$8a,$47,$70,$67,$80,$0b,$f9,$00,$c7,$11,$19,$8f,$50,$4c,$6a,$80,$0b,$fa,$00,$c7,$02,$8f,$8a,$48,$5c,$4e,$80,$10,$fb,$00,$c7,$19,$1b,$0f,$1d,$17,$05,$8f,$8a,$54,$65,$7e,$80,$0b,$fc,$00,$c7,$10,$1c,$16,$8f,$70,$79,$80,$10,$fd,$00,$c7,$01,$17,$21,$01,$17,$25,$8f,$8a,$56,$53,$5a,$80,$0c,$fe,$00,$c7,$09,$22,$1f,$8f,$4d,$41,$79,$80,$0c,$ff,$00,$c7,$00,$0f,$07,$8f,$49,$45,$76,$80,$0f,$00,$01,$c7,$11,$15,$1b,$25,$18,$8f,$8a,$4b,$6a,$6f,$80,$0e,$01,$01,$c7,$14,$25,$23,$0e,$03,$8f,$42,$4f,$6d,$80,$0a,$02,$01,$c7,$18,$8f,$48,$53,$6d,$80,$0b,$03,$01,$c7,$10,$8f,$8a,$49,$4c,$70,$80,$0a,$04,$01,$c7,$04,$8f,$45,$59,$62,$80,$0a,$05,$01,$c7,$05,$8f,$43,$61,$7c,$80,$0c,$06,$01,$c7,$0e,$0b,$8f,$8a,$4a,$49,$45,$80,$0f,$07,$01,$c7,$13,$1a,$16,$22,$16,$8f,$8a,$50,$50,$56,$80,$0d,$08,$01,$c7,$11,$24,$18,$1f,$8f,$53,$4d,$77,$80,$0f,$09,$01,$c7,$0c,$17,$1d,$06,$04,$8f,$8a,$54,$6d,$65,$80,$0c,$0a,$01,$c7,$18,$09,$8f,$8a,$42,$4a,$47,$80,$10,$0b,$01,$c7,$07,$19,$12,$04,$09,$22,$8f,$8a,$42,$7e,$44,$80,$0d,$0c,$01,$c7,$14,$14,$07,$8f,$8a,$4d,$7f,$6c,$80,$0c,$0d,$01,$c7,$14,$00,$8f,$8a,$47,$61,$7b,$80,$0f,$0e,$01,$c7,$03,$04,$11,$22,$13,$22,$8f,$51,$7b,$41,$80,$0c,$0f,$01,$c7,$0a,$1c,$0f,$8f,$4a,$73,$67,$80,$0b,$10,$01,$c7,$16,$8f,$8a,$49,$7d,$66,$80,$0f,$11,$01,$c7,$03,$23,$13,$25,$17,$1d,$8f,$43,$43,$6f,$80,$0e,$12,$01,$c7,$01,$1a,$23,$0e,$08,$8f,$4e,$53,$4a,$80,$0c,$13,$01,$c7,$14,$17,$8f,$8a,$49,$63,$7e,$80,$0b,$14,$01,$c7,$18,$0f,$8f,$44,$52,$6e,$80,$0e,$15,$01,$c7,$0e,$10,$0f,$13,$8f,$8a,$4e,$62,$58,$80,$0f,$16,$01,$c7,$0d,$14,$0c,$03,$0c,$8f,$8a,$47,$44,$67,$80,$0e,$17,$01,$c7,$0b,$1d,$1d,$00,$05,$8f,$4c,$60,$73,$80,$0e,$18,$01,$c7,$05,$0f,$19,$0a,$0e,$8f,$41,$6c,$71,$80,$0c,$19,$01,$c7,$0c,$24,$02,$8f,$50,$6c,$49,$80,$0e,$1a,$01,$c7,$17,$07,$04,$04,$8f,$8a,$43,$66,$5d,$80,$14,$1b,$01,$be,$3f,$0c,$4f,$6b,$20,$53,$65,$65,$64,$20,$38,$30,$39,$33,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C57C 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D57C -  -  -  -  EndTestInstance:
   18 D1:D57C -  -  -  -  		
   19 D1:D57C -  -  -  -  ; ***************************************************************************************
   20 D1:D57C -  -  -  -  ;
   21 D1:D57C -  -  -  -  ;									Changes and Updates
   22 D1:D57C -  -  -  -  ;
   23 D1:D57C -  -  -  -  ; ***************************************************************************************
   24 D1:D57C -  -  -  -  ;
   25 D1:D57C -  -  -  -  ;		Date			Notes
   26 D1:D57C -  -  -  -  ;		==== 			=====
   27 D1:D57C -  -  -  -  ;
   28 D1:D57C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:D57C -  -  -  -  FinalAddress:
