    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a3
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a3 ; )
   45 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a4 ; ,
   46 00:0000 -  -  -  -  #define KWD_COLON                           	$00a5 ; :
   47 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a6 ; ;
   48 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a7 ; '
   49 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a8 ; repeat
   50 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a9 ; until
   51 00:0000 -  -  -  -  #define KWD_IF                              	$00aa ; if
   52 00:0000 -  -  -  -  #define KWD_THEN                            	$00ab ; then
   53 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ac ; else
   54 00:0000 -  -  -  -  #define KWD_FOR                             	$00ad ; for
   55 00:0000 -  -  -  -  #define KWD_TO                              	$00ae ; to
   56 00:0000 -  -  -  -  #define KWD_STEP                            	$00af ; step
   57 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b0 ; next
   58 00:0000 -  -  -  -  #define KWD_DEF                             	$00b1 ; def
   59 00:0000 -  -  -  -  #define KWD_PROC                            	$00b2 ; proc
   60 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b3 ; endproc
   61 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b4 ; local
   62 00:0000 -  -  -  -  #define KWD_DIM                             	$00b5 ; dim
   63 00:0000 -  -  -  -  #define KWD_REM                             	$00b6 ; rem
   64 00:0000 -  -  -  -  #define KWD_LET                             	$00b7 ; let
   65 00:0000 -  -  -  -  #define KWD_VDU                             	$00b8 ; vdu
   66 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b9 ; print
   67 00:0000 -  -  -  -  #define KWD_LOAD                            	$00ba ; load
   68 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bb ; save
   69 00:0000 -  -  -  -  #define KWD_LIST                            	$00bc ; list
   70 00:0000 -  -  -  -  #define KWD_NEW                             	$00bd ; new
   71 00:0000 -  -  -  -  #define KWD_RUN                             	$00be ; run
   72 00:0000 -  -  -  -  #define KWD_READ                            	$00bf ; read
   73 00:0000 -  -  -  -  #define KWD_DATA                            	$00c0 ; data
   74 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c1 ; restore
   75 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c2 ; assert
   76 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c3 ; clear
   77 00:0000 -  -  -  -  #define KWD_END                             	$00c4 ; end
   78 00:0000 -  -  -  -  #define KWD_STOP                            	$00c5 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 42 B5 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 D4 D8 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 9B AF D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D9 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 97 A9 D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 68 B5 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 4E B5 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 4D 
              AA D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 4D 
              AA D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  		
   59 D1:A8CD -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 D1:A8CD 00 00 00 00 		.dw 	0,0
   61 D1:A8D1 -  -  -  -  
   62 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   63 D1:A8D1 -  -  -  -  ;
   64 D1:A8D1 -  -  -  -  ;										Run variables
   65 D1:A8D1 -  -  -  -  ;
   66 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   67 D1:A8D1 -  -  -  -  
   68 D1:A8D1 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  		
   71 D1:A8D5 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 D1:A8D5 00 00 00 00 		.dw 	0,0
   73 D1:A8D9 -  -  -  -  
   74 D1:A8D9 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 D1:A8D9 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8DF -  -  -  -  
   77 D1:A8DF -  -  -  -  AConvert: 									; used for address conversions.
   78 D1:A8DF 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 D1:A8E5 -  -  -  -  		
   80 D1:A8E5 -  -  -  -  RandomSeed: 								; random number seeds.
   81 D1:A8E5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 D1:A8F5 -  -  -  -  
   83 D1:A8F5 -  -  -  -  s; ***************************************************************************************
   84 D1:A8F5 -  -  -  -  ;
   85 D1:A8F5 -  -  -  -  ;										  Buffers
   86 D1:A8F5 -  -  -  -  ;
   87 D1:A8F5 -  -  -  -  ; ***************************************************************************************
   88 D1:A8F5 -  -  -  -  
   89 D1:A8F5 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   90 D1:A8F5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   91 D1:A905 -  -  -  -  
   92 D1:A905 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   93 D1:A905 00 00 -  -  		.dw 	0
   94 D1:A907 -  -  -  -  
   95 D1:A907 -  -  -  -  ConvertBuffer: 								; general usage
   96 D1:A907 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   97 D1:A947 -  -  -  -  
   98 D1:A947 -  -  -  -  ; ***************************************************************************************
   99 D1:A947 -  -  -  -  ;
  100 D1:A947 -  -  -  -  ;									Changes and Updates
  101 D1:A947 -  -  -  -  ;
  102 D1:A947 -  -  -  -  ; ***************************************************************************************
  103 D1:A947 -  -  -  -  ;
  104 D1:A947 -  -  -  -  ;		Date			Notes
  105 D1:A947 -  -  -  -  ;		==== 			=====
  106 D1:A947 -  -  -  -  ;
  107 D1:A947 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A947 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A947 -  -  -  -  ; ***************************************************************************************
    2 D1:A947 -  -  -  -  ; ***************************************************************************************
    3 D1:A947 -  -  -  -  ;
    4 D1:A947 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A947 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A947 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A947 -  -  -  -  ;		Reviewed :	No
    8 D1:A947 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A947 -  -  -  -  ;
   10 D1:A947 -  -  -  -  ; ***************************************************************************************
   11 D1:A947 -  -  -  -  ; ***************************************************************************************
   12 D1:A947 -  -  -  -  
   13 D1:A947 -  -  -  -  ; ***************************************************************************************
   14 D1:A947 -  -  -  -  ;
   15 D1:A947 -  -  -  -  ;									ASSERT command
   16 D1:A947 -  -  -  -  ;
   17 D1:A947 -  -  -  -  ; ***************************************************************************************
   18 D1:A947 -  -  -  -  
   19 D1:A947 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A947 CD 80 AC D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A94B 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A951 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A952 3E 01 C3 4D 
              AA D1 -  -  		ERR_ASSERT
   24 D1:A958 -  -  -  -  
   25 D1:A958 -  -  -  -  ; ***************************************************************************************
   26 D1:A958 -  -  -  -  ;
   27 D1:A958 -  -  -  -  ;									Changes and Updates
   28 D1:A958 -  -  -  -  ;
   29 D1:A958 -  -  -  -  ; ***************************************************************************************
   30 D1:A958 -  -  -  -  ;
   31 D1:A958 -  -  -  -  ;		Date			Notes
   32 D1:A958 -  -  -  -  ;		==== 			=====
   33 D1:A958 -  -  -  -  ;
   34 D1:A958 -  -  -  -  ; ***************************************************************************************
   35 D1:A958 -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A958 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A958 -  -  -  -  ; ***************************************************************************************
    2 D1:A958 -  -  -  -  ; ***************************************************************************************
    3 D1:A958 -  -  -  -  ;
    4 D1:A958 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A958 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A958 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A958 -  -  -  -  ;		Reviewed :	No
    8 D1:A958 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A958 -  -  -  -  ;
   10 D1:A958 -  -  -  -  ; ***************************************************************************************
   11 D1:A958 -  -  -  -  ; ***************************************************************************************
   12 D1:A958 -  -  -  -  
   13 D1:A958 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A958 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A958 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A958 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A958 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A958 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A958 C3 B7 AA D1 		jp 		SyntaxError
   20 D1:A95C -  -  -  -  
   21 D1:A95C -  -  -  -  ; ***************************************************************************************
   22 D1:A95C -  -  -  -  ;
   23 D1:A95C -  -  -  -  ;									Changes and Updates
   24 D1:A95C -  -  -  -  ;
   25 D1:A95C -  -  -  -  ; ***************************************************************************************
   26 D1:A95C -  -  -  -  ;
   27 D1:A95C -  -  -  -  ;		Date			Notes
   28 D1:A95C -  -  -  -  ;		==== 			=====
   29 D1:A95C -  -  -  -  ;
   30 D1:A95C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A95C -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A95C -  -  -  -  ; ***************************************************************************************
    2 D1:A95C -  -  -  -  ; ***************************************************************************************
    3 D1:A95C -  -  -  -  ;
    4 D1:A95C -  -  -  -  ;		Name : 		colon.asm
    5 D1:A95C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95C -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A95C -  -  -  -  ;		Reviewed :	No
    8 D1:A95C -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A95C -  -  -  -  ;
   10 D1:A95C -  -  -  -  ; ***************************************************************************************
   11 D1:A95C -  -  -  -  ; ***************************************************************************************
   12 D1:A95C -  -  -  -  
   13 D1:A95C -  -  -  -  ; ***************************************************************************************
   14 D1:A95C -  -  -  -  ;
   15 D1:A95C -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A95C -  -  -  -  ;
   17 D1:A95C -  -  -  -  ; ***************************************************************************************
   18 D1:A95C -  -  -  -  
   19 D1:A95C -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A95C C9 -  -  -  		ret
   21 D1:A95D -  -  -  -  
   22 D1:A95D -  -  -  -  ; ***************************************************************************************
   23 D1:A95D -  -  -  -  ;
   24 D1:A95D -  -  -  -  ;									Changes and Updates
   25 D1:A95D -  -  -  -  ;
   26 D1:A95D -  -  -  -  ; ***************************************************************************************
   27 D1:A95D -  -  -  -  ;
   28 D1:A95D -  -  -  -  ;		Date			Notes
   29 D1:A95D -  -  -  -  ;		==== 			=====
   30 D1:A95D -  -  -  -  ;
   31 D1:A95D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A95D -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A95D -  -  -  -  ; ***************************************************************************************
    2 D1:A95D -  -  -  -  ; ***************************************************************************************
    3 D1:A95D -  -  -  -  ;
    4 D1:A95D -  -  -  -  ;		Name : 		end.asm
    5 D1:A95D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95D -  -  -  -  ;		Reviewed :	No
    8 D1:A95D -  -  -  -  ;		Purpose :	End command
    9 D1:A95D -  -  -  -  ;
   10 D1:A95D -  -  -  -  ; ***************************************************************************************
   11 D1:A95D -  -  -  -  ; ***************************************************************************************
   12 D1:A95D -  -  -  -  
   13 D1:A95D -  -  -  -  ; ***************************************************************************************
   14 D1:A95D -  -  -  -  ;
   15 D1:A95D -  -  -  -  ;										END command
   16 D1:A95D -  -  -  -  ;
   17 D1:A95D -  -  -  -  ; ***************************************************************************************
   18 D1:A95D -  -  -  -  
   19 D1:A95D -  -  -  -  Command_END: 	;; [end]
   20 D1:A95D 3E 00 C3 4D 
              AA D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A963 -  -  -  -  
   22 D1:A963 -  -  -  -  ; ***************************************************************************************
   23 D1:A963 -  -  -  -  ;
   24 D1:A963 -  -  -  -  ;									Changes and Updates
   25 D1:A963 -  -  -  -  ;
   26 D1:A963 -  -  -  -  ; ***************************************************************************************
   27 D1:A963 -  -  -  -  ;
   28 D1:A963 -  -  -  -  ;		Date			Notes
   29 D1:A963 -  -  -  -  ;		==== 			=====
   30 D1:A963 -  -  -  -  ;
   31 D1:A963 -  -  -  -  ; ***************************************************************************************
   32 D1:A963 -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A963 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A963 -  -  -  -  ; ***************************************************************************************
    2 D1:A963 -  -  -  -  ; ***************************************************************************************
    3 D1:A963 -  -  -  -  ;
    4 D1:A963 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A963 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A963 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A963 -  -  -  -  ;		Reviewed :	None
    8 D1:A963 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A963 -  -  -  -  ;
   10 D1:A963 -  -  -  -  ; ***************************************************************************************
   11 D1:A963 -  -  -  -  ; ***************************************************************************************
   12 D1:A963 -  -  -  -  
   13 D1:A963 -  -  -  -  ; ***************************************************************************************
   14 D1:A963 -  -  -  -  ;
   15 D1:A963 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A963 -  -  -  -  ;
   17 D1:A963 -  -  -  -  ; ***************************************************************************************
   18 D1:A963 -  -  -  -  
   19 D1:A963 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A963 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A968 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A96C DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A96F DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A971 -  -  -  -  		;
   25 D1:A971 ED 7B D5 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A976 C3 A5 A9 D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A97A -  -  -  -  
   28 D1:A97A -  -  -  -  ; ***************************************************************************************
   29 D1:A97A -  -  -  -  ;
   30 D1:A97A -  -  -  -  ;									Changes and Updates
   31 D1:A97A -  -  -  -  ;
   32 D1:A97A -  -  -  -  ; ***************************************************************************************
   33 D1:A97A -  -  -  -  ;
   34 D1:A97A -  -  -  -  ;		Date			Notes
   35 D1:A97A -  -  -  -  ;		==== 			=====
   36 D1:A97A -  -  -  -  ;
   37 D1:A97A -  -  -  -  ; ***************************************************************************************
   38 D1:A97A -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A97A -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:A97A -  -  -  -  ; ***************************************************************************************
    2 D1:A97A -  -  -  -  ; ***************************************************************************************
    3 D1:A97A -  -  -  -  ;
    4 D1:A97A -  -  -  -  ;		Name : 		rem.asm
    5 D1:A97A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A97A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A97A -  -  -  -  ;		Reviewed :	No
    8 D1:A97A -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:A97A -  -  -  -  ;
   10 D1:A97A -  -  -  -  ; ***************************************************************************************
   11 D1:A97A -  -  -  -  ; ***************************************************************************************
   12 D1:A97A -  -  -  -  
   13 D1:A97A -  -  -  -  ; ***************************************************************************************
   14 D1:A97A -  -  -  -  ;
   15 D1:A97A -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:A97A -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:A97A -  -  -  -  ;
   18 D1:A97A -  -  -  -  ; ***************************************************************************************
   19 D1:A97A -  -  -  -  
   20 D1:A97A -  -  -  -  Command_REM: 	;; [rem]
   21 D1:A97A -  -  -  -  Command_REM2: 	;; [']
   22 D1:A97A DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:A97D DD 23 -  -  		inc 	ix
   24 D1:A97F FE A5 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:A981 C8 -  -  -  		ret 	z
   26 D1:A982 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:A984 C8 -  -  -  		ret 	z
   28 D1:A985 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:A987 C2 B7 AA D1 		jp 		nz,SyntaxError
   30 D1:A98B -  -  -  -  		;		
   31 D1:A98B 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:A98F DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:A992 13 -  -  -  		inc 	de 
   34 D1:A993 13 -  -  -  		inc 	de
   35 D1:A994 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:A996 C9 -  -  -  		ret
   37 D1:A997 -  -  -  -  
   38 D1:A997 -  -  -  -  ; ***************************************************************************************
   39 D1:A997 -  -  -  -  ;
   40 D1:A997 -  -  -  -  ;									Changes and Updates
   41 D1:A997 -  -  -  -  ;
   42 D1:A997 -  -  -  -  ; ***************************************************************************************
   43 D1:A997 -  -  -  -  ;
   44 D1:A997 -  -  -  -  ;		Date			Notes
   45 D1:A997 -  -  -  -  ;		==== 			=====
   46 D1:A997 -  -  -  -  ;
   47 D1:A997 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 D1:A997 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:A997 -  -  -  -  ; ***************************************************************************************
    2 D1:A997 -  -  -  -  ; ***************************************************************************************
    3 D1:A997 -  -  -  -  ;
    4 D1:A997 -  -  -  -  ;		Name : 		run.asm
    5 D1:A997 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A997 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A997 -  -  -  -  ;		Reviewed :	No
    8 D1:A997 -  -  -  -  ;		Purpose :	Run command
    9 D1:A997 -  -  -  -  ;
   10 D1:A997 -  -  -  -  ; ***************************************************************************************
   11 D1:A997 -  -  -  -  ; ***************************************************************************************
   12 D1:A997 -  -  -  -  
   13 D1:A997 -  -  -  -  ; ***************************************************************************************
   14 D1:A997 -  -  -  -  ;
   15 D1:A997 -  -  -  -  ;										RUN command
   16 D1:A997 -  -  -  -  ;
   17 D1:A997 -  -  -  -  ; ***************************************************************************************
   18 D1:A997 -  -  -  -  
   19 D1:A997 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:A997 CD 60 AF D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:A99B -  -  -  -  
   22 D1:A99B DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:A9A0 ED 73 D5 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:A9A5 -  -  -  -  		;
   25 D1:A9A5 -  -  -  -  		; 		New line at IX.
   26 D1:A9A5 -  -  -  -  		;
   27 D1:A9A5 -  -  -  -  CRNewLine:
   28 D1:A9A5 DD 22 D1 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 D1:A9AA -  -  -  -  		;
   30 D1:A9AA DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 D1:A9AD B7 -  -  -  		or 		a
   32 D1:A9AE CA 5D A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   33 D1:A9B2 -  -  -  -  		;
   34 D1:A9B2 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 D1:A9B4 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 D1:A9B6 DD 23 -  -  		inc 	ix
   37 D1:A9B8 -  -  -  -  		;
   38 D1:A9B8 -  -  -  -  		; 		New command at IX
   39 D1:A9B8 -  -  -  -  		;
   40 D1:A9B8 -  -  -  -  _CRNewCommand:	
   41 D1:A9B8 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 D1:A9BB B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 D1:A9BC F2 F3 A9 D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 D1:A9C0 -  -  -  -  		;
   45 D1:A9C0 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 D1:A9C2 30 06 -  -  		jr  	nc,_CRDoCommand
   47 D1:A9C4 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 D1:A9C6 D2 E7 A9 D1 		jp 		nc,_CRAlternateLets
   49 D1:A9CA -  -  -  -  		;
   50 D1:A9CA -  -  -  -  _CRDoCommand:		
   51 D1:A9CA E6 7F 21 00 
              00 00 6F 29 
              29 11 1E B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 D1:A9DF DD 23 -  -  		inc 	ix 							; skip over token.
   53 D1:A9E1 CD D9 A8 D1 		call 	JumpCode 					; call the routine.
   54 D1:A9E5 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 D1:A9E7 -  -  -  -  		;
   56 D1:A9E7 -  -  -  -  		; 		Do CALL (HL)
   57 D1:A9E7 -  -  -  -  		;
   58 D1:A9E7 -  -  -  -  		;
   59 D1:A9E7 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 D1:A9E7 -  -  -  -  		;		
   61 D1:A9E7 -  -  -  -  _CRAlternateLets:		
   62 D1:A9E7 FE 83 -  -  		cp 		KWD_PLING
   63 D1:A9E9 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 D1:A9EB FE 84 -  -  		cp 		KWD_QMARK
   65 D1:A9ED 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 D1:A9EF C3 B7 AA D1 		jp 		SyntaxError
   67 D1:A9F3 -  -  -  -  		;
   68 D1:A9F3 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 D1:A9F3 -  -  -  -  		;
   70 D1:A9F3 -  -  -  -  _CRAssignmentHandler:		
   71 D1:A9F3 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 D1:A9F5 D2 B7 AA D1 		jp 		nc,SyntaxError
   73 D1:A9F9 -  -  -  -  _CRAssignmentLet:		
   74 D1:A9F9 3E 0E C3 4D 
              AA D1 -  -  		ERR_TODO
   75 D1:A9FF -  -  -  -  		;call	Command_LET
   76 D1:A9FF C3 B8 A9 D1 		jp 		_CRNewCommand
   77 D1:AA03 -  -  -  -  
   78 D1:AA03 -  -  -  -  ; ***************************************************************************************
   79 D1:AA03 -  -  -  -  ;
   80 D1:AA03 -  -  -  -  ;									Changes and Updates
   81 D1:AA03 -  -  -  -  ;
   82 D1:AA03 -  -  -  -  ; ***************************************************************************************
   83 D1:AA03 -  -  -  -  ;
   84 D1:AA03 -  -  -  -  ;		Date			Notes
   85 D1:AA03 -  -  -  -  ;		==== 			=====
   86 D1:AA03 -  -  -  -  ;
   87 D1:AA03 -  -  -  -  ; ***************************************************************************************
   88 D1:AA03 -  -  -  -  		
Listing for file "_build.asm"
   20 D1:AA03 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AA03 -  -  -  -  ; ***************************************************************************************
    2 D1:AA03 -  -  -  -  ; ***************************************************************************************
    3 D1:AA03 -  -  -  -  ;
    4 D1:AA03 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AA03 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA03 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA03 -  -  -  -  ;		Reviewed :	No
    8 D1:AA03 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AA03 -  -  -  -  ;
   10 D1:AA03 -  -  -  -  ; ***************************************************************************************
   11 D1:AA03 -  -  -  -  ; ***************************************************************************************
   12 D1:AA03 -  -  -  -  
   13 D1:AA03 -  -  -  -  ; ***************************************************************************************
   14 D1:AA03 -  -  -  -  ;
   15 D1:AA03 -  -  -  -  ;										STOP command
   16 D1:AA03 -  -  -  -  ;
   17 D1:AA03 -  -  -  -  ; ***************************************************************************************
   18 D1:AA03 -  -  -  -  
   19 D1:AA03 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AA03 3E 0C C3 4D 
              AA D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AA09 -  -  -  -  
   22 D1:AA09 -  -  -  -  ; ***************************************************************************************
   23 D1:AA09 -  -  -  -  ;
   24 D1:AA09 -  -  -  -  ;									Changes and Updates
   25 D1:AA09 -  -  -  -  ;
   26 D1:AA09 -  -  -  -  ; ***************************************************************************************
   27 D1:AA09 -  -  -  -  ;
   28 D1:AA09 -  -  -  -  ;		Date			Notes
   29 D1:AA09 -  -  -  -  ;		==== 			=====
   30 D1:AA09 -  -  -  -  ;
   31 D1:AA09 -  -  -  -  ; ***************************************************************************************
   32 D1:AA09 -  -  -  -  		
Listing for file "_build.asm"
   21 D1:AA09 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AA09 -  -  -  -  ; ***************************************************************************************
    2 D1:AA09 -  -  -  -  ; ***************************************************************************************
    3 D1:AA09 -  -  -  -  ;
    4 D1:AA09 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AA09 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA09 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA09 -  -  -  -  ;		Reviewed :	No
    8 D1:AA09 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AA09 -  -  -  -  ;
   10 D1:AA09 -  -  -  -  ; ***************************************************************************************
   11 D1:AA09 -  -  -  -  ; ***************************************************************************************
   12 D1:AA09 -  -  -  -  
   13 D1:AA09 -  -  -  -  ; ***************************************************************************************
   14 D1:AA09 -  -  -  -  ;
   15 D1:AA09 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AA09 -  -  -  -  ;
   17 D1:AA09 -  -  -  -  ; ***************************************************************************************
   18 D1:AA09 -  -  -  -  
   19 D1:AA09 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AA09             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AA09             		inc 	ix
   22 D1:AA09             		cp 		ch 							; exit if matches
   23 D1:AA09             		ret 	z
   24 D1:AA09             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AA09             		jp 		ErrorHandler
   26 D1:AA09             #endmacro
   27 D1:AA09 -  -  -  -  
   28 D1:AA09 -  -  -  -  CheckLeftBracket:
   29 D1:AA09 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 4D 
              AA D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AA17 -  -  -  -  
   31 D1:AA17 -  -  -  -  CheckRightBracket:
   32 D1:AA17 DD 7E 00 DD 
              23 FE A3 C8 
              3E 0A C3 4D 
              AA D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AA25 -  -  -  -  
   34 D1:AA25 -  -  -  -  CheckDollar:
   35 D1:AA25 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 4D 
              AA D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AA33 -  -  -  -  		
   37 D1:AA33 -  -  -  -  CheckComma:
   38 D1:AA33 DD 7E 00 DD 
              23 FE A4 C8 
              3E 07 C3 4D 
              AA D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AA41 -  -  -  -  
   40 D1:AA41 -  -  -  -  ; ***************************************************************************************
   41 D1:AA41 -  -  -  -  ;
   42 D1:AA41 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AA41 -  -  -  -  ;
   44 D1:AA41 -  -  -  -  ; ***************************************************************************************
   45 D1:AA41 -  -  -  -  
   46 D1:AA41 -  -  -  -  CheckNextA:
   47 D1:AA41 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AA44 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AA46 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AA47 3E 0D C3 4D 
              AA D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AA4D -  -  -  -  		
   52 D1:AA4D -  -  -  -  ; ***************************************************************************************
   53 D1:AA4D -  -  -  -  ;
   54 D1:AA4D -  -  -  -  ;									Changes and Updates
   55 D1:AA4D -  -  -  -  ;
   56 D1:AA4D -  -  -  -  ; ***************************************************************************************
   57 D1:AA4D -  -  -  -  ;
   58 D1:AA4D -  -  -  -  ;		Date			Notes
   59 D1:AA4D -  -  -  -  ;		==== 			=====
   60 D1:AA4D -  -  -  -  ;
   61 D1:AA4D -  -  -  -  ; ***************************************************************************************
   62 D1:AA4D -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AA4D -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AA4D -  -  -  -  ; ***************************************************************************************
    2 D1:AA4D -  -  -  -  ; ***************************************************************************************
    3 D1:AA4D -  -  -  -  ;
    4 D1:AA4D -  -  -  -  ;		Name : 		errors.asm
    5 D1:AA4D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA4D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA4D -  -  -  -  ;		Reviewed :	No
    8 D1:AA4D -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AA4D -  -  -  -  ;
   10 D1:AA4D -  -  -  -  ; ***************************************************************************************
   11 D1:AA4D -  -  -  -  ; ***************************************************************************************
   12 D1:AA4D -  -  -  -  
   13 D1:AA4D -  -  -  -  ; ***************************************************************************************
   14 D1:AA4D -  -  -  -  ;
   15 D1:AA4D -  -  -  -  ;								Error handler, message A 
   16 D1:AA4D -  -  -  -  ;
   17 D1:AA4D -  -  -  -  ; ***************************************************************************************
   18 D1:AA4D -  -  -  -  
   19 D1:AA4D -  -  -  -  ErrorHandler:
   20 D1:AA4D F5 -  -  -  		push 	af 						; save error ID
   21 D1:AA4E -  -  -  -  
   22 D1:AA4E 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AA52 6F -  -  -  		ld 		l,a
   24 D1:AA53 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AA54 29 -  -  -  		add 	hl,hl 		
   26 D1:AA55 11 F1 B0 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AA59 19 -  -  -  		add 	hl,de
   28 D1:AA5A ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AA5C CD BA AF D1 		call 	PrintStringAtHL
   30 D1:AA60 -  -  -  -  		;
   31 D1:AA60 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AA61 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AA62 28 2F -  -  		jr 		z,_EHExit
   34 D1:AA64 -  -  -  -  		;
   35 D1:AA64 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AA69 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AA6C B7 -  -  -  		or 		a
   38 D1:AA6D 28 24 -  -  		jr 		z,_EHExit
   39 D1:AA6F -  -  -  -  
   40 D1:AA6F 21 9B AA D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AA73 CD BA AF D1 		call 	PrintStringAtHL 
   42 D1:AA77 -  -  -  -  		
   43 D1:AA77 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AA78 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AA7C D9 -  -  -  		exx 
   46 D1:AA7D DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AA80 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AA83 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AA85 01 07 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AA89 CD F5 B4 D1 		call 	Int32ToString
   51 D1:AA8D C5 -  -  -  		push 	bc
   52 D1:AA8E E1 -  -  -  		pop 	hl
   53 D1:AA8F CD BA AF D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AA93 -  -  -  -  _EHExit:		
   55 D1:AA93 CD 90 B5 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AA97 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AA9B -  -  -  -  
   58 D1:AA9B -  -  -  -  _EHAtText:
   59 D1:AA9B 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AAA5 -  -  -  -  
   61 D1:AAA5 -  -  -  -  NotImplemented:
   62 D1:AAA5 3E 04 C3 4D 
              AA D1 -  -  		ERR_DISABLED
   63 D1:AAAB -  -  -  -  TypeMismatch:
   64 D1:AAAB 3E 02 C3 4D 
              AA D1 -  -  		ERR_BADTYPE
   65 D1:AAB1 -  -  -  -  BadValue:
   66 D1:AAB1 3E 03 C3 4D 
              AA D1 -  -  		ERR_BADVALUE
   67 D1:AAB7 -  -  -  -  SyntaxError:
   68 D1:AAB7 3E 0D C3 4D 
              AA D1 -  -  		ERR_SYNTAX
   69 D1:AABD -  -  -  -  						
   70 D1:AABD -  -  -  -  ; ***************************************************************************************
   71 D1:AABD -  -  -  -  ;
   72 D1:AABD -  -  -  -  ;									Changes and Updates
   73 D1:AABD -  -  -  -  ;
   74 D1:AABD -  -  -  -  ; ***************************************************************************************
   75 D1:AABD -  -  -  -  ;
   76 D1:AABD -  -  -  -  ;		Date			Notes
   77 D1:AABD -  -  -  -  ;		==== 			=====
   78 D1:AABD -  -  -  -  ;
   79 D1:AABD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AABD -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AABD -  -  -  -  ; ***************************************************************************************
    2 D1:AABD -  -  -  -  ; ***************************************************************************************
    3 D1:AABD -  -  -  -  ;
    4 D1:AABD -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AABD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AABD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AABD -  -  -  -  ;		Reviewed :	No
    8 D1:AABD -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AABD -  -  -  -  ;
   10 D1:AABD -  -  -  -  ; ***************************************************************************************
   11 D1:AABD -  -  -  -  ; ***************************************************************************************
   12 D1:AABD -  -  -  -  
   13 D1:AABD -  -  -  -  ; ***************************************************************************************
   14 D1:AABD -  -  -  -  ;
   15 D1:AABD -  -  -  -  ; 									Addition
   16 D1:AABD -  -  -  -  ;
   17 D1:AABD -  -  -  -  ; ***************************************************************************************
   18 D1:AABD -  -  -  -  
   19 D1:AABD -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AABD CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 74 
              B4 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AACB -  -  -  -  
   22 D1:AACB -  -  -  -  ; ***************************************************************************************
   23 D1:AACB -  -  -  -  ;
   24 D1:AACB -  -  -  -  ; 									Subtraction
   25 D1:AACB -  -  -  -  ;
   26 D1:AACB -  -  -  -  ; ***************************************************************************************
   27 D1:AACB -  -  -  -  
   28 D1:AACB -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AACB CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 7C 
              B4 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AAD9 -  -  -  -  
   31 D1:AAD9 -  -  -  -  ; ***************************************************************************************
   32 D1:AAD9 -  -  -  -  ;
   33 D1:AAD9 -  -  -  -  ; 									  Multiply
   34 D1:AAD9 -  -  -  -  ;
   35 D1:AAD9 -  -  -  -  ; ***************************************************************************************
   36 D1:AAD9 -  -  -  -  
   37 D1:AAD9 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AAD9 CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 3B 
              B4 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AAE7 -  -  -  -  
   40 D1:AAE7 -  -  -  -  ; ***************************************************************************************
   41 D1:AAE7 -  -  -  -  ;
   42 D1:AAE7 -  -  -  -  ; 									  Divide
   43 D1:AAE7 -  -  -  -  ;
   44 D1:AAE7 -  -  -  -  ; ***************************************************************************************
   45 D1:AAE7 -  -  -  -  
   46 D1:AAE7 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AAE7 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AAE7 CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 3B 
              B3 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AAF5 -  -  -  -  
   50 D1:AAF5 -  -  -  -  ; ***************************************************************************************
   51 D1:AAF5 -  -  -  -  ;
   52 D1:AAF5 -  -  -  -  ; 									  Modulus
   53 D1:AAF5 -  -  -  -  ;
   54 D1:AAF5 -  -  -  -  ; ***************************************************************************************
   55 D1:AAF5 -  -  -  -  
   56 D1:AAF5 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AAF5 CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 3E 
              B3 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AB03 -  -  -  -  
   59 D1:AB03 -  -  -  -  ; ***************************************************************************************
   60 D1:AB03 -  -  -  -  ;
   61 D1:AB03 -  -  -  -  ; 									  Logical
   62 D1:AB03 -  -  -  -  ;
   63 D1:AB03 -  -  -  -  ; ***************************************************************************************
   64 D1:AB03 -  -  -  -  
   65 D1:AB03 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AB03 CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 86 
              B4 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AB11 -  -  -  -  
   68 D1:AB11 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AB11 CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 93 
              B4 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AB1F -  -  -  -  
   71 D1:AB1F -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AB1F CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 A0 
              B4 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AB2D -  -  -  -  
   74 D1:AB2D -  -  -  -  ; ***************************************************************************************
   75 D1:AB2D -  -  -  -  ;
   76 D1:AB2D -  -  -  -  ;									Changes and Updates
   77 D1:AB2D -  -  -  -  ;
   78 D1:AB2D -  -  -  -  ; ***************************************************************************************
   79 D1:AB2D -  -  -  -  ;
   80 D1:AB2D -  -  -  -  ;		Date			Notes
   81 D1:AB2D -  -  -  -  ;		==== 			=====
   82 D1:AB2D -  -  -  -  ;
   83 D1:AB2D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 D1:AB2D -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AB2D -  -  -  -  ; ***************************************************************************************
    2 D1:AB2D -  -  -  -  ; ***************************************************************************************
    3 D1:AB2D -  -  -  -  ;
    4 D1:AB2D -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AB2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB2D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB2D -  -  -  -  ;		Reviewed :	No
    8 D1:AB2D -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AB2D -  -  -  -  ;
   10 D1:AB2D -  -  -  -  ; ***************************************************************************************
   11 D1:AB2D -  -  -  -  ; ***************************************************************************************
   12 D1:AB2D -  -  -  -  
   13 D1:AB2D -  -  -  -  ; ***************************************************************************************
   14 D1:AB2D -  -  -  -  ;
   15 D1:AB2D -  -  -  -  ; 									<l> <op> <r>
   16 D1:AB2D -  -  -  -  ;
   17 D1:AB2D -  -  -  -  ; ***************************************************************************************
   18 D1:AB2D -  -  -  -  
   19 D1:AB2D -  -  -  -  ALULongReference:			;; [!]
   20 D1:AB2D CD 3D AB D1 		call 	BRGetAddress 				; calculate address
   21 D1:AB31 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AB33 CB F9 -  -  		set 	CIsReference,c
   23 D1:AB35 C9 -  -  -  		ret
   24 D1:AB36 -  -  -  -  
   25 D1:AB36 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AB36 CD 2D AB D1 		call 	ALULongReference
   27 D1:AB3A CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AB3C C9 -  -  -  		ret
   29 D1:AB3D -  -  -  -  
   30 D1:AB3D -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AB3D CD DA AB D1 
              78 B1 C2 AB 
              AA D1 C3 4B 
              AB D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AB4B -  -  -  -  _BRGAMain:		
   33 D1:AB4B CD 74 B4 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AB4F CD E0 AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AB53 C9 -  -  -  		ret
   36 D1:AB54 -  -  -  -  
   37 D1:AB54 -  -  -  -  ; ***************************************************************************************
   38 D1:AB54 -  -  -  -  ;
   39 D1:AB54 -  -  -  -  ;									Changes and Updates
   40 D1:AB54 -  -  -  -  ;
   41 D1:AB54 -  -  -  -  ; ***************************************************************************************
   42 D1:AB54 -  -  -  -  ;
   43 D1:AB54 -  -  -  -  ;		Date			Notes
   44 D1:AB54 -  -  -  -  ;		==== 			=====
   45 D1:AB54 -  -  -  -  ;
   46 D1:AB54 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB54 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AB54 -  -  -  -  ; ***************************************************************************************
    2 D1:AB54 -  -  -  -  ; ***************************************************************************************
    3 D1:AB54 -  -  -  -  ;
    4 D1:AB54 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AB54 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB54 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB54 -  -  -  -  ;		Reviewed :	No
    8 D1:AB54 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AB54 -  -  -  -  ;
   10 D1:AB54 -  -  -  -  ; ***************************************************************************************
   11 D1:AB54 -  -  -  -  ; ***************************************************************************************
   12 D1:AB54 -  -  -  -  
   13 D1:AB54 -  -  -  -  #macro compare_equals(n)
   14 D1:AB54             		call 	CompareBaseCode
   15 D1:AB54             		cp 		n
   16 D1:AB54             		jr 		z,UnaryInt32True
   17 D1:AB54             		jr 		UnaryInt32False
   18 D1:AB54             #endmacro
   19 D1:AB54 -  -  -  -  
   20 D1:AB54 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AB54             		call 	CompareBaseCode
   22 D1:AB54             		cp 		n
   23 D1:AB54             		jr 		nz,UnaryInt32True
   24 D1:AB54             		jr 		UnaryInt32False
   25 D1:AB54             #endmacro
   26 D1:AB54 -  -  -  -  
   27 D1:AB54 -  -  -  -  ; ***************************************************************************************
   28 D1:AB54 -  -  -  -  ;
   29 D1:AB54 -  -  -  -  ; 								Return True/False
   30 D1:AB54 -  -  -  -  ;
   31 D1:AB54 -  -  -  -  ; ***************************************************************************************
   32 D1:AB54 -  -  -  -  
   33 D1:AB54 -  -  -  -  UnaryInt32True:	
   34 D1:AB54 3E FF -  -  		ld 		a,255
   35 D1:AB56 18 01 -  -  		jr 		_Int32Logical
   36 D1:AB58 -  -  -  -  UnaryInt32False: 
   37 D1:AB58 AF -  -  -  		xor 	a
   38 D1:AB59 -  -  -  -  _Int32Logical:
   39 D1:AB59 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AB5A 67 -  -  -  		ld 		h,a
   41 D1:AB5B D9 -  -  -  		exx
   42 D1:AB5C 6F -  -  -  		ld 		l,a
   43 D1:AB5D 67 -  -  -  		ld 		h,a
   44 D1:AB5E D9 -  -  -  		exx
   45 D1:AB5F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AB61 C9 -  -  -  		ret
   47 D1:AB62 -  -  -  -  
   48 D1:AB62 -  -  -  -  ; ***************************************************************************************
   49 D1:AB62 -  -  -  -  ;
   50 D1:AB62 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AB62 -  -  -  -  ;
   52 D1:AB62 -  -  -  -  ; ***************************************************************************************
   53 D1:AB62 -  -  -  -  
   54 D1:AB62 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AB62 CD 9E AB D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AB6C -  -  -  -  
   57 D1:AB6C -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AB6C CD 9E AB D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AB76 -  -  -  -  
   60 D1:AB76 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AB76 CD 9E AB D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AB80 -  -  -  -  
   63 D1:AB80 -  -  -  -  ; ***************************************************************************************
   64 D1:AB80 -  -  -  -  ;
   65 D1:AB80 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AB80 -  -  -  -  ;
   67 D1:AB80 -  -  -  -  ; ***************************************************************************************
   68 D1:AB80 -  -  -  -  
   69 D1:AB80 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AB80 CD 9E AB D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AB8A -  -  -  -  
   72 D1:AB8A -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AB8A CD 9E AB D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AB94 -  -  -  -  
   75 D1:AB94 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AB94 CD 9E AB D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AB9E -  -  -  -  
   78 D1:AB9E -  -  -  -  ; ***************************************************************************************
   79 D1:AB9E -  -  -  -  ;
   80 D1:AB9E -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AB9E -  -  -  -  ;
   82 D1:AB9E -  -  -  -  ; ***************************************************************************************
   83 D1:AB9E -  -  -  -  
   84 D1:AB9E -  -  -  -  CompareBaseCode:
   85 D1:AB9E CD DA AB D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:ABA2 -  -  -  -  
   87 D1:ABA2 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:ABA3 A1 -  -  -  		and 	c
   89 D1:ABA4 CB 47 -  -  		bit 	CIsString,a 
   90 D1:ABA6 C2 B8 AB D1 		jp 		nz,StringCompare
   91 D1:ABAA -  -  -  -  
   92 D1:ABAA 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:ABAB B1 -  -  -  		or 		c
   94 D1:ABAC CB 47 -  -  		bit 	CIsString,a 
   95 D1:ABAE CA B4 B4 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:ABB2 -  -  -  -  
   97 D1:ABB2 3E 02 C3 4D 
              AA D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:ABB8 -  -  -  -  ;
   99 D1:ABB8 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:ABB8 -  -  -  -  ;
  101 D1:ABB8 -  -  -  -  StringCompare:
  102 D1:ABB8 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:ABB9 BE -  -  -  		cp 		(hl)
  104 D1:ABBA 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:ABBC 20 08 -  -  		jr 		nz,_SCLess
  106 D1:ABBE 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:ABBF 23 -  -  -  		inc 	hl
  108 D1:ABC0 FE 20 -  -  		cp 		' '
  109 D1:ABC2 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:ABC4 AF -  -  -  		xor 	a 							; return 0.
  111 D1:ABC5 C9 -  -  -  		ret
  112 D1:ABC6 -  -  -  -  
  113 D1:ABC6 -  -  -  -  _SCLess:
  114 D1:ABC6 3E FF -  -  		ld 		a,$FF
  115 D1:ABC8 C9 -  -  -  		ret
  116 D1:ABC9 -  -  -  -  _SCGreater:
  117 D1:ABC9 3E 01 -  -  		ld 		a,1
  118 D1:ABCB C9 -  -  -  		ret
  119 D1:ABCC -  -  -  -  
  120 D1:ABCC 3E 0E C3 4D 
              AA D1 -  -  		ERR_TODO()
  121 D1:ABD2 -  -  -  -  
  122 D1:ABD2 -  -  -  -  ; ***************************************************************************************
  123 D1:ABD2 -  -  -  -  ;
  124 D1:ABD2 -  -  -  -  ;									Changes and Updates
  125 D1:ABD2 -  -  -  -  ;
  126 D1:ABD2 -  -  -  -  ; ***************************************************************************************
  127 D1:ABD2 -  -  -  -  ;
  128 D1:ABD2 -  -  -  -  ;		Date			Notes
  129 D1:ABD2 -  -  -  -  ;		==== 			=====
  130 D1:ABD2 -  -  -  -  ;
  131 D1:ABD2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:ABD2 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:ABD2 -  -  -  -  ; ***************************************************************************************
    2 D1:ABD2 -  -  -  -  ; ***************************************************************************************
    3 D1:ABD2 -  -  -  -  ;
    4 D1:ABD2 -  -  -  -  ;		Name : 		utility.asm
    5 D1:ABD2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABD2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABD2 -  -  -  -  ;		Reviewed :	No
    8 D1:ABD2 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:ABD2 -  -  -  -  ;
   10 D1:ABD2 -  -  -  -  ; ***************************************************************************************
   11 D1:ABD2 -  -  -  -  ; ***************************************************************************************
   12 D1:ABD2 -  -  -  -  
   13 D1:ABD2 -  -  -  -  ; ***************************************************************************************
   14 D1:ABD2 -  -  -  -  ;
   15 D1:ABD2 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:ABD2 -  -  -  -  ;
   17 D1:ABD2 -  -  -  -  ; ***************************************************************************************
   18 D1:ABD2 -  -  -  -  
   19 D1:ABD2 -  -  -  -  SwapHLDE:
   20 D1:ABD2 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ABD3 D9 -  -  -  			exx
   22 D1:ABD4 EB -  -  -  			ex 		de,hl
   23 D1:ABD5 D9 -  -  -  			exx
   24 D1:ABD6 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ABD7 41 -  -  -  			ld 		b,c
   26 D1:ABD8 4F -  -  -  			ld 		c,a
   27 D1:ABD9 C9 -  -  -  			ret
   28 D1:ABDA -  -  -  -  
   29 D1:ABDA -  -  -  -  ; ***************************************************************************************
   30 D1:ABDA -  -  -  -  ;
   31 D1:ABDA -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ABDA -  -  -  -  ;
   33 D1:ABDA -  -  -  -  ; ***************************************************************************************
   34 D1:ABDA -  -  -  -  
   35 D1:ABDA -  -  -  -  DereferenceBoth:
   36 D1:ABDA CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ABDC C4 B3 AC D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ABE0 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ABE2 C8 -  -  -  			ret 	z
   40 D1:ABE3 CD D2 AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ABE7 CD B3 AC D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ABEB CD D2 AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ABEF C9 -  -  -  			ret
   44 D1:ABF0 -  -  -  -  
   45 D1:ABF0 -  -  -  -  ; ***************************************************************************************
   46 D1:ABF0 -  -  -  -  ;
   47 D1:ABF0 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ABF0 -  -  -  -  ;
   49 D1:ABF0 -  -  -  -  ; ***************************************************************************************
   50 D1:ABF0 -  -  -  -  
   51 D1:ABF0 -  -  -  -  NegateHLHL:	
   52 D1:ABF0 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ABF2 C2 AB AA D1 			jp 		nz,TypeMismatch
   54 D1:ABF6 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ABF8 C4 B3 AC D1 			call 	nz,Dereference 			; if required.
   56 D1:ABFC CD DE B4 D1 			call 	Int32Negate
   57 D1:AC00 C9 -  -  -  			ret
Listing for file "_build.asm"
   27 D1:AC01 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AC01 -  -  -  -  ; ***************************************************************************************
    2 D1:AC01 -  -  -  -  ; ***************************************************************************************
    3 D1:AC01 -  -  -  -  ;
    4 D1:AC01 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AC01 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC01 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC01 -  -  -  -  ;		Reviewed :	None
    8 D1:AC01 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AC01 -  -  -  -  ;
   10 D1:AC01 -  -  -  -  ; ***************************************************************************************
   11 D1:AC01 -  -  -  -  ; ***************************************************************************************
   12 D1:AC01 -  -  -  -  
   13 D1:AC01 -  -  -  -  ; ***************************************************************************************
   14 D1:AC01 -  -  -  -  ;
   15 D1:AC01 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AC01 -  -  -  -  ;
   17 D1:AC01 -  -  -  -  ; ***************************************************************************************
   18 D1:AC01 -  -  -  -  
   19 D1:AC01 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AC01 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AC02 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AC02 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AC03 -  -  -  -  		;
   24 D1:AC03 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AC03 -  -  -  -  		;
   26 D1:AC03 CD 0F AD D1 		call 	EvaluateTerm 				; get term
   27 D1:AC07 -  -  -  -  		;
   28 D1:AC07 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AC07 -  -  -  -  		;
   30 D1:AC07 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AC08 -  -  -  -  _EAPLoop:
   32 D1:AC08 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AC0B FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AC0D D8 -  -  -  		ret 	c
   35 D1:AC0E FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AC10 D0 -  -  -  		ret 	nc
   37 D1:AC11 -  -  -  -  		;
   38 D1:AC11 -  -  -  -  		; 		Get the precedence.
   39 D1:AC11 -  -  -  -  		;
   40 D1:AC11 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AC12 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AC14 21 E0 B0 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AC18 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AC19 6F -  -  -  		ld 		l,a
   45 D1:AC1A 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AC1B E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AC1C -  -  -  -  		;
   48 D1:AC1C -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AC1C -  -  -  -  		;
   50 D1:AC1C 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AC1D BB -  -  -  		cp 		e
   52 D1:AC1E D0 -  -  -  		ret 	nc
   53 D1:AC1F -  -  -  -  
   54 D1:AC1F -  -  -  -  		;
   55 D1:AC1F -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AC1F -  -  -  -  		;
   57 D1:AC1F D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AC20 -  -  -  -  		;
   59 D1:AC20 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AC23 F5 -  -  -  		push 	af
   61 D1:AC24 -  -  -  -  		;
   62 D1:AC24 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AC25 D9 -  -  -  		exx 								; save HL'
   64 D1:AC26 E5 -  -  -  		push 	hl
   65 D1:AC27 D9 -  -  -  		exx 								
   66 D1:AC28 E5 -  -  -  		push 	hl 							; save HL
   67 D1:AC29 -  -  -  -  		;
   68 D1:AC29 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AC2B -  -  -  -  		;
   70 D1:AC2B -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AC2B -  -  -  -  		;
   72 D1:AC2B 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AC2C CD 02 AC D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AC30 -  -  -  -  		;
   75 D1:AC30 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AC30 -  -  -  -  		;
   77 D1:AC30 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AC31 -  -  -  -  
   79 D1:AC31 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AC32 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AC33 D9 -  -  -  		exx
   82 D1:AC34 EB -  -  -  		ex 		de,hl
   83 D1:AC35 E1 -  -  -  		pop 	hl
   84 D1:AC36 D9 -  -  -  		exx
   85 D1:AC37 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AC38 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AC39 -  -  -  -  		;
   88 D1:AC39 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AC39 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AC39 -  -  -  -  		;
   91 D1:AC39 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AC3A -  -  -  -  		;
   93 D1:AC3A -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AC3A -  -  -  -  		;
   95 D1:AC3A D5 -  -  -  		push 	de
   96 D1:AC3B E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AC3C E6 7F 21 00 
              00 00 6F 29 
              29 11 1E B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AC51 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AC52 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AC53 CD D9 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AC57 -  -  -  -  		;
  102 D1:AC57 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AC58 -  -  -  -  		;
  104 D1:AC58 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AC5A -  -  -  -  
  106 D1:AC5A -  -  -  -  ; ***************************************************************************************
  107 D1:AC5A -  -  -  -  ;
  108 D1:AC5A -  -  -  -  ;									Changes and Updates
  109 D1:AC5A -  -  -  -  ;
  110 D1:AC5A -  -  -  -  ; ***************************************************************************************
  111 D1:AC5A -  -  -  -  ;
  112 D1:AC5A -  -  -  -  ;		Date			Notes
  113 D1:AC5A -  -  -  -  ;		==== 			=====
  114 D1:AC5A -  -  -  -  ;
  115 D1:AC5A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC5A -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AC5A -  -  -  -  ; ***************************************************************************************
    2 D1:AC5A -  -  -  -  ; ***************************************************************************************
    3 D1:AC5A -  -  -  -  ;
    4 D1:AC5A -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AC5A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC5A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC5A -  -  -  -  ;		Reviewed :	No
    8 D1:AC5A -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AC5A -  -  -  -  ;
   10 D1:AC5A -  -  -  -  ; ***************************************************************************************
   11 D1:AC5A -  -  -  -  ; ***************************************************************************************
   12 D1:AC5A -  -  -  -  
   13 D1:AC5A -  -  -  -  ; ***************************************************************************************
   14 D1:AC5A -  -  -  -  ;
   15 D1:AC5A -  -  -  -  ; 								Evaluate an integer term
   16 D1:AC5A -  -  -  -  ;
   17 D1:AC5A -  -  -  -  ; ***************************************************************************************
   18 D1:AC5A -  -  -  -  
   19 D1:AC5A -  -  -  -  EvaluateIntegerTerm:
   20 D1:AC5A CD 0F AD D1 		call 	EvaluateTerm
   21 D1:AC5E CD B3 AC D1 		call 	DeReference
   22 D1:AC62 CB 41 -  -  		bit 	CIsString,c
   23 D1:AC64 C8 -  -  -  		ret 	z
   24 D1:AC65 C3 AB AA D1 		jp 		TypeMismatch
   25 D1:AC69 -  -  -  -  
   26 D1:AC69 -  -  -  -  ; ***************************************************************************************
   27 D1:AC69 -  -  -  -  ;
   28 D1:AC69 -  -  -  -  ; 								Evaluate a string term
   29 D1:AC69 -  -  -  -  ;
   30 D1:AC69 -  -  -  -  ; ***************************************************************************************
   31 D1:AC69 -  -  -  -  
   32 D1:AC69 -  -  -  -  EvaluateStringTerm:
   33 D1:AC69 CD 0F AD D1 		call 	EvaluateTerm
   34 D1:AC6D CD B3 AC D1 		call 	DeReference
   35 D1:AC71 CB 41 -  -  		bit 	CIsString,c
   36 D1:AC73 C0 -  -  -  		ret 	nz
   37 D1:AC74 C3 AB AA D1 		jp 		TypeMismatch
   38 D1:AC78 -  -  -  -  
   39 D1:AC78 -  -  -  -  ; ***************************************************************************************
   40 D1:AC78 -  -  -  -  ;
   41 D1:AC78 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AC78 -  -  -  -  ;
   43 D1:AC78 -  -  -  -  ; ***************************************************************************************
   44 D1:AC78 -  -  -  -  
   45 D1:AC78 -  -  -  -  EvaluateValue:
   46 D1:AC78 CD 01 AC D1 		call 	EvaluateAtPrecedence0
   47 D1:AC7C C3 B3 AC D1 		jp 		Dereference
   48 D1:AC80 -  -  -  -  
   49 D1:AC80 -  -  -  -  ; ***************************************************************************************
   50 D1:AC80 -  -  -  -  ;
   51 D1:AC80 -  -  -  -  ; 									Evaluate a number
   52 D1:AC80 -  -  -  -  ;
   53 D1:AC80 -  -  -  -  ; ***************************************************************************************
   54 D1:AC80 -  -  -  -  
   55 D1:AC80 -  -  -  -  EvaluateInteger:
   56 D1:AC80 CD 78 AC D1 		call 	EvaluateValue
   57 D1:AC84 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AC86 C8 -  -  -  		ret 	z
   59 D1:AC87 C3 AB AA D1 		jp 		TypeMismatch
   60 D1:AC8B -  -  -  -  
   61 D1:AC8B -  -  -  -  ; ***************************************************************************************
   62 D1:AC8B -  -  -  -  ;
   63 D1:AC8B -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AC8B -  -  -  -  ;
   65 D1:AC8B -  -  -  -  ; ***************************************************************************************
   66 D1:AC8B -  -  -  -  
   67 D1:AC8B -  -  -  -  Evaluate8BitInteger:
   68 D1:AC8B CD 80 AC D1 		call 	EvaluateInteger
   69 D1:AC8F D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AC90 7C -  -  -  		ld 		a,h
   71 D1:AC91 B5 -  -  -  		or 		l
   72 D1:AC92 D9 -  -  -  		exx 	
   73 D1:AC93 B4 -  -  -  		or 		h
   74 D1:AC94 C2 B1 AA D1 		jp 		nz,BadValue
   75 D1:AC98 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AC99 C9 -  -  -  		ret
   77 D1:AC9A -  -  -  -  		
   78 D1:AC9A -  -  -  -  ; ***************************************************************************************
   79 D1:AC9A -  -  -  -  ;
   80 D1:AC9A -  -  -  -  ; 									Evaluate a string
   81 D1:AC9A -  -  -  -  ;
   82 D1:AC9A -  -  -  -  ; ***************************************************************************************
   83 D1:AC9A -  -  -  -  
   84 D1:AC9A -  -  -  -  EvaluateStringOnly:
   85 D1:AC9A CD 78 AC D1 		call 	EvaluateValue
   86 D1:AC9E CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:ACA0 CA AB AA D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:ACA4 C9 -  -  -  		ret
   89 D1:ACA5 -  -  -  -  
   90 D1:ACA5 -  -  -  -  ; ***************************************************************************************
   91 D1:ACA5 -  -  -  -  ;
   92 D1:ACA5 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:ACA5 -  -  -  -  ;
   94 D1:ACA5 -  -  -  -  ; ***************************************************************************************
   95 D1:ACA5 -  -  -  -  
   96 D1:ACA5 -  -  -  -  Return8BitConstant:
   97 D1:ACA5 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:ACA9 6F -  -  -  		ld 		l,a
   99 D1:ACAA -  -  -  -  Return16BitConstant:
  100 D1:ACAA D9 -  -  -  		exx 								; clear HL'
  101 D1:ACAB 21 00 00 00 		ld 		hl,0
  102 D1:ACAF D9 -  -  -  		exx
  103 D1:ACB0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:ACB2 C9 -  -  -  		ret
  105 D1:ACB3 -  -  -  -  
  106 D1:ACB3 -  -  -  -  ; ***************************************************************************************
  107 D1:ACB3 -  -  -  -  ;
  108 D1:ACB3 -  -  -  -  ;									Changes and Updates
  109 D1:ACB3 -  -  -  -  ;
  110 D1:ACB3 -  -  -  -  ; ***************************************************************************************
  111 D1:ACB3 -  -  -  -  ;
  112 D1:ACB3 -  -  -  -  ;		Date			Notes
  113 D1:ACB3 -  -  -  -  ;		==== 			=====
  114 D1:ACB3 -  -  -  -  ;
  115 D1:ACB3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:ACB3 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:ACB3 -  -  -  -  ; ***************************************************************************************
    2 D1:ACB3 -  -  -  -  ; ***************************************************************************************
    3 D1:ACB3 -  -  -  -  ;
    4 D1:ACB3 -  -  -  -  ;		Name : 		reference.asm
    5 D1:ACB3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACB3 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:ACB3 -  -  -  -  ;		Reviewed :	No
    8 D1:ACB3 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:ACB3 -  -  -  -  ;
   10 D1:ACB3 -  -  -  -  ; ***************************************************************************************
   11 D1:ACB3 -  -  -  -  ; ***************************************************************************************
   12 D1:ACB3 -  -  -  -  
   13 D1:ACB3 -  -  -  -  ; ***************************************************************************************
   14 D1:ACB3 -  -  -  -  ;
   15 D1:ACB3 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:ACB3 -  -  -  -  ;
   17 D1:ACB3 -  -  -  -  ; ***************************************************************************************
   18 D1:ACB3 -  -  -  -  
   19 D1:ACB3 -  -  -  -  Dereference:
   20 D1:ACB3 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:ACB5 C8 -  -  -  		ret 	z
   22 D1:ACB6 -  -  -  -  
   23 D1:ACB6 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:ACB8 -  -  -  -  		
   25 D1:ACB8 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:ACBA 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:ACBC -  -  -  -  
   28 D1:ACBC CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:ACBE 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:ACC0 -  -  -  -  
   31 D1:ACC0 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:ACC1 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:ACC3 D9 -  -  -  		exx
   34 D1:ACC4 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:ACC5 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:ACC6 23 -  -  -  		inc  	hl
   37 D1:ACC7 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:ACC9 D9 -  -  -  		exx 								; fix back
   39 D1:ACCA C9 -  -  -  		ret
   40 D1:ACCB -  -  -  -  
   41 D1:ACCB -  -  -  -  _DeRefByte:		
   42 D1:ACCB 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:ACCC 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:ACD0 6F -  -  -  		ld	 	l,a
   45 D1:ACD1 D9 -  -  -  		exx
   46 D1:ACD2 21 00 00 00 		ld 		hl,$0000
   47 D1:ACD6 D9 -  -  -  		exx
   48 D1:ACD7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:ACD9 C9 -  -  -  		ret
   50 D1:ACDA -  -  -  -  
   51 D1:ACDA -  -  -  -  _DRInternal:
   52 D1:ACDA 3E 04 C3 4D 
              AA D1 -  -  		ERR_DISABLED
   53 D1:ACE0 -  -  -  -  
   54 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   55 D1:ACE0 -  -  -  -  ;
   56 D1:ACE0 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:ACE0 -  -  -  -  ;
   58 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   59 D1:ACE0 -  -  -  -  
   60 D1:ACE0 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:ACE0 -  -  -  -  		#ifdef EZ80
   62 D1:ACE0 22 DF A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:ACE4 D9 -  -  -  		exx
   64 D1:ACE5 22 E1 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:ACE9 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:ACED D9 -  -  -  		exx
   67 D1:ACEE 2A DF A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ACF2 -  -  -  -  		#endif
   69 D1:ACF2 C9 -  -  -  		ret
   70 D1:ACF3 -  -  -  -  
   71 D1:ACF3 -  -  -  -  ; ***************************************************************************************
   72 D1:ACF3 -  -  -  -  ;
   73 D1:ACF3 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ACF3 -  -  -  -  ;
   75 D1:ACF3 -  -  -  -  ; ***************************************************************************************
   76 D1:ACF3 -  -  -  -  
   77 D1:ACF3 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ACF3 -  -  -  -  		#ifdef EZ80
   79 D1:ACF3 22 DF A8 D1 		ld 		(AConvert),hl
   80 D1:ACF7 21 00 00 00 		ld 		hl,$0000
   81 D1:ACFB 22 E2 A8 D1 		ld 		(AConvert+3),hl
   82 D1:ACFF D9 -  -  -  		exx
   83 D1:AD00 2A E1 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AD04 D9 -  -  -  		exx
   85 D1:AD05 AF -  -  -  		xor 	a
   86 D1:AD06 32 E1 A8 D1 		ld 		(AConvert+2),a
   87 D1:AD0A 2A DF A8 D1 		ld 		hl,(AConvert)
   88 D1:AD0E -  -  -  -  		#endif
   89 D1:AD0E C9 -  -  -  		ret
   90 D1:AD0F -  -  -  -  
   91 D1:AD0F -  -  -  -  ; ***************************************************************************************
   92 D1:AD0F -  -  -  -  ;
   93 D1:AD0F -  -  -  -  ;									Changes and Updates
   94 D1:AD0F -  -  -  -  ;
   95 D1:AD0F -  -  -  -  ; ***************************************************************************************
   96 D1:AD0F -  -  -  -  ;
   97 D1:AD0F -  -  -  -  ;		Date			Notes
   98 D1:AD0F -  -  -  -  ;		==== 			=====
   99 D1:AD0F -  -  -  -  ;
  100 D1:AD0F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD0F -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AD0F -  -  -  -  ; ***************************************************************************************
    2 D1:AD0F -  -  -  -  ; ***************************************************************************************
    3 D1:AD0F -  -  -  -  ;
    4 D1:AD0F -  -  -  -  ;		Name : 		term.asm
    5 D1:AD0F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD0F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD0F -  -  -  -  ;		Reviewed :	No
    8 D1:AD0F -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AD0F -  -  -  -  ;
   10 D1:AD0F -  -  -  -  ; ***************************************************************************************
   11 D1:AD0F -  -  -  -  ; ***************************************************************************************
   12 D1:AD0F -  -  -  -  
   13 D1:AD0F -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AD0F             		add_hlhl_16
   15 D1:AD0F             		exx
   16 D1:AD0F             		adc_hlhl_16
   17 D1:AD0F             		exx
   18 D1:AD0F             #endmacro
   19 D1:AD0F -  -  -  -  
   20 D1:AD0F -  -  -  -  ; ***************************************************************************************
   21 D1:AD0F -  -  -  -  ;
   22 D1:AD0F -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AD0F -  -  -  -  ;
   24 D1:AD0F -  -  -  -  ; ***************************************************************************************
   25 D1:AD0F -  -  -  -  ;
   26 D1:AD0F -  -  -  -  ; 		Terms can be:
   27 D1:AD0F -  -  -  -  ;
   28 D1:AD0F -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AD0F -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AD0F -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AD0F -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AD0F -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AD0F -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AD0F -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AD0F -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AD0F -  -  -  -  ; 														reference of some sort.
   37 D1:AD0F -  -  -  -  ;
   38 D1:AD0F -  -  -  -  ; ***************************************************************************************
   39 D1:AD0F -  -  -  -  
   40 D1:AD0F -  -  -  -  EvaluateTerm:		
   41 D1:AD0F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AD11 D9 -  -  -  		exx
   43 D1:AD12 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AD16 D9 -  -  -  		exx
   45 D1:AD17 21 00 00 00 		ld 		hl,$0000		
   46 D1:AD1B -  -  -  -  		;
   47 D1:AD1B DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AD1E FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AD20 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AD22 DA DA AD D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AD26 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AD28 C2 7E AD D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AD2C -  -  -  -  		;
   54 D1:AD2C -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AD2C -  -  -  -  		;
   56 D1:AD2C -  -  -  -  _ETIntegerConstant:
   57 D1:AD2C -  -  -  -  		;
   58 D1:AD2C -  -  -  -  _ETIntegerLoop:		
   59 D1:AD2C DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AD2F E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AD31 B5 -  -  -  		or 		l 							; or into L
   62 D1:AD32 6F -  -  -  		ld 		l,a
   63 D1:AD33 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AD35 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AD38 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AD3A FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AD3C D8 -  -  -  		ret 	c
   68 D1:AD3D -  -  -  -  
   69 D1:AD3D 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AD44 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AD4B 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AD52 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AD59 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AD60 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AD67 -  -  -  -  
   76 D1:AD67 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AD69 -  -  -  -  		;
   78 D1:AD69 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AD69 -  -  -  -  		;
   80 D1:AD69 -  -  -  -  _ETStringMarker:		
   81 D1:AD69 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AD6B DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AD6D DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AD6F E1 -  -  -  		pop 	hl
   85 D1:AD70 11 00 00 00 		ld 		de,$0000
   86 D1:AD74 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AD77 DD 19 -  -  		add 	ix,de
   88 D1:AD79 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AD7B 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AD7D C9 -  -  -  		ret
   91 D1:AD7E -  -  -  -  		;
   92 D1:AD7E -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AD7E -  -  -  -  		;
   94 D1:AD7E -  -  -  -  _ETFoundKeyword:
   95 D1:AD7E DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AD80 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AD82 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AD84 FE A3 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AD86 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AD88 -  -  -  -  		;
  101 D1:AD88 -  -  -  -  		;		Unary group 0
  102 D1:AD88 -  -  -  -  		;
  103 D1:AD88 E6 7F 21 00 
              00 00 6F 29 
              29 11 1E B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AD9D C3 D9 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:ADA1 -  -  -  -  
  106 D1:ADA1 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:ADA1 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:ADA3 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:ADA5 -  -  -  -  		;
  110 D1:ADA5 -  -  -  -  		; 		- term
  111 D1:ADA5 -  -  -  -  		;
  112 D1:ADA5 CD 5A AC D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:ADA9 CD F0 AB D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:ADAD C9 -  -  -  		ret
  115 D1:ADAE -  -  -  -  		;
  116 D1:ADAE -  -  -  -  		;		! ? indirection check
  117 D1:ADAE -  -  -  -  		;
  118 D1:ADAE -  -  -  -  _ETCheckIndirection:	
  119 D1:ADAE FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:ADB0 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:ADB2 FE 83 -  -  		cp 		KWD_PLING
  122 D1:ADB4 C2 B7 AA D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:ADB8 -  -  -  -  		;
  124 D1:ADB8 -  -  -  -  		; 		! ? indirection
  125 D1:ADB8 -  -  -  -  		;
  126 D1:ADB8 -  -  -  -  _ETIndirection:
  127 D1:ADB8 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:ADB9 CD 0F AD D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:ADBD CD B3 AC D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:ADC1 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:ADC3 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:ADC5 CD E0 AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:ADC9 F1 -  -  -  		pop 	af 							; get type back
  134 D1:ADCA 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:ADCC CB F9 -  -  		set 	CIsReference,c
  136 D1:ADCE FE 83 -  -  		cp 		KWD_PLING
  137 D1:ADD0 C8 -  -  -  		ret 	z
  138 D1:ADD1 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:ADD3 C9 -  -  -  		ret
  140 D1:ADD4 -  -  -  -  _ETStringIndirect:
  141 D1:ADD4 3E 02 C3 4D 
              AA D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:ADDA -  -  -  -  		;
  143 D1:ADDA -  -  -  -  		; 		Found an identifier.
  144 D1:ADDA -  -  -  -  		;
  145 D1:ADDA -  -  -  -  _ETVariable:
  146 D1:ADDA 3E 0E C3 4D 
              AA D1 -  -  		ERR_TODO
  147 D1:ADE0 3E 0F C3 4D 
              AA D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 D1:ADE6 -  -  -  -  		
  149 D1:ADE6 -  -  -  -  ; ***************************************************************************************
  150 D1:ADE6 -  -  -  -  ;
  151 D1:ADE6 -  -  -  -  ;									Changes and Updates
  152 D1:ADE6 -  -  -  -  ;
  153 D1:ADE6 -  -  -  -  ; ***************************************************************************************
  154 D1:ADE6 -  -  -  -  ;
  155 D1:ADE6 -  -  -  -  ;		Date			Notes
  156 D1:ADE6 -  -  -  -  ;		==== 			=====
  157 D1:ADE6 -  -  -  -  ;
  158 D1:ADE6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:ADE6 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:ADE6 -  -  -  -  ; ***************************************************************************************
    2 D1:ADE6 -  -  -  -  ; ***************************************************************************************
    3 D1:ADE6 -  -  -  -  ;
    4 D1:ADE6 -  -  -  -  ;		Name : 		abs.asm
    5 D1:ADE6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADE6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADE6 -  -  -  -  ;		Reviewed :	No
    8 D1:ADE6 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:ADE6 -  -  -  -  ;
   10 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   11 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   12 D1:ADE6 -  -  -  -  
   13 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   14 D1:ADE6 -  -  -  -  ;
   15 D1:ADE6 -  -  -  -  ;								abs( unary function
   16 D1:ADE6 -  -  -  -  ;
   17 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   18 D1:ADE6 -  -  -  -  
   19 D1:ADE6 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:ADE6 CD 5A AC D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:ADEA D9 -  -  -  		exx 								; test MSB
   22 D1:ADEB CB 7C -  -  		bit 	7,h
   23 D1:ADED D9 -  -  -  		exx
   24 D1:ADEE C4 F0 AB D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:ADF2 C9 -  -  -  		ret
   26 D1:ADF3 -  -  -  -  
   27 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   28 D1:ADF3 -  -  -  -  ;
   29 D1:ADF3 -  -  -  -  ;									Changes and Updates
   30 D1:ADF3 -  -  -  -  ;
   31 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   32 D1:ADF3 -  -  -  -  ;
   33 D1:ADF3 -  -  -  -  ;		Date			Notes
   34 D1:ADF3 -  -  -  -  ;		==== 			=====
   35 D1:ADF3 -  -  -  -  ;
   36 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   37 D1:ADF3 -  -  -  -  		
Listing for file "_build.asm"
   32 D1:ADF3 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:ADF3 -  -  -  -  ; ***************************************************************************************
    2 D1:ADF3 -  -  -  -  ; ***************************************************************************************
    3 D1:ADF3 -  -  -  -  ;
    4 D1:ADF3 -  -  -  -  ;		Name : 		asc.asm
    5 D1:ADF3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADF3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADF3 -  -  -  -  ;		Reviewed :	No
    8 D1:ADF3 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:ADF3 -  -  -  -  ;
   10 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   11 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   12 D1:ADF3 -  -  -  -  
   13 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   14 D1:ADF3 -  -  -  -  ;
   15 D1:ADF3 -  -  -  -  ;								Asc unary function
   16 D1:ADF3 -  -  -  -  ;
   17 D1:ADF3 -  -  -  -  ; ***************************************************************************************
   18 D1:ADF3 -  -  -  -  
   19 D1:ADF3 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:ADF3 CD 69 AC D1 		call	EvaluateStringTerm			; Get string
   21 D1:ADF7 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:ADF8 C3 A5 AC D1 		jp 		Return8BitConstant
   23 D1:ADFC -  -  -  -  
   24 D1:ADFC -  -  -  -  ; ***************************************************************************************
   25 D1:ADFC -  -  -  -  ;
   26 D1:ADFC -  -  -  -  ;									Changes and Updates
   27 D1:ADFC -  -  -  -  ;
   28 D1:ADFC -  -  -  -  ; ***************************************************************************************
   29 D1:ADFC -  -  -  -  ;
   30 D1:ADFC -  -  -  -  ;		Date			Notes
   31 D1:ADFC -  -  -  -  ;		==== 			=====
   32 D1:ADFC -  -  -  -  ;
   33 D1:ADFC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:ADFC -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:ADFC -  -  -  -  ; ***************************************************************************************
    2 D1:ADFC -  -  -  -  ; ***************************************************************************************
    3 D1:ADFC -  -  -  -  ;
    4 D1:ADFC -  -  -  -  ;		Name : 		chr.asm
    5 D1:ADFC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADFC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADFC -  -  -  -  ;		Reviewed :	No
    8 D1:ADFC -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:ADFC -  -  -  -  ;
   10 D1:ADFC -  -  -  -  ; ***************************************************************************************
   11 D1:ADFC -  -  -  -  ; ***************************************************************************************
   12 D1:ADFC -  -  -  -  
   13 D1:ADFC -  -  -  -  ; ***************************************************************************************
   14 D1:ADFC -  -  -  -  ;
   15 D1:ADFC -  -  -  -  ;								Chr$() unary function
   16 D1:ADFC -  -  -  -  ;
   17 D1:ADFC -  -  -  -  ; ***************************************************************************************
   18 D1:ADFC -  -  -  -  
   19 D1:ADFC -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:ADFC CD 25 AA D1 		call 	CheckDollar
   21 D1:AE00 CD 5A AC D1 		call 	EvaluateIntegerTerm
   22 D1:AE04 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AE05 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AE07 21 06 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AE0B 36 0D -  -  		ld 		(hl),13
   26 D1:AE0D 2B -  -  -  		dec 	hl
   27 D1:AE0E 77 -  -  -  		ld 		(hl),a
   28 D1:AE0F C9 -  -  -  		ret
   29 D1:AE10 -  -  -  -  
   30 D1:AE10 -  -  -  -  ; ***************************************************************************************
   31 D1:AE10 -  -  -  -  ;
   32 D1:AE10 -  -  -  -  ;									Changes and Updates
   33 D1:AE10 -  -  -  -  ;
   34 D1:AE10 -  -  -  -  ; ***************************************************************************************
   35 D1:AE10 -  -  -  -  ;
   36 D1:AE10 -  -  -  -  ;		Date			Notes
   37 D1:AE10 -  -  -  -  ;		==== 			=====
   38 D1:AE10 -  -  -  -  ;
   39 D1:AE10 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AE10 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AE10 -  -  -  -  ; ***************************************************************************************
    2 D1:AE10 -  -  -  -  ; ***************************************************************************************
    3 D1:AE10 -  -  -  -  ;
    4 D1:AE10 -  -  -  -  ;		Name : 		len.asm
    5 D1:AE10 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE10 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE10 -  -  -  -  ;		Reviewed :	None
    8 D1:AE10 -  -  -  -  ;		Purpose :	String Length
    9 D1:AE10 -  -  -  -  ;
   10 D1:AE10 -  -  -  -  ; ***************************************************************************************
   11 D1:AE10 -  -  -  -  ; ***************************************************************************************
   12 D1:AE10 -  -  -  -  
   13 D1:AE10 -  -  -  -  ; ***************************************************************************************
   14 D1:AE10 -  -  -  -  ;
   15 D1:AE10 -  -  -  -  ;								Len unary function
   16 D1:AE10 -  -  -  -  ;
   17 D1:AE10 -  -  -  -  ; ***************************************************************************************
   18 D1:AE10 -  -  -  -  
   19 D1:AE10 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AE10 CD 69 AC D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AE14 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AE15 CD 58 AB D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AE19 -  -  -  -  _ULCount:
   24 D1:AE19 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AE1A FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AE1C D8 -  -  -  		ret 	c
   27 D1:AE1D 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AE1E 13 -  -  -  		inc 	de
   29 D1:AE1F 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AE21 -  -  -  -  
   31 D1:AE21 -  -  -  -  ; ***************************************************************************************
   32 D1:AE21 -  -  -  -  ;
   33 D1:AE21 -  -  -  -  ;									Changes and Updates
   34 D1:AE21 -  -  -  -  ;
   35 D1:AE21 -  -  -  -  ; ***************************************************************************************
   36 D1:AE21 -  -  -  -  ;
   37 D1:AE21 -  -  -  -  ;		Date			Notes
   38 D1:AE21 -  -  -  -  ;		==== 			=====
   39 D1:AE21 -  -  -  -  ;
   40 D1:AE21 -  -  -  -  ; ***************************************************************************************
   41 D1:AE21 -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AE21 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AE21 -  -  -  -  ; ***************************************************************************************
    2 D1:AE21 -  -  -  -  ; ***************************************************************************************
    3 D1:AE21 -  -  -  -  ;
    4 D1:AE21 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AE21 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE21 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE21 -  -  -  -  ;		Reviewed :	No
    8 D1:AE21 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AE21 -  -  -  -  ;
   10 D1:AE21 -  -  -  -  ; ***************************************************************************************
   11 D1:AE21 -  -  -  -  ; ***************************************************************************************
   12 D1:AE21 -  -  -  -  
   13 D1:AE21 -  -  -  -  ; ***************************************************************************************
   14 D1:AE21 -  -  -  -  ;
   15 D1:AE21 -  -  -  -  ;								Str$() unary function
   16 D1:AE21 -  -  -  -  ;
   17 D1:AE21 -  -  -  -  ; ***************************************************************************************
   18 D1:AE21 -  -  -  -  
   19 D1:AE21 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AE21 CD 5A AC D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AE25 CD E0 AC D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AE29 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AE2B C9 -  -  -  		ret
   24 D1:AE2C -  -  -  -  
   25 D1:AE2C -  -  -  -  ; ***************************************************************************************
   26 D1:AE2C -  -  -  -  ;
   27 D1:AE2C -  -  -  -  ;									Changes and Updates
   28 D1:AE2C -  -  -  -  ;
   29 D1:AE2C -  -  -  -  ; ***************************************************************************************
   30 D1:AE2C -  -  -  -  ;
   31 D1:AE2C -  -  -  -  ;		Date			Notes
   32 D1:AE2C -  -  -  -  ;		==== 			=====
   33 D1:AE2C -  -  -  -  ;
   34 D1:AE2C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AE2C -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AE2C -  -  -  -  ; ***************************************************************************************
    2 D1:AE2C -  -  -  -  ; ***************************************************************************************
    3 D1:AE2C -  -  -  -  ;
    4 D1:AE2C -  -  -  -  ;		Name : 		not.asm
    5 D1:AE2C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE2C -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AE2C -  -  -  -  ;		Reviewed :	No
    8 D1:AE2C -  -  -  -  ;		Purpose :	Logical not
    9 D1:AE2C -  -  -  -  ;
   10 D1:AE2C -  -  -  -  ; ***************************************************************************************
   11 D1:AE2C -  -  -  -  ; ***************************************************************************************
   12 D1:AE2C -  -  -  -  
   13 D1:AE2C -  -  -  -  ; ***************************************************************************************
   14 D1:AE2C -  -  -  -  ;
   15 D1:AE2C -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AE2C -  -  -  -  ;
   17 D1:AE2C -  -  -  -  ; ***************************************************************************************
   18 D1:AE2C -  -  -  -  
   19 D1:AE2C -  -  -  -  Unary_Not:		;; [not]
   20 D1:AE2C CD 5A AC D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AE30 CD 39 AE D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AE34 CD 39 AE D1 		call 	__UNSwap		
   23 D1:AE38 C9 -  -  -  		ret
   24 D1:AE39 -  -  -  -  
   25 D1:AE39 -  -  -  -  __UNSwap:
   26 D1:AE39 7C -  -  -  		ld 		a,h
   27 D1:AE3A 2F -  -  -  		cpl
   28 D1:AE3B 67 -  -  -  		ld 		h,a
   29 D1:AE3C 7D -  -  -  		ld 		a,l
   30 D1:AE3D 2F -  -  -  		cpl 	
   31 D1:AE3E 6F -  -  -  		ld 		l,a
   32 D1:AE3F D9 -  -  -  		exx
   33 D1:AE40 C9 -  -  -  		ret
   34 D1:AE41 -  -  -  -  
   35 D1:AE41 -  -  -  -  ; ***************************************************************************************
   36 D1:AE41 -  -  -  -  ;
   37 D1:AE41 -  -  -  -  ;									Changes and Updates
   38 D1:AE41 -  -  -  -  ;
   39 D1:AE41 -  -  -  -  ; ***************************************************************************************
   40 D1:AE41 -  -  -  -  ;
   41 D1:AE41 -  -  -  -  ;		Date			Notes
   42 D1:AE41 -  -  -  -  ;		==== 			=====
   43 D1:AE41 -  -  -  -  ;
   44 D1:AE41 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AE41 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AE41 -  -  -  -  ; ***************************************************************************************
    2 D1:AE41 -  -  -  -  ; ***************************************************************************************
    3 D1:AE41 -  -  -  -  ;
    4 D1:AE41 -  -  -  -  ;		Name : 		page.asm
    5 D1:AE41 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE41 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE41 -  -  -  -  ;		Reviewed :	No
    8 D1:AE41 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AE41 -  -  -  -  ;
   10 D1:AE41 -  -  -  -  ; ***************************************************************************************
   11 D1:AE41 -  -  -  -  ; ***************************************************************************************
   12 D1:AE41 -  -  -  -  
   13 D1:AE41 -  -  -  -  ; ***************************************************************************************
   14 D1:AE41 -  -  -  -  ;
   15 D1:AE41 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AE41 -  -  -  -  ;
   17 D1:AE41 -  -  -  -  ; ***************************************************************************************
   18 D1:AE41 -  -  -  -  
   19 D1:AE41 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AE41 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AE45 D9 -  -  -  			exx
   22 D1:AE46 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AE4A D9 -  -  -  			exx
   24 D1:AE4B 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AE4D C9 -  -  -  			ret
   26 D1:AE4E -  -  -  -  
   27 D1:AE4E -  -  -  -  ; ***************************************************************************************
   28 D1:AE4E -  -  -  -  ;
   29 D1:AE4E -  -  -  -  ;									Changes and Updates
   30 D1:AE4E -  -  -  -  ;
   31 D1:AE4E -  -  -  -  ; ***************************************************************************************
   32 D1:AE4E -  -  -  -  ;
   33 D1:AE4E -  -  -  -  ;		Date			Notes
   34 D1:AE4E -  -  -  -  ;		==== 			=====
   35 D1:AE4E -  -  -  -  ;
   36 D1:AE4E -  -  -  -  ; ***************************************************************************************
   37 D1:AE4E -  -  -  -  			
Listing for file "_build.asm"
   38 D1:AE4E -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AE4E -  -  -  -  ; ***************************************************************************************
    2 D1:AE4E -  -  -  -  ; ***************************************************************************************
    3 D1:AE4E -  -  -  -  ;
    4 D1:AE4E -  -  -  -  ;		Name : 		random.asm
    5 D1:AE4E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE4E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE4E -  -  -  -  ;		Reviewed :	No
    8 D1:AE4E -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AE4E -  -  -  -  ;
   10 D1:AE4E -  -  -  -  ; ***************************************************************************************
   11 D1:AE4E -  -  -  -  ; ***************************************************************************************
   12 D1:AE4E -  -  -  -  
   13 D1:AE4E -  -  -  -  ; ***************************************************************************************
   14 D1:AE4E -  -  -  -  ;
   15 D1:AE4E -  -  -  -  ;								Random unary function
   16 D1:AE4E -  -  -  -  ;
   17 D1:AE4E -  -  -  -  ; ***************************************************************************************
   18 D1:AE4E -  -  -  -  
   19 D1:AE4E -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AE4E F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AE56 CD 5A AC D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AE5A D9 -  -  -  		exx 								; is it -ve
   23 D1:AE5B CB 7C -  -  		bit 	7,h
   24 D1:AE5D D9 -  -  -  		exx
   25 D1:AE5E 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AE60 22 E5 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AE64 D9 -  -  -  		exx
   28 D1:AE65 22 E9 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AE69 D9 -  -  -  		exx
   30 D1:AE6A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AE6C C9 -  -  -  		ret
   32 D1:AE6D -  -  -  -  _URDontSeed:		
   33 D1:AE6D -  -  -  -  
   34 D1:AE6D CD AD B4 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AE71 28 1C -  -  		jr 		z,_URFail
   36 D1:AE73 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AE74 D9 -  -  -  		exx
   38 D1:AE75 E5 -  -  -  		push 	hl
   39 D1:AE76 D9 -  -  -  		exx
   40 D1:AE77 -  -  -  -  		;
   41 D1:AE77 CD A0 AE D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AE7B D9 -  -  -  		exx
   43 D1:AE7C CD A0 AE D1 		call 	URandomHL
   44 D1:AE80 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AE82 D9 -  -  -  		exx
   46 D1:AE83 -  -  -  -  		;
   47 D1:AE83 D9 -  -  -  		exx 								; restore range.
   48 D1:AE84 D1 -  -  -  		pop 	de
   49 D1:AE85 D9 -  -  -  		exx
   50 D1:AE86 D1 -  -  -  		pop 	de
   51 D1:AE87 -  -  -  -  		;
   52 D1:AE87 CD 3E B3 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AE8B 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AE8C 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AE8E C9 -  -  -  		ret
   56 D1:AE8F -  -  -  -  _URFail:
   57 D1:AE8F 3E 03 C3 4D 
              AA D1 -  -  		ERR_BADVALUE
   58 D1:AE95 -  -  -  -  ; ***************************************************************************************
   59 D1:AE95 -  -  -  -  ;
   60 D1:AE95 -  -  -  -  ; 									Push RNG off zero
   61 D1:AE95 -  -  -  -  ;
   62 D1:AE95 -  -  -  -  ; ***************************************************************************************
   63 D1:AE95 -  -  -  -  
   64 D1:AE95 -  -  -  -  UnaryRandomInitialise:
   65 D1:AE95 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AE97 -  -  -  -  _URILoop:
   67 D1:AE97 C5 -  -  -  		push 	bc
   68 D1:AE98 CD A0 AE D1 		call 	URandomHL
   69 D1:AE9C C1 -  -  -  		pop 	bc
   70 D1:AE9D 10 F8 -  -  		djnz 	_URILoop
   71 D1:AE9F C9 -  -  -  		ret
   72 D1:AEA0 -  -  -  -  
   73 D1:AEA0 -  -  -  -  ; ***************************************************************************************
   74 D1:AEA0 -  -  -  -  ;
   75 D1:AEA0 -  -  -  -  ;							16 bit random number generator
   76 D1:AEA0 -  -  -  -  ;
   77 D1:AEA0 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AEA0 -  -  -  -  ;		Actual author unspecified.
   79 D1:AEA0 -  -  -  -  ;
   80 D1:AEA0 -  -  -  -  ; ***************************************************************************************
   81 D1:AEA0 -  -  -  -  
   82 D1:AEA0 -  -  -  -  URandomHL:
   83 D1:AEA0 2A E5 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AEA4 ED 5B E9 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AEA9 44 -  -  -  	    ld 		b,h
   86 D1:AEAA 4D -  -  -  	    ld 		c,l
   87 D1:AEAB 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AEB0 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AEB5 2C -  -  -  	    inc 	l
   90 D1:AEB6 09 -  -  -  	    add 	hl,bc
   91 D1:AEB7 22 E5 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:AEBB 2A E9 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:AEBF ED 5A -  -  	    adc 	hl,de
   94 D1:AEC1 22 E9 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:AEC5 EB -  -  -  	    ex 		de,hl
   96 D1:AEC6 2A ED A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:AECA ED 4B F1 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:AECF 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:AED4 ED 43 F1 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:AED9 9F -  -  -  	    sbc 	a,a
  101 D1:AEDA E6 C5 -  -  	    and 	%11000101
  102 D1:AEDC AD -  -  -  	    xor 	l
  103 D1:AEDD 6F -  -  -  	    ld 		l,a
  104 D1:AEDE 22 ED A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:AEE2 EB -  -  -  	    ex 		de,hl
  106 D1:AEE3 09 -  -  -  	    add 	hl,bc
  107 D1:AEE4 C9 -  -  -  	    ret		
  108 D1:AEE5 -  -  -  -  
  109 D1:AEE5 -  -  -  -  ; ***************************************************************************************
  110 D1:AEE5 -  -  -  -  ;
  111 D1:AEE5 -  -  -  -  ;									Changes and Updates
  112 D1:AEE5 -  -  -  -  ;
  113 D1:AEE5 -  -  -  -  ; ***************************************************************************************
  114 D1:AEE5 -  -  -  -  ;
  115 D1:AEE5 -  -  -  -  ;		Date			Notes
  116 D1:AEE5 -  -  -  -  ;		==== 			=====
  117 D1:AEE5 -  -  -  -  ;
  118 D1:AEE5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AEE5 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:AEE5 -  -  -  -  ; ***************************************************************************************
    2 D1:AEE5 -  -  -  -  ; ***************************************************************************************
    3 D1:AEE5 -  -  -  -  ;
    4 D1:AEE5 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:AEE5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEE5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEE5 -  -  -  -  ;		Reviewed :	No
    8 D1:AEE5 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:AEE5 -  -  -  -  ;
   10 D1:AEE5 -  -  -  -  ; ***************************************************************************************
   11 D1:AEE5 -  -  -  -  ; ***************************************************************************************
   12 D1:AEE5 -  -  -  -  
   13 D1:AEE5 -  -  -  -  ; ***************************************************************************************
   14 D1:AEE5 -  -  -  -  ;
   15 D1:AEE5 -  -  -  -  ;								sgn unary function
   16 D1:AEE5 -  -  -  -  ;
   17 D1:AEE5 -  -  -  -  ; ***************************************************************************************
   18 D1:AEE5 -  -  -  -  
   19 D1:AEE5 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:AEE5 CD 5A AC D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:AEE9 CD AD B4 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:AEED CA 58 AB D1 		jp 		z,UnaryInt32False
   23 D1:AEF1 D9 -  -  -  		exx
   24 D1:AEF2 CB 7C -  -  		bit 	7,h
   25 D1:AEF4 D9 -  -  -  		exx
   26 D1:AEF5 C2 54 AB D1 		jp 		nz,UnaryInt32True
   27 D1:AEF9 3E 01 -  -  		ld 		a,1
   28 D1:AEFB C3 A5 AC D1 		jp 		Return8BitConstant
   29 D1:AEFF -  -  -  -  
   30 D1:AEFF -  -  -  -  ; ***************************************************************************************
   31 D1:AEFF -  -  -  -  ;
   32 D1:AEFF -  -  -  -  ;									Changes and Updates
   33 D1:AEFF -  -  -  -  ;
   34 D1:AEFF -  -  -  -  ; ***************************************************************************************
   35 D1:AEFF -  -  -  -  ;
   36 D1:AEFF -  -  -  -  ;		Date			Notes
   37 D1:AEFF -  -  -  -  ;		==== 			=====
   38 D1:AEFF -  -  -  -  ;
   39 D1:AEFF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AEFF -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:AEFF -  -  -  -  ; ***************************************************************************************
    2 D1:AEFF -  -  -  -  ; ***************************************************************************************
    3 D1:AEFF -  -  -  -  ;
    4 D1:AEFF -  -  -  -  ;		Name : 		simple.asm
    5 D1:AEFF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEFF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEFF -  -  -  -  ;		Reviewed :	No
    8 D1:AEFF -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:AEFF -  -  -  -  ;
   10 D1:AEFF -  -  -  -  ; ***************************************************************************************
   11 D1:AEFF -  -  -  -  ; ***************************************************************************************
   12 D1:AEFF -  -  -  -  
   13 D1:AEFF -  -  -  -  ; ***************************************************************************************
   14 D1:AEFF -  -  -  -  ;
   15 D1:AEFF -  -  -  -  ;								( unary function (think about it)
   16 D1:AEFF -  -  -  -  ;
   17 D1:AEFF -  -  -  -  ; ***************************************************************************************
   18 D1:AEFF -  -  -  -  
   19 D1:AEFF -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:AEFF CD 01 AC D1 		call 	EvaluateAtPrecedence0
   21 D1:AF03 C3 17 AA D1 		jp  	CheckRightBracket
   22 D1:AF07 -  -  -  -  
   23 D1:AF07 -  -  -  -  ; ***************************************************************************************
   24 D1:AF07 -  -  -  -  ;
   25 D1:AF07 -  -  -  -  ;									Handle &x
   26 D1:AF07 -  -  -  -  ;
   27 D1:AF07 -  -  -  -  ; ***************************************************************************************
   28 D1:AF07 -  -  -  -  
   29 D1:AF07 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:AF07 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:AF0A E6 C0 -  -  		and 		$C0
   32 D1:AF0C FE 40 -  -  		cp 			$40
   33 D1:AF0E C2 B7 AA D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:AF12 C3 0F AD D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:AF16 -  -  -  -  
   36 D1:AF16 -  -  -  -  ; ***************************************************************************************
   37 D1:AF16 -  -  -  -  ;
   38 D1:AF16 -  -  -  -  ;									Changes and Updates
   39 D1:AF16 -  -  -  -  ;
   40 D1:AF16 -  -  -  -  ; ***************************************************************************************
   41 D1:AF16 -  -  -  -  ;
   42 D1:AF16 -  -  -  -  ;		Date			Notes
   43 D1:AF16 -  -  -  -  ;		==== 			=====
   44 D1:AF16 -  -  -  -  ;
   45 D1:AF16 -  -  -  -  ; ***************************************************************************************
   46 D1:AF16 -  -  -  -  		
Listing for file "_build.asm"
   41 D1:AF16 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:AF16 -  -  -  -  ; ***************************************************************************************
    2 D1:AF16 -  -  -  -  ; ***************************************************************************************
    3 D1:AF16 -  -  -  -  ;
    4 D1:AF16 -  -  -  -  ;		Name : 		str.asm
    5 D1:AF16 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF16 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF16 -  -  -  -  ;		Reviewed :	No
    8 D1:AF16 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:AF16 -  -  -  -  ;
   10 D1:AF16 -  -  -  -  ; ***************************************************************************************
   11 D1:AF16 -  -  -  -  ; ***************************************************************************************
   12 D1:AF16 -  -  -  -  
   13 D1:AF16 -  -  -  -  ; ***************************************************************************************
   14 D1:AF16 -  -  -  -  ;
   15 D1:AF16 -  -  -  -  ;								Str$() unary function
   16 D1:AF16 -  -  -  -  ;
   17 D1:AF16 -  -  -  -  ; ***************************************************************************************
   18 D1:AF16 -  -  -  -  
   19 D1:AF16 -  -  -  -  Unary_Str:	;; [str]
   20 D1:AF16 CD 25 AA D1 		call 	CheckDollar
   21 D1:AF1A CD 5A AC D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:AF1E 01 F5 A8 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:AF22 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:AF24 CD F5 B4 D1 		call 	Int32ToString 				
   25 D1:AF28 21 F5 A8 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:AF2C 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:AF2E C9 -  -  -  		ret
   28 D1:AF2F -  -  -  -  
   29 D1:AF2F -  -  -  -  ; ***************************************************************************************
   30 D1:AF2F -  -  -  -  ;
   31 D1:AF2F -  -  -  -  ;									Changes and Updates
   32 D1:AF2F -  -  -  -  ;
   33 D1:AF2F -  -  -  -  ; ***************************************************************************************
   34 D1:AF2F -  -  -  -  ;
   35 D1:AF2F -  -  -  -  ;		Date			Notes
   36 D1:AF2F -  -  -  -  ;		==== 			=====
   37 D1:AF2F -  -  -  -  ;
   38 D1:AF2F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:AF2F -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:AF2F -  -  -  -  ; ***************************************************************************************
    2 D1:AF2F -  -  -  -  ; ***************************************************************************************
    3 D1:AF2F -  -  -  -  ;
    4 D1:AF2F -  -  -  -  ;		Name : 		time.asm
    5 D1:AF2F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF2F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF2F -  -  -  -  ;		Reviewed :	No
    8 D1:AF2F -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:AF2F -  -  -  -  ;
   10 D1:AF2F -  -  -  -  ; ***************************************************************************************
   11 D1:AF2F -  -  -  -  ; ***************************************************************************************
   12 D1:AF2F -  -  -  -  
   13 D1:AF2F -  -  -  -  ; ***************************************************************************************
   14 D1:AF2F -  -  -  -  ;
   15 D1:AF2F -  -  -  -  ;							Get system time in ms
   16 D1:AF2F -  -  -  -  ;
   17 D1:AF2F -  -  -  -  ; ***************************************************************************************
   18 D1:AF2F -  -  -  -  
   19 D1:AF2F -  -  -  -  Unary_Time:	;; [time]
   20 D1:AF2F CD B8 B5 D1 			call 	SYSGetTimer
   21 D1:AF33 F5 3E 02 32 
              FF FF FF F1 			debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
   22 D1:AF3B 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   23 D1:AF3D C9 -  -  -  			ret
   24 D1:AF3E -  -  -  -  
   25 D1:AF3E -  -  -  -  ; ***************************************************************************************
   26 D1:AF3E -  -  -  -  ;
   27 D1:AF3E -  -  -  -  ;									Changes and Updates
   28 D1:AF3E -  -  -  -  ;
   29 D1:AF3E -  -  -  -  ; ***************************************************************************************
   30 D1:AF3E -  -  -  -  ;
   31 D1:AF3E -  -  -  -  ;		Date			Notes
   32 D1:AF3E -  -  -  -  ;		==== 			=====
   33 D1:AF3E -  -  -  -  ;
   34 D1:AF3E -  -  -  -  ; ***************************************************************************************
   35 D1:AF3E -  -  -  -  			
Listing for file "_build.asm"
   43 D1:AF3E -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:AF3E -  -  -  -  ; ***************************************************************************************
    2 D1:AF3E -  -  -  -  ; ***************************************************************************************
    3 D1:AF3E -  -  -  -  ;
    4 D1:AF3E -  -  -  -  ;		Name : 		top.asm
    5 D1:AF3E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF3E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF3E -  -  -  -  ;		Reviewed :	No
    8 D1:AF3E -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AF3E -  -  -  -  ;
   10 D1:AF3E -  -  -  -  ; ***************************************************************************************
   11 D1:AF3E -  -  -  -  ; ***************************************************************************************
   12 D1:AF3E -  -  -  -  
   13 D1:AF3E -  -  -  -  ; ***************************************************************************************
   14 D1:AF3E -  -  -  -  ;
   15 D1:AF3E -  -  -  -  ;							page unary function (no bracket)
   16 D1:AF3E -  -  -  -  ;
   17 D1:AF3E -  -  -  -  ; ***************************************************************************************
   18 D1:AF3E -  -  -  -  
   19 D1:AF3E -  -  -  -  Unary_Top:	;; [top]
   20 D1:AF3E 2A CD A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:AF42 D9 -  -  -  			exx
   22 D1:AF43 2A CF A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:AF47 D9 -  -  -  			exx
   24 D1:AF48 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF4A C9 -  -  -  			ret
   26 D1:AF4B -  -  -  -  
   27 D1:AF4B -  -  -  -  ; ***************************************************************************************
   28 D1:AF4B -  -  -  -  ;
   29 D1:AF4B -  -  -  -  ;									Changes and Updates
   30 D1:AF4B -  -  -  -  ;
   31 D1:AF4B -  -  -  -  ; ***************************************************************************************
   32 D1:AF4B -  -  -  -  ;
   33 D1:AF4B -  -  -  -  ;		Date			Notes
   34 D1:AF4B -  -  -  -  ;		==== 			=====
   35 D1:AF4B -  -  -  -  ;
   36 D1:AF4B -  -  -  -  ; ***************************************************************************************
   37 D1:AF4B -  -  -  -  			
Listing for file "_build.asm"
   44 D1:AF4B -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:AF4B -  -  -  -  ; ***************************************************************************************
    2 D1:AF4B -  -  -  -  ; ***************************************************************************************
    3 D1:AF4B -  -  -  -  ;
    4 D1:AF4B -  -  -  -  ;		Name : 		val.asm
    5 D1:AF4B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF4B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF4B -  -  -  -  ;		Reviewed :	No
    8 D1:AF4B -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:AF4B -  -  -  -  ;
   10 D1:AF4B -  -  -  -  ; ***************************************************************************************
   11 D1:AF4B -  -  -  -  ; ***************************************************************************************
   12 D1:AF4B -  -  -  -  
   13 D1:AF4B -  -  -  -  ; ***************************************************************************************
   14 D1:AF4B -  -  -  -  ;
   15 D1:AF4B -  -  -  -  ;								val( unary function
   16 D1:AF4B -  -  -  -  ;
   17 D1:AF4B -  -  -  -  ; ***************************************************************************************
   18 D1:AF4B -  -  -  -  
   19 D1:AF4B -  -  -  -  Unary_Val:	;; [val]
   20 D1:AF4B CD 69 AC D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:AF4F E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:AF50 C1 -  -  -  		pop 	bc
   23 D1:AF51 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:AF53 CD D3 B3 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:AF57 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:AF59 C8 -  -  -  		ret		z 							; okay
   27 D1:AF5A 3E 03 C3 4D 
              AA D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:AF60 -  -  -  -  
   29 D1:AF60 -  -  -  -  ; ***************************************************************************************
   30 D1:AF60 -  -  -  -  ;
   31 D1:AF60 -  -  -  -  ;									Changes and Updates
   32 D1:AF60 -  -  -  -  ;
   33 D1:AF60 -  -  -  -  ; ***************************************************************************************
   34 D1:AF60 -  -  -  -  ;
   35 D1:AF60 -  -  -  -  ;		Date			Notes
   36 D1:AF60 -  -  -  -  ;		==== 			=====
   37 D1:AF60 -  -  -  -  ;
   38 D1:AF60 -  -  -  -  ; ***************************************************************************************
   39 D1:AF60 -  -  -  -  		
Listing for file "_build.asm"
   45 D1:AF60 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:AF60 -  -  -  -  ; ***************************************************************************************
    2 D1:AF60 -  -  -  -  ; ***************************************************************************************
    3 D1:AF60 -  -  -  -  ;
    4 D1:AF60 -  -  -  -  ;		Name : 		clear.asm
    5 D1:AF60 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF60 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF60 -  -  -  -  ;		Reviewed :	No
    8 D1:AF60 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:AF60 -  -  -  -  ;
   10 D1:AF60 -  -  -  -  ; ***************************************************************************************
   11 D1:AF60 -  -  -  -  ; ***************************************************************************************
   12 D1:AF60 -  -  -  -  
   13 D1:AF60 -  -  -  -  ; ***************************************************************************************
   14 D1:AF60 -  -  -  -  ;
   15 D1:AF60 -  -  -  -  ;										CLEAR command
   16 D1:AF60 -  -  -  -  ;
   17 D1:AF60 -  -  -  -  ; ***************************************************************************************
   18 D1:AF60 -  -  -  -  
   19 D1:AF60 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:AF60 -  -  -  -  		;
   21 D1:AF60 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:AF60 -  -  -  -  		;
   23 D1:AF60 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:AF64 -  -  -  -  _CCFindLow:
   25 D1:AF64 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:AF68 5E -  -  -  		ld 		e,(hl)		
   27 D1:AF69 19 -  -  -  		add 	hl,de
   28 D1:AF6A 7B -  -  -  		ld 		a,e
   29 D1:AF6B B7 -  -  -  		or 		a
   30 D1:AF6C 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:AF6E 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:AF6F 22 CD A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:AF73 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:AF74 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   35 D1:AF78 -  -  -  -  		;
   36 D1:AF78 -  -  -  -  		; 	 		Reset the language stack
   37 D1:AF78 -  -  -  -  		;
   38 D1:AF78 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:AF7C -  -  -  -  		;
   40 D1:AF7C 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:AF7E 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:AF82 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:AF86 19 -  -  -  		add 	hl,de
   44 D1:AF87 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:AF89 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:AF8D -  -  -  -  		;
   47 D1:AF8D 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:AF91 19 -  -  -  		add 	hl,de
   49 D1:AF92 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:AF96 -  -  -  -  		;
   51 D1:AF96 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 D1:AF96 -  -  -  -  		;
   53 D1:AF96 -  -  -  -  
   54 D1:AF96 -  -  -  -  		;
   55 D1:AF96 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 D1:AF96 -  -  -  -  		;
   57 D1:AF96 CD 95 AE D1 		call 	UnaryRandomInitialise
   58 D1:AF9A -  -  -  -  		;
   59 D1:AF9A -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 D1:AF9A -  -  -  -  		;
   61 D1:AF9A C9 -  -  -  		ret
   62 D1:AF9B -  -  -  -  
   63 D1:AF9B -  -  -  -  ; ***************************************************************************************
   64 D1:AF9B -  -  -  -  ;
   65 D1:AF9B -  -  -  -  ;									Changes and Updates
   66 D1:AF9B -  -  -  -  ;
   67 D1:AF9B -  -  -  -  ; ***************************************************************************************
   68 D1:AF9B -  -  -  -  ;
   69 D1:AF9B -  -  -  -  ;		Date			Notes
   70 D1:AF9B -  -  -  -  ;		==== 			=====
   71 D1:AF9B -  -  -  -  ;
   72 D1:AF9B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:AF9B -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:AF9B -  -  -  -  ; ***************************************************************************************
    2 D1:AF9B -  -  -  -  ; ***************************************************************************************
    3 D1:AF9B -  -  -  -  ;
    4 D1:AF9B -  -  -  -  ;		Name : 		instance.asm
    5 D1:AF9B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF9B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF9B -  -  -  -  ;		Reviewed :	No
    8 D1:AF9B -  -  -  -  ;		Purpose :	Instance handling
    9 D1:AF9B -  -  -  -  ;
   10 D1:AF9B -  -  -  -  ; ***************************************************************************************
   11 D1:AF9B -  -  -  -  ; ***************************************************************************************
   12 D1:AF9B -  -  -  -  
   13 D1:AF9B -  -  -  -  ; ***************************************************************************************
   14 D1:AF9B -  -  -  -  ;
   15 D1:AF9B -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:AF9B -  -  -  -  ;
   17 D1:AF9B -  -  -  -  ; ***************************************************************************************
   18 D1:AF9B -  -  -  -  
   19 D1:AF9B -  -  -  -  SetCurrentInstance:
   20 D1:AF9B ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:AFA0 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:AFA4 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:AFA9 -  -  -  -  
   24 D1:AFA9 C9 -  -  -  		ret
   25 D1:AFAA -  -  -  -  
   26 D1:AFAA -  -  -  -  
   27 D1:AFAA -  -  -  -  ; ***************************************************************************************
   28 D1:AFAA -  -  -  -  ;
   29 D1:AFAA -  -  -  -  ;									Changes and Updates
   30 D1:AFAA -  -  -  -  ;
   31 D1:AFAA -  -  -  -  ; ***************************************************************************************
   32 D1:AFAA -  -  -  -  ;
   33 D1:AFAA -  -  -  -  ;		Date			Notes
   34 D1:AFAA -  -  -  -  ;		==== 			=====
   35 D1:AFAA -  -  -  -  ;
   36 D1:AFAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:AFAA -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:AFAA -  -  -  -  ; ***************************************************************************************
    2 D1:AFAA -  -  -  -  ; ***************************************************************************************
    3 D1:AFAA -  -  -  -  ;
    4 D1:AFAA -  -  -  -  ;		Name : 		new.asm
    5 D1:AFAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFAA -  -  -  -  ;		Reviewed :	No
    8 D1:AFAA -  -  -  -  ;		Purpose :	New command.
    9 D1:AFAA -  -  -  -  ;
   10 D1:AFAA -  -  -  -  ; ***************************************************************************************
   11 D1:AFAA -  -  -  -  ; ***************************************************************************************
   12 D1:AFAA -  -  -  -  
   13 D1:AFAA -  -  -  -  ; ***************************************************************************************
   14 D1:AFAA -  -  -  -  ;
   15 D1:AFAA -  -  -  -  ;										NEW command
   16 D1:AFAA -  -  -  -  ;
   17 D1:AFAA -  -  -  -  ; ***************************************************************************************
   18 D1:AFAA -  -  -  -  
   19 D1:AFAA -  -  -  -  Command_NEW: 	;; [new]
   20 D1:AFAA 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:AFAE 36 00 -  -  		ld 		(hl),0
   22 D1:AFB0 CD 60 AF D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:AFB4 3E 00 C3 4D 
              AA D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:AFBA -  -  -  -  
   25 D1:AFBA -  -  -  -  ; ***************************************************************************************
   26 D1:AFBA -  -  -  -  ;
   27 D1:AFBA -  -  -  -  ;									Changes and Updates
   28 D1:AFBA -  -  -  -  ;
   29 D1:AFBA -  -  -  -  ; ***************************************************************************************
   30 D1:AFBA -  -  -  -  ;
   31 D1:AFBA -  -  -  -  ;		Date			Notes
   32 D1:AFBA -  -  -  -  ;		==== 			=====
   33 D1:AFBA -  -  -  -  ;
   34 D1:AFBA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:AFBA -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:AFBA -  -  -  -  ; ***************************************************************************************
    2 D1:AFBA -  -  -  -  ; ***************************************************************************************
    3 D1:AFBA -  -  -  -  ;
    4 D1:AFBA -  -  -  -  ;		Name : 		utility.asm
    5 D1:AFBA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFBA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFBA -  -  -  -  ;		Reviewed :	No
    8 D1:AFBA -  -  -  -  ;		Purpose :	Utility routines
    9 D1:AFBA -  -  -  -  ;
   10 D1:AFBA -  -  -  -  ; ***************************************************************************************
   11 D1:AFBA -  -  -  -  ; ***************************************************************************************
   12 D1:AFBA -  -  -  -  
   13 D1:AFBA -  -  -  -  ; ***************************************************************************************
   14 D1:AFBA -  -  -  -  ;
   15 D1:AFBA -  -  -  -  ;							Print ASCIIZ string at HL
   16 D1:AFBA -  -  -  -  ;
   17 D1:AFBA -  -  -  -  ; ***************************************************************************************
   18 D1:AFBA -  -  -  -  
   19 D1:AFBA -  -  -  -  PrintStringAtHL:
   20 D1:AFBA 7E -  -  -  		ld 		a,(hl)
   21 D1:AFBB B7 -  -  -  		or 		a
   22 D1:AFBC C8 -  -  -  		ret 	z
   23 D1:AFBD CD 68 B5 D1 		call 	SYSPrintChar
   24 D1:AFC1 23 -  -  -  		inc 	hl
   25 D1:AFC2 18 F6 -  -  		jr 		PrintStringAtHL
   26 D1:AFC4 -  -  -  -  
   27 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   28 D1:AFC4 -  -  -  -  ;
   29 D1:AFC4 -  -  -  -  ;									Changes and Updates
   30 D1:AFC4 -  -  -  -  ;
   31 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   32 D1:AFC4 -  -  -  -  ;
   33 D1:AFC4 -  -  -  -  ;		Date			Notes
   34 D1:AFC4 -  -  -  -  ;		==== 			=====
   35 D1:AFC4 -  -  -  -  ;
   36 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   37 D1:AFC4 -  -  -  -  		
Listing for file "_build.asm"
   49 D1:AFC4 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:AFC4 -  -  -  -  ;
    2 D1:AFC4 -  -  -  -  ;	This file is automatically generated.
    3 D1:AFC4 -  -  -  -  ;
    4 D1:AFC4 -  -  -  -  ;
    5 D1:AFC4 -  -  -  -  ;	Keywords for set 0
    6 D1:AFC4 -  -  -  -  ;
    7 D1:AFC4 -  -  -  -  KeywordsSet0:
    8 D1:AFC4 01 20 -  -  	.db	1," "              ; $0080
    9 D1:AFC6 01 20 -  -  	.db	1," "              ; $0081
   10 D1:AFC8 01 20 -  -  	.db	1," "              ; $0082
   11 D1:AFCA 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:AFCC 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:AFCE 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:AFD0 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:AFD2 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:AFD6 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 D1:AFDA 01 2B -  -  	.db	1,"+"              ; $0089
   18 D1:AFDC 01 2D -  -  	.db	1,"-"              ; $008a
   19 D1:AFDE 02 3E 3D -  	.db	2,">="             ; $008b
   20 D1:AFE1 02 3C 3D -  	.db	2,"<="             ; $008c
   21 D1:AFE4 01 3E -  -  	.db	1,">"              ; $008d
   22 D1:AFE6 01 3C -  -  	.db	1,"<"              ; $008e
   23 D1:AFE8 01 3D -  -  	.db	1,"="              ; $008f
   24 D1:AFEA 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 D1:AFED 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 D1:AFF1 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 D1:AFF4 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 D1:AFF8 01 26 -  -  	.db	1,"&"              ; $0094
   29 D1:AFFA 01 28 -  -  	.db	1,"("              ; $0095
   30 D1:AFFC 01 24 -  -  	.db	1,"$"              ; $0096
   31 D1:AFFE 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 D1:B002 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 D1:B006 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 D1:B00A 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 D1:B00E 03 53 54 52 	.db	3,"STR"            ; $009b
   36 D1:B012 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 D1:B016 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 D1:B01A 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 D1:B01E 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 D1:B023 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 D1:B028 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 D1:B02C 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 D1:B030 01 29 -  -  	.db	1,")"              ; $00a3
   44 D1:B032 01 2C -  -  	.db	1,","              ; $00a4
   45 D1:B034 01 3A -  -  	.db	1,":"              ; $00a5
   46 D1:B036 01 3B -  -  	.db	1,";"              ; $00a6
   47 D1:B038 01 27 -  -  	.db	1,"'"              ; $00a7
   48 D1:B03A 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a8
   49 D1:B041 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a9
   50 D1:B047 02 49 46 -  	.db	2,"IF"             ; $00aa
   51 D1:B04A 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ab
   52 D1:B04F 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ac
   53 D1:B054 03 46 4F 52 	.db	3,"FOR"            ; $00ad
   54 D1:B058 02 54 4F -  	.db	2,"TO"             ; $00ae
   55 D1:B05B 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00af
   56 D1:B060 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b0
   57 D1:B065 03 44 45 46 	.db	3,"DEF"            ; $00b1
   58 D1:B069 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b2
   59 D1:B06E 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b3
   60 D1:B076 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b4
   61 D1:B07C 03 44 49 4D 	.db	3,"DIM"            ; $00b5
   62 D1:B080 03 52 45 4D 	.db	3,"REM"            ; $00b6
   63 D1:B084 03 4C 45 54 	.db	3,"LET"            ; $00b7
   64 D1:B088 03 56 44 55 	.db	3,"VDU"            ; $00b8
   65 D1:B08C 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b9
   66 D1:B092 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00ba
   67 D1:B097 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bb
   68 D1:B09C 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00bc
   69 D1:B0A1 03 4E 45 57 	.db	3,"NEW"            ; $00bd
   70 D1:B0A5 03 52 55 4E 	.db	3,"RUN"            ; $00be
   71 D1:B0A9 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00bf
   72 D1:B0AE 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c0
   73 D1:B0B3 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c1
   74 D1:B0BB 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c2
   75 D1:B0C2 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c3
   76 D1:B0C8 03 45 4E 44 	.db	3,"END"            ; $00c4
   77 D1:B0CC 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c5
   78 D1:B0D1 00 -  -  -  	.db	0
   79 D1:B0D2 -  -  -  -  ;
   80 D1:B0D2 -  -  -  -  ;	Keywords for set 1
   81 D1:B0D2 -  -  -  -  ;
   82 D1:B0D2 -  -  -  -  KeywordsSet1:
   83 D1:B0D2 00 -  -  -  	.db	0
   84 D1:B0D3 -  -  -  -  ;
   85 D1:B0D3 -  -  -  -  ;	Keywords for set 2
   86 D1:B0D3 -  -  -  -  ;
   87 D1:B0D3 -  -  -  -  KeywordsSet2:
   88 D1:B0D3 00 -  -  -  	.db	0
Listing for file "_build.asm"
   50 D1:B0D4 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B0D4 -  -  -  -  ;
    2 D1:B0D4 -  -  -  -  ;	This file is automatically generated.
    3 D1:B0D4 -  -  -  -  ;
    4 D1:B0D4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 D1:B0E0 -  -  -  -  PrecedenceTable:
    6 D1:B0E0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B0E1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B0E2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B0E3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B0E4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B0E5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B0E6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B0E7 04 -  -  -  	.db	4	; $008a -
   14 D1:B0E8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B0E9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B0EA 03 -  -  -  	.db	3	; $008d >
   17 D1:B0EB 03 -  -  -  	.db	3	; $008e <
   18 D1:B0EC 03 -  -  -  	.db	3	; $008f =
   19 D1:B0ED 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B0EE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B0EF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B0F0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B0F1 -  -  -  -  
Listing for file "_build.asm"
   51 D1:B0F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B0F1 -  -  -  -  ;
    2 D1:B0F1 -  -  -  -  ;	This is automatically generated.
    3 D1:B0F1 -  -  -  -  ;
    4 D1:B0F1 -  -  -  -  ErrorIDTable:
    5 D1:B0F1 31 B1 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B0F5 37 B1 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B0F9 48 B1 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B0FD 56 B1 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B101 60 B1 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:B105 7A B1 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:B109 8B B1 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:B10D 99 B1 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:B111 A7 B1 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 D1:B115 B1 B1 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 D1:B119 C6 B1 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 D1:B11D DC B1 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 D1:B121 EA B1 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 D1:B125 EF B1 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 D1:B129 FC B1 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 D1:B12D 0D B2 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 D1:B131 -  -  -  -  
   22 D1:B131 -  -  -  -  ErrText_warmstart:
   23 D1:B131 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 D1:B137 -  -  -  -  ErrText_assert:
   25 D1:B137 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 D1:B148 -  -  -  -  ErrText_badtype:
   27 D1:B148 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 D1:B156 -  -  -  -  ErrText_badvalue:
   29 D1:B156 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 D1:B160 -  -  -  -  ErrText_disabled:
   31 D1:B160 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 D1:B17A -  -  -  -  ErrText_divzero:
   33 D1:B17A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 D1:B18B -  -  -  -  ErrText_memory:
   35 D1:B18B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 D1:B199 -  -  -  -  ErrText_nocomma:
   37 D1:B199 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 D1:B1A7 -  -  -  -  ErrText_nodollar:
   39 D1:B1A7 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 D1:B1B1 -  -  -  -  ErrText_nolbracket:
   41 D1:B1B1 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 D1:B1C6 -  -  -  -  ErrText_norbracket:
   43 D1:B1C6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 D1:B1DC -  -  -  -  ErrText_notref:
   45 D1:B1DC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 D1:B1EA -  -  -  -  ErrText_stop:
   47 D1:B1EA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 D1:B1EF -  -  -  -  ErrText_syntax:
   49 D1:B1EF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 D1:B1FC -  -  -  -  ErrText_todo:
   51 D1:B1FC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 D1:B20D -  -  -  -  ErrText_unknownvar:
   53 D1:B20D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   52 D1:B21E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B21E -  -  -  -  ;
    2 D1:B21E -  -  -  -  ;	Vectors for set 0
    3 D1:B21E -  -  -  -  ;
    4 D1:B21E -  -  -  -  VectorsSet0:
    5 D1:B21E 63 A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B222 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B226 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B22A 2D AB D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B22E 36 AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B232 D9 AA D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B236 E7 AA D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B23A F5 AA D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B23E E7 AA D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B242 BD AA D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B246 CB AA D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B24A 94 AB D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B24E 8A AB D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B252 76 AB D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B256 6C AB D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B25A 62 AB D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B25E 80 AB D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B262 03 AB D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B266 11 AB D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B26A 1F AB D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B26E 07 AF D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B272 FF AE D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B276 21 AE D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B27A 4E AE D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B27E 10 AE D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B282 E6 AD D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B286 E5 AE D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B28A 16 AF D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B28E FC AD D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B292 F3 AD D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B296 2C AE D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B29A 41 AE D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B29E 2F AF D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B2A2 3E AF D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B2A6 4B AF D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B2AA 58 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a3 )
   41 D1:B2AE 58 A9 D1 00 	addr(BadCmd_Comma)               ; $00a4 ,
   42 D1:B2B2 5C A9 D1 00 	addr(Command_Colon)              ; $00a5 :
   43 D1:B2B6 58 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a6 ;
   44 D1:B2BA 7A A9 D1 00 	addr(Command_REM2)               ; $00a7 '
   45 D1:B2BE A5 A8 D1 00 	addr(Unimplemented)              ; $00a8 repeat
   46 D1:B2C2 A5 A8 D1 00 	addr(Unimplemented)              ; $00a9 until
   47 D1:B2C6 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa if
   48 D1:B2CA 58 A9 D1 00 	addr(BadCmd_Then)                ; $00ab then
   49 D1:B2CE A5 A8 D1 00 	addr(Unimplemented)              ; $00ac else
   50 D1:B2D2 A5 A8 D1 00 	addr(Unimplemented)              ; $00ad for
   51 D1:B2D6 58 A9 D1 00 	addr(BadCmd_To)                  ; $00ae to
   52 D1:B2DA A5 A8 D1 00 	addr(Unimplemented)              ; $00af step
   53 D1:B2DE A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 next
   54 D1:B2E2 58 A9 D1 00 	addr(BadCmd_Defproc)             ; $00b1 def
   55 D1:B2E6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 proc
   56 D1:B2EA A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 endproc
   57 D1:B2EE A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 local
   58 D1:B2F2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 dim
   59 D1:B2F6 7A A9 D1 00 	addr(Command_REM)                ; $00b6 rem
   60 D1:B2FA A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 let
   61 D1:B2FE A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 vdu
   62 D1:B302 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 print
   63 D1:B306 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba load
   64 D1:B30A A5 A8 D1 00 	addr(Unimplemented)              ; $00bb save
   65 D1:B30E A5 A8 D1 00 	addr(Unimplemented)              ; $00bc list
   66 D1:B312 AA AF D1 00 	addr(Command_NEW)                ; $00bd new
   67 D1:B316 97 A9 D1 00 	addr(Command_RUN)                ; $00be run
   68 D1:B31A A5 A8 D1 00 	addr(Unimplemented)              ; $00bf read
   69 D1:B31E A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 data
   70 D1:B322 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 restore
   71 D1:B326 47 A9 D1 00 	addr(Command_ASSERT)             ; $00c2 assert
   72 D1:B32A 60 AF D1 00 	addr(Command_CLEAR)              ; $00c3 clear
   73 D1:B32E 5D A9 D1 00 	addr(Command_END)                ; $00c4 end
   74 D1:B332 03 AA D1 00 	addr(Command_STOP)               ; $00c5 stop
   75 D1:B336 -  -  -  -  ;
   76 D1:B336 -  -  -  -  ;	Vectors for set 1
   77 D1:B336 -  -  -  -  ;
   78 D1:B336 -  -  -  -  VectorsSet1:
   79 D1:B336 -  -  -  -  ;
   80 D1:B336 -  -  -  -  ;	Vectors for set 2
   81 D1:B336 -  -  -  -  ;
   82 D1:B336 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   53 D1:B336 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B336 -  -  -  -  ; ***************************************************************************************
    2 D1:B336 -  -  -  -  ; ***************************************************************************************
    3 D1:B336 -  -  -  -  ;
    4 D1:B336 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B336 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B336 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B336 -  -  -  -  ;		Reviewed :	No
    8 D1:B336 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B336 -  -  -  -  ;
   10 D1:B336 -  -  -  -  ; ***************************************************************************************
   11 D1:B336 -  -  -  -  ; ***************************************************************************************
   12 D1:B336 -  -  -  -  
   13 D1:B336 -  -  -  -  ; ***************************************************************************************
   14 D1:B336 -  -  -  -  ;
   15 D1:B336 -  -  -  -  ;								Unsigned integer divide
   16 D1:B336 -  -  -  -  ;
   17 D1:B336 -  -  -  -  ; ***************************************************************************************
   18 D1:B336 -  -  -  -  
   19 D1:B336 -  -  -  -  Int32UDivide:
   20 D1:B336 37 -  -  -  		scf
   21 D1:B337 C3 7B B3 D1 		jp 		_I32UnsignedDivide		
   22 D1:B33B -  -  -  -  
   23 D1:B33B -  -  -  -  ; ***************************************************************************************
   24 D1:B33B -  -  -  -  ;
   25 D1:B33B -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B33B -  -  -  -  ;
   27 D1:B33B -  -  -  -  ; ***************************************************************************************
   28 D1:B33B -  -  -  -  
   29 D1:B33B -  -  -  -  Int32SDivide:
   30 D1:B33B 37 -  -  -  		scf
   31 D1:B33C 18 01 -  -  		jr 		_I32SDivide
   32 D1:B33E -  -  -  -  Int32Modulus:
   33 D1:B33E AF -  -  -  		xor 	a
   34 D1:B33F -  -  -  -  _I32SDivide:
   35 D1:B33F 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B340 F5 -  -  -  		push 	af
   37 D1:B341 08 -  -  -  		ex 		af,af'
   38 D1:B342 -  -  -  -  
   39 D1:B342 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B343 D9 -  -  -  		exx
   41 D1:B344 D5 -  -  -  		push 	de
   42 D1:B345 D9 -  -  -  		exx
   43 D1:B346 -  -  -  -  
   44 D1:B346 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B347 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B348 CD 68 B3 D1 		call 	_I32CheckHLSignSwap
   47 D1:B34C CD 68 B3 D1 		call 	_I32CheckHLSignSwap
   48 D1:B350 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B351 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B352 F5 -  -  -  		push 	af
   51 D1:B353 CD 7B B3 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B357 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B358 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B35A 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B35B CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B35D C4 DE B4 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B361 -  -  -  -  _I32SDExit:
   58 D1:B361 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B362 D1 -  -  -  		pop 	de
   60 D1:B363 D9 -  -  -  		exx
   61 D1:B364 D1 -  -  -  		pop 	de
   62 D1:B365 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B366 08 -  -  -  		ex 		af,af'
   64 D1:B367 C9 -  -  -  		ret
   65 D1:B368 -  -  -  -  
   66 D1:B368 -  -  -  -  
   67 D1:B368 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B368 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B369 CB 7C -  -  		bit 	7,h
   70 D1:B36B D9 -  -  -  		exx
   71 D1:B36C 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B36E -  -  -  -  		;
   73 D1:B36E C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B370 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B371 CD DE B4 D1 		call 	Int32Negate 				
   76 D1:B375 F1 -  -  -  		pop 	af
   77 D1:B376 -  -  -  -  _I32CHSPositive:
   78 D1:B376 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B377 EB -  -  -  		ex 		de,hl
   80 D1:B378 D9 -  -  -  		exx		
   81 D1:B379 EB -  -  -  		ex 		de,hl
   82 D1:B37A C9 -  -  -  		ret
   83 D1:B37B -  -  -  -  
   84 D1:B37B -  -  -  -  ; ***************************************************************************************
   85 D1:B37B -  -  -  -  ;
   86 D1:B37B -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B37B -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B37B -  -  -  -  ;
   89 D1:B37B -  -  -  -  ; ***************************************************************************************
   90 D1:B37B -  -  -  -  
   91 D1:B37B -  -  -  -  _I32UnsignedDivide:
   92 D1:B37B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B37C D5 -  -  -  		push 	de
   94 D1:B37D D9 -  -  -  		exx
   95 D1:B37E C5 -  -  -  		push 	bc
   96 D1:B37F D5 -  -  -  		push 	de 							
   97 D1:B380 D9 -  -  -  		exx
   98 D1:B381 -  -  -  -  
   99 D1:B381 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B382 -  -  -  -  
  101 D1:B382 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B383 B3 -  -  -  		or 		e
  103 D1:B384 D9 -  -  -  		exx
  104 D1:B385 B2 -  -  -  		or 		d
  105 D1:B386 B3 -  -  -  		or 		e
  106 D1:B387 D9 -  -  -  		exx
  107 D1:B388 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B38C -  -  -  -  
  109 D1:B38C -  -  -  -  
  110 D1:B38C 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B38D 4D -  -  -  		ld		c,l
  112 D1:B38E 21 00 00 00 		ld 		hl,$0000
  113 D1:B392 D9 -  -  -  		exx
  114 D1:B393 44 -  -  -  		ld 		b,h
  115 D1:B394 4D -  -  -  		ld		c,l
  116 D1:B395 21 00 00 00 		ld 		hl,$0000
  117 D1:B399 D9 -  -  -  		exx
  118 D1:B39A -  -  -  -  
  119 D1:B39A 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B39C -  -  -  -  _I32DivideLoop:
  121 D1:B39C F5 -  -  -  		push 	af
  122 D1:B39D -  -  -  -  
  123 D1:B39D CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B39F CB 10 -  -  		rl 		b
  125 D1:B3A1 D9 -  -  -  		exx
  126 D1:B3A2 CB 11 -  -  		rl 		c
  127 D1:B3A4 CB 10 -  -  		rl 		b
  128 D1:B3A6 D9 -  -  -  		exx
  129 D1:B3A7 CB 15 -  -  		rl 		l
  130 D1:B3A9 CB 14 -  -  		rl 		h
  131 D1:B3AB D9 -  -  -  		exx
  132 D1:B3AC CB 15 -  -  		rl 		l
  133 D1:B3AE CB 14 -  -  		rl 		h
  134 D1:B3B0 D9 -  -  -  		exx
  135 D1:B3B1 -  -  -  -  
  136 D1:B3B1 CD 7C B4 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B3B5 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B3B7 -  -  -  -  
  139 D1:B3B7 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B3B8 18 04 -  -  		jr 		_I32Next
  141 D1:B3BA -  -  -  -  
  142 D1:B3BA -  -  -  -  _I32Borrow:
  143 D1:B3BA CD 74 B4 D1 		call 	Int32Add 					; A = A + M
  144 D1:B3BE -  -  -  -  _I32Next:
  145 D1:B3BE F1 -  -  -  		pop 	af
  146 D1:B3BF 3D -  -  -  		dec 	a
  147 D1:B3C0 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B3C2 -  -  -  -  
  149 D1:B3C2 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B3C3 -  -  -  -  
  151 D1:B3C3 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B3C4 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B3C6 -  -  -  -  
  154 D1:B3C6 60 -  -  -  		ld  	h,b
  155 D1:B3C7 69 -  -  -  		ld 		l,c
  156 D1:B3C8 D9 -  -  -  		exx
  157 D1:B3C9 60 -  -  -  		ld  	h,b
  158 D1:B3CA 69 -  -  -  		ld 		l,c
  159 D1:B3CB D9 -  -  -  		exx
  160 D1:B3CC -  -  -  -  _I32Modulus1:		
  161 D1:B3CC D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B3CD D1 -  -  -  		pop 	de
  163 D1:B3CE C1 -  -  -  		pop 	bc
  164 D1:B3CF D9 -  -  -  		exx
  165 D1:B3D0 D1 -  -  -  		pop 	de
  166 D1:B3D1 C1 -  -  -  		pop 	bc
  167 D1:B3D2 C9 -  -  -  		ret
  168 D1:B3D3 -  -  -  -  
  169 D1:B3D3 -  -  -  -  ; ***************************************************************************************
  170 D1:B3D3 -  -  -  -  ;
  171 D1:B3D3 -  -  -  -  ;									Changes and Updates
  172 D1:B3D3 -  -  -  -  ;
  173 D1:B3D3 -  -  -  -  ; ***************************************************************************************
  174 D1:B3D3 -  -  -  -  ;
  175 D1:B3D3 -  -  -  -  ;		Date			Notes
  176 D1:B3D3 -  -  -  -  ;		==== 			=====
  177 D1:B3D3 -  -  -  -  ;
  178 D1:B3D3 -  -  -  -  ; ***************************************************************************************
  179 D1:B3D3 -  -  -  -  		
Listing for file "_build.asm"
   54 D1:B3D3 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B3D3 -  -  -  -  ; ***************************************************************************************
    2 D1:B3D3 -  -  -  -  ; ***************************************************************************************
    3 D1:B3D3 -  -  -  -  ;
    4 D1:B3D3 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B3D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B3D3 -  -  -  -  ;		Reviewed :	No
    8 D1:B3D3 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B3D3 -  -  -  -  ;
   10 D1:B3D3 -  -  -  -  ; ***************************************************************************************
   11 D1:B3D3 -  -  -  -  ; ***************************************************************************************
   12 D1:B3D3 -  -  -  -  
   13 D1:B3D3 -  -  -  -  ; ***************************************************************************************
   14 D1:B3D3 -  -  -  -  ;
   15 D1:B3D3 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B3D3 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B3D3 -  -  -  -  ;
   18 D1:B3D3 -  -  -  -  ; ***************************************************************************************
   19 D1:B3D3 -  -  -  -  
   20 D1:B3D3 -  -  -  -  Int32FromString:
   21 D1:B3D3 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B3D4 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B3D5 D5 -  -  -  		push 	de
   24 D1:B3D6 D9 -  -  -  		exx
   25 D1:B3D7 D5 -  -  -  		push 	de
   26 D1:B3D8 -  -  -  -  
   27 D1:B3D8 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B3DC 11 00 00 00 		ld 		de,$0000
   29 D1:B3E0 D9 -  -  -  		exx
   30 D1:B3E1 21 00 00 00 		ld 		hl,$0000
   31 D1:B3E5 11 00 00 00 		ld 		de,$0000
   32 D1:B3E9 D9 -  -  -  		exx
   33 D1:B3EA -  -  -  -  
   34 D1:B3EA 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B3EB CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B3ED 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B3EF ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B3F1 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B3F2 -  -  -  -  		;
   40 D1:B3F2 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B3F3 F5 -  -  -  		push 	af
   42 D1:B3F4 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B3F6 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B3F7 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B3F9 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B3FA 18 01 -  -  		jr 		_I32FSMain
   47 D1:B3FC -  -  -  -  _I32FSNotSigned:		
   48 D1:B3FC E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B3FD -  -  -  -  		;
   50 D1:B3FD -  -  -  -  		; 		Main conversion loop.
   51 D1:B3FD -  -  -  -  		; 		
   52 D1:B3FD -  -  -  -  _I32FSMain:		
   53 D1:B3FD 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B3FE FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B400 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B402 D6 20 -  -  		sub 	32
   57 D1:B404 -  -  -  -  _I32FSNotLower:
   58 D1:B404 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B406 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B408 FE 3A -  -  		cp 		'9'+1
   61 D1:B40A 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B40C FE 41 -  -  		cp 		'A'
   63 D1:B40E 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B410 FE 47 -  -  		cp 		'F'+1
   65 D1:B412 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B414 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B416 -  -  -  -  _I32FSOkay:
   68 D1:B416 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B418 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B419 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B41B 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B41C D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B41D F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B41E CD 3B B4 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B422 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B423 5F -  -  -  		ld 		e,a
   77 D1:B424 CD 74 B4 D1 		call 	Int32Add 					; and add it.
   78 D1:B428 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B429 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B42B -  -  -  -  
   81 D1:B42B -  -  -  -  _I32FSExit:
   82 D1:B42B F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B42C FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B42E CC DE B4 D1 		call 	z,Int32Negate
   85 D1:B432 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B433 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B434 D9 -  -  -  		exx
   88 D1:B435 D1 -  -  -  		pop 	de
   89 D1:B436 D9 -  -  -  		exx
   90 D1:B437 C1 -  -  -  		pop 	bc
   91 D1:B438 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B43A C9 -  -  -  		ret				
   93 D1:B43B -  -  -  -  
   94 D1:B43B -  -  -  -  ; ***************************************************************************************
   95 D1:B43B -  -  -  -  ;
   96 D1:B43B -  -  -  -  ;									Changes and Updates
   97 D1:B43B -  -  -  -  ;
   98 D1:B43B -  -  -  -  ; ***************************************************************************************
   99 D1:B43B -  -  -  -  ;
  100 D1:B43B -  -  -  -  ;		Date			Notes
  101 D1:B43B -  -  -  -  ;		==== 			=====
  102 D1:B43B -  -  -  -  ;
  103 D1:B43B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B43B -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B43B -  -  -  -  ; ***************************************************************************************
    2 D1:B43B -  -  -  -  ; ***************************************************************************************
    3 D1:B43B -  -  -  -  ;
    4 D1:B43B -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B43B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B43B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B43B -  -  -  -  ;		Reviewed :	No
    8 D1:B43B -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B43B -  -  -  -  ;
   10 D1:B43B -  -  -  -  ; ***************************************************************************************
   11 D1:B43B -  -  -  -  ; ***************************************************************************************
   12 D1:B43B -  -  -  -  
   13 D1:B43B -  -  -  -  Int32Multiply:
   14 D1:B43B C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B43C D5 -  -  -  		push 	de
   16 D1:B43D 44 -  -  -  		ld 		b,h
   17 D1:B43E 4D -  -  -  		ld 		c,l
   18 D1:B43F 21 00 00 00 		ld 		hl,$0000
   19 D1:B443 -  -  -  -  
   20 D1:B443 D9 -  -  -  		exx
   21 D1:B444 C5 -  -  -  		push 	bc
   22 D1:B445 D5 -  -  -  		push 	de
   23 D1:B446 44 -  -  -  		ld 		b,h
   24 D1:B447 4D -  -  -  		ld 		c,l
   25 D1:B448 21 00 00 00 		ld 		hl,$0000		
   26 D1:B44C D9 -  -  -  		exx
   27 D1:B44D -  -  -  -  
   28 D1:B44D -  -  -  -  _I32MultiplyLoop:
   29 D1:B44D CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B44F C4 74 B4 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B453 -  -  -  -  		;
   32 D1:B453 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B454 CB 38 -  -  		srl 	b
   34 D1:B456 CB 19 -  -  		rr 		c
   35 D1:B458 D9 -  -  -  		exx
   36 D1:B459 CB 18 -  -  		rr 		b
   37 D1:B45B CB 19 -  -  		rr 		c
   38 D1:B45D -  -  -  -  		;
   39 D1:B45D CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B45F CB 12 -  -  		rl 		d
   41 D1:B461 D9 -  -  -  		exx
   42 D1:B462 CB 13 -  -  		rl 		e
   43 D1:B464 CB 12 -  -  		rl 		d
   44 D1:B466 -  -  -  -  
   45 D1:B466 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B467 B1 -  -  -  		or 		c
   47 D1:B468 D9 -  -  -  		exx
   48 D1:B469 B0 -  -  -  		or 		b
   49 D1:B46A B1 -  -  -  		or 		c
   50 D1:B46B 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B46D -  -  -  -  
   52 D1:B46D D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B46E D1 -  -  -  		pop 	de
   54 D1:B46F C1 -  -  -  		pop 	bc
   55 D1:B470 D9 -  -  -  		exx
   56 D1:B471 D1 -  -  -  		pop 	de
   57 D1:B472 C1 -  -  -  		pop 	bc
   58 D1:B473 C9 -  -  -  		ret
   59 D1:B474 -  -  -  -  
   60 D1:B474 -  -  -  -  ; ***************************************************************************************
   61 D1:B474 -  -  -  -  ;
   62 D1:B474 -  -  -  -  ;									Changes and Updates
   63 D1:B474 -  -  -  -  ;
   64 D1:B474 -  -  -  -  ; ***************************************************************************************
   65 D1:B474 -  -  -  -  ;
   66 D1:B474 -  -  -  -  ;		Date			Notes
   67 D1:B474 -  -  -  -  ;		==== 			=====
   68 D1:B474 -  -  -  -  ;
   69 D1:B474 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B474 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B474 -  -  -  -  ; ***************************************************************************************
    2 D1:B474 -  -  -  -  ; ***************************************************************************************
    3 D1:B474 -  -  -  -  ;
    4 D1:B474 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B474 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B474 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B474 -  -  -  -  ;		Reviewed :	No
    8 D1:B474 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B474 -  -  -  -  ;
   10 D1:B474 -  -  -  -  ; ***************************************************************************************
   11 D1:B474 -  -  -  -  ; ***************************************************************************************
   12 D1:B474 -  -  -  -  
   13 D1:B474 -  -  -  -  ; ***************************************************************************************
   14 D1:B474 -  -  -  -  ;
   15 D1:B474 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B474 -  -  -  -  ;
   17 D1:B474 -  -  -  -  ; ***************************************************************************************
   18 D1:B474 -  -  -  -  
   19 D1:B474 -  -  -  -  Int32Add:
   20 D1:B474 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B476 D9 -  -  -  		exx
   22 D1:B477 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B47A D9 -  -  -  		exx
   24 D1:B47B C9 -  -  -  		ret
   25 D1:B47C -  -  -  -  
   26 D1:B47C -  -  -  -  ; ***************************************************************************************
   27 D1:B47C -  -  -  -  ;
   28 D1:B47C -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B47C -  -  -  -  ;
   30 D1:B47C -  -  -  -  ; ***************************************************************************************
   31 D1:B47C -  -  -  -  
   32 D1:B47C -  -  -  -  Int32Subtract:
   33 D1:B47C AF -  -  -  		xor 	a 							; clear carry
   34 D1:B47D 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B480 D9 -  -  -  		exx
   36 D1:B481 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B484 D9 -  -  -  		exx
   38 D1:B485 C9 -  -  -  		ret
   39 D1:B486 -  -  -  -  
   40 D1:B486 -  -  -  -  ; ***************************************************************************************
   41 D1:B486 -  -  -  -  ;
   42 D1:B486 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B486 -  -  -  -  ;
   44 D1:B486 -  -  -  -  ; ***************************************************************************************
   45 D1:B486 -  -  -  -  
   46 D1:B486 -  -  -  -  Int32And:
   47 D1:B486 D9 -  -  -  		exx
   48 D1:B487 CD 8C B4 D1 		call 	_I32AndHLDE
   49 D1:B48B D9 -  -  -  		exx
   50 D1:B48C -  -  -  -  _I32AndHLDE:		
   51 D1:B48C 7C -  -  -  		ld 		a,h
   52 D1:B48D A2 -  -  -  		and 	d
   53 D1:B48E 67 -  -  -  		ld 		h,a
   54 D1:B48F 7D -  -  -  		ld 		a,l
   55 D1:B490 A3 -  -  -  		and 	e
   56 D1:B491 6F -  -  -  		ld 		l,a
   57 D1:B492 C9 -  -  -  		ret
   58 D1:B493 -  -  -  -  
   59 D1:B493 -  -  -  -  ; ***************************************************************************************
   60 D1:B493 -  -  -  -  ;
   61 D1:B493 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B493 -  -  -  -  ;
   63 D1:B493 -  -  -  -  ; ***************************************************************************************
   64 D1:B493 -  -  -  -  
   65 D1:B493 -  -  -  -  Int32Or:
   66 D1:B493 D9 -  -  -  		exx
   67 D1:B494 CD 99 B4 D1 		call 	_I32OrHLDE
   68 D1:B498 D9 -  -  -  		exx
   69 D1:B499 -  -  -  -  _I32OrHLDE:		
   70 D1:B499 7C -  -  -  		ld 		a,h
   71 D1:B49A B2 -  -  -  		or 		d
   72 D1:B49B 67 -  -  -  		ld 		h,a
   73 D1:B49C 7D -  -  -  		ld 		a,l
   74 D1:B49D B3 -  -  -  		or 		e
   75 D1:B49E 6F -  -  -  		ld 		l,a
   76 D1:B49F C9 -  -  -  		ret
   77 D1:B4A0 -  -  -  -  
   78 D1:B4A0 -  -  -  -  ; ***************************************************************************************
   79 D1:B4A0 -  -  -  -  ;
   80 D1:B4A0 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B4A0 -  -  -  -  ;
   82 D1:B4A0 -  -  -  -  ; ***************************************************************************************
   83 D1:B4A0 -  -  -  -  
   84 D1:B4A0 -  -  -  -  Int32Xor:
   85 D1:B4A0 D9 -  -  -  		exx
   86 D1:B4A1 CD A6 B4 D1 		call 	_I32XorHLDE
   87 D1:B4A5 D9 -  -  -  		exx
   88 D1:B4A6 -  -  -  -  _I32XorHLDE:		
   89 D1:B4A6 7C -  -  -  		ld 		a,h
   90 D1:B4A7 AA -  -  -  		xor 	d
   91 D1:B4A8 67 -  -  -  		ld 		h,a
   92 D1:B4A9 7D -  -  -  		ld 		a,l
   93 D1:B4AA AB -  -  -  		xor 	e
   94 D1:B4AB 6F -  -  -  		ld 		l,a
   95 D1:B4AC C9 -  -  -  		ret
   96 D1:B4AD -  -  -  -  
   97 D1:B4AD -  -  -  -  ; ***************************************************************************************
   98 D1:B4AD -  -  -  -  ;
   99 D1:B4AD -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B4AD -  -  -  -  ;
  101 D1:B4AD -  -  -  -  ; ***************************************************************************************
  102 D1:B4AD -  -  -  -  
  103 D1:B4AD -  -  -  -  Int32Zero:
  104 D1:B4AD D9 -  -  -  		exx
  105 D1:B4AE 7D -  -  -  		ld 		a,l
  106 D1:B4AF B4 -  -  -  		or 		h
  107 D1:B4B0 D9 -  -  -  		exx
  108 D1:B4B1 B5 -  -  -  		or 		l
  109 D1:B4B2 B4 -  -  -  		or 		h
  110 D1:B4B3 C9 -  -  -  		ret
  111 D1:B4B4 -  -  -  -  
  112 D1:B4B4 -  -  -  -  ; ***************************************************************************************
  113 D1:B4B4 -  -  -  -  ;
  114 D1:B4B4 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B4B4 -  -  -  -  ;
  116 D1:B4B4 -  -  -  -  ; ***************************************************************************************
  117 D1:B4B4 -  -  -  -  
  118 D1:B4B4 -  -  -  -  Int32Compare:
  119 D1:B4B4 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B4B5 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B4B6 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B4B9 D9 -  -  -  		exx
  123 D1:B4BA E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B4BB 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B4BE -  -  -  -  		;
  126 D1:B4BE 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B4BF E2 C7 B4 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B4C3 78 -  -  -  		ld 		a,b
  129 D1:B4C4 EE 80 -  -  		xor 	$80
  130 D1:B4C6 47 -  -  -  		ld 		b,a
  131 D1:B4C7 -  -  -  -  _I32CNoOverflow:
  132 D1:B4C7 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B4C8 B5 -  -  -  		or 		l
  134 D1:B4C9 D9 -  -  -  		exx 
  135 D1:B4CA B4 -  -  -  		or 		h
  136 D1:B4CB B5 -  -  -  		or 		l
  137 D1:B4CC 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B4CE -  -  -  -  		;
  139 D1:B4CE D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B4CF CB 78 -  -  		bit 	7,b
  141 D1:B4D1 D9 -  -  -  		exx
  142 D1:B4D2 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B4D4 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B4D6 3E FF -  -  		ld 		a,$FF
  145 D1:B4D8 -  -  -  -  _I32NotPos:
  146 D1:B4D8 D9 -  -  -  		exx
  147 D1:B4D9 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B4DA D9 -  -  -  		exx
  149 D1:B4DB E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B4DC B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B4DD C9 -  -  -  		ret
  152 D1:B4DE -  -  -  -  
  153 D1:B4DE -  -  -  -  ; ***************************************************************************************
  154 D1:B4DE -  -  -  -  ;
  155 D1:B4DE -  -  -  -  ;										Negate HL'HL
  156 D1:B4DE -  -  -  -  ;
  157 D1:B4DE -  -  -  -  ; ***************************************************************************************
  158 D1:B4DE -  -  -  -  
  159 D1:B4DE -  -  -  -  Int32Negate:
  160 D1:B4DE AF -  -  -  		xor 	a
  161 D1:B4DF CD EA B4 D1 		call 	_I32NSubtract
  162 D1:B4E3 D9 -  -  -  		exx
  163 D1:B4E4 CD EA B4 D1 		call 	_I32NSubtract
  164 D1:B4E8 D9 -  -  -  		exx
  165 D1:B4E9 C9 -  -  -  		ret
  166 D1:B4EA -  -  -  -  _I32NSubtract:
  167 D1:B4EA D5 -  -  -  		push 	de
  168 D1:B4EB EB -  -  -  		ex 		de,hl
  169 D1:B4EC 21 00 00 00 		ld 		hl,$0000
  170 D1:B4F0 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B4F3 D1 -  -  -  		pop 	de
  172 D1:B4F4 C9 -  -  -  		ret
  173 D1:B4F5 -  -  -  -  		
  174 D1:B4F5 -  -  -  -  ; ***************************************************************************************
  175 D1:B4F5 -  -  -  -  ;
  176 D1:B4F5 -  -  -  -  ;									Changes and Updates
  177 D1:B4F5 -  -  -  -  ;
  178 D1:B4F5 -  -  -  -  ; ***************************************************************************************
  179 D1:B4F5 -  -  -  -  ;
  180 D1:B4F5 -  -  -  -  ;		Date			Notes
  181 D1:B4F5 -  -  -  -  ;		==== 			=====
  182 D1:B4F5 -  -  -  -  ;
  183 D1:B4F5 -  -  -  -  ; ***************************************************************************************
  184 D1:B4F5 -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B4F5 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B4F5 -  -  -  -  ; ***************************************************************************************
    2 D1:B4F5 -  -  -  -  ; ***************************************************************************************
    3 D1:B4F5 -  -  -  -  ;
    4 D1:B4F5 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B4F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4F5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B4F5 -  -  -  -  ;		Reviewed :	No
    8 D1:B4F5 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B4F5 -  -  -  -  ;
   10 D1:B4F5 -  -  -  -  ; ***************************************************************************************
   11 D1:B4F5 -  -  -  -  ;
   12 D1:B4F5 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B4F5 -  -  -  -  ;
   14 D1:B4F5 -  -  -  -  ; ***************************************************************************************
   15 D1:B4F5 -  -  -  -  
   16 D1:B4F5 -  -  -  -  Int32ToString:
   17 D1:B4F5 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B4F6 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B4F7 E5 -  -  -  		push 	hl
   20 D1:B4F8 11 00 00 00 		ld	 	de,$0000
   21 D1:B4FC D9 -  -  -  		exx
   22 D1:B4FD D5 -  -  -  		push 	de
   23 D1:B4FE E5 -  -  -  		push 	hl
   24 D1:B4FF 11 00 00 00 		ld 		de,$000
   25 D1:B503 D9 -  -  -  		exx
   26 D1:B504 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B505 -  -  -  -  		;
   28 D1:B505 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B507 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B509 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B50B 5F -  -  -  		ld 		e,a
   32 D1:B50C -  -  -  -  		;
   33 D1:B50C D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B50D CB 7C -  -  		bit 	7,h
   35 D1:B50F D9 -  -  -  		exx
   36 D1:B510 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B512 -  -  -  -  		;
   38 D1:B512 CD DE B4 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B516 -  -  -  -  		;
   40 D1:B516 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B518 02 -  -  -  		ld 		(bc),a
   42 D1:B519 03 -  -  -  		inc 	bc
   43 D1:B51A -  -  -  -  _I32TSNotNegative:	
   44 D1:B51A CD 29 B5 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B51E -  -  -  -  _I32TSExit:
   46 D1:B51E 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B520 02 -  -  -  		ld 		(bc),a 
   48 D1:B521 -  -  -  -  
   49 D1:B521 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B522 E1 -  -  -  		pop 	hl
   51 D1:B523 D1 -  -  -  		pop 	de
   52 D1:B524 D9 -  -  -  		exx
   53 D1:B525 E1 -  -  -  		pop 	hl
   54 D1:B526 D1 -  -  -  		pop 	de
   55 D1:B527 C1 -  -  -  		pop 	bc
   56 D1:B528 C9 -  -  -  		ret
   57 D1:B529 -  -  -  -  
   58 D1:B529 -  -  -  -  _I32RecursiveConvert:
   59 D1:B529 CD 36 B3 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B52D F5 -  -  -  		push 	af 							; save remainder
   61 D1:B52E CD AD B4 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B532 C4 29 B5 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B536 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B537 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B539 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B53B C6 07 -  -  		add 	a,7
   67 D1:B53D -  -  -  -  _I32NotHex:
   68 D1:B53D C6 30 -  -  		add 	a,48
   69 D1:B53F 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B540 03 -  -  -  		inc 	bc
   71 D1:B541 C9 -  -  -  		ret		
   72 D1:B542 -  -  -  -  
   73 D1:B542 -  -  -  -  ; ***************************************************************************************
   74 D1:B542 -  -  -  -  ;
   75 D1:B542 -  -  -  -  ;									Changes and Updates
   76 D1:B542 -  -  -  -  ;
   77 D1:B542 -  -  -  -  ; ***************************************************************************************
   78 D1:B542 -  -  -  -  ;
   79 D1:B542 -  -  -  -  ;		Date			Notes
   80 D1:B542 -  -  -  -  ;		==== 			=====
   81 D1:B542 -  -  -  -  ;
   82 D1:B542 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 D1:B542 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B542 -  -  -  -  ; ***************************************************************************************
    2 D1:B542 -  -  -  -  ; ***************************************************************************************
    3 D1:B542 -  -  -  -  ;
    4 D1:B542 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B542 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B542 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B542 -  -  -  -  ;		Reviewed :	No
    8 D1:B542 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B542 -  -  -  -  ;
   10 D1:B542 -  -  -  -  ; ***************************************************************************************
   11 D1:B542 -  -  -  -  ; ***************************************************************************************
   12 D1:B542 -  -  -  -  
   13 D1:B542 -  -  -  -  #ifdef AQUARIUS
   14 D1:B542             
   15 D1:B542             ; ***************************************************************************************
   16 D1:B542             ;
   17 D1:B542             ;								Initialise system stuff
   18 D1:B542             ;
   19 D1:B542             ; ***************************************************************************************
   20 D1:B542             
   21 D1:B542             SYSInitialise:
   22 D1:B542             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B542             	call 	SYSPrintChar
   24 D1:B542             	ret
   25 D1:B542             
   26 D1:B542             ; ***************************************************************************************
   27 D1:B542             ;
   28 D1:B542             ;								Terminate system stuff
   29 D1:B542             ;
   30 D1:B542             ; ***************************************************************************************
   31 D1:B542             
   32 D1:B542             SYSTerminate:
   33 D1:B542             	jr 		SYSTerminate
   34 D1:B542             
   35 D1:B542             ; ***************************************************************************************
   36 D1:B542             ;
   37 D1:B542             ;								Print A character
   38 D1:B542             ;
   39 D1:B542             ; ***************************************************************************************
   40 D1:B542             
   41 D1:B542             SYSPrintChar:
   42 D1:B542             	push 	af 									; we stack everything including alt registers
   43 D1:B542             	push 	bc
   44 D1:B542             	push 	de
   45 D1:B542             	push 	hl
   46 D1:B542             	push 	ix
   47 D1:B542             	push 	iy
   48 D1:B542             	exx
   49 D1:B542             	push 	bc
   50 D1:B542             	push 	de
   51 D1:B542             	push 	hl
   52 D1:B542             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B542             	pop 	hl
   54 D1:B542             	pop 	de
   55 D1:B542             	pop 	bc
   56 D1:B542             	exx
   57 D1:B542             	pop 	iy
   58 D1:B542             	pop 	ix
   59 D1:B542             	pop 	hl
   60 D1:B542             	pop 	de
   61 D1:B542             	pop 	bc
   62 D1:B542             	pop 	af
   63 D1:B542             	ret		
   64 D1:B542             
   65 D1:B542             ; ***************************************************************************************
   66 D1:B542             ;
   67 D1:B542             ;									Print Newline
   68 D1:B542             ;
   69 D1:B542             ; ***************************************************************************************
   70 D1:B542             
   71 D1:B542             SYSPrintCRLF:
   72 D1:B542             	push 	af
   73 D1:B542             	ld 		a,13
   74 D1:B542             	call 	SYSPrintChar
   75 D1:B542             	ld 		a,10
   76 D1:B542             	call 	SYSPrintChar
   77 D1:B542             	pop 	af
   78 D1:B542             	ret
   79 D1:B542             
   80 D1:B542             ; ***************************************************************************************
   81 D1:B542             ;
   82 D1:B542             ;									Get time into HL'HL
   83 D1:B542             ;
   84 D1:B542             ; ***************************************************************************************
   85 D1:B542             
   86 D1:B542             SYSGetTimer:
   87 D1:B542              	in 		a,($00)
   88 D1:B542              	ld 		l,a
   89 D1:B542              	in 		a,($01)
   90 D1:B542              	ld 		h,a
   91 D1:B542              	exx
   92 D1:B542              	in 		a,($02)
   93 D1:B542              	ld 		l,a
   94 D1:B542              	in 		a,($03)
   95 D1:B542              	ld 		h,a
   96 D1:B542              	exx
   97 D1:B542             	ret 	
   98 D1:B542             	
   99 D1:B542             #endif
  100 D1:B542 -  -  -  -  
  101 D1:B542 -  -  -  -  ; ***************************************************************************************
  102 D1:B542 -  -  -  -  ;
  103 D1:B542 -  -  -  -  ;									Changes and Updates
  104 D1:B542 -  -  -  -  ;
  105 D1:B542 -  -  -  -  ; ***************************************************************************************
  106 D1:B542 -  -  -  -  ;
  107 D1:B542 -  -  -  -  ;		Date			Notes
  108 D1:B542 -  -  -  -  ;		==== 			=====
  109 D1:B542 -  -  -  -  ;
  110 D1:B542 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 D1:B542 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B542 -  -  -  -  ; ***************************************************************************************
    2 D1:B542 -  -  -  -  ; ***************************************************************************************
    3 D1:B542 -  -  -  -  ;
    4 D1:B542 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B542 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B542 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B542 -  -  -  -  ;		Reviewed :	No
    8 D1:B542 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B542 -  -  -  -  ;
   10 D1:B542 -  -  -  -  ; ***************************************************************************************
   11 D1:B542 -  -  -  -  ; ***************************************************************************************
   12 D1:B542 -  -  -  -  
   13 D1:B542 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B542             
   15 D1:B542             ; ***************************************************************************************
   16 D1:B542             ;
   17 D1:B542             ;								Initialise system stuff
   18 D1:B542             ;
   19 D1:B542             ; ***************************************************************************************
   20 D1:B542             
   21 D1:B542             SYSInitialise:
   22 D1:B542             	ret
   23 D1:B542             
   24 D1:B542             ; ***************************************************************************************
   25 D1:B542             ;
   26 D1:B542             ;								Terminate system stuff
   27 D1:B542             ;
   28 D1:B542             ; ***************************************************************************************
   29 D1:B542             
   30 D1:B542             SYSTerminate:
   31 D1:B542             	ret
   32 D1:B542             
   33 D1:B542             ; ***************************************************************************************
   34 D1:B542             ;
   35 D1:B542             ;								Print A character
   36 D1:B542             ;
   37 D1:B542             ; ***************************************************************************************
   38 D1:B542             
   39 D1:B542             SYSPrintChar:
   40 D1:B542             	ret		
   41 D1:B542             
   42 D1:B542             ; ***************************************************************************************
   43 D1:B542             ;
   44 D1:B542             ;									Print Newline
   45 D1:B542             ;
   46 D1:B542             ; ***************************************************************************************
   47 D1:B542             
   48 D1:B542             SYSPrintCRLF:
   49 D1:B542             	ret
   50 D1:B542             
   51 D1:B542             ; ***************************************************************************************
   52 D1:B542             ;
   53 D1:B542             ;									Get time into HL'HL
   54 D1:B542             ;
   55 D1:B542             ; ***************************************************************************************
   56 D1:B542             
   57 D1:B542             SYSGetTimer:
   58 D1:B542             	ret
   59 D1:B542             
   60 D1:B542             #endif
   61 D1:B542 -  -  -  -  
   62 D1:B542 -  -  -  -  ; ***************************************************************************************
   63 D1:B542 -  -  -  -  ;
   64 D1:B542 -  -  -  -  ;									Changes and Updates
   65 D1:B542 -  -  -  -  ;
   66 D1:B542 -  -  -  -  ; ***************************************************************************************
   67 D1:B542 -  -  -  -  ;
   68 D1:B542 -  -  -  -  ;		Date			Notes
   69 D1:B542 -  -  -  -  ;		==== 			=====
   70 D1:B542 -  -  -  -  ;
   71 D1:B542 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 D1:B542 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B542 -  -  -  -  ; ***************************************************************************************
    2 D1:B542 -  -  -  -  ; ***************************************************************************************
    3 D1:B542 -  -  -  -  ;
    4 D1:B542 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B542 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B542 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B542 -  -  -  -  ;		Reviewed :	No
    8 D1:B542 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B542 -  -  -  -  ;
   10 D1:B542 -  -  -  -  ; ***************************************************************************************
   11 D1:B542 -  -  -  -  ; ***************************************************************************************
   12 D1:B542 -  -  -  -  
   13 D1:B542 -  -  -  -  #ifdef TI84
   14 D1:B542 -  -  -  -  
   15 D1:B542 -  -  -  -  ; ***************************************************************************************
   16 D1:B542 -  -  -  -  ;
   17 D1:B542 -  -  -  -  ;								Initialise system stuff
   18 D1:B542 -  -  -  -  ;
   19 D1:B542 -  -  -  -  ; ***************************************************************************************
   20 D1:B542 -  -  -  -  
   21 D1:B542 -  -  -  -  SYSInitialise:
   22 D1:B542 F3 -  -  -  	di
   23 D1:B543 ED 73 60 B5 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B548 FD 22 64 B5 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B54D C9 -  -  -  	ret
   26 D1:B54E -  -  -  -  
   27 D1:B54E -  -  -  -  ; ***************************************************************************************
   28 D1:B54E -  -  -  -  ;
   29 D1:B54E -  -  -  -  ;								Terminate system stuff
   30 D1:B54E -  -  -  -  ;
   31 D1:B54E -  -  -  -  ; ***************************************************************************************
   32 D1:B54E -  -  -  -  
   33 D1:B54E -  -  -  -  SYSTerminate:
   34 D1:B54E ED 7B 60 B5 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B553 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B555 FD 2A 64 B5 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B55A FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B55E FB -  -  -  	ei
   39 D1:B55F C9 -  -  -  	ret 										; and exit.
   40 D1:B560 -  -  -  -  
   41 D1:B560 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B560 00 00 00 00 	.dw 	0,0
   43 D1:B564 -  -  -  -  _IYTemp84:
   44 D1:B564 00 00 00 00 	.dw 	0,0		
   45 D1:B568 -  -  -  -  
   46 D1:B568 -  -  -  -  ; ***************************************************************************************
   47 D1:B568 -  -  -  -  ;
   48 D1:B568 -  -  -  -  ;								Print A character
   49 D1:B568 -  -  -  -  ;
   50 D1:B568 -  -  -  -  ; ***************************************************************************************
   51 D1:B568 -  -  -  -  
   52 D1:B568 -  -  -  -  SYSPrintChar:
   53 D1:B568 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B569 C5 -  -  -  	push 	bc
   55 D1:B56A D5 -  -  -  	push 	de
   56 D1:B56B E5 -  -  -  	push 	hl
   57 D1:B56C DD E5 -  -  	push 	ix
   58 D1:B56E FD E5 -  -  	push 	iy
   59 D1:B570 D9 -  -  -  	exx
   60 D1:B571 C5 -  -  -  	push 	bc
   61 D1:B572 D5 -  -  -  	push 	de
   62 D1:B573 E5 -  -  -  	push 	hl
   63 D1:B574 -  -  -  -  
   64 D1:B574 FD 2A 64 B5 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B579 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B57D F3 -  -  -  	di
   67 D1:B57E FD 22 64 B5 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B583 -  -  -  -  
   69 D1:B583 E1 -  -  -  	pop 	hl
   70 D1:B584 D1 -  -  -  	pop 	de
   71 D1:B585 C1 -  -  -  	pop 	bc
   72 D1:B586 D9 -  -  -  	exx
   73 D1:B587 FD E1 -  -  	pop 	iy
   74 D1:B589 DD E1 -  -  	pop 	ix
   75 D1:B58B E1 -  -  -  	pop 	hl
   76 D1:B58C D1 -  -  -  	pop 	de
   77 D1:B58D C1 -  -  -  	pop 	bc
   78 D1:B58E F1 -  -  -  	pop 	af
   79 D1:B58F C9 -  -  -  	ret		
   80 D1:B590 -  -  -  -  
   81 D1:B590 -  -  -  -  ; ***************************************************************************************
   82 D1:B590 -  -  -  -  ;
   83 D1:B590 -  -  -  -  ;									Print Newline
   84 D1:B590 -  -  -  -  ;
   85 D1:B590 -  -  -  -  ; ***************************************************************************************
   86 D1:B590 -  -  -  -  
   87 D1:B590 -  -  -  -  SYSPrintCRLF:
   88 D1:B590 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B591 C5 -  -  -  	push 	bc
   90 D1:B592 D5 -  -  -  	push 	de
   91 D1:B593 E5 -  -  -  	push 	hl
   92 D1:B594 DD E5 -  -  	push 	ix
   93 D1:B596 FD E5 -  -  	push 	iy
   94 D1:B598 D9 -  -  -  	exx
   95 D1:B599 C5 -  -  -  	push 	bc
   96 D1:B59A D5 -  -  -  	push 	de
   97 D1:B59B E5 -  -  -  	push 	hl
   98 D1:B59C -  -  -  -  
   99 D1:B59C FD 2A 64 B5 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B5A1 CD F0 07 02 	call 	_newline
  101 D1:B5A5 F3 -  -  -  	di
  102 D1:B5A6 FD 22 64 B5 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B5AB -  -  -  -  
  104 D1:B5AB E1 -  -  -  	pop 	hl
  105 D1:B5AC D1 -  -  -  	pop 	de
  106 D1:B5AD C1 -  -  -  	pop 	bc
  107 D1:B5AE D9 -  -  -  	exx
  108 D1:B5AF FD E1 -  -  	pop 	iy
  109 D1:B5B1 DD E1 -  -  	pop 	ix
  110 D1:B5B3 E1 -  -  -  	pop 	hl
  111 D1:B5B4 D1 -  -  -  	pop 	de
  112 D1:B5B5 C1 -  -  -  	pop 	bc
  113 D1:B5B6 F1 -  -  -  	pop 	af
  114 D1:B5B7 C9 -  -  -  	ret
  115 D1:B5B8 -  -  -  -  
  116 D1:B5B8 -  -  -  -  ; ***************************************************************************************
  117 D1:B5B8 -  -  -  -  ;
  118 D1:B5B8 -  -  -  -  ;									Get time into HL'HL
  119 D1:B5B8 -  -  -  -  ;
  120 D1:B5B8 -  -  -  -  ; ***************************************************************************************
  121 D1:B5B8 -  -  -  -  
  122 D1:B5B8 -  -  -  -  SYSGetTimer:
  123 D1:B5B8 21 34 12 00 	ld 		hl,$1234
  124 D1:B5BC D9 -  -  -  	exx
  125 D1:B5BD 21 78 56 00 	ld 		hl,$5678
  126 D1:B5C1 D9 -  -  -  	exx
  127 D1:B5C2 C9 -  -  -  	ret
  128 D1:B5C3 -  -  -  -  
  129 D1:B5C3 -  -  -  -  #endif
  130 D1:B5C3 -  -  -  -  
  131 D1:B5C3 -  -  -  -  ; ***************************************************************************************
  132 D1:B5C3 -  -  -  -  ;
  133 D1:B5C3 -  -  -  -  ;									Changes and Updates
  134 D1:B5C3 -  -  -  -  ;
  135 D1:B5C3 -  -  -  -  ; ***************************************************************************************
  136 D1:B5C3 -  -  -  -  ;
  137 D1:B5C3 -  -  -  -  ;		Date			Notes
  138 D1:B5C3 -  -  -  -  ;		==== 			=====
  139 D1:B5C3 -  -  -  -  ;
  140 D1:B5C3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B5C3 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B5C3 -  -  -  -  ; ***************************************************************************************
    2 D1:B5C3 -  -  -  -  ; ***************************************************************************************
    3 D1:B5C3 -  -  -  -  ;
    4 D1:B5C3 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B5C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5C3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5C3 -  -  -  -  ;		Reviewed :	No
    8 D1:B5C3 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B5C3 -  -  -  -  ;
   10 D1:B5C3 -  -  -  -  ; ***************************************************************************************
   11 D1:B5C3 -  -  -  -  ; ***************************************************************************************
   12 D1:B5C3 -  -  -  -  
   13 D1:B5C3 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 22 01 00 B6 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B6 3F 0C 
              53 65 65 64 
              20 3D 20 34 
              35 30 32 34 
              0D 80 10 03 
              00 C2 9A 95 
              41 6B 52 70 
              43 45 A3 8F 
              41 80 15 04 
              00 C2 9E 95 
              41 5D 4D 47 
              5D 56 A3 8F 
              42 62 72 78 
              62 69 80 1D 
              05 00 C2 9B 
              96 95 41 59 
              52 60 43 40 
              A3 8F 3F 0A 
              31 34 39 38 
              30 32 32 30 
              38 30 0D 80 
              15 06 00 C2 
              9E 95 41 4B 
              45 4E 46 7F 
              A3 8F 42 74 
              7A 71 79 40 
              80 12 07 00 
              C2 9A 95 8A 
              41 40 7D 76 
              45 6C A3 8F 
              8A 41 80 13 
              08 00 C2 83 
              95 9F 89 47 
              A3 8F 94 41 
              45 51 44 4D 
              42 80 13 09 
              00 C2 83 95 
              9F 89 4D A3 
              8F 94 41 4B 
              52 64 65 48 
              80 0F 0A 00 
              C2 9A 95 58 
              77 54 4B 7F 
              A3 8F 41 80 
              0E 0B 00 C2 
              84 95 9F 89 
              4C A3 8F 41 
              47 80 13 0C 
              00 C2 98 95 
              3F 06 66 72 
              77 64 73 63 
              0D A3 8F 46 
              80 11 0D 00 
              C2 94 55 47 
              43 45 77 8F 
              55 47 43 45 
              77 80 1C 0E 
              00 C2 A2 95 
              3F 0A 31 37 
              39 32 34 39 
              31 33 39 30 
              0D A3 8F 41 
              6A 75 73 7D 
              7E 80 1A 0F 
              00 C2 A2 95 
              3F 09 34 31 
              30 33 37 39 
              38 39 33 0D 
              A3 8F 58 5D 
              5E 59 75 80 
              13 10 00 C2 
              99 95 6A 6F 
              67 42 78 A3 
              8F 6A 6F 67 
              42 78 80 1B 
              11 00 C2 96 
              95 9F 89 54 
              A3 8F 3F 0C 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 16 12 
              00 C2 99 95 
              8A 41 4C 7D 
              4D 56 50 A3 
              8F 41 4C 7D 
              4D 56 50 80 
              10 13 00 C2 
              9C 96 95 41 
              4C A3 8F 3F 
              01 4C 0D 80 
              13 14 00 C2 
              83 95 9F 89 
              48 A3 8F 94 
              41 46 51 54 
              51 43 80 1C 
              15 00 C2 A2 
              95 3F 0A 2D 
              34 37 38 37 
              35 35 33 39 
              34 0D A3 8F 
              8A 5C 62 53 
              69 42 80 14 
              16 00 C2 9E 
              95 51 42 47 
              79 4F A3 8F 
              43 6E 7D 78 
              46 70 80 10 
              17 00 C2 9C 
              96 95 41 57 
              A3 8F 3F 01 
              57 0D 80 1D 
              18 00 C2 9B 
              96 95 8A 60 
              7F 58 41 41 
              A3 8F 3F 0A 
              2D 35 35 33 
              34 38 34 33 
              35 33 0D 80 
              1B 19 00 C2 
              9B 96 95 74 
              6C 7C 6F 4B 
              A3 8F 3F 09 
              38 38 34 31 
              39 38 33 34 
              37 0D 80 12 
              1A 00 C2 8A 
              8A 7E 7E 5E 
              76 7B 8F 7E 
              7E 5E 76 7B 
              80 11 1B 00 
              C2 94 6A 4C 
              52 60 71 8F 
              6A 4C 52 60 
              71 80 12 1C 
              00 C2 8A 8A 
              66 6E 57 7B 
              63 8F 66 6E 
              57 7B 63 80 
              13 1D 00 C2 
              94 43 74 66 
              5A 79 74 8F 
              43 74 66 5A 
              79 74 80 0E 
              1E 00 C2 98 
              95 3F 01 75 
              0D A3 8F 41 
              80 15 1F 00 
              C2 9E 95 41 
              7B 79 79 7A 
              40 A3 8F 42 
              44 46 46 45 
              7F 80 13 20 
              00 C2 83 95 
              9F 89 4E A3 
              8F 94 41 4C 
              52 74 69 49 
              80 15 21 00 
              C2 99 95 41 
              76 6F 7B 62 
              76 A3 8F 41 
              76 6F 7B 62 
              76 80 24 22 
              00 C2 96 95 
              9F 89 4B A3 
              8F 3F 15 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 23 
              00 C2 9E 95 
              77 4E 40 4C 
              43 A3 8F 43 
              48 71 7F 73 
              7C 80 10 24 
              00 C2 9C 96 
              95 41 44 A3 
              8F 3F 01 44 
              0D 80 10 25 
              00 C2 9C 96 
              95 41 56 A3 
              8F 3F 01 56 
              0D 80 14 26 
              00 C2 8A 8A 
              41 51 76 7D 
              49 5B 8F 41 
              51 76 7D 49 
              5B 80 0E 27 
              00 C2 84 95 
              9F 89 4D A3 
              8F 41 48 80 
              14 28 00 C2 
              8A 8A 41 75 
              55 4F 7B 45 
              8F 41 75 55 
              4F 7B 45 80 
              15 29 00 C2 
              99 95 41 50 
              51 4B 48 47 
              A3 8F 41 50 
              51 4B 48 47 
              80 15 2A 00 
              C2 99 95 41 
              41 40 64 6F 
              48 A3 8F 41 
              41 40 64 6F 
              48 80 1D 2B 
              00 C2 9B 96 
              95 8A 49 42 
              56 73 4B A3 
              8F 3F 0A 2D 
              31 35 31 36 
              31 32 36 31 
              39 0D 80 1C 
              2C 00 C2 9B 
              96 95 8A 44 
              6A 72 4E 65 
              A3 8F 3F 09 
              2D 37 38 33 
              32 34 36 34 
              35 0D 80 11 
              2D 00 C2 9A 
              95 8A 5E 54 
              6A 6F 44 A3 
              8F 8A 41 80 
              1E 2E 00 C2 
              A2 95 3F 0B 
              2D 31 36 38 
              39 35 38 35 
              38 33 31 0D 
              A3 8F 8A 41 
              64 6D 50 62 
              67 80 0D 2F 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 1C 
              30 00 C2 A2 
              95 3F 0A 2D 
              36 36 33 37 
              35 31 31 32 
              38 0D A3 8F 
              8A 67 64 40 
              67 58 80 15 
              31 00 C2 9E 
              95 41 7F 6A 
              6E 5E 47 A3 
              8F 42 40 55 
              51 61 78 80 
              1C 32 00 C2 
              A2 95 3F 0A 
              2D 32 31 34 
              35 35 31 33 
              33 32 0D A3 
              8F 8A 4C 72 
              5C 6C 64 80 
              13 33 00 C2 
              99 95 63 65 
              52 71 7C A3 
              8F 63 65 52 
              71 7C 80 29 
              34 00 C2 96 
              95 9F 89 46 
              A3 8F 3F 1A 
              41 42 43 44 
              45 46 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              10 35 00 C2 
              9C 96 95 41 
              42 A3 8F 3F 
              01 42 0D 80 
              11 36 00 C2 
              9A 95 8A 56 
              4C 73 50 5B 
              A3 8F 8A 41 
              80 14 37 00 
              C2 8A 8A 41 
              54 56 41 7F 
              6B 8F 41 54 
              56 41 7F 6B 
              80 13 38 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              1C 39 00 C2 
              A2 95 3F 0A 
              31 38 39 32 
              39 31 37 31 
              38 33 0D A3 
              8F 41 70 74 
              79 7E 7F 80 
              10 3A 00 C2 
              9D 95 3F 02 
              6A 56 0D A3 
              8F 41 6A 80 
              13 3B 00 C2 
              94 42 47 48 
              5E 7A 66 8F 
              42 47 48 5E 
              7A 66 80 1C 
              3C 00 C2 A2 
              95 3F 0A 2D 
              34 34 37 32 
              30 30 32 30 
              37 0D A3 8F 
              8A 5A 69 7B 
              6F 4F 80 13 
              3D 00 C2 9D 
              95 3F 05 44 
              4E 78 49 75 
              0D A3 8F 41 
              44 80 15 3E 
              00 C2 99 95 
              41 6A 4D 66 
              55 5B A3 8F 
              41 6A 4D 66 
              55 5B 80 1A 
              3F 00 C2 A2 
              95 3F 09 34 
              31 39 30 31 
              31 30 34 31 
              0D A3 8F 58 
              7E 59 67 61 
              80 14 40 00 
              C2 8A 41 53 
              77 5E 4D 64 
              8F 8A 41 53 
              77 5E 4D 64 
              80 15 41 00 
              C2 9E 95 42 
              4B 70 78 72 
              4E A3 8F 41 
              74 4F 47 4D 
              71 80 13 42 
              00 C2 83 95 
              9F 89 53 A3 
              8F 94 41 51 
              54 44 7D 4E 
              80 13 43 00 
              C2 94 43 72 
              6F 76 51 70 
              8F 43 72 6F 
              76 51 70 80 
              1C 44 00 C2 
              A2 95 3F 0A 
              31 39 38 34 
              38 37 35 37 
              34 35 0D A3 
              8F 41 76 53 
              6C 73 61 80 
              0E 45 00 C2 
              84 95 9F 89 
              47 A3 8F 41 
              42 80 1F 46 
              00 C2 9B 96 
              95 8A 41 4B 
              7D 75 71 5C 
              A3 8F 3F 0B 
              2D 31 32 37 
              34 35 30 32 
              32 33 36 0D 
              80 20 47 00 
              C2 96 95 9F 
              89 4F A3 8F 
              3F 11 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 12 48 00 
              C2 9A 95 8A 
              41 7B 40 56 
              7F 41 A3 8F 
              8A 41 80 0D 
              49 00 C2 9D 
              95 3F 00 0D 
              A3 8F 4D 80 
              10 4A 00 C2 
              9C 96 95 41 
              49 A3 8F 3F 
              01 49 0D 80 
              14 4B 00 C2 
              98 95 3F 07 
              65 67 42 65 
              47 64 67 0D 
              A3 8F 47 80 
              10 4C 00 C2 
              9A 95 41 6C 
              7D 44 48 7B 
              A3 8F 41 80 
              16 4D 00 C2 
              99 95 8A 41 
              5B 6B 5A 5D 
              5C A3 8F 41 
              5B 6B 5A 5D 
              5C 80 14 4E 
              00 C2 9E 95 
              43 5E 58 6B 
              75 5F A3 8F 
              61 67 54 4A 
              60 80 14 4F 
              00 C2 9E 95 
              4E 4F 6B 5D 
              58 A3 8F 43 
              71 70 54 62 
              67 80 16 50 
              00 C2 9D 95 
              3F 08 6E 7A 
              51 4A 7A 6D 
              4E 6B 0D A3 
              8F 41 6E 80 
              11 51 00 C2 
              94 7F 58 67 
              53 4F 8F 7F 
              58 67 53 4F 
              80 14 52 00 
              C2 9D 95 3F 
              06 62 59 63 
              4B 66 49 0D 
              A3 8F 41 62 
              80 13 53 00 
              C2 83 95 9F 
              89 52 A3 8F 
              94 41 50 53 
              74 79 4D 80 
              10 54 00 C2 
              9C 96 95 41 
              4A A3 8F 3F 
              01 4A 0D 80 
              25 55 00 C2 
              96 95 9F 89 
              4A A3 8F 3F 
              16 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 0F 56 00 
              C2 9A 95 44 
              7B 6B 6A 59 
              A3 8F 41 80 
              10 57 00 C2 
              9C 96 95 41 
              56 A3 8F 3F 
              01 56 0D 80 
              1B 58 00 C2 
              96 95 9F 89 
              54 A3 8F 3F 
              0C 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 15 
              59 00 C2 9D 
              95 3F 07 4F 
              4A 61 50 53 
              5A 66 0D A3 
              8F 41 4F 80 
              0F 5A 00 C2 
              9A 95 6B 60 
              58 76 6B A3 
              8F 41 80 13 
              5B 00 C2 94 
              43 7A 6A 4C 
              50 4B 8F 43 
              7A 6A 4C 50 
              4B 80 11 5C 
              00 C2 98 95 
              3F 04 54 78 
              43 56 0D A3 
              8F 44 80 13 
              5D 00 C2 94 
              41 6E 62 77 
              42 5E 8F 41 
              6E 62 77 42 
              5E 80 13 5E 
              00 C2 98 95 
              3F 06 68 56 
              66 6B 51 79 
              0D A3 8F 46 
              80 14 5F 00 
              C2 9E 95 43 
              5B 59 7D 42 
              5A A3 8F 64 
              66 42 7D 65 
              80 16 60 00 
              C2 99 95 8A 
              41 48 5D 62 
              58 5B A3 8F 
              41 48 5D 62 
              58 5B 80 12 
              61 00 C2 8A 
              8A 6C 46 78 
              54 58 8F 6C 
              46 78 54 58 
              80 15 62 00 
              C2 9E 95 42 
              45 7D 6F 6F 
              53 A3 8F 41 
              7A 42 50 50 
              6C 80 25 63 
              00 C2 96 95 
              9F 89 4A A3 
              8F 3F 16 45 
              46 47 48 49 
              4A 4B 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 10 
              64 00 C2 9C 
              96 95 41 41 
              A3 8F 3F 01 
              41 0D 80 0E 
              65 00 C2 84 
              95 9F 89 54 
              A3 8F 41 4F 
              80 10 66 00 
              C2 9C 96 95 
              41 4F A3 8F 
              3F 01 4F 0D 
              80 0E 67 00 
              C2 84 95 9F 
              89 4B A3 8F 
              41 46 80 13 
              68 00 C2 94 
              41 73 6C 57 
              40 63 8F 41 
              73 6C 57 40 
              63 80 16 69 
              00 C2 9D 95 
              3F 08 55 4D 
              74 58 6B 4B 
              77 55 0D A3 
              8F 41 55 80 
              10 6A 00 C2 
              9D 95 3F 02 
              73 61 0D A3 
              8F 41 73 80 
              1B 6B 00 C2 
              9B 96 95 51 
              64 65 5C 68 
              A3 8F 3F 09 
              32 39 34 38 
              30 33 32 34 
              30 0D 80 1A 
              6C 00 C2 9B 
              96 95 43 73 
              62 5C 6E A3 
              8F 3F 08 36 
              33 38 34 32 
              30 39 34 0D 
              80 15 6D 00 
              C2 9E 95 41 
              61 72 60 5C 
              7D A3 8F 42 
              5E 4D 5F 63 
              42 80 1A 6E 
              00 C2 A2 95 
              3F 09 35 32 
              30 34 35 37 
              33 30 38 0D 
              A3 8F 5F 41 
              58 71 5C 80 
              12 6F 00 C2 
              8A 4E 7E 65 
              54 7C 8F 8A 
              4E 7E 65 54 
              7C 80 14 70 
              00 C2 9E 95 
              55 59 4C 6A 
              6E A3 8F 43 
              6A 66 73 55 
              51 80 13 71 
              00 C2 98 95 
              3F 06 46 78 
              77 57 66 4D 
              0D A3 8F 46 
              80 13 72 00 
              C2 99 95 62 
              7E 56 7D 53 
              A3 8F 62 7E 
              56 7D 53 80 
              15 73 00 C2 
              98 95 3F 08 
              69 59 51 77 
              4A 43 65 62 
              0D A3 8F 48 
              80 1F 74 00 
              C2 9B 96 95 
              8A 41 4B 52 
              79 7F 68 A3 
              8F 3F 0B 2D 
              31 32 36 33 
              32 34 37 33 
              33 36 0D 80 
              1D 75 00 C2 
              9B 96 95 41 
              52 7D 76 51 
              7F A3 8F 3F 
              0A 31 33 39 
              31 39 34 34 
              38 33 31 0D 
              80 23 76 00 
              C2 96 95 9F 
              89 4C A3 8F 
              3F 14 47 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              1D 77 00 C2 
              9B 96 95 41 
              78 7B 7E 43 
              47 A3 8F 3F 
              0A 32 30 32 
              38 39 38 36 
              35 36 37 0D 
              80 11 78 00 
              C2 9A 95 8A 
              61 45 5F 4B 
              62 A3 8F 8A 
              41 80 14 79 
              00 C2 99 95 
              8A 56 5B 6A 
              43 51 A3 8F 
              56 5B 6A 43 
              51 80 11 7A 
              00 C2 9A 95 
              8A 58 4F 70 
              45 62 A3 8F 
              8A 41 80 10 
              7B 00 C2 9C 
              96 95 41 56 
              A3 8F 3F 01 
              56 0D 80 1D 
              7C 00 C2 9B 
              96 95 41 60 
              5F 72 5A 7A 
              A3 8F 3F 0A 
              31 36 31 38 
              39 34 35 37 
              32 32 0D 80 
              0E 7D 00 C2 
              84 95 9F 89 
              53 A3 8F 41 
              4E 80 1D 7E 
              00 C2 9B 96 
              95 41 79 46 
              47 5E 41 A3 
              8F 3F 0A 32 
              30 33 31 36 
              34 36 35 39 
              33 0D 80 13 
              7F 00 C2 83 
              95 9F 89 4C 
              A3 8F 94 41 
              4A 52 54 61 
              47 80 1D 80 
              00 C2 9B 96 
              95 41 57 5D 
              40 56 6F A3 
              8F 3F 0A 31 
              34 36 37 32 
              32 31 34 32 
              33 0D 80 13 
              81 00 C2 83 
              95 9F 89 53 
              A3 8F 94 41 
              51 54 44 7D 
              4E 80 13 82 
              00 C2 94 43 
              6B 79 7C 62 
              6B 8F 43 6B 
              79 7C 62 6B 
              80 14 83 00 
              C2 99 95 8A 
              7A 4F 6C 4F 
              44 A3 8F 7A 
              4F 6C 4F 44 
              80 10 84 00 
              C2 9C 96 95 
              41 4E A3 8F 
              3F 01 4E 0D 
              80 12 85 00 
              C2 9A 95 8A 
              41 78 7C 48 
              56 6E A3 8F 
              8A 41 80 1F 
              86 00 C2 9B 
              96 95 8A 41 
              69 75 5B 64 
              70 A3 8F 3F 
              0B 2D 31 37 
              37 35 36 31 
              34 32 35 36 
              0D 80 0E 87 
              00 C2 84 95 
              9F 89 4A A3 
              8F 41 45 80 
              14 88 00 C2 
              99 95 8A 79 
              70 70 6C 72 
              A3 8F 79 70 
              70 6C 72 80 
              10 89 00 C2 
              9C 96 95 41 
              57 A3 8F 3F 
              01 57 0D 80 
              12 8A 00 C2 
              8A 6C 67 51 
              56 44 8F 8A 
              6C 67 51 56 
              44 80 14 8B 
              00 C2 9E 95 
              43 4F 59 53 
              6C 6F A3 8F 
              70 66 6C 53 
              50 80 0E 8C 
              00 C2 84 95 
              9F 89 4C A3 
              8F 41 47 80 
              1D 8D 00 C2 
              A2 95 3F 0B 
              2D 31 30 31 
              33 34 36 39 
              39 39 37 0D 
              A3 8F 8A 7C 
              5A 45 4C 6D 
              80 14 8E 00 
              C2 9E 95 7E 
              6E 76 72 72 
              A3 8F 43 41 
              51 49 4D 4D 
              80 0F 8F 00 
              C2 98 95 3F 
              02 63 72 0D 
              A3 8F 42 80 
              1C 90 00 C2 
              A2 95 3F 0A 
              2D 34 39 36 
              39 32 34 37 
              31 39 0D A3 
              8F 8A 5D 67 
              67 60 6F 80 
              11 91 00 C2 
              9A 95 8A 70 
              50 74 78 70 
              A3 8F 8A 41 
              80 13 92 00 
              C2 83 95 9F 
              89 4A A3 8F 
              94 41 48 51 
              74 59 45 80 
              1F 93 00 C2 
              9B 96 95 8A 
              41 76 76 7D 
              6D 77 A3 8F 
              3F 0B 2D 31 
              39 39 34 31 
              32 30 30 35 
              35 0D 80 13 
              94 00 C2 94 
              43 5B 49 47 
              41 64 8F 43 
              5B 49 47 41 
              64 80 15 95 
              00 C2 9E 95 
              42 72 45 5F 
              59 56 A3 8F 
              41 4D 7A 60 
              66 69 80 11 
              96 00 C2 9D 
              95 3F 03 45 
              51 4F 0D A3 
              8F 41 45 80 
              1A 97 00 C2 
              A2 95 3F 09 
              39 32 34 33 
              31 35 30 36 
              35 0D A3 8F 
              77 45 7E 76 
              79 80 1C 98 
              00 C2 A2 95 
              3F 0A 2D 32 
              34 32 38 38 
              38 33 38 32 
              0D A3 8F 8A 
              4E 5E 62 7A 
              7E 80 0F 99 
              00 C2 9D 95 
              3F 01 64 0D 
              A3 8F 41 64 
              80 1B 9A 00 
              C2 9B 96 95 
              50 74 62 75 
              61 A3 8F 3F 
              09 32 38 32 
              32 30 39 36 
              33 33 0D 80 
              25 9B 00 C2 
              96 95 9F 89 
              4A A3 8F 3F 
              16 45 46 47 
              48 49 4A 4B 
              4C 4D 4E 4F 
              50 51 52 53 
              54 55 56 57 
              58 59 5A 0D 
              80 11 9C 00 
              C2 94 7C 68 
              74 7C 60 8F 
              7C 68 74 7C 
              60 80 24 9D 
              00 C2 96 95 
              9F 89 4B A3 
              8F 3F 15 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 1D 9E 
              00 C2 9B 96 
              95 41 51 67 
              79 50 61 A3 
              8F 3F 0A 31 
              33 36 39 34 
              31 32 36 34 
              31 0D 80 12 
              9F 00 C2 9A 
              95 8A 41 51 
              4A 7A 66 71 
              A3 8F 8A 41 
              80 12 A0 00 
              C2 8A 8A 5C 
              6A 70 5C 43 
              8F 5C 6A 70 
              5C 43 80 0F 
              A1 00 C2 9D 
              95 3F 01 75 
              0D A3 8F 41 
              75 80 12 A2 
              00 C2 8A 8A 
              76 7D 5F 59 
              68 8F 76 7D 
              5F 59 68 80 
              16 A3 00 C2 
              9D 95 3F 08 
              55 71 4D 6C 
              64 4E 49 6B 
              0D A3 8F 41 
              55 80 10 A4 
              00 C2 9A 95 
              41 7A 78 7E 
              76 78 A3 8F 
              41 80 1C A5 
              00 C2 A2 95 
              3F 0A 31 33 
              37 32 38 30 
              38 39 38 36 
              0D A3 8F 41 
              51 74 76 5C 
              5A 80 14 A6 
              00 C2 9E 95 
              43 58 6E 45 
              66 65 A3 8F 
              67 51 7A 59 
              5A 80 1C A7 
              00 C2 A2 95 
              3F 0A 32 30 
              34 35 36 34 
              39 31 32 30 
              0D A3 8F 41 
              79 7B 62 43 
              60 80 0D A8 
              00 C2 98 95 
              3F 00 0D A3 
              8F 40 80 1C 
              A9 00 C2 A2 
              95 3F 0A 2D 
              37 30 38 30 
              39 30 35 32 
              31 0D A3 8F 
              8A 6A 4D 49 
              6A 59 80 13 
              AA 00 C2 94 
              41 76 4F 61 
              4A 66 8F 41 
              76 4F 61 4A 
              66 80 22 AB 
              00 C2 96 95 
              9F 89 4D A3 
              8F 3F 13 48 
              49 4A 4B 4C 
              4D 4E 4F 50 
              51 52 53 54 
              55 56 57 58 
              59 5A 0D 80 
              13 AC 00 C2 
              94 42 54 73 
              53 4E 61 8F 
              42 54 73 53 
              4E 61 80 0E 
              AD 00 C2 84 
              95 9F 89 4C 
              A3 8F 41 47 
              80 12 AE 00 
              C2 8A 58 79 
              44 68 56 8F 
              8A 58 79 44 
              68 56 80 1B 
              AF 00 C2 A2 
              95 3F 09 2D 
              39 32 30 36 
              32 34 31 31 
              0D A3 8F 8A 
              45 5F 4C 4B 
              4B 80 11 B0 
              00 C2 9D 95 
              3F 03 56 48 
              63 0D A3 8F 
              41 56 80 15 
              B1 00 C2 9E 
              95 42 6F 6A 
              67 68 7D A3 
              8F 41 50 55 
              58 57 42 80 
              15 B2 00 C2 
              9E 95 42 6C 
              77 67 67 7C 
              A3 8F 41 53 
              48 58 58 43 
              80 14 B3 00 
              C2 8A 41 65 
              63 69 6C 5F 
              8F 8A 41 65 
              63 69 6C 5F 
              80 15 B4 00 
              C2 9E 95 41 
              54 62 67 78 
              7B A3 8F 42 
              6B 5D 58 47 
              44 80 15 B5 
              00 C2 98 95 
              3F 08 7A 71 
              6D 49 42 46 
              53 76 0D A3 
              8F 48 80 1B 
              B6 00 C2 9B 
              96 95 56 6E 
              78 74 57 A3 
              8F 3F 09 33 
              38 31 33 39 
              30 31 30 33 
              0D 80 10 B7 
              00 C2 9C 96 
              95 41 54 A3 
              8F 3F 01 54 
              0D 80 11 B8 
              00 C2 94 59 
              65 57 67 4C 
              8F 59 65 57 
              67 4C 80 12 
              B9 00 C2 8A 
              4F 5C 7D 77 
              56 8F 8A 4F 
              5C 7D 77 56 
              80 14 BA 00 
              C2 9D 95 3F 
              06 75 58 72 
              6F 66 58 0D 
              A3 8F 41 75 
              80 12 BB 00 
              C2 8A 4D 41 
              54 6E 58 8F 
              8A 4D 41 54 
              6E 58 80 10 
              BC 00 C2 9D 
              95 3F 02 4A 
              71 0D A3 8F 
              41 4A 80 13 
              BD 00 C2 83 
              95 9F 89 50 
              A3 8F 94 41 
              4E 53 54 71 
              4B 80 14 BE 
              00 C2 9E 95 
              43 62 5E 4D 
              65 4F A3 8F 
              5D 61 72 5A 
              70 80 1B BF 
              00 C2 9B 96 
              95 52 51 60 
              52 4A A3 8F 
              3F 09 33 30 
              36 35 37 38 
              35 37 30 0D 
              80 12 C0 00 
              C2 9A 95 8A 
              41 44 6B 72 
              54 72 A3 8F 
              8A 41 80 14 
              C1 00 C2 99 
              95 8A 61 76 
              79 4A 60 A3 
              8F 61 76 79 
              4A 60 80 13 
              C2 00 C2 98 
              95 3F 06 67 
              59 73 48 42 
              6C 0D A3 8F 
              46 80 13 C3 
              00 C2 83 95 
              9F 89 4B A3 
              8F 94 41 49 
              52 44 5D 46 
              80 1C C4 00 
              C2 A2 95 3F 
              0A 31 36 33 
              34 32 34 39 
              37 38 31 0D 
              A3 8F 41 61 
              5A 4A 70 75 
              80 10 C5 00 
              C2 9D 95 3F 
              02 5A 70 0D 
              A3 8F 41 5A 
              80 16 C6 00 
              C2 99 95 8A 
              41 55 44 7B 
              78 5D A3 8F 
              41 55 44 7B 
              78 5D 80 13 
              C7 00 C2 83 
              95 9F 89 4C 
              A3 8F 94 41 
              4A 52 54 61 
              47 80 1C C8 
              00 C2 A2 95 
              3F 0A 31 38 
              36 38 30 38 
              37 39 34 37 
              0D A3 8F 41 
              6F 56 4C 4A 
              4B 80 1F C9 
              00 C2 9B 96 
              95 8A 41 51 
              45 49 5A 42 
              A3 8F 3F 0B 
              2D 31 33 36 
              30 33 30 33 
              37 34 36 0D 
              80 1E CA 00 
              C2 96 95 9F 
              89 51 A3 8F 
              3F 0F 4C 4D 
              4E 4F 50 51 
              52 53 54 55 
              56 57 58 59 
              5A 0D 80 00 	.db	$22,$01,$00,$b6,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b6,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$34,$35,$30,$32,$34,$0d,$80,$10,$03,$00,$c2,$9a,$95,$41,$6b,$52,$70,$43,$45,$a3,$8f,$41,$80,$15,$04,$00,$c2,$9e,$95,$41,$5d,$4d,$47,$5d,$56,$a3,$8f,$42,$62,$72,$78,$62,$69,$80,$1d,$05,$00,$c2,$9b,$96,$95,$41,$59,$52,$60,$43,$40,$a3,$8f,$3f,$0a,$31,$34,$39,$38,$30,$32,$32,$30,$38,$30,$0d,$80,$15,$06,$00,$c2,$9e,$95,$41,$4b,$45,$4e,$46,$7f,$a3,$8f,$42,$74,$7a,$71,$79,$40,$80,$12,$07,$00,$c2,$9a,$95,$8a,$41,$40,$7d,$76,$45,$6c,$a3,$8f,$8a,$41,$80,$13,$08,$00,$c2,$83,$95,$9f,$89,$47,$a3,$8f,$94,$41,$45,$51,$44,$4d,$42,$80,$13,$09,$00,$c2,$83,$95,$9f,$89,$4d,$a3,$8f,$94,$41,$4b,$52,$64,$65,$48,$80,$0f,$0a,$00,$c2,$9a,$95,$58,$77,$54,$4b,$7f,$a3,$8f,$41,$80,$0e,$0b,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$13,$0c,$00,$c2,$98,$95,$3f,$06,$66,$72,$77,$64,$73,$63,$0d,$a3,$8f,$46,$80,$11,$0d,$00,$c2,$94,$55,$47,$43,$45,$77,$8f,$55,$47,$43,$45,$77,$80,$1c,$0e,$00,$c2,$a2,$95,$3f,$0a,$31,$37,$39,$32,$34,$39,$31,$33,$39,$30,$0d,$a3,$8f,$41,$6a,$75,$73,$7d,$7e,$80,$1a,$0f,$00,$c2,$a2,$95,$3f,$09,$34,$31,$30,$33,$37,$39,$38,$39,$33,$0d,$a3,$8f,$58,$5d,$5e,$59,$75,$80,$13,$10,$00,$c2,$99,$95,$6a,$6f,$67,$42,$78,$a3,$8f,$6a,$6f,$67,$42,$78,$80,$1b,$11,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$16,$12,$00,$c2,$99,$95,$8a,$41,$4c,$7d,$4d,$56,$50,$a3,$8f,$41,$4c,$7d,$4d,$56,$50,$80,$10,$13,$00,$c2,$9c,$96,$95,$41,$4c,$a3,$8f,$3f,$01,$4c,$0d,$80,$13,$14,$00,$c2,$83,$95,$9f,$89,$48,$a3,$8f,$94,$41,$46,$51,$54,$51,$43,$80,$1c,$15,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$37,$38,$37,$35,$35,$33,$39,$34,$0d,$a3,$8f,$8a,$5c,$62,$53,$69,$42,$80,$14,$16,$00,$c2,$9e,$95,$51,$42,$47,$79,$4f,$a3,$8f,$43,$6e,$7d,$78,$46,$70,$80,$10,$17,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$1d,$18,$00,$c2,$9b,$96,$95,$8a,$60,$7f,$58,$41,$41,$a3,$8f,$3f,$0a,$2d,$35,$35,$33,$34,$38,$34,$33,$35,$33,$0d,$80,$1b,$19,$00,$c2,$9b,$96,$95,$74,$6c,$7c,$6f,$4b,$a3,$8f,$3f,$09,$38,$38,$34,$31,$39,$38,$33,$34,$37,$0d,$80,$12,$1a,$00,$c2,$8a,$8a,$7e,$7e,$5e,$76,$7b,$8f,$7e,$7e,$5e,$76,$7b,$80,$11,$1b,$00,$c2,$94,$6a,$4c,$52,$60,$71,$8f,$6a,$4c,$52,$60,$71,$80,$12,$1c,$00,$c2,$8a,$8a,$66,$6e,$57,$7b,$63,$8f,$66,$6e,$57,$7b,$63,$80,$13,$1d,$00,$c2,$94,$43,$74,$66,$5a,$79,$74,$8f,$43,$74,$66,$5a,$79,$74,$80,$0e,$1e,$00,$c2,$98,$95,$3f,$01,$75,$0d,$a3,$8f,$41,$80,$15,$1f,$00,$c2,$9e,$95,$41,$7b,$79,$79,$7a,$40,$a3,$8f,$42,$44,$46,$46,$45,$7f,$80,$13,$20,$00,$c2,$83,$95,$9f,$89,$4e,$a3,$8f,$94,$41,$4c,$52,$74,$69,$49,$80,$15,$21,$00,$c2,$99,$95,$41,$76,$6f,$7b,$62,$76,$a3,$8f,$41,$76,$6f,$7b,$62,$76,$80,$24,$22,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$23,$00,$c2,$9e,$95,$77,$4e,$40,$4c,$43,$a3,$8f,$43,$48,$71,$7f,$73,$7c,$80,$10,$24,$00,$c2,$9c,$96,$95,$41,$44,$a3,$8f,$3f,$01,$44,$0d,$80,$10,$25,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$14,$26,$00,$c2,$8a,$8a,$41,$51,$76,$7d,$49,$5b,$8f,$41,$51,$76,$7d,$49,$5b,$80,$0e,$27,$00,$c2,$84,$95,$9f,$89,$4d,$a3,$8f,$41,$48,$80,$14,$28,$00,$c2,$8a,$8a,$41,$75,$55,$4f,$7b,$45,$8f,$41,$75,$55,$4f,$7b,$45,$80,$15,$29,$00,$c2,$99,$95,$41,$50,$51,$4b,$48,$47,$a3,$8f,$41,$50,$51,$4b,$48,$47,$80,$15,$2a,$00,$c2,$99,$95,$41,$41,$40,$64,$6f,$48,$a3,$8f,$41,$41,$40,$64,$6f,$48,$80,$1d,$2b,$00,$c2,$9b,$96,$95,$8a,$49,$42,$56,$73,$4b,$a3,$8f,$3f,$0a,$2d,$31,$35,$31,$36,$31,$32,$36,$31,$39,$0d,$80,$1c,$2c,$00,$c2,$9b,$96,$95,$8a,$44,$6a,$72,$4e,$65,$a3,$8f,$3f,$09,$2d,$37,$38,$33,$32,$34,$36,$34,$35,$0d,$80,$11,$2d,$00,$c2,$9a,$95,$8a,$5e,$54,$6a,$6f,$44,$a3,$8f,$8a,$41,$80,$1e,$2e,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$36,$38,$39,$35,$38,$35,$38,$33,$31,$0d,$a3,$8f,$8a,$41,$64,$6d,$50,$62,$67,$80,$0d,$2f,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$1c,$30,$00,$c2,$a2,$95,$3f,$0a,$2d,$36,$36,$33,$37,$35,$31,$31,$32,$38,$0d,$a3,$8f,$8a,$67,$64,$40,$67,$58,$80,$15,$31,$00,$c2,$9e,$95,$41,$7f,$6a,$6e,$5e,$47,$a3,$8f,$42,$40,$55,$51,$61,$78,$80,$1c,$32,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$31,$34,$35,$35,$31,$33,$33,$32,$0d,$a3,$8f,$8a,$4c,$72,$5c,$6c,$64,$80,$13,$33,$00,$c2,$99,$95,$63,$65,$52,$71,$7c,$a3,$8f,$63,$65,$52,$71,$7c,$80,$29,$34,$00,$c2,$96,$95,$9f,$89,$46,$a3,$8f,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$35,$00,$c2,$9c,$96,$95,$41,$42,$a3,$8f,$3f,$01,$42,$0d,$80,$11,$36,$00,$c2,$9a,$95,$8a,$56,$4c,$73,$50,$5b,$a3,$8f,$8a,$41,$80,$14,$37,$00,$c2,$8a,$8a,$41,$54,$56,$41,$7f,$6b,$8f,$41,$54,$56,$41,$7f,$6b,$80,$13,$38,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$1c,$39,$00,$c2,$a2,$95,$3f,$0a,$31,$38,$39,$32,$39,$31,$37,$31,$38,$33,$0d,$a3,$8f,$41,$70,$74,$79,$7e,$7f,$80,$10,$3a,$00,$c2,$9d,$95,$3f,$02,$6a,$56,$0d,$a3,$8f,$41,$6a,$80,$13,$3b,$00,$c2,$94,$42,$47,$48,$5e,$7a,$66,$8f,$42,$47,$48,$5e,$7a,$66,$80,$1c,$3c,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$34,$37,$32,$30,$30,$32,$30,$37,$0d,$a3,$8f,$8a,$5a,$69,$7b,$6f,$4f,$80,$13,$3d,$00,$c2,$9d,$95,$3f,$05,$44,$4e,$78,$49,$75,$0d,$a3,$8f,$41,$44,$80,$15,$3e,$00,$c2,$99,$95,$41,$6a,$4d,$66,$55,$5b,$a3,$8f,$41,$6a,$4d,$66,$55,$5b,$80,$1a,$3f,$00,$c2,$a2,$95,$3f,$09,$34,$31,$39,$30,$31,$31,$30,$34,$31,$0d,$a3,$8f,$58,$7e,$59,$67,$61,$80,$14,$40,$00,$c2,$8a,$41,$53,$77,$5e,$4d,$64,$8f,$8a,$41,$53,$77,$5e,$4d,$64,$80,$15,$41,$00,$c2,$9e,$95,$42,$4b,$70,$78,$72,$4e,$a3,$8f,$41,$74,$4f,$47,$4d,$71,$80,$13,$42,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$43,$00,$c2,$94,$43,$72,$6f,$76,$51,$70,$8f,$43,$72,$6f,$76,$51,$70,$80,$1c,$44,$00,$c2,$a2,$95,$3f,$0a,$31,$39,$38,$34,$38,$37,$35,$37,$34,$35,$0d,$a3,$8f,$41,$76,$53,$6c,$73,$61,$80,$0e,$45,$00,$c2,$84,$95,$9f,$89,$47,$a3,$8f,$41,$42,$80,$1f,$46,$00,$c2,$9b,$96,$95,$8a,$41,$4b,$7d,$75,$71,$5c,$a3,$8f,$3f,$0b,$2d,$31,$32,$37,$34,$35,$30,$32,$32,$33,$36,$0d,$80,$20,$47,$00,$c2,$96,$95,$9f,$89,$4f,$a3,$8f,$3f,$11,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$12,$48,$00,$c2,$9a,$95,$8a,$41,$7b,$40,$56,$7f,$41,$a3,$8f,$8a,$41,$80,$0d,$49,$00,$c2,$9d,$95,$3f,$00,$0d,$a3,$8f,$4d,$80,$10,$4a,$00,$c2,$9c,$96,$95,$41,$49,$a3,$8f,$3f,$01,$49,$0d,$80,$14,$4b,$00,$c2,$98,$95,$3f,$07,$65,$67,$42,$65,$47,$64,$67,$0d,$a3,$8f,$47,$80,$10,$4c,$00,$c2,$9a,$95,$41,$6c,$7d,$44,$48,$7b,$a3,$8f,$41,$80,$16,$4d,$00,$c2,$99,$95,$8a,$41,$5b,$6b,$5a,$5d,$5c,$a3,$8f,$41,$5b,$6b,$5a,$5d,$5c,$80,$14,$4e,$00,$c2,$9e,$95,$43,$5e,$58,$6b,$75,$5f,$a3,$8f,$61,$67,$54,$4a,$60,$80,$14,$4f,$00,$c2,$9e,$95,$4e,$4f,$6b,$5d,$58,$a3,$8f,$43,$71,$70,$54,$62,$67,$80,$16,$50,$00,$c2,$9d,$95,$3f,$08,$6e,$7a,$51,$4a,$7a,$6d,$4e,$6b,$0d,$a3,$8f,$41,$6e,$80,$11,$51,$00,$c2,$94,$7f,$58,$67,$53,$4f,$8f,$7f,$58,$67,$53,$4f,$80,$14,$52,$00,$c2,$9d,$95,$3f,$06,$62,$59,$63,$4b,$66,$49,$0d,$a3,$8f,$41,$62,$80,$13,$53,$00,$c2,$83,$95,$9f,$89,$52,$a3,$8f,$94,$41,$50,$53,$74,$79,$4d,$80,$10,$54,$00,$c2,$9c,$96,$95,$41,$4a,$a3,$8f,$3f,$01,$4a,$0d,$80,$25,$55,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$0f,$56,$00,$c2,$9a,$95,$44,$7b,$6b,$6a,$59,$a3,$8f,$41,$80,$10,$57,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$1b,$58,$00,$c2,$96,$95,$9f,$89,$54,$a3,$8f,$3f,$0c,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$15,$59,$00,$c2,$9d,$95,$3f,$07,$4f,$4a,$61,$50,$53,$5a,$66,$0d,$a3,$8f,$41,$4f,$80,$0f,$5a,$00,$c2,$9a,$95,$6b,$60,$58,$76,$6b,$a3,$8f,$41,$80,$13,$5b,$00,$c2,$94,$43,$7a,$6a,$4c,$50,$4b,$8f,$43,$7a,$6a,$4c,$50,$4b,$80,$11,$5c,$00,$c2,$98,$95,$3f,$04,$54,$78,$43,$56,$0d,$a3,$8f,$44,$80,$13,$5d,$00,$c2,$94,$41,$6e,$62,$77,$42,$5e,$8f,$41,$6e,$62,$77,$42,$5e,$80,$13,$5e,$00,$c2,$98,$95,$3f,$06,$68,$56,$66,$6b,$51,$79,$0d,$a3,$8f,$46,$80,$14,$5f,$00,$c2,$9e,$95,$43,$5b,$59,$7d,$42,$5a,$a3,$8f,$64,$66,$42,$7d,$65,$80,$16,$60,$00,$c2,$99,$95,$8a,$41,$48,$5d,$62,$58,$5b,$a3,$8f,$41,$48,$5d,$62,$58,$5b,$80,$12,$61,$00,$c2,$8a,$8a,$6c,$46,$78,$54,$58,$8f,$6c,$46,$78,$54,$58,$80,$15,$62,$00,$c2,$9e,$95,$42,$45,$7d,$6f,$6f,$53,$a3,$8f,$41,$7a,$42,$50,$50,$6c,$80,$25,$63,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$10,$64,$00,$c2,$9c,$96,$95,$41,$41,$a3,$8f,$3f,$01,$41,$0d,$80,$0e,$65,$00,$c2,$84,$95,$9f,$89,$54,$a3,$8f,$41,$4f,$80,$10,$66,$00,$c2,$9c,$96,$95,$41,$4f,$a3,$8f,$3f,$01,$4f,$0d,$80,$0e,$67,$00,$c2,$84,$95,$9f,$89,$4b,$a3,$8f,$41,$46,$80,$13,$68,$00,$c2,$94,$41,$73,$6c,$57,$40,$63,$8f,$41,$73,$6c,$57,$40,$63,$80,$16,$69,$00,$c2,$9d,$95,$3f,$08,$55,$4d,$74,$58,$6b,$4b,$77,$55,$0d,$a3,$8f,$41,$55,$80,$10,$6a,$00,$c2,$9d,$95,$3f,$02,$73,$61,$0d,$a3,$8f,$41,$73,$80,$1b,$6b,$00,$c2,$9b,$96,$95,$51,$64,$65,$5c,$68,$a3,$8f,$3f,$09,$32,$39,$34,$38,$30,$33,$32,$34,$30,$0d,$80,$1a,$6c,$00,$c2,$9b,$96,$95,$43,$73,$62,$5c,$6e,$a3,$8f,$3f,$08,$36,$33,$38,$34,$32,$30,$39,$34,$0d,$80,$15,$6d,$00,$c2,$9e,$95,$41,$61,$72,$60,$5c,$7d,$a3,$8f,$42,$5e,$4d,$5f,$63,$42,$80,$1a,$6e,$00,$c2,$a2,$95,$3f,$09,$35,$32,$30,$34,$35,$37,$33,$30,$38,$0d,$a3,$8f,$5f,$41,$58,$71,$5c,$80,$12,$6f,$00,$c2,$8a,$4e,$7e,$65,$54,$7c,$8f,$8a,$4e,$7e,$65,$54,$7c,$80,$14,$70,$00,$c2,$9e,$95,$55,$59,$4c,$6a,$6e,$a3,$8f,$43,$6a,$66,$73,$55,$51,$80,$13,$71,$00,$c2,$98,$95,$3f,$06,$46,$78,$77,$57,$66,$4d,$0d,$a3,$8f,$46,$80,$13,$72,$00,$c2,$99,$95,$62,$7e,$56,$7d,$53,$a3,$8f,$62,$7e,$56,$7d,$53,$80,$15,$73,$00,$c2,$98,$95,$3f,$08,$69,$59,$51,$77,$4a,$43,$65,$62,$0d,$a3,$8f,$48,$80,$1f,$74,$00,$c2,$9b,$96,$95,$8a,$41,$4b,$52,$79,$7f,$68,$a3,$8f,$3f,$0b,$2d,$31,$32,$36,$33,$32,$34,$37,$33,$33,$36,$0d,$80,$1d,$75,$00,$c2,$9b,$96,$95,$41,$52,$7d,$76,$51,$7f,$a3,$8f,$3f,$0a,$31,$33,$39,$31,$39,$34,$34,$38,$33,$31,$0d,$80,$23,$76,$00,$c2,$96,$95,$9f,$89,$4c,$a3,$8f,$3f,$14,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1d,$77,$00,$c2,$9b,$96,$95,$41,$78,$7b,$7e,$43,$47,$a3,$8f,$3f,$0a,$32,$30,$32,$38,$39,$38,$36,$35,$36,$37,$0d,$80,$11,$78,$00,$c2,$9a,$95,$8a,$61,$45,$5f,$4b,$62,$a3,$8f,$8a,$41,$80,$14,$79,$00,$c2,$99,$95,$8a,$56,$5b,$6a,$43,$51,$a3,$8f,$56,$5b,$6a,$43,$51,$80,$11,$7a,$00,$c2,$9a,$95,$8a,$58,$4f,$70,$45,$62,$a3,$8f,$8a,$41,$80,$10,$7b,$00,$c2,$9c,$96,$95,$41,$56,$a3,$8f,$3f,$01,$56,$0d,$80,$1d,$7c,$00,$c2,$9b,$96,$95,$41,$60,$5f,$72,$5a,$7a,$a3,$8f,$3f,$0a,$31,$36,$31,$38,$39,$34,$35,$37,$32,$32,$0d,$80,$0e,$7d,$00,$c2,$84,$95,$9f,$89,$53,$a3,$8f,$41,$4e,$80,$1d,$7e,$00,$c2,$9b,$96,$95,$41,$79,$46,$47,$5e,$41,$a3,$8f,$3f,$0a,$32,$30,$33,$31,$36,$34,$36,$35,$39,$33,$0d,$80,$13,$7f,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$1d,$80,$00,$c2,$9b,$96,$95,$41,$57,$5d,$40,$56,$6f,$a3,$8f,$3f,$0a,$31,$34,$36,$37,$32,$32,$31,$34,$32,$33,$0d,$80,$13,$81,$00,$c2,$83,$95,$9f,$89,$53,$a3,$8f,$94,$41,$51,$54,$44,$7d,$4e,$80,$13,$82,$00,$c2,$94,$43,$6b,$79,$7c,$62,$6b,$8f,$43,$6b,$79,$7c,$62,$6b,$80,$14,$83,$00,$c2,$99,$95,$8a,$7a,$4f,$6c,$4f,$44,$a3,$8f,$7a,$4f,$6c,$4f,$44,$80,$10,$84,$00,$c2,$9c,$96,$95,$41,$4e,$a3,$8f,$3f,$01,$4e,$0d,$80,$12,$85,$00,$c2,$9a,$95,$8a,$41,$78,$7c,$48,$56,$6e,$a3,$8f,$8a,$41,$80,$1f,$86,$00,$c2,$9b,$96,$95,$8a,$41,$69,$75,$5b,$64,$70,$a3,$8f,$3f,$0b,$2d,$31,$37,$37,$35,$36,$31,$34,$32,$35,$36,$0d,$80,$0e,$87,$00,$c2,$84,$95,$9f,$89,$4a,$a3,$8f,$41,$45,$80,$14,$88,$00,$c2,$99,$95,$8a,$79,$70,$70,$6c,$72,$a3,$8f,$79,$70,$70,$6c,$72,$80,$10,$89,$00,$c2,$9c,$96,$95,$41,$57,$a3,$8f,$3f,$01,$57,$0d,$80,$12,$8a,$00,$c2,$8a,$6c,$67,$51,$56,$44,$8f,$8a,$6c,$67,$51,$56,$44,$80,$14,$8b,$00,$c2,$9e,$95,$43,$4f,$59,$53,$6c,$6f,$a3,$8f,$70,$66,$6c,$53,$50,$80,$0e,$8c,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$1d,$8d,$00,$c2,$a2,$95,$3f,$0b,$2d,$31,$30,$31,$33,$34,$36,$39,$39,$39,$37,$0d,$a3,$8f,$8a,$7c,$5a,$45,$4c,$6d,$80,$14,$8e,$00,$c2,$9e,$95,$7e,$6e,$76,$72,$72,$a3,$8f,$43,$41,$51,$49,$4d,$4d,$80,$0f,$8f,$00,$c2,$98,$95,$3f,$02,$63,$72,$0d,$a3,$8f,$42,$80,$1c,$90,$00,$c2,$a2,$95,$3f,$0a,$2d,$34,$39,$36,$39,$32,$34,$37,$31,$39,$0d,$a3,$8f,$8a,$5d,$67,$67,$60,$6f,$80,$11,$91,$00,$c2,$9a,$95,$8a,$70,$50,$74,$78,$70,$a3,$8f,$8a,$41,$80,$13,$92,$00,$c2,$83,$95,$9f,$89,$4a,$a3,$8f,$94,$41,$48,$51,$74,$59,$45,$80,$1f,$93,$00,$c2,$9b,$96,$95,$8a,$41,$76,$76,$7d,$6d,$77,$a3,$8f,$3f,$0b,$2d,$31,$39,$39,$34,$31,$32,$30,$30,$35,$35,$0d,$80,$13,$94,$00,$c2,$94,$43,$5b,$49,$47,$41,$64,$8f,$43,$5b,$49,$47,$41,$64,$80,$15,$95,$00,$c2,$9e,$95,$42,$72,$45,$5f,$59,$56,$a3,$8f,$41,$4d,$7a,$60,$66,$69,$80,$11,$96,$00,$c2,$9d,$95,$3f,$03,$45,$51,$4f,$0d,$a3,$8f,$41,$45,$80,$1a,$97,$00,$c2,$a2,$95,$3f,$09,$39,$32,$34,$33,$31,$35,$30,$36,$35,$0d,$a3,$8f,$77,$45,$7e,$76,$79,$80,$1c,$98,$00,$c2,$a2,$95,$3f,$0a,$2d,$32,$34,$32,$38,$38,$38,$33,$38,$32,$0d,$a3,$8f,$8a,$4e,$5e,$62,$7a,$7e,$80,$0f,$99,$00,$c2,$9d,$95,$3f,$01,$64,$0d,$a3,$8f,$41,$64,$80,$1b,$9a,$00,$c2,$9b,$96,$95,$50,$74,$62,$75,$61,$a3,$8f,$3f,$09,$32,$38,$32,$32,$30,$39,$36,$33,$33,$0d,$80,$25,$9b,$00,$c2,$96,$95,$9f,$89,$4a,$a3,$8f,$3f,$16,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$11,$9c,$00,$c2,$94,$7c,$68,$74,$7c,$60,$8f,$7c,$68,$74,$7c,$60,$80,$24,$9d,$00,$c2,$96,$95,$9f,$89,$4b,$a3,$8f,$3f,$15,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$1d,$9e,$00,$c2,$9b,$96,$95,$41,$51,$67,$79,$50,$61,$a3,$8f,$3f,$0a,$31,$33,$36,$39,$34,$31,$32,$36,$34,$31,$0d,$80,$12,$9f,$00,$c2,$9a,$95,$8a,$41,$51,$4a,$7a,$66,$71,$a3,$8f,$8a,$41,$80,$12,$a0,$00,$c2,$8a,$8a,$5c,$6a,$70,$5c,$43,$8f,$5c,$6a,$70,$5c,$43,$80,$0f,$a1,$00,$c2,$9d,$95,$3f,$01,$75,$0d,$a3,$8f,$41,$75,$80,$12,$a2,$00,$c2,$8a,$8a,$76,$7d,$5f,$59,$68,$8f,$76,$7d,$5f,$59,$68,$80,$16,$a3,$00,$c2,$9d,$95,$3f,$08,$55,$71,$4d,$6c,$64,$4e,$49,$6b,$0d,$a3,$8f,$41,$55,$80,$10,$a4,$00,$c2,$9a,$95,$41,$7a,$78,$7e,$76,$78,$a3,$8f,$41,$80,$1c,$a5,$00,$c2,$a2,$95,$3f,$0a,$31,$33,$37,$32,$38,$30,$38,$39,$38,$36,$0d,$a3,$8f,$41,$51,$74,$76,$5c,$5a,$80,$14,$a6,$00,$c2,$9e,$95,$43,$58,$6e,$45,$66,$65,$a3,$8f,$67,$51,$7a,$59,$5a,$80,$1c,$a7,$00,$c2,$a2,$95,$3f,$0a,$32,$30,$34,$35,$36,$34,$39,$31,$32,$30,$0d,$a3,$8f,$41,$79,$7b,$62,$43,$60,$80,$0d,$a8,$00,$c2,$98,$95,$3f,$00,$0d,$a3,$8f,$40,$80,$1c,$a9,$00,$c2,$a2,$95,$3f,$0a,$2d,$37,$30,$38,$30,$39,$30,$35,$32,$31,$0d,$a3,$8f,$8a,$6a,$4d,$49,$6a,$59,$80,$13,$aa,$00,$c2,$94,$41,$76,$4f,$61,$4a,$66,$8f,$41,$76,$4f,$61,$4a,$66,$80,$22,$ab,$00,$c2,$96,$95,$9f,$89,$4d,$a3,$8f,$3f,$13,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$13,$ac,$00,$c2,$94,$42,$54,$73,$53,$4e,$61,$8f,$42,$54,$73,$53,$4e,$61,$80,$0e,$ad,$00,$c2,$84,$95,$9f,$89,$4c,$a3,$8f,$41,$47,$80,$12,$ae,$00,$c2,$8a,$58,$79,$44,$68,$56,$8f,$8a,$58,$79,$44,$68,$56,$80,$1b,$af,$00,$c2,$a2,$95,$3f,$09,$2d,$39,$32,$30,$36,$32,$34,$31,$31,$0d,$a3,$8f,$8a,$45,$5f,$4c,$4b,$4b,$80,$11,$b0,$00,$c2,$9d,$95,$3f,$03,$56,$48,$63,$0d,$a3,$8f,$41,$56,$80,$15,$b1,$00,$c2,$9e,$95,$42,$6f,$6a,$67,$68,$7d,$a3,$8f,$41,$50,$55,$58,$57,$42,$80,$15,$b2,$00,$c2,$9e,$95,$42,$6c,$77,$67,$67,$7c,$a3,$8f,$41,$53,$48,$58,$58,$43,$80,$14,$b3,$00,$c2,$8a,$41,$65,$63,$69,$6c,$5f,$8f,$8a,$41,$65,$63,$69,$6c,$5f,$80,$15,$b4,$00,$c2,$9e,$95,$41,$54,$62,$67,$78,$7b,$a3,$8f,$42,$6b,$5d,$58,$47,$44,$80,$15,$b5,$00,$c2,$98,$95,$3f,$08,$7a,$71,$6d,$49,$42,$46,$53,$76,$0d,$a3,$8f,$48,$80,$1b,$b6,$00,$c2,$9b,$96,$95,$56,$6e,$78,$74,$57,$a3,$8f,$3f,$09,$33,$38,$31,$33,$39,$30,$31,$30,$33,$0d,$80,$10,$b7,$00,$c2,$9c,$96,$95,$41,$54,$a3,$8f,$3f,$01,$54,$0d,$80,$11,$b8,$00,$c2,$94,$59,$65,$57,$67,$4c,$8f,$59,$65,$57,$67,$4c,$80,$12,$b9,$00,$c2,$8a,$4f,$5c,$7d,$77,$56,$8f,$8a,$4f,$5c,$7d,$77,$56,$80,$14,$ba,$00,$c2,$9d,$95,$3f,$06,$75,$58,$72,$6f,$66,$58,$0d,$a3,$8f,$41,$75,$80,$12,$bb,$00,$c2,$8a,$4d,$41,$54,$6e,$58,$8f,$8a,$4d,$41,$54,$6e,$58,$80,$10,$bc,$00,$c2,$9d,$95,$3f,$02,$4a,$71,$0d,$a3,$8f,$41,$4a,$80,$13,$bd,$00,$c2,$83,$95,$9f,$89,$50,$a3,$8f,$94,$41,$4e,$53,$54,$71,$4b,$80,$14,$be,$00,$c2,$9e,$95,$43,$62,$5e,$4d,$65,$4f,$a3,$8f,$5d,$61,$72,$5a,$70,$80,$1b,$bf,$00,$c2,$9b,$96,$95,$52,$51,$60,$52,$4a,$a3,$8f,$3f,$09,$33,$30,$36,$35,$37,$38,$35,$37,$30,$0d,$80,$12,$c0,$00,$c2,$9a,$95,$8a,$41,$44,$6b,$72,$54,$72,$a3,$8f,$8a,$41,$80,$14,$c1,$00,$c2,$99,$95,$8a,$61,$76,$79,$4a,$60,$a3,$8f,$61,$76,$79,$4a,$60,$80,$13,$c2,$00,$c2,$98,$95,$3f,$06,$67,$59,$73,$48,$42,$6c,$0d,$a3,$8f,$46,$80,$13,$c3,$00,$c2,$83,$95,$9f,$89,$4b,$a3,$8f,$94,$41,$49,$52,$44,$5d,$46,$80,$1c,$c4,$00,$c2,$a2,$95,$3f,$0a,$31,$36,$33,$34,$32,$34,$39,$37,$38,$31,$0d,$a3,$8f,$41,$61,$5a,$4a,$70,$75,$80,$10,$c5,$00,$c2,$9d,$95,$3f,$02,$5a,$70,$0d,$a3,$8f,$41,$5a,$80,$16,$c6,$00,$c2,$99,$95,$8a,$41,$55,$44,$7b,$78,$5d,$a3,$8f,$41,$55,$44,$7b,$78,$5d,$80,$13,$c7,$00,$c2,$83,$95,$9f,$89,$4c,$a3,$8f,$94,$41,$4a,$52,$54,$61,$47,$80,$1c,$c8,$00,$c2,$a2,$95,$3f,$0a,$31,$38,$36,$38,$30,$38,$37,$39,$34,$37,$0d,$a3,$8f,$41,$6f,$56,$4c,$4a,$4b,$80,$1f,$c9,$00,$c2,$9b,$96,$95,$8a,$41,$51,$45,$49,$5a,$42,$a3,$8f,$3f,$0b,$2d,$31,$33,$36,$30,$33,$30,$33,$37,$34,$36,$0d,$80,$1e,$ca,$00,$c2,$96,$95,$9f,$89,$51,$a3,$8f,$3f,$0f,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C8D4 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D8D4 -  -  -  -  EndTestInstance:
   18 D1:D8D4 -  -  -  -  		
   19 D1:D8D4 -  -  -  -  ; ***************************************************************************************
   20 D1:D8D4 -  -  -  -  ;
   21 D1:D8D4 -  -  -  -  ;									Changes and Updates
   22 D1:D8D4 -  -  -  -  ;
   23 D1:D8D4 -  -  -  -  ; ***************************************************************************************
   24 D1:D8D4 -  -  -  -  ;
   25 D1:D8D4 -  -  -  -  ;		Date			Notes
   26 D1:D8D4 -  -  -  -  ;		==== 			=====
   27 D1:D8D4 -  -  -  -  ;
   28 D1:D8D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:D8D4 -  -  -  -  FinalAddress:
