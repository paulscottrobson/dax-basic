    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_INDEX = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_INDEX
   56 00:0000             	ld a,ERRID_INDEX
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_MEMORY = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_MEMORY
   63 00:0000             	ld a,ERRID_MEMORY
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOCOMMA = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   70 00:0000             	ld a,ERRID_NOCOMMA
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NODOLLAR = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   77 00:0000             	ld a,ERRID_NODOLLAR
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOLBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   84 00:0000             	ld a,ERRID_NOLBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NORBRACKET = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   91 00:0000             	ld a,ERRID_NORBRACKET
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOTREF = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOTREF
   98 00:0000             	ld a,ERRID_NOTREF
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_STOP = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_STOP
  105 00:0000             	ld a,ERRID_STOP
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_SYNTAX = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_SYNTAX
  112 00:0000             	ld a,ERRID_SYNTAX
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_TODO = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_TODO
  119 00:0000             	ld a,ERRID_TODO
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  126 00:0000             	ld a,ERRID_UNKNOWNVAR
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 84 B7 D1 		call 	SYSInitialise
   44 D1:A885 11 00 BC D1 		ld 		de,TestInstance
   45 D1:A889 21 BB CC D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 63 B1 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 E1 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 1C AB D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD AA B7 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 90 B7 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 05 C3 D9 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 06 C3 D9 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  		
   78 D1:A8DD -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  
   81 D1:A8E1 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 D1:A8E1 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 D1:A8E7 -  -  -  -  
   84 D1:A8E7 -  -  -  -  AConvert: 									; used for address conversions.
   85 D1:A8E7 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8ED -  -  -  -  		
   87 D1:A8ED -  -  -  -  RandomSeed: 								; random number seeds.
   88 D1:A8ED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 D1:A8FD -  -  -  -  
   90 D1:A8FD -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 D1:A8FD 00 00 -  -  		.dw 	0
   92 D1:A8FF -  -  -  -  
   93 D1:A8FF -  -  -  -  PrintBase: 									; current base for PRINT
   94 D1:A8FF 00 00 -  -  		.dw 	0 
   95 D1:A901 -  -  -  -  		
   96 D1:A901 -  -  -  -  ; ***************************************************************************************
   97 D1:A901 -  -  -  -  ;
   98 D1:A901 -  -  -  -  ;									Variable Information
   99 D1:A901 -  -  -  -  ;
  100 D1:A901 -  -  -  -  ; ***************************************************************************************
  101 D1:A901 -  -  -  -  
  102 D1:A901 -  -  -  -  VarNameStart: 								; first byte of name
  103 D1:A901 00 00 00 00 		.dw 	0,0
  104 D1:A905 -  -  -  -  VarHash: 									; name hash value
  105 D1:A905 00 00 -  -  		.dw 	0		
  106 D1:A907 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  107 D1:A907 00 00 00 00 		.dw 	0,0
  108 D1:A90B -  -  -  -  		
  109 D1:A90B -  -  -  -  ; ***************************************************************************************
  110 D1:A90B -  -  -  -  ;
  111 D1:A90B -  -  -  -  ;										  Buffers
  112 D1:A90B -  -  -  -  ;
  113 D1:A90B -  -  -  -  ; ***************************************************************************************
  114 D1:A90B -  -  -  -  
  115 D1:A90B -  -  -  -  _USBuffer: 									; buffer space for STR$()
  116 D1:A90B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  117 D1:A91B -  -  -  -  
  118 D1:A91B -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  119 D1:A91B 00 00 -  -  		.dw 	0
  120 D1:A91D -  -  -  -  
  121 D1:A91D -  -  -  -  ConvertBuffer: 								; general usage
  122 D1:A91D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  123 D1:A95D -  -  -  -  
  124 D1:A95D -  -  -  -  ; ***************************************************************************************
  125 D1:A95D -  -  -  -  ;
  126 D1:A95D -  -  -  -  ;									Changes and Updates
  127 D1:A95D -  -  -  -  ;
  128 D1:A95D -  -  -  -  ; ***************************************************************************************
  129 D1:A95D -  -  -  -  ;
  130 D1:A95D -  -  -  -  ;		Date			Notes
  131 D1:A95D -  -  -  -  ;		==== 			=====
  132 D1:A95D -  -  -  -  ;
  133 D1:A95D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A95D -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A95D -  -  -  -  ; ***************************************************************************************
    2 D1:A95D -  -  -  -  ; ***************************************************************************************
    3 D1:A95D -  -  -  -  ;
    4 D1:A95D -  -  -  -  ;		Name : 		assert.asm
    5 D1:A95D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95D -  -  -  -  ;		Reviewed :	No
    8 D1:A95D -  -  -  -  ;		Purpose :	Assert command
    9 D1:A95D -  -  -  -  ;
   10 D1:A95D -  -  -  -  ; ***************************************************************************************
   11 D1:A95D -  -  -  -  ; ***************************************************************************************
   12 D1:A95D -  -  -  -  
   13 D1:A95D -  -  -  -  ; ***************************************************************************************
   14 D1:A95D -  -  -  -  ;
   15 D1:A95D -  -  -  -  ;									ASSERT command
   16 D1:A95D -  -  -  -  ;
   17 D1:A95D -  -  -  -  ; ***************************************************************************************
   18 D1:A95D -  -  -  -  
   19 D1:A95D -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A95D CD 0C AE D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A961 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A967 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A968 3E 01 C3 D9 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A96E -  -  -  -  
   25 D1:A96E -  -  -  -  ; ***************************************************************************************
   26 D1:A96E -  -  -  -  ;
   27 D1:A96E -  -  -  -  ;									Changes and Updates
   28 D1:A96E -  -  -  -  ;
   29 D1:A96E -  -  -  -  ; ***************************************************************************************
   30 D1:A96E -  -  -  -  ;
   31 D1:A96E -  -  -  -  ;		Date			Notes
   32 D1:A96E -  -  -  -  ;		==== 			=====
   33 D1:A96E -  -  -  -  ;
   34 D1:A96E -  -  -  -  ; ***************************************************************************************
   35 D1:A96E -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A96E -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A96E -  -  -  -  ; ***************************************************************************************
    2 D1:A96E -  -  -  -  ; ***************************************************************************************
    3 D1:A96E -  -  -  -  ;
    4 D1:A96E -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A96E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A96E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A96E -  -  -  -  ;		Reviewed :	No
    8 D1:A96E -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A96E -  -  -  -  ;
   10 D1:A96E -  -  -  -  ; ***************************************************************************************
   11 D1:A96E -  -  -  -  ; ***************************************************************************************
   12 D1:A96E -  -  -  -  
   13 D1:A96E -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A96E -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A96E -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A96E -  -  -  -  BadCmd_Comma: 		;; [~]
   17 D1:A96E -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 D1:A96E -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A96E C3 43 AC D1 		jp 		SyntaxError
   20 D1:A972 -  -  -  -  
   21 D1:A972 -  -  -  -  ; ***************************************************************************************
   22 D1:A972 -  -  -  -  ;
   23 D1:A972 -  -  -  -  ;									Changes and Updates
   24 D1:A972 -  -  -  -  ;
   25 D1:A972 -  -  -  -  ; ***************************************************************************************
   26 D1:A972 -  -  -  -  ;
   27 D1:A972 -  -  -  -  ;		Date			Notes
   28 D1:A972 -  -  -  -  ;		==== 			=====
   29 D1:A972 -  -  -  -  ;
   30 D1:A972 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A972 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A972 -  -  -  -  ; ***************************************************************************************
    2 D1:A972 -  -  -  -  ; ***************************************************************************************
    3 D1:A972 -  -  -  -  ;
    4 D1:A972 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A972 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A972 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A972 -  -  -  -  ;		Reviewed :	No
    8 D1:A972 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A972 -  -  -  -  ;
   10 D1:A972 -  -  -  -  ; ***************************************************************************************
   11 D1:A972 -  -  -  -  ; ***************************************************************************************
   12 D1:A972 -  -  -  -  
   13 D1:A972 -  -  -  -  ; ***************************************************************************************
   14 D1:A972 -  -  -  -  ;
   15 D1:A972 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A972 -  -  -  -  ;
   17 D1:A972 -  -  -  -  ; ***************************************************************************************
   18 D1:A972 -  -  -  -  
   19 D1:A972 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A972 C9 -  -  -  		ret
   21 D1:A973 -  -  -  -  
   22 D1:A973 -  -  -  -  ; ***************************************************************************************
   23 D1:A973 -  -  -  -  ;
   24 D1:A973 -  -  -  -  ;									Changes and Updates
   25 D1:A973 -  -  -  -  ;
   26 D1:A973 -  -  -  -  ; ***************************************************************************************
   27 D1:A973 -  -  -  -  ;
   28 D1:A973 -  -  -  -  ;		Date			Notes
   29 D1:A973 -  -  -  -  ;		==== 			=====
   30 D1:A973 -  -  -  -  ;
   31 D1:A973 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A973 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A973 -  -  -  -  ; ***************************************************************************************
    2 D1:A973 -  -  -  -  ; ***************************************************************************************
    3 D1:A973 -  -  -  -  ;
    4 D1:A973 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A973 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A973 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A973 -  -  -  -  ;		Reviewed :	No
    8 D1:A973 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A973 -  -  -  -  ;
   10 D1:A973 -  -  -  -  ; ***************************************************************************************
   11 D1:A973 -  -  -  -  ; ***************************************************************************************
   12 D1:A973 -  -  -  -  
   13 D1:A973 -  -  -  -  ; ***************************************************************************************
   14 D1:A973 -  -  -  -  ;
   15 D1:A973 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:A973 -  -  -  -  ;	
   17 D1:A973 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:A973 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:A973 -  -  -  -  ;								(can be comma chained)
   20 D1:A973 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:A973 -  -  -  -  ;
   22 D1:A973 -  -  -  -  ; ***************************************************************************************
   23 D1:A973 -  -  -  -  
   24 D1:A973 -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:A973 -  -  -  -  		;
   26 D1:A973 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A973 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A973 -  -  -  -  		;
   29 D1:A973 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A975 D1 -  -  -  		pop 	de
   31 D1:A976 -  -  -  -  		;
   32 D1:A976 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A979 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A97B D2 43 AC D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A97F -  -  -  -  _DISkip:
   36 D1:A97F DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A981 DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A984 FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A986 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A988 -  -  -  -  		;
   41 D1:A988 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A98B FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A98D F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A98E CC EF A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A992 F1 -  -  -  		pop 	af
   46 D1:A993 C4 A7 A9 D1 		call 	nz,DimensionAllocate
   47 D1:A997 -  -  -  -  		;
   48 D1:A997 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A99A FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A99C C0 -  -  -  		ret 	nz
   51 D1:A99D DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A99F 18 D2 -  -  		jr 		Command_DIM
   53 D1:A9A1 -  -  -  -  
   54 D1:A9A1 -  -  -  -  _CDError:
   55 D1:A9A1 3E 04 C3 D9 
              AB D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:A9A7 -  -  -  -  
   57 D1:A9A7 -  -  -  -  ; ***************************************************************************************
   58 D1:A9A7 -  -  -  -  ;
   59 D1:A9A7 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:A9A7 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:A9A7 -  -  -  -  ;
   62 D1:A9A7 -  -  -  -  ; ***************************************************************************************
   63 D1:A9A7 -  -  -  -  
   64 D1:A9A7 -  -  -  -  DimensionAllocate:
   65 D1:A9A7 D5 -  -  -  		push 	de 							; save start on stack
   66 D1:A9A8 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:A9AA 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:A9AC 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   69 D1:A9B0 CD D0 B1 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:A9B4 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:A9B6 28 E9 -  -  		jr 		z,_CDError
   72 D1:A9B8 CB 41 -  -  		bit 	CIsString,c
   73 D1:A9BA 20 E5 -  -  		jr 		nz,_CDError
   74 D1:A9BC DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:A9BE E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:A9BF 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:A9C1 CD CD AB D1 		call 	CheckNextA 					; check for [
   78 D1:A9C5 CD 0C AE D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:A9C9 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:A9CB CD CD AB D1 		call 	CheckNextA 					; check for ]
   81 D1:A9CF 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:A9D0 7C -  -  -  		ld 		a,h
   83 D1:A9D1 B5 -  -  -  		or 		l
   84 D1:A9D2 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:A9D4 D9 -  -  -  		exx
   86 D1:A9D5 23 -  -  -  		inc 	hl
   87 D1:A9D6 D9 -  -  -  		exx
   88 D1:A9D7 -  -  -  -  _DANoCarry:
   89 D1:A9D7 D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:A9D8 7C -  -  -  		ld 		a,h
   91 D1:A9D9 B5 -  -  -  		or 		l
   92 D1:A9DA D9 -  -  -  		exx
   93 D1:A9DB 20 C4 -  -  		jr 		nz,_CDError
   94 D1:A9DD CD F2 B0 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:A9E1 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:A9E2 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:A9E3 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:A9E9 AF -  -  -  		xor 	a 							; autocreate off
   99 D1:A9EA 32 FD A8 D1 		ld 		(AllowAutoCreate),a
  100 D1:A9EE C9 -  -  -  		ret
  101 D1:A9EF -  -  -  -  
  102 D1:A9EF -  -  -  -  ; ***************************************************************************************
  103 D1:A9EF -  -  -  -  ;
  104 D1:A9EF -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:A9EF -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:A9EF -  -  -  -  ;
  107 D1:A9EF -  -  -  -  ; ***************************************************************************************
  108 D1:A9EF -  -  -  -  
  109 D1:A9EF -  -  -  -  DimensionArray:
  110 D1:A9EF D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:A9F0 -  -  -  -  		;
  112 D1:A9F0 CD 0C AE D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:A9F4 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:A9F5 E6 FC -  -  		and 	$FC
  115 D1:A9F7 D9 -  -  -  		exx
  116 D1:A9F8 B4 -  -  -  		or 		h
  117 D1:A9F9 B5 -  -  -  		or 		l
  118 D1:A9FA D9 -  -  -  		exx
  119 D1:A9FB 20 A4 -  -  		jr 		nz,_CDError
  120 D1:A9FD -  -  -  -  		;
  121 D1:A9FD DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:A9FF E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:AA00 -  -  -  -  		;
  124 D1:AA00 CD 5D B2 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AA04 CD 99 B2 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AA08 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AA0A -  -  -  -  		;
  128 D1:AA0A E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AA0B E5 -  -  -  		push 	hl
  130 D1:AA0C 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AA0D 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AA0E 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AA0F 29 -  -  -  		add 	hl,hl
  134 D1:AA10 CD 8D B1 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AA14 -  -  -  -  		;
  136 D1:AA14 D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AA15 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AA19 09 -  -  -  		add 	hl,bc
  139 D1:AA1A ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AA20 DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AA22 C9 -  -  -  		ret		
  142 D1:AA23 -  -  -  -  
  143 D1:AA23 -  -  -  -  
  144 D1:AA23 -  -  -  -  ; ***************************************************************************************
  145 D1:AA23 -  -  -  -  ;
  146 D1:AA23 -  -  -  -  ;									Changes and Updates
  147 D1:AA23 -  -  -  -  ;
  148 D1:AA23 -  -  -  -  ; ***************************************************************************************
  149 D1:AA23 -  -  -  -  ;
  150 D1:AA23 -  -  -  -  ;		Date			Notes
  151 D1:AA23 -  -  -  -  ;		==== 			=====
  152 D1:AA23 -  -  -  -  ;
  153 D1:AA23 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:AA23 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AA23 -  -  -  -  ; ***************************************************************************************
    2 D1:AA23 -  -  -  -  ; ***************************************************************************************
    3 D1:AA23 -  -  -  -  ;
    4 D1:AA23 -  -  -  -  ;		Name : 		end.asm
    5 D1:AA23 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA23 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA23 -  -  -  -  ;		Reviewed :	No
    8 D1:AA23 -  -  -  -  ;		Purpose :	End command
    9 D1:AA23 -  -  -  -  ;
   10 D1:AA23 -  -  -  -  ; ***************************************************************************************
   11 D1:AA23 -  -  -  -  ; ***************************************************************************************
   12 D1:AA23 -  -  -  -  
   13 D1:AA23 -  -  -  -  ; ***************************************************************************************
   14 D1:AA23 -  -  -  -  ;
   15 D1:AA23 -  -  -  -  ;										END command
   16 D1:AA23 -  -  -  -  ;
   17 D1:AA23 -  -  -  -  ; ***************************************************************************************
   18 D1:AA23 -  -  -  -  
   19 D1:AA23 -  -  -  -  Command_END: 	;; [end]
   20 D1:AA23 3E 00 C3 D9 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AA29 -  -  -  -  
   22 D1:AA29 -  -  -  -  ; ***************************************************************************************
   23 D1:AA29 -  -  -  -  ;
   24 D1:AA29 -  -  -  -  ;									Changes and Updates
   25 D1:AA29 -  -  -  -  ;
   26 D1:AA29 -  -  -  -  ; ***************************************************************************************
   27 D1:AA29 -  -  -  -  ;
   28 D1:AA29 -  -  -  -  ;		Date			Notes
   29 D1:AA29 -  -  -  -  ;		==== 			=====
   30 D1:AA29 -  -  -  -  ;
   31 D1:AA29 -  -  -  -  ; ***************************************************************************************
   32 D1:AA29 -  -  -  -  		
Listing for file "_build.asm"
   18 D1:AA29 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AA29 -  -  -  -  ; ***************************************************************************************
    2 D1:AA29 -  -  -  -  ; ***************************************************************************************
    3 D1:AA29 -  -  -  -  ;
    4 D1:AA29 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AA29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA29 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA29 -  -  -  -  ;		Reviewed :	None
    8 D1:AA29 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AA29 -  -  -  -  ;
   10 D1:AA29 -  -  -  -  ; ***************************************************************************************
   11 D1:AA29 -  -  -  -  ; ***************************************************************************************
   12 D1:AA29 -  -  -  -  
   13 D1:AA29 -  -  -  -  ; ***************************************************************************************
   14 D1:AA29 -  -  -  -  ;
   15 D1:AA29 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AA29 -  -  -  -  ;
   17 D1:AA29 -  -  -  -  ; ***************************************************************************************
   18 D1:AA29 -  -  -  -  
   19 D1:AA29 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AA29 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AA2E 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA32 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA35 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA37 -  -  -  -  		;
   25 D1:AA37 ED 7B DD A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA3C C3 2F AB D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA40 -  -  -  -  
   28 D1:AA40 -  -  -  -  ; ***************************************************************************************
   29 D1:AA40 -  -  -  -  ;
   30 D1:AA40 -  -  -  -  ;									Changes and Updates
   31 D1:AA40 -  -  -  -  ;
   32 D1:AA40 -  -  -  -  ; ***************************************************************************************
   33 D1:AA40 -  -  -  -  ;
   34 D1:AA40 -  -  -  -  ;		Date			Notes
   35 D1:AA40 -  -  -  -  ;		==== 			=====
   36 D1:AA40 -  -  -  -  ;
   37 D1:AA40 -  -  -  -  ; ***************************************************************************************
   38 D1:AA40 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA40 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA40 -  -  -  -  ; ***************************************************************************************
    2 D1:AA40 -  -  -  -  ; ***************************************************************************************
    3 D1:AA40 -  -  -  -  ;
    4 D1:AA40 -  -  -  -  ;		Name : 		let.asm
    5 D1:AA40 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA40 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA40 -  -  -  -  ;		Reviewed :	No
    8 D1:AA40 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA40 -  -  -  -  ;
   10 D1:AA40 -  -  -  -  ; ***************************************************************************************
   11 D1:AA40 -  -  -  -  ; ***************************************************************************************
   12 D1:AA40 -  -  -  -  
   13 D1:AA40 -  -  -  -  ; ***************************************************************************************
   14 D1:AA40 -  -  -  -  ;
   15 D1:AA40 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA40 -  -  -  -  ;
   17 D1:AA40 -  -  -  -  ; ***************************************************************************************
   18 D1:AA40 -  -  -  -  
   19 D1:AA40 -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA40 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA43 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA45 28 2F -  -  		jr 		z,_CLString
   23 D1:AA47 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA49 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA4B 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA4D 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA51 -  -  -  -  _CLNoAuto:
   28 D1:AA51 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA53 CD 8E AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA57 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA59 CA 43 AC D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA5D E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA5E C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA5F AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA60 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA64 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA66 CD CD AB D1 		call 	CheckNextA
   38 D1:AA6A -  -  -  -  
   39 D1:AA6A CD 04 AE D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA6E -  -  -  -  
   41 D1:AA6E D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA6F 43 -  -  -  		ld 		b,e 						
   43 D1:AA70 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA71 -  -  -  -  		;
   45 D1:AA71 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA71 -  -  -  -  		;
   47 D1:AA71 CD 7E AA D1 		call 	WriteHLToDE
   48 D1:AA75 C9 -  -  -  		ret
   49 D1:AA76 -  -  -  -  		;
   50 D1:AA76 -  -  -  -  		; 		String assignment code.
   51 D1:AA76 -  -  -  -  		;
   52 D1:AA76 -  -  -  -  _CLString:
   53 D1:AA76 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:AA7E -  -  -  -  
   55 D1:AA7E -  -  -  -  ; ***************************************************************************************
   56 D1:AA7E -  -  -  -  ;
   57 D1:AA7E -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:AA7E -  -  -  -  ;
   59 D1:AA7E -  -  -  -  ; ***************************************************************************************
   60 D1:AA7E -  -  -  -  
   61 D1:AA7E -  -  -  -  WriteHLToDE:
   62 D1:AA7E CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:AA80 C2 37 AC D1 		jp 		nz,TypeMismatch
   64 D1:AA84 -  -  -  -  		;
   65 D1:AA84 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:AA84 -  -  -  -  		;		
   67 D1:AA84 -  -  -  -  _WHDWriteNumber:
   68 D1:AA84 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:AA85 D9 -  -  -  		exx
   70 D1:AA86 EB -  -  -  		ex 		de,hl
   71 D1:AA87 D9 -  -  -  		exx
   72 D1:AA88 -  -  -  -  
   73 D1:AA88 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:AA89 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:AA8A 72 -  -  -  		ld 		(hl),d
   76 D1:AA8B 23 -  -  -  		inc 	hl
   77 D1:AA8C E5 -  -  -  		push 	hl
   78 D1:AA8D D9 -  -  -  		exx
   79 D1:AA8E E1 -  -  -  		pop 	hl
   80 D1:AA8F 73 -  -  -  		ld 		(hl),e
   81 D1:AA90 23 -  -  -  		inc 	hl
   82 D1:AA91 72 -  -  -  		ld 		(hl),d
   83 D1:AA92 D9 -  -  -  		exx
   84 D1:AA93 -  -  -  -  
   85 D1:AA93 C9 -  -  -  		ret
   86 D1:AA94 -  -  -  -  
   87 D1:AA94 -  -  -  -  ; ***************************************************************************************
   88 D1:AA94 -  -  -  -  ;
   89 D1:AA94 -  -  -  -  ;									Changes and Updates
   90 D1:AA94 -  -  -  -  ;
   91 D1:AA94 -  -  -  -  ; ***************************************************************************************
   92 D1:AA94 -  -  -  -  ;
   93 D1:AA94 -  -  -  -  ;		Date			Notes
   94 D1:AA94 -  -  -  -  ;		==== 			=====
   95 D1:AA94 -  -  -  -  ;
   96 D1:AA94 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:AA94 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AA94 -  -  -  -  ; ***************************************************************************************
    2 D1:AA94 -  -  -  -  ; ***************************************************************************************
    3 D1:AA94 -  -  -  -  ;
    4 D1:AA94 -  -  -  -  ;		Name : 		print.asm
    5 D1:AA94 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA94 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA94 -  -  -  -  ;		Reviewed :	No
    8 D1:AA94 -  -  -  -  ;		Purpose :	Print command
    9 D1:AA94 -  -  -  -  ;
   10 D1:AA94 -  -  -  -  ; ***************************************************************************************
   11 D1:AA94 -  -  -  -  ; ***************************************************************************************
   12 D1:AA94 -  -  -  -  
   13 D1:AA94 -  -  -  -  ; ***************************************************************************************
   14 D1:AA94 -  -  -  -  ;
   15 D1:AA94 -  -  -  -  ;										PRINT command
   16 D1:AA94 -  -  -  -  ;
   17 D1:AA94 -  -  -  -  ; ***************************************************************************************
   18 D1:AA94 -  -  -  -  
   19 D1:AA94 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AA94 3E F6 -  -  		ld 		a,-10 						; default base.
   21 D1:AA96 32 FF A8 D1 		ld 		(PrintBase),a
   22 D1:AA9A -  -  -  -  		;
   23 D1:AA9A -  -  -  -  		;		Main loop
   24 D1:AA9A -  -  -  -  		;
   25 D1:AA9A -  -  -  -  _CPRLoop:
   26 D1:AA9A DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 D1:AA9D FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 D1:AA9F 28 59 -  -  		jr 		z,_CPRExitNL
   29 D1:AAA1 FE A7 -  -  		cp 		KWD_COLON 	
   30 D1:AAA3 28 55 -  -  		jr 		z,_CPRExitNL
   31 D1:AAA5 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 D1:AAA7 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 D1:AAA9 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 D1:AAAB 28 34 -  -  		jr 		z,_CPRTab
   35 D1:AAAD FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 D1:AAAF 28 2A -  -  		jr 		z,_CPRNewLine
   37 D1:AAB1 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 D1:AAB3 28 1C -  -  		jr 		z,_CPRHexMode
   39 D1:AAB5 -  -  -  -  		;
   40 D1:AAB5 CD 04 AE D1 		call 	EvaluateValue 				; so it must be an expression.		
   41 D1:AAB9 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 D1:AABB 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 D1:AABD -  -  -  -  		;
   44 D1:AABD 3A FF A8 D1 		ld 		a,(PrintBase)				; current print mode.
   45 D1:AAC1 -  -  -  -  _CPRPrintNumber:
   46 D1:AAC1 01 1D A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AAC5 C5 -  -  -  		push 	bc
   48 D1:AAC6 CD 37 B7 D1 		call 	Int32ToString 				; convert to string
   49 D1:AACA E1 -  -  -  		pop 	hl
   50 D1:AACB -  -  -  -  		;
   51 D1:AACB -  -  -  -  		; 		Print text at HL.
   52 D1:AACB -  -  -  -  		;
   53 D1:AACB -  -  -  -  _CPRPrintHL:
   54 D1:AACB CD 82 B1 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AACF 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AAD1 -  -  -  -  		;
   57 D1:AAD1 -  -  -  -  		;		Hex mode (~)
   58 D1:AAD1 -  -  -  -  		;
   59 D1:AAD1 -  -  -  -  _CPRHexMode:		
   60 D1:AAD1 3E 10 -  -  		ld 		a,16
   61 D1:AAD3 32 FF A8 D1 		ld 		(PrintBase),a
   62 D1:AAD7 DD 23 -  -  		inc 	ix
   63 D1:AAD9 18 BF -  -  		jr 		_CPRLoop
   64 D1:AADB -  -  -  -  		;
   65 D1:AADB -  -  -  -  		; 		New line (')
   66 D1:AADB -  -  -  -  		;
   67 D1:AADB -  -  -  -  _CPRNewLine:
   68 D1:AADB CD D2 B7 D1 		call 	SYSPrintCRLF
   69 D1:AADF 18 0C -  -  		jr 		_CPRCheckNext
   70 D1:AAE1 -  -  -  -  		;
   71 D1:AAE1 -  -  -  -  		; 		Tab command (,)
   72 D1:AAE1 -  -  -  -  		;
   73 D1:AAE1 -  -  -  -  _CPRTab:
   74 D1:AAE1 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 D1:AAE3 CD AA B7 D1 		call 	SYSPrintChar
   76 D1:AAE7 -  -  -  -  		;
   77 D1:AAE7 -  -  -  -  		;		Set to base 10 then check next character
   78 D1:AAE7 -  -  -  -  		;
   79 D1:AAE7 -  -  -  -  _CPRCheckNext10:		
   80 D1:AAE7 3E F6 -  -  		ld 		a,-10
   81 D1:AAE9 32 FF A8 D1 		ld 		(PrintBase),a
   82 D1:AAED -  -  -  -  		;
   83 D1:AAED -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 D1:AAED -  -  -  -  		;		
   85 D1:AAED -  -  -  -  _CPRCheckNext:
   86 D1:AAED DD 23 -  -  		inc 	ix 							; consume current
   87 D1:AAEF DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 D1:AAF2 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 D1:AAF4 C8 -  -  -  		ret 	z
   90 D1:AAF5 FE A7 -  -  		cp 		KWD_COLON
   91 D1:AAF7 C8 -  -  -  		ret 	z
   92 D1:AAF8 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 D1:AAFA -  -  -  -  		;
   94 D1:AAFA -  -  -  -  		;		Found EOL or : not after ; ,
   95 D1:AAFA -  -  -  -  		;
   96 D1:AAFA -  -  -  -  _CPRExitNL:
   97 D1:AAFA CD D2 B7 D1 		call 	SYSPrintCRLF 				; do CR/LF
   98 D1:AAFE C9 -  -  -  		ret
Listing for file "_build.asm"
   21 D1:AAFF -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AAFF -  -  -  -  ; ***************************************************************************************
    2 D1:AAFF -  -  -  -  ; ***************************************************************************************
    3 D1:AAFF -  -  -  -  ;
    4 D1:AAFF -  -  -  -  ;		Name : 		rem.asm
    5 D1:AAFF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAFF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAFF -  -  -  -  ;		Reviewed :	No
    8 D1:AAFF -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AAFF -  -  -  -  ;
   10 D1:AAFF -  -  -  -  ; ***************************************************************************************
   11 D1:AAFF -  -  -  -  ; ***************************************************************************************
   12 D1:AAFF -  -  -  -  
   13 D1:AAFF -  -  -  -  ; ***************************************************************************************
   14 D1:AAFF -  -  -  -  ;
   15 D1:AAFF -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AAFF -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AAFF -  -  -  -  ;
   18 D1:AAFF -  -  -  -  ; ***************************************************************************************
   19 D1:AAFF -  -  -  -  
   20 D1:AAFF -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AAFF -  -  -  -  Command_REM2: 	;; [']
   22 D1:AAFF DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AB02 DD 23 -  -  		inc 	ix
   24 D1:AB04 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AB06 C8 -  -  -  		ret 	z
   26 D1:AB07 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AB09 C8 -  -  -  		ret 	z
   28 D1:AB0A FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AB0C C2 43 AC D1 		jp 		nz,SyntaxError
   30 D1:AB10 -  -  -  -  		;		
   31 D1:AB10 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AB14 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AB17 13 -  -  -  		inc 	de 
   34 D1:AB18 13 -  -  -  		inc 	de
   35 D1:AB19 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AB1B C9 -  -  -  		ret
   37 D1:AB1C -  -  -  -  
   38 D1:AB1C -  -  -  -  ; ***************************************************************************************
   39 D1:AB1C -  -  -  -  ;
   40 D1:AB1C -  -  -  -  ;									Changes and Updates
   41 D1:AB1C -  -  -  -  ;
   42 D1:AB1C -  -  -  -  ; ***************************************************************************************
   43 D1:AB1C -  -  -  -  ;
   44 D1:AB1C -  -  -  -  ;		Date			Notes
   45 D1:AB1C -  -  -  -  ;		==== 			=====
   46 D1:AB1C -  -  -  -  ;
   47 D1:AB1C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AB1C -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AB1C -  -  -  -  ; ***************************************************************************************
    2 D1:AB1C -  -  -  -  ; ***************************************************************************************
    3 D1:AB1C -  -  -  -  ;
    4 D1:AB1C -  -  -  -  ;		Name : 		run.asm
    5 D1:AB1C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB1C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB1C -  -  -  -  ;		Reviewed :	No
    8 D1:AB1C -  -  -  -  ;		Purpose :	Run command
    9 D1:AB1C -  -  -  -  ;
   10 D1:AB1C -  -  -  -  ; ***************************************************************************************
   11 D1:AB1C -  -  -  -  ; ***************************************************************************************
   12 D1:AB1C -  -  -  -  
   13 D1:AB1C -  -  -  -  ; ***************************************************************************************
   14 D1:AB1C -  -  -  -  ;
   15 D1:AB1C -  -  -  -  ;										RUN command
   16 D1:AB1C -  -  -  -  ;
   17 D1:AB1C -  -  -  -  ; ***************************************************************************************
   18 D1:AB1C -  -  -  -  
   19 D1:AB1C -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AB1C CD 14 B1 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AB20 -  -  -  -  
   22 D1:AB20 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AB25 ED 73 DD A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AB2A AF -  -  -  		xor 	a
   25 D1:AB2B 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AB2F -  -  -  -  		;
   27 D1:AB2F -  -  -  -  		; 		New line at IX.
   28 D1:AB2F -  -  -  -  		;
   29 D1:AB2F -  -  -  -  CRNewLine:
   30 D1:AB2F DD 22 D9 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AB34 -  -  -  -  		;
   32 D1:AB34 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AB37 B7 -  -  -  		or 		a
   34 D1:AB38 CA 23 AA D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AB3C -  -  -  -  		;
   36 D1:AB3C DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AB3E DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AB40 DD 23 -  -  		inc 	ix
   39 D1:AB42 -  -  -  -  		;
   40 D1:AB42 -  -  -  -  		; 		New command at IX
   41 D1:AB42 -  -  -  -  		;
   42 D1:AB42 -  -  -  -  _CRNewCommand:	
   43 D1:AB42 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB45 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB46 F2 81 AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB4A -  -  -  -  		;
   47 D1:AB4A FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB4C 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB4E FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB50 D2 71 AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB54 -  -  -  -  		;
   52 D1:AB54 -  -  -  -  _CRDoCommand:		
   53 D1:AB54 E6 7F 21 00 
              00 00 6F 29 
              29 11 40 B4 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB69 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB6B CD E1 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB6F 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB71 -  -  -  -  		;
   58 D1:AB71 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB71 -  -  -  -  		;
   60 D1:AB71 -  -  -  -  		;
   61 D1:AB71 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB71 -  -  -  -  		;		
   63 D1:AB71 -  -  -  -  _CRAlternateLets:		
   64 D1:AB71 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB73 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB75 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB77 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB79 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB7B 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB7D C3 43 AC D1 		jp 		SyntaxError
   71 D1:AB81 -  -  -  -  		;
   72 D1:AB81 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB81 -  -  -  -  		;
   74 D1:AB81 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB81 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB83 D2 43 AC D1 		jp 		nc,SyntaxError
   77 D1:AB87 -  -  -  -  _CRAssignmentLet:		
   78 D1:AB87 CD 40 AA D1 		call	Command_LET 				; do LET.
   79 D1:AB8B C3 42 AB D1 		jp 		_CRNewCommand
   80 D1:AB8F -  -  -  -  
   81 D1:AB8F -  -  -  -  ; ***************************************************************************************
   82 D1:AB8F -  -  -  -  ;
   83 D1:AB8F -  -  -  -  ;									Changes and Updates
   84 D1:AB8F -  -  -  -  ;
   85 D1:AB8F -  -  -  -  ; ***************************************************************************************
   86 D1:AB8F -  -  -  -  ;
   87 D1:AB8F -  -  -  -  ;		Date			Notes
   88 D1:AB8F -  -  -  -  ;		==== 			=====
   89 D1:AB8F -  -  -  -  ;
   90 D1:AB8F -  -  -  -  ; ***************************************************************************************
   91 D1:AB8F -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AB8F -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AB8F -  -  -  -  ; ***************************************************************************************
    2 D1:AB8F -  -  -  -  ; ***************************************************************************************
    3 D1:AB8F -  -  -  -  ;
    4 D1:AB8F -  -  -  -  ;		Name : 		stop.asm
    5 D1:AB8F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB8F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB8F -  -  -  -  ;		Reviewed :	No
    8 D1:AB8F -  -  -  -  ;		Purpose :	Stop command
    9 D1:AB8F -  -  -  -  ;
   10 D1:AB8F -  -  -  -  ; ***************************************************************************************
   11 D1:AB8F -  -  -  -  ; ***************************************************************************************
   12 D1:AB8F -  -  -  -  
   13 D1:AB8F -  -  -  -  ; ***************************************************************************************
   14 D1:AB8F -  -  -  -  ;
   15 D1:AB8F -  -  -  -  ;										STOP command
   16 D1:AB8F -  -  -  -  ;
   17 D1:AB8F -  -  -  -  ; ***************************************************************************************
   18 D1:AB8F -  -  -  -  
   19 D1:AB8F -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AB8F 3E 0E C3 D9 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AB95 -  -  -  -  
   22 D1:AB95 -  -  -  -  ; ***************************************************************************************
   23 D1:AB95 -  -  -  -  ;
   24 D1:AB95 -  -  -  -  ;									Changes and Updates
   25 D1:AB95 -  -  -  -  ;
   26 D1:AB95 -  -  -  -  ; ***************************************************************************************
   27 D1:AB95 -  -  -  -  ;
   28 D1:AB95 -  -  -  -  ;		Date			Notes
   29 D1:AB95 -  -  -  -  ;		==== 			=====
   30 D1:AB95 -  -  -  -  ;
   31 D1:AB95 -  -  -  -  ; ***************************************************************************************
   32 D1:AB95 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB95 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AB95 -  -  -  -  ; ***************************************************************************************
    2 D1:AB95 -  -  -  -  ; ***************************************************************************************
    3 D1:AB95 -  -  -  -  ;
    4 D1:AB95 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AB95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB95 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB95 -  -  -  -  ;		Reviewed :	No
    8 D1:AB95 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AB95 -  -  -  -  ;
   10 D1:AB95 -  -  -  -  ; ***************************************************************************************
   11 D1:AB95 -  -  -  -  ; ***************************************************************************************
   12 D1:AB95 -  -  -  -  
   13 D1:AB95 -  -  -  -  ; ***************************************************************************************
   14 D1:AB95 -  -  -  -  ;
   15 D1:AB95 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AB95 -  -  -  -  ;
   17 D1:AB95 -  -  -  -  ; ***************************************************************************************
   18 D1:AB95 -  -  -  -  
   19 D1:AB95 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AB95             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AB95             		inc 	ix
   22 D1:AB95             		cp 		ch 							; exit if matches
   23 D1:AB95             		ret 	z
   24 D1:AB95             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AB95             		jp 		ErrorHandler
   26 D1:AB95             #endmacro
   27 D1:AB95 -  -  -  -  
   28 D1:AB95 -  -  -  -  CheckLeftBracket:
   29 D1:AB95 DD 7E 00 DD 
              23 FE 95 C8 
              3E 0B C3 D9 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:ABA3 -  -  -  -  
   31 D1:ABA3 -  -  -  -  CheckRightBracket:
   32 D1:ABA3 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0C C3 D9 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:ABB1 -  -  -  -  
   34 D1:ABB1 -  -  -  -  CheckDollar:
   35 D1:ABB1 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0A C3 D9 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:ABBF -  -  -  -  		
   37 D1:ABBF -  -  -  -  CheckComma:
   38 D1:ABBF DD 7E 00 DD 
              23 FE A6 C8 
              3E 09 C3 D9 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:ABCD -  -  -  -  
   40 D1:ABCD -  -  -  -  ; ***************************************************************************************
   41 D1:ABCD -  -  -  -  ;
   42 D1:ABCD -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:ABCD -  -  -  -  ;
   44 D1:ABCD -  -  -  -  ; ***************************************************************************************
   45 D1:ABCD -  -  -  -  
   46 D1:ABCD -  -  -  -  CheckNextA:
   47 D1:ABCD DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:ABD0 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:ABD2 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:ABD3 3E 0F C3 D9 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:ABD9 -  -  -  -  		
   52 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   53 D1:ABD9 -  -  -  -  ;
   54 D1:ABD9 -  -  -  -  ;									Changes and Updates
   55 D1:ABD9 -  -  -  -  ;
   56 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   57 D1:ABD9 -  -  -  -  ;
   58 D1:ABD9 -  -  -  -  ;		Date			Notes
   59 D1:ABD9 -  -  -  -  ;		==== 			=====
   60 D1:ABD9 -  -  -  -  ;
   61 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   62 D1:ABD9 -  -  -  -  		
Listing for file "_build.asm"
   25 D1:ABD9 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:ABD9 -  -  -  -  ; ***************************************************************************************
    2 D1:ABD9 -  -  -  -  ; ***************************************************************************************
    3 D1:ABD9 -  -  -  -  ;
    4 D1:ABD9 -  -  -  -  ;		Name : 		errors.asm
    5 D1:ABD9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABD9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABD9 -  -  -  -  ;		Reviewed :	No
    8 D1:ABD9 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:ABD9 -  -  -  -  ;
   10 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   11 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   12 D1:ABD9 -  -  -  -  
   13 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   14 D1:ABD9 -  -  -  -  ;
   15 D1:ABD9 -  -  -  -  ;								Error handler, message A 
   16 D1:ABD9 -  -  -  -  ;
   17 D1:ABD9 -  -  -  -  ; ***************************************************************************************
   18 D1:ABD9 -  -  -  -  
   19 D1:ABD9 -  -  -  -  ErrorHandler:
   20 D1:ABD9 F5 -  -  -  		push 	af 						; save error ID
   21 D1:ABDA -  -  -  -  
   22 D1:ABDA 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:ABDE 6F -  -  -  		ld 		l,a
   24 D1:ABDF 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:ABE0 29 -  -  -  		add 	hl,hl 		
   26 D1:ABE1 11 F1 B2 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:ABE5 19 -  -  -  		add 	hl,de
   28 D1:ABE6 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:ABE8 CD 82 B1 D1 		call 	PrintStringAtHL
   30 D1:ABEC -  -  -  -  		;
   31 D1:ABEC F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:ABED B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:ABEE 28 2F -  -  		jr 		z,_EHExit
   34 D1:ABF0 -  -  -  -  		;
   35 D1:ABF0 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:ABF5 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:ABF8 B7 -  -  -  		or 		a
   38 D1:ABF9 28 24 -  -  		jr 		z,_EHExit
   39 D1:ABFB -  -  -  -  
   40 D1:ABFB 21 27 AC D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:ABFF CD 82 B1 D1 		call 	PrintStringAtHL 
   42 D1:AC03 -  -  -  -  		
   43 D1:AC03 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AC04 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AC08 D9 -  -  -  		exx 
   46 D1:AC09 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AC0C DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AC0F 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AC11 01 1D A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AC15 CD 37 B7 D1 		call 	Int32ToString
   51 D1:AC19 C5 -  -  -  		push 	bc
   52 D1:AC1A E1 -  -  -  		pop 	hl
   53 D1:AC1B CD 82 B1 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AC1F -  -  -  -  _EHExit:		
   55 D1:AC1F CD D2 B7 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AC23 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AC27 -  -  -  -  
   58 D1:AC27 -  -  -  -  _EHAtText:
   59 D1:AC27 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AC31 -  -  -  -  
   61 D1:AC31 -  -  -  -  NotImplemented:
   62 D1:AC31 3E 05 C3 D9 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AC37 -  -  -  -  TypeMismatch:
   64 D1:AC37 3E 02 C3 D9 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AC3D -  -  -  -  BadValue:
   66 D1:AC3D 3E 03 C3 D9 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AC43 -  -  -  -  SyntaxError:
   68 D1:AC43 3E 0F C3 D9 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AC49 -  -  -  -  						
   70 D1:AC49 -  -  -  -  ; ***************************************************************************************
   71 D1:AC49 -  -  -  -  ;
   72 D1:AC49 -  -  -  -  ;									Changes and Updates
   73 D1:AC49 -  -  -  -  ;
   74 D1:AC49 -  -  -  -  ; ***************************************************************************************
   75 D1:AC49 -  -  -  -  ;
   76 D1:AC49 -  -  -  -  ;		Date			Notes
   77 D1:AC49 -  -  -  -  ;		==== 			=====
   78 D1:AC49 -  -  -  -  ;
   79 D1:AC49 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AC49 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AC49 -  -  -  -  ; ***************************************************************************************
    2 D1:AC49 -  -  -  -  ; ***************************************************************************************
    3 D1:AC49 -  -  -  -  ;
    4 D1:AC49 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AC49 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC49 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC49 -  -  -  -  ;		Reviewed :	No
    8 D1:AC49 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AC49 -  -  -  -  ;
   10 D1:AC49 -  -  -  -  ; ***************************************************************************************
   11 D1:AC49 -  -  -  -  ; ***************************************************************************************
   12 D1:AC49 -  -  -  -  
   13 D1:AC49 -  -  -  -  ; ***************************************************************************************
   14 D1:AC49 -  -  -  -  ;
   15 D1:AC49 -  -  -  -  ; 									Addition
   16 D1:AC49 -  -  -  -  ;
   17 D1:AC49 -  -  -  -  ; ***************************************************************************************
   18 D1:AC49 -  -  -  -  
   19 D1:AC49 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AC49 CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 B6 
              B6 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AC57 -  -  -  -  
   22 D1:AC57 -  -  -  -  ; ***************************************************************************************
   23 D1:AC57 -  -  -  -  ;
   24 D1:AC57 -  -  -  -  ; 									Subtraction
   25 D1:AC57 -  -  -  -  ;
   26 D1:AC57 -  -  -  -  ; ***************************************************************************************
   27 D1:AC57 -  -  -  -  
   28 D1:AC57 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AC57 CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 BE 
              B6 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AC65 -  -  -  -  
   31 D1:AC65 -  -  -  -  ; ***************************************************************************************
   32 D1:AC65 -  -  -  -  ;
   33 D1:AC65 -  -  -  -  ; 									  Multiply
   34 D1:AC65 -  -  -  -  ;
   35 D1:AC65 -  -  -  -  ; ***************************************************************************************
   36 D1:AC65 -  -  -  -  
   37 D1:AC65 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AC65 CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 7D 
              B6 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AC73 -  -  -  -  
   40 D1:AC73 -  -  -  -  ; ***************************************************************************************
   41 D1:AC73 -  -  -  -  ;
   42 D1:AC73 -  -  -  -  ; 									  Divide
   43 D1:AC73 -  -  -  -  ;
   44 D1:AC73 -  -  -  -  ; ***************************************************************************************
   45 D1:AC73 -  -  -  -  
   46 D1:AC73 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AC73 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AC73 CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 7D 
              B5 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AC81 -  -  -  -  
   50 D1:AC81 -  -  -  -  ; ***************************************************************************************
   51 D1:AC81 -  -  -  -  ;
   52 D1:AC81 -  -  -  -  ; 									  Modulus
   53 D1:AC81 -  -  -  -  ;
   54 D1:AC81 -  -  -  -  ; ***************************************************************************************
   55 D1:AC81 -  -  -  -  
   56 D1:AC81 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AC81 CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 80 
              B5 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AC8F -  -  -  -  
   59 D1:AC8F -  -  -  -  ; ***************************************************************************************
   60 D1:AC8F -  -  -  -  ;
   61 D1:AC8F -  -  -  -  ; 									  Logical
   62 D1:AC8F -  -  -  -  ;
   63 D1:AC8F -  -  -  -  ; ***************************************************************************************
   64 D1:AC8F -  -  -  -  
   65 D1:AC8F -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AC8F CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 C8 
              B6 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AC9D -  -  -  -  
   68 D1:AC9D -  -  -  -  ALUOr: 			;; [or]
   69 D1:AC9D CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 D5 
              B6 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ACAB -  -  -  -  
   71 D1:ACAB -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ACAB CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 E2 
              B6 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ACB9 -  -  -  -  
   74 D1:ACB9 -  -  -  -  ; ***************************************************************************************
   75 D1:ACB9 -  -  -  -  ;
   76 D1:ACB9 -  -  -  -  ;									Changes and Updates
   77 D1:ACB9 -  -  -  -  ;
   78 D1:ACB9 -  -  -  -  ; ***************************************************************************************
   79 D1:ACB9 -  -  -  -  ;
   80 D1:ACB9 -  -  -  -  ;		Date			Notes
   81 D1:ACB9 -  -  -  -  ;		==== 			=====
   82 D1:ACB9 -  -  -  -  ;
   83 D1:ACB9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:ACB9 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ACB9 -  -  -  -  ; ***************************************************************************************
    2 D1:ACB9 -  -  -  -  ; ***************************************************************************************
    3 D1:ACB9 -  -  -  -  ;
    4 D1:ACB9 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ACB9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACB9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACB9 -  -  -  -  ;		Reviewed :	No
    8 D1:ACB9 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ACB9 -  -  -  -  ;
   10 D1:ACB9 -  -  -  -  ; ***************************************************************************************
   11 D1:ACB9 -  -  -  -  ; ***************************************************************************************
   12 D1:ACB9 -  -  -  -  
   13 D1:ACB9 -  -  -  -  ; ***************************************************************************************
   14 D1:ACB9 -  -  -  -  ;
   15 D1:ACB9 -  -  -  -  ; 									<l> <op> <r>
   16 D1:ACB9 -  -  -  -  ;
   17 D1:ACB9 -  -  -  -  ; ***************************************************************************************
   18 D1:ACB9 -  -  -  -  
   19 D1:ACB9 -  -  -  -  ALULongReference:			;; [!]
   20 D1:ACB9 CD C9 AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:ACBD 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:ACBF CB F9 -  -  		set 	CIsReference,c
   23 D1:ACC1 C9 -  -  -  		ret
   24 D1:ACC2 -  -  -  -  
   25 D1:ACC2 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:ACC2 CD B9 AC D1 		call 	ALULongReference
   27 D1:ACC6 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:ACC8 C9 -  -  -  		ret
   29 D1:ACC9 -  -  -  -  
   30 D1:ACC9 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:ACC9 CD 66 AD D1 
              78 B1 C2 37 
              AC D1 C3 D7 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ACD7 -  -  -  -  _BRGAMain:		
   33 D1:ACD7 CD B6 B6 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:ACDB CD 6C AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:ACDF C9 -  -  -  		ret
   36 D1:ACE0 -  -  -  -  
   37 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   38 D1:ACE0 -  -  -  -  ;
   39 D1:ACE0 -  -  -  -  ;									Changes and Updates
   40 D1:ACE0 -  -  -  -  ;
   41 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   42 D1:ACE0 -  -  -  -  ;
   43 D1:ACE0 -  -  -  -  ;		Date			Notes
   44 D1:ACE0 -  -  -  -  ;		==== 			=====
   45 D1:ACE0 -  -  -  -  ;
   46 D1:ACE0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:ACE0 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:ACE0 -  -  -  -  ; ***************************************************************************************
    2 D1:ACE0 -  -  -  -  ; ***************************************************************************************
    3 D1:ACE0 -  -  -  -  ;
    4 D1:ACE0 -  -  -  -  ;		Name : 		compare.asm
    5 D1:ACE0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACE0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACE0 -  -  -  -  ;		Reviewed :	No
    8 D1:ACE0 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:ACE0 -  -  -  -  ;
   10 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   11 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   12 D1:ACE0 -  -  -  -  
   13 D1:ACE0 -  -  -  -  #macro compare_equals(n)
   14 D1:ACE0             		call 	CompareBaseCode
   15 D1:ACE0             		cp 		n
   16 D1:ACE0             		jr 		z,UnaryInt32True
   17 D1:ACE0             		jr 		UnaryInt32False
   18 D1:ACE0             #endmacro
   19 D1:ACE0 -  -  -  -  
   20 D1:ACE0 -  -  -  -  #macro compare_not_equals(n)
   21 D1:ACE0             		call 	CompareBaseCode
   22 D1:ACE0             		cp 		n
   23 D1:ACE0             		jr 		nz,UnaryInt32True
   24 D1:ACE0             		jr 		UnaryInt32False
   25 D1:ACE0             #endmacro
   26 D1:ACE0 -  -  -  -  
   27 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   28 D1:ACE0 -  -  -  -  ;
   29 D1:ACE0 -  -  -  -  ; 								Return True/False
   30 D1:ACE0 -  -  -  -  ;
   31 D1:ACE0 -  -  -  -  ; ***************************************************************************************
   32 D1:ACE0 -  -  -  -  
   33 D1:ACE0 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:ACE0 3E FF -  -  		ld 		a,255
   35 D1:ACE2 18 01 -  -  		jr 		_Int32Logical
   36 D1:ACE4 -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:ACE4 AF -  -  -  		xor 	a
   38 D1:ACE5 -  -  -  -  _Int32Logical:
   39 D1:ACE5 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ACE6 67 -  -  -  		ld 		h,a
   41 D1:ACE7 D9 -  -  -  		exx
   42 D1:ACE8 6F -  -  -  		ld 		l,a
   43 D1:ACE9 67 -  -  -  		ld 		h,a
   44 D1:ACEA D9 -  -  -  		exx
   45 D1:ACEB 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:ACED C9 -  -  -  		ret
   47 D1:ACEE -  -  -  -  
   48 D1:ACEE -  -  -  -  ; ***************************************************************************************
   49 D1:ACEE -  -  -  -  ;
   50 D1:ACEE -  -  -  -  ; 										> = < (compare == value)
   51 D1:ACEE -  -  -  -  ;
   52 D1:ACEE -  -  -  -  ; ***************************************************************************************
   53 D1:ACEE -  -  -  -  
   54 D1:ACEE -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:ACEE CD 2A AD D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:ACF8 -  -  -  -  
   57 D1:ACF8 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:ACF8 CD 2A AD D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AD02 -  -  -  -  
   60 D1:AD02 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AD02 CD 2A AD D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AD0C -  -  -  -  
   63 D1:AD0C -  -  -  -  ; ***************************************************************************************
   64 D1:AD0C -  -  -  -  ;
   65 D1:AD0C -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AD0C -  -  -  -  ;
   67 D1:AD0C -  -  -  -  ; ***************************************************************************************
   68 D1:AD0C -  -  -  -  
   69 D1:AD0C -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AD0C CD 2A AD D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AD16 -  -  -  -  
   72 D1:AD16 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AD16 CD 2A AD D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AD20 -  -  -  -  
   75 D1:AD20 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AD20 CD 2A AD D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AD2A -  -  -  -  
   78 D1:AD2A -  -  -  -  ; ***************************************************************************************
   79 D1:AD2A -  -  -  -  ;
   80 D1:AD2A -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AD2A -  -  -  -  ;
   82 D1:AD2A -  -  -  -  ; ***************************************************************************************
   83 D1:AD2A -  -  -  -  
   84 D1:AD2A -  -  -  -  CompareBaseCode:
   85 D1:AD2A CD 66 AD D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AD2E -  -  -  -  
   87 D1:AD2E 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AD2F A1 -  -  -  		and 	c
   89 D1:AD30 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AD32 C2 44 AD D1 		jp 		nz,StringCompare
   91 D1:AD36 -  -  -  -  
   92 D1:AD36 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AD37 B1 -  -  -  		or 		c
   94 D1:AD38 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AD3A CA F6 B6 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AD3E -  -  -  -  
   97 D1:AD3E 3E 02 C3 D9 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AD44 -  -  -  -  ;
   99 D1:AD44 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AD44 -  -  -  -  ;
  101 D1:AD44 -  -  -  -  StringCompare:
  102 D1:AD44 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AD45 BE -  -  -  		cp 		(hl)
  104 D1:AD46 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AD48 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AD4A 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AD4B 23 -  -  -  		inc 	hl
  108 D1:AD4C FE 20 -  -  		cp 		' '
  109 D1:AD4E 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AD50 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AD51 C9 -  -  -  		ret
  112 D1:AD52 -  -  -  -  
  113 D1:AD52 -  -  -  -  _SCLess:
  114 D1:AD52 3E FF -  -  		ld 		a,$FF
  115 D1:AD54 C9 -  -  -  		ret
  116 D1:AD55 -  -  -  -  _SCGreater:
  117 D1:AD55 3E 01 -  -  		ld 		a,1
  118 D1:AD57 C9 -  -  -  		ret
  119 D1:AD58 -  -  -  -  
  120 D1:AD58 3E 10 C3 D9 
              AB D1 -  -  		ERR_TODO()
  121 D1:AD5E -  -  -  -  
  122 D1:AD5E -  -  -  -  ; ***************************************************************************************
  123 D1:AD5E -  -  -  -  ;
  124 D1:AD5E -  -  -  -  ;									Changes and Updates
  125 D1:AD5E -  -  -  -  ;
  126 D1:AD5E -  -  -  -  ; ***************************************************************************************
  127 D1:AD5E -  -  -  -  ;
  128 D1:AD5E -  -  -  -  ;		Date			Notes
  129 D1:AD5E -  -  -  -  ;		==== 			=====
  130 D1:AD5E -  -  -  -  ;
  131 D1:AD5E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AD5E -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AD5E -  -  -  -  ; ***************************************************************************************
    2 D1:AD5E -  -  -  -  ; ***************************************************************************************
    3 D1:AD5E -  -  -  -  ;
    4 D1:AD5E -  -  -  -  ;		Name : 		utility.asm
    5 D1:AD5E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD5E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD5E -  -  -  -  ;		Reviewed :	No
    8 D1:AD5E -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AD5E -  -  -  -  ;
   10 D1:AD5E -  -  -  -  ; ***************************************************************************************
   11 D1:AD5E -  -  -  -  ; ***************************************************************************************
   12 D1:AD5E -  -  -  -  
   13 D1:AD5E -  -  -  -  ; ***************************************************************************************
   14 D1:AD5E -  -  -  -  ;
   15 D1:AD5E -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AD5E -  -  -  -  ;
   17 D1:AD5E -  -  -  -  ; ***************************************************************************************
   18 D1:AD5E -  -  -  -  
   19 D1:AD5E -  -  -  -  SwapHLDE:
   20 D1:AD5E EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AD5F D9 -  -  -  			exx
   22 D1:AD60 EB -  -  -  			ex 		de,hl
   23 D1:AD61 D9 -  -  -  			exx
   24 D1:AD62 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AD63 41 -  -  -  			ld 		b,c
   26 D1:AD64 4F -  -  -  			ld 		c,a
   27 D1:AD65 C9 -  -  -  			ret
   28 D1:AD66 -  -  -  -  
   29 D1:AD66 -  -  -  -  ; ***************************************************************************************
   30 D1:AD66 -  -  -  -  ;
   31 D1:AD66 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AD66 -  -  -  -  ;
   33 D1:AD66 -  -  -  -  ; ***************************************************************************************
   34 D1:AD66 -  -  -  -  
   35 D1:AD66 -  -  -  -  DereferenceBoth:
   36 D1:AD66 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AD68 C4 3F AE D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AD6C CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AD6E C8 -  -  -  			ret 	z
   40 D1:AD6F CD 5E AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AD73 CD 3F AE D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AD77 CD 5E AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AD7B C9 -  -  -  			ret
   44 D1:AD7C -  -  -  -  
   45 D1:AD7C -  -  -  -  ; ***************************************************************************************
   46 D1:AD7C -  -  -  -  ;
   47 D1:AD7C -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AD7C -  -  -  -  ;
   49 D1:AD7C -  -  -  -  ; ***************************************************************************************
   50 D1:AD7C -  -  -  -  
   51 D1:AD7C -  -  -  -  NegateHLHL:	
   52 D1:AD7C CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AD7E C2 37 AC D1 			jp 		nz,TypeMismatch
   54 D1:AD82 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AD84 C4 3F AE D1 			call 	nz,Dereference 			; if required.
   56 D1:AD88 CD 20 B7 D1 			call 	Int32Negate
   57 D1:AD8C C9 -  -  -  			ret
Listing for file "_build.asm"
   30 D1:AD8D -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AD8D -  -  -  -  ; ***************************************************************************************
    2 D1:AD8D -  -  -  -  ; ***************************************************************************************
    3 D1:AD8D -  -  -  -  ;
    4 D1:AD8D -  -  -  -  ;		Name : 		expression.asm
    5 D1:AD8D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD8D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD8D -  -  -  -  ;		Reviewed :	None
    8 D1:AD8D -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AD8D -  -  -  -  ;
   10 D1:AD8D -  -  -  -  ; ***************************************************************************************
   11 D1:AD8D -  -  -  -  ; ***************************************************************************************
   12 D1:AD8D -  -  -  -  
   13 D1:AD8D -  -  -  -  ; ***************************************************************************************
   14 D1:AD8D -  -  -  -  ;
   15 D1:AD8D -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AD8D -  -  -  -  ;
   17 D1:AD8D -  -  -  -  ; ***************************************************************************************
   18 D1:AD8D -  -  -  -  
   19 D1:AD8D -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AD8D AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AD8E -  -  -  -  EvaluateAtPrecedence:
   22 D1:AD8E F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AD8F -  -  -  -  		;
   24 D1:AD8F -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AD8F -  -  -  -  		;
   26 D1:AD8F CD 9B AE D1 		call 	EvaluateTerm 				; get term
   27 D1:AD93 -  -  -  -  		;
   28 D1:AD93 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AD93 -  -  -  -  		;
   30 D1:AD93 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AD94 -  -  -  -  _EAPLoop:
   32 D1:AD94 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AD97 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AD99 D8 -  -  -  		ret 	c
   35 D1:AD9A FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AD9C D0 -  -  -  		ret 	nc
   37 D1:AD9D -  -  -  -  		;
   38 D1:AD9D -  -  -  -  		; 		Get the precedence.
   39 D1:AD9D -  -  -  -  		;
   40 D1:AD9D E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AD9E D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ADA0 21 E0 B2 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ADA4 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ADA5 6F -  -  -  		ld 		l,a
   45 D1:ADA6 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ADA7 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ADA8 -  -  -  -  		;
   48 D1:ADA8 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ADA8 -  -  -  -  		;
   50 D1:ADA8 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ADA9 BB -  -  -  		cp 		e
   52 D1:ADAA D0 -  -  -  		ret 	nc
   53 D1:ADAB -  -  -  -  
   54 D1:ADAB -  -  -  -  		;
   55 D1:ADAB -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ADAB -  -  -  -  		;
   57 D1:ADAB D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ADAC -  -  -  -  		;
   59 D1:ADAC DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ADAF F5 -  -  -  		push 	af
   61 D1:ADB0 -  -  -  -  		;
   62 D1:ADB0 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ADB1 D9 -  -  -  		exx 								; save HL'
   64 D1:ADB2 E5 -  -  -  		push 	hl
   65 D1:ADB3 D9 -  -  -  		exx 								
   66 D1:ADB4 E5 -  -  -  		push 	hl 							; save HL
   67 D1:ADB5 -  -  -  -  		;
   68 D1:ADB5 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ADB7 -  -  -  -  		;
   70 D1:ADB7 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ADB7 -  -  -  -  		;
   72 D1:ADB7 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ADB8 CD 8E AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ADBC -  -  -  -  		;
   75 D1:ADBC -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ADBC -  -  -  -  		;
   77 D1:ADBC 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ADBD -  -  -  -  
   79 D1:ADBD EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ADBE E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:ADBF D9 -  -  -  		exx
   82 D1:ADC0 EB -  -  -  		ex 		de,hl
   83 D1:ADC1 E1 -  -  -  		pop 	hl
   84 D1:ADC2 D9 -  -  -  		exx
   85 D1:ADC3 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:ADC4 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:ADC5 -  -  -  -  		;
   88 D1:ADC5 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:ADC5 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:ADC5 -  -  -  -  		;
   91 D1:ADC5 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:ADC6 -  -  -  -  		;
   93 D1:ADC6 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:ADC6 -  -  -  -  		;
   95 D1:ADC6 D5 -  -  -  		push 	de
   96 D1:ADC7 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:ADC8 E6 7F 21 00 
              00 00 6F 29 
              29 11 40 B4 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:ADDD E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:ADDE D1 -  -  -  		pop 	de 							; restore DE
  100 D1:ADDF CD E1 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:ADE3 -  -  -  -  		;
  102 D1:ADE3 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:ADE4 -  -  -  -  		;
  104 D1:ADE4 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:ADE6 -  -  -  -  
  106 D1:ADE6 -  -  -  -  ; ***************************************************************************************
  107 D1:ADE6 -  -  -  -  ;
  108 D1:ADE6 -  -  -  -  ;									Changes and Updates
  109 D1:ADE6 -  -  -  -  ;
  110 D1:ADE6 -  -  -  -  ; ***************************************************************************************
  111 D1:ADE6 -  -  -  -  ;
  112 D1:ADE6 -  -  -  -  ;		Date			Notes
  113 D1:ADE6 -  -  -  -  ;		==== 			=====
  114 D1:ADE6 -  -  -  -  ;
  115 D1:ADE6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:ADE6 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:ADE6 -  -  -  -  ; ***************************************************************************************
    2 D1:ADE6 -  -  -  -  ; ***************************************************************************************
    3 D1:ADE6 -  -  -  -  ;
    4 D1:ADE6 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:ADE6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADE6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADE6 -  -  -  -  ;		Reviewed :	No
    8 D1:ADE6 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:ADE6 -  -  -  -  ;
   10 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   11 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   12 D1:ADE6 -  -  -  -  
   13 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   14 D1:ADE6 -  -  -  -  ;
   15 D1:ADE6 -  -  -  -  ; 								Evaluate an integer term
   16 D1:ADE6 -  -  -  -  ;
   17 D1:ADE6 -  -  -  -  ; ***************************************************************************************
   18 D1:ADE6 -  -  -  -  
   19 D1:ADE6 -  -  -  -  EvaluateIntegerTerm:
   20 D1:ADE6 CD 9B AE D1 		call 	EvaluateTerm
   21 D1:ADEA CD 3F AE D1 		call 	DeReference
   22 D1:ADEE CB 41 -  -  		bit 	CIsString,c
   23 D1:ADF0 C8 -  -  -  		ret 	z
   24 D1:ADF1 C3 37 AC D1 		jp 		TypeMismatch
   25 D1:ADF5 -  -  -  -  
   26 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   27 D1:ADF5 -  -  -  -  ;
   28 D1:ADF5 -  -  -  -  ; 								Evaluate a string term
   29 D1:ADF5 -  -  -  -  ;
   30 D1:ADF5 -  -  -  -  ; ***************************************************************************************
   31 D1:ADF5 -  -  -  -  
   32 D1:ADF5 -  -  -  -  EvaluateStringTerm:
   33 D1:ADF5 CD 9B AE D1 		call 	EvaluateTerm
   34 D1:ADF9 CD 3F AE D1 		call 	DeReference
   35 D1:ADFD CB 41 -  -  		bit 	CIsString,c
   36 D1:ADFF C0 -  -  -  		ret 	nz
   37 D1:AE00 C3 37 AC D1 		jp 		TypeMismatch
   38 D1:AE04 -  -  -  -  
   39 D1:AE04 -  -  -  -  ; ***************************************************************************************
   40 D1:AE04 -  -  -  -  ;
   41 D1:AE04 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AE04 -  -  -  -  ;
   43 D1:AE04 -  -  -  -  ; ***************************************************************************************
   44 D1:AE04 -  -  -  -  
   45 D1:AE04 -  -  -  -  EvaluateValue:
   46 D1:AE04 CD 8D AD D1 		call 	EvaluateAtPrecedence0
   47 D1:AE08 C3 3F AE D1 		jp 		Dereference
   48 D1:AE0C -  -  -  -  
   49 D1:AE0C -  -  -  -  ; ***************************************************************************************
   50 D1:AE0C -  -  -  -  ;
   51 D1:AE0C -  -  -  -  ; 									Evaluate a number
   52 D1:AE0C -  -  -  -  ;
   53 D1:AE0C -  -  -  -  ; ***************************************************************************************
   54 D1:AE0C -  -  -  -  
   55 D1:AE0C -  -  -  -  EvaluateInteger:
   56 D1:AE0C CD 04 AE D1 		call 	EvaluateValue
   57 D1:AE10 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AE12 C8 -  -  -  		ret 	z
   59 D1:AE13 C3 37 AC D1 		jp 		TypeMismatch
   60 D1:AE17 -  -  -  -  
   61 D1:AE17 -  -  -  -  ; ***************************************************************************************
   62 D1:AE17 -  -  -  -  ;
   63 D1:AE17 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AE17 -  -  -  -  ;
   65 D1:AE17 -  -  -  -  ; ***************************************************************************************
   66 D1:AE17 -  -  -  -  
   67 D1:AE17 -  -  -  -  Evaluate8BitInteger:
   68 D1:AE17 CD 0C AE D1 		call 	EvaluateInteger
   69 D1:AE1B D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AE1C 7C -  -  -  		ld 		a,h
   71 D1:AE1D B5 -  -  -  		or 		l
   72 D1:AE1E D9 -  -  -  		exx 	
   73 D1:AE1F B4 -  -  -  		or 		h
   74 D1:AE20 C2 3D AC D1 		jp 		nz,BadValue
   75 D1:AE24 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AE25 C9 -  -  -  		ret
   77 D1:AE26 -  -  -  -  		
   78 D1:AE26 -  -  -  -  ; ***************************************************************************************
   79 D1:AE26 -  -  -  -  ;
   80 D1:AE26 -  -  -  -  ; 									Evaluate a string
   81 D1:AE26 -  -  -  -  ;
   82 D1:AE26 -  -  -  -  ; ***************************************************************************************
   83 D1:AE26 -  -  -  -  
   84 D1:AE26 -  -  -  -  EvaluateStringOnly:
   85 D1:AE26 CD 04 AE D1 		call 	EvaluateValue
   86 D1:AE2A CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AE2C CA 37 AC D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AE30 C9 -  -  -  		ret
   89 D1:AE31 -  -  -  -  
   90 D1:AE31 -  -  -  -  ; ***************************************************************************************
   91 D1:AE31 -  -  -  -  ;
   92 D1:AE31 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AE31 -  -  -  -  ;
   94 D1:AE31 -  -  -  -  ; ***************************************************************************************
   95 D1:AE31 -  -  -  -  
   96 D1:AE31 -  -  -  -  Return8BitConstant:
   97 D1:AE31 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AE35 6F -  -  -  		ld 		l,a
   99 D1:AE36 -  -  -  -  Return16BitConstant:
  100 D1:AE36 D9 -  -  -  		exx 								; clear HL'
  101 D1:AE37 21 00 00 00 		ld 		hl,0
  102 D1:AE3B D9 -  -  -  		exx
  103 D1:AE3C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AE3E C9 -  -  -  		ret
  105 D1:AE3F -  -  -  -  
  106 D1:AE3F -  -  -  -  ; ***************************************************************************************
  107 D1:AE3F -  -  -  -  ;
  108 D1:AE3F -  -  -  -  ;									Changes and Updates
  109 D1:AE3F -  -  -  -  ;
  110 D1:AE3F -  -  -  -  ; ***************************************************************************************
  111 D1:AE3F -  -  -  -  ;
  112 D1:AE3F -  -  -  -  ;		Date			Notes
  113 D1:AE3F -  -  -  -  ;		==== 			=====
  114 D1:AE3F -  -  -  -  ;
  115 D1:AE3F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AE3F -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AE3F -  -  -  -  ; ***************************************************************************************
    2 D1:AE3F -  -  -  -  ; ***************************************************************************************
    3 D1:AE3F -  -  -  -  ;
    4 D1:AE3F -  -  -  -  ;		Name : 		reference.asm
    5 D1:AE3F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE3F -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AE3F -  -  -  -  ;		Reviewed :	No
    8 D1:AE3F -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AE3F -  -  -  -  ;
   10 D1:AE3F -  -  -  -  ; ***************************************************************************************
   11 D1:AE3F -  -  -  -  ; ***************************************************************************************
   12 D1:AE3F -  -  -  -  
   13 D1:AE3F -  -  -  -  ; ***************************************************************************************
   14 D1:AE3F -  -  -  -  ;
   15 D1:AE3F -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AE3F -  -  -  -  ;
   17 D1:AE3F -  -  -  -  ; ***************************************************************************************
   18 D1:AE3F -  -  -  -  
   19 D1:AE3F -  -  -  -  Dereference:
   20 D1:AE3F CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AE41 C8 -  -  -  		ret 	z
   22 D1:AE42 -  -  -  -  
   23 D1:AE42 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AE44 -  -  -  -  		
   25 D1:AE44 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AE46 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AE48 -  -  -  -  
   28 D1:AE48 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AE4A 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AE4C -  -  -  -  
   31 D1:AE4C E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AE4D ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AE4F D9 -  -  -  		exx
   34 D1:AE50 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AE51 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AE52 23 -  -  -  		inc  	hl
   37 D1:AE53 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AE55 D9 -  -  -  		exx 								; fix back
   39 D1:AE56 C9 -  -  -  		ret
   40 D1:AE57 -  -  -  -  
   41 D1:AE57 -  -  -  -  _DeRefByte:		
   42 D1:AE57 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AE58 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AE5C 6F -  -  -  		ld	 	l,a
   45 D1:AE5D D9 -  -  -  		exx
   46 D1:AE5E 21 00 00 00 		ld 		hl,$0000
   47 D1:AE62 D9 -  -  -  		exx
   48 D1:AE63 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AE65 C9 -  -  -  		ret
   50 D1:AE66 -  -  -  -  
   51 D1:AE66 -  -  -  -  _DRInternal:
   52 D1:AE66 3E 05 C3 D9 
              AB D1 -  -  		ERR_DISABLED
   53 D1:AE6C -  -  -  -  
   54 D1:AE6C -  -  -  -  ; ***************************************************************************************
   55 D1:AE6C -  -  -  -  ;
   56 D1:AE6C -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AE6C -  -  -  -  ;
   58 D1:AE6C -  -  -  -  ; ***************************************************************************************
   59 D1:AE6C -  -  -  -  
   60 D1:AE6C -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AE6C -  -  -  -  		#ifdef EZ80
   62 D1:AE6C 22 E7 A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AE70 D9 -  -  -  		exx
   64 D1:AE71 22 E9 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AE75 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AE79 D9 -  -  -  		exx
   67 D1:AE7A 2A E7 A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AE7E -  -  -  -  		#endif
   69 D1:AE7E C9 -  -  -  		ret
   70 D1:AE7F -  -  -  -  
   71 D1:AE7F -  -  -  -  ; ***************************************************************************************
   72 D1:AE7F -  -  -  -  ;
   73 D1:AE7F -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AE7F -  -  -  -  ;
   75 D1:AE7F -  -  -  -  ; ***************************************************************************************
   76 D1:AE7F -  -  -  -  
   77 D1:AE7F -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AE7F -  -  -  -  		#ifdef EZ80
   79 D1:AE7F 22 E7 A8 D1 		ld 		(AConvert),hl
   80 D1:AE83 21 00 00 00 		ld 		hl,$0000
   81 D1:AE87 22 EA A8 D1 		ld 		(AConvert+3),hl
   82 D1:AE8B D9 -  -  -  		exx
   83 D1:AE8C 2A E9 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AE90 D9 -  -  -  		exx
   85 D1:AE91 AF -  -  -  		xor 	a
   86 D1:AE92 32 E9 A8 D1 		ld 		(AConvert+2),a
   87 D1:AE96 2A E7 A8 D1 		ld 		hl,(AConvert)
   88 D1:AE9A -  -  -  -  		#endif
   89 D1:AE9A C9 -  -  -  		ret
   90 D1:AE9B -  -  -  -  
   91 D1:AE9B -  -  -  -  ; ***************************************************************************************
   92 D1:AE9B -  -  -  -  ;
   93 D1:AE9B -  -  -  -  ;									Changes and Updates
   94 D1:AE9B -  -  -  -  ;
   95 D1:AE9B -  -  -  -  ; ***************************************************************************************
   96 D1:AE9B -  -  -  -  ;
   97 D1:AE9B -  -  -  -  ;		Date			Notes
   98 D1:AE9B -  -  -  -  ;		==== 			=====
   99 D1:AE9B -  -  -  -  ;
  100 D1:AE9B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE9B -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AE9B -  -  -  -  ; ***************************************************************************************
    2 D1:AE9B -  -  -  -  ; ***************************************************************************************
    3 D1:AE9B -  -  -  -  ;
    4 D1:AE9B -  -  -  -  ;		Name : 		term.asm
    5 D1:AE9B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE9B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE9B -  -  -  -  ;		Reviewed :	No
    8 D1:AE9B -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AE9B -  -  -  -  ;
   10 D1:AE9B -  -  -  -  ; ***************************************************************************************
   11 D1:AE9B -  -  -  -  ; ***************************************************************************************
   12 D1:AE9B -  -  -  -  
   13 D1:AE9B -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AE9B             		add_hlhl_16
   15 D1:AE9B             		exx
   16 D1:AE9B             		adc_hlhl_16
   17 D1:AE9B             		exx
   18 D1:AE9B             #endmacro
   19 D1:AE9B -  -  -  -  
   20 D1:AE9B -  -  -  -  ; ***************************************************************************************
   21 D1:AE9B -  -  -  -  ;
   22 D1:AE9B -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AE9B -  -  -  -  ;
   24 D1:AE9B -  -  -  -  ; ***************************************************************************************
   25 D1:AE9B -  -  -  -  ;
   26 D1:AE9B -  -  -  -  ; 		Terms can be:
   27 D1:AE9B -  -  -  -  ;
   28 D1:AE9B -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AE9B -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AE9B -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AE9B -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AE9B -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AE9B -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AE9B -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AE9B -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AE9B -  -  -  -  ; 														reference of some sort.
   37 D1:AE9B -  -  -  -  ;
   38 D1:AE9B -  -  -  -  ; ***************************************************************************************
   39 D1:AE9B -  -  -  -  
   40 D1:AE9B -  -  -  -  EvaluateTerm:		
   41 D1:AE9B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AE9D D9 -  -  -  		exx
   43 D1:AE9E 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AEA2 D9 -  -  -  		exx
   45 D1:AEA3 21 00 00 00 		ld 		hl,$0000		
   46 D1:AEA7 -  -  -  -  		;
   47 D1:AEA7 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AEAA FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AEAC 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AEAE DA 66 AF D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AEB2 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AEB4 C2 0A AF D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AEB8 -  -  -  -  		;
   54 D1:AEB8 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AEB8 -  -  -  -  		;
   56 D1:AEB8 -  -  -  -  _ETIntegerConstant:
   57 D1:AEB8 -  -  -  -  		;
   58 D1:AEB8 -  -  -  -  _ETIntegerLoop:		
   59 D1:AEB8 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AEBB E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AEBD B5 -  -  -  		or 		l 							; or into L
   62 D1:AEBE 6F -  -  -  		ld 		l,a
   63 D1:AEBF DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AEC1 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AEC4 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AEC6 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AEC8 D8 -  -  -  		ret 	c
   68 D1:AEC9 -  -  -  -  
   69 D1:AEC9 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AED0 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AED7 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AEDE 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AEE5 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AEEC 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AEF3 -  -  -  -  
   76 D1:AEF3 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AEF5 -  -  -  -  		;
   78 D1:AEF5 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AEF5 -  -  -  -  		;
   80 D1:AEF5 -  -  -  -  _ETStringMarker:		
   81 D1:AEF5 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AEF7 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AEF9 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AEFB E1 -  -  -  		pop 	hl
   85 D1:AEFC 11 00 00 00 		ld 		de,$0000
   86 D1:AF00 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AF03 DD 19 -  -  		add 	ix,de
   88 D1:AF05 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AF07 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AF09 C9 -  -  -  		ret
   91 D1:AF0A -  -  -  -  		;
   92 D1:AF0A -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AF0A -  -  -  -  		;
   94 D1:AF0A -  -  -  -  _ETFoundKeyword:
   95 D1:AF0A DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AF0C FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AF0E 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AF10 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AF12 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AF14 -  -  -  -  		;
  101 D1:AF14 -  -  -  -  		;		Unary group 0
  102 D1:AF14 -  -  -  -  		;
  103 D1:AF14 E6 7F 21 00 
              00 00 6F 29 
              29 11 40 B4 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AF29 C3 E1 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AF2D -  -  -  -  
  106 D1:AF2D -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AF2D FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AF2F 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AF31 -  -  -  -  		;
  110 D1:AF31 -  -  -  -  		; 		- term
  111 D1:AF31 -  -  -  -  		;
  112 D1:AF31 CD E6 AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AF35 CD 7C AD D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AF39 C9 -  -  -  		ret
  115 D1:AF3A -  -  -  -  		;
  116 D1:AF3A -  -  -  -  		;		! ? indirection check
  117 D1:AF3A -  -  -  -  		;
  118 D1:AF3A -  -  -  -  _ETCheckIndirection:	
  119 D1:AF3A FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AF3C 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AF3E FE 83 -  -  		cp 		KWD_PLING
  122 D1:AF40 C2 43 AC D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AF44 -  -  -  -  		;
  124 D1:AF44 -  -  -  -  		; 		! ? indirection
  125 D1:AF44 -  -  -  -  		;
  126 D1:AF44 -  -  -  -  _ETIndirection:
  127 D1:AF44 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AF45 CD 9B AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AF49 CD 3F AE D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AF4D CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AF4F 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AF51 CD 6C AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AF55 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AF56 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AF58 CB F9 -  -  		set 	CIsReference,c
  136 D1:AF5A FE 83 -  -  		cp 		KWD_PLING
  137 D1:AF5C C8 -  -  -  		ret 	z
  138 D1:AF5D CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AF5F C9 -  -  -  		ret
  140 D1:AF60 -  -  -  -  _ETStringIndirect:
  141 D1:AF60 3E 02 C3 D9 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AF66 -  -  -  -  		;
  143 D1:AF66 -  -  -  -  		; 		Found an identifier.
  144 D1:AF66 -  -  -  -  		;
  145 D1:AF66 -  -  -  -  _ETVariable:
  146 D1:AF66 CD D0 B1 D1 		call 	FindVariable 				; find the variable.
  147 D1:AF6A D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AF6B 3E 11 C3 D9 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AF71 -  -  -  -  		
  150 D1:AF71 -  -  -  -  ; ***************************************************************************************
  151 D1:AF71 -  -  -  -  ;
  152 D1:AF71 -  -  -  -  ;									Changes and Updates
  153 D1:AF71 -  -  -  -  ;
  154 D1:AF71 -  -  -  -  ; ***************************************************************************************
  155 D1:AF71 -  -  -  -  ;
  156 D1:AF71 -  -  -  -  ;		Date			Notes
  157 D1:AF71 -  -  -  -  ;		==== 			=====
  158 D1:AF71 -  -  -  -  ;
  159 D1:AF71 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AF71 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AF71 -  -  -  -  ; ***************************************************************************************
    2 D1:AF71 -  -  -  -  ; ***************************************************************************************
    3 D1:AF71 -  -  -  -  ;
    4 D1:AF71 -  -  -  -  ;		Name : 		abs.asm
    5 D1:AF71 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF71 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF71 -  -  -  -  ;		Reviewed :	No
    8 D1:AF71 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AF71 -  -  -  -  ;
   10 D1:AF71 -  -  -  -  ; ***************************************************************************************
   11 D1:AF71 -  -  -  -  ; ***************************************************************************************
   12 D1:AF71 -  -  -  -  
   13 D1:AF71 -  -  -  -  ; ***************************************************************************************
   14 D1:AF71 -  -  -  -  ;
   15 D1:AF71 -  -  -  -  ;								abs( unary function
   16 D1:AF71 -  -  -  -  ;
   17 D1:AF71 -  -  -  -  ; ***************************************************************************************
   18 D1:AF71 -  -  -  -  
   19 D1:AF71 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AF71 CD E6 AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AF75 D9 -  -  -  		exx 								; test MSB
   22 D1:AF76 CB 7C -  -  		bit 	7,h
   23 D1:AF78 D9 -  -  -  		exx
   24 D1:AF79 C4 7C AD D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AF7D C9 -  -  -  		ret
   26 D1:AF7E -  -  -  -  
   27 D1:AF7E -  -  -  -  ; ***************************************************************************************
   28 D1:AF7E -  -  -  -  ;
   29 D1:AF7E -  -  -  -  ;									Changes and Updates
   30 D1:AF7E -  -  -  -  ;
   31 D1:AF7E -  -  -  -  ; ***************************************************************************************
   32 D1:AF7E -  -  -  -  ;
   33 D1:AF7E -  -  -  -  ;		Date			Notes
   34 D1:AF7E -  -  -  -  ;		==== 			=====
   35 D1:AF7E -  -  -  -  ;
   36 D1:AF7E -  -  -  -  ; ***************************************************************************************
   37 D1:AF7E -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AF7E -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AF7E -  -  -  -  ; ***************************************************************************************
    2 D1:AF7E -  -  -  -  ; ***************************************************************************************
    3 D1:AF7E -  -  -  -  ;
    4 D1:AF7E -  -  -  -  ;		Name : 		asc.asm
    5 D1:AF7E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF7E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF7E -  -  -  -  ;		Reviewed :	No
    8 D1:AF7E -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AF7E -  -  -  -  ;
   10 D1:AF7E -  -  -  -  ; ***************************************************************************************
   11 D1:AF7E -  -  -  -  ; ***************************************************************************************
   12 D1:AF7E -  -  -  -  
   13 D1:AF7E -  -  -  -  ; ***************************************************************************************
   14 D1:AF7E -  -  -  -  ;
   15 D1:AF7E -  -  -  -  ;								Asc unary function
   16 D1:AF7E -  -  -  -  ;
   17 D1:AF7E -  -  -  -  ; ***************************************************************************************
   18 D1:AF7E -  -  -  -  
   19 D1:AF7E -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AF7E CD F5 AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AF82 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AF83 C3 31 AE D1 		jp 		Return8BitConstant
   23 D1:AF87 -  -  -  -  
   24 D1:AF87 -  -  -  -  ; ***************************************************************************************
   25 D1:AF87 -  -  -  -  ;
   26 D1:AF87 -  -  -  -  ;									Changes and Updates
   27 D1:AF87 -  -  -  -  ;
   28 D1:AF87 -  -  -  -  ; ***************************************************************************************
   29 D1:AF87 -  -  -  -  ;
   30 D1:AF87 -  -  -  -  ;		Date			Notes
   31 D1:AF87 -  -  -  -  ;		==== 			=====
   32 D1:AF87 -  -  -  -  ;
   33 D1:AF87 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AF87 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AF87 -  -  -  -  ; ***************************************************************************************
    2 D1:AF87 -  -  -  -  ; ***************************************************************************************
    3 D1:AF87 -  -  -  -  ;
    4 D1:AF87 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AF87 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF87 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF87 -  -  -  -  ;		Reviewed :	No
    8 D1:AF87 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AF87 -  -  -  -  ;
   10 D1:AF87 -  -  -  -  ; ***************************************************************************************
   11 D1:AF87 -  -  -  -  ; ***************************************************************************************
   12 D1:AF87 -  -  -  -  
   13 D1:AF87 -  -  -  -  ; ***************************************************************************************
   14 D1:AF87 -  -  -  -  ;
   15 D1:AF87 -  -  -  -  ;								Chr$() unary function
   16 D1:AF87 -  -  -  -  ;
   17 D1:AF87 -  -  -  -  ; ***************************************************************************************
   18 D1:AF87 -  -  -  -  
   19 D1:AF87 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AF87 CD B1 AB D1 		call 	CheckDollar
   21 D1:AF8B CD E6 AD D1 		call 	EvaluateIntegerTerm
   22 D1:AF8F 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AF90 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AF92 21 1C A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AF96 36 0D -  -  		ld 		(hl),13
   26 D1:AF98 2B -  -  -  		dec 	hl
   27 D1:AF99 77 -  -  -  		ld 		(hl),a
   28 D1:AF9A C9 -  -  -  		ret
   29 D1:AF9B -  -  -  -  
   30 D1:AF9B -  -  -  -  ; ***************************************************************************************
   31 D1:AF9B -  -  -  -  ;
   32 D1:AF9B -  -  -  -  ;									Changes and Updates
   33 D1:AF9B -  -  -  -  ;
   34 D1:AF9B -  -  -  -  ; ***************************************************************************************
   35 D1:AF9B -  -  -  -  ;
   36 D1:AF9B -  -  -  -  ;		Date			Notes
   37 D1:AF9B -  -  -  -  ;		==== 			=====
   38 D1:AF9B -  -  -  -  ;
   39 D1:AF9B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF9B -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AF9B -  -  -  -  ; ***************************************************************************************
    2 D1:AF9B -  -  -  -  ; ***************************************************************************************
    3 D1:AF9B -  -  -  -  ;
    4 D1:AF9B -  -  -  -  ;		Name : 		len.asm
    5 D1:AF9B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF9B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF9B -  -  -  -  ;		Reviewed :	None
    8 D1:AF9B -  -  -  -  ;		Purpose :	String Length
    9 D1:AF9B -  -  -  -  ;
   10 D1:AF9B -  -  -  -  ; ***************************************************************************************
   11 D1:AF9B -  -  -  -  ; ***************************************************************************************
   12 D1:AF9B -  -  -  -  
   13 D1:AF9B -  -  -  -  ; ***************************************************************************************
   14 D1:AF9B -  -  -  -  ;
   15 D1:AF9B -  -  -  -  ;								Len unary function
   16 D1:AF9B -  -  -  -  ;
   17 D1:AF9B -  -  -  -  ; ***************************************************************************************
   18 D1:AF9B -  -  -  -  
   19 D1:AF9B -  -  -  -  Unary_Len:	;; [len]
   20 D1:AF9B CD F5 AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AF9F EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AFA0 CD E4 AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AFA4 -  -  -  -  _ULCount:
   24 D1:AFA4 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AFA5 FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AFA7 D8 -  -  -  		ret 	c
   27 D1:AFA8 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AFA9 13 -  -  -  		inc 	de
   29 D1:AFAA 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AFAC -  -  -  -  
   31 D1:AFAC -  -  -  -  ; ***************************************************************************************
   32 D1:AFAC -  -  -  -  ;
   33 D1:AFAC -  -  -  -  ;									Changes and Updates
   34 D1:AFAC -  -  -  -  ;
   35 D1:AFAC -  -  -  -  ; ***************************************************************************************
   36 D1:AFAC -  -  -  -  ;
   37 D1:AFAC -  -  -  -  ;		Date			Notes
   38 D1:AFAC -  -  -  -  ;		==== 			=====
   39 D1:AFAC -  -  -  -  ;
   40 D1:AFAC -  -  -  -  ; ***************************************************************************************
   41 D1:AFAC -  -  -  -  		
Listing for file "_build.asm"
   38 D1:AFAC -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AFAC -  -  -  -  ; ***************************************************************************************
    2 D1:AFAC -  -  -  -  ; ***************************************************************************************
    3 D1:AFAC -  -  -  -  ;
    4 D1:AFAC -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AFAC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFAC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFAC -  -  -  -  ;		Reviewed :	No
    8 D1:AFAC -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AFAC -  -  -  -  ;
   10 D1:AFAC -  -  -  -  ; ***************************************************************************************
   11 D1:AFAC -  -  -  -  ; ***************************************************************************************
   12 D1:AFAC -  -  -  -  
   13 D1:AFAC -  -  -  -  ; ***************************************************************************************
   14 D1:AFAC -  -  -  -  ;
   15 D1:AFAC -  -  -  -  ;								Str$() unary function
   16 D1:AFAC -  -  -  -  ;
   17 D1:AFAC -  -  -  -  ; ***************************************************************************************
   18 D1:AFAC -  -  -  -  
   19 D1:AFAC -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AFAC CD E6 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AFB0 CD 6C AE D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AFB4 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AFB6 C9 -  -  -  		ret
   24 D1:AFB7 -  -  -  -  
   25 D1:AFB7 -  -  -  -  ; ***************************************************************************************
   26 D1:AFB7 -  -  -  -  ;
   27 D1:AFB7 -  -  -  -  ;									Changes and Updates
   28 D1:AFB7 -  -  -  -  ;
   29 D1:AFB7 -  -  -  -  ; ***************************************************************************************
   30 D1:AFB7 -  -  -  -  ;
   31 D1:AFB7 -  -  -  -  ;		Date			Notes
   32 D1:AFB7 -  -  -  -  ;		==== 			=====
   33 D1:AFB7 -  -  -  -  ;
   34 D1:AFB7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AFB7 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AFB7 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB7 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB7 -  -  -  -  ;
    4 D1:AFB7 -  -  -  -  ;		Name : 		not.asm
    5 D1:AFB7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB7 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AFB7 -  -  -  -  ;		Reviewed :	No
    8 D1:AFB7 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AFB7 -  -  -  -  ;
   10 D1:AFB7 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB7 -  -  -  -  ; ***************************************************************************************
   12 D1:AFB7 -  -  -  -  
   13 D1:AFB7 -  -  -  -  ; ***************************************************************************************
   14 D1:AFB7 -  -  -  -  ;
   15 D1:AFB7 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AFB7 -  -  -  -  ;
   17 D1:AFB7 -  -  -  -  ; ***************************************************************************************
   18 D1:AFB7 -  -  -  -  
   19 D1:AFB7 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AFB7 CD E6 AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AFBB CD C4 AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AFBF CD C4 AF D1 		call 	__UNSwap		
   23 D1:AFC3 C9 -  -  -  		ret
   24 D1:AFC4 -  -  -  -  
   25 D1:AFC4 -  -  -  -  __UNSwap:
   26 D1:AFC4 7C -  -  -  		ld 		a,h
   27 D1:AFC5 2F -  -  -  		cpl
   28 D1:AFC6 67 -  -  -  		ld 		h,a
   29 D1:AFC7 7D -  -  -  		ld 		a,l
   30 D1:AFC8 2F -  -  -  		cpl 	
   31 D1:AFC9 6F -  -  -  		ld 		l,a
   32 D1:AFCA D9 -  -  -  		exx
   33 D1:AFCB C9 -  -  -  		ret
   34 D1:AFCC -  -  -  -  
   35 D1:AFCC -  -  -  -  ; ***************************************************************************************
   36 D1:AFCC -  -  -  -  ;
   37 D1:AFCC -  -  -  -  ;									Changes and Updates
   38 D1:AFCC -  -  -  -  ;
   39 D1:AFCC -  -  -  -  ; ***************************************************************************************
   40 D1:AFCC -  -  -  -  ;
   41 D1:AFCC -  -  -  -  ;		Date			Notes
   42 D1:AFCC -  -  -  -  ;		==== 			=====
   43 D1:AFCC -  -  -  -  ;
   44 D1:AFCC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AFCC -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AFCC -  -  -  -  ; ***************************************************************************************
    2 D1:AFCC -  -  -  -  ; ***************************************************************************************
    3 D1:AFCC -  -  -  -  ;
    4 D1:AFCC -  -  -  -  ;		Name : 		page.asm
    5 D1:AFCC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFCC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFCC -  -  -  -  ;		Reviewed :	No
    8 D1:AFCC -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AFCC -  -  -  -  ;
   10 D1:AFCC -  -  -  -  ; ***************************************************************************************
   11 D1:AFCC -  -  -  -  ; ***************************************************************************************
   12 D1:AFCC -  -  -  -  
   13 D1:AFCC -  -  -  -  ; ***************************************************************************************
   14 D1:AFCC -  -  -  -  ;
   15 D1:AFCC -  -  -  -  ;							page unary function (no bracket)
   16 D1:AFCC -  -  -  -  ;
   17 D1:AFCC -  -  -  -  ; ***************************************************************************************
   18 D1:AFCC -  -  -  -  
   19 D1:AFCC -  -  -  -  Unary_Page:	;; [page]
   20 D1:AFCC 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AFD0 D9 -  -  -  			exx
   22 D1:AFD1 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AFD5 D9 -  -  -  			exx
   24 D1:AFD6 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AFD8 C9 -  -  -  			ret
   26 D1:AFD9 -  -  -  -  
   27 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   28 D1:AFD9 -  -  -  -  ;
   29 D1:AFD9 -  -  -  -  ;									Changes and Updates
   30 D1:AFD9 -  -  -  -  ;
   31 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   32 D1:AFD9 -  -  -  -  ;
   33 D1:AFD9 -  -  -  -  ;		Date			Notes
   34 D1:AFD9 -  -  -  -  ;		==== 			=====
   35 D1:AFD9 -  -  -  -  ;
   36 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   37 D1:AFD9 -  -  -  -  			
Listing for file "_build.asm"
   41 D1:AFD9 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AFD9 -  -  -  -  ; ***************************************************************************************
    2 D1:AFD9 -  -  -  -  ; ***************************************************************************************
    3 D1:AFD9 -  -  -  -  ;
    4 D1:AFD9 -  -  -  -  ;		Name : 		random.asm
    5 D1:AFD9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFD9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFD9 -  -  -  -  ;		Reviewed :	No
    8 D1:AFD9 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AFD9 -  -  -  -  ;
   10 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   11 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   12 D1:AFD9 -  -  -  -  
   13 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   14 D1:AFD9 -  -  -  -  ;
   15 D1:AFD9 -  -  -  -  ;								Random unary function
   16 D1:AFD9 -  -  -  -  ;
   17 D1:AFD9 -  -  -  -  ; ***************************************************************************************
   18 D1:AFD9 -  -  -  -  
   19 D1:AFD9 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AFD9 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AFE1 CD E6 AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AFE5 D9 -  -  -  		exx 								; is it -ve
   23 D1:AFE6 CB 7C -  -  		bit 	7,h
   24 D1:AFE8 D9 -  -  -  		exx
   25 D1:AFE9 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AFEB 22 ED A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AFEF D9 -  -  -  		exx
   28 D1:AFF0 22 F1 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AFF4 D9 -  -  -  		exx
   30 D1:AFF5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AFF7 C9 -  -  -  		ret
   32 D1:AFF8 -  -  -  -  _URDontSeed:		
   33 D1:AFF8 -  -  -  -  
   34 D1:AFF8 CD EF B6 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AFFC 28 1C -  -  		jr 		z,_URFail
   36 D1:AFFE E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AFFF D9 -  -  -  		exx
   38 D1:B000 E5 -  -  -  		push 	hl
   39 D1:B001 D9 -  -  -  		exx
   40 D1:B002 -  -  -  -  		;
   41 D1:B002 CD 2B B0 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:B006 D9 -  -  -  		exx
   43 D1:B007 CD 2B B0 D1 		call 	URandomHL
   44 D1:B00B CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:B00D D9 -  -  -  		exx
   46 D1:B00E -  -  -  -  		;
   47 D1:B00E D9 -  -  -  		exx 								; restore range.
   48 D1:B00F D1 -  -  -  		pop 	de
   49 D1:B010 D9 -  -  -  		exx
   50 D1:B011 D1 -  -  -  		pop 	de
   51 D1:B012 -  -  -  -  		;
   52 D1:B012 CD 80 B5 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B016 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B017 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B019 C9 -  -  -  		ret
   56 D1:B01A -  -  -  -  _URFail:
   57 D1:B01A 3E 03 C3 D9 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:B020 -  -  -  -  ; ***************************************************************************************
   59 D1:B020 -  -  -  -  ;
   60 D1:B020 -  -  -  -  ; 									Push RNG off zero
   61 D1:B020 -  -  -  -  ;
   62 D1:B020 -  -  -  -  ; ***************************************************************************************
   63 D1:B020 -  -  -  -  
   64 D1:B020 -  -  -  -  UnaryRandomInitialise:
   65 D1:B020 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B022 -  -  -  -  _URILoop:
   67 D1:B022 C5 -  -  -  		push 	bc
   68 D1:B023 CD 2B B0 D1 		call 	URandomHL
   69 D1:B027 C1 -  -  -  		pop 	bc
   70 D1:B028 10 F8 -  -  		djnz 	_URILoop
   71 D1:B02A C9 -  -  -  		ret
   72 D1:B02B -  -  -  -  
   73 D1:B02B -  -  -  -  ; ***************************************************************************************
   74 D1:B02B -  -  -  -  ;
   75 D1:B02B -  -  -  -  ;							16 bit random number generator
   76 D1:B02B -  -  -  -  ;
   77 D1:B02B -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B02B -  -  -  -  ;		Actual author unspecified.
   79 D1:B02B -  -  -  -  ;
   80 D1:B02B -  -  -  -  ; ***************************************************************************************
   81 D1:B02B -  -  -  -  
   82 D1:B02B -  -  -  -  URandomHL:
   83 D1:B02B 2A ED A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B02F ED 5B F1 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B034 44 -  -  -  	    ld 		b,h
   86 D1:B035 4D -  -  -  	    ld 		c,l
   87 D1:B036 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B03B 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B040 2C -  -  -  	    inc 	l
   90 D1:B041 09 -  -  -  	    add 	hl,bc
   91 D1:B042 22 ED A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B046 2A F1 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B04A ED 5A -  -  	    adc 	hl,de
   94 D1:B04C 22 F1 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B050 EB -  -  -  	    ex 		de,hl
   96 D1:B051 2A F5 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B055 ED 4B F9 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B05A 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B05F ED 43 F9 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B064 9F -  -  -  	    sbc 	a,a
  101 D1:B065 E6 C5 -  -  	    and 	%11000101
  102 D1:B067 AD -  -  -  	    xor 	l
  103 D1:B068 6F -  -  -  	    ld 		l,a
  104 D1:B069 22 F5 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B06D EB -  -  -  	    ex 		de,hl
  106 D1:B06E 09 -  -  -  	    add 	hl,bc
  107 D1:B06F C9 -  -  -  	    ret		
  108 D1:B070 -  -  -  -  
  109 D1:B070 -  -  -  -  ; ***************************************************************************************
  110 D1:B070 -  -  -  -  ;
  111 D1:B070 -  -  -  -  ;									Changes and Updates
  112 D1:B070 -  -  -  -  ;
  113 D1:B070 -  -  -  -  ; ***************************************************************************************
  114 D1:B070 -  -  -  -  ;
  115 D1:B070 -  -  -  -  ;		Date			Notes
  116 D1:B070 -  -  -  -  ;		==== 			=====
  117 D1:B070 -  -  -  -  ;
  118 D1:B070 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:B070 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B070 -  -  -  -  ; ***************************************************************************************
    2 D1:B070 -  -  -  -  ; ***************************************************************************************
    3 D1:B070 -  -  -  -  ;
    4 D1:B070 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B070 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B070 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B070 -  -  -  -  ;		Reviewed :	No
    8 D1:B070 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B070 -  -  -  -  ;
   10 D1:B070 -  -  -  -  ; ***************************************************************************************
   11 D1:B070 -  -  -  -  ; ***************************************************************************************
   12 D1:B070 -  -  -  -  
   13 D1:B070 -  -  -  -  ; ***************************************************************************************
   14 D1:B070 -  -  -  -  ;
   15 D1:B070 -  -  -  -  ;								sgn unary function
   16 D1:B070 -  -  -  -  ;
   17 D1:B070 -  -  -  -  ; ***************************************************************************************
   18 D1:B070 -  -  -  -  
   19 D1:B070 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B070 CD E6 AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B074 CD EF B6 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B078 CA E4 AC D1 		jp 		z,UnaryInt32False
   23 D1:B07C D9 -  -  -  		exx
   24 D1:B07D CB 7C -  -  		bit 	7,h
   25 D1:B07F D9 -  -  -  		exx
   26 D1:B080 C2 E0 AC D1 		jp 		nz,UnaryInt32True
   27 D1:B084 3E 01 -  -  		ld 		a,1
   28 D1:B086 C3 31 AE D1 		jp 		Return8BitConstant
   29 D1:B08A -  -  -  -  
   30 D1:B08A -  -  -  -  ; ***************************************************************************************
   31 D1:B08A -  -  -  -  ;
   32 D1:B08A -  -  -  -  ;									Changes and Updates
   33 D1:B08A -  -  -  -  ;
   34 D1:B08A -  -  -  -  ; ***************************************************************************************
   35 D1:B08A -  -  -  -  ;
   36 D1:B08A -  -  -  -  ;		Date			Notes
   37 D1:B08A -  -  -  -  ;		==== 			=====
   38 D1:B08A -  -  -  -  ;
   39 D1:B08A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B08A -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B08A -  -  -  -  ; ***************************************************************************************
    2 D1:B08A -  -  -  -  ; ***************************************************************************************
    3 D1:B08A -  -  -  -  ;
    4 D1:B08A -  -  -  -  ;		Name : 		simple.asm
    5 D1:B08A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B08A -  -  -  -  ;		Reviewed :	No
    8 D1:B08A -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B08A -  -  -  -  ;
   10 D1:B08A -  -  -  -  ; ***************************************************************************************
   11 D1:B08A -  -  -  -  ; ***************************************************************************************
   12 D1:B08A -  -  -  -  
   13 D1:B08A -  -  -  -  ; ***************************************************************************************
   14 D1:B08A -  -  -  -  ;
   15 D1:B08A -  -  -  -  ;								( unary function (think about it)
   16 D1:B08A -  -  -  -  ;
   17 D1:B08A -  -  -  -  ; ***************************************************************************************
   18 D1:B08A -  -  -  -  
   19 D1:B08A -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B08A CD 8D AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B08E C3 A3 AB D1 		jp  	CheckRightBracket
   22 D1:B092 -  -  -  -  
   23 D1:B092 -  -  -  -  ; ***************************************************************************************
   24 D1:B092 -  -  -  -  ;
   25 D1:B092 -  -  -  -  ;									Handle &x
   26 D1:B092 -  -  -  -  ;
   27 D1:B092 -  -  -  -  ; ***************************************************************************************
   28 D1:B092 -  -  -  -  
   29 D1:B092 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B092 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B095 E6 C0 -  -  		and 		$C0
   32 D1:B097 FE 40 -  -  		cp 			$40
   33 D1:B099 C2 43 AC D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B09D C3 9B AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B0A1 -  -  -  -  
   36 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   37 D1:B0A1 -  -  -  -  ;
   38 D1:B0A1 -  -  -  -  ;									Changes and Updates
   39 D1:B0A1 -  -  -  -  ;
   40 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   41 D1:B0A1 -  -  -  -  ;
   42 D1:B0A1 -  -  -  -  ;		Date			Notes
   43 D1:B0A1 -  -  -  -  ;		==== 			=====
   44 D1:B0A1 -  -  -  -  ;
   45 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   46 D1:B0A1 -  -  -  -  		
Listing for file "_build.asm"
   44 D1:B0A1 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B0A1 -  -  -  -  ; ***************************************************************************************
    2 D1:B0A1 -  -  -  -  ; ***************************************************************************************
    3 D1:B0A1 -  -  -  -  ;
    4 D1:B0A1 -  -  -  -  ;		Name : 		str.asm
    5 D1:B0A1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0A1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0A1 -  -  -  -  ;		Reviewed :	No
    8 D1:B0A1 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B0A1 -  -  -  -  ;
   10 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   11 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   12 D1:B0A1 -  -  -  -  
   13 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   14 D1:B0A1 -  -  -  -  ;
   15 D1:B0A1 -  -  -  -  ;								Str$() unary function
   16 D1:B0A1 -  -  -  -  ;
   17 D1:B0A1 -  -  -  -  ; ***************************************************************************************
   18 D1:B0A1 -  -  -  -  
   19 D1:B0A1 -  -  -  -  Unary_Str:	;; [str]
   20 D1:B0A1 CD B1 AB D1 		call 	CheckDollar
   21 D1:B0A5 DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B0A8 EE AC -  -  		xor		KWD_TILDE
   23 D1:B0AA F5 -  -  -  		push 	af
   24 D1:B0AB 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B0AD DD 23 -  -  		inc 	ix
   26 D1:B0AF -  -  -  -  _USNotHex:		
   27 D1:B0AF CD E6 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B0B3 01 0B A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B0B7 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B0B8 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B0BA 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B0BC 3E 10 -  -  		ld 		a,16
   33 D1:B0BE -  -  -  -  _USNotHex2:		
   34 D1:B0BE CD 37 B7 D1 		call 	Int32ToString 				
   35 D1:B0C2 21 0B A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B0C6 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B0C8 C9 -  -  -  		ret
   38 D1:B0C9 -  -  -  -  
   39 D1:B0C9 -  -  -  -  ; ***************************************************************************************
   40 D1:B0C9 -  -  -  -  ;
   41 D1:B0C9 -  -  -  -  ;									Changes and Updates
   42 D1:B0C9 -  -  -  -  ;
   43 D1:B0C9 -  -  -  -  ; ***************************************************************************************
   44 D1:B0C9 -  -  -  -  ;
   45 D1:B0C9 -  -  -  -  ;		Date			Notes
   46 D1:B0C9 -  -  -  -  ;		==== 			=====
   47 D1:B0C9 -  -  -  -  ;
   48 D1:B0C9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:B0C9 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B0C9 -  -  -  -  ; ***************************************************************************************
    2 D1:B0C9 -  -  -  -  ; ***************************************************************************************
    3 D1:B0C9 -  -  -  -  ;
    4 D1:B0C9 -  -  -  -  ;		Name : 		time.asm
    5 D1:B0C9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0C9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0C9 -  -  -  -  ;		Reviewed :	No
    8 D1:B0C9 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B0C9 -  -  -  -  ;
   10 D1:B0C9 -  -  -  -  ; ***************************************************************************************
   11 D1:B0C9 -  -  -  -  ; ***************************************************************************************
   12 D1:B0C9 -  -  -  -  
   13 D1:B0C9 -  -  -  -  ; ***************************************************************************************
   14 D1:B0C9 -  -  -  -  ;
   15 D1:B0C9 -  -  -  -  ;							Get system time in ms
   16 D1:B0C9 -  -  -  -  ;
   17 D1:B0C9 -  -  -  -  ; ***************************************************************************************
   18 D1:B0C9 -  -  -  -  
   19 D1:B0C9 -  -  -  -  Unary_Time:	;; [time]
   20 D1:B0C9 CD FA B7 D1 			call 	SYSGetTimer
   21 D1:B0CD 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B0CF C9 -  -  -  			ret
   23 D1:B0D0 -  -  -  -  
   24 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   25 D1:B0D0 -  -  -  -  ;
   26 D1:B0D0 -  -  -  -  ;									Changes and Updates
   27 D1:B0D0 -  -  -  -  ;
   28 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   29 D1:B0D0 -  -  -  -  ;
   30 D1:B0D0 -  -  -  -  ;		Date			Notes
   31 D1:B0D0 -  -  -  -  ;		==== 			=====
   32 D1:B0D0 -  -  -  -  ;
   33 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   34 D1:B0D0 -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B0D0 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B0D0 -  -  -  -  ; ***************************************************************************************
    2 D1:B0D0 -  -  -  -  ; ***************************************************************************************
    3 D1:B0D0 -  -  -  -  ;
    4 D1:B0D0 -  -  -  -  ;		Name : 		top.asm
    5 D1:B0D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0D0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0D0 -  -  -  -  ;		Reviewed :	No
    8 D1:B0D0 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B0D0 -  -  -  -  ;
   10 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   11 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   12 D1:B0D0 -  -  -  -  
   13 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   14 D1:B0D0 -  -  -  -  ;
   15 D1:B0D0 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B0D0 -  -  -  -  ;
   17 D1:B0D0 -  -  -  -  ; ***************************************************************************************
   18 D1:B0D0 -  -  -  -  
   19 D1:B0D0 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B0D0 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B0D4 D9 -  -  -  			exx
   22 D1:B0D5 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B0D9 D9 -  -  -  			exx
   24 D1:B0DA 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B0DC C9 -  -  -  			ret
   26 D1:B0DD -  -  -  -  
   27 D1:B0DD -  -  -  -  ; ***************************************************************************************
   28 D1:B0DD -  -  -  -  ;
   29 D1:B0DD -  -  -  -  ;									Changes and Updates
   30 D1:B0DD -  -  -  -  ;
   31 D1:B0DD -  -  -  -  ; ***************************************************************************************
   32 D1:B0DD -  -  -  -  ;
   33 D1:B0DD -  -  -  -  ;		Date			Notes
   34 D1:B0DD -  -  -  -  ;		==== 			=====
   35 D1:B0DD -  -  -  -  ;
   36 D1:B0DD -  -  -  -  ; ***************************************************************************************
   37 D1:B0DD -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B0DD -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B0DD -  -  -  -  ; ***************************************************************************************
    2 D1:B0DD -  -  -  -  ; ***************************************************************************************
    3 D1:B0DD -  -  -  -  ;
    4 D1:B0DD -  -  -  -  ;		Name : 		val.asm
    5 D1:B0DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0DD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0DD -  -  -  -  ;		Reviewed :	No
    8 D1:B0DD -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B0DD -  -  -  -  ;
   10 D1:B0DD -  -  -  -  ; ***************************************************************************************
   11 D1:B0DD -  -  -  -  ; ***************************************************************************************
   12 D1:B0DD -  -  -  -  
   13 D1:B0DD -  -  -  -  ; ***************************************************************************************
   14 D1:B0DD -  -  -  -  ;
   15 D1:B0DD -  -  -  -  ;								val( unary function
   16 D1:B0DD -  -  -  -  ;
   17 D1:B0DD -  -  -  -  ; ***************************************************************************************
   18 D1:B0DD -  -  -  -  
   19 D1:B0DD -  -  -  -  Unary_Val:	;; [val]
   20 D1:B0DD CD F5 AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B0E1 E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B0E2 C1 -  -  -  		pop 	bc
   23 D1:B0E3 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B0E5 CD 15 B6 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B0E9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B0EB C8 -  -  -  		ret		z 							; okay
   27 D1:B0EC 3E 03 C3 D9 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B0F2 -  -  -  -  
   29 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   30 D1:B0F2 -  -  -  -  ;
   31 D1:B0F2 -  -  -  -  ;									Changes and Updates
   32 D1:B0F2 -  -  -  -  ;
   33 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   34 D1:B0F2 -  -  -  -  ;
   35 D1:B0F2 -  -  -  -  ;		Date			Notes
   36 D1:B0F2 -  -  -  -  ;		==== 			=====
   37 D1:B0F2 -  -  -  -  ;
   38 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   39 D1:B0F2 -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B0F2 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B0F2 -  -  -  -  ; ***************************************************************************************
    2 D1:B0F2 -  -  -  -  ; ***************************************************************************************
    3 D1:B0F2 -  -  -  -  ;
    4 D1:B0F2 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B0F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0F2 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B0F2 -  -  -  -  ;		Reviewed :	No
    8 D1:B0F2 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B0F2 -  -  -  -  ;
   10 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   11 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   12 D1:B0F2 -  -  -  -  
   13 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   14 D1:B0F2 -  -  -  -  ;
   15 D1:B0F2 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B0F2 -  -  -  -  ;
   17 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   18 D1:B0F2 -  -  -  -  
   19 D1:B0F2 -  -  -  -  AllocateBytes:
   20 D1:B0F2 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B0F3 21 00 00 00 		ld 		hl,$000000
   22 D1:B0F7 62 -  -  -  		ld 		h,d
   23 D1:B0F8 6B -  -  -  		ld 		l,e
   24 D1:B0F9 -  -  -  -  		;
   25 D1:B0F9 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 D1:B0FE D5 -  -  -  		push 	de 							; save on stack
   27 D1:B0FF 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 D1:B100 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   29 D1:B104 -  -  -  -  		;
   30 D1:B104 EB -  -  -  		ex 		de,hl 						; put in DE
   31 D1:B105 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 D1:B109 AF -  -  -  		xor 	a
   33 D1:B10A ED 52 -  -  		sbc 	hl,de
   34 D1:B10C E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 D1:B10D D0 -  -  -  		ret 	nc 							; return if high >= low
   36 D1:B10E 3E 08 C3 D9 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 D1:B114 -  -  -  -  
   38 D1:B114 -  -  -  -  ; ***************************************************************************************
   39 D1:B114 -  -  -  -  ;
   40 D1:B114 -  -  -  -  ;									Changes and Updates
   41 D1:B114 -  -  -  -  ;
   42 D1:B114 -  -  -  -  ; ***************************************************************************************
   43 D1:B114 -  -  -  -  ;
   44 D1:B114 -  -  -  -  ;		Date			Notes
   45 D1:B114 -  -  -  -  ;		==== 			=====
   46 D1:B114 -  -  -  -  ;
   47 D1:B114 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B114 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B114 -  -  -  -  ; ***************************************************************************************
    2 D1:B114 -  -  -  -  ; ***************************************************************************************
    3 D1:B114 -  -  -  -  ;
    4 D1:B114 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B114 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B114 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B114 -  -  -  -  ;		Reviewed :	No
    8 D1:B114 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B114 -  -  -  -  ;
   10 D1:B114 -  -  -  -  ; ***************************************************************************************
   11 D1:B114 -  -  -  -  ; ***************************************************************************************
   12 D1:B114 -  -  -  -  
   13 D1:B114 -  -  -  -  ; ***************************************************************************************
   14 D1:B114 -  -  -  -  ;
   15 D1:B114 -  -  -  -  ;										CLEAR command
   16 D1:B114 -  -  -  -  ;
   17 D1:B114 -  -  -  -  ; ***************************************************************************************
   18 D1:B114 -  -  -  -  
   19 D1:B114 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B114 -  -  -  -  		;
   21 D1:B114 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B114 -  -  -  -  		;
   23 D1:B114 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B118 -  -  -  -  _CCFindLow:
   25 D1:B118 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B11C 5E -  -  -  		ld 		e,(hl)		
   27 D1:B11D 19 -  -  -  		add 	hl,de
   28 D1:B11E 7B -  -  -  		ld 		a,e
   29 D1:B11F B7 -  -  -  		or 		a
   30 D1:B120 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B122 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B123 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B127 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B128 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B12C -  -  -  -  		;
   36 D1:B12C -  -  -  -  		; 	 		Reset the language stack
   37 D1:B12C -  -  -  -  		;
   38 D1:B12C 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B130 -  -  -  -  		;
   40 D1:B130 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B132 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B136 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B13A 19 -  -  -  		add 	hl,de
   44 D1:B13B 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B13D 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B141 -  -  -  -  		;
   47 D1:B141 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B145 19 -  -  -  		add 	hl,de
   49 D1:B146 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B14A -  -  -  -  		;
   51 D1:B14A -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 D1:B14A -  -  -  -  		;
   53 D1:B14A 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 D1:B14E -  -  -  -  _CCFClearHT:
   55 D1:B14E 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 D1:B14F 36 00 -  -  		ld 		(hl),0
   57 D1:B151 1B -  -  -  		dec 	de
   58 D1:B152 7A -  -  -  		ld 		a,d
   59 D1:B153 B3 -  -  -  		or 		e
   60 D1:B154 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 D1:B156 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   62 D1:B15A -  -  -  -  		;
   63 D1:B15A -  -  -  -  		; 		Save highest byte that can be allocate
   64 D1:B15A -  -  -  -  		;
   65 D1:B15A 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   66 D1:B15E -  -  -  -  		;
   67 D1:B15E -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 D1:B15E -  -  -  -  		;
   69 D1:B15E CD 20 B0 D1 		call 	UnaryRandomInitialise
   70 D1:B162 C9 -  -  -  		ret
   71 D1:B163 -  -  -  -  
   72 D1:B163 -  -  -  -  ; ***************************************************************************************
   73 D1:B163 -  -  -  -  ;
   74 D1:B163 -  -  -  -  ;									Changes and Updates
   75 D1:B163 -  -  -  -  ;
   76 D1:B163 -  -  -  -  ; ***************************************************************************************
   77 D1:B163 -  -  -  -  ;
   78 D1:B163 -  -  -  -  ;		Date			Notes
   79 D1:B163 -  -  -  -  ;		==== 			=====
   80 D1:B163 -  -  -  -  ;
   81 D1:B163 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B163 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B163 -  -  -  -  ; ***************************************************************************************
    2 D1:B163 -  -  -  -  ; ***************************************************************************************
    3 D1:B163 -  -  -  -  ;
    4 D1:B163 -  -  -  -  ;		Name : 		instance.asm
    5 D1:B163 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B163 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B163 -  -  -  -  ;		Reviewed :	No
    8 D1:B163 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B163 -  -  -  -  ;
   10 D1:B163 -  -  -  -  ; ***************************************************************************************
   11 D1:B163 -  -  -  -  ; ***************************************************************************************
   12 D1:B163 -  -  -  -  
   13 D1:B163 -  -  -  -  ; ***************************************************************************************
   14 D1:B163 -  -  -  -  ;
   15 D1:B163 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B163 -  -  -  -  ;
   17 D1:B163 -  -  -  -  ; ***************************************************************************************
   18 D1:B163 -  -  -  -  
   19 D1:B163 -  -  -  -  SetCurrentInstance:
   20 D1:B163 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B168 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B16C ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B171 -  -  -  -  
   24 D1:B171 C9 -  -  -  		ret
   25 D1:B172 -  -  -  -  
   26 D1:B172 -  -  -  -  
   27 D1:B172 -  -  -  -  ; ***************************************************************************************
   28 D1:B172 -  -  -  -  ;
   29 D1:B172 -  -  -  -  ;									Changes and Updates
   30 D1:B172 -  -  -  -  ;
   31 D1:B172 -  -  -  -  ; ***************************************************************************************
   32 D1:B172 -  -  -  -  ;
   33 D1:B172 -  -  -  -  ;		Date			Notes
   34 D1:B172 -  -  -  -  ;		==== 			=====
   35 D1:B172 -  -  -  -  ;
   36 D1:B172 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B172 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B172 -  -  -  -  ; ***************************************************************************************
    2 D1:B172 -  -  -  -  ; ***************************************************************************************
    3 D1:B172 -  -  -  -  ;
    4 D1:B172 -  -  -  -  ;		Name : 		new.asm
    5 D1:B172 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B172 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B172 -  -  -  -  ;		Reviewed :	No
    8 D1:B172 -  -  -  -  ;		Purpose :	New command.
    9 D1:B172 -  -  -  -  ;
   10 D1:B172 -  -  -  -  ; ***************************************************************************************
   11 D1:B172 -  -  -  -  ; ***************************************************************************************
   12 D1:B172 -  -  -  -  
   13 D1:B172 -  -  -  -  ; ***************************************************************************************
   14 D1:B172 -  -  -  -  ;
   15 D1:B172 -  -  -  -  ;										NEW command
   16 D1:B172 -  -  -  -  ;
   17 D1:B172 -  -  -  -  ; ***************************************************************************************
   18 D1:B172 -  -  -  -  
   19 D1:B172 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B172 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B176 36 00 -  -  		ld 		(hl),0
   22 D1:B178 CD 14 B1 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B17C 3E 00 C3 D9 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B182 -  -  -  -  
   25 D1:B182 -  -  -  -  ; ***************************************************************************************
   26 D1:B182 -  -  -  -  ;
   27 D1:B182 -  -  -  -  ;									Changes and Updates
   28 D1:B182 -  -  -  -  ;
   29 D1:B182 -  -  -  -  ; ***************************************************************************************
   30 D1:B182 -  -  -  -  ;
   31 D1:B182 -  -  -  -  ;		Date			Notes
   32 D1:B182 -  -  -  -  ;		==== 			=====
   33 D1:B182 -  -  -  -  ;
   34 D1:B182 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B182 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B182 -  -  -  -  ; ***************************************************************************************
    2 D1:B182 -  -  -  -  ; ***************************************************************************************
    3 D1:B182 -  -  -  -  ;
    4 D1:B182 -  -  -  -  ;		Name : 		utility.asm
    5 D1:B182 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B182 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B182 -  -  -  -  ;		Reviewed :	No
    8 D1:B182 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B182 -  -  -  -  ;
   10 D1:B182 -  -  -  -  ; ***************************************************************************************
   11 D1:B182 -  -  -  -  ; ***************************************************************************************
   12 D1:B182 -  -  -  -  
   13 D1:B182 -  -  -  -  ; ***************************************************************************************
   14 D1:B182 -  -  -  -  ;
   15 D1:B182 -  -  -  -  ;							Print ASCII string at HL
   16 D1:B182 -  -  -  -  ;
   17 D1:B182 -  -  -  -  ; ***************************************************************************************
   18 D1:B182 -  -  -  -  
   19 D1:B182 -  -  -  -  PrintStringAtHL:
   20 D1:B182 7E -  -  -  		ld 		a,(hl)
   21 D1:B183 FE 20 -  -  		cp 		$20		
   22 D1:B185 D8 -  -  -  		ret 	c
   23 D1:B186 CD AA B7 D1 		call 	SYSPrintChar
   24 D1:B18A 23 -  -  -  		inc 	hl
   25 D1:B18B 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B18D -  -  -  -  
   27 D1:B18D -  -  -  -  ; ***************************************************************************************
   28 D1:B18D -  -  -  -  ;
   29 D1:B18D -  -  -  -  ;									Changes and Updates
   30 D1:B18D -  -  -  -  ;
   31 D1:B18D -  -  -  -  ; ***************************************************************************************
   32 D1:B18D -  -  -  -  ;
   33 D1:B18D -  -  -  -  ;		Date			Notes
   34 D1:B18D -  -  -  -  ;		==== 			=====
   35 D1:B18D -  -  -  -  ;
   36 D1:B18D -  -  -  -  ; ***************************************************************************************
   37 D1:B18D -  -  -  -  		
Listing for file "_build.asm"
   53 D1:B18D -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B18D -  -  -  -  ; ***************************************************************************************
    2 D1:B18D -  -  -  -  ; ***************************************************************************************
    3 D1:B18D -  -  -  -  ;
    4 D1:B18D -  -  -  -  ;		Name : 		create.asm
    5 D1:B18D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B18D -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B18D -  -  -  -  ;		Reviewed :	No
    8 D1:B18D -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B18D -  -  -  -  ;
   10 D1:B18D -  -  -  -  ; ***************************************************************************************
   11 D1:B18D -  -  -  -  ; ***************************************************************************************
   12 D1:B18D -  -  -  -  
   13 D1:B18D -  -  -  -  ; ***************************************************************************************
   14 D1:B18D -  -  -  -  ;
   15 D1:B18D -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B18D -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B18D -  -  -  -  ;
   18 D1:B18D -  -  -  -  ; ***************************************************************************************
   19 D1:B18D -  -  -  -  
   20 D1:B18D -  -  -  -  VariableCreate:		
   21 D1:B18D -  -  -  -  		;
   22 D1:B18D -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B18D -  -  -  -  		;
   24 D1:B18D 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B191 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B192 E5 -  -  -  		push 	hl 							; save count.
   27 D1:B193 CD F2 B0 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B197 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B198 -  -  -  -  		;
   30 D1:B198 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B198 -  -  -  -  		;
   32 D1:B198 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B199 -  -  -  -  _VCClear:
   34 D1:B199 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B19B 23 -  -  -  		inc 	hl
   36 D1:B19C 0B -  -  -  		dec 	bc
   37 D1:B19D 78 -  -  -  		ld		a,b
   38 D1:B19E B1 -  -  -  		or 		c
   39 D1:B19F 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B1A1 E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B1A2 -  -  -  -  		;
   42 D1:B1A2 -  -  -  -  		;		Now start to create the data.
   43 D1:B1A2 -  -  -  -  		;
   44 D1:B1A2 E5 -  -  -  		push 	hl 							; save start
   45 D1:B1A3 -  -  -  -  		;
   46 D1:B1A3 -  -  -  -  		;		Write hash to +0
   47 D1:B1A3 -  -  -  -  		;
   48 D1:B1A3 3A 05 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B1A7 77 -  -  -  		ld 		(hl),a
   50 D1:B1A8 23 -  -  -  		inc 	hl
   51 D1:B1A9 -  -  -  -  		;
   52 D1:B1A9 -  -  -  -  		;		Write list head to +1
   53 D1:B1A9 -  -  -  -  		;
   54 D1:B1A9 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B1AA 2A 07 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B1AE ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B1B0 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B1B1 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B1B2 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B1B8 -  -  -  -  		;
   61 D1:B1B8 -  -  -  -  		;		Write variable name to +5
   62 D1:B1B8 -  -  -  -  		;
   63 D1:B1B8 ED 5B 01 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B1BD ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B1C3 -  -  -  -  		;
   66 D1:B1C3 D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B1C4 2A 07 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B1C8 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B1CE -  -  -  -  		;
   70 D1:B1CE EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B1CF C9 -  -  -  		ret
   72 D1:B1D0 -  -  -  -  
   73 D1:B1D0 -  -  -  -  ; ***************************************************************************************
   74 D1:B1D0 -  -  -  -  ;
   75 D1:B1D0 -  -  -  -  ;									Changes and Updates
   76 D1:B1D0 -  -  -  -  ;
   77 D1:B1D0 -  -  -  -  ; ***************************************************************************************
   78 D1:B1D0 -  -  -  -  ;
   79 D1:B1D0 -  -  -  -  ;		Date			Notes
   80 D1:B1D0 -  -  -  -  ;		==== 			=====
   81 D1:B1D0 -  -  -  -  ;
   82 D1:B1D0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B1D0 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B1D0 -  -  -  -  ; ***************************************************************************************
    2 D1:B1D0 -  -  -  -  ; ***************************************************************************************
    3 D1:B1D0 -  -  -  -  ;
    4 D1:B1D0 -  -  -  -  ;		Name : 		find.asm
    5 D1:B1D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1D0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1D0 -  -  -  -  ;		Reviewed :	No
    8 D1:B1D0 -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B1D0 -  -  -  -  ;
   10 D1:B1D0 -  -  -  -  ; ***************************************************************************************
   11 D1:B1D0 -  -  -  -  ; ***************************************************************************************
   12 D1:B1D0 -  -  -  -  
   13 D1:B1D0 -  -  -  -  ; ***************************************************************************************
   14 D1:B1D0 -  -  -  -  ;
   15 D1:B1D0 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B1D0 -  -  -  -  ; 		variable information at (IX)
   17 D1:B1D0 -  -  -  -  ;
   18 D1:B1D0 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B1D0 -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B1D0 -  -  -  -  ;
   21 D1:B1D0 -  -  -  -  ; ***************************************************************************************
   22 D1:B1D0 -  -  -  -  
   23 D1:B1D0 -  -  -  -  FindVariable:
   24 D1:B1D0 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B1D3 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B1D5 D2 43 AC D1 		jp 		nc,SyntaxError 		
   27 D1:B1D9 -  -  -  -  
   28 D1:B1D9 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B1DC FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B1DE 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B1E0 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B1E2 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B1E4 -  -  -  -  		;
   34 D1:B1E4 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B1E4 -  -  -  -  		;
   36 D1:B1E4 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B1E8 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B1EB 87 -  -  -  		add 	a,a 						; x4
   39 D1:B1EC 87 -  -  -  		add 	a,a
   40 D1:B1ED B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B1EE 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B1EF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B1F1 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B1F3 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B1F5 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B1F6 C9 -  -  -  		ret
   47 D1:B1F7 -  -  -  -  		;
   48 D1:B1F7 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B1F7 -  -  -  -  		;
   50 D1:B1F7 -  -  -  -  _FVNotSimple:
   51 D1:B1F7 CD 5D B2 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B1FB CD 99 B2 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B1FF 38 14 -  -  		jr 		c,_FVNotFound  				
   54 D1:B201 -  -  -  -  		;
   55 D1:B201 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B201 -  -  -  -  		;
   57 D1:B201 -  -  -  -  _FVExitReference:		
   58 D1:B201 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B205 19 -  -  -  		add 	hl,de 
   60 D1:B206 -  -  -  -  		;
   61 D1:B206 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 D1:B206 -  -  -  -  		;
   63 D1:B206 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 D1:B209 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 D1:B20B CC 34 B2 D1 		call 	z,ArrayLookup 				; array access required.
   66 D1:B20F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 D1:B211 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 D1:B213 AF -  -  -  		xor 	a 							; clear carry and return
   69 D1:B214 C9 -  -  -  		ret
   70 D1:B215 -  -  -  -  		;
   71 D1:B215 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 D1:B215 -  -  -  -  		;
   73 D1:B215 -  -  -  -  _FVNotFound:		
   74 D1:B215 3A FD A8 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 D1:B219 B7 -  -  -  		or 		a
   76 D1:B21A 28 11 -  -  		jr 		z,_FVFail
   77 D1:B21C DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 D1:B21F FE 95 -  -  		cp 		KWD_LPAREN 		
   79 D1:B221 28 0A -  -  		jr 		z,_FVFail
   80 D1:B223 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 D1:B227 CD 8D B1 D1 		call 	VariableCreate 				; create a new variable.
   82 D1:B22B 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 D1:B22D -  -  -  -  
   84 D1:B22D -  -  -  -  _FVFail:
   85 D1:B22D DD 2A 01 A9 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 D1:B232 37 -  -  -  		scf
   87 D1:B233 C9 -  -  -  		ret
   88 D1:B234 -  -  -  -  
   89 D1:B234 -  -  -  -  ; ***************************************************************************************
   90 D1:B234 -  -  -  -  ;
   91 D1:B234 -  -  -  -  ;									 Array lookup
   92 D1:B234 -  -  -  -  ;
   93 D1:B234 -  -  -  -  ; ***************************************************************************************
   94 D1:B234 -  -  -  -  
   95 D1:B234 -  -  -  -  ArrayLookup:
   96 D1:B234 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 D1:B235 CD E6 AD D1 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 D1:B239 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 D1:B23A 7C -  -  -  		ld 		a,h
  100 D1:B23B B5 -  -  -  		or 		l
  101 D1:B23C D9 -  -  -  		exx
  102 D1:B23D 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 D1:B23F 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 D1:B243 54 -  -  -  		ld 		d,h
  105 D1:B244 5D -  -  -  		ld 		e,l
  106 D1:B245 E1 -  -  -  		pop 	hl 							; get the array base back
  107 D1:B246 E5 -  -  -  		push 	hl
  108 D1:B247 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 D1:B249 AF -  -  -  		xor  	a							; subtract maximum from index
  110 D1:B24A ED 52 -  -  		sbc 	hl,de
  111 D1:B24C DA 57 B2 D1 		jp 		c,_ALBadValue 				; if max < index then error
  112 D1:B250 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 D1:B251 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 D1:B252 29 -  -  -  		add 	hl,hl 						; x 4
  115 D1:B253 29 -  -  -  		add 	hl,hl
  116 D1:B254 D1 -  -  -  		pop 	de 							; get array base back
  117 D1:B255 19 -  -  -  		add 	hl,de 						; add offset to it
  118 D1:B256 C9 -  -  -  		ret
  119 D1:B257 -  -  -  -  
  120 D1:B257 -  -  -  -  _ALBadValue:
  121 D1:B257 3E 07 C3 D9 
              AB D1 -  -  		ERR_INDEX
  122 D1:B25D -  -  -  -  		
  123 D1:B25D -  -  -  -  ; ***************************************************************************************
  124 D1:B25D -  -  -  -  ;
  125 D1:B25D -  -  -  -  ;									Changes and Updates
  126 D1:B25D -  -  -  -  ;
  127 D1:B25D -  -  -  -  ; ***************************************************************************************
  128 D1:B25D -  -  -  -  ;
  129 D1:B25D -  -  -  -  ;		Date			Notes
  130 D1:B25D -  -  -  -  ;		==== 			=====
  131 D1:B25D -  -  -  -  ;
  132 D1:B25D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B25D -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B25D -  -  -  -  ; ***************************************************************************************
    2 D1:B25D -  -  -  -  ; ***************************************************************************************
    3 D1:B25D -  -  -  -  ;
    4 D1:B25D -  -  -  -  ;		Name : 		info.asm
    5 D1:B25D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B25D -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B25D -  -  -  -  ;		Reviewed :	No
    8 D1:B25D -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B25D -  -  -  -  ;
   10 D1:B25D -  -  -  -  ; ***************************************************************************************
   11 D1:B25D -  -  -  -  ; ***************************************************************************************
   12 D1:B25D -  -  -  -  
   13 D1:B25D -  -  -  -  ; ***************************************************************************************
   14 D1:B25D -  -  -  -  ;
   15 D1:B25D -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B25D -  -  -  -  ; 		after the identifier.
   17 D1:B25D -  -  -  -  ;
   18 D1:B25D -  -  -  -  ; ***************************************************************************************
   19 D1:B25D -  -  -  -  
   20 D1:B25D -  -  -  -  VariableInformation:
   21 D1:B25D DD 22 01 A9 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B262 -  -  -  -  		;
   23 D1:B262 -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B262 -  -  -  -  		;
   25 D1:B262 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B264 -  -  -  -  _VICalculateHash:
   27 D1:B264 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B267 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B269 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B26B 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B26C 07 -  -  -  		rlca
   32 D1:B26D 07 -  -  -  		rlca
   33 D1:B26E 80 -  -  -  		add 	a,b
   34 D1:B26F 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B270 DD 23 -  -  		inc 	ix 							; next character
   36 D1:B272 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B274 -  -  -  -  		;
   38 D1:B274 -  -  -  -  _VIHashDone:
   39 D1:B274 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B275 -  -  -  -  		;
   41 D1:B275 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B275 -  -  -  -  		;
   43 D1:B275 32 05 A9 D1 		ld 		(VarHash),a
   44 D1:B279 -  -  -  -  		;
   45 D1:B279 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B279 -  -  -  -  		;		
   47 D1:B279 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B27B 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B27F 6F -  -  -  		ld 		l,a
   50 D1:B280 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B281 29 -  -  -  		add 	hl,hl
   52 D1:B282 -  -  -  -  		;
   53 D1:B282 ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B287 19 -  -  -  		add 	hl,de
   55 D1:B288 -  -  -  -  		;
   56 D1:B288 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B28B FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B28D 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B28F 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B293 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B294 -  -  -  -  _VINotArray:
   62 D1:B294 22 07 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B298 C9 -  -  -  		ret
   64 D1:B299 -  -  -  -  
   65 D1:B299 -  -  -  -  ; ***************************************************************************************
   66 D1:B299 -  -  -  -  ;
   67 D1:B299 -  -  -  -  ;									Changes and Updates
   68 D1:B299 -  -  -  -  ;
   69 D1:B299 -  -  -  -  ; ***************************************************************************************
   70 D1:B299 -  -  -  -  ;
   71 D1:B299 -  -  -  -  ;		Date			Notes
   72 D1:B299 -  -  -  -  ;		==== 			=====
   73 D1:B299 -  -  -  -  ;
   74 D1:B299 -  -  -  -  ; ***************************************************************************************
   75 D1:B299 -  -  -  -  
Listing for file "_build.asm"
   56 D1:B299 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B299 -  -  -  -  ; ***************************************************************************************
    2 D1:B299 -  -  -  -  ; ***************************************************************************************
    3 D1:B299 -  -  -  -  ;
    4 D1:B299 -  -  -  -  ;		Name : 		search.asm
    5 D1:B299 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B299 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B299 -  -  -  -  ;		Reviewed :	No
    8 D1:B299 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B299 -  -  -  -  ;
   10 D1:B299 -  -  -  -  ; ***************************************************************************************
   11 D1:B299 -  -  -  -  ; ***************************************************************************************
   12 D1:B299 -  -  -  -  
   13 D1:B299 -  -  -  -  ; ***************************************************************************************
   14 D1:B299 -  -  -  -  ;
   15 D1:B299 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B299 -  -  -  -  ;		CS if failed.
   17 D1:B299 -  -  -  -  ;
   18 D1:B299 -  -  -  -  ; ***************************************************************************************
   19 D1:B299 -  -  -  -  
   20 D1:B299 -  -  -  -  VariableSearchList:
   21 D1:B299 2A 07 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B29D -  -  -  -  		;
   23 D1:B29D -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B29D -  -  -  -  		;		the address of the hash record
   25 D1:B29D -  -  -  -  		;
   26 D1:B29D -  -  -  -  _VSLLoop:
   27 D1:B29D ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B29F -  -  -  -  		;
   29 D1:B29F E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B2A0 AF -  -  -  		xor 	a
   31 D1:B2A1 ED 6A -  -  		adc 	hl,hl
   32 D1:B2A3 E1 -  -  -  		pop 	hl
   33 D1:B2A4 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B2A6 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B2A7 C8 -  -  -  		ret 	z
   36 D1:B2A8 -  -  -  -  _VSLRecord:
   37 D1:B2A8 -  -  -  -  		;
   38 D1:B2A8 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B2A8 -  -  -  -  		;
   40 D1:B2A8 3A 05 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B2AC BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B2AD 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B2AE 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B2B0 -  -  -  -  		;
   45 D1:B2B0 -  -  -  -  		;		Now check the name
   46 D1:B2B0 -  -  -  -  		;
   47 D1:B2B0 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B2B1 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B2B2 23 -  -  -  		inc 	hl
   50 D1:B2B3 23 -  -  -  		inc 	hl
   51 D1:B2B4 23 -  -  -  		inc 	hl
   52 D1:B2B5 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B2B7 ED 5B 01 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B2BC -  -  -  -  		;
   55 D1:B2BC -  -  -  -  		;		Check individual characters
   56 D1:B2BC -  -  -  -  		;
   57 D1:B2BC -  -  -  -  _VSLCharacter:
   58 D1:B2BC 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B2BD FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B2BF 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B2C1 BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B2C2 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B2C3 13 -  -  -  		inc 	de
   64 D1:B2C4 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B2C6 -  -  -  -  		;
   66 D1:B2C6 -  -  -  -  _VSLFailed:
   67 D1:B2C6 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B2C7 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B2C9 -  -  -  -  		;
   70 D1:B2C9 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B2C9 -  -  -  -  		;		
   72 D1:B2C9 -  -  -  -  _VSLEndIdentifier:
   73 D1:B2C9 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B2CA FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B2CC 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B2CE -  -  -  -  		;
   77 D1:B2CE E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B2CF 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B2D0 AF -  -  -  		xor 	a 							; clear carry
   80 D1:B2D1 C9 -  -  -  		ret
   81 D1:B2D2 -  -  -  -  
   82 D1:B2D2 -  -  -  -  ; ***************************************************************************************
   83 D1:B2D2 -  -  -  -  ;
   84 D1:B2D2 -  -  -  -  ;									Changes and Updates
   85 D1:B2D2 -  -  -  -  ;
   86 D1:B2D2 -  -  -  -  ; ***************************************************************************************
   87 D1:B2D2 -  -  -  -  ;
   88 D1:B2D2 -  -  -  -  ;		Date			Notes
   89 D1:B2D2 -  -  -  -  ;		==== 			=====
   90 D1:B2D2 -  -  -  -  ;
   91 D1:B2D2 -  -  -  -  ; ***************************************************************************************
   92 D1:B2D2 -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B2D2 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B2D2 -  -  -  -  ;
    2 D1:B2D2 -  -  -  -  ;	This file is automatically generated.
    3 D1:B2D2 -  -  -  -  ;
    4 D1:B2D2 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 D1:B2E0 -  -  -  -  PrecedenceTable:
    6 D1:B2E0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B2E1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B2E2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B2E3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B2E4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B2E5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B2E6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B2E7 04 -  -  -  	.db	4	; $008a -
   14 D1:B2E8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B2E9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B2EA 03 -  -  -  	.db	3	; $008d >
   17 D1:B2EB 03 -  -  -  	.db	3	; $008e <
   18 D1:B2EC 03 -  -  -  	.db	3	; $008f =
   19 D1:B2ED 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B2EE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B2EF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B2F0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B2F1 -  -  -  -  
Listing for file "_build.asm"
   58 D1:B2F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B2F1 -  -  -  -  ;
    2 D1:B2F1 -  -  -  -  ;	This is automatically generated.
    3 D1:B2F1 -  -  -  -  ;
    4 D1:B2F1 -  -  -  -  ErrorIDTable:
    5 D1:B2F1 39 B3 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B2F5 3F B3 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B2F9 50 B3 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B2FD 5E B3 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B301 68 B3 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B305 72 B3 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B309 8C B3 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B30D 9D B3 D1 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   13 D1:B311 AD B3 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   14 D1:B315 BB B3 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   15 D1:B319 C9 B3 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   16 D1:B31D D3 B3 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   17 D1:B321 E8 B3 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   18 D1:B325 FE B3 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   19 D1:B329 0C B4 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   20 D1:B32D 11 B4 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   21 D1:B331 1E B4 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   22 D1:B335 2F B4 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   23 D1:B339 -  -  -  -  
   24 D1:B339 -  -  -  -  ErrText_warmstart:
   25 D1:B339 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   26 D1:B33F -  -  -  -  ErrText_assert:
   27 D1:B33F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   28 D1:B350 -  -  -  -  ErrText_badtype:
   29 D1:B350 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   30 D1:B35E -  -  -  -  ErrText_badvalue:
   31 D1:B35E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   32 D1:B368 -  -  -  -  ErrText_dim:
   33 D1:B368 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   34 D1:B372 -  -  -  -  ErrText_disabled:
   35 D1:B372 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   36 D1:B38C -  -  -  -  ErrText_divzero:
   37 D1:B38C 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   38 D1:B39D -  -  -  -  ErrText_index:
   39 D1:B39D 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   40 D1:B3AD -  -  -  -  ErrText_memory:
   41 D1:B3AD 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   42 D1:B3BB -  -  -  -  ErrText_nocomma:
   43 D1:B3BB 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   44 D1:B3C9 -  -  -  -  ErrText_nodollar:
   45 D1:B3C9 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   46 D1:B3D3 -  -  -  -  ErrText_nolbracket:
   47 D1:B3D3 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   48 D1:B3E8 -  -  -  -  ErrText_norbracket:
   49 D1:B3E8 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   50 D1:B3FE -  -  -  -  ErrText_notref:
   51 D1:B3FE 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   52 D1:B40C -  -  -  -  ErrText_stop:
   53 D1:B40C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   54 D1:B411 -  -  -  -  ErrText_syntax:
   55 D1:B411 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   56 D1:B41E -  -  -  -  ErrText_todo:
   57 D1:B41E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   58 D1:B42F -  -  -  -  ErrText_unknownvar:
   59 D1:B42F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 D1:B440 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B440 -  -  -  -  ;
    2 D1:B440 -  -  -  -  ;	Vectors for set 0
    3 D1:B440 -  -  -  -  ;
    4 D1:B440 -  -  -  -  VectorsSet0:
    5 D1:B440 29 AA D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B444 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B448 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B44C B9 AC D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B450 C2 AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B454 65 AC D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B458 73 AC D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B45C 81 AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B460 73 AC D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B464 49 AC D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B468 57 AC D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B46C 20 AD D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B470 16 AD D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B474 02 AD D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B478 F8 AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B47C EE AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B480 0C AD D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B484 8F AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B488 9D AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B48C AB AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B490 92 B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B494 8A B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B498 AC AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B49C D9 AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B4A0 9B AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B4A4 71 AF D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B4A8 70 B0 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B4AC A1 B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B4B0 87 AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B4B4 7E AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B4B8 B7 AF D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B4BC CC AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B4C0 C9 B0 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B4C4 D0 B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B4C8 DD B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B4CC E0 AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B4D0 E4 AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B4D4 6E A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B4D8 6E A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B4DC 72 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B4E0 6E A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B4E4 FF AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B4E8 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa [
   48 D1:B4EC A5 A8 D1 00 	addr(Unimplemented)              ; $00ab ]
   49 D1:B4F0 6E A9 D1 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 D1:B4F4 A5 A8 D1 00 	addr(Unimplemented)              ; $00ad repeat
   51 D1:B4F8 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae until
   52 D1:B4FC A5 A8 D1 00 	addr(Unimplemented)              ; $00af if
   53 D1:B500 6E A9 D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:B504 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 else
   55 D1:B508 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 for
   56 D1:B50C 6E A9 D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:B510 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 step
   58 D1:B514 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 next
   59 D1:B518 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 def
   60 D1:B51C A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 proc
   61 D1:B520 A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 endproc
   62 D1:B524 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 gosub
   63 D1:B528 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba return
   64 D1:B52C A5 A8 D1 00 	addr(Unimplemented)              ; $00bb goto
   65 D1:B530 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc local
   66 D1:B534 73 A9 D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:B538 FF AA D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:B53C 40 AA D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:B540 A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 vdu
   70 D1:B544 94 AA D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:B548 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:B54C A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:B550 A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 list
   74 D1:B554 72 B1 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:B558 1C AB D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:B55C A5 A8 D1 00 	addr(Unimplemented)              ; $00c7 read
   77 D1:B560 A5 A8 D1 00 	addr(Unimplemented)              ; $00c8 data
   78 D1:B564 A5 A8 D1 00 	addr(Unimplemented)              ; $00c9 restore
   79 D1:B568 5D A9 D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:B56C 14 B1 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:B570 23 AA D1 00 	addr(Command_END)                ; $00cc end
   82 D1:B574 8F AB D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:B578 -  -  -  -  ;
   84 D1:B578 -  -  -  -  ;	Vectors for set 1
   85 D1:B578 -  -  -  -  ;
   86 D1:B578 -  -  -  -  VectorsSet1:
   87 D1:B578 -  -  -  -  ;
   88 D1:B578 -  -  -  -  ;	Vectors for set 2
   89 D1:B578 -  -  -  -  ;
   90 D1:B578 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 D1:B578 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B578 -  -  -  -  ; ***************************************************************************************
    2 D1:B578 -  -  -  -  ; ***************************************************************************************
    3 D1:B578 -  -  -  -  ;
    4 D1:B578 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B578 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B578 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B578 -  -  -  -  ;		Reviewed :	No
    8 D1:B578 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B578 -  -  -  -  ;
   10 D1:B578 -  -  -  -  ; ***************************************************************************************
   11 D1:B578 -  -  -  -  ; ***************************************************************************************
   12 D1:B578 -  -  -  -  
   13 D1:B578 -  -  -  -  ; ***************************************************************************************
   14 D1:B578 -  -  -  -  ;
   15 D1:B578 -  -  -  -  ;								Unsigned integer divide
   16 D1:B578 -  -  -  -  ;
   17 D1:B578 -  -  -  -  ; ***************************************************************************************
   18 D1:B578 -  -  -  -  
   19 D1:B578 -  -  -  -  Int32UDivide:
   20 D1:B578 37 -  -  -  		scf
   21 D1:B579 C3 BD B5 D1 		jp 		_I32UnsignedDivide		
   22 D1:B57D -  -  -  -  
   23 D1:B57D -  -  -  -  ; ***************************************************************************************
   24 D1:B57D -  -  -  -  ;
   25 D1:B57D -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B57D -  -  -  -  ;
   27 D1:B57D -  -  -  -  ; ***************************************************************************************
   28 D1:B57D -  -  -  -  
   29 D1:B57D -  -  -  -  Int32SDivide:
   30 D1:B57D 37 -  -  -  		scf
   31 D1:B57E 18 01 -  -  		jr 		_I32SDivide
   32 D1:B580 -  -  -  -  Int32Modulus:
   33 D1:B580 AF -  -  -  		xor 	a
   34 D1:B581 -  -  -  -  _I32SDivide:
   35 D1:B581 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B582 F5 -  -  -  		push 	af
   37 D1:B583 08 -  -  -  		ex 		af,af'
   38 D1:B584 -  -  -  -  
   39 D1:B584 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B585 D9 -  -  -  		exx
   41 D1:B586 D5 -  -  -  		push 	de
   42 D1:B587 D9 -  -  -  		exx
   43 D1:B588 -  -  -  -  
   44 D1:B588 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B589 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B58A CD AA B5 D1 		call 	_I32CheckHLSignSwap
   47 D1:B58E CD AA B5 D1 		call 	_I32CheckHLSignSwap
   48 D1:B592 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B593 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B594 F5 -  -  -  		push 	af
   51 D1:B595 CD BD B5 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B599 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B59A 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B59C 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B59D CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B59F C4 20 B7 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B5A3 -  -  -  -  _I32SDExit:
   58 D1:B5A3 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B5A4 D1 -  -  -  		pop 	de
   60 D1:B5A5 D9 -  -  -  		exx
   61 D1:B5A6 D1 -  -  -  		pop 	de
   62 D1:B5A7 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B5A8 08 -  -  -  		ex 		af,af'
   64 D1:B5A9 C9 -  -  -  		ret
   65 D1:B5AA -  -  -  -  
   66 D1:B5AA -  -  -  -  
   67 D1:B5AA -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B5AA D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B5AB CB 7C -  -  		bit 	7,h
   70 D1:B5AD D9 -  -  -  		exx
   71 D1:B5AE 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B5B0 -  -  -  -  		;
   73 D1:B5B0 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B5B2 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B5B3 CD 20 B7 D1 		call 	Int32Negate 				
   76 D1:B5B7 F1 -  -  -  		pop 	af
   77 D1:B5B8 -  -  -  -  _I32CHSPositive:
   78 D1:B5B8 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B5B9 EB -  -  -  		ex 		de,hl
   80 D1:B5BA D9 -  -  -  		exx		
   81 D1:B5BB EB -  -  -  		ex 		de,hl
   82 D1:B5BC C9 -  -  -  		ret
   83 D1:B5BD -  -  -  -  
   84 D1:B5BD -  -  -  -  ; ***************************************************************************************
   85 D1:B5BD -  -  -  -  ;
   86 D1:B5BD -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B5BD -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B5BD -  -  -  -  ;
   89 D1:B5BD -  -  -  -  ; ***************************************************************************************
   90 D1:B5BD -  -  -  -  
   91 D1:B5BD -  -  -  -  _I32UnsignedDivide:
   92 D1:B5BD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B5BE D5 -  -  -  		push 	de
   94 D1:B5BF D9 -  -  -  		exx
   95 D1:B5C0 C5 -  -  -  		push 	bc
   96 D1:B5C1 D5 -  -  -  		push 	de 							
   97 D1:B5C2 D9 -  -  -  		exx
   98 D1:B5C3 -  -  -  -  
   99 D1:B5C3 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B5C4 -  -  -  -  
  101 D1:B5C4 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B5C5 B3 -  -  -  		or 		e
  103 D1:B5C6 D9 -  -  -  		exx
  104 D1:B5C7 B2 -  -  -  		or 		d
  105 D1:B5C8 B3 -  -  -  		or 		e
  106 D1:B5C9 D9 -  -  -  		exx
  107 D1:B5CA CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B5CE -  -  -  -  
  109 D1:B5CE -  -  -  -  
  110 D1:B5CE 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B5CF 4D -  -  -  		ld		c,l
  112 D1:B5D0 21 00 00 00 		ld 		hl,$0000
  113 D1:B5D4 D9 -  -  -  		exx
  114 D1:B5D5 44 -  -  -  		ld 		b,h
  115 D1:B5D6 4D -  -  -  		ld		c,l
  116 D1:B5D7 21 00 00 00 		ld 		hl,$0000
  117 D1:B5DB D9 -  -  -  		exx
  118 D1:B5DC -  -  -  -  
  119 D1:B5DC 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B5DE -  -  -  -  _I32DivideLoop:
  121 D1:B5DE F5 -  -  -  		push 	af
  122 D1:B5DF -  -  -  -  
  123 D1:B5DF CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B5E1 CB 10 -  -  		rl 		b
  125 D1:B5E3 D9 -  -  -  		exx
  126 D1:B5E4 CB 11 -  -  		rl 		c
  127 D1:B5E6 CB 10 -  -  		rl 		b
  128 D1:B5E8 D9 -  -  -  		exx
  129 D1:B5E9 CB 15 -  -  		rl 		l
  130 D1:B5EB CB 14 -  -  		rl 		h
  131 D1:B5ED D9 -  -  -  		exx
  132 D1:B5EE CB 15 -  -  		rl 		l
  133 D1:B5F0 CB 14 -  -  		rl 		h
  134 D1:B5F2 D9 -  -  -  		exx
  135 D1:B5F3 -  -  -  -  
  136 D1:B5F3 CD BE B6 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B5F7 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B5F9 -  -  -  -  
  139 D1:B5F9 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B5FA 18 04 -  -  		jr 		_I32Next
  141 D1:B5FC -  -  -  -  
  142 D1:B5FC -  -  -  -  _I32Borrow:
  143 D1:B5FC CD B6 B6 D1 		call 	Int32Add 					; A = A + M
  144 D1:B600 -  -  -  -  _I32Next:
  145 D1:B600 F1 -  -  -  		pop 	af
  146 D1:B601 3D -  -  -  		dec 	a
  147 D1:B602 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B604 -  -  -  -  
  149 D1:B604 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B605 -  -  -  -  
  151 D1:B605 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B606 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B608 -  -  -  -  
  154 D1:B608 60 -  -  -  		ld  	h,b
  155 D1:B609 69 -  -  -  		ld 		l,c
  156 D1:B60A D9 -  -  -  		exx
  157 D1:B60B 60 -  -  -  		ld  	h,b
  158 D1:B60C 69 -  -  -  		ld 		l,c
  159 D1:B60D D9 -  -  -  		exx
  160 D1:B60E -  -  -  -  _I32Modulus1:		
  161 D1:B60E D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B60F D1 -  -  -  		pop 	de
  163 D1:B610 C1 -  -  -  		pop 	bc
  164 D1:B611 D9 -  -  -  		exx
  165 D1:B612 D1 -  -  -  		pop 	de
  166 D1:B613 C1 -  -  -  		pop 	bc
  167 D1:B614 C9 -  -  -  		ret
  168 D1:B615 -  -  -  -  
  169 D1:B615 -  -  -  -  ; ***************************************************************************************
  170 D1:B615 -  -  -  -  ;
  171 D1:B615 -  -  -  -  ;									Changes and Updates
  172 D1:B615 -  -  -  -  ;
  173 D1:B615 -  -  -  -  ; ***************************************************************************************
  174 D1:B615 -  -  -  -  ;
  175 D1:B615 -  -  -  -  ;		Date			Notes
  176 D1:B615 -  -  -  -  ;		==== 			=====
  177 D1:B615 -  -  -  -  ;
  178 D1:B615 -  -  -  -  ; ***************************************************************************************
  179 D1:B615 -  -  -  -  		
Listing for file "_build.asm"
   61 D1:B615 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B615 -  -  -  -  ; ***************************************************************************************
    2 D1:B615 -  -  -  -  ; ***************************************************************************************
    3 D1:B615 -  -  -  -  ;
    4 D1:B615 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B615 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B615 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B615 -  -  -  -  ;		Reviewed :	No
    8 D1:B615 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B615 -  -  -  -  ;
   10 D1:B615 -  -  -  -  ; ***************************************************************************************
   11 D1:B615 -  -  -  -  ; ***************************************************************************************
   12 D1:B615 -  -  -  -  
   13 D1:B615 -  -  -  -  ; ***************************************************************************************
   14 D1:B615 -  -  -  -  ;
   15 D1:B615 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B615 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B615 -  -  -  -  ;
   18 D1:B615 -  -  -  -  ; ***************************************************************************************
   19 D1:B615 -  -  -  -  
   20 D1:B615 -  -  -  -  Int32FromString:
   21 D1:B615 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B616 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B617 D5 -  -  -  		push 	de
   24 D1:B618 D9 -  -  -  		exx
   25 D1:B619 D5 -  -  -  		push 	de
   26 D1:B61A -  -  -  -  
   27 D1:B61A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B61E 11 00 00 00 		ld 		de,$0000
   29 D1:B622 D9 -  -  -  		exx
   30 D1:B623 21 00 00 00 		ld 		hl,$0000
   31 D1:B627 11 00 00 00 		ld 		de,$0000
   32 D1:B62B D9 -  -  -  		exx
   33 D1:B62C -  -  -  -  
   34 D1:B62C 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B62D CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B62F 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B631 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B633 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B634 -  -  -  -  		;
   40 D1:B634 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B635 F5 -  -  -  		push 	af
   42 D1:B636 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B638 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B639 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B63B 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B63C 18 01 -  -  		jr 		_I32FSMain
   47 D1:B63E -  -  -  -  _I32FSNotSigned:		
   48 D1:B63E E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B63F -  -  -  -  		;
   50 D1:B63F -  -  -  -  		; 		Main conversion loop.
   51 D1:B63F -  -  -  -  		; 		
   52 D1:B63F -  -  -  -  _I32FSMain:		
   53 D1:B63F 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B640 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B642 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B644 D6 20 -  -  		sub 	32
   57 D1:B646 -  -  -  -  _I32FSNotLower:
   58 D1:B646 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B648 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B64A FE 3A -  -  		cp 		'9'+1
   61 D1:B64C 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B64E FE 41 -  -  		cp 		'A'
   63 D1:B650 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B652 FE 47 -  -  		cp 		'F'+1
   65 D1:B654 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B656 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B658 -  -  -  -  _I32FSOkay:
   68 D1:B658 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B65A BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B65B 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B65D 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B65E D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B65F F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B660 CD 7D B6 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B664 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B665 5F -  -  -  		ld 		e,a
   77 D1:B666 CD B6 B6 D1 		call 	Int32Add 					; and add it.
   78 D1:B66A D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B66B 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B66D -  -  -  -  
   81 D1:B66D -  -  -  -  _I32FSExit:
   82 D1:B66D F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B66E FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B670 CC 20 B7 D1 		call 	z,Int32Negate
   85 D1:B674 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B675 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B676 D9 -  -  -  		exx
   88 D1:B677 D1 -  -  -  		pop 	de
   89 D1:B678 D9 -  -  -  		exx
   90 D1:B679 C1 -  -  -  		pop 	bc
   91 D1:B67A FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B67C C9 -  -  -  		ret				
   93 D1:B67D -  -  -  -  
   94 D1:B67D -  -  -  -  ; ***************************************************************************************
   95 D1:B67D -  -  -  -  ;
   96 D1:B67D -  -  -  -  ;									Changes and Updates
   97 D1:B67D -  -  -  -  ;
   98 D1:B67D -  -  -  -  ; ***************************************************************************************
   99 D1:B67D -  -  -  -  ;
  100 D1:B67D -  -  -  -  ;		Date			Notes
  101 D1:B67D -  -  -  -  ;		==== 			=====
  102 D1:B67D -  -  -  -  ;
  103 D1:B67D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B67D -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B67D -  -  -  -  ; ***************************************************************************************
    2 D1:B67D -  -  -  -  ; ***************************************************************************************
    3 D1:B67D -  -  -  -  ;
    4 D1:B67D -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B67D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B67D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B67D -  -  -  -  ;		Reviewed :	No
    8 D1:B67D -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B67D -  -  -  -  ;
   10 D1:B67D -  -  -  -  ; ***************************************************************************************
   11 D1:B67D -  -  -  -  ; ***************************************************************************************
   12 D1:B67D -  -  -  -  
   13 D1:B67D -  -  -  -  Int32Multiply:
   14 D1:B67D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B67E D5 -  -  -  		push 	de
   16 D1:B67F 44 -  -  -  		ld 		b,h
   17 D1:B680 4D -  -  -  		ld 		c,l
   18 D1:B681 21 00 00 00 		ld 		hl,$0000
   19 D1:B685 -  -  -  -  
   20 D1:B685 D9 -  -  -  		exx
   21 D1:B686 C5 -  -  -  		push 	bc
   22 D1:B687 D5 -  -  -  		push 	de
   23 D1:B688 44 -  -  -  		ld 		b,h
   24 D1:B689 4D -  -  -  		ld 		c,l
   25 D1:B68A 21 00 00 00 		ld 		hl,$0000		
   26 D1:B68E D9 -  -  -  		exx
   27 D1:B68F -  -  -  -  
   28 D1:B68F -  -  -  -  _I32MultiplyLoop:
   29 D1:B68F CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B691 C4 B6 B6 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B695 -  -  -  -  		;
   32 D1:B695 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B696 CB 38 -  -  		srl 	b
   34 D1:B698 CB 19 -  -  		rr 		c
   35 D1:B69A D9 -  -  -  		exx
   36 D1:B69B CB 18 -  -  		rr 		b
   37 D1:B69D CB 19 -  -  		rr 		c
   38 D1:B69F -  -  -  -  		;
   39 D1:B69F CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B6A1 CB 12 -  -  		rl 		d
   41 D1:B6A3 D9 -  -  -  		exx
   42 D1:B6A4 CB 13 -  -  		rl 		e
   43 D1:B6A6 CB 12 -  -  		rl 		d
   44 D1:B6A8 -  -  -  -  
   45 D1:B6A8 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B6A9 B1 -  -  -  		or 		c
   47 D1:B6AA D9 -  -  -  		exx
   48 D1:B6AB B0 -  -  -  		or 		b
   49 D1:B6AC B1 -  -  -  		or 		c
   50 D1:B6AD 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B6AF -  -  -  -  
   52 D1:B6AF D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B6B0 D1 -  -  -  		pop 	de
   54 D1:B6B1 C1 -  -  -  		pop 	bc
   55 D1:B6B2 D9 -  -  -  		exx
   56 D1:B6B3 D1 -  -  -  		pop 	de
   57 D1:B6B4 C1 -  -  -  		pop 	bc
   58 D1:B6B5 C9 -  -  -  		ret
   59 D1:B6B6 -  -  -  -  
   60 D1:B6B6 -  -  -  -  ; ***************************************************************************************
   61 D1:B6B6 -  -  -  -  ;
   62 D1:B6B6 -  -  -  -  ;									Changes and Updates
   63 D1:B6B6 -  -  -  -  ;
   64 D1:B6B6 -  -  -  -  ; ***************************************************************************************
   65 D1:B6B6 -  -  -  -  ;
   66 D1:B6B6 -  -  -  -  ;		Date			Notes
   67 D1:B6B6 -  -  -  -  ;		==== 			=====
   68 D1:B6B6 -  -  -  -  ;
   69 D1:B6B6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B6B6 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B6B6 -  -  -  -  ; ***************************************************************************************
    2 D1:B6B6 -  -  -  -  ; ***************************************************************************************
    3 D1:B6B6 -  -  -  -  ;
    4 D1:B6B6 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B6B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6B6 -  -  -  -  ;		Reviewed :	No
    8 D1:B6B6 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B6B6 -  -  -  -  ;
   10 D1:B6B6 -  -  -  -  ; ***************************************************************************************
   11 D1:B6B6 -  -  -  -  ; ***************************************************************************************
   12 D1:B6B6 -  -  -  -  
   13 D1:B6B6 -  -  -  -  ; ***************************************************************************************
   14 D1:B6B6 -  -  -  -  ;
   15 D1:B6B6 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B6B6 -  -  -  -  ;
   17 D1:B6B6 -  -  -  -  ; ***************************************************************************************
   18 D1:B6B6 -  -  -  -  
   19 D1:B6B6 -  -  -  -  Int32Add:
   20 D1:B6B6 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B6B8 D9 -  -  -  		exx
   22 D1:B6B9 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B6BC D9 -  -  -  		exx
   24 D1:B6BD C9 -  -  -  		ret
   25 D1:B6BE -  -  -  -  
   26 D1:B6BE -  -  -  -  ; ***************************************************************************************
   27 D1:B6BE -  -  -  -  ;
   28 D1:B6BE -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B6BE -  -  -  -  ;
   30 D1:B6BE -  -  -  -  ; ***************************************************************************************
   31 D1:B6BE -  -  -  -  
   32 D1:B6BE -  -  -  -  Int32Subtract:
   33 D1:B6BE AF -  -  -  		xor 	a 							; clear carry
   34 D1:B6BF 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B6C2 D9 -  -  -  		exx
   36 D1:B6C3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B6C6 D9 -  -  -  		exx
   38 D1:B6C7 C9 -  -  -  		ret
   39 D1:B6C8 -  -  -  -  
   40 D1:B6C8 -  -  -  -  ; ***************************************************************************************
   41 D1:B6C8 -  -  -  -  ;
   42 D1:B6C8 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B6C8 -  -  -  -  ;
   44 D1:B6C8 -  -  -  -  ; ***************************************************************************************
   45 D1:B6C8 -  -  -  -  
   46 D1:B6C8 -  -  -  -  Int32And:
   47 D1:B6C8 D9 -  -  -  		exx
   48 D1:B6C9 CD CE B6 D1 		call 	_I32AndHLDE
   49 D1:B6CD D9 -  -  -  		exx
   50 D1:B6CE -  -  -  -  _I32AndHLDE:		
   51 D1:B6CE 7C -  -  -  		ld 		a,h
   52 D1:B6CF A2 -  -  -  		and 	d
   53 D1:B6D0 67 -  -  -  		ld 		h,a
   54 D1:B6D1 7D -  -  -  		ld 		a,l
   55 D1:B6D2 A3 -  -  -  		and 	e
   56 D1:B6D3 6F -  -  -  		ld 		l,a
   57 D1:B6D4 C9 -  -  -  		ret
   58 D1:B6D5 -  -  -  -  
   59 D1:B6D5 -  -  -  -  ; ***************************************************************************************
   60 D1:B6D5 -  -  -  -  ;
   61 D1:B6D5 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B6D5 -  -  -  -  ;
   63 D1:B6D5 -  -  -  -  ; ***************************************************************************************
   64 D1:B6D5 -  -  -  -  
   65 D1:B6D5 -  -  -  -  Int32Or:
   66 D1:B6D5 D9 -  -  -  		exx
   67 D1:B6D6 CD DB B6 D1 		call 	_I32OrHLDE
   68 D1:B6DA D9 -  -  -  		exx
   69 D1:B6DB -  -  -  -  _I32OrHLDE:		
   70 D1:B6DB 7C -  -  -  		ld 		a,h
   71 D1:B6DC B2 -  -  -  		or 		d
   72 D1:B6DD 67 -  -  -  		ld 		h,a
   73 D1:B6DE 7D -  -  -  		ld 		a,l
   74 D1:B6DF B3 -  -  -  		or 		e
   75 D1:B6E0 6F -  -  -  		ld 		l,a
   76 D1:B6E1 C9 -  -  -  		ret
   77 D1:B6E2 -  -  -  -  
   78 D1:B6E2 -  -  -  -  ; ***************************************************************************************
   79 D1:B6E2 -  -  -  -  ;
   80 D1:B6E2 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B6E2 -  -  -  -  ;
   82 D1:B6E2 -  -  -  -  ; ***************************************************************************************
   83 D1:B6E2 -  -  -  -  
   84 D1:B6E2 -  -  -  -  Int32Xor:
   85 D1:B6E2 D9 -  -  -  		exx
   86 D1:B6E3 CD E8 B6 D1 		call 	_I32XorHLDE
   87 D1:B6E7 D9 -  -  -  		exx
   88 D1:B6E8 -  -  -  -  _I32XorHLDE:		
   89 D1:B6E8 7C -  -  -  		ld 		a,h
   90 D1:B6E9 AA -  -  -  		xor 	d
   91 D1:B6EA 67 -  -  -  		ld 		h,a
   92 D1:B6EB 7D -  -  -  		ld 		a,l
   93 D1:B6EC AB -  -  -  		xor 	e
   94 D1:B6ED 6F -  -  -  		ld 		l,a
   95 D1:B6EE C9 -  -  -  		ret
   96 D1:B6EF -  -  -  -  
   97 D1:B6EF -  -  -  -  ; ***************************************************************************************
   98 D1:B6EF -  -  -  -  ;
   99 D1:B6EF -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B6EF -  -  -  -  ;
  101 D1:B6EF -  -  -  -  ; ***************************************************************************************
  102 D1:B6EF -  -  -  -  
  103 D1:B6EF -  -  -  -  Int32Zero:
  104 D1:B6EF D9 -  -  -  		exx
  105 D1:B6F0 7D -  -  -  		ld 		a,l
  106 D1:B6F1 B4 -  -  -  		or 		h
  107 D1:B6F2 D9 -  -  -  		exx
  108 D1:B6F3 B5 -  -  -  		or 		l
  109 D1:B6F4 B4 -  -  -  		or 		h
  110 D1:B6F5 C9 -  -  -  		ret
  111 D1:B6F6 -  -  -  -  
  112 D1:B6F6 -  -  -  -  ; ***************************************************************************************
  113 D1:B6F6 -  -  -  -  ;
  114 D1:B6F6 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B6F6 -  -  -  -  ;
  116 D1:B6F6 -  -  -  -  ; ***************************************************************************************
  117 D1:B6F6 -  -  -  -  
  118 D1:B6F6 -  -  -  -  Int32Compare:
  119 D1:B6F6 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B6F7 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B6F8 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B6FB D9 -  -  -  		exx
  123 D1:B6FC E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B6FD 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B700 -  -  -  -  		;
  126 D1:B700 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B701 E2 09 B7 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B705 78 -  -  -  		ld 		a,b
  129 D1:B706 EE 80 -  -  		xor 	$80
  130 D1:B708 47 -  -  -  		ld 		b,a
  131 D1:B709 -  -  -  -  _I32CNoOverflow:
  132 D1:B709 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B70A B5 -  -  -  		or 		l
  134 D1:B70B D9 -  -  -  		exx 
  135 D1:B70C B4 -  -  -  		or 		h
  136 D1:B70D B5 -  -  -  		or 		l
  137 D1:B70E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B710 -  -  -  -  		;
  139 D1:B710 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B711 CB 78 -  -  		bit 	7,b
  141 D1:B713 D9 -  -  -  		exx
  142 D1:B714 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B716 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B718 3E FF -  -  		ld 		a,$FF
  145 D1:B71A -  -  -  -  _I32NotPos:
  146 D1:B71A D9 -  -  -  		exx
  147 D1:B71B E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B71C D9 -  -  -  		exx
  149 D1:B71D E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B71E B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B71F C9 -  -  -  		ret
  152 D1:B720 -  -  -  -  
  153 D1:B720 -  -  -  -  ; ***************************************************************************************
  154 D1:B720 -  -  -  -  ;
  155 D1:B720 -  -  -  -  ;										Negate HL'HL
  156 D1:B720 -  -  -  -  ;
  157 D1:B720 -  -  -  -  ; ***************************************************************************************
  158 D1:B720 -  -  -  -  
  159 D1:B720 -  -  -  -  Int32Negate:
  160 D1:B720 AF -  -  -  		xor 	a
  161 D1:B721 CD 2C B7 D1 		call 	_I32NSubtract
  162 D1:B725 D9 -  -  -  		exx
  163 D1:B726 CD 2C B7 D1 		call 	_I32NSubtract
  164 D1:B72A D9 -  -  -  		exx
  165 D1:B72B C9 -  -  -  		ret
  166 D1:B72C -  -  -  -  _I32NSubtract:
  167 D1:B72C D5 -  -  -  		push 	de
  168 D1:B72D EB -  -  -  		ex 		de,hl
  169 D1:B72E 21 00 00 00 		ld 		hl,$0000
  170 D1:B732 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B735 D1 -  -  -  		pop 	de
  172 D1:B736 C9 -  -  -  		ret
  173 D1:B737 -  -  -  -  		
  174 D1:B737 -  -  -  -  ; ***************************************************************************************
  175 D1:B737 -  -  -  -  ;
  176 D1:B737 -  -  -  -  ;									Changes and Updates
  177 D1:B737 -  -  -  -  ;
  178 D1:B737 -  -  -  -  ; ***************************************************************************************
  179 D1:B737 -  -  -  -  ;
  180 D1:B737 -  -  -  -  ;		Date			Notes
  181 D1:B737 -  -  -  -  ;		==== 			=====
  182 D1:B737 -  -  -  -  ;
  183 D1:B737 -  -  -  -  ; ***************************************************************************************
  184 D1:B737 -  -  -  -  		
Listing for file "_build.asm"
   64 D1:B737 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B737 -  -  -  -  ; ***************************************************************************************
    2 D1:B737 -  -  -  -  ; ***************************************************************************************
    3 D1:B737 -  -  -  -  ;
    4 D1:B737 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B737 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B737 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B737 -  -  -  -  ;		Reviewed :	No
    8 D1:B737 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B737 -  -  -  -  ;
   10 D1:B737 -  -  -  -  ; ***************************************************************************************
   11 D1:B737 -  -  -  -  ;
   12 D1:B737 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B737 -  -  -  -  ;
   14 D1:B737 -  -  -  -  ; ***************************************************************************************
   15 D1:B737 -  -  -  -  
   16 D1:B737 -  -  -  -  Int32ToString:
   17 D1:B737 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B738 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B739 E5 -  -  -  		push 	hl
   20 D1:B73A 11 00 00 00 		ld	 	de,$0000
   21 D1:B73E D9 -  -  -  		exx
   22 D1:B73F D5 -  -  -  		push 	de
   23 D1:B740 E5 -  -  -  		push 	hl
   24 D1:B741 11 00 00 00 		ld 		de,$000
   25 D1:B745 D9 -  -  -  		exx
   26 D1:B746 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B747 -  -  -  -  		;
   28 D1:B747 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B749 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B74B ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B74D 5F -  -  -  		ld 		e,a
   32 D1:B74E -  -  -  -  		;
   33 D1:B74E D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B74F CB 7C -  -  		bit 	7,h
   35 D1:B751 D9 -  -  -  		exx
   36 D1:B752 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B754 -  -  -  -  		;
   38 D1:B754 CD 20 B7 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B758 -  -  -  -  		;
   40 D1:B758 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B75A 02 -  -  -  		ld 		(bc),a
   42 D1:B75B 03 -  -  -  		inc 	bc
   43 D1:B75C -  -  -  -  _I32TSNotNegative:	
   44 D1:B75C CD 6B B7 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B760 -  -  -  -  _I32TSExit:
   46 D1:B760 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B762 02 -  -  -  		ld 		(bc),a 
   48 D1:B763 -  -  -  -  
   49 D1:B763 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B764 E1 -  -  -  		pop 	hl
   51 D1:B765 D1 -  -  -  		pop 	de
   52 D1:B766 D9 -  -  -  		exx
   53 D1:B767 E1 -  -  -  		pop 	hl
   54 D1:B768 D1 -  -  -  		pop 	de
   55 D1:B769 C1 -  -  -  		pop 	bc
   56 D1:B76A C9 -  -  -  		ret
   57 D1:B76B -  -  -  -  
   58 D1:B76B -  -  -  -  _I32RecursiveConvert:
   59 D1:B76B CD 78 B5 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B76F F5 -  -  -  		push 	af 							; save remainder
   61 D1:B770 CD EF B6 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B774 C4 6B B7 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B778 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B779 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B77B 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B77D C6 07 -  -  		add 	a,7
   67 D1:B77F -  -  -  -  _I32NotHex:
   68 D1:B77F C6 30 -  -  		add 	a,48
   69 D1:B781 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B782 03 -  -  -  		inc 	bc
   71 D1:B783 C9 -  -  -  		ret		
   72 D1:B784 -  -  -  -  
   73 D1:B784 -  -  -  -  ; ***************************************************************************************
   74 D1:B784 -  -  -  -  ;
   75 D1:B784 -  -  -  -  ;									Changes and Updates
   76 D1:B784 -  -  -  -  ;
   77 D1:B784 -  -  -  -  ; ***************************************************************************************
   78 D1:B784 -  -  -  -  ;
   79 D1:B784 -  -  -  -  ;		Date			Notes
   80 D1:B784 -  -  -  -  ;		==== 			=====
   81 D1:B784 -  -  -  -  ;
   82 D1:B784 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B784 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B784 -  -  -  -  ; ***************************************************************************************
    2 D1:B784 -  -  -  -  ; ***************************************************************************************
    3 D1:B784 -  -  -  -  ;
    4 D1:B784 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B784 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B784 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B784 -  -  -  -  ;		Reviewed :	No
    8 D1:B784 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B784 -  -  -  -  ;
   10 D1:B784 -  -  -  -  ; ***************************************************************************************
   11 D1:B784 -  -  -  -  ; ***************************************************************************************
   12 D1:B784 -  -  -  -  
   13 D1:B784 -  -  -  -  #ifdef AQUARIUS
   14 D1:B784             
   15 D1:B784             ; ***************************************************************************************
   16 D1:B784             ;
   17 D1:B784             ;								Initialise system stuff
   18 D1:B784             ;
   19 D1:B784             ; ***************************************************************************************
   20 D1:B784             
   21 D1:B784             SYSInitialise:
   22 D1:B784             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B784             	call 	SYSPrintChar
   24 D1:B784             	ret
   25 D1:B784             
   26 D1:B784             ; ***************************************************************************************
   27 D1:B784             ;
   28 D1:B784             ;								Terminate system stuff
   29 D1:B784             ;
   30 D1:B784             ; ***************************************************************************************
   31 D1:B784             
   32 D1:B784             SYSTerminate:
   33 D1:B784             	jr 		SYSTerminate
   34 D1:B784             
   35 D1:B784             ; ***************************************************************************************
   36 D1:B784             ;
   37 D1:B784             ;								Print A character
   38 D1:B784             ;
   39 D1:B784             ; ***************************************************************************************
   40 D1:B784             
   41 D1:B784             SYSPrintChar:
   42 D1:B784             	push 	af 									; we stack everything including alt registers
   43 D1:B784             	push 	bc
   44 D1:B784             	push 	de
   45 D1:B784             	push 	hl
   46 D1:B784             	push 	ix
   47 D1:B784             	push 	iy
   48 D1:B784             	exx
   49 D1:B784             	push 	bc
   50 D1:B784             	push 	de
   51 D1:B784             	push 	hl
   52 D1:B784             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B784             	pop 	hl
   54 D1:B784             	pop 	de
   55 D1:B784             	pop 	bc
   56 D1:B784             	exx
   57 D1:B784             	pop 	iy
   58 D1:B784             	pop 	ix
   59 D1:B784             	pop 	hl
   60 D1:B784             	pop 	de
   61 D1:B784             	pop 	bc
   62 D1:B784             	pop 	af
   63 D1:B784             	ret		
   64 D1:B784             
   65 D1:B784             ; ***************************************************************************************
   66 D1:B784             ;
   67 D1:B784             ;									Print Newline
   68 D1:B784             ;
   69 D1:B784             ; ***************************************************************************************
   70 D1:B784             
   71 D1:B784             SYSPrintCRLF:
   72 D1:B784             	push 	af
   73 D1:B784             	ld 		a,13
   74 D1:B784             	call 	SYSPrintChar
   75 D1:B784             	ld 		a,10
   76 D1:B784             	call 	SYSPrintChar
   77 D1:B784             	pop 	af
   78 D1:B784             	ret
   79 D1:B784             
   80 D1:B784             ; ***************************************************************************************
   81 D1:B784             ;
   82 D1:B784             ;									Get time into HL'HL
   83 D1:B784             ;
   84 D1:B784             ; ***************************************************************************************
   85 D1:B784             
   86 D1:B784             SYSGetTimer:
   87 D1:B784              	in 		a,($00)
   88 D1:B784              	ld 		l,a
   89 D1:B784              	in 		a,($01)
   90 D1:B784              	ld 		h,a
   91 D1:B784              	exx
   92 D1:B784              	in 		a,($02)
   93 D1:B784              	ld 		l,a
   94 D1:B784              	in 		a,($03)
   95 D1:B784              	ld 		h,a
   96 D1:B784              	exx
   97 D1:B784             	ret 	
   98 D1:B784             	
   99 D1:B784             #endif
  100 D1:B784 -  -  -  -  
  101 D1:B784 -  -  -  -  ; ***************************************************************************************
  102 D1:B784 -  -  -  -  ;
  103 D1:B784 -  -  -  -  ;									Changes and Updates
  104 D1:B784 -  -  -  -  ;
  105 D1:B784 -  -  -  -  ; ***************************************************************************************
  106 D1:B784 -  -  -  -  ;
  107 D1:B784 -  -  -  -  ;		Date			Notes
  108 D1:B784 -  -  -  -  ;		==== 			=====
  109 D1:B784 -  -  -  -  ;
  110 D1:B784 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B784 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B784 -  -  -  -  ; ***************************************************************************************
    2 D1:B784 -  -  -  -  ; ***************************************************************************************
    3 D1:B784 -  -  -  -  ;
    4 D1:B784 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B784 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B784 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B784 -  -  -  -  ;		Reviewed :	No
    8 D1:B784 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B784 -  -  -  -  ;
   10 D1:B784 -  -  -  -  ; ***************************************************************************************
   11 D1:B784 -  -  -  -  ; ***************************************************************************************
   12 D1:B784 -  -  -  -  
   13 D1:B784 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B784             
   15 D1:B784             ; ***************************************************************************************
   16 D1:B784             ;
   17 D1:B784             ;								Initialise system stuff
   18 D1:B784             ;
   19 D1:B784             ; ***************************************************************************************
   20 D1:B784             
   21 D1:B784             SYSInitialise:
   22 D1:B784             	ret
   23 D1:B784             
   24 D1:B784             ; ***************************************************************************************
   25 D1:B784             ;
   26 D1:B784             ;								Terminate system stuff
   27 D1:B784             ;
   28 D1:B784             ; ***************************************************************************************
   29 D1:B784             
   30 D1:B784             SYSTerminate:
   31 D1:B784             	ret
   32 D1:B784             
   33 D1:B784             ; ***************************************************************************************
   34 D1:B784             ;
   35 D1:B784             ;								Print A character
   36 D1:B784             ;
   37 D1:B784             ; ***************************************************************************************
   38 D1:B784             
   39 D1:B784             SYSPrintChar:
   40 D1:B784             	ret		
   41 D1:B784             
   42 D1:B784             ; ***************************************************************************************
   43 D1:B784             ;
   44 D1:B784             ;									Print Newline
   45 D1:B784             ;
   46 D1:B784             ; ***************************************************************************************
   47 D1:B784             
   48 D1:B784             SYSPrintCRLF:
   49 D1:B784             	ret
   50 D1:B784             
   51 D1:B784             ; ***************************************************************************************
   52 D1:B784             ;
   53 D1:B784             ;									Get time into HL'HL
   54 D1:B784             ;
   55 D1:B784             ; ***************************************************************************************
   56 D1:B784             
   57 D1:B784             SYSGetTimer:
   58 D1:B784             	ret
   59 D1:B784             
   60 D1:B784             #endif
   61 D1:B784 -  -  -  -  
   62 D1:B784 -  -  -  -  ; ***************************************************************************************
   63 D1:B784 -  -  -  -  ;
   64 D1:B784 -  -  -  -  ;									Changes and Updates
   65 D1:B784 -  -  -  -  ;
   66 D1:B784 -  -  -  -  ; ***************************************************************************************
   67 D1:B784 -  -  -  -  ;
   68 D1:B784 -  -  -  -  ;		Date			Notes
   69 D1:B784 -  -  -  -  ;		==== 			=====
   70 D1:B784 -  -  -  -  ;
   71 D1:B784 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B784 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B784 -  -  -  -  ; ***************************************************************************************
    2 D1:B784 -  -  -  -  ; ***************************************************************************************
    3 D1:B784 -  -  -  -  ;
    4 D1:B784 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B784 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B784 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B784 -  -  -  -  ;		Reviewed :	No
    8 D1:B784 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B784 -  -  -  -  ;
   10 D1:B784 -  -  -  -  ; ***************************************************************************************
   11 D1:B784 -  -  -  -  ; ***************************************************************************************
   12 D1:B784 -  -  -  -  
   13 D1:B784 -  -  -  -  #ifdef TI84
   14 D1:B784 -  -  -  -  
   15 D1:B784 -  -  -  -  ; ***************************************************************************************
   16 D1:B784 -  -  -  -  ;
   17 D1:B784 -  -  -  -  ;								Initialise system stuff
   18 D1:B784 -  -  -  -  ;
   19 D1:B784 -  -  -  -  ; ***************************************************************************************
   20 D1:B784 -  -  -  -  
   21 D1:B784 -  -  -  -  SYSInitialise:
   22 D1:B784 F3 -  -  -  	di
   23 D1:B785 ED 73 A2 B7 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B78A FD 22 A6 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B78F C9 -  -  -  	ret
   26 D1:B790 -  -  -  -  
   27 D1:B790 -  -  -  -  ; ***************************************************************************************
   28 D1:B790 -  -  -  -  ;
   29 D1:B790 -  -  -  -  ;								Terminate system stuff
   30 D1:B790 -  -  -  -  ;
   31 D1:B790 -  -  -  -  ; ***************************************************************************************
   32 D1:B790 -  -  -  -  
   33 D1:B790 -  -  -  -  SYSTerminate:
   34 D1:B790 ED 7B A2 B7 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B795 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B797 FD 2A A6 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B79C FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B7A0 FB -  -  -  	ei
   39 D1:B7A1 C9 -  -  -  	ret 										; and exit.
   40 D1:B7A2 -  -  -  -  
   41 D1:B7A2 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B7A2 00 00 00 00 	.dw 	0,0
   43 D1:B7A6 -  -  -  -  _IYTemp84:
   44 D1:B7A6 00 00 00 00 	.dw 	0,0		
   45 D1:B7AA -  -  -  -  
   46 D1:B7AA -  -  -  -  ; ***************************************************************************************
   47 D1:B7AA -  -  -  -  ;
   48 D1:B7AA -  -  -  -  ;								Print A character
   49 D1:B7AA -  -  -  -  ;
   50 D1:B7AA -  -  -  -  ; ***************************************************************************************
   51 D1:B7AA -  -  -  -  
   52 D1:B7AA -  -  -  -  SYSPrintChar:
   53 D1:B7AA F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B7AB C5 -  -  -  	push 	bc
   55 D1:B7AC D5 -  -  -  	push 	de
   56 D1:B7AD E5 -  -  -  	push 	hl
   57 D1:B7AE DD E5 -  -  	push 	ix
   58 D1:B7B0 FD E5 -  -  	push 	iy
   59 D1:B7B2 D9 -  -  -  	exx
   60 D1:B7B3 C5 -  -  -  	push 	bc
   61 D1:B7B4 D5 -  -  -  	push 	de
   62 D1:B7B5 E5 -  -  -  	push 	hl
   63 D1:B7B6 -  -  -  -  
   64 D1:B7B6 FD 2A A6 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B7BB CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B7BF F3 -  -  -  	di
   67 D1:B7C0 FD 22 A6 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B7C5 -  -  -  -  
   69 D1:B7C5 E1 -  -  -  	pop 	hl
   70 D1:B7C6 D1 -  -  -  	pop 	de
   71 D1:B7C7 C1 -  -  -  	pop 	bc
   72 D1:B7C8 D9 -  -  -  	exx
   73 D1:B7C9 FD E1 -  -  	pop 	iy
   74 D1:B7CB DD E1 -  -  	pop 	ix
   75 D1:B7CD E1 -  -  -  	pop 	hl
   76 D1:B7CE D1 -  -  -  	pop 	de
   77 D1:B7CF C1 -  -  -  	pop 	bc
   78 D1:B7D0 F1 -  -  -  	pop 	af
   79 D1:B7D1 C9 -  -  -  	ret		
   80 D1:B7D2 -  -  -  -  
   81 D1:B7D2 -  -  -  -  ; ***************************************************************************************
   82 D1:B7D2 -  -  -  -  ;
   83 D1:B7D2 -  -  -  -  ;									Print Newline
   84 D1:B7D2 -  -  -  -  ;
   85 D1:B7D2 -  -  -  -  ; ***************************************************************************************
   86 D1:B7D2 -  -  -  -  
   87 D1:B7D2 -  -  -  -  SYSPrintCRLF:
   88 D1:B7D2 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B7D3 C5 -  -  -  	push 	bc
   90 D1:B7D4 D5 -  -  -  	push 	de
   91 D1:B7D5 E5 -  -  -  	push 	hl
   92 D1:B7D6 DD E5 -  -  	push 	ix
   93 D1:B7D8 FD E5 -  -  	push 	iy
   94 D1:B7DA D9 -  -  -  	exx
   95 D1:B7DB C5 -  -  -  	push 	bc
   96 D1:B7DC D5 -  -  -  	push 	de
   97 D1:B7DD E5 -  -  -  	push 	hl
   98 D1:B7DE -  -  -  -  
   99 D1:B7DE FD 2A A6 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B7E3 CD F0 07 02 	call 	_newline
  101 D1:B7E7 F3 -  -  -  	di
  102 D1:B7E8 FD 22 A6 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B7ED -  -  -  -  
  104 D1:B7ED E1 -  -  -  	pop 	hl
  105 D1:B7EE D1 -  -  -  	pop 	de
  106 D1:B7EF C1 -  -  -  	pop 	bc
  107 D1:B7F0 D9 -  -  -  	exx
  108 D1:B7F1 FD E1 -  -  	pop 	iy
  109 D1:B7F3 DD E1 -  -  	pop 	ix
  110 D1:B7F5 E1 -  -  -  	pop 	hl
  111 D1:B7F6 D1 -  -  -  	pop 	de
  112 D1:B7F7 C1 -  -  -  	pop 	bc
  113 D1:B7F8 F1 -  -  -  	pop 	af
  114 D1:B7F9 C9 -  -  -  	ret
  115 D1:B7FA -  -  -  -  
  116 D1:B7FA -  -  -  -  ; ***************************************************************************************
  117 D1:B7FA -  -  -  -  ;
  118 D1:B7FA -  -  -  -  ;									Get time into HL'HL
  119 D1:B7FA -  -  -  -  ;
  120 D1:B7FA -  -  -  -  ; ***************************************************************************************
  121 D1:B7FA -  -  -  -  
  122 D1:B7FA -  -  -  -  SYSGetTimer:
  123 D1:B7FA 21 34 12 00 	ld 		hl,$1234
  124 D1:B7FE D9 -  -  -  	exx
  125 D1:B7FF 21 78 56 00 	ld 		hl,$5678
  126 D1:B803 D9 -  -  -  	exx
  127 D1:B804 C9 -  -  -  	ret
  128 D1:B805 -  -  -  -  
  129 D1:B805 -  -  -  -  #endif
  130 D1:B805 -  -  -  -  
  131 D1:B805 -  -  -  -  ; ***************************************************************************************
  132 D1:B805 -  -  -  -  ;
  133 D1:B805 -  -  -  -  ;									Changes and Updates
  134 D1:B805 -  -  -  -  ;
  135 D1:B805 -  -  -  -  ; ***************************************************************************************
  136 D1:B805 -  -  -  -  ;
  137 D1:B805 -  -  -  -  ;		Date			Notes
  138 D1:B805 -  -  -  -  ;		==== 			=====
  139 D1:B805 -  -  -  -  ;
  140 D1:B805 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B805 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B805 -  -  -  -  ; ***************************************************************************************
    2 D1:B805 -  -  -  -  ; ***************************************************************************************
    3 D1:B805 -  -  -  -  ;
    4 D1:B805 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B805 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B805 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B805 -  -  -  -  ;		Reviewed :	No
    8 D1:B805 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B805 -  -  -  -  ;
   10 D1:B805 -  -  -  -  ; ***************************************************************************************
   11 D1:B805 -  -  -  -  ; ***************************************************************************************
   12 D1:B805 -  -  -  -  
   13 D1:B805 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 D1:BC00 -  -  -  -  TestInstance:
   15 D1:BC00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:BC00 -  -  -  -  ;
    2 D1:BC00 -  -  -  -  ;	This code automatically generated.
    3 D1:BC00 -  -  -  -  ;
    4 D1:BC00 -  -  -  -  TestProgram:
    5 D1:BC00 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0C 02 00 
              BD 13 04 12 
              13 95 44 A5 
              80 0D 03 00 
              13 04 12 13 
              95 40 A5 8F 
              6A 80 0E 04 
              00 13 04 12 
              13 95 41 A5 
              8F 46 67 80 
              0E 05 00 13 
              04 12 13 95 
              42 A5 8F 46 
              68 80 0E 06 
              00 13 04 12 
              13 95 43 A5 
              8F 46 6A 80 
              0E 07 00 13 
              04 12 13 95 
              44 A5 8F 46 
              6C 80 0C 08 
              00 C1 13 04 
              12 13 95 40 
              A5 80 0C 09 
              00 C1 13 04 
              12 13 95 41 
              A5 80 0C 0A 
              00 C1 13 04 
              12 13 95 42 
              A5 80 0C 0B 
              00 C1 13 04 
              12 13 95 43 
              A5 80 0C 0C 
              00 C1 13 04 
              12 13 95 44 
              A5 80 0C 0D 
              00 C1 13 04 
              12 13 95 45 
              A5 80 00 -  	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0c,$02,$00,$bd,$13,$04,$12,$13,$95,$44,$a5,$80,$0d,$03,$00,$13,$04,$12,$13,$95,$40,$a5,$8f,$6a,$80,$0e,$04,$00,$13,$04,$12,$13,$95,$41,$a5,$8f,$46,$67,$80,$0e,$05,$00,$13,$04,$12,$13,$95,$42,$a5,$8f,$46,$68,$80,$0e,$06,$00,$13,$04,$12,$13,$95,$43,$a5,$8f,$46,$6a,$80,$0e,$07,$00,$13,$04,$12,$13,$95,$44,$a5,$8f,$46,$6c,$80,$0c,$08,$00,$c1,$13,$04,$12,$13,$95,$40,$a5,$80,$0c,$09,$00,$c1,$13,$04,$12,$13,$95,$41,$a5,$80,$0c,$0a,$00,$c1,$13,$04,$12,$13,$95,$42,$a5,$80,$0c,$0b,$00,$c1,$13,$04,$12,$13,$95,$43,$a5,$80,$0c,$0c,$00,$c1,$13,$04,$12,$13,$95,$44,$a5,$80,$0c,$0d,$00,$c1,$13,$04,$12,$13,$95,$45,$a5,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:BCBB 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:CCBB -  -  -  -  EndTestInstance:
   18 D1:CCBB -  -  -  -  		
   19 D1:CCBB -  -  -  -  ; ***************************************************************************************
   20 D1:CCBB -  -  -  -  ;
   21 D1:CCBB -  -  -  -  ;									Changes and Updates
   22 D1:CCBB -  -  -  -  ;
   23 D1:CCBB -  -  -  -  ; ***************************************************************************************
   24 D1:CCBB -  -  -  -  ;
   25 D1:CCBB -  -  -  -  ;		Date			Notes
   26 D1:CCBB -  -  -  -  ;		==== 			=====
   27 D1:CCBB -  -  -  -  ;
   28 D1:CCBB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:CCBB -  -  -  -  FinalAddress:
