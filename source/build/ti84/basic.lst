    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD CA B6 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 2D C8 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 6C B0 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 E1 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 56 AA D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD F0 B6 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD D6 B6 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 13 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 13 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   53 D1:A8C9 00 00 00 00 		.dw 	0,0
   54 D1:A8CD -  -  -  -  
   55 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   56 D1:A8CD 00 00 00 00 		.dw 	0,0		
   57 D1:A8D1 -  -  -  -  
   58 D1:A8D1 -  -  -  -  ;
   59 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   60 D1:A8D1 -  -  -  -  ;
   61 D1:A8D1 -  -  -  -  
   62 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   63 D1:A8D1 00 00 00 00 		.dw 	0,0
   64 D1:A8D5 -  -  -  -  		
   65 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   66 D1:A8D5 00 00 00 00 		.dw 	0,0
   67 D1:A8D9 -  -  -  -  
   68 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   69 D1:A8D9 -  -  -  -  ;
   70 D1:A8D9 -  -  -  -  ;										Run variables
   71 D1:A8D9 -  -  -  -  ;
   72 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   73 D1:A8D9 -  -  -  -  
   74 D1:A8D9 -  -  -  -  CurrentLineStart: 							; Start of current line.
   75 D1:A8D9 00 00 00 00 		.dw 	0,0
   76 D1:A8DD -  -  -  -  		
   77 D1:A8DD -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   78 D1:A8DD 00 00 00 00 		.dw 	0,0
   79 D1:A8E1 -  -  -  -  
   80 D1:A8E1 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   81 D1:A8E1 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   82 D1:A8E7 -  -  -  -  
   83 D1:A8E7 -  -  -  -  AConvert: 									; used for address conversions.
   84 D1:A8E7 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   85 D1:A8ED -  -  -  -  		
   86 D1:A8ED -  -  -  -  RandomSeed: 								; random number seeds.
   87 D1:A8ED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   88 D1:A8FD -  -  -  -  
   89 D1:A8FD -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   90 D1:A8FD 00 00 -  -  		.dw 	0
   91 D1:A8FF -  -  -  -  
   92 D1:A8FF -  -  -  -  ; ***************************************************************************************
   93 D1:A8FF -  -  -  -  ;
   94 D1:A8FF -  -  -  -  ;									Variable Information
   95 D1:A8FF -  -  -  -  ;
   96 D1:A8FF -  -  -  -  ; ***************************************************************************************
   97 D1:A8FF -  -  -  -  
   98 D1:A8FF -  -  -  -  VarNameStart: 								; first byte of name
   99 D1:A8FF 00 00 00 00 		.dw 	0,0
  100 D1:A903 -  -  -  -  VarHash: 									; name hash value
  101 D1:A903 00 00 -  -  		.dw 	0		
  102 D1:A905 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  103 D1:A905 00 00 00 00 		.dw 	0,0
  104 D1:A909 -  -  -  -  		
  105 D1:A909 -  -  -  -  ; ***************************************************************************************
  106 D1:A909 -  -  -  -  ;
  107 D1:A909 -  -  -  -  ;										  Buffers
  108 D1:A909 -  -  -  -  ;
  109 D1:A909 -  -  -  -  ; ***************************************************************************************
  110 D1:A909 -  -  -  -  
  111 D1:A909 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  112 D1:A909 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  113 D1:A919 -  -  -  -  
  114 D1:A919 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  115 D1:A919 00 00 -  -  		.dw 	0
  116 D1:A91B -  -  -  -  
  117 D1:A91B -  -  -  -  ConvertBuffer: 								; general usage
  118 D1:A91B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  119 D1:A95B -  -  -  -  
  120 D1:A95B -  -  -  -  ; ***************************************************************************************
  121 D1:A95B -  -  -  -  ;
  122 D1:A95B -  -  -  -  ;									Changes and Updates
  123 D1:A95B -  -  -  -  ;
  124 D1:A95B -  -  -  -  ; ***************************************************************************************
  125 D1:A95B -  -  -  -  ;
  126 D1:A95B -  -  -  -  ;		Date			Notes
  127 D1:A95B -  -  -  -  ;		==== 			=====
  128 D1:A95B -  -  -  -  ;
  129 D1:A95B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A95B -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A95B -  -  -  -  ; ***************************************************************************************
    2 D1:A95B -  -  -  -  ; ***************************************************************************************
    3 D1:A95B -  -  -  -  ;
    4 D1:A95B -  -  -  -  ;		Name : 		assert.asm
    5 D1:A95B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95B -  -  -  -  ;		Reviewed :	No
    8 D1:A95B -  -  -  -  ;		Purpose :	Assert command
    9 D1:A95B -  -  -  -  ;
   10 D1:A95B -  -  -  -  ; ***************************************************************************************
   11 D1:A95B -  -  -  -  ; ***************************************************************************************
   12 D1:A95B -  -  -  -  
   13 D1:A95B -  -  -  -  ; ***************************************************************************************
   14 D1:A95B -  -  -  -  ;
   15 D1:A95B -  -  -  -  ;									ASSERT command
   16 D1:A95B -  -  -  -  ;
   17 D1:A95B -  -  -  -  ; ***************************************************************************************
   18 D1:A95B -  -  -  -  
   19 D1:A95B -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A95B CD 46 AD D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A95F 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A965 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A966 3E 01 C3 13 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A96C -  -  -  -  
   25 D1:A96C -  -  -  -  ; ***************************************************************************************
   26 D1:A96C -  -  -  -  ;
   27 D1:A96C -  -  -  -  ;									Changes and Updates
   28 D1:A96C -  -  -  -  ;
   29 D1:A96C -  -  -  -  ; ***************************************************************************************
   30 D1:A96C -  -  -  -  ;
   31 D1:A96C -  -  -  -  ;		Date			Notes
   32 D1:A96C -  -  -  -  ;		==== 			=====
   33 D1:A96C -  -  -  -  ;
   34 D1:A96C -  -  -  -  ; ***************************************************************************************
   35 D1:A96C -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A96C -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A96C -  -  -  -  ; ***************************************************************************************
    2 D1:A96C -  -  -  -  ; ***************************************************************************************
    3 D1:A96C -  -  -  -  ;
    4 D1:A96C -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A96C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A96C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A96C -  -  -  -  ;		Reviewed :	No
    8 D1:A96C -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A96C -  -  -  -  ;
   10 D1:A96C -  -  -  -  ; ***************************************************************************************
   11 D1:A96C -  -  -  -  ; ***************************************************************************************
   12 D1:A96C -  -  -  -  
   13 D1:A96C -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A96C -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A96C -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A96C -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A96C -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A96C -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A96C C3 7D AB D1 		jp 		SyntaxError
   20 D1:A970 -  -  -  -  
   21 D1:A970 -  -  -  -  ; ***************************************************************************************
   22 D1:A970 -  -  -  -  ;
   23 D1:A970 -  -  -  -  ;									Changes and Updates
   24 D1:A970 -  -  -  -  ;
   25 D1:A970 -  -  -  -  ; ***************************************************************************************
   26 D1:A970 -  -  -  -  ;
   27 D1:A970 -  -  -  -  ;		Date			Notes
   28 D1:A970 -  -  -  -  ;		==== 			=====
   29 D1:A970 -  -  -  -  ;
   30 D1:A970 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A970 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A970 -  -  -  -  ; ***************************************************************************************
    2 D1:A970 -  -  -  -  ; ***************************************************************************************
    3 D1:A970 -  -  -  -  ;
    4 D1:A970 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A970 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A970 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A970 -  -  -  -  ;		Reviewed :	No
    8 D1:A970 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A970 -  -  -  -  ;
   10 D1:A970 -  -  -  -  ; ***************************************************************************************
   11 D1:A970 -  -  -  -  ; ***************************************************************************************
   12 D1:A970 -  -  -  -  
   13 D1:A970 -  -  -  -  ; ***************************************************************************************
   14 D1:A970 -  -  -  -  ;
   15 D1:A970 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A970 -  -  -  -  ;
   17 D1:A970 -  -  -  -  ; ***************************************************************************************
   18 D1:A970 -  -  -  -  
   19 D1:A970 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A970 C9 -  -  -  		ret
   21 D1:A971 -  -  -  -  
   22 D1:A971 -  -  -  -  ; ***************************************************************************************
   23 D1:A971 -  -  -  -  ;
   24 D1:A971 -  -  -  -  ;									Changes and Updates
   25 D1:A971 -  -  -  -  ;
   26 D1:A971 -  -  -  -  ; ***************************************************************************************
   27 D1:A971 -  -  -  -  ;
   28 D1:A971 -  -  -  -  ;		Date			Notes
   29 D1:A971 -  -  -  -  ;		==== 			=====
   30 D1:A971 -  -  -  -  ;
   31 D1:A971 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A971 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A971 -  -  -  -  ; ***************************************************************************************
    2 D1:A971 -  -  -  -  ; ***************************************************************************************
    3 D1:A971 -  -  -  -  ;
    4 D1:A971 -  -  -  -  ;		Name : 		end.asm
    5 D1:A971 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A971 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A971 -  -  -  -  ;		Reviewed :	No
    8 D1:A971 -  -  -  -  ;		Purpose :	End command
    9 D1:A971 -  -  -  -  ;
   10 D1:A971 -  -  -  -  ; ***************************************************************************************
   11 D1:A971 -  -  -  -  ; ***************************************************************************************
   12 D1:A971 -  -  -  -  
   13 D1:A971 -  -  -  -  ; ***************************************************************************************
   14 D1:A971 -  -  -  -  ;
   15 D1:A971 -  -  -  -  ;										END command
   16 D1:A971 -  -  -  -  ;
   17 D1:A971 -  -  -  -  ; ***************************************************************************************
   18 D1:A971 -  -  -  -  
   19 D1:A971 -  -  -  -  Command_END: 	;; [end]
   20 D1:A971 3E 00 C3 13 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A977 -  -  -  -  
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  ;
   24 D1:A977 -  -  -  -  ;									Changes and Updates
   25 D1:A977 -  -  -  -  ;
   26 D1:A977 -  -  -  -  ; ***************************************************************************************
   27 D1:A977 -  -  -  -  ;
   28 D1:A977 -  -  -  -  ;		Date			Notes
   29 D1:A977 -  -  -  -  ;		==== 			=====
   30 D1:A977 -  -  -  -  ;
   31 D1:A977 -  -  -  -  ; ***************************************************************************************
   32 D1:A977 -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A977 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A977 -  -  -  -  ; ***************************************************************************************
    2 D1:A977 -  -  -  -  ; ***************************************************************************************
    3 D1:A977 -  -  -  -  ;
    4 D1:A977 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A977 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A977 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A977 -  -  -  -  ;		Reviewed :	None
    8 D1:A977 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A977 -  -  -  -  ;
   10 D1:A977 -  -  -  -  ; ***************************************************************************************
   11 D1:A977 -  -  -  -  ; ***************************************************************************************
   12 D1:A977 -  -  -  -  
   13 D1:A977 -  -  -  -  ; ***************************************************************************************
   14 D1:A977 -  -  -  -  ;
   15 D1:A977 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A977 -  -  -  -  ;
   17 D1:A977 -  -  -  -  ; ***************************************************************************************
   18 D1:A977 -  -  -  -  
   19 D1:A977 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A977 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A97C 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A980 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A983 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A985 -  -  -  -  		;
   25 D1:A985 ED 7B DD A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A98A C3 69 AA D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A98E -  -  -  -  
   28 D1:A98E -  -  -  -  ; ***************************************************************************************
   29 D1:A98E -  -  -  -  ;
   30 D1:A98E -  -  -  -  ;									Changes and Updates
   31 D1:A98E -  -  -  -  ;
   32 D1:A98E -  -  -  -  ; ***************************************************************************************
   33 D1:A98E -  -  -  -  ;
   34 D1:A98E -  -  -  -  ;		Date			Notes
   35 D1:A98E -  -  -  -  ;		==== 			=====
   36 D1:A98E -  -  -  -  ;
   37 D1:A98E -  -  -  -  ; ***************************************************************************************
   38 D1:A98E -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A98E -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:A98E -  -  -  -  ; ***************************************************************************************
    2 D1:A98E -  -  -  -  ; ***************************************************************************************
    3 D1:A98E -  -  -  -  ;
    4 D1:A98E -  -  -  -  ;		Name : 		let.asm
    5 D1:A98E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A98E -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A98E -  -  -  -  ;		Reviewed :	No
    8 D1:A98E -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:A98E -  -  -  -  ;
   10 D1:A98E -  -  -  -  ; ***************************************************************************************
   11 D1:A98E -  -  -  -  ; ***************************************************************************************
   12 D1:A98E -  -  -  -  
   13 D1:A98E -  -  -  -  ; ***************************************************************************************
   14 D1:A98E -  -  -  -  ;
   15 D1:A98E -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:A98E -  -  -  -  ;
   17 D1:A98E -  -  -  -  ; ***************************************************************************************
   18 D1:A98E -  -  -  -  
   19 D1:A98E -  -  -  -  Command_LET: 	;; [let]
   20 D1:A98E DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:A991 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:A993 28 2F -  -  		jr 		z,_CLString
   23 D1:A995 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:A997 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:A999 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:A99B 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:A99F -  -  -  -  _CLNoAuto:
   28 D1:A99F 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:A9A1 CD C8 AC D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:A9A5 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:A9A7 CA 7D AB D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:A9AB E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:A9AC C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:A9AD AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:A9AE 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:A9B2 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:A9B4 CD 07 AB D1 		call 	CheckNextA
   38 D1:A9B8 -  -  -  -  
   39 D1:A9B8 CD 3E AD D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:A9BC -  -  -  -  
   41 D1:A9BC D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:A9BD 43 -  -  -  		ld 		b,e 						
   43 D1:A9BE D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:A9BF -  -  -  -  		;
   45 D1:A9BF -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:A9BF -  -  -  -  		;
   47 D1:A9BF CD CC A9 D1 		call 	WriteHLToDE
   48 D1:A9C3 C9 -  -  -  		ret
   49 D1:A9C4 -  -  -  -  		;
   50 D1:A9C4 -  -  -  -  		; 		String assignment code.
   51 D1:A9C4 -  -  -  -  		;
   52 D1:A9C4 -  -  -  -  _CLString:
   53 D1:A9C4 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:A9CC -  -  -  -  
   55 D1:A9CC -  -  -  -  ; ***************************************************************************************
   56 D1:A9CC -  -  -  -  ;
   57 D1:A9CC -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:A9CC -  -  -  -  ;
   59 D1:A9CC -  -  -  -  ; ***************************************************************************************
   60 D1:A9CC -  -  -  -  
   61 D1:A9CC -  -  -  -  WriteHLToDE:
   62 D1:A9CC CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:A9CE C2 71 AB D1 		jp 		nz,TypeMismatch
   64 D1:A9D2 -  -  -  -  		;
   65 D1:A9D2 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:A9D2 -  -  -  -  		;		
   67 D1:A9D2 -  -  -  -  _WHDWriteNumber:
   68 D1:A9D2 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:A9D3 D9 -  -  -  		exx
   70 D1:A9D4 EB -  -  -  		ex 		de,hl
   71 D1:A9D5 D9 -  -  -  		exx
   72 D1:A9D6 -  -  -  -  
   73 D1:A9D6 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:A9D7 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:A9D8 72 -  -  -  		ld 		(hl),d
   76 D1:A9D9 23 -  -  -  		inc 	hl
   77 D1:A9DA E5 -  -  -  		push 	hl
   78 D1:A9DB D9 -  -  -  		exx
   79 D1:A9DC E1 -  -  -  		pop 	hl
   80 D1:A9DD 73 -  -  -  		ld 		(hl),e
   81 D1:A9DE 23 -  -  -  		inc 	hl
   82 D1:A9DF 72 -  -  -  		ld 		(hl),d
   83 D1:A9E0 D9 -  -  -  		exx
   84 D1:A9E1 -  -  -  -  
   85 D1:A9E1 C9 -  -  -  		ret
   86 D1:A9E2 -  -  -  -  
   87 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   88 D1:A9E2 -  -  -  -  ;
   89 D1:A9E2 -  -  -  -  ;									Changes and Updates
   90 D1:A9E2 -  -  -  -  ;
   91 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   92 D1:A9E2 -  -  -  -  ;
   93 D1:A9E2 -  -  -  -  ;		Date			Notes
   94 D1:A9E2 -  -  -  -  ;		==== 			=====
   95 D1:A9E2 -  -  -  -  ;
   96 D1:A9E2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 D1:A9E2 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:A9E2 -  -  -  -  ; ***************************************************************************************
    2 D1:A9E2 -  -  -  -  ; ***************************************************************************************
    3 D1:A9E2 -  -  -  -  ;
    4 D1:A9E2 -  -  -  -  ;		Name : 		print.asm
    5 D1:A9E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9E2 -  -  -  -  ;		Reviewed :	No
    8 D1:A9E2 -  -  -  -  ;		Purpose :	Print command
    9 D1:A9E2 -  -  -  -  ;
   10 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   11 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   12 D1:A9E2 -  -  -  -  
   13 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   14 D1:A9E2 -  -  -  -  ;
   15 D1:A9E2 -  -  -  -  ;										PRINT command
   16 D1:A9E2 -  -  -  -  ;
   17 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   18 D1:A9E2 -  -  -  -  
   19 D1:A9E2 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:A9E2 -  -  -  -  		;
   21 D1:A9E2 -  -  -  -  		;		Main loop
   22 D1:A9E2 -  -  -  -  		;
   23 D1:A9E2 -  -  -  -  _CPRLoop:
   24 D1:A9E2 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:A9E5 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:A9E7 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:A9E9 FE A7 -  -  		cp 		KWD_COLON 	
   28 D1:A9EB 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:A9ED FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:A9EF 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:A9F1 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:A9F3 28 2C -  -  		jr 		z,_CPRTab
   33 D1:A9F5 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:A9F7 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:A9F9 -  -  -  -  		;
   36 D1:A9F9 CD 3E AD D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:A9FD CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:A9FF 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:AA01 -  -  -  -  		;
   40 D1:AA01 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:AA03 -  -  -  -  _CPRPrintNumber:
   42 D1:AA03 F5 -  -  -  		push 	af 							; print leading space
   43 D1:AA04 3E 20 -  -  		ld 		a,' '
   44 D1:AA06 CD F0 B6 D1 		call 	SYSPrintChar
   45 D1:AA0A F1 -  -  -  		pop 	af
   46 D1:AA0B 01 1B A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AA0F C5 -  -  -  		push 	bc
   48 D1:AA10 CD 7D B6 D1 		call 	Int32ToString 				; convert to string
   49 D1:AA14 E1 -  -  -  		pop 	hl
   50 D1:AA15 -  -  -  -  		;
   51 D1:AA15 -  -  -  -  		; 		Print text at HL.
   52 D1:AA15 -  -  -  -  		;
   53 D1:AA15 -  -  -  -  _CPRPrintHL:
   54 D1:AA15 CD 8B B0 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AA19 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AA1B -  -  -  -  		;
   57 D1:AA1B -  -  -  -  		; 		New line (')
   58 D1:AA1B -  -  -  -  		;
   59 D1:AA1B -  -  -  -  _CPRNewLine:
   60 D1:AA1B CD 18 B7 D1 		call 	SYSPrintCRLF
   61 D1:AA1F 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:AA21 -  -  -  -  		;
   63 D1:AA21 -  -  -  -  		; 		Tab command (,)
   64 D1:AA21 -  -  -  -  		;
   65 D1:AA21 -  -  -  -  _CPRTab:
   66 D1:AA21 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:AA23 CD F0 B6 D1 		call 	SYSPrintChar
   68 D1:AA27 -  -  -  -  		;
   69 D1:AA27 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:AA27 -  -  -  -  		;
   71 D1:AA27 -  -  -  -  _CPRCheckNext:
   72 D1:AA27 DD 23 -  -  		inc 	ix 							; consume current
   73 D1:AA29 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:AA2C FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:AA2E C8 -  -  -  		ret 	z
   76 D1:AA2F FE A7 -  -  		cp 		KWD_COLON
   77 D1:AA31 C8 -  -  -  		ret 	z
   78 D1:AA32 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:AA34 -  -  -  -  		;
   80 D1:AA34 -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:AA34 -  -  -  -  		;
   82 D1:AA34 -  -  -  -  _CPRExitNL:
   83 D1:AA34 CD 18 B7 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:AA38 C9 -  -  -  		ret
Listing for file "_build.asm"
   20 D1:AA39 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AA39 -  -  -  -  ; ***************************************************************************************
    2 D1:AA39 -  -  -  -  ; ***************************************************************************************
    3 D1:AA39 -  -  -  -  ;
    4 D1:AA39 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AA39 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA39 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA39 -  -  -  -  ;		Reviewed :	No
    8 D1:AA39 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AA39 -  -  -  -  ;
   10 D1:AA39 -  -  -  -  ; ***************************************************************************************
   11 D1:AA39 -  -  -  -  ; ***************************************************************************************
   12 D1:AA39 -  -  -  -  
   13 D1:AA39 -  -  -  -  ; ***************************************************************************************
   14 D1:AA39 -  -  -  -  ;
   15 D1:AA39 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AA39 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AA39 -  -  -  -  ;
   18 D1:AA39 -  -  -  -  ; ***************************************************************************************
   19 D1:AA39 -  -  -  -  
   20 D1:AA39 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AA39 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AA39 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AA3C DD 23 -  -  		inc 	ix
   24 D1:AA3E FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AA40 C8 -  -  -  		ret 	z
   26 D1:AA41 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AA43 C8 -  -  -  		ret 	z
   28 D1:AA44 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AA46 C2 7D AB D1 		jp 		nz,SyntaxError
   30 D1:AA4A -  -  -  -  		;		
   31 D1:AA4A 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AA4E DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AA51 13 -  -  -  		inc 	de 
   34 D1:AA52 13 -  -  -  		inc 	de
   35 D1:AA53 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AA55 C9 -  -  -  		ret
   37 D1:AA56 -  -  -  -  
   38 D1:AA56 -  -  -  -  ; ***************************************************************************************
   39 D1:AA56 -  -  -  -  ;
   40 D1:AA56 -  -  -  -  ;									Changes and Updates
   41 D1:AA56 -  -  -  -  ;
   42 D1:AA56 -  -  -  -  ; ***************************************************************************************
   43 D1:AA56 -  -  -  -  ;
   44 D1:AA56 -  -  -  -  ;		Date			Notes
   45 D1:AA56 -  -  -  -  ;		==== 			=====
   46 D1:AA56 -  -  -  -  ;
   47 D1:AA56 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AA56 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AA56 -  -  -  -  ; ***************************************************************************************
    2 D1:AA56 -  -  -  -  ; ***************************************************************************************
    3 D1:AA56 -  -  -  -  ;
    4 D1:AA56 -  -  -  -  ;		Name : 		run.asm
    5 D1:AA56 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA56 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA56 -  -  -  -  ;		Reviewed :	No
    8 D1:AA56 -  -  -  -  ;		Purpose :	Run command
    9 D1:AA56 -  -  -  -  ;
   10 D1:AA56 -  -  -  -  ; ***************************************************************************************
   11 D1:AA56 -  -  -  -  ; ***************************************************************************************
   12 D1:AA56 -  -  -  -  
   13 D1:AA56 -  -  -  -  ; ***************************************************************************************
   14 D1:AA56 -  -  -  -  ;
   15 D1:AA56 -  -  -  -  ;										RUN command
   16 D1:AA56 -  -  -  -  ;
   17 D1:AA56 -  -  -  -  ; ***************************************************************************************
   18 D1:AA56 -  -  -  -  
   19 D1:AA56 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AA56 CD 1D B0 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AA5A -  -  -  -  
   22 D1:AA5A DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AA5F ED 73 DD A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AA64 AF -  -  -  		xor 	a
   25 D1:AA65 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AA69 -  -  -  -  		;
   27 D1:AA69 -  -  -  -  		; 		New line at IX.
   28 D1:AA69 -  -  -  -  		;
   29 D1:AA69 -  -  -  -  CRNewLine:
   30 D1:AA69 DD 22 D9 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AA6E -  -  -  -  		;
   32 D1:AA6E DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AA71 B7 -  -  -  		or 		a
   34 D1:AA72 CA 71 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AA76 -  -  -  -  		;
   36 D1:AA76 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AA78 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AA7A DD 23 -  -  		inc 	ix
   39 D1:AA7C -  -  -  -  		;
   40 D1:AA7C -  -  -  -  		; 		New command at IX
   41 D1:AA7C -  -  -  -  		;
   42 D1:AA7C -  -  -  -  _CRNewCommand:	
   43 D1:AA7C DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AA7F B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AA80 F2 BB AA D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AA84 -  -  -  -  		;
   47 D1:AA84 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AA86 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AA88 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AA8A D2 AB AA D1 		jp 		nc,_CRAlternateLets
   51 D1:AA8E -  -  -  -  		;
   52 D1:AA8E -  -  -  -  _CRDoCommand:		
   53 D1:AA8E E6 7F 21 00 
              00 00 6F 29 
              29 11 9E B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AAA3 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AAA5 CD E1 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AAA9 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AAAB -  -  -  -  		;
   58 D1:AAAB -  -  -  -  		; 		Do CALL (HL)
   59 D1:AAAB -  -  -  -  		;
   60 D1:AAAB -  -  -  -  		;
   61 D1:AAAB -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AAAB -  -  -  -  		;		
   63 D1:AAAB -  -  -  -  _CRAlternateLets:		
   64 D1:AAAB FE 83 -  -  		cp 		KWD_PLING
   65 D1:AAAD 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AAAF FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AAB1 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AAB3 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AAB5 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AAB7 C3 7D AB D1 		jp 		SyntaxError
   71 D1:AABB -  -  -  -  		;
   72 D1:AABB -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AABB -  -  -  -  		;
   74 D1:AABB -  -  -  -  _CRAssignmentHandler:		
   75 D1:AABB FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AABD D2 7D AB D1 		jp 		nc,SyntaxError
   77 D1:AAC1 -  -  -  -  _CRAssignmentLet:		
   78 D1:AAC1 CD 8E A9 D1 		call	Command_LET 				; do LET.
   79 D1:AAC5 C3 7C AA D1 		jp 		_CRNewCommand
   80 D1:AAC9 -  -  -  -  
   81 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   82 D1:AAC9 -  -  -  -  ;
   83 D1:AAC9 -  -  -  -  ;									Changes and Updates
   84 D1:AAC9 -  -  -  -  ;
   85 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   86 D1:AAC9 -  -  -  -  ;
   87 D1:AAC9 -  -  -  -  ;		Date			Notes
   88 D1:AAC9 -  -  -  -  ;		==== 			=====
   89 D1:AAC9 -  -  -  -  ;
   90 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   91 D1:AAC9 -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AAC9 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AAC9 -  -  -  -  ; ***************************************************************************************
    2 D1:AAC9 -  -  -  -  ; ***************************************************************************************
    3 D1:AAC9 -  -  -  -  ;
    4 D1:AAC9 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AAC9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAC9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAC9 -  -  -  -  ;		Reviewed :	No
    8 D1:AAC9 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AAC9 -  -  -  -  ;
   10 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   11 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   12 D1:AAC9 -  -  -  -  
   13 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   14 D1:AAC9 -  -  -  -  ;
   15 D1:AAC9 -  -  -  -  ;										STOP command
   16 D1:AAC9 -  -  -  -  ;
   17 D1:AAC9 -  -  -  -  ; ***************************************************************************************
   18 D1:AAC9 -  -  -  -  
   19 D1:AAC9 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AAC9 3E 0C C3 13 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AACF -  -  -  -  
   22 D1:AACF -  -  -  -  ; ***************************************************************************************
   23 D1:AACF -  -  -  -  ;
   24 D1:AACF -  -  -  -  ;									Changes and Updates
   25 D1:AACF -  -  -  -  ;
   26 D1:AACF -  -  -  -  ; ***************************************************************************************
   27 D1:AACF -  -  -  -  ;
   28 D1:AACF -  -  -  -  ;		Date			Notes
   29 D1:AACF -  -  -  -  ;		==== 			=====
   30 D1:AACF -  -  -  -  ;
   31 D1:AACF -  -  -  -  ; ***************************************************************************************
   32 D1:AACF -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AACF -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AACF -  -  -  -  ; ***************************************************************************************
    2 D1:AACF -  -  -  -  ; ***************************************************************************************
    3 D1:AACF -  -  -  -  ;
    4 D1:AACF -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AACF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AACF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AACF -  -  -  -  ;		Reviewed :	No
    8 D1:AACF -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AACF -  -  -  -  ;
   10 D1:AACF -  -  -  -  ; ***************************************************************************************
   11 D1:AACF -  -  -  -  ; ***************************************************************************************
   12 D1:AACF -  -  -  -  
   13 D1:AACF -  -  -  -  ; ***************************************************************************************
   14 D1:AACF -  -  -  -  ;
   15 D1:AACF -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AACF -  -  -  -  ;
   17 D1:AACF -  -  -  -  ; ***************************************************************************************
   18 D1:AACF -  -  -  -  
   19 D1:AACF -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AACF             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AACF             		inc 	ix
   22 D1:AACF             		cp 		ch 							; exit if matches
   23 D1:AACF             		ret 	z
   24 D1:AACF             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AACF             		jp 		ErrorHandler
   26 D1:AACF             #endmacro
   27 D1:AACF -  -  -  -  
   28 D1:AACF -  -  -  -  CheckLeftBracket:
   29 D1:AACF DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 13 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AADD -  -  -  -  
   31 D1:AADD -  -  -  -  CheckRightBracket:
   32 D1:AADD DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 13 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AAEB -  -  -  -  
   34 D1:AAEB -  -  -  -  CheckDollar:
   35 D1:AAEB DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 13 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AAF9 -  -  -  -  		
   37 D1:AAF9 -  -  -  -  CheckComma:
   38 D1:AAF9 DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 13 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AB07 -  -  -  -  
   40 D1:AB07 -  -  -  -  ; ***************************************************************************************
   41 D1:AB07 -  -  -  -  ;
   42 D1:AB07 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AB07 -  -  -  -  ;
   44 D1:AB07 -  -  -  -  ; ***************************************************************************************
   45 D1:AB07 -  -  -  -  
   46 D1:AB07 -  -  -  -  CheckNextA:
   47 D1:AB07 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AB0A DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AB0C C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AB0D 3E 0D C3 13 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AB13 -  -  -  -  		
   52 D1:AB13 -  -  -  -  ; ***************************************************************************************
   53 D1:AB13 -  -  -  -  ;
   54 D1:AB13 -  -  -  -  ;									Changes and Updates
   55 D1:AB13 -  -  -  -  ;
   56 D1:AB13 -  -  -  -  ; ***************************************************************************************
   57 D1:AB13 -  -  -  -  ;
   58 D1:AB13 -  -  -  -  ;		Date			Notes
   59 D1:AB13 -  -  -  -  ;		==== 			=====
   60 D1:AB13 -  -  -  -  ;
   61 D1:AB13 -  -  -  -  ; ***************************************************************************************
   62 D1:AB13 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB13 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AB13 -  -  -  -  ; ***************************************************************************************
    2 D1:AB13 -  -  -  -  ; ***************************************************************************************
    3 D1:AB13 -  -  -  -  ;
    4 D1:AB13 -  -  -  -  ;		Name : 		errors.asm
    5 D1:AB13 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB13 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB13 -  -  -  -  ;		Reviewed :	No
    8 D1:AB13 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AB13 -  -  -  -  ;
   10 D1:AB13 -  -  -  -  ; ***************************************************************************************
   11 D1:AB13 -  -  -  -  ; ***************************************************************************************
   12 D1:AB13 -  -  -  -  
   13 D1:AB13 -  -  -  -  ; ***************************************************************************************
   14 D1:AB13 -  -  -  -  ;
   15 D1:AB13 -  -  -  -  ;								Error handler, message A 
   16 D1:AB13 -  -  -  -  ;
   17 D1:AB13 -  -  -  -  ; ***************************************************************************************
   18 D1:AB13 -  -  -  -  
   19 D1:AB13 -  -  -  -  ErrorHandler:
   20 D1:AB13 F5 -  -  -  		push 	af 						; save error ID
   21 D1:AB14 -  -  -  -  
   22 D1:AB14 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AB18 6F -  -  -  		ld 		l,a
   24 D1:AB19 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AB1A 29 -  -  -  		add 	hl,hl 		
   26 D1:AB1B 11 71 B2 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AB1F 19 -  -  -  		add 	hl,de
   28 D1:AB20 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AB22 CD 8B B0 D1 		call 	PrintStringAtHL
   30 D1:AB26 -  -  -  -  		;
   31 D1:AB26 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AB27 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AB28 28 2F -  -  		jr 		z,_EHExit
   34 D1:AB2A -  -  -  -  		;
   35 D1:AB2A DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AB2F DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AB32 B7 -  -  -  		or 		a
   38 D1:AB33 28 24 -  -  		jr 		z,_EHExit
   39 D1:AB35 -  -  -  -  
   40 D1:AB35 21 61 AB D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AB39 CD 8B B0 D1 		call 	PrintStringAtHL 
   42 D1:AB3D -  -  -  -  		
   43 D1:AB3D D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AB3E 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AB42 D9 -  -  -  		exx 
   46 D1:AB43 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AB46 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AB49 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AB4B 01 1B A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AB4F CD 7D B6 D1 		call 	Int32ToString
   51 D1:AB53 C5 -  -  -  		push 	bc
   52 D1:AB54 E1 -  -  -  		pop 	hl
   53 D1:AB55 CD 8B B0 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AB59 -  -  -  -  _EHExit:		
   55 D1:AB59 CD 18 B7 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AB5D C3 9B A8 D1 		jp 		WarmStart
   57 D1:AB61 -  -  -  -  
   58 D1:AB61 -  -  -  -  _EHAtText:
   59 D1:AB61 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AB6B -  -  -  -  
   61 D1:AB6B -  -  -  -  NotImplemented:
   62 D1:AB6B 3E 04 C3 13 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AB71 -  -  -  -  TypeMismatch:
   64 D1:AB71 3E 02 C3 13 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AB77 -  -  -  -  BadValue:
   66 D1:AB77 3E 03 C3 13 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AB7D -  -  -  -  SyntaxError:
   68 D1:AB7D 3E 0D C3 13 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AB83 -  -  -  -  						
   70 D1:AB83 -  -  -  -  ; ***************************************************************************************
   71 D1:AB83 -  -  -  -  ;
   72 D1:AB83 -  -  -  -  ;									Changes and Updates
   73 D1:AB83 -  -  -  -  ;
   74 D1:AB83 -  -  -  -  ; ***************************************************************************************
   75 D1:AB83 -  -  -  -  ;
   76 D1:AB83 -  -  -  -  ;		Date			Notes
   77 D1:AB83 -  -  -  -  ;		==== 			=====
   78 D1:AB83 -  -  -  -  ;
   79 D1:AB83 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB83 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AB83 -  -  -  -  ; ***************************************************************************************
    2 D1:AB83 -  -  -  -  ; ***************************************************************************************
    3 D1:AB83 -  -  -  -  ;
    4 D1:AB83 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AB83 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB83 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB83 -  -  -  -  ;		Reviewed :	No
    8 D1:AB83 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AB83 -  -  -  -  ;
   10 D1:AB83 -  -  -  -  ; ***************************************************************************************
   11 D1:AB83 -  -  -  -  ; ***************************************************************************************
   12 D1:AB83 -  -  -  -  
   13 D1:AB83 -  -  -  -  ; ***************************************************************************************
   14 D1:AB83 -  -  -  -  ;
   15 D1:AB83 -  -  -  -  ; 									Addition
   16 D1:AB83 -  -  -  -  ;
   17 D1:AB83 -  -  -  -  ; ***************************************************************************************
   18 D1:AB83 -  -  -  -  
   19 D1:AB83 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AB83 CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 FC 
              B5 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AB91 -  -  -  -  
   22 D1:AB91 -  -  -  -  ; ***************************************************************************************
   23 D1:AB91 -  -  -  -  ;
   24 D1:AB91 -  -  -  -  ; 									Subtraction
   25 D1:AB91 -  -  -  -  ;
   26 D1:AB91 -  -  -  -  ; ***************************************************************************************
   27 D1:AB91 -  -  -  -  
   28 D1:AB91 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AB91 CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 04 
              B6 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AB9F -  -  -  -  
   31 D1:AB9F -  -  -  -  ; ***************************************************************************************
   32 D1:AB9F -  -  -  -  ;
   33 D1:AB9F -  -  -  -  ; 									  Multiply
   34 D1:AB9F -  -  -  -  ;
   35 D1:AB9F -  -  -  -  ; ***************************************************************************************
   36 D1:AB9F -  -  -  -  
   37 D1:AB9F -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AB9F CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 C3 
              B5 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:ABAD -  -  -  -  
   40 D1:ABAD -  -  -  -  ; ***************************************************************************************
   41 D1:ABAD -  -  -  -  ;
   42 D1:ABAD -  -  -  -  ; 									  Divide
   43 D1:ABAD -  -  -  -  ;
   44 D1:ABAD -  -  -  -  ; ***************************************************************************************
   45 D1:ABAD -  -  -  -  
   46 D1:ABAD -  -  -  -  ALUDivide: 	;; [/]
   47 D1:ABAD -  -  -  -  ALUDivide2:	;; [div]
   48 D1:ABAD CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 C3 
              B4 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:ABBB -  -  -  -  
   50 D1:ABBB -  -  -  -  ; ***************************************************************************************
   51 D1:ABBB -  -  -  -  ;
   52 D1:ABBB -  -  -  -  ; 									  Modulus
   53 D1:ABBB -  -  -  -  ;
   54 D1:ABBB -  -  -  -  ; ***************************************************************************************
   55 D1:ABBB -  -  -  -  
   56 D1:ABBB -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:ABBB CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 C6 
              B4 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:ABC9 -  -  -  -  
   59 D1:ABC9 -  -  -  -  ; ***************************************************************************************
   60 D1:ABC9 -  -  -  -  ;
   61 D1:ABC9 -  -  -  -  ; 									  Logical
   62 D1:ABC9 -  -  -  -  ;
   63 D1:ABC9 -  -  -  -  ; ***************************************************************************************
   64 D1:ABC9 -  -  -  -  
   65 D1:ABC9 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:ABC9 CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 0E 
              B6 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:ABD7 -  -  -  -  
   68 D1:ABD7 -  -  -  -  ALUOr: 			;; [or]
   69 D1:ABD7 CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 1B 
              B6 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ABE5 -  -  -  -  
   71 D1:ABE5 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ABE5 CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 28 
              B6 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ABF3 -  -  -  -  
   74 D1:ABF3 -  -  -  -  ; ***************************************************************************************
   75 D1:ABF3 -  -  -  -  ;
   76 D1:ABF3 -  -  -  -  ;									Changes and Updates
   77 D1:ABF3 -  -  -  -  ;
   78 D1:ABF3 -  -  -  -  ; ***************************************************************************************
   79 D1:ABF3 -  -  -  -  ;
   80 D1:ABF3 -  -  -  -  ;		Date			Notes
   81 D1:ABF3 -  -  -  -  ;		==== 			=====
   82 D1:ABF3 -  -  -  -  ;
   83 D1:ABF3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:ABF3 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ABF3 -  -  -  -  ; ***************************************************************************************
    2 D1:ABF3 -  -  -  -  ; ***************************************************************************************
    3 D1:ABF3 -  -  -  -  ;
    4 D1:ABF3 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ABF3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABF3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABF3 -  -  -  -  ;		Reviewed :	No
    8 D1:ABF3 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ABF3 -  -  -  -  ;
   10 D1:ABF3 -  -  -  -  ; ***************************************************************************************
   11 D1:ABF3 -  -  -  -  ; ***************************************************************************************
   12 D1:ABF3 -  -  -  -  
   13 D1:ABF3 -  -  -  -  ; ***************************************************************************************
   14 D1:ABF3 -  -  -  -  ;
   15 D1:ABF3 -  -  -  -  ; 									<l> <op> <r>
   16 D1:ABF3 -  -  -  -  ;
   17 D1:ABF3 -  -  -  -  ; ***************************************************************************************
   18 D1:ABF3 -  -  -  -  
   19 D1:ABF3 -  -  -  -  ALULongReference:			;; [!]
   20 D1:ABF3 CD 03 AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:ABF7 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:ABF9 CB F9 -  -  		set 	CIsReference,c
   23 D1:ABFB C9 -  -  -  		ret
   24 D1:ABFC -  -  -  -  
   25 D1:ABFC -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:ABFC CD F3 AB D1 		call 	ALULongReference
   27 D1:AC00 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AC02 C9 -  -  -  		ret
   29 D1:AC03 -  -  -  -  
   30 D1:AC03 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AC03 CD A0 AC D1 
              78 B1 C2 71 
              AB D1 C3 11 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AC11 -  -  -  -  _BRGAMain:		
   33 D1:AC11 CD FC B5 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AC15 CD A6 AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AC19 C9 -  -  -  		ret
   36 D1:AC1A -  -  -  -  
   37 D1:AC1A -  -  -  -  ; ***************************************************************************************
   38 D1:AC1A -  -  -  -  ;
   39 D1:AC1A -  -  -  -  ;									Changes and Updates
   40 D1:AC1A -  -  -  -  ;
   41 D1:AC1A -  -  -  -  ; ***************************************************************************************
   42 D1:AC1A -  -  -  -  ;
   43 D1:AC1A -  -  -  -  ;		Date			Notes
   44 D1:AC1A -  -  -  -  ;		==== 			=====
   45 D1:AC1A -  -  -  -  ;
   46 D1:AC1A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC1A -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AC1A -  -  -  -  ; ***************************************************************************************
    2 D1:AC1A -  -  -  -  ; ***************************************************************************************
    3 D1:AC1A -  -  -  -  ;
    4 D1:AC1A -  -  -  -  ;		Name : 		compare.asm
    5 D1:AC1A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC1A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC1A -  -  -  -  ;		Reviewed :	No
    8 D1:AC1A -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AC1A -  -  -  -  ;
   10 D1:AC1A -  -  -  -  ; ***************************************************************************************
   11 D1:AC1A -  -  -  -  ; ***************************************************************************************
   12 D1:AC1A -  -  -  -  
   13 D1:AC1A -  -  -  -  #macro compare_equals(n)
   14 D1:AC1A             		call 	CompareBaseCode
   15 D1:AC1A             		cp 		n
   16 D1:AC1A             		jr 		z,UnaryInt32True
   17 D1:AC1A             		jr 		UnaryInt32False
   18 D1:AC1A             #endmacro
   19 D1:AC1A -  -  -  -  
   20 D1:AC1A -  -  -  -  #macro compare_not_equals(n)
   21 D1:AC1A             		call 	CompareBaseCode
   22 D1:AC1A             		cp 		n
   23 D1:AC1A             		jr 		nz,UnaryInt32True
   24 D1:AC1A             		jr 		UnaryInt32False
   25 D1:AC1A             #endmacro
   26 D1:AC1A -  -  -  -  
   27 D1:AC1A -  -  -  -  ; ***************************************************************************************
   28 D1:AC1A -  -  -  -  ;
   29 D1:AC1A -  -  -  -  ; 								Return True/False
   30 D1:AC1A -  -  -  -  ;
   31 D1:AC1A -  -  -  -  ; ***************************************************************************************
   32 D1:AC1A -  -  -  -  
   33 D1:AC1A -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AC1A 3E FF -  -  		ld 		a,255
   35 D1:AC1C 18 01 -  -  		jr 		_Int32Logical
   36 D1:AC1E -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:AC1E AF -  -  -  		xor 	a
   38 D1:AC1F -  -  -  -  _Int32Logical:
   39 D1:AC1F 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AC20 67 -  -  -  		ld 		h,a
   41 D1:AC21 D9 -  -  -  		exx
   42 D1:AC22 6F -  -  -  		ld 		l,a
   43 D1:AC23 67 -  -  -  		ld 		h,a
   44 D1:AC24 D9 -  -  -  		exx
   45 D1:AC25 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AC27 C9 -  -  -  		ret
   47 D1:AC28 -  -  -  -  
   48 D1:AC28 -  -  -  -  ; ***************************************************************************************
   49 D1:AC28 -  -  -  -  ;
   50 D1:AC28 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AC28 -  -  -  -  ;
   52 D1:AC28 -  -  -  -  ; ***************************************************************************************
   53 D1:AC28 -  -  -  -  
   54 D1:AC28 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AC28 CD 64 AC D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AC32 -  -  -  -  
   57 D1:AC32 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AC32 CD 64 AC D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AC3C -  -  -  -  
   60 D1:AC3C -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AC3C CD 64 AC D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AC46 -  -  -  -  
   63 D1:AC46 -  -  -  -  ; ***************************************************************************************
   64 D1:AC46 -  -  -  -  ;
   65 D1:AC46 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AC46 -  -  -  -  ;
   67 D1:AC46 -  -  -  -  ; ***************************************************************************************
   68 D1:AC46 -  -  -  -  
   69 D1:AC46 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AC46 CD 64 AC D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AC50 -  -  -  -  
   72 D1:AC50 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AC50 CD 64 AC D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AC5A -  -  -  -  
   75 D1:AC5A -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AC5A CD 64 AC D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AC64 -  -  -  -  
   78 D1:AC64 -  -  -  -  ; ***************************************************************************************
   79 D1:AC64 -  -  -  -  ;
   80 D1:AC64 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AC64 -  -  -  -  ;
   82 D1:AC64 -  -  -  -  ; ***************************************************************************************
   83 D1:AC64 -  -  -  -  
   84 D1:AC64 -  -  -  -  CompareBaseCode:
   85 D1:AC64 CD A0 AC D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AC68 -  -  -  -  
   87 D1:AC68 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AC69 A1 -  -  -  		and 	c
   89 D1:AC6A CB 47 -  -  		bit 	CIsString,a 
   90 D1:AC6C C2 7E AC D1 		jp 		nz,StringCompare
   91 D1:AC70 -  -  -  -  
   92 D1:AC70 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AC71 B1 -  -  -  		or 		c
   94 D1:AC72 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AC74 CA 3C B6 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AC78 -  -  -  -  
   97 D1:AC78 3E 02 C3 13 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AC7E -  -  -  -  ;
   99 D1:AC7E -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AC7E -  -  -  -  ;
  101 D1:AC7E -  -  -  -  StringCompare:
  102 D1:AC7E 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AC7F BE -  -  -  		cp 		(hl)
  104 D1:AC80 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AC82 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AC84 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AC85 23 -  -  -  		inc 	hl
  108 D1:AC86 FE 20 -  -  		cp 		' '
  109 D1:AC88 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AC8A AF -  -  -  		xor 	a 							; return 0.
  111 D1:AC8B C9 -  -  -  		ret
  112 D1:AC8C -  -  -  -  
  113 D1:AC8C -  -  -  -  _SCLess:
  114 D1:AC8C 3E FF -  -  		ld 		a,$FF
  115 D1:AC8E C9 -  -  -  		ret
  116 D1:AC8F -  -  -  -  _SCGreater:
  117 D1:AC8F 3E 01 -  -  		ld 		a,1
  118 D1:AC91 C9 -  -  -  		ret
  119 D1:AC92 -  -  -  -  
  120 D1:AC92 3E 0E C3 13 
              AB D1 -  -  		ERR_TODO()
  121 D1:AC98 -  -  -  -  
  122 D1:AC98 -  -  -  -  ; ***************************************************************************************
  123 D1:AC98 -  -  -  -  ;
  124 D1:AC98 -  -  -  -  ;									Changes and Updates
  125 D1:AC98 -  -  -  -  ;
  126 D1:AC98 -  -  -  -  ; ***************************************************************************************
  127 D1:AC98 -  -  -  -  ;
  128 D1:AC98 -  -  -  -  ;		Date			Notes
  129 D1:AC98 -  -  -  -  ;		==== 			=====
  130 D1:AC98 -  -  -  -  ;
  131 D1:AC98 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC98 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AC98 -  -  -  -  ; ***************************************************************************************
    2 D1:AC98 -  -  -  -  ; ***************************************************************************************
    3 D1:AC98 -  -  -  -  ;
    4 D1:AC98 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AC98 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC98 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC98 -  -  -  -  ;		Reviewed :	No
    8 D1:AC98 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AC98 -  -  -  -  ;
   10 D1:AC98 -  -  -  -  ; ***************************************************************************************
   11 D1:AC98 -  -  -  -  ; ***************************************************************************************
   12 D1:AC98 -  -  -  -  
   13 D1:AC98 -  -  -  -  ; ***************************************************************************************
   14 D1:AC98 -  -  -  -  ;
   15 D1:AC98 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AC98 -  -  -  -  ;
   17 D1:AC98 -  -  -  -  ; ***************************************************************************************
   18 D1:AC98 -  -  -  -  
   19 D1:AC98 -  -  -  -  SwapHLDE:
   20 D1:AC98 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AC99 D9 -  -  -  			exx
   22 D1:AC9A EB -  -  -  			ex 		de,hl
   23 D1:AC9B D9 -  -  -  			exx
   24 D1:AC9C 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AC9D 41 -  -  -  			ld 		b,c
   26 D1:AC9E 4F -  -  -  			ld 		c,a
   27 D1:AC9F C9 -  -  -  			ret
   28 D1:ACA0 -  -  -  -  
   29 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   30 D1:ACA0 -  -  -  -  ;
   31 D1:ACA0 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ACA0 -  -  -  -  ;
   33 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   34 D1:ACA0 -  -  -  -  
   35 D1:ACA0 -  -  -  -  DereferenceBoth:
   36 D1:ACA0 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ACA2 C4 79 AD D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ACA6 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ACA8 C8 -  -  -  			ret 	z
   40 D1:ACA9 CD 98 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ACAD CD 79 AD D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ACB1 CD 98 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ACB5 C9 -  -  -  			ret
   44 D1:ACB6 -  -  -  -  
   45 D1:ACB6 -  -  -  -  ; ***************************************************************************************
   46 D1:ACB6 -  -  -  -  ;
   47 D1:ACB6 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ACB6 -  -  -  -  ;
   49 D1:ACB6 -  -  -  -  ; ***************************************************************************************
   50 D1:ACB6 -  -  -  -  
   51 D1:ACB6 -  -  -  -  NegateHLHL:	
   52 D1:ACB6 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ACB8 C2 71 AB D1 			jp 		nz,TypeMismatch
   54 D1:ACBC CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ACBE C4 79 AD D1 			call 	nz,Dereference 			; if required.
   56 D1:ACC2 CD 66 B6 D1 			call 	Int32Negate
   57 D1:ACC6 C9 -  -  -  			ret
Listing for file "_build.asm"
   29 D1:ACC7 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ACC7 -  -  -  -  ; ***************************************************************************************
    2 D1:ACC7 -  -  -  -  ; ***************************************************************************************
    3 D1:ACC7 -  -  -  -  ;
    4 D1:ACC7 -  -  -  -  ;		Name : 		expression.asm
    5 D1:ACC7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACC7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACC7 -  -  -  -  ;		Reviewed :	None
    8 D1:ACC7 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ACC7 -  -  -  -  ;
   10 D1:ACC7 -  -  -  -  ; ***************************************************************************************
   11 D1:ACC7 -  -  -  -  ; ***************************************************************************************
   12 D1:ACC7 -  -  -  -  
   13 D1:ACC7 -  -  -  -  ; ***************************************************************************************
   14 D1:ACC7 -  -  -  -  ;
   15 D1:ACC7 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ACC7 -  -  -  -  ;
   17 D1:ACC7 -  -  -  -  ; ***************************************************************************************
   18 D1:ACC7 -  -  -  -  
   19 D1:ACC7 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ACC7 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ACC8 -  -  -  -  EvaluateAtPrecedence:
   22 D1:ACC8 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ACC9 -  -  -  -  		;
   24 D1:ACC9 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ACC9 -  -  -  -  		;
   26 D1:ACC9 CD D5 AD D1 		call 	EvaluateTerm 				; get term
   27 D1:ACCD -  -  -  -  		;
   28 D1:ACCD -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ACCD -  -  -  -  		;
   30 D1:ACCD D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ACCE -  -  -  -  _EAPLoop:
   32 D1:ACCE DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ACD1 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ACD3 D8 -  -  -  		ret 	c
   35 D1:ACD4 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ACD6 D0 -  -  -  		ret 	nc
   37 D1:ACD7 -  -  -  -  		;
   38 D1:ACD7 -  -  -  -  		; 		Get the precedence.
   39 D1:ACD7 -  -  -  -  		;
   40 D1:ACD7 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ACD8 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ACDA 21 60 B2 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ACDE B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ACDF 6F -  -  -  		ld 		l,a
   45 D1:ACE0 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ACE1 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ACE2 -  -  -  -  		;
   48 D1:ACE2 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ACE2 -  -  -  -  		;
   50 D1:ACE2 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ACE3 BB -  -  -  		cp 		e
   52 D1:ACE4 D0 -  -  -  		ret 	nc
   53 D1:ACE5 -  -  -  -  
   54 D1:ACE5 -  -  -  -  		;
   55 D1:ACE5 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ACE5 -  -  -  -  		;
   57 D1:ACE5 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ACE6 -  -  -  -  		;
   59 D1:ACE6 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ACE9 F5 -  -  -  		push 	af
   61 D1:ACEA -  -  -  -  		;
   62 D1:ACEA C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ACEB D9 -  -  -  		exx 								; save HL'
   64 D1:ACEC E5 -  -  -  		push 	hl
   65 D1:ACED D9 -  -  -  		exx 								
   66 D1:ACEE E5 -  -  -  		push 	hl 							; save HL
   67 D1:ACEF -  -  -  -  		;
   68 D1:ACEF DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ACF1 -  -  -  -  		;
   70 D1:ACF1 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ACF1 -  -  -  -  		;
   72 D1:ACF1 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ACF2 CD C8 AC D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ACF6 -  -  -  -  		;
   75 D1:ACF6 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ACF6 -  -  -  -  		;
   77 D1:ACF6 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ACF7 -  -  -  -  
   79 D1:ACF7 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ACF8 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:ACF9 D9 -  -  -  		exx
   82 D1:ACFA EB -  -  -  		ex 		de,hl
   83 D1:ACFB E1 -  -  -  		pop 	hl
   84 D1:ACFC D9 -  -  -  		exx
   85 D1:ACFD C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:ACFE 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:ACFF -  -  -  -  		;
   88 D1:ACFF -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:ACFF -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:ACFF -  -  -  -  		;
   91 D1:ACFF F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AD00 -  -  -  -  		;
   93 D1:AD00 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AD00 -  -  -  -  		;
   95 D1:AD00 D5 -  -  -  		push 	de
   96 D1:AD01 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AD02 E6 7F 21 00 
              00 00 6F 29 
              29 11 9E B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AD17 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AD18 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AD19 CD E1 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AD1D -  -  -  -  		;
  102 D1:AD1D D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AD1E -  -  -  -  		;
  104 D1:AD1E 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AD20 -  -  -  -  
  106 D1:AD20 -  -  -  -  ; ***************************************************************************************
  107 D1:AD20 -  -  -  -  ;
  108 D1:AD20 -  -  -  -  ;									Changes and Updates
  109 D1:AD20 -  -  -  -  ;
  110 D1:AD20 -  -  -  -  ; ***************************************************************************************
  111 D1:AD20 -  -  -  -  ;
  112 D1:AD20 -  -  -  -  ;		Date			Notes
  113 D1:AD20 -  -  -  -  ;		==== 			=====
  114 D1:AD20 -  -  -  -  ;
  115 D1:AD20 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD20 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AD20 -  -  -  -  ; ***************************************************************************************
    2 D1:AD20 -  -  -  -  ; ***************************************************************************************
    3 D1:AD20 -  -  -  -  ;
    4 D1:AD20 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AD20 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD20 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD20 -  -  -  -  ;		Reviewed :	No
    8 D1:AD20 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AD20 -  -  -  -  ;
   10 D1:AD20 -  -  -  -  ; ***************************************************************************************
   11 D1:AD20 -  -  -  -  ; ***************************************************************************************
   12 D1:AD20 -  -  -  -  
   13 D1:AD20 -  -  -  -  ; ***************************************************************************************
   14 D1:AD20 -  -  -  -  ;
   15 D1:AD20 -  -  -  -  ; 								Evaluate an integer term
   16 D1:AD20 -  -  -  -  ;
   17 D1:AD20 -  -  -  -  ; ***************************************************************************************
   18 D1:AD20 -  -  -  -  
   19 D1:AD20 -  -  -  -  EvaluateIntegerTerm:
   20 D1:AD20 CD D5 AD D1 		call 	EvaluateTerm
   21 D1:AD24 CD 79 AD D1 		call 	DeReference
   22 D1:AD28 CB 41 -  -  		bit 	CIsString,c
   23 D1:AD2A C8 -  -  -  		ret 	z
   24 D1:AD2B C3 71 AB D1 		jp 		TypeMismatch
   25 D1:AD2F -  -  -  -  
   26 D1:AD2F -  -  -  -  ; ***************************************************************************************
   27 D1:AD2F -  -  -  -  ;
   28 D1:AD2F -  -  -  -  ; 								Evaluate a string term
   29 D1:AD2F -  -  -  -  ;
   30 D1:AD2F -  -  -  -  ; ***************************************************************************************
   31 D1:AD2F -  -  -  -  
   32 D1:AD2F -  -  -  -  EvaluateStringTerm:
   33 D1:AD2F CD D5 AD D1 		call 	EvaluateTerm
   34 D1:AD33 CD 79 AD D1 		call 	DeReference
   35 D1:AD37 CB 41 -  -  		bit 	CIsString,c
   36 D1:AD39 C0 -  -  -  		ret 	nz
   37 D1:AD3A C3 71 AB D1 		jp 		TypeMismatch
   38 D1:AD3E -  -  -  -  
   39 D1:AD3E -  -  -  -  ; ***************************************************************************************
   40 D1:AD3E -  -  -  -  ;
   41 D1:AD3E -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AD3E -  -  -  -  ;
   43 D1:AD3E -  -  -  -  ; ***************************************************************************************
   44 D1:AD3E -  -  -  -  
   45 D1:AD3E -  -  -  -  EvaluateValue:
   46 D1:AD3E CD C7 AC D1 		call 	EvaluateAtPrecedence0
   47 D1:AD42 C3 79 AD D1 		jp 		Dereference
   48 D1:AD46 -  -  -  -  
   49 D1:AD46 -  -  -  -  ; ***************************************************************************************
   50 D1:AD46 -  -  -  -  ;
   51 D1:AD46 -  -  -  -  ; 									Evaluate a number
   52 D1:AD46 -  -  -  -  ;
   53 D1:AD46 -  -  -  -  ; ***************************************************************************************
   54 D1:AD46 -  -  -  -  
   55 D1:AD46 -  -  -  -  EvaluateInteger:
   56 D1:AD46 CD 3E AD D1 		call 	EvaluateValue
   57 D1:AD4A CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AD4C C8 -  -  -  		ret 	z
   59 D1:AD4D C3 71 AB D1 		jp 		TypeMismatch
   60 D1:AD51 -  -  -  -  
   61 D1:AD51 -  -  -  -  ; ***************************************************************************************
   62 D1:AD51 -  -  -  -  ;
   63 D1:AD51 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AD51 -  -  -  -  ;
   65 D1:AD51 -  -  -  -  ; ***************************************************************************************
   66 D1:AD51 -  -  -  -  
   67 D1:AD51 -  -  -  -  Evaluate8BitInteger:
   68 D1:AD51 CD 46 AD D1 		call 	EvaluateInteger
   69 D1:AD55 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AD56 7C -  -  -  		ld 		a,h
   71 D1:AD57 B5 -  -  -  		or 		l
   72 D1:AD58 D9 -  -  -  		exx 	
   73 D1:AD59 B4 -  -  -  		or 		h
   74 D1:AD5A C2 77 AB D1 		jp 		nz,BadValue
   75 D1:AD5E 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AD5F C9 -  -  -  		ret
   77 D1:AD60 -  -  -  -  		
   78 D1:AD60 -  -  -  -  ; ***************************************************************************************
   79 D1:AD60 -  -  -  -  ;
   80 D1:AD60 -  -  -  -  ; 									Evaluate a string
   81 D1:AD60 -  -  -  -  ;
   82 D1:AD60 -  -  -  -  ; ***************************************************************************************
   83 D1:AD60 -  -  -  -  
   84 D1:AD60 -  -  -  -  EvaluateStringOnly:
   85 D1:AD60 CD 3E AD D1 		call 	EvaluateValue
   86 D1:AD64 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AD66 CA 71 AB D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AD6A C9 -  -  -  		ret
   89 D1:AD6B -  -  -  -  
   90 D1:AD6B -  -  -  -  ; ***************************************************************************************
   91 D1:AD6B -  -  -  -  ;
   92 D1:AD6B -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AD6B -  -  -  -  ;
   94 D1:AD6B -  -  -  -  ; ***************************************************************************************
   95 D1:AD6B -  -  -  -  
   96 D1:AD6B -  -  -  -  Return8BitConstant:
   97 D1:AD6B 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AD6F 6F -  -  -  		ld 		l,a
   99 D1:AD70 -  -  -  -  Return16BitConstant:
  100 D1:AD70 D9 -  -  -  		exx 								; clear HL'
  101 D1:AD71 21 00 00 00 		ld 		hl,0
  102 D1:AD75 D9 -  -  -  		exx
  103 D1:AD76 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AD78 C9 -  -  -  		ret
  105 D1:AD79 -  -  -  -  
  106 D1:AD79 -  -  -  -  ; ***************************************************************************************
  107 D1:AD79 -  -  -  -  ;
  108 D1:AD79 -  -  -  -  ;									Changes and Updates
  109 D1:AD79 -  -  -  -  ;
  110 D1:AD79 -  -  -  -  ; ***************************************************************************************
  111 D1:AD79 -  -  -  -  ;
  112 D1:AD79 -  -  -  -  ;		Date			Notes
  113 D1:AD79 -  -  -  -  ;		==== 			=====
  114 D1:AD79 -  -  -  -  ;
  115 D1:AD79 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD79 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AD79 -  -  -  -  ; ***************************************************************************************
    2 D1:AD79 -  -  -  -  ; ***************************************************************************************
    3 D1:AD79 -  -  -  -  ;
    4 D1:AD79 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AD79 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD79 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AD79 -  -  -  -  ;		Reviewed :	No
    8 D1:AD79 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AD79 -  -  -  -  ;
   10 D1:AD79 -  -  -  -  ; ***************************************************************************************
   11 D1:AD79 -  -  -  -  ; ***************************************************************************************
   12 D1:AD79 -  -  -  -  
   13 D1:AD79 -  -  -  -  ; ***************************************************************************************
   14 D1:AD79 -  -  -  -  ;
   15 D1:AD79 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AD79 -  -  -  -  ;
   17 D1:AD79 -  -  -  -  ; ***************************************************************************************
   18 D1:AD79 -  -  -  -  
   19 D1:AD79 -  -  -  -  Dereference:
   20 D1:AD79 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AD7B C8 -  -  -  		ret 	z
   22 D1:AD7C -  -  -  -  
   23 D1:AD7C CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AD7E -  -  -  -  		
   25 D1:AD7E CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AD80 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AD82 -  -  -  -  
   28 D1:AD82 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AD84 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AD86 -  -  -  -  
   31 D1:AD86 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AD87 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AD89 D9 -  -  -  		exx
   34 D1:AD8A E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AD8B 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AD8C 23 -  -  -  		inc  	hl
   37 D1:AD8D ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AD8F D9 -  -  -  		exx 								; fix back
   39 D1:AD90 C9 -  -  -  		ret
   40 D1:AD91 -  -  -  -  
   41 D1:AD91 -  -  -  -  _DeRefByte:		
   42 D1:AD91 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AD92 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AD96 6F -  -  -  		ld	 	l,a
   45 D1:AD97 D9 -  -  -  		exx
   46 D1:AD98 21 00 00 00 		ld 		hl,$0000
   47 D1:AD9C D9 -  -  -  		exx
   48 D1:AD9D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AD9F C9 -  -  -  		ret
   50 D1:ADA0 -  -  -  -  
   51 D1:ADA0 -  -  -  -  _DRInternal:
   52 D1:ADA0 3E 04 C3 13 
              AB D1 -  -  		ERR_DISABLED
   53 D1:ADA6 -  -  -  -  
   54 D1:ADA6 -  -  -  -  ; ***************************************************************************************
   55 D1:ADA6 -  -  -  -  ;
   56 D1:ADA6 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:ADA6 -  -  -  -  ;
   58 D1:ADA6 -  -  -  -  ; ***************************************************************************************
   59 D1:ADA6 -  -  -  -  
   60 D1:ADA6 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:ADA6 -  -  -  -  		#ifdef EZ80
   62 D1:ADA6 22 E7 A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:ADAA D9 -  -  -  		exx
   64 D1:ADAB 22 E9 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:ADAF 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:ADB3 D9 -  -  -  		exx
   67 D1:ADB4 2A E7 A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ADB8 -  -  -  -  		#endif
   69 D1:ADB8 C9 -  -  -  		ret
   70 D1:ADB9 -  -  -  -  
   71 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   72 D1:ADB9 -  -  -  -  ;
   73 D1:ADB9 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ADB9 -  -  -  -  ;
   75 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   76 D1:ADB9 -  -  -  -  
   77 D1:ADB9 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ADB9 -  -  -  -  		#ifdef EZ80
   79 D1:ADB9 22 E7 A8 D1 		ld 		(AConvert),hl
   80 D1:ADBD 21 00 00 00 		ld 		hl,$0000
   81 D1:ADC1 22 EA A8 D1 		ld 		(AConvert+3),hl
   82 D1:ADC5 D9 -  -  -  		exx
   83 D1:ADC6 2A E9 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:ADCA D9 -  -  -  		exx
   85 D1:ADCB AF -  -  -  		xor 	a
   86 D1:ADCC 32 E9 A8 D1 		ld 		(AConvert+2),a
   87 D1:ADD0 2A E7 A8 D1 		ld 		hl,(AConvert)
   88 D1:ADD4 -  -  -  -  		#endif
   89 D1:ADD4 C9 -  -  -  		ret
   90 D1:ADD5 -  -  -  -  
   91 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   92 D1:ADD5 -  -  -  -  ;
   93 D1:ADD5 -  -  -  -  ;									Changes and Updates
   94 D1:ADD5 -  -  -  -  ;
   95 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   96 D1:ADD5 -  -  -  -  ;
   97 D1:ADD5 -  -  -  -  ;		Date			Notes
   98 D1:ADD5 -  -  -  -  ;		==== 			=====
   99 D1:ADD5 -  -  -  -  ;
  100 D1:ADD5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:ADD5 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:ADD5 -  -  -  -  ; ***************************************************************************************
    2 D1:ADD5 -  -  -  -  ; ***************************************************************************************
    3 D1:ADD5 -  -  -  -  ;
    4 D1:ADD5 -  -  -  -  ;		Name : 		term.asm
    5 D1:ADD5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADD5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADD5 -  -  -  -  ;		Reviewed :	No
    8 D1:ADD5 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:ADD5 -  -  -  -  ;
   10 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   11 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   12 D1:ADD5 -  -  -  -  
   13 D1:ADD5 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:ADD5             		add_hlhl_16
   15 D1:ADD5             		exx
   16 D1:ADD5             		adc_hlhl_16
   17 D1:ADD5             		exx
   18 D1:ADD5             #endmacro
   19 D1:ADD5 -  -  -  -  
   20 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   21 D1:ADD5 -  -  -  -  ;
   22 D1:ADD5 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:ADD5 -  -  -  -  ;
   24 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   25 D1:ADD5 -  -  -  -  ;
   26 D1:ADD5 -  -  -  -  ; 		Terms can be:
   27 D1:ADD5 -  -  -  -  ;
   28 D1:ADD5 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:ADD5 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:ADD5 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:ADD5 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:ADD5 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:ADD5 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:ADD5 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:ADD5 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:ADD5 -  -  -  -  ; 														reference of some sort.
   37 D1:ADD5 -  -  -  -  ;
   38 D1:ADD5 -  -  -  -  ; ***************************************************************************************
   39 D1:ADD5 -  -  -  -  
   40 D1:ADD5 -  -  -  -  EvaluateTerm:		
   41 D1:ADD5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:ADD7 D9 -  -  -  		exx
   43 D1:ADD8 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:ADDC D9 -  -  -  		exx
   45 D1:ADDD 21 00 00 00 		ld 		hl,$0000		
   46 D1:ADE1 -  -  -  -  		;
   47 D1:ADE1 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:ADE4 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:ADE6 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:ADE8 DA A0 AE D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:ADEC CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:ADEE C2 44 AE D1 		jp 		nz,_ETFoundKeyword 
   53 D1:ADF2 -  -  -  -  		;
   54 D1:ADF2 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:ADF2 -  -  -  -  		;
   56 D1:ADF2 -  -  -  -  _ETIntegerConstant:
   57 D1:ADF2 -  -  -  -  		;
   58 D1:ADF2 -  -  -  -  _ETIntegerLoop:		
   59 D1:ADF2 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:ADF5 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:ADF7 B5 -  -  -  		or 		l 							; or into L
   62 D1:ADF8 6F -  -  -  		ld 		l,a
   63 D1:ADF9 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:ADFB DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:ADFE C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AE00 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AE02 D8 -  -  -  		ret 	c
   68 D1:AE03 -  -  -  -  
   69 D1:AE03 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AE0A 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AE11 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AE18 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AE1F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AE26 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AE2D -  -  -  -  
   76 D1:AE2D 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AE2F -  -  -  -  		;
   78 D1:AE2F -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AE2F -  -  -  -  		;
   80 D1:AE2F -  -  -  -  _ETStringMarker:		
   81 D1:AE2F DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AE31 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AE33 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AE35 E1 -  -  -  		pop 	hl
   85 D1:AE36 11 00 00 00 		ld 		de,$0000
   86 D1:AE3A DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AE3D DD 19 -  -  		add 	ix,de
   88 D1:AE3F DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AE41 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AE43 C9 -  -  -  		ret
   91 D1:AE44 -  -  -  -  		;
   92 D1:AE44 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AE44 -  -  -  -  		;
   94 D1:AE44 -  -  -  -  _ETFoundKeyword:
   95 D1:AE44 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AE46 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AE48 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AE4A FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AE4C 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AE4E -  -  -  -  		;
  101 D1:AE4E -  -  -  -  		;		Unary group 0
  102 D1:AE4E -  -  -  -  		;
  103 D1:AE4E E6 7F 21 00 
              00 00 6F 29 
              29 11 9E B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AE63 C3 E1 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AE67 -  -  -  -  
  106 D1:AE67 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AE67 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AE69 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AE6B -  -  -  -  		;
  110 D1:AE6B -  -  -  -  		; 		- term
  111 D1:AE6B -  -  -  -  		;
  112 D1:AE6B CD 20 AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AE6F CD B6 AC D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AE73 C9 -  -  -  		ret
  115 D1:AE74 -  -  -  -  		;
  116 D1:AE74 -  -  -  -  		;		! ? indirection check
  117 D1:AE74 -  -  -  -  		;
  118 D1:AE74 -  -  -  -  _ETCheckIndirection:	
  119 D1:AE74 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AE76 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AE78 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AE7A C2 7D AB D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AE7E -  -  -  -  		;
  124 D1:AE7E -  -  -  -  		; 		! ? indirection
  125 D1:AE7E -  -  -  -  		;
  126 D1:AE7E -  -  -  -  _ETIndirection:
  127 D1:AE7E F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AE7F CD D5 AD D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AE83 CD 79 AD D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AE87 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AE89 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AE8B CD A6 AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AE8F F1 -  -  -  		pop 	af 							; get type back
  134 D1:AE90 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AE92 CB F9 -  -  		set 	CIsReference,c
  136 D1:AE94 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AE96 C8 -  -  -  		ret 	z
  138 D1:AE97 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AE99 C9 -  -  -  		ret
  140 D1:AE9A -  -  -  -  _ETStringIndirect:
  141 D1:AE9A 3E 02 C3 13 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AEA0 -  -  -  -  		;
  143 D1:AEA0 -  -  -  -  		; 		Found an identifier.
  144 D1:AEA0 -  -  -  -  		;
  145 D1:AEA0 -  -  -  -  _ETVariable:
  146 D1:AEA0 CD 9F B0 D1 		call 	FindVariable 				; find the variable.
  147 D1:AEA4 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AEA5 3E 0F C3 13 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AEAB -  -  -  -  		
  150 D1:AEAB -  -  -  -  ; ***************************************************************************************
  151 D1:AEAB -  -  -  -  ;
  152 D1:AEAB -  -  -  -  ;									Changes and Updates
  153 D1:AEAB -  -  -  -  ;
  154 D1:AEAB -  -  -  -  ; ***************************************************************************************
  155 D1:AEAB -  -  -  -  ;
  156 D1:AEAB -  -  -  -  ;		Date			Notes
  157 D1:AEAB -  -  -  -  ;		==== 			=====
  158 D1:AEAB -  -  -  -  ;
  159 D1:AEAB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AEAB -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AEAB -  -  -  -  ; ***************************************************************************************
    2 D1:AEAB -  -  -  -  ; ***************************************************************************************
    3 D1:AEAB -  -  -  -  ;
    4 D1:AEAB -  -  -  -  ;		Name : 		abs.asm
    5 D1:AEAB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEAB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEAB -  -  -  -  ;		Reviewed :	No
    8 D1:AEAB -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AEAB -  -  -  -  ;
   10 D1:AEAB -  -  -  -  ; ***************************************************************************************
   11 D1:AEAB -  -  -  -  ; ***************************************************************************************
   12 D1:AEAB -  -  -  -  
   13 D1:AEAB -  -  -  -  ; ***************************************************************************************
   14 D1:AEAB -  -  -  -  ;
   15 D1:AEAB -  -  -  -  ;								abs( unary function
   16 D1:AEAB -  -  -  -  ;
   17 D1:AEAB -  -  -  -  ; ***************************************************************************************
   18 D1:AEAB -  -  -  -  
   19 D1:AEAB -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AEAB CD 20 AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AEAF D9 -  -  -  		exx 								; test MSB
   22 D1:AEB0 CB 7C -  -  		bit 	7,h
   23 D1:AEB2 D9 -  -  -  		exx
   24 D1:AEB3 C4 B6 AC D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AEB7 C9 -  -  -  		ret
   26 D1:AEB8 -  -  -  -  
   27 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   28 D1:AEB8 -  -  -  -  ;
   29 D1:AEB8 -  -  -  -  ;									Changes and Updates
   30 D1:AEB8 -  -  -  -  ;
   31 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   32 D1:AEB8 -  -  -  -  ;
   33 D1:AEB8 -  -  -  -  ;		Date			Notes
   34 D1:AEB8 -  -  -  -  ;		==== 			=====
   35 D1:AEB8 -  -  -  -  ;
   36 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   37 D1:AEB8 -  -  -  -  		
Listing for file "_build.asm"
   34 D1:AEB8 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AEB8 -  -  -  -  ; ***************************************************************************************
    2 D1:AEB8 -  -  -  -  ; ***************************************************************************************
    3 D1:AEB8 -  -  -  -  ;
    4 D1:AEB8 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AEB8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEB8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEB8 -  -  -  -  ;		Reviewed :	No
    8 D1:AEB8 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AEB8 -  -  -  -  ;
   10 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   11 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   12 D1:AEB8 -  -  -  -  
   13 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   14 D1:AEB8 -  -  -  -  ;
   15 D1:AEB8 -  -  -  -  ;								Asc unary function
   16 D1:AEB8 -  -  -  -  ;
   17 D1:AEB8 -  -  -  -  ; ***************************************************************************************
   18 D1:AEB8 -  -  -  -  
   19 D1:AEB8 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AEB8 CD 2F AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AEBC 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AEBD C3 6B AD D1 		jp 		Return8BitConstant
   23 D1:AEC1 -  -  -  -  
   24 D1:AEC1 -  -  -  -  ; ***************************************************************************************
   25 D1:AEC1 -  -  -  -  ;
   26 D1:AEC1 -  -  -  -  ;									Changes and Updates
   27 D1:AEC1 -  -  -  -  ;
   28 D1:AEC1 -  -  -  -  ; ***************************************************************************************
   29 D1:AEC1 -  -  -  -  ;
   30 D1:AEC1 -  -  -  -  ;		Date			Notes
   31 D1:AEC1 -  -  -  -  ;		==== 			=====
   32 D1:AEC1 -  -  -  -  ;
   33 D1:AEC1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AEC1 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AEC1 -  -  -  -  ; ***************************************************************************************
    2 D1:AEC1 -  -  -  -  ; ***************************************************************************************
    3 D1:AEC1 -  -  -  -  ;
    4 D1:AEC1 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AEC1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEC1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEC1 -  -  -  -  ;		Reviewed :	No
    8 D1:AEC1 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AEC1 -  -  -  -  ;
   10 D1:AEC1 -  -  -  -  ; ***************************************************************************************
   11 D1:AEC1 -  -  -  -  ; ***************************************************************************************
   12 D1:AEC1 -  -  -  -  
   13 D1:AEC1 -  -  -  -  ; ***************************************************************************************
   14 D1:AEC1 -  -  -  -  ;
   15 D1:AEC1 -  -  -  -  ;								Chr$() unary function
   16 D1:AEC1 -  -  -  -  ;
   17 D1:AEC1 -  -  -  -  ; ***************************************************************************************
   18 D1:AEC1 -  -  -  -  
   19 D1:AEC1 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AEC1 CD EB AA D1 		call 	CheckDollar
   21 D1:AEC5 CD 20 AD D1 		call 	EvaluateIntegerTerm
   22 D1:AEC9 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AECA 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AECC 21 1A A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AED0 36 0D -  -  		ld 		(hl),13
   26 D1:AED2 2B -  -  -  		dec 	hl
   27 D1:AED3 77 -  -  -  		ld 		(hl),a
   28 D1:AED4 C9 -  -  -  		ret
   29 D1:AED5 -  -  -  -  
   30 D1:AED5 -  -  -  -  ; ***************************************************************************************
   31 D1:AED5 -  -  -  -  ;
   32 D1:AED5 -  -  -  -  ;									Changes and Updates
   33 D1:AED5 -  -  -  -  ;
   34 D1:AED5 -  -  -  -  ; ***************************************************************************************
   35 D1:AED5 -  -  -  -  ;
   36 D1:AED5 -  -  -  -  ;		Date			Notes
   37 D1:AED5 -  -  -  -  ;		==== 			=====
   38 D1:AED5 -  -  -  -  ;
   39 D1:AED5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AED5 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AED5 -  -  -  -  ; ***************************************************************************************
    2 D1:AED5 -  -  -  -  ; ***************************************************************************************
    3 D1:AED5 -  -  -  -  ;
    4 D1:AED5 -  -  -  -  ;		Name : 		len.asm
    5 D1:AED5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AED5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AED5 -  -  -  -  ;		Reviewed :	None
    8 D1:AED5 -  -  -  -  ;		Purpose :	String Length
    9 D1:AED5 -  -  -  -  ;
   10 D1:AED5 -  -  -  -  ; ***************************************************************************************
   11 D1:AED5 -  -  -  -  ; ***************************************************************************************
   12 D1:AED5 -  -  -  -  
   13 D1:AED5 -  -  -  -  ; ***************************************************************************************
   14 D1:AED5 -  -  -  -  ;
   15 D1:AED5 -  -  -  -  ;								Len unary function
   16 D1:AED5 -  -  -  -  ;
   17 D1:AED5 -  -  -  -  ; ***************************************************************************************
   18 D1:AED5 -  -  -  -  
   19 D1:AED5 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AED5 CD 2F AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AED9 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AEDA CD 1E AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AEDE -  -  -  -  _ULCount:
   24 D1:AEDE 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AEDF FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AEE1 D8 -  -  -  		ret 	c
   27 D1:AEE2 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AEE3 13 -  -  -  		inc 	de
   29 D1:AEE4 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AEE6 -  -  -  -  
   31 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   32 D1:AEE6 -  -  -  -  ;
   33 D1:AEE6 -  -  -  -  ;									Changes and Updates
   34 D1:AEE6 -  -  -  -  ;
   35 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   36 D1:AEE6 -  -  -  -  ;
   37 D1:AEE6 -  -  -  -  ;		Date			Notes
   38 D1:AEE6 -  -  -  -  ;		==== 			=====
   39 D1:AEE6 -  -  -  -  ;
   40 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   41 D1:AEE6 -  -  -  -  		
Listing for file "_build.asm"
   37 D1:AEE6 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AEE6 -  -  -  -  ; ***************************************************************************************
    2 D1:AEE6 -  -  -  -  ; ***************************************************************************************
    3 D1:AEE6 -  -  -  -  ;
    4 D1:AEE6 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AEE6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEE6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEE6 -  -  -  -  ;		Reviewed :	No
    8 D1:AEE6 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AEE6 -  -  -  -  ;
   10 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   11 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   12 D1:AEE6 -  -  -  -  
   13 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   14 D1:AEE6 -  -  -  -  ;
   15 D1:AEE6 -  -  -  -  ;								Str$() unary function
   16 D1:AEE6 -  -  -  -  ;
   17 D1:AEE6 -  -  -  -  ; ***************************************************************************************
   18 D1:AEE6 -  -  -  -  
   19 D1:AEE6 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AEE6 CD 20 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AEEA CD A6 AD D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AEEE 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AEF0 C9 -  -  -  		ret
   24 D1:AEF1 -  -  -  -  
   25 D1:AEF1 -  -  -  -  ; ***************************************************************************************
   26 D1:AEF1 -  -  -  -  ;
   27 D1:AEF1 -  -  -  -  ;									Changes and Updates
   28 D1:AEF1 -  -  -  -  ;
   29 D1:AEF1 -  -  -  -  ; ***************************************************************************************
   30 D1:AEF1 -  -  -  -  ;
   31 D1:AEF1 -  -  -  -  ;		Date			Notes
   32 D1:AEF1 -  -  -  -  ;		==== 			=====
   33 D1:AEF1 -  -  -  -  ;
   34 D1:AEF1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:AEF1 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AEF1 -  -  -  -  ; ***************************************************************************************
    2 D1:AEF1 -  -  -  -  ; ***************************************************************************************
    3 D1:AEF1 -  -  -  -  ;
    4 D1:AEF1 -  -  -  -  ;		Name : 		not.asm
    5 D1:AEF1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEF1 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AEF1 -  -  -  -  ;		Reviewed :	No
    8 D1:AEF1 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AEF1 -  -  -  -  ;
   10 D1:AEF1 -  -  -  -  ; ***************************************************************************************
   11 D1:AEF1 -  -  -  -  ; ***************************************************************************************
   12 D1:AEF1 -  -  -  -  
   13 D1:AEF1 -  -  -  -  ; ***************************************************************************************
   14 D1:AEF1 -  -  -  -  ;
   15 D1:AEF1 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AEF1 -  -  -  -  ;
   17 D1:AEF1 -  -  -  -  ; ***************************************************************************************
   18 D1:AEF1 -  -  -  -  
   19 D1:AEF1 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AEF1 CD 20 AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AEF5 CD FE AE D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AEF9 CD FE AE D1 		call 	__UNSwap		
   23 D1:AEFD C9 -  -  -  		ret
   24 D1:AEFE -  -  -  -  
   25 D1:AEFE -  -  -  -  __UNSwap:
   26 D1:AEFE 7C -  -  -  		ld 		a,h
   27 D1:AEFF 2F -  -  -  		cpl
   28 D1:AF00 67 -  -  -  		ld 		h,a
   29 D1:AF01 7D -  -  -  		ld 		a,l
   30 D1:AF02 2F -  -  -  		cpl 	
   31 D1:AF03 6F -  -  -  		ld 		l,a
   32 D1:AF04 D9 -  -  -  		exx
   33 D1:AF05 C9 -  -  -  		ret
   34 D1:AF06 -  -  -  -  
   35 D1:AF06 -  -  -  -  ; ***************************************************************************************
   36 D1:AF06 -  -  -  -  ;
   37 D1:AF06 -  -  -  -  ;									Changes and Updates
   38 D1:AF06 -  -  -  -  ;
   39 D1:AF06 -  -  -  -  ; ***************************************************************************************
   40 D1:AF06 -  -  -  -  ;
   41 D1:AF06 -  -  -  -  ;		Date			Notes
   42 D1:AF06 -  -  -  -  ;		==== 			=====
   43 D1:AF06 -  -  -  -  ;
   44 D1:AF06 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AF06 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AF06 -  -  -  -  ; ***************************************************************************************
    2 D1:AF06 -  -  -  -  ; ***************************************************************************************
    3 D1:AF06 -  -  -  -  ;
    4 D1:AF06 -  -  -  -  ;		Name : 		page.asm
    5 D1:AF06 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF06 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF06 -  -  -  -  ;		Reviewed :	No
    8 D1:AF06 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AF06 -  -  -  -  ;
   10 D1:AF06 -  -  -  -  ; ***************************************************************************************
   11 D1:AF06 -  -  -  -  ; ***************************************************************************************
   12 D1:AF06 -  -  -  -  
   13 D1:AF06 -  -  -  -  ; ***************************************************************************************
   14 D1:AF06 -  -  -  -  ;
   15 D1:AF06 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AF06 -  -  -  -  ;
   17 D1:AF06 -  -  -  -  ; ***************************************************************************************
   18 D1:AF06 -  -  -  -  
   19 D1:AF06 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AF06 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AF0A D9 -  -  -  			exx
   22 D1:AF0B 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AF0F D9 -  -  -  			exx
   24 D1:AF10 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF12 C9 -  -  -  			ret
   26 D1:AF13 -  -  -  -  
   27 D1:AF13 -  -  -  -  ; ***************************************************************************************
   28 D1:AF13 -  -  -  -  ;
   29 D1:AF13 -  -  -  -  ;									Changes and Updates
   30 D1:AF13 -  -  -  -  ;
   31 D1:AF13 -  -  -  -  ; ***************************************************************************************
   32 D1:AF13 -  -  -  -  ;
   33 D1:AF13 -  -  -  -  ;		Date			Notes
   34 D1:AF13 -  -  -  -  ;		==== 			=====
   35 D1:AF13 -  -  -  -  ;
   36 D1:AF13 -  -  -  -  ; ***************************************************************************************
   37 D1:AF13 -  -  -  -  			
Listing for file "_build.asm"
   40 D1:AF13 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AF13 -  -  -  -  ; ***************************************************************************************
    2 D1:AF13 -  -  -  -  ; ***************************************************************************************
    3 D1:AF13 -  -  -  -  ;
    4 D1:AF13 -  -  -  -  ;		Name : 		random.asm
    5 D1:AF13 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF13 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF13 -  -  -  -  ;		Reviewed :	No
    8 D1:AF13 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AF13 -  -  -  -  ;
   10 D1:AF13 -  -  -  -  ; ***************************************************************************************
   11 D1:AF13 -  -  -  -  ; ***************************************************************************************
   12 D1:AF13 -  -  -  -  
   13 D1:AF13 -  -  -  -  ; ***************************************************************************************
   14 D1:AF13 -  -  -  -  ;
   15 D1:AF13 -  -  -  -  ;								Random unary function
   16 D1:AF13 -  -  -  -  ;
   17 D1:AF13 -  -  -  -  ; ***************************************************************************************
   18 D1:AF13 -  -  -  -  
   19 D1:AF13 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AF13 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AF1B CD 20 AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AF1F D9 -  -  -  		exx 								; is it -ve
   23 D1:AF20 CB 7C -  -  		bit 	7,h
   24 D1:AF22 D9 -  -  -  		exx
   25 D1:AF23 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AF25 22 ED A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AF29 D9 -  -  -  		exx
   28 D1:AF2A 22 F1 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AF2E D9 -  -  -  		exx
   30 D1:AF2F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AF31 C9 -  -  -  		ret
   32 D1:AF32 -  -  -  -  _URDontSeed:		
   33 D1:AF32 -  -  -  -  
   34 D1:AF32 CD 35 B6 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AF36 28 1C -  -  		jr 		z,_URFail
   36 D1:AF38 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AF39 D9 -  -  -  		exx
   38 D1:AF3A E5 -  -  -  		push 	hl
   39 D1:AF3B D9 -  -  -  		exx
   40 D1:AF3C -  -  -  -  		;
   41 D1:AF3C CD 65 AF D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AF40 D9 -  -  -  		exx
   43 D1:AF41 CD 65 AF D1 		call 	URandomHL
   44 D1:AF45 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AF47 D9 -  -  -  		exx
   46 D1:AF48 -  -  -  -  		;
   47 D1:AF48 D9 -  -  -  		exx 								; restore range.
   48 D1:AF49 D1 -  -  -  		pop 	de
   49 D1:AF4A D9 -  -  -  		exx
   50 D1:AF4B D1 -  -  -  		pop 	de
   51 D1:AF4C -  -  -  -  		;
   52 D1:AF4C CD C6 B4 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AF50 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AF51 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AF53 C9 -  -  -  		ret
   56 D1:AF54 -  -  -  -  _URFail:
   57 D1:AF54 3E 03 C3 13 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:AF5A -  -  -  -  ; ***************************************************************************************
   59 D1:AF5A -  -  -  -  ;
   60 D1:AF5A -  -  -  -  ; 									Push RNG off zero
   61 D1:AF5A -  -  -  -  ;
   62 D1:AF5A -  -  -  -  ; ***************************************************************************************
   63 D1:AF5A -  -  -  -  
   64 D1:AF5A -  -  -  -  UnaryRandomInitialise:
   65 D1:AF5A 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AF5C -  -  -  -  _URILoop:
   67 D1:AF5C C5 -  -  -  		push 	bc
   68 D1:AF5D CD 65 AF D1 		call 	URandomHL
   69 D1:AF61 C1 -  -  -  		pop 	bc
   70 D1:AF62 10 F8 -  -  		djnz 	_URILoop
   71 D1:AF64 C9 -  -  -  		ret
   72 D1:AF65 -  -  -  -  
   73 D1:AF65 -  -  -  -  ; ***************************************************************************************
   74 D1:AF65 -  -  -  -  ;
   75 D1:AF65 -  -  -  -  ;							16 bit random number generator
   76 D1:AF65 -  -  -  -  ;
   77 D1:AF65 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AF65 -  -  -  -  ;		Actual author unspecified.
   79 D1:AF65 -  -  -  -  ;
   80 D1:AF65 -  -  -  -  ; ***************************************************************************************
   81 D1:AF65 -  -  -  -  
   82 D1:AF65 -  -  -  -  URandomHL:
   83 D1:AF65 2A ED A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AF69 ED 5B F1 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AF6E 44 -  -  -  	    ld 		b,h
   86 D1:AF6F 4D -  -  -  	    ld 		c,l
   87 D1:AF70 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AF75 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AF7A 2C -  -  -  	    inc 	l
   90 D1:AF7B 09 -  -  -  	    add 	hl,bc
   91 D1:AF7C 22 ED A8 D1 	    ld 		(RandomSeed),hl
   92 D1:AF80 2A F1 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:AF84 ED 5A -  -  	    adc 	hl,de
   94 D1:AF86 22 F1 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:AF8A EB -  -  -  	    ex 		de,hl
   96 D1:AF8B 2A F5 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:AF8F ED 4B F9 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:AF94 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:AF99 ED 43 F9 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:AF9E 9F -  -  -  	    sbc 	a,a
  101 D1:AF9F E6 C5 -  -  	    and 	%11000101
  102 D1:AFA1 AD -  -  -  	    xor 	l
  103 D1:AFA2 6F -  -  -  	    ld 		l,a
  104 D1:AFA3 22 F5 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:AFA7 EB -  -  -  	    ex 		de,hl
  106 D1:AFA8 09 -  -  -  	    add 	hl,bc
  107 D1:AFA9 C9 -  -  -  	    ret		
  108 D1:AFAA -  -  -  -  
  109 D1:AFAA -  -  -  -  ; ***************************************************************************************
  110 D1:AFAA -  -  -  -  ;
  111 D1:AFAA -  -  -  -  ;									Changes and Updates
  112 D1:AFAA -  -  -  -  ;
  113 D1:AFAA -  -  -  -  ; ***************************************************************************************
  114 D1:AFAA -  -  -  -  ;
  115 D1:AFAA -  -  -  -  ;		Date			Notes
  116 D1:AFAA -  -  -  -  ;		==== 			=====
  117 D1:AFAA -  -  -  -  ;
  118 D1:AFAA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:AFAA -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:AFAA -  -  -  -  ; ***************************************************************************************
    2 D1:AFAA -  -  -  -  ; ***************************************************************************************
    3 D1:AFAA -  -  -  -  ;
    4 D1:AFAA -  -  -  -  ;		Name : 		sgn.asm
    5 D1:AFAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFAA -  -  -  -  ;		Reviewed :	No
    8 D1:AFAA -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:AFAA -  -  -  -  ;
   10 D1:AFAA -  -  -  -  ; ***************************************************************************************
   11 D1:AFAA -  -  -  -  ; ***************************************************************************************
   12 D1:AFAA -  -  -  -  
   13 D1:AFAA -  -  -  -  ; ***************************************************************************************
   14 D1:AFAA -  -  -  -  ;
   15 D1:AFAA -  -  -  -  ;								sgn unary function
   16 D1:AFAA -  -  -  -  ;
   17 D1:AFAA -  -  -  -  ; ***************************************************************************************
   18 D1:AFAA -  -  -  -  
   19 D1:AFAA -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:AFAA CD 20 AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:AFAE CD 35 B6 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:AFB2 CA 1E AC D1 		jp 		z,UnaryInt32False
   23 D1:AFB6 D9 -  -  -  		exx
   24 D1:AFB7 CB 7C -  -  		bit 	7,h
   25 D1:AFB9 D9 -  -  -  		exx
   26 D1:AFBA C2 1A AC D1 		jp 		nz,UnaryInt32True
   27 D1:AFBE 3E 01 -  -  		ld 		a,1
   28 D1:AFC0 C3 6B AD D1 		jp 		Return8BitConstant
   29 D1:AFC4 -  -  -  -  
   30 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   31 D1:AFC4 -  -  -  -  ;
   32 D1:AFC4 -  -  -  -  ;									Changes and Updates
   33 D1:AFC4 -  -  -  -  ;
   34 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   35 D1:AFC4 -  -  -  -  ;
   36 D1:AFC4 -  -  -  -  ;		Date			Notes
   37 D1:AFC4 -  -  -  -  ;		==== 			=====
   38 D1:AFC4 -  -  -  -  ;
   39 D1:AFC4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:AFC4 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:AFC4 -  -  -  -  ; ***************************************************************************************
    2 D1:AFC4 -  -  -  -  ; ***************************************************************************************
    3 D1:AFC4 -  -  -  -  ;
    4 D1:AFC4 -  -  -  -  ;		Name : 		simple.asm
    5 D1:AFC4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFC4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFC4 -  -  -  -  ;		Reviewed :	No
    8 D1:AFC4 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:AFC4 -  -  -  -  ;
   10 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   11 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   12 D1:AFC4 -  -  -  -  
   13 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   14 D1:AFC4 -  -  -  -  ;
   15 D1:AFC4 -  -  -  -  ;								( unary function (think about it)
   16 D1:AFC4 -  -  -  -  ;
   17 D1:AFC4 -  -  -  -  ; ***************************************************************************************
   18 D1:AFC4 -  -  -  -  
   19 D1:AFC4 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:AFC4 CD C7 AC D1 		call 	EvaluateAtPrecedence0
   21 D1:AFC8 C3 DD AA D1 		jp  	CheckRightBracket
   22 D1:AFCC -  -  -  -  
   23 D1:AFCC -  -  -  -  ; ***************************************************************************************
   24 D1:AFCC -  -  -  -  ;
   25 D1:AFCC -  -  -  -  ;									Handle &x
   26 D1:AFCC -  -  -  -  ;
   27 D1:AFCC -  -  -  -  ; ***************************************************************************************
   28 D1:AFCC -  -  -  -  
   29 D1:AFCC -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:AFCC DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:AFCF E6 C0 -  -  		and 		$C0
   32 D1:AFD1 FE 40 -  -  		cp 			$40
   33 D1:AFD3 C2 7D AB D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:AFD7 C3 D5 AD D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:AFDB -  -  -  -  
   36 D1:AFDB -  -  -  -  ; ***************************************************************************************
   37 D1:AFDB -  -  -  -  ;
   38 D1:AFDB -  -  -  -  ;									Changes and Updates
   39 D1:AFDB -  -  -  -  ;
   40 D1:AFDB -  -  -  -  ; ***************************************************************************************
   41 D1:AFDB -  -  -  -  ;
   42 D1:AFDB -  -  -  -  ;		Date			Notes
   43 D1:AFDB -  -  -  -  ;		==== 			=====
   44 D1:AFDB -  -  -  -  ;
   45 D1:AFDB -  -  -  -  ; ***************************************************************************************
   46 D1:AFDB -  -  -  -  		
Listing for file "_build.asm"
   43 D1:AFDB -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:AFDB -  -  -  -  ; ***************************************************************************************
    2 D1:AFDB -  -  -  -  ; ***************************************************************************************
    3 D1:AFDB -  -  -  -  ;
    4 D1:AFDB -  -  -  -  ;		Name : 		str.asm
    5 D1:AFDB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFDB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFDB -  -  -  -  ;		Reviewed :	No
    8 D1:AFDB -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:AFDB -  -  -  -  ;
   10 D1:AFDB -  -  -  -  ; ***************************************************************************************
   11 D1:AFDB -  -  -  -  ; ***************************************************************************************
   12 D1:AFDB -  -  -  -  
   13 D1:AFDB -  -  -  -  ; ***************************************************************************************
   14 D1:AFDB -  -  -  -  ;
   15 D1:AFDB -  -  -  -  ;								Str$() unary function
   16 D1:AFDB -  -  -  -  ;
   17 D1:AFDB -  -  -  -  ; ***************************************************************************************
   18 D1:AFDB -  -  -  -  
   19 D1:AFDB -  -  -  -  Unary_Str:	;; [str]
   20 D1:AFDB CD EB AA D1 		call 	CheckDollar
   21 D1:AFDF CD 20 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:AFE3 01 09 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:AFE7 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:AFE9 CD 7D B6 D1 		call 	Int32ToString 				
   25 D1:AFED 21 09 A9 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:AFF1 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:AFF3 C9 -  -  -  		ret
   28 D1:AFF4 -  -  -  -  
   29 D1:AFF4 -  -  -  -  ; ***************************************************************************************
   30 D1:AFF4 -  -  -  -  ;
   31 D1:AFF4 -  -  -  -  ;									Changes and Updates
   32 D1:AFF4 -  -  -  -  ;
   33 D1:AFF4 -  -  -  -  ; ***************************************************************************************
   34 D1:AFF4 -  -  -  -  ;
   35 D1:AFF4 -  -  -  -  ;		Date			Notes
   36 D1:AFF4 -  -  -  -  ;		==== 			=====
   37 D1:AFF4 -  -  -  -  ;
   38 D1:AFF4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:AFF4 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:AFF4 -  -  -  -  ; ***************************************************************************************
    2 D1:AFF4 -  -  -  -  ; ***************************************************************************************
    3 D1:AFF4 -  -  -  -  ;
    4 D1:AFF4 -  -  -  -  ;		Name : 		time.asm
    5 D1:AFF4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFF4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFF4 -  -  -  -  ;		Reviewed :	No
    8 D1:AFF4 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:AFF4 -  -  -  -  ;
   10 D1:AFF4 -  -  -  -  ; ***************************************************************************************
   11 D1:AFF4 -  -  -  -  ; ***************************************************************************************
   12 D1:AFF4 -  -  -  -  
   13 D1:AFF4 -  -  -  -  ; ***************************************************************************************
   14 D1:AFF4 -  -  -  -  ;
   15 D1:AFF4 -  -  -  -  ;							Get system time in ms
   16 D1:AFF4 -  -  -  -  ;
   17 D1:AFF4 -  -  -  -  ; ***************************************************************************************
   18 D1:AFF4 -  -  -  -  
   19 D1:AFF4 -  -  -  -  Unary_Time:	;; [time]
   20 D1:AFF4 CD 40 B7 D1 			call 	SYSGetTimer
   21 D1:AFF8 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:AFFA C9 -  -  -  			ret
   23 D1:AFFB -  -  -  -  
   24 D1:AFFB -  -  -  -  ; ***************************************************************************************
   25 D1:AFFB -  -  -  -  ;
   26 D1:AFFB -  -  -  -  ;									Changes and Updates
   27 D1:AFFB -  -  -  -  ;
   28 D1:AFFB -  -  -  -  ; ***************************************************************************************
   29 D1:AFFB -  -  -  -  ;
   30 D1:AFFB -  -  -  -  ;		Date			Notes
   31 D1:AFFB -  -  -  -  ;		==== 			=====
   32 D1:AFFB -  -  -  -  ;
   33 D1:AFFB -  -  -  -  ; ***************************************************************************************
   34 D1:AFFB -  -  -  -  			
Listing for file "_build.asm"
   45 D1:AFFB -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:AFFB -  -  -  -  ; ***************************************************************************************
    2 D1:AFFB -  -  -  -  ; ***************************************************************************************
    3 D1:AFFB -  -  -  -  ;
    4 D1:AFFB -  -  -  -  ;		Name : 		top.asm
    5 D1:AFFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFFB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFFB -  -  -  -  ;		Reviewed :	No
    8 D1:AFFB -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AFFB -  -  -  -  ;
   10 D1:AFFB -  -  -  -  ; ***************************************************************************************
   11 D1:AFFB -  -  -  -  ; ***************************************************************************************
   12 D1:AFFB -  -  -  -  
   13 D1:AFFB -  -  -  -  ; ***************************************************************************************
   14 D1:AFFB -  -  -  -  ;
   15 D1:AFFB -  -  -  -  ;							page unary function (no bracket)
   16 D1:AFFB -  -  -  -  ;
   17 D1:AFFB -  -  -  -  ; ***************************************************************************************
   18 D1:AFFB -  -  -  -  
   19 D1:AFFB -  -  -  -  Unary_Top:	;; [top]
   20 D1:AFFB 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:AFFF D9 -  -  -  			exx
   22 D1:B000 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B004 D9 -  -  -  			exx
   24 D1:B005 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B007 C9 -  -  -  			ret
   26 D1:B008 -  -  -  -  
   27 D1:B008 -  -  -  -  ; ***************************************************************************************
   28 D1:B008 -  -  -  -  ;
   29 D1:B008 -  -  -  -  ;									Changes and Updates
   30 D1:B008 -  -  -  -  ;
   31 D1:B008 -  -  -  -  ; ***************************************************************************************
   32 D1:B008 -  -  -  -  ;
   33 D1:B008 -  -  -  -  ;		Date			Notes
   34 D1:B008 -  -  -  -  ;		==== 			=====
   35 D1:B008 -  -  -  -  ;
   36 D1:B008 -  -  -  -  ; ***************************************************************************************
   37 D1:B008 -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B008 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B008 -  -  -  -  ; ***************************************************************************************
    2 D1:B008 -  -  -  -  ; ***************************************************************************************
    3 D1:B008 -  -  -  -  ;
    4 D1:B008 -  -  -  -  ;		Name : 		val.asm
    5 D1:B008 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B008 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B008 -  -  -  -  ;		Reviewed :	No
    8 D1:B008 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B008 -  -  -  -  ;
   10 D1:B008 -  -  -  -  ; ***************************************************************************************
   11 D1:B008 -  -  -  -  ; ***************************************************************************************
   12 D1:B008 -  -  -  -  
   13 D1:B008 -  -  -  -  ; ***************************************************************************************
   14 D1:B008 -  -  -  -  ;
   15 D1:B008 -  -  -  -  ;								val( unary function
   16 D1:B008 -  -  -  -  ;
   17 D1:B008 -  -  -  -  ; ***************************************************************************************
   18 D1:B008 -  -  -  -  
   19 D1:B008 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B008 CD 2F AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B00C E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B00D C1 -  -  -  		pop 	bc
   23 D1:B00E 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B010 CD 5B B5 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B014 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B016 C8 -  -  -  		ret		z 							; okay
   27 D1:B017 3E 03 C3 13 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B01D -  -  -  -  
   29 D1:B01D -  -  -  -  ; ***************************************************************************************
   30 D1:B01D -  -  -  -  ;
   31 D1:B01D -  -  -  -  ;									Changes and Updates
   32 D1:B01D -  -  -  -  ;
   33 D1:B01D -  -  -  -  ; ***************************************************************************************
   34 D1:B01D -  -  -  -  ;
   35 D1:B01D -  -  -  -  ;		Date			Notes
   36 D1:B01D -  -  -  -  ;		==== 			=====
   37 D1:B01D -  -  -  -  ;
   38 D1:B01D -  -  -  -  ; ***************************************************************************************
   39 D1:B01D -  -  -  -  		
Listing for file "_build.asm"
   47 D1:B01D -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B01D -  -  -  -  ; ***************************************************************************************
    2 D1:B01D -  -  -  -  ; ***************************************************************************************
    3 D1:B01D -  -  -  -  ;
    4 D1:B01D -  -  -  -  ;		Name : 		clear.asm
    5 D1:B01D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B01D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B01D -  -  -  -  ;		Reviewed :	No
    8 D1:B01D -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B01D -  -  -  -  ;
   10 D1:B01D -  -  -  -  ; ***************************************************************************************
   11 D1:B01D -  -  -  -  ; ***************************************************************************************
   12 D1:B01D -  -  -  -  
   13 D1:B01D -  -  -  -  ; ***************************************************************************************
   14 D1:B01D -  -  -  -  ;
   15 D1:B01D -  -  -  -  ;										CLEAR command
   16 D1:B01D -  -  -  -  ;
   17 D1:B01D -  -  -  -  ; ***************************************************************************************
   18 D1:B01D -  -  -  -  
   19 D1:B01D -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B01D -  -  -  -  		;
   21 D1:B01D -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B01D -  -  -  -  		;
   23 D1:B01D 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B021 -  -  -  -  _CCFindLow:
   25 D1:B021 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B025 5E -  -  -  		ld 		e,(hl)		
   27 D1:B026 19 -  -  -  		add 	hl,de
   28 D1:B027 7B -  -  -  		ld 		a,e
   29 D1:B028 B7 -  -  -  		or 		a
   30 D1:B029 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B02B 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B02C 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B030 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B031 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B035 -  -  -  -  		;
   36 D1:B035 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B035 -  -  -  -  		;
   38 D1:B035 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B039 -  -  -  -  		;
   40 D1:B039 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B03B 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B03F 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B043 19 -  -  -  		add 	hl,de
   44 D1:B044 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B046 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B04A -  -  -  -  		;
   47 D1:B04A 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B04E 19 -  -  -  		add 	hl,de
   49 D1:B04F 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B053 -  -  -  -  		;
   51 D1:B053 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 D1:B053 -  -  -  -  		;
   53 D1:B053 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 D1:B057 -  -  -  -  _CCFClearHT:
   55 D1:B057 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 D1:B058 36 00 -  -  		ld 		(hl),0
   57 D1:B05A 1B -  -  -  		dec 	de
   58 D1:B05B 7A -  -  -  		ld 		a,d
   59 D1:B05C B3 -  -  -  		or 		e
   60 D1:B05D 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 D1:B05F 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   62 D1:B063 -  -  -  -  		;
   63 D1:B063 -  -  -  -  		; 		Save highest byte that can be allocate
   64 D1:B063 -  -  -  -  		;
   65 D1:B063 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   66 D1:B067 -  -  -  -  		;
   67 D1:B067 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 D1:B067 -  -  -  -  		;
   69 D1:B067 CD 5A AF D1 		call 	UnaryRandomInitialise
   70 D1:B06B C9 -  -  -  		ret
   71 D1:B06C -  -  -  -  
   72 D1:B06C -  -  -  -  ; ***************************************************************************************
   73 D1:B06C -  -  -  -  ;
   74 D1:B06C -  -  -  -  ;									Changes and Updates
   75 D1:B06C -  -  -  -  ;
   76 D1:B06C -  -  -  -  ; ***************************************************************************************
   77 D1:B06C -  -  -  -  ;
   78 D1:B06C -  -  -  -  ;		Date			Notes
   79 D1:B06C -  -  -  -  ;		==== 			=====
   80 D1:B06C -  -  -  -  ;
   81 D1:B06C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:B06C -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B06C -  -  -  -  ; ***************************************************************************************
    2 D1:B06C -  -  -  -  ; ***************************************************************************************
    3 D1:B06C -  -  -  -  ;
    4 D1:B06C -  -  -  -  ;		Name : 		instance.asm
    5 D1:B06C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B06C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B06C -  -  -  -  ;		Reviewed :	No
    8 D1:B06C -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B06C -  -  -  -  ;
   10 D1:B06C -  -  -  -  ; ***************************************************************************************
   11 D1:B06C -  -  -  -  ; ***************************************************************************************
   12 D1:B06C -  -  -  -  
   13 D1:B06C -  -  -  -  ; ***************************************************************************************
   14 D1:B06C -  -  -  -  ;
   15 D1:B06C -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B06C -  -  -  -  ;
   17 D1:B06C -  -  -  -  ; ***************************************************************************************
   18 D1:B06C -  -  -  -  
   19 D1:B06C -  -  -  -  SetCurrentInstance:
   20 D1:B06C ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B071 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B075 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B07A -  -  -  -  
   24 D1:B07A C9 -  -  -  		ret
   25 D1:B07B -  -  -  -  
   26 D1:B07B -  -  -  -  
   27 D1:B07B -  -  -  -  ; ***************************************************************************************
   28 D1:B07B -  -  -  -  ;
   29 D1:B07B -  -  -  -  ;									Changes and Updates
   30 D1:B07B -  -  -  -  ;
   31 D1:B07B -  -  -  -  ; ***************************************************************************************
   32 D1:B07B -  -  -  -  ;
   33 D1:B07B -  -  -  -  ;		Date			Notes
   34 D1:B07B -  -  -  -  ;		==== 			=====
   35 D1:B07B -  -  -  -  ;
   36 D1:B07B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B07B -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B07B -  -  -  -  ; ***************************************************************************************
    2 D1:B07B -  -  -  -  ; ***************************************************************************************
    3 D1:B07B -  -  -  -  ;
    4 D1:B07B -  -  -  -  ;		Name : 		new.asm
    5 D1:B07B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B07B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B07B -  -  -  -  ;		Reviewed :	No
    8 D1:B07B -  -  -  -  ;		Purpose :	New command.
    9 D1:B07B -  -  -  -  ;
   10 D1:B07B -  -  -  -  ; ***************************************************************************************
   11 D1:B07B -  -  -  -  ; ***************************************************************************************
   12 D1:B07B -  -  -  -  
   13 D1:B07B -  -  -  -  ; ***************************************************************************************
   14 D1:B07B -  -  -  -  ;
   15 D1:B07B -  -  -  -  ;										NEW command
   16 D1:B07B -  -  -  -  ;
   17 D1:B07B -  -  -  -  ; ***************************************************************************************
   18 D1:B07B -  -  -  -  
   19 D1:B07B -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B07B 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B07F 36 00 -  -  		ld 		(hl),0
   22 D1:B081 CD 1D B0 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B085 3E 00 C3 13 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B08B -  -  -  -  
   25 D1:B08B -  -  -  -  ; ***************************************************************************************
   26 D1:B08B -  -  -  -  ;
   27 D1:B08B -  -  -  -  ;									Changes and Updates
   28 D1:B08B -  -  -  -  ;
   29 D1:B08B -  -  -  -  ; ***************************************************************************************
   30 D1:B08B -  -  -  -  ;
   31 D1:B08B -  -  -  -  ;		Date			Notes
   32 D1:B08B -  -  -  -  ;		==== 			=====
   33 D1:B08B -  -  -  -  ;
   34 D1:B08B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B08B -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B08B -  -  -  -  ; ***************************************************************************************
    2 D1:B08B -  -  -  -  ; ***************************************************************************************
    3 D1:B08B -  -  -  -  ;
    4 D1:B08B -  -  -  -  ;		Name : 		utility.asm
    5 D1:B08B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B08B -  -  -  -  ;		Reviewed :	No
    8 D1:B08B -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B08B -  -  -  -  ;
   10 D1:B08B -  -  -  -  ; ***************************************************************************************
   11 D1:B08B -  -  -  -  ; ***************************************************************************************
   12 D1:B08B -  -  -  -  
   13 D1:B08B -  -  -  -  ; ***************************************************************************************
   14 D1:B08B -  -  -  -  ;
   15 D1:B08B -  -  -  -  ;							Print ASCII string at HL
   16 D1:B08B -  -  -  -  ;
   17 D1:B08B -  -  -  -  ; ***************************************************************************************
   18 D1:B08B -  -  -  -  
   19 D1:B08B -  -  -  -  PrintStringAtHL:
   20 D1:B08B 7E -  -  -  		ld 		a,(hl)
   21 D1:B08C FE 20 -  -  		cp 		$20		
   22 D1:B08E D8 -  -  -  		ret 	c
   23 D1:B08F CD F0 B6 D1 		call 	SYSPrintChar
   24 D1:B093 23 -  -  -  		inc 	hl
   25 D1:B094 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B096 -  -  -  -  
   27 D1:B096 -  -  -  -  ; ***************************************************************************************
   28 D1:B096 -  -  -  -  ;
   29 D1:B096 -  -  -  -  ;									Changes and Updates
   30 D1:B096 -  -  -  -  ;
   31 D1:B096 -  -  -  -  ; ***************************************************************************************
   32 D1:B096 -  -  -  -  ;
   33 D1:B096 -  -  -  -  ;		Date			Notes
   34 D1:B096 -  -  -  -  ;		==== 			=====
   35 D1:B096 -  -  -  -  ;
   36 D1:B096 -  -  -  -  ; ***************************************************************************************
   37 D1:B096 -  -  -  -  		
Listing for file "_build.asm"
   51 D1:B096 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B096 -  -  -  -  ; ***************************************************************************************
    2 D1:B096 -  -  -  -  ; ***************************************************************************************
    3 D1:B096 -  -  -  -  ;
    4 D1:B096 -  -  -  -  ;		Name : 		create.asm
    5 D1:B096 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B096 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B096 -  -  -  -  ;		Reviewed :	No
    8 D1:B096 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B096 -  -  -  -  ;
   10 D1:B096 -  -  -  -  ; ***************************************************************************************
   11 D1:B096 -  -  -  -  ; ***************************************************************************************
   12 D1:B096 -  -  -  -  
   13 D1:B096 -  -  -  -  ; ***************************************************************************************
   14 D1:B096 -  -  -  -  ;
   15 D1:B096 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B096 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 10.
   17 D1:B096 -  -  -  -  ;
   18 D1:B096 -  -  -  -  ; ***************************************************************************************
   19 D1:B096 -  -  -  -  
   20 D1:B096 -  -  -  -  VariableCreate:
   21 D1:B096 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   22 D1:B09E C9 -  -  -  		ret
   23 D1:B09F -  -  -  -  
   24 D1:B09F -  -  -  -  ; ***************************************************************************************
   25 D1:B09F -  -  -  -  ;
   26 D1:B09F -  -  -  -  ;									Changes and Updates
   27 D1:B09F -  -  -  -  ;
   28 D1:B09F -  -  -  -  ; ***************************************************************************************
   29 D1:B09F -  -  -  -  ;
   30 D1:B09F -  -  -  -  ;		Date			Notes
   31 D1:B09F -  -  -  -  ;		==== 			=====
   32 D1:B09F -  -  -  -  ;
   33 D1:B09F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B09F -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B09F -  -  -  -  ; ***************************************************************************************
    2 D1:B09F -  -  -  -  ; ***************************************************************************************
    3 D1:B09F -  -  -  -  ;
    4 D1:B09F -  -  -  -  ;		Name : 		find.asm
    5 D1:B09F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B09F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B09F -  -  -  -  ;		Reviewed :	No
    8 D1:B09F -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B09F -  -  -  -  ;
   10 D1:B09F -  -  -  -  ; ***************************************************************************************
   11 D1:B09F -  -  -  -  ; ***************************************************************************************
   12 D1:B09F -  -  -  -  
   13 D1:B09F -  -  -  -  ; ***************************************************************************************
   14 D1:B09F -  -  -  -  ;
   15 D1:B09F -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B09F -  -  -  -  ; 		variable information at (IX)
   17 D1:B09F -  -  -  -  ;
   18 D1:B09F -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B09F -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B09F -  -  -  -  ;
   21 D1:B09F -  -  -  -  ; ***************************************************************************************
   22 D1:B09F -  -  -  -  
   23 D1:B09F -  -  -  -  FindVariable:
   24 D1:B09F DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B0A2 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B0A4 D2 7D AB D1 		jp 		nc,SyntaxError 		
   27 D1:B0A8 -  -  -  -  
   28 D1:B0A8 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B0AB FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B0AD 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B0AF FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B0B1 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B0B3 -  -  -  -  		;
   34 D1:B0B3 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B0B3 -  -  -  -  		;
   36 D1:B0B3 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B0B7 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B0BA 87 -  -  -  		add 	a,a 						; x4
   39 D1:B0BB 87 -  -  -  		add 	a,a
   40 D1:B0BC B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B0BD 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B0BE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B0C0 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B0C2 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B0C4 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B0C5 C9 -  -  -  		ret
   47 D1:B0C6 -  -  -  -  		;
   48 D1:B0C6 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B0C6 -  -  -  -  		;
   50 D1:B0C6 -  -  -  -  _FVNotSimple:
   51 D1:B0C6 CD 02 B1 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B0CA CD 3C B1 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B0CE 38 0B -  -  		jr 		c,_FVNotFound  				
   54 D1:B0D0 -  -  -  -  		;
   55 D1:B0D0 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B0D0 -  -  -  -  		;
   57 D1:B0D0 -  -  -  -  _FVExitReference:		
   58 D1:B0D0 11 0A 00 00 		ld 		de,10 						; point to the actual data.
   59 D1:B0D4 19 -  -  -  		add 	hl,de 
   60 D1:B0D5 -  -  -  -  		;
   61 D1:B0D5 -  -  -  -  		; 		TODO: Array check code.
   62 D1:B0D5 -  -  -  -  		;
   63 D1:B0D5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 D1:B0D7 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 D1:B0D9 AF -  -  -  		xor 	a 							; clear carry and return
   66 D1:B0DA C9 -  -  -  		ret
   67 D1:B0DB -  -  -  -  		;
   68 D1:B0DB -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 D1:B0DB -  -  -  -  		;
   70 D1:B0DB -  -  -  -  _FVNotFound:		
   71 D1:B0DB F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
   72 D1:B0E3 -  -  -  -  
   73 D1:B0E3 3A FD A8 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   74 D1:B0E7 B7 -  -  -  		or 		a
   75 D1:B0E8 28 11 -  -  		jr 		z,_FVFail
   76 D1:B0EA DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   77 D1:B0ED FE 95 -  -  		cp 		KWD_LPAREN 		
   78 D1:B0EF 28 0A -  -  		jr 		z,_FVFail
   79 D1:B0F1 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   80 D1:B0F5 CD 96 B0 D1 		call 	VariableCreate 				; create a new variable.
   81 D1:B0F9 18 D5 -  -  		jr 		_FVExitReference 			; and exit with HL+10 as a reference
   82 D1:B0FB -  -  -  -  
   83 D1:B0FB -  -  -  -  _FVFail:
   84 D1:B0FB DD 2A FF A8 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   85 D1:B100 37 -  -  -  		scf
   86 D1:B101 C9 -  -  -  		ret
   87 D1:B102 -  -  -  -  
   88 D1:B102 -  -  -  -  ; ***************************************************************************************
   89 D1:B102 -  -  -  -  ;
   90 D1:B102 -  -  -  -  ;									Changes and Updates
   91 D1:B102 -  -  -  -  ;
   92 D1:B102 -  -  -  -  ; ***************************************************************************************
   93 D1:B102 -  -  -  -  ;
   94 D1:B102 -  -  -  -  ;		Date			Notes
   95 D1:B102 -  -  -  -  ;		==== 			=====
   96 D1:B102 -  -  -  -  ;
   97 D1:B102 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 D1:B102 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B102 -  -  -  -  ; ***************************************************************************************
    2 D1:B102 -  -  -  -  ; ***************************************************************************************
    3 D1:B102 -  -  -  -  ;
    4 D1:B102 -  -  -  -  ;		Name : 		info.asm
    5 D1:B102 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B102 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B102 -  -  -  -  ;		Reviewed :	No
    8 D1:B102 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B102 -  -  -  -  ;
   10 D1:B102 -  -  -  -  ; ***************************************************************************************
   11 D1:B102 -  -  -  -  ; ***************************************************************************************
   12 D1:B102 -  -  -  -  
   13 D1:B102 -  -  -  -  ; ***************************************************************************************
   14 D1:B102 -  -  -  -  ;
   15 D1:B102 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B102 -  -  -  -  ; 		after the identifier.
   17 D1:B102 -  -  -  -  ;
   18 D1:B102 -  -  -  -  ; ***************************************************************************************
   19 D1:B102 -  -  -  -  
   20 D1:B102 -  -  -  -  VariableInformation:
   21 D1:B102 DD 22 FF A8 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B107 -  -  -  -  		;
   23 D1:B107 -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B107 -  -  -  -  		;
   25 D1:B107 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B109 -  -  -  -  _VICalculateHash:
   27 D1:B109 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B10C FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B10E 30 08 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B110 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B111 0F -  -  -  		rrca 								; rotate byte twice right
   32 D1:B112 0F -  -  -  		rrca
   33 D1:B113 47 -  -  -  		ld 		b,a 						; update hash
   34 D1:B114 DD 23 -  -  		inc 	ix 							; next character
   35 D1:B116 18 F1 -  -  		jr 		_VICalculateHash				
   36 D1:B118 -  -  -  -  		;
   37 D1:B118 -  -  -  -  _VIHashDone:
   38 D1:B118 78 -  -  -  		ld 		a,b 						; write hash byte out
   39 D1:B119 32 03 A9 D1 		ld 		(VarHash),a
   40 D1:B11D -  -  -  -  		;
   41 D1:B11D -  -  -  -  		; 		Calculate the hash table address pointer.
   42 D1:B11D -  -  -  -  		;		
   43 D1:B11D E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   44 D1:B11F 87 -  -  -  		add 	a,a 						; multiply by 4
   45 D1:B120 87 -  -  -  		add 	a,a
   46 D1:B121 11 00 00 00 		ld 		de,$0000 					; put in DE
   47 D1:B125 5F -  -  -  		ld 		e,a
   48 D1:B126 -  -  -  -  		;
   49 D1:B126 21 C9 A8 D1 		ld 		hl,HashTableBase 			; add to hash table base.
   50 D1:B12A 19 -  -  -  		add 	hl,de
   51 D1:B12B -  -  -  -  		;
   52 D1:B12B DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   53 D1:B12E FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   54 D1:B130 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   55 D1:B132 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   56 D1:B136 19 -  -  -  		add 	hl,de 						; for hash tables
   57 D1:B137 -  -  -  -  _VINotArray:
   58 D1:B137 22 05 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   59 D1:B13B C9 -  -  -  		ret
   60 D1:B13C -  -  -  -  
   61 D1:B13C -  -  -  -  ; ***************************************************************************************
   62 D1:B13C -  -  -  -  ;
   63 D1:B13C -  -  -  -  ;									Changes and Updates
   64 D1:B13C -  -  -  -  ;
   65 D1:B13C -  -  -  -  ; ***************************************************************************************
   66 D1:B13C -  -  -  -  ;
   67 D1:B13C -  -  -  -  ;		Date			Notes
   68 D1:B13C -  -  -  -  ;		==== 			=====
   69 D1:B13C -  -  -  -  ;
   70 D1:B13C -  -  -  -  ; ***************************************************************************************
   71 D1:B13C -  -  -  -  
Listing for file "_build.asm"
   54 D1:B13C -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B13C -  -  -  -  ; ***************************************************************************************
    2 D1:B13C -  -  -  -  ; ***************************************************************************************
    3 D1:B13C -  -  -  -  ;
    4 D1:B13C -  -  -  -  ;		Name : 		search.asm
    5 D1:B13C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B13C -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B13C -  -  -  -  ;		Reviewed :	No
    8 D1:B13C -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B13C -  -  -  -  ;
   10 D1:B13C -  -  -  -  ; ***************************************************************************************
   11 D1:B13C -  -  -  -  ; ***************************************************************************************
   12 D1:B13C -  -  -  -  
   13 D1:B13C -  -  -  -  ; ***************************************************************************************
   14 D1:B13C -  -  -  -  ;
   15 D1:B13C -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B13C -  -  -  -  ;		CS if failed.
   17 D1:B13C -  -  -  -  ;
   18 D1:B13C -  -  -  -  ; ***************************************************************************************
   19 D1:B13C -  -  -  -  
   20 D1:B13C -  -  -  -  VariableSearchList:
   21 D1:B13C 37 -  -  -  		scf
   22 D1:B13D C9 -  -  -  		ret
   23 D1:B13E -  -  -  -  
   24 D1:B13E -  -  -  -  ; ***************************************************************************************
   25 D1:B13E -  -  -  -  ;
   26 D1:B13E -  -  -  -  ;									Changes and Updates
   27 D1:B13E -  -  -  -  ;
   28 D1:B13E -  -  -  -  ; ***************************************************************************************
   29 D1:B13E -  -  -  -  ;
   30 D1:B13E -  -  -  -  ;		Date			Notes
   31 D1:B13E -  -  -  -  ;		==== 			=====
   32 D1:B13E -  -  -  -  ;
   33 D1:B13E -  -  -  -  ; ***************************************************************************************
   34 D1:B13E -  -  -  -  		
Listing for file "_build.asm"
   55 D1:B13E -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:B13E -  -  -  -  ;
    2 D1:B13E -  -  -  -  ;	This file is automatically generated.
    3 D1:B13E -  -  -  -  ;
    4 D1:B13E -  -  -  -  ;
    5 D1:B13E -  -  -  -  ;	Keywords for set 0
    6 D1:B13E -  -  -  -  ;
    7 D1:B13E -  -  -  -  KeywordsSet0:
    8 D1:B13E 01 20 -  -  	.db	1," "              ; $0080
    9 D1:B140 01 20 -  -  	.db	1," "              ; $0081
   10 D1:B142 01 20 -  -  	.db	1," "              ; $0082
   11 D1:B144 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:B146 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:B148 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:B14A 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:B14C 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:B150 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 D1:B154 01 2B -  -  	.db	1,"+"              ; $0089
   18 D1:B156 01 2D -  -  	.db	1,"-"              ; $008a
   19 D1:B158 02 3E 3D -  	.db	2,">="             ; $008b
   20 D1:B15B 02 3C 3D -  	.db	2,"<="             ; $008c
   21 D1:B15E 01 3E -  -  	.db	1,">"              ; $008d
   22 D1:B160 01 3C -  -  	.db	1,"<"              ; $008e
   23 D1:B162 01 3D -  -  	.db	1,"="              ; $008f
   24 D1:B164 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 D1:B167 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 D1:B16B 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 D1:B16E 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 D1:B172 01 26 -  -  	.db	1,"&"              ; $0094
   29 D1:B174 01 28 -  -  	.db	1,"("              ; $0095
   30 D1:B176 01 24 -  -  	.db	1,"$"              ; $0096
   31 D1:B178 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 D1:B17C 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 D1:B180 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 D1:B184 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 D1:B188 03 53 54 52 	.db	3,"STR"            ; $009b
   36 D1:B18C 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 D1:B190 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 D1:B194 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 D1:B198 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 D1:B19D 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 D1:B1A2 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 D1:B1A6 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 D1:B1AA 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 D1:B1AF 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 D1:B1B5 01 29 -  -  	.db	1,")"              ; $00a5
   46 D1:B1B7 01 2C -  -  	.db	1,","              ; $00a6
   47 D1:B1B9 01 3A -  -  	.db	1,":"              ; $00a7
   48 D1:B1BB 01 3B -  -  	.db	1,";"              ; $00a8
   49 D1:B1BD 01 27 -  -  	.db	1,"'"              ; $00a9
   50 D1:B1BF 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 D1:B1C6 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 D1:B1CC 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 D1:B1CF 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 D1:B1D4 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 D1:B1D9 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 D1:B1DD 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 D1:B1E0 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 D1:B1E5 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 D1:B1EA 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 D1:B1EE 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 D1:B1F3 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 D1:B1FB 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 D1:B201 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 D1:B205 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 D1:B209 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 D1:B20D 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 D1:B211 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 D1:B217 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 D1:B21C 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 D1:B221 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 D1:B226 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 D1:B22A 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 D1:B22E 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 D1:B233 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 D1:B238 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 D1:B240 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 D1:B247 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 D1:B24D 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 D1:B251 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 D1:B256 00 -  -  -  	.db	0
   81 D1:B257 -  -  -  -  ;
   82 D1:B257 -  -  -  -  ;	Keywords for set 1
   83 D1:B257 -  -  -  -  ;
   84 D1:B257 -  -  -  -  KeywordsSet1:
   85 D1:B257 00 -  -  -  	.db	0
   86 D1:B258 -  -  -  -  ;
   87 D1:B258 -  -  -  -  ;	Keywords for set 2
   88 D1:B258 -  -  -  -  ;
   89 D1:B258 -  -  -  -  KeywordsSet2:
   90 D1:B258 00 -  -  -  	.db	0
Listing for file "_build.asm"
   56 D1:B259 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B259 -  -  -  -  ;
    2 D1:B259 -  -  -  -  ;	This file is automatically generated.
    3 D1:B259 -  -  -  -  ;
    4 D1:B259 00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 D1:B260 -  -  -  -  PrecedenceTable:
    6 D1:B260 06 -  -  -  	.db	6	; $0083 !
    7 D1:B261 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B262 05 -  -  -  	.db	5	; $0085 *
    9 D1:B263 05 -  -  -  	.db	5	; $0086 /
   10 D1:B264 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B265 05 -  -  -  	.db	5	; $0088 div
   12 D1:B266 04 -  -  -  	.db	4	; $0089 +
   13 D1:B267 04 -  -  -  	.db	4	; $008a -
   14 D1:B268 03 -  -  -  	.db	3	; $008b >=
   15 D1:B269 03 -  -  -  	.db	3	; $008c <=
   16 D1:B26A 03 -  -  -  	.db	3	; $008d >
   17 D1:B26B 03 -  -  -  	.db	3	; $008e <
   18 D1:B26C 03 -  -  -  	.db	3	; $008f =
   19 D1:B26D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B26E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B26F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B270 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B271 -  -  -  -  
Listing for file "_build.asm"
   57 D1:B271 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B271 -  -  -  -  ;
    2 D1:B271 -  -  -  -  ;	This is automatically generated.
    3 D1:B271 -  -  -  -  ;
    4 D1:B271 -  -  -  -  ErrorIDTable:
    5 D1:B271 B1 B2 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B275 B7 B2 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B279 C8 B2 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B27D D6 B2 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B281 E0 B2 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:B285 FA B2 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:B289 0B B3 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:B28D 19 B3 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:B291 27 B3 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 D1:B295 31 B3 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 D1:B299 46 B3 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 D1:B29D 5C B3 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 D1:B2A1 6A B3 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 D1:B2A5 6F B3 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 D1:B2A9 7C B3 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 D1:B2AD 8D B3 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 D1:B2B1 -  -  -  -  
   22 D1:B2B1 -  -  -  -  ErrText_warmstart:
   23 D1:B2B1 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 D1:B2B7 -  -  -  -  ErrText_assert:
   25 D1:B2B7 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 D1:B2C8 -  -  -  -  ErrText_badtype:
   27 D1:B2C8 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 D1:B2D6 -  -  -  -  ErrText_badvalue:
   29 D1:B2D6 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 D1:B2E0 -  -  -  -  ErrText_disabled:
   31 D1:B2E0 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 D1:B2FA -  -  -  -  ErrText_divzero:
   33 D1:B2FA 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 D1:B30B -  -  -  -  ErrText_memory:
   35 D1:B30B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 D1:B319 -  -  -  -  ErrText_nocomma:
   37 D1:B319 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 D1:B327 -  -  -  -  ErrText_nodollar:
   39 D1:B327 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 D1:B331 -  -  -  -  ErrText_nolbracket:
   41 D1:B331 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 D1:B346 -  -  -  -  ErrText_norbracket:
   43 D1:B346 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 D1:B35C -  -  -  -  ErrText_notref:
   45 D1:B35C 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 D1:B36A -  -  -  -  ErrText_stop:
   47 D1:B36A 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 D1:B36F -  -  -  -  ErrText_syntax:
   49 D1:B36F 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 D1:B37C -  -  -  -  ErrText_todo:
   51 D1:B37C 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 D1:B38D -  -  -  -  ErrText_unknownvar:
   53 D1:B38D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   58 D1:B39E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B39E -  -  -  -  ;
    2 D1:B39E -  -  -  -  ;	Vectors for set 0
    3 D1:B39E -  -  -  -  ;
    4 D1:B39E -  -  -  -  VectorsSet0:
    5 D1:B39E 77 A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B3A2 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B3A6 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B3AA F3 AB D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B3AE FC AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B3B2 9F AB D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B3B6 AD AB D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B3BA BB AB D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B3BE AD AB D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B3C2 83 AB D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B3C6 91 AB D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B3CA 5A AC D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B3CE 50 AC D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B3D2 3C AC D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B3D6 32 AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B3DA 28 AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B3DE 46 AC D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B3E2 C9 AB D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B3E6 D7 AB D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B3EA E5 AB D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B3EE CC AF D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B3F2 C4 AF D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B3F6 E6 AE D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B3FA 13 AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B3FE D5 AE D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B402 AB AE D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B406 AA AF D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B40A DB AF D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B40E C1 AE D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B412 B8 AE D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B416 F1 AE D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B41A 06 AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B41E F4 AF D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B422 FB AF D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B426 08 B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B42A 1A AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B42E 1E AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B432 6C A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B436 6C A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B43A 70 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B43E 6C A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B442 39 AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B446 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa repeat
   48 D1:B44A A5 A8 D1 00 	addr(Unimplemented)              ; $00ab until
   49 D1:B44E A5 A8 D1 00 	addr(Unimplemented)              ; $00ac if
   50 D1:B452 6C A9 D1 00 	addr(BadCmd_Then)                ; $00ad then
   51 D1:B456 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae else
   52 D1:B45A A5 A8 D1 00 	addr(Unimplemented)              ; $00af for
   53 D1:B45E 6C A9 D1 00 	addr(BadCmd_To)                  ; $00b0 to
   54 D1:B462 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 step
   55 D1:B466 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 next
   56 D1:B46A 6C A9 D1 00 	addr(BadCmd_Defproc)             ; $00b3 def
   57 D1:B46E A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 proc
   58 D1:B472 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 endproc
   59 D1:B476 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 local
   60 D1:B47A A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 dim
   61 D1:B47E 39 AA D1 00 	addr(Command_REM)                ; $00b8 rem
   62 D1:B482 8E A9 D1 00 	addr(Command_LET)                ; $00b9 let
   63 D1:B486 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba vdu
   64 D1:B48A E2 A9 D1 00 	addr(Command_PRINT)              ; $00bb print
   65 D1:B48E A5 A8 D1 00 	addr(Unimplemented)              ; $00bc load
   66 D1:B492 A5 A8 D1 00 	addr(Unimplemented)              ; $00bd save
   67 D1:B496 A5 A8 D1 00 	addr(Unimplemented)              ; $00be list
   68 D1:B49A 7B B0 D1 00 	addr(Command_NEW)                ; $00bf new
   69 D1:B49E 56 AA D1 00 	addr(Command_RUN)                ; $00c0 run
   70 D1:B4A2 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 read
   71 D1:B4A6 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 data
   72 D1:B4AA A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 restore
   73 D1:B4AE 5B A9 D1 00 	addr(Command_ASSERT)             ; $00c4 assert
   74 D1:B4B2 1D B0 D1 00 	addr(Command_CLEAR)              ; $00c5 clear
   75 D1:B4B6 71 A9 D1 00 	addr(Command_END)                ; $00c6 end
   76 D1:B4BA C9 AA D1 00 	addr(Command_STOP)               ; $00c7 stop
   77 D1:B4BE -  -  -  -  ;
   78 D1:B4BE -  -  -  -  ;	Vectors for set 1
   79 D1:B4BE -  -  -  -  ;
   80 D1:B4BE -  -  -  -  VectorsSet1:
   81 D1:B4BE -  -  -  -  ;
   82 D1:B4BE -  -  -  -  ;	Vectors for set 2
   83 D1:B4BE -  -  -  -  ;
   84 D1:B4BE -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   59 D1:B4BE -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B4BE -  -  -  -  ; ***************************************************************************************
    2 D1:B4BE -  -  -  -  ; ***************************************************************************************
    3 D1:B4BE -  -  -  -  ;
    4 D1:B4BE -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B4BE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4BE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B4BE -  -  -  -  ;		Reviewed :	No
    8 D1:B4BE -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B4BE -  -  -  -  ;
   10 D1:B4BE -  -  -  -  ; ***************************************************************************************
   11 D1:B4BE -  -  -  -  ; ***************************************************************************************
   12 D1:B4BE -  -  -  -  
   13 D1:B4BE -  -  -  -  ; ***************************************************************************************
   14 D1:B4BE -  -  -  -  ;
   15 D1:B4BE -  -  -  -  ;								Unsigned integer divide
   16 D1:B4BE -  -  -  -  ;
   17 D1:B4BE -  -  -  -  ; ***************************************************************************************
   18 D1:B4BE -  -  -  -  
   19 D1:B4BE -  -  -  -  Int32UDivide:
   20 D1:B4BE 37 -  -  -  		scf
   21 D1:B4BF C3 03 B5 D1 		jp 		_I32UnsignedDivide		
   22 D1:B4C3 -  -  -  -  
   23 D1:B4C3 -  -  -  -  ; ***************************************************************************************
   24 D1:B4C3 -  -  -  -  ;
   25 D1:B4C3 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B4C3 -  -  -  -  ;
   27 D1:B4C3 -  -  -  -  ; ***************************************************************************************
   28 D1:B4C3 -  -  -  -  
   29 D1:B4C3 -  -  -  -  Int32SDivide:
   30 D1:B4C3 37 -  -  -  		scf
   31 D1:B4C4 18 01 -  -  		jr 		_I32SDivide
   32 D1:B4C6 -  -  -  -  Int32Modulus:
   33 D1:B4C6 AF -  -  -  		xor 	a
   34 D1:B4C7 -  -  -  -  _I32SDivide:
   35 D1:B4C7 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B4C8 F5 -  -  -  		push 	af
   37 D1:B4C9 08 -  -  -  		ex 		af,af'
   38 D1:B4CA -  -  -  -  
   39 D1:B4CA D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B4CB D9 -  -  -  		exx
   41 D1:B4CC D5 -  -  -  		push 	de
   42 D1:B4CD D9 -  -  -  		exx
   43 D1:B4CE -  -  -  -  
   44 D1:B4CE F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B4CF AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B4D0 CD F0 B4 D1 		call 	_I32CheckHLSignSwap
   47 D1:B4D4 CD F0 B4 D1 		call 	_I32CheckHLSignSwap
   48 D1:B4D8 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B4D9 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B4DA F5 -  -  -  		push 	af
   51 D1:B4DB CD 03 B5 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B4DF F1 -  -  -  		pop 	af 							; get function back
   53 D1:B4E0 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B4E2 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B4E3 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B4E5 C4 66 B6 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B4E9 -  -  -  -  _I32SDExit:
   58 D1:B4E9 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B4EA D1 -  -  -  		pop 	de
   60 D1:B4EB D9 -  -  -  		exx
   61 D1:B4EC D1 -  -  -  		pop 	de
   62 D1:B4ED F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B4EE 08 -  -  -  		ex 		af,af'
   64 D1:B4EF C9 -  -  -  		ret
   65 D1:B4F0 -  -  -  -  
   66 D1:B4F0 -  -  -  -  
   67 D1:B4F0 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B4F0 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B4F1 CB 7C -  -  		bit 	7,h
   70 D1:B4F3 D9 -  -  -  		exx
   71 D1:B4F4 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B4F6 -  -  -  -  		;
   73 D1:B4F6 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B4F8 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B4F9 CD 66 B6 D1 		call 	Int32Negate 				
   76 D1:B4FD F1 -  -  -  		pop 	af
   77 D1:B4FE -  -  -  -  _I32CHSPositive:
   78 D1:B4FE D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B4FF EB -  -  -  		ex 		de,hl
   80 D1:B500 D9 -  -  -  		exx		
   81 D1:B501 EB -  -  -  		ex 		de,hl
   82 D1:B502 C9 -  -  -  		ret
   83 D1:B503 -  -  -  -  
   84 D1:B503 -  -  -  -  ; ***************************************************************************************
   85 D1:B503 -  -  -  -  ;
   86 D1:B503 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B503 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B503 -  -  -  -  ;
   89 D1:B503 -  -  -  -  ; ***************************************************************************************
   90 D1:B503 -  -  -  -  
   91 D1:B503 -  -  -  -  _I32UnsignedDivide:
   92 D1:B503 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B504 D5 -  -  -  		push 	de
   94 D1:B505 D9 -  -  -  		exx
   95 D1:B506 C5 -  -  -  		push 	bc
   96 D1:B507 D5 -  -  -  		push 	de 							
   97 D1:B508 D9 -  -  -  		exx
   98 D1:B509 -  -  -  -  
   99 D1:B509 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B50A -  -  -  -  
  101 D1:B50A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B50B B3 -  -  -  		or 		e
  103 D1:B50C D9 -  -  -  		exx
  104 D1:B50D B2 -  -  -  		or 		d
  105 D1:B50E B3 -  -  -  		or 		e
  106 D1:B50F D9 -  -  -  		exx
  107 D1:B510 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B514 -  -  -  -  
  109 D1:B514 -  -  -  -  
  110 D1:B514 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B515 4D -  -  -  		ld		c,l
  112 D1:B516 21 00 00 00 		ld 		hl,$0000
  113 D1:B51A D9 -  -  -  		exx
  114 D1:B51B 44 -  -  -  		ld 		b,h
  115 D1:B51C 4D -  -  -  		ld		c,l
  116 D1:B51D 21 00 00 00 		ld 		hl,$0000
  117 D1:B521 D9 -  -  -  		exx
  118 D1:B522 -  -  -  -  
  119 D1:B522 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B524 -  -  -  -  _I32DivideLoop:
  121 D1:B524 F5 -  -  -  		push 	af
  122 D1:B525 -  -  -  -  
  123 D1:B525 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B527 CB 10 -  -  		rl 		b
  125 D1:B529 D9 -  -  -  		exx
  126 D1:B52A CB 11 -  -  		rl 		c
  127 D1:B52C CB 10 -  -  		rl 		b
  128 D1:B52E D9 -  -  -  		exx
  129 D1:B52F CB 15 -  -  		rl 		l
  130 D1:B531 CB 14 -  -  		rl 		h
  131 D1:B533 D9 -  -  -  		exx
  132 D1:B534 CB 15 -  -  		rl 		l
  133 D1:B536 CB 14 -  -  		rl 		h
  134 D1:B538 D9 -  -  -  		exx
  135 D1:B539 -  -  -  -  
  136 D1:B539 CD 04 B6 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B53D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B53F -  -  -  -  
  139 D1:B53F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B540 18 04 -  -  		jr 		_I32Next
  141 D1:B542 -  -  -  -  
  142 D1:B542 -  -  -  -  _I32Borrow:
  143 D1:B542 CD FC B5 D1 		call 	Int32Add 					; A = A + M
  144 D1:B546 -  -  -  -  _I32Next:
  145 D1:B546 F1 -  -  -  		pop 	af
  146 D1:B547 3D -  -  -  		dec 	a
  147 D1:B548 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B54A -  -  -  -  
  149 D1:B54A F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B54B -  -  -  -  
  151 D1:B54B 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B54C 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B54E -  -  -  -  
  154 D1:B54E 60 -  -  -  		ld  	h,b
  155 D1:B54F 69 -  -  -  		ld 		l,c
  156 D1:B550 D9 -  -  -  		exx
  157 D1:B551 60 -  -  -  		ld  	h,b
  158 D1:B552 69 -  -  -  		ld 		l,c
  159 D1:B553 D9 -  -  -  		exx
  160 D1:B554 -  -  -  -  _I32Modulus1:		
  161 D1:B554 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B555 D1 -  -  -  		pop 	de
  163 D1:B556 C1 -  -  -  		pop 	bc
  164 D1:B557 D9 -  -  -  		exx
  165 D1:B558 D1 -  -  -  		pop 	de
  166 D1:B559 C1 -  -  -  		pop 	bc
  167 D1:B55A C9 -  -  -  		ret
  168 D1:B55B -  -  -  -  
  169 D1:B55B -  -  -  -  ; ***************************************************************************************
  170 D1:B55B -  -  -  -  ;
  171 D1:B55B -  -  -  -  ;									Changes and Updates
  172 D1:B55B -  -  -  -  ;
  173 D1:B55B -  -  -  -  ; ***************************************************************************************
  174 D1:B55B -  -  -  -  ;
  175 D1:B55B -  -  -  -  ;		Date			Notes
  176 D1:B55B -  -  -  -  ;		==== 			=====
  177 D1:B55B -  -  -  -  ;
  178 D1:B55B -  -  -  -  ; ***************************************************************************************
  179 D1:B55B -  -  -  -  		
Listing for file "_build.asm"
   60 D1:B55B -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B55B -  -  -  -  ; ***************************************************************************************
    2 D1:B55B -  -  -  -  ; ***************************************************************************************
    3 D1:B55B -  -  -  -  ;
    4 D1:B55B -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B55B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B55B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B55B -  -  -  -  ;		Reviewed :	No
    8 D1:B55B -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B55B -  -  -  -  ;
   10 D1:B55B -  -  -  -  ; ***************************************************************************************
   11 D1:B55B -  -  -  -  ; ***************************************************************************************
   12 D1:B55B -  -  -  -  
   13 D1:B55B -  -  -  -  ; ***************************************************************************************
   14 D1:B55B -  -  -  -  ;
   15 D1:B55B -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B55B -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B55B -  -  -  -  ;
   18 D1:B55B -  -  -  -  ; ***************************************************************************************
   19 D1:B55B -  -  -  -  
   20 D1:B55B -  -  -  -  Int32FromString:
   21 D1:B55B C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B55C D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B55D D5 -  -  -  		push 	de
   24 D1:B55E D9 -  -  -  		exx
   25 D1:B55F D5 -  -  -  		push 	de
   26 D1:B560 -  -  -  -  
   27 D1:B560 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B564 11 00 00 00 		ld 		de,$0000
   29 D1:B568 D9 -  -  -  		exx
   30 D1:B569 21 00 00 00 		ld 		hl,$0000
   31 D1:B56D 11 00 00 00 		ld 		de,$0000
   32 D1:B571 D9 -  -  -  		exx
   33 D1:B572 -  -  -  -  
   34 D1:B572 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B573 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B575 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B577 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B579 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B57A -  -  -  -  		;
   40 D1:B57A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B57B F5 -  -  -  		push 	af
   42 D1:B57C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B57E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B57F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B581 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B582 18 01 -  -  		jr 		_I32FSMain
   47 D1:B584 -  -  -  -  _I32FSNotSigned:		
   48 D1:B584 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B585 -  -  -  -  		;
   50 D1:B585 -  -  -  -  		; 		Main conversion loop.
   51 D1:B585 -  -  -  -  		; 		
   52 D1:B585 -  -  -  -  _I32FSMain:		
   53 D1:B585 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B586 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B588 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B58A D6 20 -  -  		sub 	32
   57 D1:B58C -  -  -  -  _I32FSNotLower:
   58 D1:B58C FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B58E 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B590 FE 3A -  -  		cp 		'9'+1
   61 D1:B592 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B594 FE 41 -  -  		cp 		'A'
   63 D1:B596 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B598 FE 47 -  -  		cp 		'F'+1
   65 D1:B59A 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B59C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B59E -  -  -  -  _I32FSOkay:
   68 D1:B59E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B5A0 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B5A1 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B5A3 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B5A4 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B5A5 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B5A6 CD C3 B5 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B5AA F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B5AB 5F -  -  -  		ld 		e,a
   77 D1:B5AC CD FC B5 D1 		call 	Int32Add 					; and add it.
   78 D1:B5B0 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B5B1 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B5B3 -  -  -  -  
   81 D1:B5B3 -  -  -  -  _I32FSExit:
   82 D1:B5B3 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B5B4 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B5B6 CC 66 B6 D1 		call 	z,Int32Negate
   85 D1:B5BA 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B5BB D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B5BC D9 -  -  -  		exx
   88 D1:B5BD D1 -  -  -  		pop 	de
   89 D1:B5BE D9 -  -  -  		exx
   90 D1:B5BF C1 -  -  -  		pop 	bc
   91 D1:B5C0 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B5C2 C9 -  -  -  		ret				
   93 D1:B5C3 -  -  -  -  
   94 D1:B5C3 -  -  -  -  ; ***************************************************************************************
   95 D1:B5C3 -  -  -  -  ;
   96 D1:B5C3 -  -  -  -  ;									Changes and Updates
   97 D1:B5C3 -  -  -  -  ;
   98 D1:B5C3 -  -  -  -  ; ***************************************************************************************
   99 D1:B5C3 -  -  -  -  ;
  100 D1:B5C3 -  -  -  -  ;		Date			Notes
  101 D1:B5C3 -  -  -  -  ;		==== 			=====
  102 D1:B5C3 -  -  -  -  ;
  103 D1:B5C3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B5C3 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B5C3 -  -  -  -  ; ***************************************************************************************
    2 D1:B5C3 -  -  -  -  ; ***************************************************************************************
    3 D1:B5C3 -  -  -  -  ;
    4 D1:B5C3 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B5C3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5C3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5C3 -  -  -  -  ;		Reviewed :	No
    8 D1:B5C3 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B5C3 -  -  -  -  ;
   10 D1:B5C3 -  -  -  -  ; ***************************************************************************************
   11 D1:B5C3 -  -  -  -  ; ***************************************************************************************
   12 D1:B5C3 -  -  -  -  
   13 D1:B5C3 -  -  -  -  Int32Multiply:
   14 D1:B5C3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B5C4 D5 -  -  -  		push 	de
   16 D1:B5C5 44 -  -  -  		ld 		b,h
   17 D1:B5C6 4D -  -  -  		ld 		c,l
   18 D1:B5C7 21 00 00 00 		ld 		hl,$0000
   19 D1:B5CB -  -  -  -  
   20 D1:B5CB D9 -  -  -  		exx
   21 D1:B5CC C5 -  -  -  		push 	bc
   22 D1:B5CD D5 -  -  -  		push 	de
   23 D1:B5CE 44 -  -  -  		ld 		b,h
   24 D1:B5CF 4D -  -  -  		ld 		c,l
   25 D1:B5D0 21 00 00 00 		ld 		hl,$0000		
   26 D1:B5D4 D9 -  -  -  		exx
   27 D1:B5D5 -  -  -  -  
   28 D1:B5D5 -  -  -  -  _I32MultiplyLoop:
   29 D1:B5D5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B5D7 C4 FC B5 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B5DB -  -  -  -  		;
   32 D1:B5DB D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B5DC CB 38 -  -  		srl 	b
   34 D1:B5DE CB 19 -  -  		rr 		c
   35 D1:B5E0 D9 -  -  -  		exx
   36 D1:B5E1 CB 18 -  -  		rr 		b
   37 D1:B5E3 CB 19 -  -  		rr 		c
   38 D1:B5E5 -  -  -  -  		;
   39 D1:B5E5 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B5E7 CB 12 -  -  		rl 		d
   41 D1:B5E9 D9 -  -  -  		exx
   42 D1:B5EA CB 13 -  -  		rl 		e
   43 D1:B5EC CB 12 -  -  		rl 		d
   44 D1:B5EE -  -  -  -  
   45 D1:B5EE 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B5EF B1 -  -  -  		or 		c
   47 D1:B5F0 D9 -  -  -  		exx
   48 D1:B5F1 B0 -  -  -  		or 		b
   49 D1:B5F2 B1 -  -  -  		or 		c
   50 D1:B5F3 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B5F5 -  -  -  -  
   52 D1:B5F5 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B5F6 D1 -  -  -  		pop 	de
   54 D1:B5F7 C1 -  -  -  		pop 	bc
   55 D1:B5F8 D9 -  -  -  		exx
   56 D1:B5F9 D1 -  -  -  		pop 	de
   57 D1:B5FA C1 -  -  -  		pop 	bc
   58 D1:B5FB C9 -  -  -  		ret
   59 D1:B5FC -  -  -  -  
   60 D1:B5FC -  -  -  -  ; ***************************************************************************************
   61 D1:B5FC -  -  -  -  ;
   62 D1:B5FC -  -  -  -  ;									Changes and Updates
   63 D1:B5FC -  -  -  -  ;
   64 D1:B5FC -  -  -  -  ; ***************************************************************************************
   65 D1:B5FC -  -  -  -  ;
   66 D1:B5FC -  -  -  -  ;		Date			Notes
   67 D1:B5FC -  -  -  -  ;		==== 			=====
   68 D1:B5FC -  -  -  -  ;
   69 D1:B5FC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B5FC -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B5FC -  -  -  -  ; ***************************************************************************************
    2 D1:B5FC -  -  -  -  ; ***************************************************************************************
    3 D1:B5FC -  -  -  -  ;
    4 D1:B5FC -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B5FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5FC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5FC -  -  -  -  ;		Reviewed :	No
    8 D1:B5FC -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B5FC -  -  -  -  ;
   10 D1:B5FC -  -  -  -  ; ***************************************************************************************
   11 D1:B5FC -  -  -  -  ; ***************************************************************************************
   12 D1:B5FC -  -  -  -  
   13 D1:B5FC -  -  -  -  ; ***************************************************************************************
   14 D1:B5FC -  -  -  -  ;
   15 D1:B5FC -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B5FC -  -  -  -  ;
   17 D1:B5FC -  -  -  -  ; ***************************************************************************************
   18 D1:B5FC -  -  -  -  
   19 D1:B5FC -  -  -  -  Int32Add:
   20 D1:B5FC 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B5FE D9 -  -  -  		exx
   22 D1:B5FF 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B602 D9 -  -  -  		exx
   24 D1:B603 C9 -  -  -  		ret
   25 D1:B604 -  -  -  -  
   26 D1:B604 -  -  -  -  ; ***************************************************************************************
   27 D1:B604 -  -  -  -  ;
   28 D1:B604 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B604 -  -  -  -  ;
   30 D1:B604 -  -  -  -  ; ***************************************************************************************
   31 D1:B604 -  -  -  -  
   32 D1:B604 -  -  -  -  Int32Subtract:
   33 D1:B604 AF -  -  -  		xor 	a 							; clear carry
   34 D1:B605 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B608 D9 -  -  -  		exx
   36 D1:B609 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B60C D9 -  -  -  		exx
   38 D1:B60D C9 -  -  -  		ret
   39 D1:B60E -  -  -  -  
   40 D1:B60E -  -  -  -  ; ***************************************************************************************
   41 D1:B60E -  -  -  -  ;
   42 D1:B60E -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B60E -  -  -  -  ;
   44 D1:B60E -  -  -  -  ; ***************************************************************************************
   45 D1:B60E -  -  -  -  
   46 D1:B60E -  -  -  -  Int32And:
   47 D1:B60E D9 -  -  -  		exx
   48 D1:B60F CD 14 B6 D1 		call 	_I32AndHLDE
   49 D1:B613 D9 -  -  -  		exx
   50 D1:B614 -  -  -  -  _I32AndHLDE:		
   51 D1:B614 7C -  -  -  		ld 		a,h
   52 D1:B615 A2 -  -  -  		and 	d
   53 D1:B616 67 -  -  -  		ld 		h,a
   54 D1:B617 7D -  -  -  		ld 		a,l
   55 D1:B618 A3 -  -  -  		and 	e
   56 D1:B619 6F -  -  -  		ld 		l,a
   57 D1:B61A C9 -  -  -  		ret
   58 D1:B61B -  -  -  -  
   59 D1:B61B -  -  -  -  ; ***************************************************************************************
   60 D1:B61B -  -  -  -  ;
   61 D1:B61B -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B61B -  -  -  -  ;
   63 D1:B61B -  -  -  -  ; ***************************************************************************************
   64 D1:B61B -  -  -  -  
   65 D1:B61B -  -  -  -  Int32Or:
   66 D1:B61B D9 -  -  -  		exx
   67 D1:B61C CD 21 B6 D1 		call 	_I32OrHLDE
   68 D1:B620 D9 -  -  -  		exx
   69 D1:B621 -  -  -  -  _I32OrHLDE:		
   70 D1:B621 7C -  -  -  		ld 		a,h
   71 D1:B622 B2 -  -  -  		or 		d
   72 D1:B623 67 -  -  -  		ld 		h,a
   73 D1:B624 7D -  -  -  		ld 		a,l
   74 D1:B625 B3 -  -  -  		or 		e
   75 D1:B626 6F -  -  -  		ld 		l,a
   76 D1:B627 C9 -  -  -  		ret
   77 D1:B628 -  -  -  -  
   78 D1:B628 -  -  -  -  ; ***************************************************************************************
   79 D1:B628 -  -  -  -  ;
   80 D1:B628 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B628 -  -  -  -  ;
   82 D1:B628 -  -  -  -  ; ***************************************************************************************
   83 D1:B628 -  -  -  -  
   84 D1:B628 -  -  -  -  Int32Xor:
   85 D1:B628 D9 -  -  -  		exx
   86 D1:B629 CD 2E B6 D1 		call 	_I32XorHLDE
   87 D1:B62D D9 -  -  -  		exx
   88 D1:B62E -  -  -  -  _I32XorHLDE:		
   89 D1:B62E 7C -  -  -  		ld 		a,h
   90 D1:B62F AA -  -  -  		xor 	d
   91 D1:B630 67 -  -  -  		ld 		h,a
   92 D1:B631 7D -  -  -  		ld 		a,l
   93 D1:B632 AB -  -  -  		xor 	e
   94 D1:B633 6F -  -  -  		ld 		l,a
   95 D1:B634 C9 -  -  -  		ret
   96 D1:B635 -  -  -  -  
   97 D1:B635 -  -  -  -  ; ***************************************************************************************
   98 D1:B635 -  -  -  -  ;
   99 D1:B635 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B635 -  -  -  -  ;
  101 D1:B635 -  -  -  -  ; ***************************************************************************************
  102 D1:B635 -  -  -  -  
  103 D1:B635 -  -  -  -  Int32Zero:
  104 D1:B635 D9 -  -  -  		exx
  105 D1:B636 7D -  -  -  		ld 		a,l
  106 D1:B637 B4 -  -  -  		or 		h
  107 D1:B638 D9 -  -  -  		exx
  108 D1:B639 B5 -  -  -  		or 		l
  109 D1:B63A B4 -  -  -  		or 		h
  110 D1:B63B C9 -  -  -  		ret
  111 D1:B63C -  -  -  -  
  112 D1:B63C -  -  -  -  ; ***************************************************************************************
  113 D1:B63C -  -  -  -  ;
  114 D1:B63C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B63C -  -  -  -  ;
  116 D1:B63C -  -  -  -  ; ***************************************************************************************
  117 D1:B63C -  -  -  -  
  118 D1:B63C -  -  -  -  Int32Compare:
  119 D1:B63C E5 -  -  -  		push 	hl 							; save HL
  120 D1:B63D AF -  -  -  		xor 	a 							; clear carry
  121 D1:B63E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B641 D9 -  -  -  		exx
  123 D1:B642 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B643 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B646 -  -  -  -  		;
  126 D1:B646 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B647 E2 4F B6 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B64B 78 -  -  -  		ld 		a,b
  129 D1:B64C EE 80 -  -  		xor 	$80
  130 D1:B64E 47 -  -  -  		ld 		b,a
  131 D1:B64F -  -  -  -  _I32CNoOverflow:
  132 D1:B64F 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B650 B5 -  -  -  		or 		l
  134 D1:B651 D9 -  -  -  		exx 
  135 D1:B652 B4 -  -  -  		or 		h
  136 D1:B653 B5 -  -  -  		or 		l
  137 D1:B654 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B656 -  -  -  -  		;
  139 D1:B656 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B657 CB 78 -  -  		bit 	7,b
  141 D1:B659 D9 -  -  -  		exx
  142 D1:B65A 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B65C 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B65E 3E FF -  -  		ld 		a,$FF
  145 D1:B660 -  -  -  -  _I32NotPos:
  146 D1:B660 D9 -  -  -  		exx
  147 D1:B661 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B662 D9 -  -  -  		exx
  149 D1:B663 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B664 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B665 C9 -  -  -  		ret
  152 D1:B666 -  -  -  -  
  153 D1:B666 -  -  -  -  ; ***************************************************************************************
  154 D1:B666 -  -  -  -  ;
  155 D1:B666 -  -  -  -  ;										Negate HL'HL
  156 D1:B666 -  -  -  -  ;
  157 D1:B666 -  -  -  -  ; ***************************************************************************************
  158 D1:B666 -  -  -  -  
  159 D1:B666 -  -  -  -  Int32Negate:
  160 D1:B666 AF -  -  -  		xor 	a
  161 D1:B667 CD 72 B6 D1 		call 	_I32NSubtract
  162 D1:B66B D9 -  -  -  		exx
  163 D1:B66C CD 72 B6 D1 		call 	_I32NSubtract
  164 D1:B670 D9 -  -  -  		exx
  165 D1:B671 C9 -  -  -  		ret
  166 D1:B672 -  -  -  -  _I32NSubtract:
  167 D1:B672 D5 -  -  -  		push 	de
  168 D1:B673 EB -  -  -  		ex 		de,hl
  169 D1:B674 21 00 00 00 		ld 		hl,$0000
  170 D1:B678 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B67B D1 -  -  -  		pop 	de
  172 D1:B67C C9 -  -  -  		ret
  173 D1:B67D -  -  -  -  		
  174 D1:B67D -  -  -  -  ; ***************************************************************************************
  175 D1:B67D -  -  -  -  ;
  176 D1:B67D -  -  -  -  ;									Changes and Updates
  177 D1:B67D -  -  -  -  ;
  178 D1:B67D -  -  -  -  ; ***************************************************************************************
  179 D1:B67D -  -  -  -  ;
  180 D1:B67D -  -  -  -  ;		Date			Notes
  181 D1:B67D -  -  -  -  ;		==== 			=====
  182 D1:B67D -  -  -  -  ;
  183 D1:B67D -  -  -  -  ; ***************************************************************************************
  184 D1:B67D -  -  -  -  		
Listing for file "_build.asm"
   63 D1:B67D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B67D -  -  -  -  ; ***************************************************************************************
    2 D1:B67D -  -  -  -  ; ***************************************************************************************
    3 D1:B67D -  -  -  -  ;
    4 D1:B67D -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B67D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B67D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B67D -  -  -  -  ;		Reviewed :	No
    8 D1:B67D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B67D -  -  -  -  ;
   10 D1:B67D -  -  -  -  ; ***************************************************************************************
   11 D1:B67D -  -  -  -  ;
   12 D1:B67D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B67D -  -  -  -  ;
   14 D1:B67D -  -  -  -  ; ***************************************************************************************
   15 D1:B67D -  -  -  -  
   16 D1:B67D -  -  -  -  Int32ToString:
   17 D1:B67D C5 -  -  -  		push 	bc 							; save string start
   18 D1:B67E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B67F E5 -  -  -  		push 	hl
   20 D1:B680 11 00 00 00 		ld	 	de,$0000
   21 D1:B684 D9 -  -  -  		exx
   22 D1:B685 D5 -  -  -  		push 	de
   23 D1:B686 E5 -  -  -  		push 	hl
   24 D1:B687 11 00 00 00 		ld 		de,$000
   25 D1:B68B D9 -  -  -  		exx
   26 D1:B68C 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B68D -  -  -  -  		;
   28 D1:B68D CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B68F 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B691 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B693 5F -  -  -  		ld 		e,a
   32 D1:B694 -  -  -  -  		;
   33 D1:B694 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B695 CB 7C -  -  		bit 	7,h
   35 D1:B697 D9 -  -  -  		exx
   36 D1:B698 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B69A -  -  -  -  		;
   38 D1:B69A CD 66 B6 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B69E -  -  -  -  		;
   40 D1:B69E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B6A0 02 -  -  -  		ld 		(bc),a
   42 D1:B6A1 03 -  -  -  		inc 	bc
   43 D1:B6A2 -  -  -  -  _I32TSNotNegative:	
   44 D1:B6A2 CD B1 B6 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B6A6 -  -  -  -  _I32TSExit:
   46 D1:B6A6 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B6A8 02 -  -  -  		ld 		(bc),a 
   48 D1:B6A9 -  -  -  -  
   49 D1:B6A9 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B6AA E1 -  -  -  		pop 	hl
   51 D1:B6AB D1 -  -  -  		pop 	de
   52 D1:B6AC D9 -  -  -  		exx
   53 D1:B6AD E1 -  -  -  		pop 	hl
   54 D1:B6AE D1 -  -  -  		pop 	de
   55 D1:B6AF C1 -  -  -  		pop 	bc
   56 D1:B6B0 C9 -  -  -  		ret
   57 D1:B6B1 -  -  -  -  
   58 D1:B6B1 -  -  -  -  _I32RecursiveConvert:
   59 D1:B6B1 CD BE B4 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B6B5 F5 -  -  -  		push 	af 							; save remainder
   61 D1:B6B6 CD 35 B6 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B6BA C4 B1 B6 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B6BE F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B6BF FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B6C1 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B6C3 C6 07 -  -  		add 	a,7
   67 D1:B6C5 -  -  -  -  _I32NotHex:
   68 D1:B6C5 C6 30 -  -  		add 	a,48
   69 D1:B6C7 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B6C8 03 -  -  -  		inc 	bc
   71 D1:B6C9 C9 -  -  -  		ret		
   72 D1:B6CA -  -  -  -  
   73 D1:B6CA -  -  -  -  ; ***************************************************************************************
   74 D1:B6CA -  -  -  -  ;
   75 D1:B6CA -  -  -  -  ;									Changes and Updates
   76 D1:B6CA -  -  -  -  ;
   77 D1:B6CA -  -  -  -  ; ***************************************************************************************
   78 D1:B6CA -  -  -  -  ;
   79 D1:B6CA -  -  -  -  ;		Date			Notes
   80 D1:B6CA -  -  -  -  ;		==== 			=====
   81 D1:B6CA -  -  -  -  ;
   82 D1:B6CA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 D1:B6CA -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B6CA -  -  -  -  ; ***************************************************************************************
    2 D1:B6CA -  -  -  -  ; ***************************************************************************************
    3 D1:B6CA -  -  -  -  ;
    4 D1:B6CA -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B6CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6CA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6CA -  -  -  -  ;		Reviewed :	No
    8 D1:B6CA -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B6CA -  -  -  -  ;
   10 D1:B6CA -  -  -  -  ; ***************************************************************************************
   11 D1:B6CA -  -  -  -  ; ***************************************************************************************
   12 D1:B6CA -  -  -  -  
   13 D1:B6CA -  -  -  -  #ifdef AQUARIUS
   14 D1:B6CA             
   15 D1:B6CA             ; ***************************************************************************************
   16 D1:B6CA             ;
   17 D1:B6CA             ;								Initialise system stuff
   18 D1:B6CA             ;
   19 D1:B6CA             ; ***************************************************************************************
   20 D1:B6CA             
   21 D1:B6CA             SYSInitialise:
   22 D1:B6CA             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B6CA             	call 	SYSPrintChar
   24 D1:B6CA             	ret
   25 D1:B6CA             
   26 D1:B6CA             ; ***************************************************************************************
   27 D1:B6CA             ;
   28 D1:B6CA             ;								Terminate system stuff
   29 D1:B6CA             ;
   30 D1:B6CA             ; ***************************************************************************************
   31 D1:B6CA             
   32 D1:B6CA             SYSTerminate:
   33 D1:B6CA             	jr 		SYSTerminate
   34 D1:B6CA             
   35 D1:B6CA             ; ***************************************************************************************
   36 D1:B6CA             ;
   37 D1:B6CA             ;								Print A character
   38 D1:B6CA             ;
   39 D1:B6CA             ; ***************************************************************************************
   40 D1:B6CA             
   41 D1:B6CA             SYSPrintChar:
   42 D1:B6CA             	push 	af 									; we stack everything including alt registers
   43 D1:B6CA             	push 	bc
   44 D1:B6CA             	push 	de
   45 D1:B6CA             	push 	hl
   46 D1:B6CA             	push 	ix
   47 D1:B6CA             	push 	iy
   48 D1:B6CA             	exx
   49 D1:B6CA             	push 	bc
   50 D1:B6CA             	push 	de
   51 D1:B6CA             	push 	hl
   52 D1:B6CA             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B6CA             	pop 	hl
   54 D1:B6CA             	pop 	de
   55 D1:B6CA             	pop 	bc
   56 D1:B6CA             	exx
   57 D1:B6CA             	pop 	iy
   58 D1:B6CA             	pop 	ix
   59 D1:B6CA             	pop 	hl
   60 D1:B6CA             	pop 	de
   61 D1:B6CA             	pop 	bc
   62 D1:B6CA             	pop 	af
   63 D1:B6CA             	ret		
   64 D1:B6CA             
   65 D1:B6CA             ; ***************************************************************************************
   66 D1:B6CA             ;
   67 D1:B6CA             ;									Print Newline
   68 D1:B6CA             ;
   69 D1:B6CA             ; ***************************************************************************************
   70 D1:B6CA             
   71 D1:B6CA             SYSPrintCRLF:
   72 D1:B6CA             	push 	af
   73 D1:B6CA             	ld 		a,13
   74 D1:B6CA             	call 	SYSPrintChar
   75 D1:B6CA             	ld 		a,10
   76 D1:B6CA             	call 	SYSPrintChar
   77 D1:B6CA             	pop 	af
   78 D1:B6CA             	ret
   79 D1:B6CA             
   80 D1:B6CA             ; ***************************************************************************************
   81 D1:B6CA             ;
   82 D1:B6CA             ;									Get time into HL'HL
   83 D1:B6CA             ;
   84 D1:B6CA             ; ***************************************************************************************
   85 D1:B6CA             
   86 D1:B6CA             SYSGetTimer:
   87 D1:B6CA              	in 		a,($00)
   88 D1:B6CA              	ld 		l,a
   89 D1:B6CA              	in 		a,($01)
   90 D1:B6CA              	ld 		h,a
   91 D1:B6CA              	exx
   92 D1:B6CA              	in 		a,($02)
   93 D1:B6CA              	ld 		l,a
   94 D1:B6CA              	in 		a,($03)
   95 D1:B6CA              	ld 		h,a
   96 D1:B6CA              	exx
   97 D1:B6CA             	ret 	
   98 D1:B6CA             	
   99 D1:B6CA             #endif
  100 D1:B6CA -  -  -  -  
  101 D1:B6CA -  -  -  -  ; ***************************************************************************************
  102 D1:B6CA -  -  -  -  ;
  103 D1:B6CA -  -  -  -  ;									Changes and Updates
  104 D1:B6CA -  -  -  -  ;
  105 D1:B6CA -  -  -  -  ; ***************************************************************************************
  106 D1:B6CA -  -  -  -  ;
  107 D1:B6CA -  -  -  -  ;		Date			Notes
  108 D1:B6CA -  -  -  -  ;		==== 			=====
  109 D1:B6CA -  -  -  -  ;
  110 D1:B6CA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B6CA -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B6CA -  -  -  -  ; ***************************************************************************************
    2 D1:B6CA -  -  -  -  ; ***************************************************************************************
    3 D1:B6CA -  -  -  -  ;
    4 D1:B6CA -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B6CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6CA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6CA -  -  -  -  ;		Reviewed :	No
    8 D1:B6CA -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B6CA -  -  -  -  ;
   10 D1:B6CA -  -  -  -  ; ***************************************************************************************
   11 D1:B6CA -  -  -  -  ; ***************************************************************************************
   12 D1:B6CA -  -  -  -  
   13 D1:B6CA -  -  -  -  #ifdef CLEANEZ80
   14 D1:B6CA             
   15 D1:B6CA             ; ***************************************************************************************
   16 D1:B6CA             ;
   17 D1:B6CA             ;								Initialise system stuff
   18 D1:B6CA             ;
   19 D1:B6CA             ; ***************************************************************************************
   20 D1:B6CA             
   21 D1:B6CA             SYSInitialise:
   22 D1:B6CA             	ret
   23 D1:B6CA             
   24 D1:B6CA             ; ***************************************************************************************
   25 D1:B6CA             ;
   26 D1:B6CA             ;								Terminate system stuff
   27 D1:B6CA             ;
   28 D1:B6CA             ; ***************************************************************************************
   29 D1:B6CA             
   30 D1:B6CA             SYSTerminate:
   31 D1:B6CA             	ret
   32 D1:B6CA             
   33 D1:B6CA             ; ***************************************************************************************
   34 D1:B6CA             ;
   35 D1:B6CA             ;								Print A character
   36 D1:B6CA             ;
   37 D1:B6CA             ; ***************************************************************************************
   38 D1:B6CA             
   39 D1:B6CA             SYSPrintChar:
   40 D1:B6CA             	ret		
   41 D1:B6CA             
   42 D1:B6CA             ; ***************************************************************************************
   43 D1:B6CA             ;
   44 D1:B6CA             ;									Print Newline
   45 D1:B6CA             ;
   46 D1:B6CA             ; ***************************************************************************************
   47 D1:B6CA             
   48 D1:B6CA             SYSPrintCRLF:
   49 D1:B6CA             	ret
   50 D1:B6CA             
   51 D1:B6CA             ; ***************************************************************************************
   52 D1:B6CA             ;
   53 D1:B6CA             ;									Get time into HL'HL
   54 D1:B6CA             ;
   55 D1:B6CA             ; ***************************************************************************************
   56 D1:B6CA             
   57 D1:B6CA             SYSGetTimer:
   58 D1:B6CA             	ret
   59 D1:B6CA             
   60 D1:B6CA             #endif
   61 D1:B6CA -  -  -  -  
   62 D1:B6CA -  -  -  -  ; ***************************************************************************************
   63 D1:B6CA -  -  -  -  ;
   64 D1:B6CA -  -  -  -  ;									Changes and Updates
   65 D1:B6CA -  -  -  -  ;
   66 D1:B6CA -  -  -  -  ; ***************************************************************************************
   67 D1:B6CA -  -  -  -  ;
   68 D1:B6CA -  -  -  -  ;		Date			Notes
   69 D1:B6CA -  -  -  -  ;		==== 			=====
   70 D1:B6CA -  -  -  -  ;
   71 D1:B6CA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B6CA -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B6CA -  -  -  -  ; ***************************************************************************************
    2 D1:B6CA -  -  -  -  ; ***************************************************************************************
    3 D1:B6CA -  -  -  -  ;
    4 D1:B6CA -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B6CA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6CA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6CA -  -  -  -  ;		Reviewed :	No
    8 D1:B6CA -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B6CA -  -  -  -  ;
   10 D1:B6CA -  -  -  -  ; ***************************************************************************************
   11 D1:B6CA -  -  -  -  ; ***************************************************************************************
   12 D1:B6CA -  -  -  -  
   13 D1:B6CA -  -  -  -  #ifdef TI84
   14 D1:B6CA -  -  -  -  
   15 D1:B6CA -  -  -  -  ; ***************************************************************************************
   16 D1:B6CA -  -  -  -  ;
   17 D1:B6CA -  -  -  -  ;								Initialise system stuff
   18 D1:B6CA -  -  -  -  ;
   19 D1:B6CA -  -  -  -  ; ***************************************************************************************
   20 D1:B6CA -  -  -  -  
   21 D1:B6CA -  -  -  -  SYSInitialise:
   22 D1:B6CA F3 -  -  -  	di
   23 D1:B6CB ED 73 E8 B6 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B6D0 FD 22 EC B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B6D5 C9 -  -  -  	ret
   26 D1:B6D6 -  -  -  -  
   27 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   28 D1:B6D6 -  -  -  -  ;
   29 D1:B6D6 -  -  -  -  ;								Terminate system stuff
   30 D1:B6D6 -  -  -  -  ;
   31 D1:B6D6 -  -  -  -  ; ***************************************************************************************
   32 D1:B6D6 -  -  -  -  
   33 D1:B6D6 -  -  -  -  SYSTerminate:
   34 D1:B6D6 ED 7B E8 B6 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B6DB FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B6DD FD 2A EC B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B6E2 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B6E6 FB -  -  -  	ei
   39 D1:B6E7 C9 -  -  -  	ret 										; and exit.
   40 D1:B6E8 -  -  -  -  
   41 D1:B6E8 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B6E8 00 00 00 00 	.dw 	0,0
   43 D1:B6EC -  -  -  -  _IYTemp84:
   44 D1:B6EC 00 00 00 00 	.dw 	0,0		
   45 D1:B6F0 -  -  -  -  
   46 D1:B6F0 -  -  -  -  ; ***************************************************************************************
   47 D1:B6F0 -  -  -  -  ;
   48 D1:B6F0 -  -  -  -  ;								Print A character
   49 D1:B6F0 -  -  -  -  ;
   50 D1:B6F0 -  -  -  -  ; ***************************************************************************************
   51 D1:B6F0 -  -  -  -  
   52 D1:B6F0 -  -  -  -  SYSPrintChar:
   53 D1:B6F0 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B6F1 C5 -  -  -  	push 	bc
   55 D1:B6F2 D5 -  -  -  	push 	de
   56 D1:B6F3 E5 -  -  -  	push 	hl
   57 D1:B6F4 DD E5 -  -  	push 	ix
   58 D1:B6F6 FD E5 -  -  	push 	iy
   59 D1:B6F8 D9 -  -  -  	exx
   60 D1:B6F9 C5 -  -  -  	push 	bc
   61 D1:B6FA D5 -  -  -  	push 	de
   62 D1:B6FB E5 -  -  -  	push 	hl
   63 D1:B6FC -  -  -  -  
   64 D1:B6FC FD 2A EC B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B701 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B705 F3 -  -  -  	di
   67 D1:B706 FD 22 EC B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B70B -  -  -  -  
   69 D1:B70B E1 -  -  -  	pop 	hl
   70 D1:B70C D1 -  -  -  	pop 	de
   71 D1:B70D C1 -  -  -  	pop 	bc
   72 D1:B70E D9 -  -  -  	exx
   73 D1:B70F FD E1 -  -  	pop 	iy
   74 D1:B711 DD E1 -  -  	pop 	ix
   75 D1:B713 E1 -  -  -  	pop 	hl
   76 D1:B714 D1 -  -  -  	pop 	de
   77 D1:B715 C1 -  -  -  	pop 	bc
   78 D1:B716 F1 -  -  -  	pop 	af
   79 D1:B717 C9 -  -  -  	ret		
   80 D1:B718 -  -  -  -  
   81 D1:B718 -  -  -  -  ; ***************************************************************************************
   82 D1:B718 -  -  -  -  ;
   83 D1:B718 -  -  -  -  ;									Print Newline
   84 D1:B718 -  -  -  -  ;
   85 D1:B718 -  -  -  -  ; ***************************************************************************************
   86 D1:B718 -  -  -  -  
   87 D1:B718 -  -  -  -  SYSPrintCRLF:
   88 D1:B718 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B719 C5 -  -  -  	push 	bc
   90 D1:B71A D5 -  -  -  	push 	de
   91 D1:B71B E5 -  -  -  	push 	hl
   92 D1:B71C DD E5 -  -  	push 	ix
   93 D1:B71E FD E5 -  -  	push 	iy
   94 D1:B720 D9 -  -  -  	exx
   95 D1:B721 C5 -  -  -  	push 	bc
   96 D1:B722 D5 -  -  -  	push 	de
   97 D1:B723 E5 -  -  -  	push 	hl
   98 D1:B724 -  -  -  -  
   99 D1:B724 FD 2A EC B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B729 CD F0 07 02 	call 	_newline
  101 D1:B72D F3 -  -  -  	di
  102 D1:B72E FD 22 EC B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B733 -  -  -  -  
  104 D1:B733 E1 -  -  -  	pop 	hl
  105 D1:B734 D1 -  -  -  	pop 	de
  106 D1:B735 C1 -  -  -  	pop 	bc
  107 D1:B736 D9 -  -  -  	exx
  108 D1:B737 FD E1 -  -  	pop 	iy
  109 D1:B739 DD E1 -  -  	pop 	ix
  110 D1:B73B E1 -  -  -  	pop 	hl
  111 D1:B73C D1 -  -  -  	pop 	de
  112 D1:B73D C1 -  -  -  	pop 	bc
  113 D1:B73E F1 -  -  -  	pop 	af
  114 D1:B73F C9 -  -  -  	ret
  115 D1:B740 -  -  -  -  
  116 D1:B740 -  -  -  -  ; ***************************************************************************************
  117 D1:B740 -  -  -  -  ;
  118 D1:B740 -  -  -  -  ;									Get time into HL'HL
  119 D1:B740 -  -  -  -  ;
  120 D1:B740 -  -  -  -  ; ***************************************************************************************
  121 D1:B740 -  -  -  -  
  122 D1:B740 -  -  -  -  SYSGetTimer:
  123 D1:B740 21 34 12 00 	ld 		hl,$1234
  124 D1:B744 D9 -  -  -  	exx
  125 D1:B745 21 78 56 00 	ld 		hl,$5678
  126 D1:B749 D9 -  -  -  	exx
  127 D1:B74A C9 -  -  -  	ret
  128 D1:B74B -  -  -  -  
  129 D1:B74B -  -  -  -  #endif
  130 D1:B74B -  -  -  -  
  131 D1:B74B -  -  -  -  ; ***************************************************************************************
  132 D1:B74B -  -  -  -  ;
  133 D1:B74B -  -  -  -  ;									Changes and Updates
  134 D1:B74B -  -  -  -  ;
  135 D1:B74B -  -  -  -  ; ***************************************************************************************
  136 D1:B74B -  -  -  -  ;
  137 D1:B74B -  -  -  -  ;		Date			Notes
  138 D1:B74B -  -  -  -  ;		==== 			=====
  139 D1:B74B -  -  -  -  ;
  140 D1:B74B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B74B -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B74B -  -  -  -  ; ***************************************************************************************
    2 D1:B74B -  -  -  -  ; ***************************************************************************************
    3 D1:B74B -  -  -  -  ;
    4 D1:B74B -  -  -  -  ;		Name : 		basic.asm
    5 D1:B74B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B74B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B74B -  -  -  -  ;		Reviewed :	No
    8 D1:B74B -  -  -  -  ;		Purpose :	Main program.
    9 D1:B74B -  -  -  -  ;
   10 D1:B74B -  -  -  -  ; ***************************************************************************************
   11 D1:B74B -  -  -  -  ; ***************************************************************************************
   12 D1:B74B -  -  -  -  
   13 D1:B74B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 21 01 00 B8 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0B 02 00 
              03 04 0C 0E 
              1B 8F 6A 80 
              00 -  -  -  	.db	$21,$01,$00,$b8,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0b,$02,$00,$03,$04,$0c,$0e,$1b,$8f,$6a,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:B82D 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:C82D -  -  -  -  EndTestInstance:
   18 D1:C82D -  -  -  -  		
   19 D1:C82D -  -  -  -  ; ***************************************************************************************
   20 D1:C82D -  -  -  -  ;
   21 D1:C82D -  -  -  -  ;									Changes and Updates
   22 D1:C82D -  -  -  -  ;
   23 D1:C82D -  -  -  -  ; ***************************************************************************************
   24 D1:C82D -  -  -  -  ;
   25 D1:C82D -  -  -  -  ;		Date			Notes
   26 D1:C82D -  -  -  -  ;		==== 			=====
   27 D1:C82D -  -  -  -  ;
   28 D1:C82D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:C82D -  -  -  -  FinalAddress:
