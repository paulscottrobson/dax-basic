    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_MEMORY = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_MEMORY
   56 00:0000             	ld a,ERRID_MEMORY
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NOCOMMA = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   63 00:0000             	ld a,ERRID_NOCOMMA
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NODOLLAR = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   70 00:0000             	ld a,ERRID_NODOLLAR
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NOLBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   77 00:0000             	ld a,ERRID_NOLBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NORBRACKET = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   84 00:0000             	ld a,ERRID_NORBRACKET
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOTREF = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOTREF
   91 00:0000             	ld a,ERRID_NOTREF
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_STOP = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_STOP
   98 00:0000             	ld a,ERRID_STOP
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_SYNTAX = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_SYNTAX
  105 00:0000             	ld a,ERRID_SYNTAX
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_TODO = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_TODO
  112 00:0000             	ld a,ERRID_TODO
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  119 00:0000             	ld a,ERRID_UNKNOWNVAR
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 30 B7 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 64 C8 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 4D B1 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 E1 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 06 AB D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 56 B7 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 3C B7 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 05 C3 C3 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 06 C3 C3 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  		
   78 D1:A8DD -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  
   81 D1:A8E1 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 D1:A8E1 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 D1:A8E7 -  -  -  -  
   84 D1:A8E7 -  -  -  -  AConvert: 									; used for address conversions.
   85 D1:A8E7 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8ED -  -  -  -  		
   87 D1:A8ED -  -  -  -  RandomSeed: 								; random number seeds.
   88 D1:A8ED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 D1:A8FD -  -  -  -  
   90 D1:A8FD -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 D1:A8FD 00 00 -  -  		.dw 	0
   92 D1:A8FF -  -  -  -  
   93 D1:A8FF -  -  -  -  ; ***************************************************************************************
   94 D1:A8FF -  -  -  -  ;
   95 D1:A8FF -  -  -  -  ;									Variable Information
   96 D1:A8FF -  -  -  -  ;
   97 D1:A8FF -  -  -  -  ; ***************************************************************************************
   98 D1:A8FF -  -  -  -  
   99 D1:A8FF -  -  -  -  VarNameStart: 								; first byte of name
  100 D1:A8FF 00 00 00 00 		.dw 	0,0
  101 D1:A903 -  -  -  -  VarHash: 									; name hash value
  102 D1:A903 00 00 -  -  		.dw 	0		
  103 D1:A905 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 D1:A905 00 00 00 00 		.dw 	0,0
  105 D1:A909 -  -  -  -  		
  106 D1:A909 -  -  -  -  ; ***************************************************************************************
  107 D1:A909 -  -  -  -  ;
  108 D1:A909 -  -  -  -  ;										  Buffers
  109 D1:A909 -  -  -  -  ;
  110 D1:A909 -  -  -  -  ; ***************************************************************************************
  111 D1:A909 -  -  -  -  
  112 D1:A909 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 D1:A909 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 D1:A919 -  -  -  -  
  115 D1:A919 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 D1:A919 00 00 -  -  		.dw 	0
  117 D1:A91B -  -  -  -  
  118 D1:A91B -  -  -  -  ConvertBuffer: 								; general usage
  119 D1:A91B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 D1:A95B -  -  -  -  
  121 D1:A95B -  -  -  -  ; ***************************************************************************************
  122 D1:A95B -  -  -  -  ;
  123 D1:A95B -  -  -  -  ;									Changes and Updates
  124 D1:A95B -  -  -  -  ;
  125 D1:A95B -  -  -  -  ; ***************************************************************************************
  126 D1:A95B -  -  -  -  ;
  127 D1:A95B -  -  -  -  ;		Date			Notes
  128 D1:A95B -  -  -  -  ;		==== 			=====
  129 D1:A95B -  -  -  -  ;
  130 D1:A95B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A95B -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A95B -  -  -  -  ; ***************************************************************************************
    2 D1:A95B -  -  -  -  ; ***************************************************************************************
    3 D1:A95B -  -  -  -  ;
    4 D1:A95B -  -  -  -  ;		Name : 		assert.asm
    5 D1:A95B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95B -  -  -  -  ;		Reviewed :	No
    8 D1:A95B -  -  -  -  ;		Purpose :	Assert command
    9 D1:A95B -  -  -  -  ;
   10 D1:A95B -  -  -  -  ; ***************************************************************************************
   11 D1:A95B -  -  -  -  ; ***************************************************************************************
   12 D1:A95B -  -  -  -  
   13 D1:A95B -  -  -  -  ; ***************************************************************************************
   14 D1:A95B -  -  -  -  ;
   15 D1:A95B -  -  -  -  ;									ASSERT command
   16 D1:A95B -  -  -  -  ;
   17 D1:A95B -  -  -  -  ; ***************************************************************************************
   18 D1:A95B -  -  -  -  
   19 D1:A95B -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A95B CD F6 AD D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A95F 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A965 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A966 3E 01 C3 C3 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A96C -  -  -  -  
   25 D1:A96C -  -  -  -  ; ***************************************************************************************
   26 D1:A96C -  -  -  -  ;
   27 D1:A96C -  -  -  -  ;									Changes and Updates
   28 D1:A96C -  -  -  -  ;
   29 D1:A96C -  -  -  -  ; ***************************************************************************************
   30 D1:A96C -  -  -  -  ;
   31 D1:A96C -  -  -  -  ;		Date			Notes
   32 D1:A96C -  -  -  -  ;		==== 			=====
   33 D1:A96C -  -  -  -  ;
   34 D1:A96C -  -  -  -  ; ***************************************************************************************
   35 D1:A96C -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A96C -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A96C -  -  -  -  ; ***************************************************************************************
    2 D1:A96C -  -  -  -  ; ***************************************************************************************
    3 D1:A96C -  -  -  -  ;
    4 D1:A96C -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A96C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A96C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A96C -  -  -  -  ;		Reviewed :	No
    8 D1:A96C -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A96C -  -  -  -  ;
   10 D1:A96C -  -  -  -  ; ***************************************************************************************
   11 D1:A96C -  -  -  -  ; ***************************************************************************************
   12 D1:A96C -  -  -  -  
   13 D1:A96C -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A96C -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A96C -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A96C -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A96C -  -  -  -  BadCmd_To: 			;; [to]
   18 D1:A96C C3 2D AC D1 		jp 		SyntaxError
   19 D1:A970 -  -  -  -  
   20 D1:A970 -  -  -  -  ; ***************************************************************************************
   21 D1:A970 -  -  -  -  ;
   22 D1:A970 -  -  -  -  ;									Changes and Updates
   23 D1:A970 -  -  -  -  ;
   24 D1:A970 -  -  -  -  ; ***************************************************************************************
   25 D1:A970 -  -  -  -  ;
   26 D1:A970 -  -  -  -  ;		Date			Notes
   27 D1:A970 -  -  -  -  ;		==== 			=====
   28 D1:A970 -  -  -  -  ;
   29 D1:A970 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A970 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A970 -  -  -  -  ; ***************************************************************************************
    2 D1:A970 -  -  -  -  ; ***************************************************************************************
    3 D1:A970 -  -  -  -  ;
    4 D1:A970 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A970 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A970 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A970 -  -  -  -  ;		Reviewed :	No
    8 D1:A970 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A970 -  -  -  -  ;
   10 D1:A970 -  -  -  -  ; ***************************************************************************************
   11 D1:A970 -  -  -  -  ; ***************************************************************************************
   12 D1:A970 -  -  -  -  
   13 D1:A970 -  -  -  -  ; ***************************************************************************************
   14 D1:A970 -  -  -  -  ;
   15 D1:A970 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A970 -  -  -  -  ;
   17 D1:A970 -  -  -  -  ; ***************************************************************************************
   18 D1:A970 -  -  -  -  
   19 D1:A970 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A970 C9 -  -  -  		ret
   21 D1:A971 -  -  -  -  
   22 D1:A971 -  -  -  -  ; ***************************************************************************************
   23 D1:A971 -  -  -  -  ;
   24 D1:A971 -  -  -  -  ;									Changes and Updates
   25 D1:A971 -  -  -  -  ;
   26 D1:A971 -  -  -  -  ; ***************************************************************************************
   27 D1:A971 -  -  -  -  ;
   28 D1:A971 -  -  -  -  ;		Date			Notes
   29 D1:A971 -  -  -  -  ;		==== 			=====
   30 D1:A971 -  -  -  -  ;
   31 D1:A971 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A971 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A971 -  -  -  -  ; ***************************************************************************************
    2 D1:A971 -  -  -  -  ; ***************************************************************************************
    3 D1:A971 -  -  -  -  ;
    4 D1:A971 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A971 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A971 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A971 -  -  -  -  ;		Reviewed :	No
    8 D1:A971 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A971 -  -  -  -  ;
   10 D1:A971 -  -  -  -  ; ***************************************************************************************
   11 D1:A971 -  -  -  -  ; ***************************************************************************************
   12 D1:A971 -  -  -  -  
   13 D1:A971 -  -  -  -  ; ***************************************************************************************
   14 D1:A971 -  -  -  -  ;
   15 D1:A971 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:A971 -  -  -  -  ;	
   17 D1:A971 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:A971 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:A971 -  -  -  -  ;								(can be comma chained)
   20 D1:A971 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:A971 -  -  -  -  ;
   22 D1:A971 -  -  -  -  ; ***************************************************************************************
   23 D1:A971 -  -  -  -  
   24 D1:A971 -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:A971 -  -  -  -  		;
   26 D1:A971 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A971 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A971 -  -  -  -  		;
   29 D1:A971 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A973 D1 -  -  -  		pop 	de
   31 D1:A974 -  -  -  -  		;
   32 D1:A974 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A977 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A979 D2 2D AC D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A97D -  -  -  -  _DISkip:
   36 D1:A97D DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A97F DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A982 FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A984 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A986 -  -  -  -  		;
   41 D1:A986 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A989 FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A98B F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A98C CC ED A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A990 F1 -  -  -  		pop 	af
   46 D1:A991 C4 A5 A9 D1 		call 	nz,DimensionAllocate
   47 D1:A995 -  -  -  -  		;
   48 D1:A995 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A998 FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A99A C0 -  -  -  		ret 	nz
   51 D1:A99B DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A99D 18 D2 -  -  		jr 		Command_DIM
   53 D1:A99F -  -  -  -  
   54 D1:A99F -  -  -  -  _CDError:
   55 D1:A99F 3E 04 C3 C3 
              AB D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:A9A5 -  -  -  -  
   57 D1:A9A5 -  -  -  -  ; ***************************************************************************************
   58 D1:A9A5 -  -  -  -  ;
   59 D1:A9A5 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:A9A5 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:A9A5 -  -  -  -  ;
   62 D1:A9A5 -  -  -  -  ; ***************************************************************************************
   63 D1:A9A5 -  -  -  -  
   64 D1:A9A5 -  -  -  -  DimensionAllocate:
   65 D1:A9A5 D5 -  -  -  		push 	de 							; save start on stack
   66 D1:A9A6 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:A9A8 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:A9AA 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   69 D1:A9AE CD BA B1 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:A9B2 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:A9B4 28 E9 -  -  		jr 		z,_CDError
   72 D1:A9B6 CB 41 -  -  		bit 	CIsString,c
   73 D1:A9B8 20 E5 -  -  		jr 		nz,_CDError
   74 D1:A9BA DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:A9BC E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:A9BD 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:A9BF CD B7 AB D1 		call 	CheckNextA 					; check for [
   78 D1:A9C3 CD F6 AD D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:A9C7 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:A9C9 CD B7 AB D1 		call 	CheckNextA 					; check for ]
   81 D1:A9CD 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:A9CE 7C -  -  -  		ld 		a,h
   83 D1:A9CF B5 -  -  -  		or 		l
   84 D1:A9D0 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:A9D2 D9 -  -  -  		exx
   86 D1:A9D3 23 -  -  -  		inc 	hl
   87 D1:A9D4 D9 -  -  -  		exx
   88 D1:A9D5 -  -  -  -  _DANoCarry:
   89 D1:A9D5 D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:A9D6 7C -  -  -  		ld 		a,h
   91 D1:A9D7 B5 -  -  -  		or 		l
   92 D1:A9D8 D9 -  -  -  		exx
   93 D1:A9D9 20 C4 -  -  		jr 		nz,_CDError
   94 D1:A9DB CD DC B0 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:A9DF EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:A9E0 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:A9E1 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:A9E7 AF -  -  -  		xor 	a 							; autocreate off
   99 D1:A9E8 32 FD A8 D1 		ld 		(AllowAutoCreate),a
  100 D1:A9EC C9 -  -  -  		ret
  101 D1:A9ED -  -  -  -  
  102 D1:A9ED -  -  -  -  ; ***************************************************************************************
  103 D1:A9ED -  -  -  -  ;
  104 D1:A9ED -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:A9ED -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:A9ED -  -  -  -  ;
  107 D1:A9ED -  -  -  -  ; ***************************************************************************************
  108 D1:A9ED -  -  -  -  
  109 D1:A9ED -  -  -  -  DimensionArray:
  110 D1:A9ED D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:A9EE -  -  -  -  		;
  112 D1:A9EE CD F6 AD D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:A9F2 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:A9F3 E6 FC -  -  		and 	$FC
  115 D1:A9F5 D9 -  -  -  		exx
  116 D1:A9F6 B4 -  -  -  		or 		h
  117 D1:A9F7 B5 -  -  -  		or 		l
  118 D1:A9F8 D9 -  -  -  		exx
  119 D1:A9F9 20 A4 -  -  		jr 		nz,_CDError
  120 D1:A9FB -  -  -  -  		;
  121 D1:A9FB DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:A9FD E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:A9FE -  -  -  -  		;
  124 D1:A9FE CD 15 B2 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AA02 CD 51 B2 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AA06 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AA08 -  -  -  -  		;
  128 D1:AA08 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AA09 E5 -  -  -  		push 	hl
  130 D1:AA0A 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AA0B 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AA0C 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AA0D 29 -  -  -  		add 	hl,hl
  134 D1:AA0E CD 77 B1 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AA12 -  -  -  -  		;
  136 D1:AA12 D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AA13 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AA17 09 -  -  -  		add 	hl,bc
  139 D1:AA18 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AA1E DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AA20 C9 -  -  -  		ret		
  142 D1:AA21 -  -  -  -  
  143 D1:AA21 -  -  -  -  
  144 D1:AA21 -  -  -  -  ; ***************************************************************************************
  145 D1:AA21 -  -  -  -  ;
  146 D1:AA21 -  -  -  -  ;									Changes and Updates
  147 D1:AA21 -  -  -  -  ;
  148 D1:AA21 -  -  -  -  ; ***************************************************************************************
  149 D1:AA21 -  -  -  -  ;
  150 D1:AA21 -  -  -  -  ;		Date			Notes
  151 D1:AA21 -  -  -  -  ;		==== 			=====
  152 D1:AA21 -  -  -  -  ;
  153 D1:AA21 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:AA21 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AA21 -  -  -  -  ; ***************************************************************************************
    2 D1:AA21 -  -  -  -  ; ***************************************************************************************
    3 D1:AA21 -  -  -  -  ;
    4 D1:AA21 -  -  -  -  ;		Name : 		end.asm
    5 D1:AA21 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA21 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA21 -  -  -  -  ;		Reviewed :	No
    8 D1:AA21 -  -  -  -  ;		Purpose :	End command
    9 D1:AA21 -  -  -  -  ;
   10 D1:AA21 -  -  -  -  ; ***************************************************************************************
   11 D1:AA21 -  -  -  -  ; ***************************************************************************************
   12 D1:AA21 -  -  -  -  
   13 D1:AA21 -  -  -  -  ; ***************************************************************************************
   14 D1:AA21 -  -  -  -  ;
   15 D1:AA21 -  -  -  -  ;										END command
   16 D1:AA21 -  -  -  -  ;
   17 D1:AA21 -  -  -  -  ; ***************************************************************************************
   18 D1:AA21 -  -  -  -  
   19 D1:AA21 -  -  -  -  Command_END: 	;; [end]
   20 D1:AA21 3E 00 C3 C3 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AA27 -  -  -  -  
   22 D1:AA27 -  -  -  -  ; ***************************************************************************************
   23 D1:AA27 -  -  -  -  ;
   24 D1:AA27 -  -  -  -  ;									Changes and Updates
   25 D1:AA27 -  -  -  -  ;
   26 D1:AA27 -  -  -  -  ; ***************************************************************************************
   27 D1:AA27 -  -  -  -  ;
   28 D1:AA27 -  -  -  -  ;		Date			Notes
   29 D1:AA27 -  -  -  -  ;		==== 			=====
   30 D1:AA27 -  -  -  -  ;
   31 D1:AA27 -  -  -  -  ; ***************************************************************************************
   32 D1:AA27 -  -  -  -  		
Listing for file "_build.asm"
   18 D1:AA27 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AA27 -  -  -  -  ; ***************************************************************************************
    2 D1:AA27 -  -  -  -  ; ***************************************************************************************
    3 D1:AA27 -  -  -  -  ;
    4 D1:AA27 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AA27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA27 -  -  -  -  ;		Reviewed :	None
    8 D1:AA27 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AA27 -  -  -  -  ;
   10 D1:AA27 -  -  -  -  ; ***************************************************************************************
   11 D1:AA27 -  -  -  -  ; ***************************************************************************************
   12 D1:AA27 -  -  -  -  
   13 D1:AA27 -  -  -  -  ; ***************************************************************************************
   14 D1:AA27 -  -  -  -  ;
   15 D1:AA27 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AA27 -  -  -  -  ;
   17 D1:AA27 -  -  -  -  ; ***************************************************************************************
   18 D1:AA27 -  -  -  -  
   19 D1:AA27 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AA27 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AA2C 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA30 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA33 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA35 -  -  -  -  		;
   25 D1:AA35 ED 7B DD A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA3A C3 19 AB D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA3E -  -  -  -  
   28 D1:AA3E -  -  -  -  ; ***************************************************************************************
   29 D1:AA3E -  -  -  -  ;
   30 D1:AA3E -  -  -  -  ;									Changes and Updates
   31 D1:AA3E -  -  -  -  ;
   32 D1:AA3E -  -  -  -  ; ***************************************************************************************
   33 D1:AA3E -  -  -  -  ;
   34 D1:AA3E -  -  -  -  ;		Date			Notes
   35 D1:AA3E -  -  -  -  ;		==== 			=====
   36 D1:AA3E -  -  -  -  ;
   37 D1:AA3E -  -  -  -  ; ***************************************************************************************
   38 D1:AA3E -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA3E -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA3E -  -  -  -  ; ***************************************************************************************
    2 D1:AA3E -  -  -  -  ; ***************************************************************************************
    3 D1:AA3E -  -  -  -  ;
    4 D1:AA3E -  -  -  -  ;		Name : 		let.asm
    5 D1:AA3E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA3E -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA3E -  -  -  -  ;		Reviewed :	No
    8 D1:AA3E -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA3E -  -  -  -  ;
   10 D1:AA3E -  -  -  -  ; ***************************************************************************************
   11 D1:AA3E -  -  -  -  ; ***************************************************************************************
   12 D1:AA3E -  -  -  -  
   13 D1:AA3E -  -  -  -  ; ***************************************************************************************
   14 D1:AA3E -  -  -  -  ;
   15 D1:AA3E -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA3E -  -  -  -  ;
   17 D1:AA3E -  -  -  -  ; ***************************************************************************************
   18 D1:AA3E -  -  -  -  
   19 D1:AA3E -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA3E DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA41 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA43 28 2F -  -  		jr 		z,_CLString
   23 D1:AA45 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA47 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA49 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA4B 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA4F -  -  -  -  _CLNoAuto:
   28 D1:AA4F 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA51 CD 78 AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA55 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA57 CA 2D AC D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA5B E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA5C C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA5D AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA5E 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA62 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA64 CD B7 AB D1 		call 	CheckNextA
   38 D1:AA68 -  -  -  -  
   39 D1:AA68 CD EE AD D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA6C -  -  -  -  
   41 D1:AA6C D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA6D 43 -  -  -  		ld 		b,e 						
   43 D1:AA6E D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA6F -  -  -  -  		;
   45 D1:AA6F -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA6F -  -  -  -  		;
   47 D1:AA6F CD 7C AA D1 		call 	WriteHLToDE
   48 D1:AA73 C9 -  -  -  		ret
   49 D1:AA74 -  -  -  -  		;
   50 D1:AA74 -  -  -  -  		; 		String assignment code.
   51 D1:AA74 -  -  -  -  		;
   52 D1:AA74 -  -  -  -  _CLString:
   53 D1:AA74 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:AA7C -  -  -  -  
   55 D1:AA7C -  -  -  -  ; ***************************************************************************************
   56 D1:AA7C -  -  -  -  ;
   57 D1:AA7C -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:AA7C -  -  -  -  ;
   59 D1:AA7C -  -  -  -  ; ***************************************************************************************
   60 D1:AA7C -  -  -  -  
   61 D1:AA7C -  -  -  -  WriteHLToDE:
   62 D1:AA7C CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:AA7E C2 21 AC D1 		jp 		nz,TypeMismatch
   64 D1:AA82 -  -  -  -  		;
   65 D1:AA82 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:AA82 -  -  -  -  		;		
   67 D1:AA82 -  -  -  -  _WHDWriteNumber:
   68 D1:AA82 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:AA83 D9 -  -  -  		exx
   70 D1:AA84 EB -  -  -  		ex 		de,hl
   71 D1:AA85 D9 -  -  -  		exx
   72 D1:AA86 -  -  -  -  
   73 D1:AA86 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:AA87 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:AA88 72 -  -  -  		ld 		(hl),d
   76 D1:AA89 23 -  -  -  		inc 	hl
   77 D1:AA8A E5 -  -  -  		push 	hl
   78 D1:AA8B D9 -  -  -  		exx
   79 D1:AA8C E1 -  -  -  		pop 	hl
   80 D1:AA8D 73 -  -  -  		ld 		(hl),e
   81 D1:AA8E 23 -  -  -  		inc 	hl
   82 D1:AA8F 72 -  -  -  		ld 		(hl),d
   83 D1:AA90 D9 -  -  -  		exx
   84 D1:AA91 -  -  -  -  
   85 D1:AA91 C9 -  -  -  		ret
   86 D1:AA92 -  -  -  -  
   87 D1:AA92 -  -  -  -  ; ***************************************************************************************
   88 D1:AA92 -  -  -  -  ;
   89 D1:AA92 -  -  -  -  ;									Changes and Updates
   90 D1:AA92 -  -  -  -  ;
   91 D1:AA92 -  -  -  -  ; ***************************************************************************************
   92 D1:AA92 -  -  -  -  ;
   93 D1:AA92 -  -  -  -  ;		Date			Notes
   94 D1:AA92 -  -  -  -  ;		==== 			=====
   95 D1:AA92 -  -  -  -  ;
   96 D1:AA92 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:AA92 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AA92 -  -  -  -  ; ***************************************************************************************
    2 D1:AA92 -  -  -  -  ; ***************************************************************************************
    3 D1:AA92 -  -  -  -  ;
    4 D1:AA92 -  -  -  -  ;		Name : 		print.asm
    5 D1:AA92 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA92 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA92 -  -  -  -  ;		Reviewed :	No
    8 D1:AA92 -  -  -  -  ;		Purpose :	Print command
    9 D1:AA92 -  -  -  -  ;
   10 D1:AA92 -  -  -  -  ; ***************************************************************************************
   11 D1:AA92 -  -  -  -  ; ***************************************************************************************
   12 D1:AA92 -  -  -  -  
   13 D1:AA92 -  -  -  -  ; ***************************************************************************************
   14 D1:AA92 -  -  -  -  ;
   15 D1:AA92 -  -  -  -  ;										PRINT command
   16 D1:AA92 -  -  -  -  ;
   17 D1:AA92 -  -  -  -  ; ***************************************************************************************
   18 D1:AA92 -  -  -  -  
   19 D1:AA92 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AA92 -  -  -  -  		;
   21 D1:AA92 -  -  -  -  		;		Main loop
   22 D1:AA92 -  -  -  -  		;
   23 D1:AA92 -  -  -  -  _CPRLoop:
   24 D1:AA92 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:AA95 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:AA97 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:AA99 FE A7 -  -  		cp 		KWD_COLON 	
   28 D1:AA9B 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:AA9D FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:AA9F 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:AAA1 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:AAA3 28 2C -  -  		jr 		z,_CPRTab
   33 D1:AAA5 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:AAA7 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:AAA9 -  -  -  -  		;
   36 D1:AAA9 CD EE AD D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:AAAD CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:AAAF 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:AAB1 -  -  -  -  		;
   40 D1:AAB1 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:AAB3 -  -  -  -  _CPRPrintNumber:
   42 D1:AAB3 F5 -  -  -  		push 	af 							; print leading space
   43 D1:AAB4 3E 20 -  -  		ld 		a,' '
   44 D1:AAB6 CD 56 B7 D1 		call 	SYSPrintChar
   45 D1:AABA F1 -  -  -  		pop 	af
   46 D1:AABB 01 1B A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AABF C5 -  -  -  		push 	bc
   48 D1:AAC0 CD E3 B6 D1 		call 	Int32ToString 				; convert to string
   49 D1:AAC4 E1 -  -  -  		pop 	hl
   50 D1:AAC5 -  -  -  -  		;
   51 D1:AAC5 -  -  -  -  		; 		Print text at HL.
   52 D1:AAC5 -  -  -  -  		;
   53 D1:AAC5 -  -  -  -  _CPRPrintHL:
   54 D1:AAC5 CD 6C B1 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AAC9 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AACB -  -  -  -  		;
   57 D1:AACB -  -  -  -  		; 		New line (')
   58 D1:AACB -  -  -  -  		;
   59 D1:AACB -  -  -  -  _CPRNewLine:
   60 D1:AACB CD 7E B7 D1 		call 	SYSPrintCRLF
   61 D1:AACF 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:AAD1 -  -  -  -  		;
   63 D1:AAD1 -  -  -  -  		; 		Tab command (,)
   64 D1:AAD1 -  -  -  -  		;
   65 D1:AAD1 -  -  -  -  _CPRTab:
   66 D1:AAD1 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:AAD3 CD 56 B7 D1 		call 	SYSPrintChar
   68 D1:AAD7 -  -  -  -  		;
   69 D1:AAD7 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:AAD7 -  -  -  -  		;
   71 D1:AAD7 -  -  -  -  _CPRCheckNext:
   72 D1:AAD7 DD 23 -  -  		inc 	ix 							; consume current
   73 D1:AAD9 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:AADC FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:AADE C8 -  -  -  		ret 	z
   76 D1:AADF FE A7 -  -  		cp 		KWD_COLON
   77 D1:AAE1 C8 -  -  -  		ret 	z
   78 D1:AAE2 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:AAE4 -  -  -  -  		;
   80 D1:AAE4 -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:AAE4 -  -  -  -  		;
   82 D1:AAE4 -  -  -  -  _CPRExitNL:
   83 D1:AAE4 CD 7E B7 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:AAE8 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 D1:AAE9 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AAE9 -  -  -  -  ; ***************************************************************************************
    2 D1:AAE9 -  -  -  -  ; ***************************************************************************************
    3 D1:AAE9 -  -  -  -  ;
    4 D1:AAE9 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AAE9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAE9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAE9 -  -  -  -  ;		Reviewed :	No
    8 D1:AAE9 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AAE9 -  -  -  -  ;
   10 D1:AAE9 -  -  -  -  ; ***************************************************************************************
   11 D1:AAE9 -  -  -  -  ; ***************************************************************************************
   12 D1:AAE9 -  -  -  -  
   13 D1:AAE9 -  -  -  -  ; ***************************************************************************************
   14 D1:AAE9 -  -  -  -  ;
   15 D1:AAE9 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AAE9 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AAE9 -  -  -  -  ;
   18 D1:AAE9 -  -  -  -  ; ***************************************************************************************
   19 D1:AAE9 -  -  -  -  
   20 D1:AAE9 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AAE9 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AAE9 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AAEC DD 23 -  -  		inc 	ix
   24 D1:AAEE FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AAF0 C8 -  -  -  		ret 	z
   26 D1:AAF1 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AAF3 C8 -  -  -  		ret 	z
   28 D1:AAF4 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AAF6 C2 2D AC D1 		jp 		nz,SyntaxError
   30 D1:AAFA -  -  -  -  		;		
   31 D1:AAFA 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AAFE DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AB01 13 -  -  -  		inc 	de 
   34 D1:AB02 13 -  -  -  		inc 	de
   35 D1:AB03 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AB05 C9 -  -  -  		ret
   37 D1:AB06 -  -  -  -  
   38 D1:AB06 -  -  -  -  ; ***************************************************************************************
   39 D1:AB06 -  -  -  -  ;
   40 D1:AB06 -  -  -  -  ;									Changes and Updates
   41 D1:AB06 -  -  -  -  ;
   42 D1:AB06 -  -  -  -  ; ***************************************************************************************
   43 D1:AB06 -  -  -  -  ;
   44 D1:AB06 -  -  -  -  ;		Date			Notes
   45 D1:AB06 -  -  -  -  ;		==== 			=====
   46 D1:AB06 -  -  -  -  ;
   47 D1:AB06 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AB06 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AB06 -  -  -  -  ; ***************************************************************************************
    2 D1:AB06 -  -  -  -  ; ***************************************************************************************
    3 D1:AB06 -  -  -  -  ;
    4 D1:AB06 -  -  -  -  ;		Name : 		run.asm
    5 D1:AB06 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB06 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB06 -  -  -  -  ;		Reviewed :	No
    8 D1:AB06 -  -  -  -  ;		Purpose :	Run command
    9 D1:AB06 -  -  -  -  ;
   10 D1:AB06 -  -  -  -  ; ***************************************************************************************
   11 D1:AB06 -  -  -  -  ; ***************************************************************************************
   12 D1:AB06 -  -  -  -  
   13 D1:AB06 -  -  -  -  ; ***************************************************************************************
   14 D1:AB06 -  -  -  -  ;
   15 D1:AB06 -  -  -  -  ;										RUN command
   16 D1:AB06 -  -  -  -  ;
   17 D1:AB06 -  -  -  -  ; ***************************************************************************************
   18 D1:AB06 -  -  -  -  
   19 D1:AB06 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AB06 CD FE B0 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AB0A -  -  -  -  
   22 D1:AB0A DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AB0F ED 73 DD A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AB14 AF -  -  -  		xor 	a
   25 D1:AB15 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AB19 -  -  -  -  		;
   27 D1:AB19 -  -  -  -  		; 		New line at IX.
   28 D1:AB19 -  -  -  -  		;
   29 D1:AB19 -  -  -  -  CRNewLine:
   30 D1:AB19 DD 22 D9 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AB1E -  -  -  -  		;
   32 D1:AB1E DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AB21 B7 -  -  -  		or 		a
   34 D1:AB22 CA 21 AA D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AB26 -  -  -  -  		;
   36 D1:AB26 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AB28 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AB2A DD 23 -  -  		inc 	ix
   39 D1:AB2C -  -  -  -  		;
   40 D1:AB2C -  -  -  -  		; 		New command at IX
   41 D1:AB2C -  -  -  -  		;
   42 D1:AB2C -  -  -  -  _CRNewCommand:	
   43 D1:AB2C DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB2F B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB30 F2 6B AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB34 -  -  -  -  		;
   47 D1:AB34 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB36 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB38 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB3A D2 5B AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB3E -  -  -  -  		;
   52 D1:AB3E -  -  -  -  _CRDoCommand:		
   53 D1:AB3E E6 7F 21 00 
              00 00 6F 29 
              29 11 EC B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB53 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB55 CD E1 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB59 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB5B -  -  -  -  		;
   58 D1:AB5B -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB5B -  -  -  -  		;
   60 D1:AB5B -  -  -  -  		;
   61 D1:AB5B -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB5B -  -  -  -  		;		
   63 D1:AB5B -  -  -  -  _CRAlternateLets:		
   64 D1:AB5B FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB5D 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB5F FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB61 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB63 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB65 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB67 C3 2D AC D1 		jp 		SyntaxError
   71 D1:AB6B -  -  -  -  		;
   72 D1:AB6B -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB6B -  -  -  -  		;
   74 D1:AB6B -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB6B FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB6D D2 2D AC D1 		jp 		nc,SyntaxError
   77 D1:AB71 -  -  -  -  _CRAssignmentLet:		
   78 D1:AB71 CD 3E AA D1 		call	Command_LET 				; do LET.
   79 D1:AB75 C3 2C AB D1 		jp 		_CRNewCommand
   80 D1:AB79 -  -  -  -  
   81 D1:AB79 -  -  -  -  ; ***************************************************************************************
   82 D1:AB79 -  -  -  -  ;
   83 D1:AB79 -  -  -  -  ;									Changes and Updates
   84 D1:AB79 -  -  -  -  ;
   85 D1:AB79 -  -  -  -  ; ***************************************************************************************
   86 D1:AB79 -  -  -  -  ;
   87 D1:AB79 -  -  -  -  ;		Date			Notes
   88 D1:AB79 -  -  -  -  ;		==== 			=====
   89 D1:AB79 -  -  -  -  ;
   90 D1:AB79 -  -  -  -  ; ***************************************************************************************
   91 D1:AB79 -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AB79 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AB79 -  -  -  -  ; ***************************************************************************************
    2 D1:AB79 -  -  -  -  ; ***************************************************************************************
    3 D1:AB79 -  -  -  -  ;
    4 D1:AB79 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AB79 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB79 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB79 -  -  -  -  ;		Reviewed :	No
    8 D1:AB79 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AB79 -  -  -  -  ;
   10 D1:AB79 -  -  -  -  ; ***************************************************************************************
   11 D1:AB79 -  -  -  -  ; ***************************************************************************************
   12 D1:AB79 -  -  -  -  
   13 D1:AB79 -  -  -  -  ; ***************************************************************************************
   14 D1:AB79 -  -  -  -  ;
   15 D1:AB79 -  -  -  -  ;										STOP command
   16 D1:AB79 -  -  -  -  ;
   17 D1:AB79 -  -  -  -  ; ***************************************************************************************
   18 D1:AB79 -  -  -  -  
   19 D1:AB79 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AB79 3E 0D C3 C3 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AB7F -  -  -  -  
   22 D1:AB7F -  -  -  -  ; ***************************************************************************************
   23 D1:AB7F -  -  -  -  ;
   24 D1:AB7F -  -  -  -  ;									Changes and Updates
   25 D1:AB7F -  -  -  -  ;
   26 D1:AB7F -  -  -  -  ; ***************************************************************************************
   27 D1:AB7F -  -  -  -  ;
   28 D1:AB7F -  -  -  -  ;		Date			Notes
   29 D1:AB7F -  -  -  -  ;		==== 			=====
   30 D1:AB7F -  -  -  -  ;
   31 D1:AB7F -  -  -  -  ; ***************************************************************************************
   32 D1:AB7F -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB7F -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AB7F -  -  -  -  ; ***************************************************************************************
    2 D1:AB7F -  -  -  -  ; ***************************************************************************************
    3 D1:AB7F -  -  -  -  ;
    4 D1:AB7F -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AB7F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB7F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB7F -  -  -  -  ;		Reviewed :	No
    8 D1:AB7F -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AB7F -  -  -  -  ;
   10 D1:AB7F -  -  -  -  ; ***************************************************************************************
   11 D1:AB7F -  -  -  -  ; ***************************************************************************************
   12 D1:AB7F -  -  -  -  
   13 D1:AB7F -  -  -  -  ; ***************************************************************************************
   14 D1:AB7F -  -  -  -  ;
   15 D1:AB7F -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AB7F -  -  -  -  ;
   17 D1:AB7F -  -  -  -  ; ***************************************************************************************
   18 D1:AB7F -  -  -  -  
   19 D1:AB7F -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AB7F             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AB7F             		inc 	ix
   22 D1:AB7F             		cp 		ch 							; exit if matches
   23 D1:AB7F             		ret 	z
   24 D1:AB7F             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AB7F             		jp 		ErrorHandler
   26 D1:AB7F             #endmacro
   27 D1:AB7F -  -  -  -  
   28 D1:AB7F -  -  -  -  CheckLeftBracket:
   29 D1:AB7F DD 7E 00 DD 
              23 FE 95 C8 
              3E 0A C3 C3 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AB8D -  -  -  -  
   31 D1:AB8D -  -  -  -  CheckRightBracket:
   32 D1:AB8D DD 7E 00 DD 
              23 FE A5 C8 
              3E 0B C3 C3 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AB9B -  -  -  -  
   34 D1:AB9B -  -  -  -  CheckDollar:
   35 D1:AB9B DD 7E 00 DD 
              23 FE 96 C8 
              3E 09 C3 C3 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:ABA9 -  -  -  -  		
   37 D1:ABA9 -  -  -  -  CheckComma:
   38 D1:ABA9 DD 7E 00 DD 
              23 FE A6 C8 
              3E 08 C3 C3 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:ABB7 -  -  -  -  
   40 D1:ABB7 -  -  -  -  ; ***************************************************************************************
   41 D1:ABB7 -  -  -  -  ;
   42 D1:ABB7 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:ABB7 -  -  -  -  ;
   44 D1:ABB7 -  -  -  -  ; ***************************************************************************************
   45 D1:ABB7 -  -  -  -  
   46 D1:ABB7 -  -  -  -  CheckNextA:
   47 D1:ABB7 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:ABBA DD 23 -  -  		inc 	ix 							; skip character
   49 D1:ABBC C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:ABBD 3E 0E C3 C3 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:ABC3 -  -  -  -  		
   52 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   53 D1:ABC3 -  -  -  -  ;
   54 D1:ABC3 -  -  -  -  ;									Changes and Updates
   55 D1:ABC3 -  -  -  -  ;
   56 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   57 D1:ABC3 -  -  -  -  ;
   58 D1:ABC3 -  -  -  -  ;		Date			Notes
   59 D1:ABC3 -  -  -  -  ;		==== 			=====
   60 D1:ABC3 -  -  -  -  ;
   61 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   62 D1:ABC3 -  -  -  -  		
Listing for file "_build.asm"
   25 D1:ABC3 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:ABC3 -  -  -  -  ; ***************************************************************************************
    2 D1:ABC3 -  -  -  -  ; ***************************************************************************************
    3 D1:ABC3 -  -  -  -  ;
    4 D1:ABC3 -  -  -  -  ;		Name : 		errors.asm
    5 D1:ABC3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABC3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABC3 -  -  -  -  ;		Reviewed :	No
    8 D1:ABC3 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:ABC3 -  -  -  -  ;
   10 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   11 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   12 D1:ABC3 -  -  -  -  
   13 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   14 D1:ABC3 -  -  -  -  ;
   15 D1:ABC3 -  -  -  -  ;								Error handler, message A 
   16 D1:ABC3 -  -  -  -  ;
   17 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   18 D1:ABC3 -  -  -  -  
   19 D1:ABC3 -  -  -  -  ErrorHandler:
   20 D1:ABC3 F5 -  -  -  		push 	af 						; save error ID
   21 D1:ABC4 -  -  -  -  
   22 D1:ABC4 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:ABC8 6F -  -  -  		ld 		l,a
   24 D1:ABC9 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:ABCA 29 -  -  -  		add 	hl,hl 		
   26 D1:ABCB 11 B1 B2 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:ABCF 19 -  -  -  		add 	hl,de
   28 D1:ABD0 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:ABD2 CD 6C B1 D1 		call 	PrintStringAtHL
   30 D1:ABD6 -  -  -  -  		;
   31 D1:ABD6 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:ABD7 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:ABD8 28 2F -  -  		jr 		z,_EHExit
   34 D1:ABDA -  -  -  -  		;
   35 D1:ABDA DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:ABDF DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:ABE2 B7 -  -  -  		or 		a
   38 D1:ABE3 28 24 -  -  		jr 		z,_EHExit
   39 D1:ABE5 -  -  -  -  
   40 D1:ABE5 21 11 AC D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:ABE9 CD 6C B1 D1 		call 	PrintStringAtHL 
   42 D1:ABED -  -  -  -  		
   43 D1:ABED D9 -  -  -  		exx								; HL'HL = line number
   44 D1:ABEE 21 00 00 00 		ld 		hl,$0000 		
   45 D1:ABF2 D9 -  -  -  		exx 
   46 D1:ABF3 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:ABF6 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:ABF9 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:ABFB 01 1B A9 D1 		ld 		bc,ConvertBuffer
   50 D1:ABFF CD E3 B6 D1 		call 	Int32ToString
   51 D1:AC03 C5 -  -  -  		push 	bc
   52 D1:AC04 E1 -  -  -  		pop 	hl
   53 D1:AC05 CD 6C B1 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AC09 -  -  -  -  _EHExit:		
   55 D1:AC09 CD 7E B7 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AC0D C3 9B A8 D1 		jp 		WarmStart
   57 D1:AC11 -  -  -  -  
   58 D1:AC11 -  -  -  -  _EHAtText:
   59 D1:AC11 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AC1B -  -  -  -  
   61 D1:AC1B -  -  -  -  NotImplemented:
   62 D1:AC1B 3E 05 C3 C3 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AC21 -  -  -  -  TypeMismatch:
   64 D1:AC21 3E 02 C3 C3 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AC27 -  -  -  -  BadValue:
   66 D1:AC27 3E 03 C3 C3 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AC2D -  -  -  -  SyntaxError:
   68 D1:AC2D 3E 0E C3 C3 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AC33 -  -  -  -  						
   70 D1:AC33 -  -  -  -  ; ***************************************************************************************
   71 D1:AC33 -  -  -  -  ;
   72 D1:AC33 -  -  -  -  ;									Changes and Updates
   73 D1:AC33 -  -  -  -  ;
   74 D1:AC33 -  -  -  -  ; ***************************************************************************************
   75 D1:AC33 -  -  -  -  ;
   76 D1:AC33 -  -  -  -  ;		Date			Notes
   77 D1:AC33 -  -  -  -  ;		==== 			=====
   78 D1:AC33 -  -  -  -  ;
   79 D1:AC33 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AC33 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AC33 -  -  -  -  ; ***************************************************************************************
    2 D1:AC33 -  -  -  -  ; ***************************************************************************************
    3 D1:AC33 -  -  -  -  ;
    4 D1:AC33 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AC33 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC33 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC33 -  -  -  -  ;		Reviewed :	No
    8 D1:AC33 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AC33 -  -  -  -  ;
   10 D1:AC33 -  -  -  -  ; ***************************************************************************************
   11 D1:AC33 -  -  -  -  ; ***************************************************************************************
   12 D1:AC33 -  -  -  -  
   13 D1:AC33 -  -  -  -  ; ***************************************************************************************
   14 D1:AC33 -  -  -  -  ;
   15 D1:AC33 -  -  -  -  ; 									Addition
   16 D1:AC33 -  -  -  -  ;
   17 D1:AC33 -  -  -  -  ; ***************************************************************************************
   18 D1:AC33 -  -  -  -  
   19 D1:AC33 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AC33 CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 62 
              B6 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AC41 -  -  -  -  
   22 D1:AC41 -  -  -  -  ; ***************************************************************************************
   23 D1:AC41 -  -  -  -  ;
   24 D1:AC41 -  -  -  -  ; 									Subtraction
   25 D1:AC41 -  -  -  -  ;
   26 D1:AC41 -  -  -  -  ; ***************************************************************************************
   27 D1:AC41 -  -  -  -  
   28 D1:AC41 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AC41 CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 6A 
              B6 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AC4F -  -  -  -  
   31 D1:AC4F -  -  -  -  ; ***************************************************************************************
   32 D1:AC4F -  -  -  -  ;
   33 D1:AC4F -  -  -  -  ; 									  Multiply
   34 D1:AC4F -  -  -  -  ;
   35 D1:AC4F -  -  -  -  ; ***************************************************************************************
   36 D1:AC4F -  -  -  -  
   37 D1:AC4F -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AC4F CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 29 
              B6 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AC5D -  -  -  -  
   40 D1:AC5D -  -  -  -  ; ***************************************************************************************
   41 D1:AC5D -  -  -  -  ;
   42 D1:AC5D -  -  -  -  ; 									  Divide
   43 D1:AC5D -  -  -  -  ;
   44 D1:AC5D -  -  -  -  ; ***************************************************************************************
   45 D1:AC5D -  -  -  -  
   46 D1:AC5D -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AC5D -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AC5D CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 29 
              B5 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AC6B -  -  -  -  
   50 D1:AC6B -  -  -  -  ; ***************************************************************************************
   51 D1:AC6B -  -  -  -  ;
   52 D1:AC6B -  -  -  -  ; 									  Modulus
   53 D1:AC6B -  -  -  -  ;
   54 D1:AC6B -  -  -  -  ; ***************************************************************************************
   55 D1:AC6B -  -  -  -  
   56 D1:AC6B -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AC6B CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 2C 
              B5 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AC79 -  -  -  -  
   59 D1:AC79 -  -  -  -  ; ***************************************************************************************
   60 D1:AC79 -  -  -  -  ;
   61 D1:AC79 -  -  -  -  ; 									  Logical
   62 D1:AC79 -  -  -  -  ;
   63 D1:AC79 -  -  -  -  ; ***************************************************************************************
   64 D1:AC79 -  -  -  -  
   65 D1:AC79 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AC79 CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 74 
              B6 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AC87 -  -  -  -  
   68 D1:AC87 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AC87 CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 81 
              B6 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AC95 -  -  -  -  
   71 D1:AC95 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AC95 CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 8E 
              B6 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ACA3 -  -  -  -  
   74 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   75 D1:ACA3 -  -  -  -  ;
   76 D1:ACA3 -  -  -  -  ;									Changes and Updates
   77 D1:ACA3 -  -  -  -  ;
   78 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   79 D1:ACA3 -  -  -  -  ;
   80 D1:ACA3 -  -  -  -  ;		Date			Notes
   81 D1:ACA3 -  -  -  -  ;		==== 			=====
   82 D1:ACA3 -  -  -  -  ;
   83 D1:ACA3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:ACA3 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ACA3 -  -  -  -  ; ***************************************************************************************
    2 D1:ACA3 -  -  -  -  ; ***************************************************************************************
    3 D1:ACA3 -  -  -  -  ;
    4 D1:ACA3 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ACA3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACA3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACA3 -  -  -  -  ;		Reviewed :	No
    8 D1:ACA3 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ACA3 -  -  -  -  ;
   10 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   11 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   12 D1:ACA3 -  -  -  -  
   13 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   14 D1:ACA3 -  -  -  -  ;
   15 D1:ACA3 -  -  -  -  ; 									<l> <op> <r>
   16 D1:ACA3 -  -  -  -  ;
   17 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   18 D1:ACA3 -  -  -  -  
   19 D1:ACA3 -  -  -  -  ALULongReference:			;; [!]
   20 D1:ACA3 CD B3 AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:ACA7 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:ACA9 CB F9 -  -  		set 	CIsReference,c
   23 D1:ACAB C9 -  -  -  		ret
   24 D1:ACAC -  -  -  -  
   25 D1:ACAC -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:ACAC CD A3 AC D1 		call 	ALULongReference
   27 D1:ACB0 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:ACB2 C9 -  -  -  		ret
   29 D1:ACB3 -  -  -  -  
   30 D1:ACB3 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:ACB3 CD 50 AD D1 
              78 B1 C2 21 
              AC D1 C3 C1 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ACC1 -  -  -  -  _BRGAMain:		
   33 D1:ACC1 CD 62 B6 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:ACC5 CD 56 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:ACC9 C9 -  -  -  		ret
   36 D1:ACCA -  -  -  -  
   37 D1:ACCA -  -  -  -  ; ***************************************************************************************
   38 D1:ACCA -  -  -  -  ;
   39 D1:ACCA -  -  -  -  ;									Changes and Updates
   40 D1:ACCA -  -  -  -  ;
   41 D1:ACCA -  -  -  -  ; ***************************************************************************************
   42 D1:ACCA -  -  -  -  ;
   43 D1:ACCA -  -  -  -  ;		Date			Notes
   44 D1:ACCA -  -  -  -  ;		==== 			=====
   45 D1:ACCA -  -  -  -  ;
   46 D1:ACCA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:ACCA -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:ACCA -  -  -  -  ; ***************************************************************************************
    2 D1:ACCA -  -  -  -  ; ***************************************************************************************
    3 D1:ACCA -  -  -  -  ;
    4 D1:ACCA -  -  -  -  ;		Name : 		compare.asm
    5 D1:ACCA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACCA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACCA -  -  -  -  ;		Reviewed :	No
    8 D1:ACCA -  -  -  -  ;		Purpose :	Comparison code
    9 D1:ACCA -  -  -  -  ;
   10 D1:ACCA -  -  -  -  ; ***************************************************************************************
   11 D1:ACCA -  -  -  -  ; ***************************************************************************************
   12 D1:ACCA -  -  -  -  
   13 D1:ACCA -  -  -  -  #macro compare_equals(n)
   14 D1:ACCA             		call 	CompareBaseCode
   15 D1:ACCA             		cp 		n
   16 D1:ACCA             		jr 		z,UnaryInt32True
   17 D1:ACCA             		jr 		UnaryInt32False
   18 D1:ACCA             #endmacro
   19 D1:ACCA -  -  -  -  
   20 D1:ACCA -  -  -  -  #macro compare_not_equals(n)
   21 D1:ACCA             		call 	CompareBaseCode
   22 D1:ACCA             		cp 		n
   23 D1:ACCA             		jr 		nz,UnaryInt32True
   24 D1:ACCA             		jr 		UnaryInt32False
   25 D1:ACCA             #endmacro
   26 D1:ACCA -  -  -  -  
   27 D1:ACCA -  -  -  -  ; ***************************************************************************************
   28 D1:ACCA -  -  -  -  ;
   29 D1:ACCA -  -  -  -  ; 								Return True/False
   30 D1:ACCA -  -  -  -  ;
   31 D1:ACCA -  -  -  -  ; ***************************************************************************************
   32 D1:ACCA -  -  -  -  
   33 D1:ACCA -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:ACCA 3E FF -  -  		ld 		a,255
   35 D1:ACCC 18 01 -  -  		jr 		_Int32Logical
   36 D1:ACCE -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:ACCE AF -  -  -  		xor 	a
   38 D1:ACCF -  -  -  -  _Int32Logical:
   39 D1:ACCF 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ACD0 67 -  -  -  		ld 		h,a
   41 D1:ACD1 D9 -  -  -  		exx
   42 D1:ACD2 6F -  -  -  		ld 		l,a
   43 D1:ACD3 67 -  -  -  		ld 		h,a
   44 D1:ACD4 D9 -  -  -  		exx
   45 D1:ACD5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:ACD7 C9 -  -  -  		ret
   47 D1:ACD8 -  -  -  -  
   48 D1:ACD8 -  -  -  -  ; ***************************************************************************************
   49 D1:ACD8 -  -  -  -  ;
   50 D1:ACD8 -  -  -  -  ; 										> = < (compare == value)
   51 D1:ACD8 -  -  -  -  ;
   52 D1:ACD8 -  -  -  -  ; ***************************************************************************************
   53 D1:ACD8 -  -  -  -  
   54 D1:ACD8 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:ACD8 CD 14 AD D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:ACE2 -  -  -  -  
   57 D1:ACE2 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:ACE2 CD 14 AD D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:ACEC -  -  -  -  
   60 D1:ACEC -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:ACEC CD 14 AD D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:ACF6 -  -  -  -  
   63 D1:ACF6 -  -  -  -  ; ***************************************************************************************
   64 D1:ACF6 -  -  -  -  ;
   65 D1:ACF6 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:ACF6 -  -  -  -  ;
   67 D1:ACF6 -  -  -  -  ; ***************************************************************************************
   68 D1:ACF6 -  -  -  -  
   69 D1:ACF6 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:ACF6 CD 14 AD D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AD00 -  -  -  -  
   72 D1:AD00 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AD00 CD 14 AD D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AD0A -  -  -  -  
   75 D1:AD0A -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AD0A CD 14 AD D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AD14 -  -  -  -  
   78 D1:AD14 -  -  -  -  ; ***************************************************************************************
   79 D1:AD14 -  -  -  -  ;
   80 D1:AD14 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AD14 -  -  -  -  ;
   82 D1:AD14 -  -  -  -  ; ***************************************************************************************
   83 D1:AD14 -  -  -  -  
   84 D1:AD14 -  -  -  -  CompareBaseCode:
   85 D1:AD14 CD 50 AD D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AD18 -  -  -  -  
   87 D1:AD18 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AD19 A1 -  -  -  		and 	c
   89 D1:AD1A CB 47 -  -  		bit 	CIsString,a 
   90 D1:AD1C C2 2E AD D1 		jp 		nz,StringCompare
   91 D1:AD20 -  -  -  -  
   92 D1:AD20 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AD21 B1 -  -  -  		or 		c
   94 D1:AD22 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AD24 CA A2 B6 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AD28 -  -  -  -  
   97 D1:AD28 3E 02 C3 C3 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AD2E -  -  -  -  ;
   99 D1:AD2E -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AD2E -  -  -  -  ;
  101 D1:AD2E -  -  -  -  StringCompare:
  102 D1:AD2E 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AD2F BE -  -  -  		cp 		(hl)
  104 D1:AD30 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AD32 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AD34 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AD35 23 -  -  -  		inc 	hl
  108 D1:AD36 FE 20 -  -  		cp 		' '
  109 D1:AD38 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AD3A AF -  -  -  		xor 	a 							; return 0.
  111 D1:AD3B C9 -  -  -  		ret
  112 D1:AD3C -  -  -  -  
  113 D1:AD3C -  -  -  -  _SCLess:
  114 D1:AD3C 3E FF -  -  		ld 		a,$FF
  115 D1:AD3E C9 -  -  -  		ret
  116 D1:AD3F -  -  -  -  _SCGreater:
  117 D1:AD3F 3E 01 -  -  		ld 		a,1
  118 D1:AD41 C9 -  -  -  		ret
  119 D1:AD42 -  -  -  -  
  120 D1:AD42 3E 0F C3 C3 
              AB D1 -  -  		ERR_TODO()
  121 D1:AD48 -  -  -  -  
  122 D1:AD48 -  -  -  -  ; ***************************************************************************************
  123 D1:AD48 -  -  -  -  ;
  124 D1:AD48 -  -  -  -  ;									Changes and Updates
  125 D1:AD48 -  -  -  -  ;
  126 D1:AD48 -  -  -  -  ; ***************************************************************************************
  127 D1:AD48 -  -  -  -  ;
  128 D1:AD48 -  -  -  -  ;		Date			Notes
  129 D1:AD48 -  -  -  -  ;		==== 			=====
  130 D1:AD48 -  -  -  -  ;
  131 D1:AD48 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AD48 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AD48 -  -  -  -  ; ***************************************************************************************
    2 D1:AD48 -  -  -  -  ; ***************************************************************************************
    3 D1:AD48 -  -  -  -  ;
    4 D1:AD48 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AD48 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD48 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD48 -  -  -  -  ;		Reviewed :	No
    8 D1:AD48 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AD48 -  -  -  -  ;
   10 D1:AD48 -  -  -  -  ; ***************************************************************************************
   11 D1:AD48 -  -  -  -  ; ***************************************************************************************
   12 D1:AD48 -  -  -  -  
   13 D1:AD48 -  -  -  -  ; ***************************************************************************************
   14 D1:AD48 -  -  -  -  ;
   15 D1:AD48 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AD48 -  -  -  -  ;
   17 D1:AD48 -  -  -  -  ; ***************************************************************************************
   18 D1:AD48 -  -  -  -  
   19 D1:AD48 -  -  -  -  SwapHLDE:
   20 D1:AD48 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AD49 D9 -  -  -  			exx
   22 D1:AD4A EB -  -  -  			ex 		de,hl
   23 D1:AD4B D9 -  -  -  			exx
   24 D1:AD4C 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AD4D 41 -  -  -  			ld 		b,c
   26 D1:AD4E 4F -  -  -  			ld 		c,a
   27 D1:AD4F C9 -  -  -  			ret
   28 D1:AD50 -  -  -  -  
   29 D1:AD50 -  -  -  -  ; ***************************************************************************************
   30 D1:AD50 -  -  -  -  ;
   31 D1:AD50 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AD50 -  -  -  -  ;
   33 D1:AD50 -  -  -  -  ; ***************************************************************************************
   34 D1:AD50 -  -  -  -  
   35 D1:AD50 -  -  -  -  DereferenceBoth:
   36 D1:AD50 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AD52 C4 29 AE D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AD56 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AD58 C8 -  -  -  			ret 	z
   40 D1:AD59 CD 48 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AD5D CD 29 AE D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AD61 CD 48 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AD65 C9 -  -  -  			ret
   44 D1:AD66 -  -  -  -  
   45 D1:AD66 -  -  -  -  ; ***************************************************************************************
   46 D1:AD66 -  -  -  -  ;
   47 D1:AD66 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AD66 -  -  -  -  ;
   49 D1:AD66 -  -  -  -  ; ***************************************************************************************
   50 D1:AD66 -  -  -  -  
   51 D1:AD66 -  -  -  -  NegateHLHL:	
   52 D1:AD66 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AD68 C2 21 AC D1 			jp 		nz,TypeMismatch
   54 D1:AD6C CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AD6E C4 29 AE D1 			call 	nz,Dereference 			; if required.
   56 D1:AD72 CD CC B6 D1 			call 	Int32Negate
   57 D1:AD76 C9 -  -  -  			ret
Listing for file "_build.asm"
   30 D1:AD77 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AD77 -  -  -  -  ; ***************************************************************************************
    2 D1:AD77 -  -  -  -  ; ***************************************************************************************
    3 D1:AD77 -  -  -  -  ;
    4 D1:AD77 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AD77 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD77 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD77 -  -  -  -  ;		Reviewed :	None
    8 D1:AD77 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AD77 -  -  -  -  ;
   10 D1:AD77 -  -  -  -  ; ***************************************************************************************
   11 D1:AD77 -  -  -  -  ; ***************************************************************************************
   12 D1:AD77 -  -  -  -  
   13 D1:AD77 -  -  -  -  ; ***************************************************************************************
   14 D1:AD77 -  -  -  -  ;
   15 D1:AD77 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AD77 -  -  -  -  ;
   17 D1:AD77 -  -  -  -  ; ***************************************************************************************
   18 D1:AD77 -  -  -  -  
   19 D1:AD77 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AD77 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AD78 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AD78 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AD79 -  -  -  -  		;
   24 D1:AD79 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AD79 -  -  -  -  		;
   26 D1:AD79 CD 85 AE D1 		call 	EvaluateTerm 				; get term
   27 D1:AD7D -  -  -  -  		;
   28 D1:AD7D -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AD7D -  -  -  -  		;
   30 D1:AD7D D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AD7E -  -  -  -  _EAPLoop:
   32 D1:AD7E DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AD81 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AD83 D8 -  -  -  		ret 	c
   35 D1:AD84 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AD86 D0 -  -  -  		ret 	nc
   37 D1:AD87 -  -  -  -  		;
   38 D1:AD87 -  -  -  -  		; 		Get the precedence.
   39 D1:AD87 -  -  -  -  		;
   40 D1:AD87 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AD88 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AD8A 21 A0 B2 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AD8E B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AD8F 6F -  -  -  		ld 		l,a
   45 D1:AD90 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AD91 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AD92 -  -  -  -  		;
   48 D1:AD92 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AD92 -  -  -  -  		;
   50 D1:AD92 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AD93 BB -  -  -  		cp 		e
   52 D1:AD94 D0 -  -  -  		ret 	nc
   53 D1:AD95 -  -  -  -  
   54 D1:AD95 -  -  -  -  		;
   55 D1:AD95 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AD95 -  -  -  -  		;
   57 D1:AD95 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AD96 -  -  -  -  		;
   59 D1:AD96 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AD99 F5 -  -  -  		push 	af
   61 D1:AD9A -  -  -  -  		;
   62 D1:AD9A C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AD9B D9 -  -  -  		exx 								; save HL'
   64 D1:AD9C E5 -  -  -  		push 	hl
   65 D1:AD9D D9 -  -  -  		exx 								
   66 D1:AD9E E5 -  -  -  		push 	hl 							; save HL
   67 D1:AD9F -  -  -  -  		;
   68 D1:AD9F DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ADA1 -  -  -  -  		;
   70 D1:ADA1 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ADA1 -  -  -  -  		;
   72 D1:ADA1 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ADA2 CD 78 AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ADA6 -  -  -  -  		;
   75 D1:ADA6 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ADA6 -  -  -  -  		;
   77 D1:ADA6 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ADA7 -  -  -  -  
   79 D1:ADA7 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ADA8 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:ADA9 D9 -  -  -  		exx
   82 D1:ADAA EB -  -  -  		ex 		de,hl
   83 D1:ADAB E1 -  -  -  		pop 	hl
   84 D1:ADAC D9 -  -  -  		exx
   85 D1:ADAD C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:ADAE 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:ADAF -  -  -  -  		;
   88 D1:ADAF -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:ADAF -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:ADAF -  -  -  -  		;
   91 D1:ADAF F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:ADB0 -  -  -  -  		;
   93 D1:ADB0 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:ADB0 -  -  -  -  		;
   95 D1:ADB0 D5 -  -  -  		push 	de
   96 D1:ADB1 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:ADB2 E6 7F 21 00 
              00 00 6F 29 
              29 11 EC B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:ADC7 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:ADC8 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:ADC9 CD E1 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:ADCD -  -  -  -  		;
  102 D1:ADCD D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:ADCE -  -  -  -  		;
  104 D1:ADCE 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:ADD0 -  -  -  -  
  106 D1:ADD0 -  -  -  -  ; ***************************************************************************************
  107 D1:ADD0 -  -  -  -  ;
  108 D1:ADD0 -  -  -  -  ;									Changes and Updates
  109 D1:ADD0 -  -  -  -  ;
  110 D1:ADD0 -  -  -  -  ; ***************************************************************************************
  111 D1:ADD0 -  -  -  -  ;
  112 D1:ADD0 -  -  -  -  ;		Date			Notes
  113 D1:ADD0 -  -  -  -  ;		==== 			=====
  114 D1:ADD0 -  -  -  -  ;
  115 D1:ADD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:ADD0 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:ADD0 -  -  -  -  ; ***************************************************************************************
    2 D1:ADD0 -  -  -  -  ; ***************************************************************************************
    3 D1:ADD0 -  -  -  -  ;
    4 D1:ADD0 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:ADD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADD0 -  -  -  -  ;		Reviewed :	No
    8 D1:ADD0 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:ADD0 -  -  -  -  ;
   10 D1:ADD0 -  -  -  -  ; ***************************************************************************************
   11 D1:ADD0 -  -  -  -  ; ***************************************************************************************
   12 D1:ADD0 -  -  -  -  
   13 D1:ADD0 -  -  -  -  ; ***************************************************************************************
   14 D1:ADD0 -  -  -  -  ;
   15 D1:ADD0 -  -  -  -  ; 								Evaluate an integer term
   16 D1:ADD0 -  -  -  -  ;
   17 D1:ADD0 -  -  -  -  ; ***************************************************************************************
   18 D1:ADD0 -  -  -  -  
   19 D1:ADD0 -  -  -  -  EvaluateIntegerTerm:
   20 D1:ADD0 CD 85 AE D1 		call 	EvaluateTerm
   21 D1:ADD4 CD 29 AE D1 		call 	DeReference
   22 D1:ADD8 CB 41 -  -  		bit 	CIsString,c
   23 D1:ADDA C8 -  -  -  		ret 	z
   24 D1:ADDB C3 21 AC D1 		jp 		TypeMismatch
   25 D1:ADDF -  -  -  -  
   26 D1:ADDF -  -  -  -  ; ***************************************************************************************
   27 D1:ADDF -  -  -  -  ;
   28 D1:ADDF -  -  -  -  ; 								Evaluate a string term
   29 D1:ADDF -  -  -  -  ;
   30 D1:ADDF -  -  -  -  ; ***************************************************************************************
   31 D1:ADDF -  -  -  -  
   32 D1:ADDF -  -  -  -  EvaluateStringTerm:
   33 D1:ADDF CD 85 AE D1 		call 	EvaluateTerm
   34 D1:ADE3 CD 29 AE D1 		call 	DeReference
   35 D1:ADE7 CB 41 -  -  		bit 	CIsString,c
   36 D1:ADE9 C0 -  -  -  		ret 	nz
   37 D1:ADEA C3 21 AC D1 		jp 		TypeMismatch
   38 D1:ADEE -  -  -  -  
   39 D1:ADEE -  -  -  -  ; ***************************************************************************************
   40 D1:ADEE -  -  -  -  ;
   41 D1:ADEE -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:ADEE -  -  -  -  ;
   43 D1:ADEE -  -  -  -  ; ***************************************************************************************
   44 D1:ADEE -  -  -  -  
   45 D1:ADEE -  -  -  -  EvaluateValue:
   46 D1:ADEE CD 77 AD D1 		call 	EvaluateAtPrecedence0
   47 D1:ADF2 C3 29 AE D1 		jp 		Dereference
   48 D1:ADF6 -  -  -  -  
   49 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   50 D1:ADF6 -  -  -  -  ;
   51 D1:ADF6 -  -  -  -  ; 									Evaluate a number
   52 D1:ADF6 -  -  -  -  ;
   53 D1:ADF6 -  -  -  -  ; ***************************************************************************************
   54 D1:ADF6 -  -  -  -  
   55 D1:ADF6 -  -  -  -  EvaluateInteger:
   56 D1:ADF6 CD EE AD D1 		call 	EvaluateValue
   57 D1:ADFA CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:ADFC C8 -  -  -  		ret 	z
   59 D1:ADFD C3 21 AC D1 		jp 		TypeMismatch
   60 D1:AE01 -  -  -  -  
   61 D1:AE01 -  -  -  -  ; ***************************************************************************************
   62 D1:AE01 -  -  -  -  ;
   63 D1:AE01 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AE01 -  -  -  -  ;
   65 D1:AE01 -  -  -  -  ; ***************************************************************************************
   66 D1:AE01 -  -  -  -  
   67 D1:AE01 -  -  -  -  Evaluate8BitInteger:
   68 D1:AE01 CD F6 AD D1 		call 	EvaluateInteger
   69 D1:AE05 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AE06 7C -  -  -  		ld 		a,h
   71 D1:AE07 B5 -  -  -  		or 		l
   72 D1:AE08 D9 -  -  -  		exx 	
   73 D1:AE09 B4 -  -  -  		or 		h
   74 D1:AE0A C2 27 AC D1 		jp 		nz,BadValue
   75 D1:AE0E 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AE0F C9 -  -  -  		ret
   77 D1:AE10 -  -  -  -  		
   78 D1:AE10 -  -  -  -  ; ***************************************************************************************
   79 D1:AE10 -  -  -  -  ;
   80 D1:AE10 -  -  -  -  ; 									Evaluate a string
   81 D1:AE10 -  -  -  -  ;
   82 D1:AE10 -  -  -  -  ; ***************************************************************************************
   83 D1:AE10 -  -  -  -  
   84 D1:AE10 -  -  -  -  EvaluateStringOnly:
   85 D1:AE10 CD EE AD D1 		call 	EvaluateValue
   86 D1:AE14 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AE16 CA 21 AC D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AE1A C9 -  -  -  		ret
   89 D1:AE1B -  -  -  -  
   90 D1:AE1B -  -  -  -  ; ***************************************************************************************
   91 D1:AE1B -  -  -  -  ;
   92 D1:AE1B -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AE1B -  -  -  -  ;
   94 D1:AE1B -  -  -  -  ; ***************************************************************************************
   95 D1:AE1B -  -  -  -  
   96 D1:AE1B -  -  -  -  Return8BitConstant:
   97 D1:AE1B 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AE1F 6F -  -  -  		ld 		l,a
   99 D1:AE20 -  -  -  -  Return16BitConstant:
  100 D1:AE20 D9 -  -  -  		exx 								; clear HL'
  101 D1:AE21 21 00 00 00 		ld 		hl,0
  102 D1:AE25 D9 -  -  -  		exx
  103 D1:AE26 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AE28 C9 -  -  -  		ret
  105 D1:AE29 -  -  -  -  
  106 D1:AE29 -  -  -  -  ; ***************************************************************************************
  107 D1:AE29 -  -  -  -  ;
  108 D1:AE29 -  -  -  -  ;									Changes and Updates
  109 D1:AE29 -  -  -  -  ;
  110 D1:AE29 -  -  -  -  ; ***************************************************************************************
  111 D1:AE29 -  -  -  -  ;
  112 D1:AE29 -  -  -  -  ;		Date			Notes
  113 D1:AE29 -  -  -  -  ;		==== 			=====
  114 D1:AE29 -  -  -  -  ;
  115 D1:AE29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AE29 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AE29 -  -  -  -  ; ***************************************************************************************
    2 D1:AE29 -  -  -  -  ; ***************************************************************************************
    3 D1:AE29 -  -  -  -  ;
    4 D1:AE29 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AE29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE29 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AE29 -  -  -  -  ;		Reviewed :	No
    8 D1:AE29 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AE29 -  -  -  -  ;
   10 D1:AE29 -  -  -  -  ; ***************************************************************************************
   11 D1:AE29 -  -  -  -  ; ***************************************************************************************
   12 D1:AE29 -  -  -  -  
   13 D1:AE29 -  -  -  -  ; ***************************************************************************************
   14 D1:AE29 -  -  -  -  ;
   15 D1:AE29 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AE29 -  -  -  -  ;
   17 D1:AE29 -  -  -  -  ; ***************************************************************************************
   18 D1:AE29 -  -  -  -  
   19 D1:AE29 -  -  -  -  Dereference:
   20 D1:AE29 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AE2B C8 -  -  -  		ret 	z
   22 D1:AE2C -  -  -  -  
   23 D1:AE2C CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AE2E -  -  -  -  		
   25 D1:AE2E CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AE30 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AE32 -  -  -  -  
   28 D1:AE32 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AE34 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AE36 -  -  -  -  
   31 D1:AE36 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AE37 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AE39 D9 -  -  -  		exx
   34 D1:AE3A E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AE3B 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AE3C 23 -  -  -  		inc  	hl
   37 D1:AE3D ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AE3F D9 -  -  -  		exx 								; fix back
   39 D1:AE40 C9 -  -  -  		ret
   40 D1:AE41 -  -  -  -  
   41 D1:AE41 -  -  -  -  _DeRefByte:		
   42 D1:AE41 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AE42 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AE46 6F -  -  -  		ld	 	l,a
   45 D1:AE47 D9 -  -  -  		exx
   46 D1:AE48 21 00 00 00 		ld 		hl,$0000
   47 D1:AE4C D9 -  -  -  		exx
   48 D1:AE4D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AE4F C9 -  -  -  		ret
   50 D1:AE50 -  -  -  -  
   51 D1:AE50 -  -  -  -  _DRInternal:
   52 D1:AE50 3E 05 C3 C3 
              AB D1 -  -  		ERR_DISABLED
   53 D1:AE56 -  -  -  -  
   54 D1:AE56 -  -  -  -  ; ***************************************************************************************
   55 D1:AE56 -  -  -  -  ;
   56 D1:AE56 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AE56 -  -  -  -  ;
   58 D1:AE56 -  -  -  -  ; ***************************************************************************************
   59 D1:AE56 -  -  -  -  
   60 D1:AE56 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AE56 -  -  -  -  		#ifdef EZ80
   62 D1:AE56 22 E7 A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AE5A D9 -  -  -  		exx
   64 D1:AE5B 22 E9 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AE5F 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AE63 D9 -  -  -  		exx
   67 D1:AE64 2A E7 A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AE68 -  -  -  -  		#endif
   69 D1:AE68 C9 -  -  -  		ret
   70 D1:AE69 -  -  -  -  
   71 D1:AE69 -  -  -  -  ; ***************************************************************************************
   72 D1:AE69 -  -  -  -  ;
   73 D1:AE69 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AE69 -  -  -  -  ;
   75 D1:AE69 -  -  -  -  ; ***************************************************************************************
   76 D1:AE69 -  -  -  -  
   77 D1:AE69 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AE69 -  -  -  -  		#ifdef EZ80
   79 D1:AE69 22 E7 A8 D1 		ld 		(AConvert),hl
   80 D1:AE6D 21 00 00 00 		ld 		hl,$0000
   81 D1:AE71 22 EA A8 D1 		ld 		(AConvert+3),hl
   82 D1:AE75 D9 -  -  -  		exx
   83 D1:AE76 2A E9 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AE7A D9 -  -  -  		exx
   85 D1:AE7B AF -  -  -  		xor 	a
   86 D1:AE7C 32 E9 A8 D1 		ld 		(AConvert+2),a
   87 D1:AE80 2A E7 A8 D1 		ld 		hl,(AConvert)
   88 D1:AE84 -  -  -  -  		#endif
   89 D1:AE84 C9 -  -  -  		ret
   90 D1:AE85 -  -  -  -  
   91 D1:AE85 -  -  -  -  ; ***************************************************************************************
   92 D1:AE85 -  -  -  -  ;
   93 D1:AE85 -  -  -  -  ;									Changes and Updates
   94 D1:AE85 -  -  -  -  ;
   95 D1:AE85 -  -  -  -  ; ***************************************************************************************
   96 D1:AE85 -  -  -  -  ;
   97 D1:AE85 -  -  -  -  ;		Date			Notes
   98 D1:AE85 -  -  -  -  ;		==== 			=====
   99 D1:AE85 -  -  -  -  ;
  100 D1:AE85 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE85 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AE85 -  -  -  -  ; ***************************************************************************************
    2 D1:AE85 -  -  -  -  ; ***************************************************************************************
    3 D1:AE85 -  -  -  -  ;
    4 D1:AE85 -  -  -  -  ;		Name : 		term.asm
    5 D1:AE85 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE85 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE85 -  -  -  -  ;		Reviewed :	No
    8 D1:AE85 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AE85 -  -  -  -  ;
   10 D1:AE85 -  -  -  -  ; ***************************************************************************************
   11 D1:AE85 -  -  -  -  ; ***************************************************************************************
   12 D1:AE85 -  -  -  -  
   13 D1:AE85 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AE85             		add_hlhl_16
   15 D1:AE85             		exx
   16 D1:AE85             		adc_hlhl_16
   17 D1:AE85             		exx
   18 D1:AE85             #endmacro
   19 D1:AE85 -  -  -  -  
   20 D1:AE85 -  -  -  -  ; ***************************************************************************************
   21 D1:AE85 -  -  -  -  ;
   22 D1:AE85 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AE85 -  -  -  -  ;
   24 D1:AE85 -  -  -  -  ; ***************************************************************************************
   25 D1:AE85 -  -  -  -  ;
   26 D1:AE85 -  -  -  -  ; 		Terms can be:
   27 D1:AE85 -  -  -  -  ;
   28 D1:AE85 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AE85 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AE85 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AE85 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AE85 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AE85 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AE85 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AE85 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AE85 -  -  -  -  ; 														reference of some sort.
   37 D1:AE85 -  -  -  -  ;
   38 D1:AE85 -  -  -  -  ; ***************************************************************************************
   39 D1:AE85 -  -  -  -  
   40 D1:AE85 -  -  -  -  EvaluateTerm:		
   41 D1:AE85 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AE87 D9 -  -  -  		exx
   43 D1:AE88 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AE8C D9 -  -  -  		exx
   45 D1:AE8D 21 00 00 00 		ld 		hl,$0000		
   46 D1:AE91 -  -  -  -  		;
   47 D1:AE91 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AE94 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AE96 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AE98 DA 50 AF D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AE9C CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AE9E C2 F4 AE D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AEA2 -  -  -  -  		;
   54 D1:AEA2 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AEA2 -  -  -  -  		;
   56 D1:AEA2 -  -  -  -  _ETIntegerConstant:
   57 D1:AEA2 -  -  -  -  		;
   58 D1:AEA2 -  -  -  -  _ETIntegerLoop:		
   59 D1:AEA2 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AEA5 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AEA7 B5 -  -  -  		or 		l 							; or into L
   62 D1:AEA8 6F -  -  -  		ld 		l,a
   63 D1:AEA9 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AEAB DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AEAE C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AEB0 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AEB2 D8 -  -  -  		ret 	c
   68 D1:AEB3 -  -  -  -  
   69 D1:AEB3 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AEBA 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AEC1 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AEC8 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AECF 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AED6 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AEDD -  -  -  -  
   76 D1:AEDD 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AEDF -  -  -  -  		;
   78 D1:AEDF -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AEDF -  -  -  -  		;
   80 D1:AEDF -  -  -  -  _ETStringMarker:		
   81 D1:AEDF DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AEE1 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AEE3 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AEE5 E1 -  -  -  		pop 	hl
   85 D1:AEE6 11 00 00 00 		ld 		de,$0000
   86 D1:AEEA DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AEED DD 19 -  -  		add 	ix,de
   88 D1:AEEF DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AEF1 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AEF3 C9 -  -  -  		ret
   91 D1:AEF4 -  -  -  -  		;
   92 D1:AEF4 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AEF4 -  -  -  -  		;
   94 D1:AEF4 -  -  -  -  _ETFoundKeyword:
   95 D1:AEF4 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AEF6 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AEF8 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AEFA FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AEFC 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AEFE -  -  -  -  		;
  101 D1:AEFE -  -  -  -  		;		Unary group 0
  102 D1:AEFE -  -  -  -  		;
  103 D1:AEFE E6 7F 21 00 
              00 00 6F 29 
              29 11 EC B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AF13 C3 E1 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AF17 -  -  -  -  
  106 D1:AF17 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AF17 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AF19 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AF1B -  -  -  -  		;
  110 D1:AF1B -  -  -  -  		; 		- term
  111 D1:AF1B -  -  -  -  		;
  112 D1:AF1B CD D0 AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AF1F CD 66 AD D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AF23 C9 -  -  -  		ret
  115 D1:AF24 -  -  -  -  		;
  116 D1:AF24 -  -  -  -  		;		! ? indirection check
  117 D1:AF24 -  -  -  -  		;
  118 D1:AF24 -  -  -  -  _ETCheckIndirection:	
  119 D1:AF24 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AF26 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AF28 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AF2A C2 2D AC D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AF2E -  -  -  -  		;
  124 D1:AF2E -  -  -  -  		; 		! ? indirection
  125 D1:AF2E -  -  -  -  		;
  126 D1:AF2E -  -  -  -  _ETIndirection:
  127 D1:AF2E F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AF2F CD 85 AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AF33 CD 29 AE D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AF37 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AF39 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AF3B CD 56 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AF3F F1 -  -  -  		pop 	af 							; get type back
  134 D1:AF40 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AF42 CB F9 -  -  		set 	CIsReference,c
  136 D1:AF44 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AF46 C8 -  -  -  		ret 	z
  138 D1:AF47 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AF49 C9 -  -  -  		ret
  140 D1:AF4A -  -  -  -  _ETStringIndirect:
  141 D1:AF4A 3E 02 C3 C3 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AF50 -  -  -  -  		;
  143 D1:AF50 -  -  -  -  		; 		Found an identifier.
  144 D1:AF50 -  -  -  -  		;
  145 D1:AF50 -  -  -  -  _ETVariable:
  146 D1:AF50 CD BA B1 D1 		call 	FindVariable 				; find the variable.
  147 D1:AF54 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AF55 3E 10 C3 C3 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AF5B -  -  -  -  		
  150 D1:AF5B -  -  -  -  ; ***************************************************************************************
  151 D1:AF5B -  -  -  -  ;
  152 D1:AF5B -  -  -  -  ;									Changes and Updates
  153 D1:AF5B -  -  -  -  ;
  154 D1:AF5B -  -  -  -  ; ***************************************************************************************
  155 D1:AF5B -  -  -  -  ;
  156 D1:AF5B -  -  -  -  ;		Date			Notes
  157 D1:AF5B -  -  -  -  ;		==== 			=====
  158 D1:AF5B -  -  -  -  ;
  159 D1:AF5B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AF5B -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AF5B -  -  -  -  ; ***************************************************************************************
    2 D1:AF5B -  -  -  -  ; ***************************************************************************************
    3 D1:AF5B -  -  -  -  ;
    4 D1:AF5B -  -  -  -  ;		Name : 		abs.asm
    5 D1:AF5B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF5B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF5B -  -  -  -  ;		Reviewed :	No
    8 D1:AF5B -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AF5B -  -  -  -  ;
   10 D1:AF5B -  -  -  -  ; ***************************************************************************************
   11 D1:AF5B -  -  -  -  ; ***************************************************************************************
   12 D1:AF5B -  -  -  -  
   13 D1:AF5B -  -  -  -  ; ***************************************************************************************
   14 D1:AF5B -  -  -  -  ;
   15 D1:AF5B -  -  -  -  ;								abs( unary function
   16 D1:AF5B -  -  -  -  ;
   17 D1:AF5B -  -  -  -  ; ***************************************************************************************
   18 D1:AF5B -  -  -  -  
   19 D1:AF5B -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AF5B CD D0 AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AF5F D9 -  -  -  		exx 								; test MSB
   22 D1:AF60 CB 7C -  -  		bit 	7,h
   23 D1:AF62 D9 -  -  -  		exx
   24 D1:AF63 C4 66 AD D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AF67 C9 -  -  -  		ret
   26 D1:AF68 -  -  -  -  
   27 D1:AF68 -  -  -  -  ; ***************************************************************************************
   28 D1:AF68 -  -  -  -  ;
   29 D1:AF68 -  -  -  -  ;									Changes and Updates
   30 D1:AF68 -  -  -  -  ;
   31 D1:AF68 -  -  -  -  ; ***************************************************************************************
   32 D1:AF68 -  -  -  -  ;
   33 D1:AF68 -  -  -  -  ;		Date			Notes
   34 D1:AF68 -  -  -  -  ;		==== 			=====
   35 D1:AF68 -  -  -  -  ;
   36 D1:AF68 -  -  -  -  ; ***************************************************************************************
   37 D1:AF68 -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AF68 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AF68 -  -  -  -  ; ***************************************************************************************
    2 D1:AF68 -  -  -  -  ; ***************************************************************************************
    3 D1:AF68 -  -  -  -  ;
    4 D1:AF68 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AF68 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF68 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF68 -  -  -  -  ;		Reviewed :	No
    8 D1:AF68 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AF68 -  -  -  -  ;
   10 D1:AF68 -  -  -  -  ; ***************************************************************************************
   11 D1:AF68 -  -  -  -  ; ***************************************************************************************
   12 D1:AF68 -  -  -  -  
   13 D1:AF68 -  -  -  -  ; ***************************************************************************************
   14 D1:AF68 -  -  -  -  ;
   15 D1:AF68 -  -  -  -  ;								Asc unary function
   16 D1:AF68 -  -  -  -  ;
   17 D1:AF68 -  -  -  -  ; ***************************************************************************************
   18 D1:AF68 -  -  -  -  
   19 D1:AF68 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AF68 CD DF AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AF6C 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AF6D C3 1B AE D1 		jp 		Return8BitConstant
   23 D1:AF71 -  -  -  -  
   24 D1:AF71 -  -  -  -  ; ***************************************************************************************
   25 D1:AF71 -  -  -  -  ;
   26 D1:AF71 -  -  -  -  ;									Changes and Updates
   27 D1:AF71 -  -  -  -  ;
   28 D1:AF71 -  -  -  -  ; ***************************************************************************************
   29 D1:AF71 -  -  -  -  ;
   30 D1:AF71 -  -  -  -  ;		Date			Notes
   31 D1:AF71 -  -  -  -  ;		==== 			=====
   32 D1:AF71 -  -  -  -  ;
   33 D1:AF71 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AF71 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AF71 -  -  -  -  ; ***************************************************************************************
    2 D1:AF71 -  -  -  -  ; ***************************************************************************************
    3 D1:AF71 -  -  -  -  ;
    4 D1:AF71 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AF71 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF71 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF71 -  -  -  -  ;		Reviewed :	No
    8 D1:AF71 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AF71 -  -  -  -  ;
   10 D1:AF71 -  -  -  -  ; ***************************************************************************************
   11 D1:AF71 -  -  -  -  ; ***************************************************************************************
   12 D1:AF71 -  -  -  -  
   13 D1:AF71 -  -  -  -  ; ***************************************************************************************
   14 D1:AF71 -  -  -  -  ;
   15 D1:AF71 -  -  -  -  ;								Chr$() unary function
   16 D1:AF71 -  -  -  -  ;
   17 D1:AF71 -  -  -  -  ; ***************************************************************************************
   18 D1:AF71 -  -  -  -  
   19 D1:AF71 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AF71 CD 9B AB D1 		call 	CheckDollar
   21 D1:AF75 CD D0 AD D1 		call 	EvaluateIntegerTerm
   22 D1:AF79 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AF7A 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AF7C 21 1A A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AF80 36 0D -  -  		ld 		(hl),13
   26 D1:AF82 2B -  -  -  		dec 	hl
   27 D1:AF83 77 -  -  -  		ld 		(hl),a
   28 D1:AF84 C9 -  -  -  		ret
   29 D1:AF85 -  -  -  -  
   30 D1:AF85 -  -  -  -  ; ***************************************************************************************
   31 D1:AF85 -  -  -  -  ;
   32 D1:AF85 -  -  -  -  ;									Changes and Updates
   33 D1:AF85 -  -  -  -  ;
   34 D1:AF85 -  -  -  -  ; ***************************************************************************************
   35 D1:AF85 -  -  -  -  ;
   36 D1:AF85 -  -  -  -  ;		Date			Notes
   37 D1:AF85 -  -  -  -  ;		==== 			=====
   38 D1:AF85 -  -  -  -  ;
   39 D1:AF85 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF85 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AF85 -  -  -  -  ; ***************************************************************************************
    2 D1:AF85 -  -  -  -  ; ***************************************************************************************
    3 D1:AF85 -  -  -  -  ;
    4 D1:AF85 -  -  -  -  ;		Name : 		len.asm
    5 D1:AF85 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF85 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF85 -  -  -  -  ;		Reviewed :	None
    8 D1:AF85 -  -  -  -  ;		Purpose :	String Length
    9 D1:AF85 -  -  -  -  ;
   10 D1:AF85 -  -  -  -  ; ***************************************************************************************
   11 D1:AF85 -  -  -  -  ; ***************************************************************************************
   12 D1:AF85 -  -  -  -  
   13 D1:AF85 -  -  -  -  ; ***************************************************************************************
   14 D1:AF85 -  -  -  -  ;
   15 D1:AF85 -  -  -  -  ;								Len unary function
   16 D1:AF85 -  -  -  -  ;
   17 D1:AF85 -  -  -  -  ; ***************************************************************************************
   18 D1:AF85 -  -  -  -  
   19 D1:AF85 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AF85 CD DF AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AF89 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AF8A CD CE AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AF8E -  -  -  -  _ULCount:
   24 D1:AF8E 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AF8F FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AF91 D8 -  -  -  		ret 	c
   27 D1:AF92 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AF93 13 -  -  -  		inc 	de
   29 D1:AF94 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AF96 -  -  -  -  
   31 D1:AF96 -  -  -  -  ; ***************************************************************************************
   32 D1:AF96 -  -  -  -  ;
   33 D1:AF96 -  -  -  -  ;									Changes and Updates
   34 D1:AF96 -  -  -  -  ;
   35 D1:AF96 -  -  -  -  ; ***************************************************************************************
   36 D1:AF96 -  -  -  -  ;
   37 D1:AF96 -  -  -  -  ;		Date			Notes
   38 D1:AF96 -  -  -  -  ;		==== 			=====
   39 D1:AF96 -  -  -  -  ;
   40 D1:AF96 -  -  -  -  ; ***************************************************************************************
   41 D1:AF96 -  -  -  -  		
Listing for file "_build.asm"
   38 D1:AF96 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AF96 -  -  -  -  ; ***************************************************************************************
    2 D1:AF96 -  -  -  -  ; ***************************************************************************************
    3 D1:AF96 -  -  -  -  ;
    4 D1:AF96 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AF96 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF96 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF96 -  -  -  -  ;		Reviewed :	No
    8 D1:AF96 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AF96 -  -  -  -  ;
   10 D1:AF96 -  -  -  -  ; ***************************************************************************************
   11 D1:AF96 -  -  -  -  ; ***************************************************************************************
   12 D1:AF96 -  -  -  -  
   13 D1:AF96 -  -  -  -  ; ***************************************************************************************
   14 D1:AF96 -  -  -  -  ;
   15 D1:AF96 -  -  -  -  ;								Str$() unary function
   16 D1:AF96 -  -  -  -  ;
   17 D1:AF96 -  -  -  -  ; ***************************************************************************************
   18 D1:AF96 -  -  -  -  
   19 D1:AF96 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AF96 CD D0 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AF9A CD 56 AE D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AF9E 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AFA0 C9 -  -  -  		ret
   24 D1:AFA1 -  -  -  -  
   25 D1:AFA1 -  -  -  -  ; ***************************************************************************************
   26 D1:AFA1 -  -  -  -  ;
   27 D1:AFA1 -  -  -  -  ;									Changes and Updates
   28 D1:AFA1 -  -  -  -  ;
   29 D1:AFA1 -  -  -  -  ; ***************************************************************************************
   30 D1:AFA1 -  -  -  -  ;
   31 D1:AFA1 -  -  -  -  ;		Date			Notes
   32 D1:AFA1 -  -  -  -  ;		==== 			=====
   33 D1:AFA1 -  -  -  -  ;
   34 D1:AFA1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AFA1 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AFA1 -  -  -  -  ; ***************************************************************************************
    2 D1:AFA1 -  -  -  -  ; ***************************************************************************************
    3 D1:AFA1 -  -  -  -  ;
    4 D1:AFA1 -  -  -  -  ;		Name : 		not.asm
    5 D1:AFA1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFA1 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AFA1 -  -  -  -  ;		Reviewed :	No
    8 D1:AFA1 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AFA1 -  -  -  -  ;
   10 D1:AFA1 -  -  -  -  ; ***************************************************************************************
   11 D1:AFA1 -  -  -  -  ; ***************************************************************************************
   12 D1:AFA1 -  -  -  -  
   13 D1:AFA1 -  -  -  -  ; ***************************************************************************************
   14 D1:AFA1 -  -  -  -  ;
   15 D1:AFA1 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AFA1 -  -  -  -  ;
   17 D1:AFA1 -  -  -  -  ; ***************************************************************************************
   18 D1:AFA1 -  -  -  -  
   19 D1:AFA1 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AFA1 CD D0 AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AFA5 CD AE AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AFA9 CD AE AF D1 		call 	__UNSwap		
   23 D1:AFAD C9 -  -  -  		ret
   24 D1:AFAE -  -  -  -  
   25 D1:AFAE -  -  -  -  __UNSwap:
   26 D1:AFAE 7C -  -  -  		ld 		a,h
   27 D1:AFAF 2F -  -  -  		cpl
   28 D1:AFB0 67 -  -  -  		ld 		h,a
   29 D1:AFB1 7D -  -  -  		ld 		a,l
   30 D1:AFB2 2F -  -  -  		cpl 	
   31 D1:AFB3 6F -  -  -  		ld 		l,a
   32 D1:AFB4 D9 -  -  -  		exx
   33 D1:AFB5 C9 -  -  -  		ret
   34 D1:AFB6 -  -  -  -  
   35 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   36 D1:AFB6 -  -  -  -  ;
   37 D1:AFB6 -  -  -  -  ;									Changes and Updates
   38 D1:AFB6 -  -  -  -  ;
   39 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   40 D1:AFB6 -  -  -  -  ;
   41 D1:AFB6 -  -  -  -  ;		Date			Notes
   42 D1:AFB6 -  -  -  -  ;		==== 			=====
   43 D1:AFB6 -  -  -  -  ;
   44 D1:AFB6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AFB6 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AFB6 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB6 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB6 -  -  -  -  ;
    4 D1:AFB6 -  -  -  -  ;		Name : 		page.asm
    5 D1:AFB6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFB6 -  -  -  -  ;		Reviewed :	No
    8 D1:AFB6 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AFB6 -  -  -  -  ;
   10 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   12 D1:AFB6 -  -  -  -  
   13 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   14 D1:AFB6 -  -  -  -  ;
   15 D1:AFB6 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AFB6 -  -  -  -  ;
   17 D1:AFB6 -  -  -  -  ; ***************************************************************************************
   18 D1:AFB6 -  -  -  -  
   19 D1:AFB6 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AFB6 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AFBA D9 -  -  -  			exx
   22 D1:AFBB 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AFBF D9 -  -  -  			exx
   24 D1:AFC0 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AFC2 C9 -  -  -  			ret
   26 D1:AFC3 -  -  -  -  
   27 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   28 D1:AFC3 -  -  -  -  ;
   29 D1:AFC3 -  -  -  -  ;									Changes and Updates
   30 D1:AFC3 -  -  -  -  ;
   31 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   32 D1:AFC3 -  -  -  -  ;
   33 D1:AFC3 -  -  -  -  ;		Date			Notes
   34 D1:AFC3 -  -  -  -  ;		==== 			=====
   35 D1:AFC3 -  -  -  -  ;
   36 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   37 D1:AFC3 -  -  -  -  			
Listing for file "_build.asm"
   41 D1:AFC3 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AFC3 -  -  -  -  ; ***************************************************************************************
    2 D1:AFC3 -  -  -  -  ; ***************************************************************************************
    3 D1:AFC3 -  -  -  -  ;
    4 D1:AFC3 -  -  -  -  ;		Name : 		random.asm
    5 D1:AFC3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFC3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFC3 -  -  -  -  ;		Reviewed :	No
    8 D1:AFC3 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AFC3 -  -  -  -  ;
   10 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   11 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   12 D1:AFC3 -  -  -  -  
   13 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   14 D1:AFC3 -  -  -  -  ;
   15 D1:AFC3 -  -  -  -  ;								Random unary function
   16 D1:AFC3 -  -  -  -  ;
   17 D1:AFC3 -  -  -  -  ; ***************************************************************************************
   18 D1:AFC3 -  -  -  -  
   19 D1:AFC3 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AFC3 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AFCB CD D0 AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AFCF D9 -  -  -  		exx 								; is it -ve
   23 D1:AFD0 CB 7C -  -  		bit 	7,h
   24 D1:AFD2 D9 -  -  -  		exx
   25 D1:AFD3 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AFD5 22 ED A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AFD9 D9 -  -  -  		exx
   28 D1:AFDA 22 F1 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AFDE D9 -  -  -  		exx
   30 D1:AFDF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AFE1 C9 -  -  -  		ret
   32 D1:AFE2 -  -  -  -  _URDontSeed:		
   33 D1:AFE2 -  -  -  -  
   34 D1:AFE2 CD 9B B6 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AFE6 28 1C -  -  		jr 		z,_URFail
   36 D1:AFE8 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AFE9 D9 -  -  -  		exx
   38 D1:AFEA E5 -  -  -  		push 	hl
   39 D1:AFEB D9 -  -  -  		exx
   40 D1:AFEC -  -  -  -  		;
   41 D1:AFEC CD 15 B0 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AFF0 D9 -  -  -  		exx
   43 D1:AFF1 CD 15 B0 D1 		call 	URandomHL
   44 D1:AFF5 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AFF7 D9 -  -  -  		exx
   46 D1:AFF8 -  -  -  -  		;
   47 D1:AFF8 D9 -  -  -  		exx 								; restore range.
   48 D1:AFF9 D1 -  -  -  		pop 	de
   49 D1:AFFA D9 -  -  -  		exx
   50 D1:AFFB D1 -  -  -  		pop 	de
   51 D1:AFFC -  -  -  -  		;
   52 D1:AFFC CD 2C B5 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B000 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B001 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B003 C9 -  -  -  		ret
   56 D1:B004 -  -  -  -  _URFail:
   57 D1:B004 3E 03 C3 C3 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:B00A -  -  -  -  ; ***************************************************************************************
   59 D1:B00A -  -  -  -  ;
   60 D1:B00A -  -  -  -  ; 									Push RNG off zero
   61 D1:B00A -  -  -  -  ;
   62 D1:B00A -  -  -  -  ; ***************************************************************************************
   63 D1:B00A -  -  -  -  
   64 D1:B00A -  -  -  -  UnaryRandomInitialise:
   65 D1:B00A 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B00C -  -  -  -  _URILoop:
   67 D1:B00C C5 -  -  -  		push 	bc
   68 D1:B00D CD 15 B0 D1 		call 	URandomHL
   69 D1:B011 C1 -  -  -  		pop 	bc
   70 D1:B012 10 F8 -  -  		djnz 	_URILoop
   71 D1:B014 C9 -  -  -  		ret
   72 D1:B015 -  -  -  -  
   73 D1:B015 -  -  -  -  ; ***************************************************************************************
   74 D1:B015 -  -  -  -  ;
   75 D1:B015 -  -  -  -  ;							16 bit random number generator
   76 D1:B015 -  -  -  -  ;
   77 D1:B015 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B015 -  -  -  -  ;		Actual author unspecified.
   79 D1:B015 -  -  -  -  ;
   80 D1:B015 -  -  -  -  ; ***************************************************************************************
   81 D1:B015 -  -  -  -  
   82 D1:B015 -  -  -  -  URandomHL:
   83 D1:B015 2A ED A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B019 ED 5B F1 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B01E 44 -  -  -  	    ld 		b,h
   86 D1:B01F 4D -  -  -  	    ld 		c,l
   87 D1:B020 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B025 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B02A 2C -  -  -  	    inc 	l
   90 D1:B02B 09 -  -  -  	    add 	hl,bc
   91 D1:B02C 22 ED A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B030 2A F1 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B034 ED 5A -  -  	    adc 	hl,de
   94 D1:B036 22 F1 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B03A EB -  -  -  	    ex 		de,hl
   96 D1:B03B 2A F5 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B03F ED 4B F9 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B044 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B049 ED 43 F9 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B04E 9F -  -  -  	    sbc 	a,a
  101 D1:B04F E6 C5 -  -  	    and 	%11000101
  102 D1:B051 AD -  -  -  	    xor 	l
  103 D1:B052 6F -  -  -  	    ld 		l,a
  104 D1:B053 22 F5 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B057 EB -  -  -  	    ex 		de,hl
  106 D1:B058 09 -  -  -  	    add 	hl,bc
  107 D1:B059 C9 -  -  -  	    ret		
  108 D1:B05A -  -  -  -  
  109 D1:B05A -  -  -  -  ; ***************************************************************************************
  110 D1:B05A -  -  -  -  ;
  111 D1:B05A -  -  -  -  ;									Changes and Updates
  112 D1:B05A -  -  -  -  ;
  113 D1:B05A -  -  -  -  ; ***************************************************************************************
  114 D1:B05A -  -  -  -  ;
  115 D1:B05A -  -  -  -  ;		Date			Notes
  116 D1:B05A -  -  -  -  ;		==== 			=====
  117 D1:B05A -  -  -  -  ;
  118 D1:B05A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:B05A -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B05A -  -  -  -  ; ***************************************************************************************
    2 D1:B05A -  -  -  -  ; ***************************************************************************************
    3 D1:B05A -  -  -  -  ;
    4 D1:B05A -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B05A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B05A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B05A -  -  -  -  ;		Reviewed :	No
    8 D1:B05A -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B05A -  -  -  -  ;
   10 D1:B05A -  -  -  -  ; ***************************************************************************************
   11 D1:B05A -  -  -  -  ; ***************************************************************************************
   12 D1:B05A -  -  -  -  
   13 D1:B05A -  -  -  -  ; ***************************************************************************************
   14 D1:B05A -  -  -  -  ;
   15 D1:B05A -  -  -  -  ;								sgn unary function
   16 D1:B05A -  -  -  -  ;
   17 D1:B05A -  -  -  -  ; ***************************************************************************************
   18 D1:B05A -  -  -  -  
   19 D1:B05A -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B05A CD D0 AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B05E CD 9B B6 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B062 CA CE AC D1 		jp 		z,UnaryInt32False
   23 D1:B066 D9 -  -  -  		exx
   24 D1:B067 CB 7C -  -  		bit 	7,h
   25 D1:B069 D9 -  -  -  		exx
   26 D1:B06A C2 CA AC D1 		jp 		nz,UnaryInt32True
   27 D1:B06E 3E 01 -  -  		ld 		a,1
   28 D1:B070 C3 1B AE D1 		jp 		Return8BitConstant
   29 D1:B074 -  -  -  -  
   30 D1:B074 -  -  -  -  ; ***************************************************************************************
   31 D1:B074 -  -  -  -  ;
   32 D1:B074 -  -  -  -  ;									Changes and Updates
   33 D1:B074 -  -  -  -  ;
   34 D1:B074 -  -  -  -  ; ***************************************************************************************
   35 D1:B074 -  -  -  -  ;
   36 D1:B074 -  -  -  -  ;		Date			Notes
   37 D1:B074 -  -  -  -  ;		==== 			=====
   38 D1:B074 -  -  -  -  ;
   39 D1:B074 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B074 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B074 -  -  -  -  ; ***************************************************************************************
    2 D1:B074 -  -  -  -  ; ***************************************************************************************
    3 D1:B074 -  -  -  -  ;
    4 D1:B074 -  -  -  -  ;		Name : 		simple.asm
    5 D1:B074 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B074 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B074 -  -  -  -  ;		Reviewed :	No
    8 D1:B074 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B074 -  -  -  -  ;
   10 D1:B074 -  -  -  -  ; ***************************************************************************************
   11 D1:B074 -  -  -  -  ; ***************************************************************************************
   12 D1:B074 -  -  -  -  
   13 D1:B074 -  -  -  -  ; ***************************************************************************************
   14 D1:B074 -  -  -  -  ;
   15 D1:B074 -  -  -  -  ;								( unary function (think about it)
   16 D1:B074 -  -  -  -  ;
   17 D1:B074 -  -  -  -  ; ***************************************************************************************
   18 D1:B074 -  -  -  -  
   19 D1:B074 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B074 CD 77 AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B078 C3 8D AB D1 		jp  	CheckRightBracket
   22 D1:B07C -  -  -  -  
   23 D1:B07C -  -  -  -  ; ***************************************************************************************
   24 D1:B07C -  -  -  -  ;
   25 D1:B07C -  -  -  -  ;									Handle &x
   26 D1:B07C -  -  -  -  ;
   27 D1:B07C -  -  -  -  ; ***************************************************************************************
   28 D1:B07C -  -  -  -  
   29 D1:B07C -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B07C DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B07F E6 C0 -  -  		and 		$C0
   32 D1:B081 FE 40 -  -  		cp 			$40
   33 D1:B083 C2 2D AC D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B087 C3 85 AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B08B -  -  -  -  
   36 D1:B08B -  -  -  -  ; ***************************************************************************************
   37 D1:B08B -  -  -  -  ;
   38 D1:B08B -  -  -  -  ;									Changes and Updates
   39 D1:B08B -  -  -  -  ;
   40 D1:B08B -  -  -  -  ; ***************************************************************************************
   41 D1:B08B -  -  -  -  ;
   42 D1:B08B -  -  -  -  ;		Date			Notes
   43 D1:B08B -  -  -  -  ;		==== 			=====
   44 D1:B08B -  -  -  -  ;
   45 D1:B08B -  -  -  -  ; ***************************************************************************************
   46 D1:B08B -  -  -  -  		
Listing for file "_build.asm"
   44 D1:B08B -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B08B -  -  -  -  ; ***************************************************************************************
    2 D1:B08B -  -  -  -  ; ***************************************************************************************
    3 D1:B08B -  -  -  -  ;
    4 D1:B08B -  -  -  -  ;		Name : 		str.asm
    5 D1:B08B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B08B -  -  -  -  ;		Reviewed :	No
    8 D1:B08B -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B08B -  -  -  -  ;
   10 D1:B08B -  -  -  -  ; ***************************************************************************************
   11 D1:B08B -  -  -  -  ; ***************************************************************************************
   12 D1:B08B -  -  -  -  
   13 D1:B08B -  -  -  -  ; ***************************************************************************************
   14 D1:B08B -  -  -  -  ;
   15 D1:B08B -  -  -  -  ;								Str$() unary function
   16 D1:B08B -  -  -  -  ;
   17 D1:B08B -  -  -  -  ; ***************************************************************************************
   18 D1:B08B -  -  -  -  
   19 D1:B08B -  -  -  -  Unary_Str:	;; [str]
   20 D1:B08B CD 9B AB D1 		call 	CheckDollar
   21 D1:B08F DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B092 EE AC -  -  		xor		KWD_TILDE
   23 D1:B094 F5 -  -  -  		push 	af
   24 D1:B095 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B097 DD 23 -  -  		inc 	ix
   26 D1:B099 -  -  -  -  _USNotHex:		
   27 D1:B099 CD D0 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B09D 01 09 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B0A1 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B0A2 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B0A4 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B0A6 3E 10 -  -  		ld 		a,16
   33 D1:B0A8 -  -  -  -  _USNotHex2:		
   34 D1:B0A8 CD E3 B6 D1 		call 	Int32ToString 				
   35 D1:B0AC 21 09 A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B0B0 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B0B2 C9 -  -  -  		ret
   38 D1:B0B3 -  -  -  -  
   39 D1:B0B3 -  -  -  -  ; ***************************************************************************************
   40 D1:B0B3 -  -  -  -  ;
   41 D1:B0B3 -  -  -  -  ;									Changes and Updates
   42 D1:B0B3 -  -  -  -  ;
   43 D1:B0B3 -  -  -  -  ; ***************************************************************************************
   44 D1:B0B3 -  -  -  -  ;
   45 D1:B0B3 -  -  -  -  ;		Date			Notes
   46 D1:B0B3 -  -  -  -  ;		==== 			=====
   47 D1:B0B3 -  -  -  -  ;
   48 D1:B0B3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:B0B3 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B0B3 -  -  -  -  ; ***************************************************************************************
    2 D1:B0B3 -  -  -  -  ; ***************************************************************************************
    3 D1:B0B3 -  -  -  -  ;
    4 D1:B0B3 -  -  -  -  ;		Name : 		time.asm
    5 D1:B0B3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0B3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0B3 -  -  -  -  ;		Reviewed :	No
    8 D1:B0B3 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B0B3 -  -  -  -  ;
   10 D1:B0B3 -  -  -  -  ; ***************************************************************************************
   11 D1:B0B3 -  -  -  -  ; ***************************************************************************************
   12 D1:B0B3 -  -  -  -  
   13 D1:B0B3 -  -  -  -  ; ***************************************************************************************
   14 D1:B0B3 -  -  -  -  ;
   15 D1:B0B3 -  -  -  -  ;							Get system time in ms
   16 D1:B0B3 -  -  -  -  ;
   17 D1:B0B3 -  -  -  -  ; ***************************************************************************************
   18 D1:B0B3 -  -  -  -  
   19 D1:B0B3 -  -  -  -  Unary_Time:	;; [time]
   20 D1:B0B3 CD A6 B7 D1 			call 	SYSGetTimer
   21 D1:B0B7 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B0B9 C9 -  -  -  			ret
   23 D1:B0BA -  -  -  -  
   24 D1:B0BA -  -  -  -  ; ***************************************************************************************
   25 D1:B0BA -  -  -  -  ;
   26 D1:B0BA -  -  -  -  ;									Changes and Updates
   27 D1:B0BA -  -  -  -  ;
   28 D1:B0BA -  -  -  -  ; ***************************************************************************************
   29 D1:B0BA -  -  -  -  ;
   30 D1:B0BA -  -  -  -  ;		Date			Notes
   31 D1:B0BA -  -  -  -  ;		==== 			=====
   32 D1:B0BA -  -  -  -  ;
   33 D1:B0BA -  -  -  -  ; ***************************************************************************************
   34 D1:B0BA -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B0BA -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B0BA -  -  -  -  ; ***************************************************************************************
    2 D1:B0BA -  -  -  -  ; ***************************************************************************************
    3 D1:B0BA -  -  -  -  ;
    4 D1:B0BA -  -  -  -  ;		Name : 		top.asm
    5 D1:B0BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0BA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0BA -  -  -  -  ;		Reviewed :	No
    8 D1:B0BA -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B0BA -  -  -  -  ;
   10 D1:B0BA -  -  -  -  ; ***************************************************************************************
   11 D1:B0BA -  -  -  -  ; ***************************************************************************************
   12 D1:B0BA -  -  -  -  
   13 D1:B0BA -  -  -  -  ; ***************************************************************************************
   14 D1:B0BA -  -  -  -  ;
   15 D1:B0BA -  -  -  -  ;							page unary function (no bracket)
   16 D1:B0BA -  -  -  -  ;
   17 D1:B0BA -  -  -  -  ; ***************************************************************************************
   18 D1:B0BA -  -  -  -  
   19 D1:B0BA -  -  -  -  Unary_Top:	;; [top]
   20 D1:B0BA 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B0BE D9 -  -  -  			exx
   22 D1:B0BF 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B0C3 D9 -  -  -  			exx
   24 D1:B0C4 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B0C6 C9 -  -  -  			ret
   26 D1:B0C7 -  -  -  -  
   27 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   28 D1:B0C7 -  -  -  -  ;
   29 D1:B0C7 -  -  -  -  ;									Changes and Updates
   30 D1:B0C7 -  -  -  -  ;
   31 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   32 D1:B0C7 -  -  -  -  ;
   33 D1:B0C7 -  -  -  -  ;		Date			Notes
   34 D1:B0C7 -  -  -  -  ;		==== 			=====
   35 D1:B0C7 -  -  -  -  ;
   36 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   37 D1:B0C7 -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B0C7 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B0C7 -  -  -  -  ; ***************************************************************************************
    2 D1:B0C7 -  -  -  -  ; ***************************************************************************************
    3 D1:B0C7 -  -  -  -  ;
    4 D1:B0C7 -  -  -  -  ;		Name : 		val.asm
    5 D1:B0C7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0C7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0C7 -  -  -  -  ;		Reviewed :	No
    8 D1:B0C7 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B0C7 -  -  -  -  ;
   10 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   11 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   12 D1:B0C7 -  -  -  -  
   13 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   14 D1:B0C7 -  -  -  -  ;
   15 D1:B0C7 -  -  -  -  ;								val( unary function
   16 D1:B0C7 -  -  -  -  ;
   17 D1:B0C7 -  -  -  -  ; ***************************************************************************************
   18 D1:B0C7 -  -  -  -  
   19 D1:B0C7 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B0C7 CD DF AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B0CB E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B0CC C1 -  -  -  		pop 	bc
   23 D1:B0CD 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B0CF CD C1 B5 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B0D3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B0D5 C8 -  -  -  		ret		z 							; okay
   27 D1:B0D6 3E 03 C3 C3 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B0DC -  -  -  -  
   29 D1:B0DC -  -  -  -  ; ***************************************************************************************
   30 D1:B0DC -  -  -  -  ;
   31 D1:B0DC -  -  -  -  ;									Changes and Updates
   32 D1:B0DC -  -  -  -  ;
   33 D1:B0DC -  -  -  -  ; ***************************************************************************************
   34 D1:B0DC -  -  -  -  ;
   35 D1:B0DC -  -  -  -  ;		Date			Notes
   36 D1:B0DC -  -  -  -  ;		==== 			=====
   37 D1:B0DC -  -  -  -  ;
   38 D1:B0DC -  -  -  -  ; ***************************************************************************************
   39 D1:B0DC -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B0DC -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B0DC -  -  -  -  ; ***************************************************************************************
    2 D1:B0DC -  -  -  -  ; ***************************************************************************************
    3 D1:B0DC -  -  -  -  ;
    4 D1:B0DC -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B0DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0DC -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B0DC -  -  -  -  ;		Reviewed :	No
    8 D1:B0DC -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B0DC -  -  -  -  ;
   10 D1:B0DC -  -  -  -  ; ***************************************************************************************
   11 D1:B0DC -  -  -  -  ; ***************************************************************************************
   12 D1:B0DC -  -  -  -  
   13 D1:B0DC -  -  -  -  ; ***************************************************************************************
   14 D1:B0DC -  -  -  -  ;
   15 D1:B0DC -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B0DC -  -  -  -  ;
   17 D1:B0DC -  -  -  -  ; ***************************************************************************************
   18 D1:B0DC -  -  -  -  
   19 D1:B0DC -  -  -  -  AllocateBytes:
   20 D1:B0DC EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B0DD 21 00 00 00 		ld 		hl,$000000
   22 D1:B0E1 62 -  -  -  		ld 		h,d
   23 D1:B0E2 6B -  -  -  		ld 		l,e
   24 D1:B0E3 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   25 D1:B0E8 D5 -  -  -  		push 	de 							; save on stack
   26 D1:B0E9 19 -  -  -  		add 	hl,de 						; HL is the new highest
   27 D1:B0EA 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   28 D1:B0EE EB -  -  -  		ex 		de,hl 						; put in DE
   29 D1:B0EF 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   30 D1:B0F3 AF -  -  -  		xor 	a
   31 D1:B0F4 ED 52 -  -  		sbc 	hl,de
   32 D1:B0F6 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   33 D1:B0F7 D0 -  -  -  		ret 	nc 							; return if high >= low
   34 D1:B0F8 3E 07 C3 C3 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   35 D1:B0FE -  -  -  -  
   36 D1:B0FE -  -  -  -  ; ***************************************************************************************
   37 D1:B0FE -  -  -  -  ;
   38 D1:B0FE -  -  -  -  ;									Changes and Updates
   39 D1:B0FE -  -  -  -  ;
   40 D1:B0FE -  -  -  -  ; ***************************************************************************************
   41 D1:B0FE -  -  -  -  ;
   42 D1:B0FE -  -  -  -  ;		Date			Notes
   43 D1:B0FE -  -  -  -  ;		==== 			=====
   44 D1:B0FE -  -  -  -  ;
   45 D1:B0FE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B0FE -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B0FE -  -  -  -  ; ***************************************************************************************
    2 D1:B0FE -  -  -  -  ; ***************************************************************************************
    3 D1:B0FE -  -  -  -  ;
    4 D1:B0FE -  -  -  -  ;		Name : 		clear.asm
    5 D1:B0FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0FE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0FE -  -  -  -  ;		Reviewed :	No
    8 D1:B0FE -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B0FE -  -  -  -  ;
   10 D1:B0FE -  -  -  -  ; ***************************************************************************************
   11 D1:B0FE -  -  -  -  ; ***************************************************************************************
   12 D1:B0FE -  -  -  -  
   13 D1:B0FE -  -  -  -  ; ***************************************************************************************
   14 D1:B0FE -  -  -  -  ;
   15 D1:B0FE -  -  -  -  ;										CLEAR command
   16 D1:B0FE -  -  -  -  ;
   17 D1:B0FE -  -  -  -  ; ***************************************************************************************
   18 D1:B0FE -  -  -  -  
   19 D1:B0FE -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B0FE -  -  -  -  		;
   21 D1:B0FE -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B0FE -  -  -  -  		;
   23 D1:B0FE 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B102 -  -  -  -  _CCFindLow:
   25 D1:B102 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B106 5E -  -  -  		ld 		e,(hl)		
   27 D1:B107 19 -  -  -  		add 	hl,de
   28 D1:B108 7B -  -  -  		ld 		a,e
   29 D1:B109 B7 -  -  -  		or 		a
   30 D1:B10A 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B10C 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B10D 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B111 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B112 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B116 -  -  -  -  		;
   36 D1:B116 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B116 -  -  -  -  		;
   38 D1:B116 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B11A -  -  -  -  		;
   40 D1:B11A 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B11C 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B120 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B124 19 -  -  -  		add 	hl,de
   44 D1:B125 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B127 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B12B -  -  -  -  		;
   47 D1:B12B 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B12F 19 -  -  -  		add 	hl,de
   49 D1:B130 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B134 -  -  -  -  		;
   51 D1:B134 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 D1:B134 -  -  -  -  		;
   53 D1:B134 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 D1:B138 -  -  -  -  _CCFClearHT:
   55 D1:B138 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 D1:B139 36 00 -  -  		ld 		(hl),0
   57 D1:B13B 1B -  -  -  		dec 	de
   58 D1:B13C 7A -  -  -  		ld 		a,d
   59 D1:B13D B3 -  -  -  		or 		e
   60 D1:B13E 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 D1:B140 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   62 D1:B144 -  -  -  -  		;
   63 D1:B144 -  -  -  -  		; 		Save highest byte that can be allocate
   64 D1:B144 -  -  -  -  		;
   65 D1:B144 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   66 D1:B148 -  -  -  -  		;
   67 D1:B148 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 D1:B148 -  -  -  -  		;
   69 D1:B148 CD 0A B0 D1 		call 	UnaryRandomInitialise
   70 D1:B14C C9 -  -  -  		ret
   71 D1:B14D -  -  -  -  
   72 D1:B14D -  -  -  -  ; ***************************************************************************************
   73 D1:B14D -  -  -  -  ;
   74 D1:B14D -  -  -  -  ;									Changes and Updates
   75 D1:B14D -  -  -  -  ;
   76 D1:B14D -  -  -  -  ; ***************************************************************************************
   77 D1:B14D -  -  -  -  ;
   78 D1:B14D -  -  -  -  ;		Date			Notes
   79 D1:B14D -  -  -  -  ;		==== 			=====
   80 D1:B14D -  -  -  -  ;
   81 D1:B14D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B14D -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B14D -  -  -  -  ; ***************************************************************************************
    2 D1:B14D -  -  -  -  ; ***************************************************************************************
    3 D1:B14D -  -  -  -  ;
    4 D1:B14D -  -  -  -  ;		Name : 		instance.asm
    5 D1:B14D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B14D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B14D -  -  -  -  ;		Reviewed :	No
    8 D1:B14D -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B14D -  -  -  -  ;
   10 D1:B14D -  -  -  -  ; ***************************************************************************************
   11 D1:B14D -  -  -  -  ; ***************************************************************************************
   12 D1:B14D -  -  -  -  
   13 D1:B14D -  -  -  -  ; ***************************************************************************************
   14 D1:B14D -  -  -  -  ;
   15 D1:B14D -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B14D -  -  -  -  ;
   17 D1:B14D -  -  -  -  ; ***************************************************************************************
   18 D1:B14D -  -  -  -  
   19 D1:B14D -  -  -  -  SetCurrentInstance:
   20 D1:B14D ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B152 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B156 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B15B -  -  -  -  
   24 D1:B15B C9 -  -  -  		ret
   25 D1:B15C -  -  -  -  
   26 D1:B15C -  -  -  -  
   27 D1:B15C -  -  -  -  ; ***************************************************************************************
   28 D1:B15C -  -  -  -  ;
   29 D1:B15C -  -  -  -  ;									Changes and Updates
   30 D1:B15C -  -  -  -  ;
   31 D1:B15C -  -  -  -  ; ***************************************************************************************
   32 D1:B15C -  -  -  -  ;
   33 D1:B15C -  -  -  -  ;		Date			Notes
   34 D1:B15C -  -  -  -  ;		==== 			=====
   35 D1:B15C -  -  -  -  ;
   36 D1:B15C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B15C -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B15C -  -  -  -  ; ***************************************************************************************
    2 D1:B15C -  -  -  -  ; ***************************************************************************************
    3 D1:B15C -  -  -  -  ;
    4 D1:B15C -  -  -  -  ;		Name : 		new.asm
    5 D1:B15C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B15C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B15C -  -  -  -  ;		Reviewed :	No
    8 D1:B15C -  -  -  -  ;		Purpose :	New command.
    9 D1:B15C -  -  -  -  ;
   10 D1:B15C -  -  -  -  ; ***************************************************************************************
   11 D1:B15C -  -  -  -  ; ***************************************************************************************
   12 D1:B15C -  -  -  -  
   13 D1:B15C -  -  -  -  ; ***************************************************************************************
   14 D1:B15C -  -  -  -  ;
   15 D1:B15C -  -  -  -  ;										NEW command
   16 D1:B15C -  -  -  -  ;
   17 D1:B15C -  -  -  -  ; ***************************************************************************************
   18 D1:B15C -  -  -  -  
   19 D1:B15C -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B15C 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B160 36 00 -  -  		ld 		(hl),0
   22 D1:B162 CD FE B0 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B166 3E 00 C3 C3 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B16C -  -  -  -  
   25 D1:B16C -  -  -  -  ; ***************************************************************************************
   26 D1:B16C -  -  -  -  ;
   27 D1:B16C -  -  -  -  ;									Changes and Updates
   28 D1:B16C -  -  -  -  ;
   29 D1:B16C -  -  -  -  ; ***************************************************************************************
   30 D1:B16C -  -  -  -  ;
   31 D1:B16C -  -  -  -  ;		Date			Notes
   32 D1:B16C -  -  -  -  ;		==== 			=====
   33 D1:B16C -  -  -  -  ;
   34 D1:B16C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B16C -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B16C -  -  -  -  ; ***************************************************************************************
    2 D1:B16C -  -  -  -  ; ***************************************************************************************
    3 D1:B16C -  -  -  -  ;
    4 D1:B16C -  -  -  -  ;		Name : 		utility.asm
    5 D1:B16C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B16C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B16C -  -  -  -  ;		Reviewed :	No
    8 D1:B16C -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B16C -  -  -  -  ;
   10 D1:B16C -  -  -  -  ; ***************************************************************************************
   11 D1:B16C -  -  -  -  ; ***************************************************************************************
   12 D1:B16C -  -  -  -  
   13 D1:B16C -  -  -  -  ; ***************************************************************************************
   14 D1:B16C -  -  -  -  ;
   15 D1:B16C -  -  -  -  ;							Print ASCII string at HL
   16 D1:B16C -  -  -  -  ;
   17 D1:B16C -  -  -  -  ; ***************************************************************************************
   18 D1:B16C -  -  -  -  
   19 D1:B16C -  -  -  -  PrintStringAtHL:
   20 D1:B16C 7E -  -  -  		ld 		a,(hl)
   21 D1:B16D FE 20 -  -  		cp 		$20		
   22 D1:B16F D8 -  -  -  		ret 	c
   23 D1:B170 CD 56 B7 D1 		call 	SYSPrintChar
   24 D1:B174 23 -  -  -  		inc 	hl
   25 D1:B175 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B177 -  -  -  -  
   27 D1:B177 -  -  -  -  ; ***************************************************************************************
   28 D1:B177 -  -  -  -  ;
   29 D1:B177 -  -  -  -  ;									Changes and Updates
   30 D1:B177 -  -  -  -  ;
   31 D1:B177 -  -  -  -  ; ***************************************************************************************
   32 D1:B177 -  -  -  -  ;
   33 D1:B177 -  -  -  -  ;		Date			Notes
   34 D1:B177 -  -  -  -  ;		==== 			=====
   35 D1:B177 -  -  -  -  ;
   36 D1:B177 -  -  -  -  ; ***************************************************************************************
   37 D1:B177 -  -  -  -  		
Listing for file "_build.asm"
   53 D1:B177 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B177 -  -  -  -  ; ***************************************************************************************
    2 D1:B177 -  -  -  -  ; ***************************************************************************************
    3 D1:B177 -  -  -  -  ;
    4 D1:B177 -  -  -  -  ;		Name : 		create.asm
    5 D1:B177 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B177 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B177 -  -  -  -  ;		Reviewed :	No
    8 D1:B177 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B177 -  -  -  -  ;
   10 D1:B177 -  -  -  -  ; ***************************************************************************************
   11 D1:B177 -  -  -  -  ; ***************************************************************************************
   12 D1:B177 -  -  -  -  
   13 D1:B177 -  -  -  -  ; ***************************************************************************************
   14 D1:B177 -  -  -  -  ;
   15 D1:B177 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B177 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B177 -  -  -  -  ;
   18 D1:B177 -  -  -  -  ; ***************************************************************************************
   19 D1:B177 -  -  -  -  
   20 D1:B177 -  -  -  -  VariableCreate:		
   21 D1:B177 -  -  -  -  		;
   22 D1:B177 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B177 -  -  -  -  		;
   24 D1:B177 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B17B 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B17C E5 -  -  -  		push 	hl 							; save count.
   27 D1:B17D CD DC B0 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B181 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B182 -  -  -  -  		;
   30 D1:B182 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B182 -  -  -  -  		;
   32 D1:B182 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B183 -  -  -  -  _VCClear:
   34 D1:B183 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B185 23 -  -  -  		inc 	hl
   36 D1:B186 0B -  -  -  		dec 	bc
   37 D1:B187 78 -  -  -  		ld		a,b
   38 D1:B188 B1 -  -  -  		or 		c
   39 D1:B189 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B18B E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B18C -  -  -  -  		;
   42 D1:B18C -  -  -  -  		;		Now start to create the data.
   43 D1:B18C -  -  -  -  		;
   44 D1:B18C E5 -  -  -  		push 	hl 							; save start
   45 D1:B18D -  -  -  -  		;
   46 D1:B18D -  -  -  -  		;		Write hash to +0
   47 D1:B18D -  -  -  -  		;
   48 D1:B18D 3A 03 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B191 77 -  -  -  		ld 		(hl),a
   50 D1:B192 23 -  -  -  		inc 	hl
   51 D1:B193 -  -  -  -  		;
   52 D1:B193 -  -  -  -  		;		Write list head to +1
   53 D1:B193 -  -  -  -  		;
   54 D1:B193 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B194 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B198 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B19A EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B19B E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B19C ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B1A2 -  -  -  -  		;
   61 D1:B1A2 -  -  -  -  		;		Write variable name to +5
   62 D1:B1A2 -  -  -  -  		;
   63 D1:B1A2 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B1A7 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B1AD -  -  -  -  		;
   66 D1:B1AD D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B1AE 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B1B2 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B1B8 -  -  -  -  		;
   70 D1:B1B8 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B1B9 C9 -  -  -  		ret
   72 D1:B1BA -  -  -  -  
   73 D1:B1BA -  -  -  -  ; ***************************************************************************************
   74 D1:B1BA -  -  -  -  ;
   75 D1:B1BA -  -  -  -  ;									Changes and Updates
   76 D1:B1BA -  -  -  -  ;
   77 D1:B1BA -  -  -  -  ; ***************************************************************************************
   78 D1:B1BA -  -  -  -  ;
   79 D1:B1BA -  -  -  -  ;		Date			Notes
   80 D1:B1BA -  -  -  -  ;		==== 			=====
   81 D1:B1BA -  -  -  -  ;
   82 D1:B1BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B1BA -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B1BA -  -  -  -  ; ***************************************************************************************
    2 D1:B1BA -  -  -  -  ; ***************************************************************************************
    3 D1:B1BA -  -  -  -  ;
    4 D1:B1BA -  -  -  -  ;		Name : 		find.asm
    5 D1:B1BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1BA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1BA -  -  -  -  ;		Reviewed :	No
    8 D1:B1BA -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B1BA -  -  -  -  ;
   10 D1:B1BA -  -  -  -  ; ***************************************************************************************
   11 D1:B1BA -  -  -  -  ; ***************************************************************************************
   12 D1:B1BA -  -  -  -  
   13 D1:B1BA -  -  -  -  ; ***************************************************************************************
   14 D1:B1BA -  -  -  -  ;
   15 D1:B1BA -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B1BA -  -  -  -  ; 		variable information at (IX)
   17 D1:B1BA -  -  -  -  ;
   18 D1:B1BA -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B1BA -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B1BA -  -  -  -  ;
   21 D1:B1BA -  -  -  -  ; ***************************************************************************************
   22 D1:B1BA -  -  -  -  
   23 D1:B1BA -  -  -  -  FindVariable:
   24 D1:B1BA DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B1BD FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B1BF D2 2D AC D1 		jp 		nc,SyntaxError 		
   27 D1:B1C3 -  -  -  -  
   28 D1:B1C3 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B1C6 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B1C8 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B1CA FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B1CC 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B1CE -  -  -  -  		;
   34 D1:B1CE -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B1CE -  -  -  -  		;
   36 D1:B1CE 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B1D2 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B1D5 87 -  -  -  		add 	a,a 						; x4
   39 D1:B1D6 87 -  -  -  		add 	a,a
   40 D1:B1D7 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B1D8 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B1D9 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B1DB CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B1DD DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B1DF AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B1E0 C9 -  -  -  		ret
   47 D1:B1E1 -  -  -  -  		;
   48 D1:B1E1 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B1E1 -  -  -  -  		;
   50 D1:B1E1 -  -  -  -  _FVNotSimple:
   51 D1:B1E1 CD 15 B2 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B1E5 CD 51 B2 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B1E9 38 0B -  -  		jr 		c,_FVNotFound  				
   54 D1:B1EB -  -  -  -  		;
   55 D1:B1EB -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B1EB -  -  -  -  		;
   57 D1:B1EB -  -  -  -  _FVExitReference:		
   58 D1:B1EB 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B1EF 19 -  -  -  		add 	hl,de 
   60 D1:B1F0 -  -  -  -  		;
   61 D1:B1F0 -  -  -  -  		; 		TODO: Array check code.
   62 D1:B1F0 -  -  -  -  		;
   63 D1:B1F0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 D1:B1F2 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 D1:B1F4 AF -  -  -  		xor 	a 							; clear carry and return
   66 D1:B1F5 C9 -  -  -  		ret
   67 D1:B1F6 -  -  -  -  		;
   68 D1:B1F6 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 D1:B1F6 -  -  -  -  		;
   70 D1:B1F6 -  -  -  -  _FVNotFound:		
   71 D1:B1F6 3A FD A8 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 D1:B1FA B7 -  -  -  		or 		a
   73 D1:B1FB 28 11 -  -  		jr 		z,_FVFail
   74 D1:B1FD DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 D1:B200 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 D1:B202 28 0A -  -  		jr 		z,_FVFail
   77 D1:B204 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 D1:B208 CD 77 B1 D1 		call 	VariableCreate 				; create a new variable.
   79 D1:B20C 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 D1:B20E -  -  -  -  
   81 D1:B20E -  -  -  -  _FVFail:
   82 D1:B20E DD 2A FF A8 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 D1:B213 37 -  -  -  		scf
   84 D1:B214 C9 -  -  -  		ret
   85 D1:B215 -  -  -  -  
   86 D1:B215 -  -  -  -  ; ***************************************************************************************
   87 D1:B215 -  -  -  -  ;
   88 D1:B215 -  -  -  -  ;									Changes and Updates
   89 D1:B215 -  -  -  -  ;
   90 D1:B215 -  -  -  -  ; ***************************************************************************************
   91 D1:B215 -  -  -  -  ;
   92 D1:B215 -  -  -  -  ;		Date			Notes
   93 D1:B215 -  -  -  -  ;		==== 			=====
   94 D1:B215 -  -  -  -  ;
   95 D1:B215 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B215 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B215 -  -  -  -  ; ***************************************************************************************
    2 D1:B215 -  -  -  -  ; ***************************************************************************************
    3 D1:B215 -  -  -  -  ;
    4 D1:B215 -  -  -  -  ;		Name : 		info.asm
    5 D1:B215 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B215 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B215 -  -  -  -  ;		Reviewed :	No
    8 D1:B215 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B215 -  -  -  -  ;
   10 D1:B215 -  -  -  -  ; ***************************************************************************************
   11 D1:B215 -  -  -  -  ; ***************************************************************************************
   12 D1:B215 -  -  -  -  
   13 D1:B215 -  -  -  -  ; ***************************************************************************************
   14 D1:B215 -  -  -  -  ;
   15 D1:B215 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B215 -  -  -  -  ; 		after the identifier.
   17 D1:B215 -  -  -  -  ;
   18 D1:B215 -  -  -  -  ; ***************************************************************************************
   19 D1:B215 -  -  -  -  
   20 D1:B215 -  -  -  -  VariableInformation:
   21 D1:B215 DD 22 FF A8 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B21A -  -  -  -  		;
   23 D1:B21A -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B21A -  -  -  -  		;
   25 D1:B21A 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B21C -  -  -  -  _VICalculateHash:
   27 D1:B21C DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B21F FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B221 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B223 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B224 07 -  -  -  		rlca
   32 D1:B225 07 -  -  -  		rlca
   33 D1:B226 80 -  -  -  		add 	a,b
   34 D1:B227 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B228 DD 23 -  -  		inc 	ix 							; next character
   36 D1:B22A 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B22C -  -  -  -  		;
   38 D1:B22C -  -  -  -  _VIHashDone:
   39 D1:B22C 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B22D -  -  -  -  		;
   41 D1:B22D -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B22D -  -  -  -  		;
   43 D1:B22D 32 03 A9 D1 		ld 		(VarHash),a
   44 D1:B231 -  -  -  -  		;
   45 D1:B231 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B231 -  -  -  -  		;		
   47 D1:B231 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B233 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B237 6F -  -  -  		ld 		l,a
   50 D1:B238 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B239 29 -  -  -  		add 	hl,hl
   52 D1:B23A -  -  -  -  		;
   53 D1:B23A ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B23F 19 -  -  -  		add 	hl,de
   55 D1:B240 -  -  -  -  		;
   56 D1:B240 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B243 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B245 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B247 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B24B 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B24C -  -  -  -  _VINotArray:
   62 D1:B24C 22 05 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B250 C9 -  -  -  		ret
   64 D1:B251 -  -  -  -  
   65 D1:B251 -  -  -  -  ; ***************************************************************************************
   66 D1:B251 -  -  -  -  ;
   67 D1:B251 -  -  -  -  ;									Changes and Updates
   68 D1:B251 -  -  -  -  ;
   69 D1:B251 -  -  -  -  ; ***************************************************************************************
   70 D1:B251 -  -  -  -  ;
   71 D1:B251 -  -  -  -  ;		Date			Notes
   72 D1:B251 -  -  -  -  ;		==== 			=====
   73 D1:B251 -  -  -  -  ;
   74 D1:B251 -  -  -  -  ; ***************************************************************************************
   75 D1:B251 -  -  -  -  
Listing for file "_build.asm"
   56 D1:B251 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B251 -  -  -  -  ; ***************************************************************************************
    2 D1:B251 -  -  -  -  ; ***************************************************************************************
    3 D1:B251 -  -  -  -  ;
    4 D1:B251 -  -  -  -  ;		Name : 		search.asm
    5 D1:B251 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B251 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B251 -  -  -  -  ;		Reviewed :	No
    8 D1:B251 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B251 -  -  -  -  ;
   10 D1:B251 -  -  -  -  ; ***************************************************************************************
   11 D1:B251 -  -  -  -  ; ***************************************************************************************
   12 D1:B251 -  -  -  -  
   13 D1:B251 -  -  -  -  ; ***************************************************************************************
   14 D1:B251 -  -  -  -  ;
   15 D1:B251 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B251 -  -  -  -  ;		CS if failed.
   17 D1:B251 -  -  -  -  ;
   18 D1:B251 -  -  -  -  ; ***************************************************************************************
   19 D1:B251 -  -  -  -  
   20 D1:B251 -  -  -  -  VariableSearchList:
   21 D1:B251 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B255 -  -  -  -  		;
   23 D1:B255 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B255 -  -  -  -  		;		the address of the hash record
   25 D1:B255 -  -  -  -  		;
   26 D1:B255 -  -  -  -  _VSLLoop:
   27 D1:B255 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B257 -  -  -  -  		;
   29 D1:B257 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B258 AF -  -  -  		xor 	a
   31 D1:B259 ED 6A -  -  		adc 	hl,hl
   32 D1:B25B E1 -  -  -  		pop 	hl
   33 D1:B25C 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B25E 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B25F C8 -  -  -  		ret 	z
   36 D1:B260 -  -  -  -  _VSLRecord:
   37 D1:B260 -  -  -  -  		;
   38 D1:B260 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B260 -  -  -  -  		;
   40 D1:B260 3A 03 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B264 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B265 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B266 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B268 -  -  -  -  		;
   45 D1:B268 -  -  -  -  		;		Now check the name
   46 D1:B268 -  -  -  -  		;
   47 D1:B268 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B269 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B26A 23 -  -  -  		inc 	hl
   50 D1:B26B 23 -  -  -  		inc 	hl
   51 D1:B26C 23 -  -  -  		inc 	hl
   52 D1:B26D ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B26F ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B274 -  -  -  -  		;
   55 D1:B274 -  -  -  -  		;		Check individual characters
   56 D1:B274 -  -  -  -  		;
   57 D1:B274 -  -  -  -  _VSLCharacter:
   58 D1:B274 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B275 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B277 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B279 BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B27A 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B27B 13 -  -  -  		inc 	de
   64 D1:B27C 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B27E -  -  -  -  		;
   66 D1:B27E -  -  -  -  _VSLFailed:
   67 D1:B27E E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B27F 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B281 -  -  -  -  		;
   70 D1:B281 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B281 -  -  -  -  		;		
   72 D1:B281 -  -  -  -  _VSLEndIdentifier:
   73 D1:B281 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B282 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B284 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B286 -  -  -  -  		;
   77 D1:B286 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B287 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B288 AF -  -  -  		xor 	a 							; clear carry
   80 D1:B289 C9 -  -  -  		ret
   81 D1:B28A -  -  -  -  
   82 D1:B28A -  -  -  -  ; ***************************************************************************************
   83 D1:B28A -  -  -  -  ;
   84 D1:B28A -  -  -  -  ;									Changes and Updates
   85 D1:B28A -  -  -  -  ;
   86 D1:B28A -  -  -  -  ; ***************************************************************************************
   87 D1:B28A -  -  -  -  ;
   88 D1:B28A -  -  -  -  ;		Date			Notes
   89 D1:B28A -  -  -  -  ;		==== 			=====
   90 D1:B28A -  -  -  -  ;
   91 D1:B28A -  -  -  -  ; ***************************************************************************************
   92 D1:B28A -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B28A -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B28A -  -  -  -  ;
    2 D1:B28A -  -  -  -  ;	This file is automatically generated.
    3 D1:B28A -  -  -  -  ;
    4 D1:B28A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 D1:B2A0 -  -  -  -  PrecedenceTable:
    6 D1:B2A0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B2A1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B2A2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B2A3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B2A4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B2A5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B2A6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B2A7 04 -  -  -  	.db	4	; $008a -
   14 D1:B2A8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B2A9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B2AA 03 -  -  -  	.db	3	; $008d >
   17 D1:B2AB 03 -  -  -  	.db	3	; $008e <
   18 D1:B2AC 03 -  -  -  	.db	3	; $008f =
   19 D1:B2AD 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B2AE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B2AF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B2B0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B2B1 -  -  -  -  
Listing for file "_build.asm"
   58 D1:B2B1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B2B1 -  -  -  -  ;
    2 D1:B2B1 -  -  -  -  ;	This is automatically generated.
    3 D1:B2B1 -  -  -  -  ;
    4 D1:B2B1 -  -  -  -  ErrorIDTable:
    5 D1:B2B1 F5 B2 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B2B5 FB B2 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B2B9 0C B3 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B2BD 1A B3 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B2C1 24 B3 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B2C5 2E B3 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B2C9 48 B3 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B2CD 59 B3 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   13 D1:B2D1 67 B3 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   14 D1:B2D5 75 B3 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   15 D1:B2D9 7F B3 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   16 D1:B2DD 94 B3 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   17 D1:B2E1 AA B3 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   18 D1:B2E5 B8 B3 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   19 D1:B2E9 BD B3 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   20 D1:B2ED CA B3 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   21 D1:B2F1 DB B3 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   22 D1:B2F5 -  -  -  -  
   23 D1:B2F5 -  -  -  -  ErrText_warmstart:
   24 D1:B2F5 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   25 D1:B2FB -  -  -  -  ErrText_assert:
   26 D1:B2FB 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   27 D1:B30C -  -  -  -  ErrText_badtype:
   28 D1:B30C 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   29 D1:B31A -  -  -  -  ErrText_badvalue:
   30 D1:B31A 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   31 D1:B324 -  -  -  -  ErrText_dim:
   32 D1:B324 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   33 D1:B32E -  -  -  -  ErrText_disabled:
   34 D1:B32E 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   35 D1:B348 -  -  -  -  ErrText_divzero:
   36 D1:B348 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   37 D1:B359 -  -  -  -  ErrText_memory:
   38 D1:B359 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   39 D1:B367 -  -  -  -  ErrText_nocomma:
   40 D1:B367 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   41 D1:B375 -  -  -  -  ErrText_nodollar:
   42 D1:B375 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   43 D1:B37F -  -  -  -  ErrText_nolbracket:
   44 D1:B37F 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   45 D1:B394 -  -  -  -  ErrText_norbracket:
   46 D1:B394 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   47 D1:B3AA -  -  -  -  ErrText_notref:
   48 D1:B3AA 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   49 D1:B3B8 -  -  -  -  ErrText_stop:
   50 D1:B3B8 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   51 D1:B3BD -  -  -  -  ErrText_syntax:
   52 D1:B3BD 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   53 D1:B3CA -  -  -  -  ErrText_todo:
   54 D1:B3CA 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   55 D1:B3DB -  -  -  -  ErrText_unknownvar:
   56 D1:B3DB 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 D1:B3EC -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B3EC -  -  -  -  ;
    2 D1:B3EC -  -  -  -  ;	Vectors for set 0
    3 D1:B3EC -  -  -  -  ;
    4 D1:B3EC -  -  -  -  VectorsSet0:
    5 D1:B3EC 27 AA D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B3F0 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B3F4 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B3F8 A3 AC D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B3FC AC AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B400 4F AC D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B404 5D AC D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B408 6B AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B40C 5D AC D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B410 33 AC D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B414 41 AC D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B418 0A AD D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B41C 00 AD D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B420 EC AC D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B424 E2 AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B428 D8 AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B42C F6 AC D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B430 79 AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B434 87 AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B438 95 AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B43C 7C B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B440 74 B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B444 96 AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B448 C3 AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B44C 85 AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B450 5B AF D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B454 5A B0 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B458 8B B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B45C 71 AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B460 68 AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B464 A1 AF D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B468 B6 AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B46C B3 B0 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B470 BA B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B474 C7 B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B478 CA AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B47C CE AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B480 6C A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B484 6C A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B488 70 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B48C 6C A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B490 E9 AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B494 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa [
   48 D1:B498 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab ]
   49 D1:B49C A5 A8 D1 00 	addr(Unimplemented)              ; $00ac ~
   50 D1:B4A0 A5 A8 D1 00 	addr(Unimplemented)              ; $00ad repeat
   51 D1:B4A4 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae until
   52 D1:B4A8 A5 A8 D1 00 	addr(Unimplemented)              ; $00af if
   53 D1:B4AC 6C A9 D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:B4B0 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 else
   55 D1:B4B4 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 for
   56 D1:B4B8 6C A9 D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:B4BC A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 step
   58 D1:B4C0 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 next
   59 D1:B4C4 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 def
   60 D1:B4C8 A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 proc
   61 D1:B4CC A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 endproc
   62 D1:B4D0 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 gosub
   63 D1:B4D4 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba return
   64 D1:B4D8 A5 A8 D1 00 	addr(Unimplemented)              ; $00bb goto
   65 D1:B4DC A5 A8 D1 00 	addr(Unimplemented)              ; $00bc local
   66 D1:B4E0 71 A9 D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:B4E4 E9 AA D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:B4E8 3E AA D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:B4EC A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 vdu
   70 D1:B4F0 92 AA D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:B4F4 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:B4F8 A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:B4FC A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 list
   74 D1:B500 5C B1 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:B504 06 AB D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:B508 A5 A8 D1 00 	addr(Unimplemented)              ; $00c7 read
   77 D1:B50C A5 A8 D1 00 	addr(Unimplemented)              ; $00c8 data
   78 D1:B510 A5 A8 D1 00 	addr(Unimplemented)              ; $00c9 restore
   79 D1:B514 5B A9 D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:B518 FE B0 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:B51C 21 AA D1 00 	addr(Command_END)                ; $00cc end
   82 D1:B520 79 AB D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:B524 -  -  -  -  ;
   84 D1:B524 -  -  -  -  ;	Vectors for set 1
   85 D1:B524 -  -  -  -  ;
   86 D1:B524 -  -  -  -  VectorsSet1:
   87 D1:B524 -  -  -  -  ;
   88 D1:B524 -  -  -  -  ;	Vectors for set 2
   89 D1:B524 -  -  -  -  ;
   90 D1:B524 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 D1:B524 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B524 -  -  -  -  ; ***************************************************************************************
    2 D1:B524 -  -  -  -  ; ***************************************************************************************
    3 D1:B524 -  -  -  -  ;
    4 D1:B524 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B524 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B524 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B524 -  -  -  -  ;		Reviewed :	No
    8 D1:B524 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B524 -  -  -  -  ;
   10 D1:B524 -  -  -  -  ; ***************************************************************************************
   11 D1:B524 -  -  -  -  ; ***************************************************************************************
   12 D1:B524 -  -  -  -  
   13 D1:B524 -  -  -  -  ; ***************************************************************************************
   14 D1:B524 -  -  -  -  ;
   15 D1:B524 -  -  -  -  ;								Unsigned integer divide
   16 D1:B524 -  -  -  -  ;
   17 D1:B524 -  -  -  -  ; ***************************************************************************************
   18 D1:B524 -  -  -  -  
   19 D1:B524 -  -  -  -  Int32UDivide:
   20 D1:B524 37 -  -  -  		scf
   21 D1:B525 C3 69 B5 D1 		jp 		_I32UnsignedDivide		
   22 D1:B529 -  -  -  -  
   23 D1:B529 -  -  -  -  ; ***************************************************************************************
   24 D1:B529 -  -  -  -  ;
   25 D1:B529 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B529 -  -  -  -  ;
   27 D1:B529 -  -  -  -  ; ***************************************************************************************
   28 D1:B529 -  -  -  -  
   29 D1:B529 -  -  -  -  Int32SDivide:
   30 D1:B529 37 -  -  -  		scf
   31 D1:B52A 18 01 -  -  		jr 		_I32SDivide
   32 D1:B52C -  -  -  -  Int32Modulus:
   33 D1:B52C AF -  -  -  		xor 	a
   34 D1:B52D -  -  -  -  _I32SDivide:
   35 D1:B52D 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B52E F5 -  -  -  		push 	af
   37 D1:B52F 08 -  -  -  		ex 		af,af'
   38 D1:B530 -  -  -  -  
   39 D1:B530 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B531 D9 -  -  -  		exx
   41 D1:B532 D5 -  -  -  		push 	de
   42 D1:B533 D9 -  -  -  		exx
   43 D1:B534 -  -  -  -  
   44 D1:B534 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B535 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B536 CD 56 B5 D1 		call 	_I32CheckHLSignSwap
   47 D1:B53A CD 56 B5 D1 		call 	_I32CheckHLSignSwap
   48 D1:B53E 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B53F F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B540 F5 -  -  -  		push 	af
   51 D1:B541 CD 69 B5 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B545 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B546 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B548 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B549 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B54B C4 CC B6 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B54F -  -  -  -  _I32SDExit:
   58 D1:B54F D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B550 D1 -  -  -  		pop 	de
   60 D1:B551 D9 -  -  -  		exx
   61 D1:B552 D1 -  -  -  		pop 	de
   62 D1:B553 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B554 08 -  -  -  		ex 		af,af'
   64 D1:B555 C9 -  -  -  		ret
   65 D1:B556 -  -  -  -  
   66 D1:B556 -  -  -  -  
   67 D1:B556 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B556 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B557 CB 7C -  -  		bit 	7,h
   70 D1:B559 D9 -  -  -  		exx
   71 D1:B55A 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B55C -  -  -  -  		;
   73 D1:B55C C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B55E F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B55F CD CC B6 D1 		call 	Int32Negate 				
   76 D1:B563 F1 -  -  -  		pop 	af
   77 D1:B564 -  -  -  -  _I32CHSPositive:
   78 D1:B564 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B565 EB -  -  -  		ex 		de,hl
   80 D1:B566 D9 -  -  -  		exx		
   81 D1:B567 EB -  -  -  		ex 		de,hl
   82 D1:B568 C9 -  -  -  		ret
   83 D1:B569 -  -  -  -  
   84 D1:B569 -  -  -  -  ; ***************************************************************************************
   85 D1:B569 -  -  -  -  ;
   86 D1:B569 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B569 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B569 -  -  -  -  ;
   89 D1:B569 -  -  -  -  ; ***************************************************************************************
   90 D1:B569 -  -  -  -  
   91 D1:B569 -  -  -  -  _I32UnsignedDivide:
   92 D1:B569 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B56A D5 -  -  -  		push 	de
   94 D1:B56B D9 -  -  -  		exx
   95 D1:B56C C5 -  -  -  		push 	bc
   96 D1:B56D D5 -  -  -  		push 	de 							
   97 D1:B56E D9 -  -  -  		exx
   98 D1:B56F -  -  -  -  
   99 D1:B56F F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B570 -  -  -  -  
  101 D1:B570 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B571 B3 -  -  -  		or 		e
  103 D1:B572 D9 -  -  -  		exx
  104 D1:B573 B2 -  -  -  		or 		d
  105 D1:B574 B3 -  -  -  		or 		e
  106 D1:B575 D9 -  -  -  		exx
  107 D1:B576 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B57A -  -  -  -  
  109 D1:B57A -  -  -  -  
  110 D1:B57A 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B57B 4D -  -  -  		ld		c,l
  112 D1:B57C 21 00 00 00 		ld 		hl,$0000
  113 D1:B580 D9 -  -  -  		exx
  114 D1:B581 44 -  -  -  		ld 		b,h
  115 D1:B582 4D -  -  -  		ld		c,l
  116 D1:B583 21 00 00 00 		ld 		hl,$0000
  117 D1:B587 D9 -  -  -  		exx
  118 D1:B588 -  -  -  -  
  119 D1:B588 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B58A -  -  -  -  _I32DivideLoop:
  121 D1:B58A F5 -  -  -  		push 	af
  122 D1:B58B -  -  -  -  
  123 D1:B58B CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B58D CB 10 -  -  		rl 		b
  125 D1:B58F D9 -  -  -  		exx
  126 D1:B590 CB 11 -  -  		rl 		c
  127 D1:B592 CB 10 -  -  		rl 		b
  128 D1:B594 D9 -  -  -  		exx
  129 D1:B595 CB 15 -  -  		rl 		l
  130 D1:B597 CB 14 -  -  		rl 		h
  131 D1:B599 D9 -  -  -  		exx
  132 D1:B59A CB 15 -  -  		rl 		l
  133 D1:B59C CB 14 -  -  		rl 		h
  134 D1:B59E D9 -  -  -  		exx
  135 D1:B59F -  -  -  -  
  136 D1:B59F CD 6A B6 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B5A3 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B5A5 -  -  -  -  
  139 D1:B5A5 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B5A6 18 04 -  -  		jr 		_I32Next
  141 D1:B5A8 -  -  -  -  
  142 D1:B5A8 -  -  -  -  _I32Borrow:
  143 D1:B5A8 CD 62 B6 D1 		call 	Int32Add 					; A = A + M
  144 D1:B5AC -  -  -  -  _I32Next:
  145 D1:B5AC F1 -  -  -  		pop 	af
  146 D1:B5AD 3D -  -  -  		dec 	a
  147 D1:B5AE 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B5B0 -  -  -  -  
  149 D1:B5B0 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B5B1 -  -  -  -  
  151 D1:B5B1 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B5B2 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B5B4 -  -  -  -  
  154 D1:B5B4 60 -  -  -  		ld  	h,b
  155 D1:B5B5 69 -  -  -  		ld 		l,c
  156 D1:B5B6 D9 -  -  -  		exx
  157 D1:B5B7 60 -  -  -  		ld  	h,b
  158 D1:B5B8 69 -  -  -  		ld 		l,c
  159 D1:B5B9 D9 -  -  -  		exx
  160 D1:B5BA -  -  -  -  _I32Modulus1:		
  161 D1:B5BA D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B5BB D1 -  -  -  		pop 	de
  163 D1:B5BC C1 -  -  -  		pop 	bc
  164 D1:B5BD D9 -  -  -  		exx
  165 D1:B5BE D1 -  -  -  		pop 	de
  166 D1:B5BF C1 -  -  -  		pop 	bc
  167 D1:B5C0 C9 -  -  -  		ret
  168 D1:B5C1 -  -  -  -  
  169 D1:B5C1 -  -  -  -  ; ***************************************************************************************
  170 D1:B5C1 -  -  -  -  ;
  171 D1:B5C1 -  -  -  -  ;									Changes and Updates
  172 D1:B5C1 -  -  -  -  ;
  173 D1:B5C1 -  -  -  -  ; ***************************************************************************************
  174 D1:B5C1 -  -  -  -  ;
  175 D1:B5C1 -  -  -  -  ;		Date			Notes
  176 D1:B5C1 -  -  -  -  ;		==== 			=====
  177 D1:B5C1 -  -  -  -  ;
  178 D1:B5C1 -  -  -  -  ; ***************************************************************************************
  179 D1:B5C1 -  -  -  -  		
Listing for file "_build.asm"
   61 D1:B5C1 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B5C1 -  -  -  -  ; ***************************************************************************************
    2 D1:B5C1 -  -  -  -  ; ***************************************************************************************
    3 D1:B5C1 -  -  -  -  ;
    4 D1:B5C1 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B5C1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5C1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5C1 -  -  -  -  ;		Reviewed :	No
    8 D1:B5C1 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B5C1 -  -  -  -  ;
   10 D1:B5C1 -  -  -  -  ; ***************************************************************************************
   11 D1:B5C1 -  -  -  -  ; ***************************************************************************************
   12 D1:B5C1 -  -  -  -  
   13 D1:B5C1 -  -  -  -  ; ***************************************************************************************
   14 D1:B5C1 -  -  -  -  ;
   15 D1:B5C1 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B5C1 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B5C1 -  -  -  -  ;
   18 D1:B5C1 -  -  -  -  ; ***************************************************************************************
   19 D1:B5C1 -  -  -  -  
   20 D1:B5C1 -  -  -  -  Int32FromString:
   21 D1:B5C1 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B5C2 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B5C3 D5 -  -  -  		push 	de
   24 D1:B5C4 D9 -  -  -  		exx
   25 D1:B5C5 D5 -  -  -  		push 	de
   26 D1:B5C6 -  -  -  -  
   27 D1:B5C6 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B5CA 11 00 00 00 		ld 		de,$0000
   29 D1:B5CE D9 -  -  -  		exx
   30 D1:B5CF 21 00 00 00 		ld 		hl,$0000
   31 D1:B5D3 11 00 00 00 		ld 		de,$0000
   32 D1:B5D7 D9 -  -  -  		exx
   33 D1:B5D8 -  -  -  -  
   34 D1:B5D8 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B5D9 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B5DB 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B5DD ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B5DF 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B5E0 -  -  -  -  		;
   40 D1:B5E0 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B5E1 F5 -  -  -  		push 	af
   42 D1:B5E2 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B5E4 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B5E5 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B5E7 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B5E8 18 01 -  -  		jr 		_I32FSMain
   47 D1:B5EA -  -  -  -  _I32FSNotSigned:		
   48 D1:B5EA E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B5EB -  -  -  -  		;
   50 D1:B5EB -  -  -  -  		; 		Main conversion loop.
   51 D1:B5EB -  -  -  -  		; 		
   52 D1:B5EB -  -  -  -  _I32FSMain:		
   53 D1:B5EB 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B5EC FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B5EE 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B5F0 D6 20 -  -  		sub 	32
   57 D1:B5F2 -  -  -  -  _I32FSNotLower:
   58 D1:B5F2 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B5F4 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B5F6 FE 3A -  -  		cp 		'9'+1
   61 D1:B5F8 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B5FA FE 41 -  -  		cp 		'A'
   63 D1:B5FC 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B5FE FE 47 -  -  		cp 		'F'+1
   65 D1:B600 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B602 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B604 -  -  -  -  _I32FSOkay:
   68 D1:B604 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B606 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B607 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B609 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B60A D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B60B F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B60C CD 29 B6 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B610 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B611 5F -  -  -  		ld 		e,a
   77 D1:B612 CD 62 B6 D1 		call 	Int32Add 					; and add it.
   78 D1:B616 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B617 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B619 -  -  -  -  
   81 D1:B619 -  -  -  -  _I32FSExit:
   82 D1:B619 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B61A FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B61C CC CC B6 D1 		call 	z,Int32Negate
   85 D1:B620 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B621 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B622 D9 -  -  -  		exx
   88 D1:B623 D1 -  -  -  		pop 	de
   89 D1:B624 D9 -  -  -  		exx
   90 D1:B625 C1 -  -  -  		pop 	bc
   91 D1:B626 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B628 C9 -  -  -  		ret				
   93 D1:B629 -  -  -  -  
   94 D1:B629 -  -  -  -  ; ***************************************************************************************
   95 D1:B629 -  -  -  -  ;
   96 D1:B629 -  -  -  -  ;									Changes and Updates
   97 D1:B629 -  -  -  -  ;
   98 D1:B629 -  -  -  -  ; ***************************************************************************************
   99 D1:B629 -  -  -  -  ;
  100 D1:B629 -  -  -  -  ;		Date			Notes
  101 D1:B629 -  -  -  -  ;		==== 			=====
  102 D1:B629 -  -  -  -  ;
  103 D1:B629 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B629 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B629 -  -  -  -  ; ***************************************************************************************
    2 D1:B629 -  -  -  -  ; ***************************************************************************************
    3 D1:B629 -  -  -  -  ;
    4 D1:B629 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B629 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B629 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B629 -  -  -  -  ;		Reviewed :	No
    8 D1:B629 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B629 -  -  -  -  ;
   10 D1:B629 -  -  -  -  ; ***************************************************************************************
   11 D1:B629 -  -  -  -  ; ***************************************************************************************
   12 D1:B629 -  -  -  -  
   13 D1:B629 -  -  -  -  Int32Multiply:
   14 D1:B629 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B62A D5 -  -  -  		push 	de
   16 D1:B62B 44 -  -  -  		ld 		b,h
   17 D1:B62C 4D -  -  -  		ld 		c,l
   18 D1:B62D 21 00 00 00 		ld 		hl,$0000
   19 D1:B631 -  -  -  -  
   20 D1:B631 D9 -  -  -  		exx
   21 D1:B632 C5 -  -  -  		push 	bc
   22 D1:B633 D5 -  -  -  		push 	de
   23 D1:B634 44 -  -  -  		ld 		b,h
   24 D1:B635 4D -  -  -  		ld 		c,l
   25 D1:B636 21 00 00 00 		ld 		hl,$0000		
   26 D1:B63A D9 -  -  -  		exx
   27 D1:B63B -  -  -  -  
   28 D1:B63B -  -  -  -  _I32MultiplyLoop:
   29 D1:B63B CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B63D C4 62 B6 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B641 -  -  -  -  		;
   32 D1:B641 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B642 CB 38 -  -  		srl 	b
   34 D1:B644 CB 19 -  -  		rr 		c
   35 D1:B646 D9 -  -  -  		exx
   36 D1:B647 CB 18 -  -  		rr 		b
   37 D1:B649 CB 19 -  -  		rr 		c
   38 D1:B64B -  -  -  -  		;
   39 D1:B64B CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B64D CB 12 -  -  		rl 		d
   41 D1:B64F D9 -  -  -  		exx
   42 D1:B650 CB 13 -  -  		rl 		e
   43 D1:B652 CB 12 -  -  		rl 		d
   44 D1:B654 -  -  -  -  
   45 D1:B654 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B655 B1 -  -  -  		or 		c
   47 D1:B656 D9 -  -  -  		exx
   48 D1:B657 B0 -  -  -  		or 		b
   49 D1:B658 B1 -  -  -  		or 		c
   50 D1:B659 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B65B -  -  -  -  
   52 D1:B65B D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B65C D1 -  -  -  		pop 	de
   54 D1:B65D C1 -  -  -  		pop 	bc
   55 D1:B65E D9 -  -  -  		exx
   56 D1:B65F D1 -  -  -  		pop 	de
   57 D1:B660 C1 -  -  -  		pop 	bc
   58 D1:B661 C9 -  -  -  		ret
   59 D1:B662 -  -  -  -  
   60 D1:B662 -  -  -  -  ; ***************************************************************************************
   61 D1:B662 -  -  -  -  ;
   62 D1:B662 -  -  -  -  ;									Changes and Updates
   63 D1:B662 -  -  -  -  ;
   64 D1:B662 -  -  -  -  ; ***************************************************************************************
   65 D1:B662 -  -  -  -  ;
   66 D1:B662 -  -  -  -  ;		Date			Notes
   67 D1:B662 -  -  -  -  ;		==== 			=====
   68 D1:B662 -  -  -  -  ;
   69 D1:B662 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B662 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B662 -  -  -  -  ; ***************************************************************************************
    2 D1:B662 -  -  -  -  ; ***************************************************************************************
    3 D1:B662 -  -  -  -  ;
    4 D1:B662 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B662 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B662 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B662 -  -  -  -  ;		Reviewed :	No
    8 D1:B662 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B662 -  -  -  -  ;
   10 D1:B662 -  -  -  -  ; ***************************************************************************************
   11 D1:B662 -  -  -  -  ; ***************************************************************************************
   12 D1:B662 -  -  -  -  
   13 D1:B662 -  -  -  -  ; ***************************************************************************************
   14 D1:B662 -  -  -  -  ;
   15 D1:B662 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B662 -  -  -  -  ;
   17 D1:B662 -  -  -  -  ; ***************************************************************************************
   18 D1:B662 -  -  -  -  
   19 D1:B662 -  -  -  -  Int32Add:
   20 D1:B662 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B664 D9 -  -  -  		exx
   22 D1:B665 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B668 D9 -  -  -  		exx
   24 D1:B669 C9 -  -  -  		ret
   25 D1:B66A -  -  -  -  
   26 D1:B66A -  -  -  -  ; ***************************************************************************************
   27 D1:B66A -  -  -  -  ;
   28 D1:B66A -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B66A -  -  -  -  ;
   30 D1:B66A -  -  -  -  ; ***************************************************************************************
   31 D1:B66A -  -  -  -  
   32 D1:B66A -  -  -  -  Int32Subtract:
   33 D1:B66A AF -  -  -  		xor 	a 							; clear carry
   34 D1:B66B 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B66E D9 -  -  -  		exx
   36 D1:B66F 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B672 D9 -  -  -  		exx
   38 D1:B673 C9 -  -  -  		ret
   39 D1:B674 -  -  -  -  
   40 D1:B674 -  -  -  -  ; ***************************************************************************************
   41 D1:B674 -  -  -  -  ;
   42 D1:B674 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B674 -  -  -  -  ;
   44 D1:B674 -  -  -  -  ; ***************************************************************************************
   45 D1:B674 -  -  -  -  
   46 D1:B674 -  -  -  -  Int32And:
   47 D1:B674 D9 -  -  -  		exx
   48 D1:B675 CD 7A B6 D1 		call 	_I32AndHLDE
   49 D1:B679 D9 -  -  -  		exx
   50 D1:B67A -  -  -  -  _I32AndHLDE:		
   51 D1:B67A 7C -  -  -  		ld 		a,h
   52 D1:B67B A2 -  -  -  		and 	d
   53 D1:B67C 67 -  -  -  		ld 		h,a
   54 D1:B67D 7D -  -  -  		ld 		a,l
   55 D1:B67E A3 -  -  -  		and 	e
   56 D1:B67F 6F -  -  -  		ld 		l,a
   57 D1:B680 C9 -  -  -  		ret
   58 D1:B681 -  -  -  -  
   59 D1:B681 -  -  -  -  ; ***************************************************************************************
   60 D1:B681 -  -  -  -  ;
   61 D1:B681 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B681 -  -  -  -  ;
   63 D1:B681 -  -  -  -  ; ***************************************************************************************
   64 D1:B681 -  -  -  -  
   65 D1:B681 -  -  -  -  Int32Or:
   66 D1:B681 D9 -  -  -  		exx
   67 D1:B682 CD 87 B6 D1 		call 	_I32OrHLDE
   68 D1:B686 D9 -  -  -  		exx
   69 D1:B687 -  -  -  -  _I32OrHLDE:		
   70 D1:B687 7C -  -  -  		ld 		a,h
   71 D1:B688 B2 -  -  -  		or 		d
   72 D1:B689 67 -  -  -  		ld 		h,a
   73 D1:B68A 7D -  -  -  		ld 		a,l
   74 D1:B68B B3 -  -  -  		or 		e
   75 D1:B68C 6F -  -  -  		ld 		l,a
   76 D1:B68D C9 -  -  -  		ret
   77 D1:B68E -  -  -  -  
   78 D1:B68E -  -  -  -  ; ***************************************************************************************
   79 D1:B68E -  -  -  -  ;
   80 D1:B68E -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B68E -  -  -  -  ;
   82 D1:B68E -  -  -  -  ; ***************************************************************************************
   83 D1:B68E -  -  -  -  
   84 D1:B68E -  -  -  -  Int32Xor:
   85 D1:B68E D9 -  -  -  		exx
   86 D1:B68F CD 94 B6 D1 		call 	_I32XorHLDE
   87 D1:B693 D9 -  -  -  		exx
   88 D1:B694 -  -  -  -  _I32XorHLDE:		
   89 D1:B694 7C -  -  -  		ld 		a,h
   90 D1:B695 AA -  -  -  		xor 	d
   91 D1:B696 67 -  -  -  		ld 		h,a
   92 D1:B697 7D -  -  -  		ld 		a,l
   93 D1:B698 AB -  -  -  		xor 	e
   94 D1:B699 6F -  -  -  		ld 		l,a
   95 D1:B69A C9 -  -  -  		ret
   96 D1:B69B -  -  -  -  
   97 D1:B69B -  -  -  -  ; ***************************************************************************************
   98 D1:B69B -  -  -  -  ;
   99 D1:B69B -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B69B -  -  -  -  ;
  101 D1:B69B -  -  -  -  ; ***************************************************************************************
  102 D1:B69B -  -  -  -  
  103 D1:B69B -  -  -  -  Int32Zero:
  104 D1:B69B D9 -  -  -  		exx
  105 D1:B69C 7D -  -  -  		ld 		a,l
  106 D1:B69D B4 -  -  -  		or 		h
  107 D1:B69E D9 -  -  -  		exx
  108 D1:B69F B5 -  -  -  		or 		l
  109 D1:B6A0 B4 -  -  -  		or 		h
  110 D1:B6A1 C9 -  -  -  		ret
  111 D1:B6A2 -  -  -  -  
  112 D1:B6A2 -  -  -  -  ; ***************************************************************************************
  113 D1:B6A2 -  -  -  -  ;
  114 D1:B6A2 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B6A2 -  -  -  -  ;
  116 D1:B6A2 -  -  -  -  ; ***************************************************************************************
  117 D1:B6A2 -  -  -  -  
  118 D1:B6A2 -  -  -  -  Int32Compare:
  119 D1:B6A2 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B6A3 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B6A4 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B6A7 D9 -  -  -  		exx
  123 D1:B6A8 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B6A9 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B6AC -  -  -  -  		;
  126 D1:B6AC 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B6AD E2 B5 B6 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B6B1 78 -  -  -  		ld 		a,b
  129 D1:B6B2 EE 80 -  -  		xor 	$80
  130 D1:B6B4 47 -  -  -  		ld 		b,a
  131 D1:B6B5 -  -  -  -  _I32CNoOverflow:
  132 D1:B6B5 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B6B6 B5 -  -  -  		or 		l
  134 D1:B6B7 D9 -  -  -  		exx 
  135 D1:B6B8 B4 -  -  -  		or 		h
  136 D1:B6B9 B5 -  -  -  		or 		l
  137 D1:B6BA 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B6BC -  -  -  -  		;
  139 D1:B6BC D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B6BD CB 78 -  -  		bit 	7,b
  141 D1:B6BF D9 -  -  -  		exx
  142 D1:B6C0 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B6C2 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B6C4 3E FF -  -  		ld 		a,$FF
  145 D1:B6C6 -  -  -  -  _I32NotPos:
  146 D1:B6C6 D9 -  -  -  		exx
  147 D1:B6C7 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B6C8 D9 -  -  -  		exx
  149 D1:B6C9 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B6CA B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B6CB C9 -  -  -  		ret
  152 D1:B6CC -  -  -  -  
  153 D1:B6CC -  -  -  -  ; ***************************************************************************************
  154 D1:B6CC -  -  -  -  ;
  155 D1:B6CC -  -  -  -  ;										Negate HL'HL
  156 D1:B6CC -  -  -  -  ;
  157 D1:B6CC -  -  -  -  ; ***************************************************************************************
  158 D1:B6CC -  -  -  -  
  159 D1:B6CC -  -  -  -  Int32Negate:
  160 D1:B6CC AF -  -  -  		xor 	a
  161 D1:B6CD CD D8 B6 D1 		call 	_I32NSubtract
  162 D1:B6D1 D9 -  -  -  		exx
  163 D1:B6D2 CD D8 B6 D1 		call 	_I32NSubtract
  164 D1:B6D6 D9 -  -  -  		exx
  165 D1:B6D7 C9 -  -  -  		ret
  166 D1:B6D8 -  -  -  -  _I32NSubtract:
  167 D1:B6D8 D5 -  -  -  		push 	de
  168 D1:B6D9 EB -  -  -  		ex 		de,hl
  169 D1:B6DA 21 00 00 00 		ld 		hl,$0000
  170 D1:B6DE 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B6E1 D1 -  -  -  		pop 	de
  172 D1:B6E2 C9 -  -  -  		ret
  173 D1:B6E3 -  -  -  -  		
  174 D1:B6E3 -  -  -  -  ; ***************************************************************************************
  175 D1:B6E3 -  -  -  -  ;
  176 D1:B6E3 -  -  -  -  ;									Changes and Updates
  177 D1:B6E3 -  -  -  -  ;
  178 D1:B6E3 -  -  -  -  ; ***************************************************************************************
  179 D1:B6E3 -  -  -  -  ;
  180 D1:B6E3 -  -  -  -  ;		Date			Notes
  181 D1:B6E3 -  -  -  -  ;		==== 			=====
  182 D1:B6E3 -  -  -  -  ;
  183 D1:B6E3 -  -  -  -  ; ***************************************************************************************
  184 D1:B6E3 -  -  -  -  		
Listing for file "_build.asm"
   64 D1:B6E3 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B6E3 -  -  -  -  ; ***************************************************************************************
    2 D1:B6E3 -  -  -  -  ; ***************************************************************************************
    3 D1:B6E3 -  -  -  -  ;
    4 D1:B6E3 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B6E3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6E3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6E3 -  -  -  -  ;		Reviewed :	No
    8 D1:B6E3 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B6E3 -  -  -  -  ;
   10 D1:B6E3 -  -  -  -  ; ***************************************************************************************
   11 D1:B6E3 -  -  -  -  ;
   12 D1:B6E3 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B6E3 -  -  -  -  ;
   14 D1:B6E3 -  -  -  -  ; ***************************************************************************************
   15 D1:B6E3 -  -  -  -  
   16 D1:B6E3 -  -  -  -  Int32ToString:
   17 D1:B6E3 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B6E4 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B6E5 E5 -  -  -  		push 	hl
   20 D1:B6E6 11 00 00 00 		ld	 	de,$0000
   21 D1:B6EA D9 -  -  -  		exx
   22 D1:B6EB D5 -  -  -  		push 	de
   23 D1:B6EC E5 -  -  -  		push 	hl
   24 D1:B6ED 11 00 00 00 		ld 		de,$000
   25 D1:B6F1 D9 -  -  -  		exx
   26 D1:B6F2 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B6F3 -  -  -  -  		;
   28 D1:B6F3 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B6F5 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B6F7 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B6F9 5F -  -  -  		ld 		e,a
   32 D1:B6FA -  -  -  -  		;
   33 D1:B6FA D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B6FB CB 7C -  -  		bit 	7,h
   35 D1:B6FD D9 -  -  -  		exx
   36 D1:B6FE 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B700 -  -  -  -  		;
   38 D1:B700 CD CC B6 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B704 -  -  -  -  		;
   40 D1:B704 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B706 02 -  -  -  		ld 		(bc),a
   42 D1:B707 03 -  -  -  		inc 	bc
   43 D1:B708 -  -  -  -  _I32TSNotNegative:	
   44 D1:B708 CD 17 B7 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B70C -  -  -  -  _I32TSExit:
   46 D1:B70C 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B70E 02 -  -  -  		ld 		(bc),a 
   48 D1:B70F -  -  -  -  
   49 D1:B70F D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B710 E1 -  -  -  		pop 	hl
   51 D1:B711 D1 -  -  -  		pop 	de
   52 D1:B712 D9 -  -  -  		exx
   53 D1:B713 E1 -  -  -  		pop 	hl
   54 D1:B714 D1 -  -  -  		pop 	de
   55 D1:B715 C1 -  -  -  		pop 	bc
   56 D1:B716 C9 -  -  -  		ret
   57 D1:B717 -  -  -  -  
   58 D1:B717 -  -  -  -  _I32RecursiveConvert:
   59 D1:B717 CD 24 B5 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B71B F5 -  -  -  		push 	af 							; save remainder
   61 D1:B71C CD 9B B6 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B720 C4 17 B7 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B724 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B725 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B727 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B729 C6 07 -  -  		add 	a,7
   67 D1:B72B -  -  -  -  _I32NotHex:
   68 D1:B72B C6 30 -  -  		add 	a,48
   69 D1:B72D 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B72E 03 -  -  -  		inc 	bc
   71 D1:B72F C9 -  -  -  		ret		
   72 D1:B730 -  -  -  -  
   73 D1:B730 -  -  -  -  ; ***************************************************************************************
   74 D1:B730 -  -  -  -  ;
   75 D1:B730 -  -  -  -  ;									Changes and Updates
   76 D1:B730 -  -  -  -  ;
   77 D1:B730 -  -  -  -  ; ***************************************************************************************
   78 D1:B730 -  -  -  -  ;
   79 D1:B730 -  -  -  -  ;		Date			Notes
   80 D1:B730 -  -  -  -  ;		==== 			=====
   81 D1:B730 -  -  -  -  ;
   82 D1:B730 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B730 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B730 -  -  -  -  ; ***************************************************************************************
    2 D1:B730 -  -  -  -  ; ***************************************************************************************
    3 D1:B730 -  -  -  -  ;
    4 D1:B730 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B730 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B730 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B730 -  -  -  -  ;		Reviewed :	No
    8 D1:B730 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B730 -  -  -  -  ;
   10 D1:B730 -  -  -  -  ; ***************************************************************************************
   11 D1:B730 -  -  -  -  ; ***************************************************************************************
   12 D1:B730 -  -  -  -  
   13 D1:B730 -  -  -  -  #ifdef AQUARIUS
   14 D1:B730             
   15 D1:B730             ; ***************************************************************************************
   16 D1:B730             ;
   17 D1:B730             ;								Initialise system stuff
   18 D1:B730             ;
   19 D1:B730             ; ***************************************************************************************
   20 D1:B730             
   21 D1:B730             SYSInitialise:
   22 D1:B730             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B730             	call 	SYSPrintChar
   24 D1:B730             	ret
   25 D1:B730             
   26 D1:B730             ; ***************************************************************************************
   27 D1:B730             ;
   28 D1:B730             ;								Terminate system stuff
   29 D1:B730             ;
   30 D1:B730             ; ***************************************************************************************
   31 D1:B730             
   32 D1:B730             SYSTerminate:
   33 D1:B730             	jr 		SYSTerminate
   34 D1:B730             
   35 D1:B730             ; ***************************************************************************************
   36 D1:B730             ;
   37 D1:B730             ;								Print A character
   38 D1:B730             ;
   39 D1:B730             ; ***************************************************************************************
   40 D1:B730             
   41 D1:B730             SYSPrintChar:
   42 D1:B730             	push 	af 									; we stack everything including alt registers
   43 D1:B730             	push 	bc
   44 D1:B730             	push 	de
   45 D1:B730             	push 	hl
   46 D1:B730             	push 	ix
   47 D1:B730             	push 	iy
   48 D1:B730             	exx
   49 D1:B730             	push 	bc
   50 D1:B730             	push 	de
   51 D1:B730             	push 	hl
   52 D1:B730             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B730             	pop 	hl
   54 D1:B730             	pop 	de
   55 D1:B730             	pop 	bc
   56 D1:B730             	exx
   57 D1:B730             	pop 	iy
   58 D1:B730             	pop 	ix
   59 D1:B730             	pop 	hl
   60 D1:B730             	pop 	de
   61 D1:B730             	pop 	bc
   62 D1:B730             	pop 	af
   63 D1:B730             	ret		
   64 D1:B730             
   65 D1:B730             ; ***************************************************************************************
   66 D1:B730             ;
   67 D1:B730             ;									Print Newline
   68 D1:B730             ;
   69 D1:B730             ; ***************************************************************************************
   70 D1:B730             
   71 D1:B730             SYSPrintCRLF:
   72 D1:B730             	push 	af
   73 D1:B730             	ld 		a,13
   74 D1:B730             	call 	SYSPrintChar
   75 D1:B730             	ld 		a,10
   76 D1:B730             	call 	SYSPrintChar
   77 D1:B730             	pop 	af
   78 D1:B730             	ret
   79 D1:B730             
   80 D1:B730             ; ***************************************************************************************
   81 D1:B730             ;
   82 D1:B730             ;									Get time into HL'HL
   83 D1:B730             ;
   84 D1:B730             ; ***************************************************************************************
   85 D1:B730             
   86 D1:B730             SYSGetTimer:
   87 D1:B730              	in 		a,($00)
   88 D1:B730              	ld 		l,a
   89 D1:B730              	in 		a,($01)
   90 D1:B730              	ld 		h,a
   91 D1:B730              	exx
   92 D1:B730              	in 		a,($02)
   93 D1:B730              	ld 		l,a
   94 D1:B730              	in 		a,($03)
   95 D1:B730              	ld 		h,a
   96 D1:B730              	exx
   97 D1:B730             	ret 	
   98 D1:B730             	
   99 D1:B730             #endif
  100 D1:B730 -  -  -  -  
  101 D1:B730 -  -  -  -  ; ***************************************************************************************
  102 D1:B730 -  -  -  -  ;
  103 D1:B730 -  -  -  -  ;									Changes and Updates
  104 D1:B730 -  -  -  -  ;
  105 D1:B730 -  -  -  -  ; ***************************************************************************************
  106 D1:B730 -  -  -  -  ;
  107 D1:B730 -  -  -  -  ;		Date			Notes
  108 D1:B730 -  -  -  -  ;		==== 			=====
  109 D1:B730 -  -  -  -  ;
  110 D1:B730 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B730 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B730 -  -  -  -  ; ***************************************************************************************
    2 D1:B730 -  -  -  -  ; ***************************************************************************************
    3 D1:B730 -  -  -  -  ;
    4 D1:B730 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B730 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B730 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B730 -  -  -  -  ;		Reviewed :	No
    8 D1:B730 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B730 -  -  -  -  ;
   10 D1:B730 -  -  -  -  ; ***************************************************************************************
   11 D1:B730 -  -  -  -  ; ***************************************************************************************
   12 D1:B730 -  -  -  -  
   13 D1:B730 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B730             
   15 D1:B730             ; ***************************************************************************************
   16 D1:B730             ;
   17 D1:B730             ;								Initialise system stuff
   18 D1:B730             ;
   19 D1:B730             ; ***************************************************************************************
   20 D1:B730             
   21 D1:B730             SYSInitialise:
   22 D1:B730             	ret
   23 D1:B730             
   24 D1:B730             ; ***************************************************************************************
   25 D1:B730             ;
   26 D1:B730             ;								Terminate system stuff
   27 D1:B730             ;
   28 D1:B730             ; ***************************************************************************************
   29 D1:B730             
   30 D1:B730             SYSTerminate:
   31 D1:B730             	ret
   32 D1:B730             
   33 D1:B730             ; ***************************************************************************************
   34 D1:B730             ;
   35 D1:B730             ;								Print A character
   36 D1:B730             ;
   37 D1:B730             ; ***************************************************************************************
   38 D1:B730             
   39 D1:B730             SYSPrintChar:
   40 D1:B730             	ret		
   41 D1:B730             
   42 D1:B730             ; ***************************************************************************************
   43 D1:B730             ;
   44 D1:B730             ;									Print Newline
   45 D1:B730             ;
   46 D1:B730             ; ***************************************************************************************
   47 D1:B730             
   48 D1:B730             SYSPrintCRLF:
   49 D1:B730             	ret
   50 D1:B730             
   51 D1:B730             ; ***************************************************************************************
   52 D1:B730             ;
   53 D1:B730             ;									Get time into HL'HL
   54 D1:B730             ;
   55 D1:B730             ; ***************************************************************************************
   56 D1:B730             
   57 D1:B730             SYSGetTimer:
   58 D1:B730             	ret
   59 D1:B730             
   60 D1:B730             #endif
   61 D1:B730 -  -  -  -  
   62 D1:B730 -  -  -  -  ; ***************************************************************************************
   63 D1:B730 -  -  -  -  ;
   64 D1:B730 -  -  -  -  ;									Changes and Updates
   65 D1:B730 -  -  -  -  ;
   66 D1:B730 -  -  -  -  ; ***************************************************************************************
   67 D1:B730 -  -  -  -  ;
   68 D1:B730 -  -  -  -  ;		Date			Notes
   69 D1:B730 -  -  -  -  ;		==== 			=====
   70 D1:B730 -  -  -  -  ;
   71 D1:B730 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B730 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B730 -  -  -  -  ; ***************************************************************************************
    2 D1:B730 -  -  -  -  ; ***************************************************************************************
    3 D1:B730 -  -  -  -  ;
    4 D1:B730 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B730 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B730 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B730 -  -  -  -  ;		Reviewed :	No
    8 D1:B730 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B730 -  -  -  -  ;
   10 D1:B730 -  -  -  -  ; ***************************************************************************************
   11 D1:B730 -  -  -  -  ; ***************************************************************************************
   12 D1:B730 -  -  -  -  
   13 D1:B730 -  -  -  -  #ifdef TI84
   14 D1:B730 -  -  -  -  
   15 D1:B730 -  -  -  -  ; ***************************************************************************************
   16 D1:B730 -  -  -  -  ;
   17 D1:B730 -  -  -  -  ;								Initialise system stuff
   18 D1:B730 -  -  -  -  ;
   19 D1:B730 -  -  -  -  ; ***************************************************************************************
   20 D1:B730 -  -  -  -  
   21 D1:B730 -  -  -  -  SYSInitialise:
   22 D1:B730 F3 -  -  -  	di
   23 D1:B731 ED 73 4E B7 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B736 FD 22 52 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B73B C9 -  -  -  	ret
   26 D1:B73C -  -  -  -  
   27 D1:B73C -  -  -  -  ; ***************************************************************************************
   28 D1:B73C -  -  -  -  ;
   29 D1:B73C -  -  -  -  ;								Terminate system stuff
   30 D1:B73C -  -  -  -  ;
   31 D1:B73C -  -  -  -  ; ***************************************************************************************
   32 D1:B73C -  -  -  -  
   33 D1:B73C -  -  -  -  SYSTerminate:
   34 D1:B73C ED 7B 4E B7 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B741 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B743 FD 2A 52 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B748 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B74C FB -  -  -  	ei
   39 D1:B74D C9 -  -  -  	ret 										; and exit.
   40 D1:B74E -  -  -  -  
   41 D1:B74E -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B74E 00 00 00 00 	.dw 	0,0
   43 D1:B752 -  -  -  -  _IYTemp84:
   44 D1:B752 00 00 00 00 	.dw 	0,0		
   45 D1:B756 -  -  -  -  
   46 D1:B756 -  -  -  -  ; ***************************************************************************************
   47 D1:B756 -  -  -  -  ;
   48 D1:B756 -  -  -  -  ;								Print A character
   49 D1:B756 -  -  -  -  ;
   50 D1:B756 -  -  -  -  ; ***************************************************************************************
   51 D1:B756 -  -  -  -  
   52 D1:B756 -  -  -  -  SYSPrintChar:
   53 D1:B756 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B757 C5 -  -  -  	push 	bc
   55 D1:B758 D5 -  -  -  	push 	de
   56 D1:B759 E5 -  -  -  	push 	hl
   57 D1:B75A DD E5 -  -  	push 	ix
   58 D1:B75C FD E5 -  -  	push 	iy
   59 D1:B75E D9 -  -  -  	exx
   60 D1:B75F C5 -  -  -  	push 	bc
   61 D1:B760 D5 -  -  -  	push 	de
   62 D1:B761 E5 -  -  -  	push 	hl
   63 D1:B762 -  -  -  -  
   64 D1:B762 FD 2A 52 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B767 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B76B F3 -  -  -  	di
   67 D1:B76C FD 22 52 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B771 -  -  -  -  
   69 D1:B771 E1 -  -  -  	pop 	hl
   70 D1:B772 D1 -  -  -  	pop 	de
   71 D1:B773 C1 -  -  -  	pop 	bc
   72 D1:B774 D9 -  -  -  	exx
   73 D1:B775 FD E1 -  -  	pop 	iy
   74 D1:B777 DD E1 -  -  	pop 	ix
   75 D1:B779 E1 -  -  -  	pop 	hl
   76 D1:B77A D1 -  -  -  	pop 	de
   77 D1:B77B C1 -  -  -  	pop 	bc
   78 D1:B77C F1 -  -  -  	pop 	af
   79 D1:B77D C9 -  -  -  	ret		
   80 D1:B77E -  -  -  -  
   81 D1:B77E -  -  -  -  ; ***************************************************************************************
   82 D1:B77E -  -  -  -  ;
   83 D1:B77E -  -  -  -  ;									Print Newline
   84 D1:B77E -  -  -  -  ;
   85 D1:B77E -  -  -  -  ; ***************************************************************************************
   86 D1:B77E -  -  -  -  
   87 D1:B77E -  -  -  -  SYSPrintCRLF:
   88 D1:B77E F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B77F C5 -  -  -  	push 	bc
   90 D1:B780 D5 -  -  -  	push 	de
   91 D1:B781 E5 -  -  -  	push 	hl
   92 D1:B782 DD E5 -  -  	push 	ix
   93 D1:B784 FD E5 -  -  	push 	iy
   94 D1:B786 D9 -  -  -  	exx
   95 D1:B787 C5 -  -  -  	push 	bc
   96 D1:B788 D5 -  -  -  	push 	de
   97 D1:B789 E5 -  -  -  	push 	hl
   98 D1:B78A -  -  -  -  
   99 D1:B78A FD 2A 52 B7 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B78F CD F0 07 02 	call 	_newline
  101 D1:B793 F3 -  -  -  	di
  102 D1:B794 FD 22 52 B7 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B799 -  -  -  -  
  104 D1:B799 E1 -  -  -  	pop 	hl
  105 D1:B79A D1 -  -  -  	pop 	de
  106 D1:B79B C1 -  -  -  	pop 	bc
  107 D1:B79C D9 -  -  -  	exx
  108 D1:B79D FD E1 -  -  	pop 	iy
  109 D1:B79F DD E1 -  -  	pop 	ix
  110 D1:B7A1 E1 -  -  -  	pop 	hl
  111 D1:B7A2 D1 -  -  -  	pop 	de
  112 D1:B7A3 C1 -  -  -  	pop 	bc
  113 D1:B7A4 F1 -  -  -  	pop 	af
  114 D1:B7A5 C9 -  -  -  	ret
  115 D1:B7A6 -  -  -  -  
  116 D1:B7A6 -  -  -  -  ; ***************************************************************************************
  117 D1:B7A6 -  -  -  -  ;
  118 D1:B7A6 -  -  -  -  ;									Get time into HL'HL
  119 D1:B7A6 -  -  -  -  ;
  120 D1:B7A6 -  -  -  -  ; ***************************************************************************************
  121 D1:B7A6 -  -  -  -  
  122 D1:B7A6 -  -  -  -  SYSGetTimer:
  123 D1:B7A6 21 34 12 00 	ld 		hl,$1234
  124 D1:B7AA D9 -  -  -  	exx
  125 D1:B7AB 21 78 56 00 	ld 		hl,$5678
  126 D1:B7AF D9 -  -  -  	exx
  127 D1:B7B0 C9 -  -  -  	ret
  128 D1:B7B1 -  -  -  -  
  129 D1:B7B1 -  -  -  -  #endif
  130 D1:B7B1 -  -  -  -  
  131 D1:B7B1 -  -  -  -  ; ***************************************************************************************
  132 D1:B7B1 -  -  -  -  ;
  133 D1:B7B1 -  -  -  -  ;									Changes and Updates
  134 D1:B7B1 -  -  -  -  ;
  135 D1:B7B1 -  -  -  -  ; ***************************************************************************************
  136 D1:B7B1 -  -  -  -  ;
  137 D1:B7B1 -  -  -  -  ;		Date			Notes
  138 D1:B7B1 -  -  -  -  ;		==== 			=====
  139 D1:B7B1 -  -  -  -  ;
  140 D1:B7B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B7B1 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B7B1 -  -  -  -  ; ***************************************************************************************
    2 D1:B7B1 -  -  -  -  ; ***************************************************************************************
    3 D1:B7B1 -  -  -  -  ;
    4 D1:B7B1 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B7B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B7B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B7B1 -  -  -  -  ;		Reviewed :	No
    8 D1:B7B1 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B7B1 -  -  -  -  ;
   10 D1:B7B1 -  -  -  -  ; ***************************************************************************************
   11 D1:B7B1 -  -  -  -  ; ***************************************************************************************
   12 D1:B7B1 -  -  -  -  
   13 D1:B7B1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 21 01 00 BE 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 11 02 00 
              C1 9B 96 95 
              6A A5 A6 9B 
              96 AC 95 6A 
              A5 80 06 03 
              00 C1 19 80 
              0D 04 00 BD 
              19 AA 8A 41 
              AB A7 C1 19 
              80 11 05 00 
              BD 02 95 44 
              A5 A6 13 04 
              12 13 95 48 
              A5 80 0D 06 
              00 BD 00 AA 
              8A 41 AB A7 
              C1 00 80 00 	.db	$21,$01,$00,$be,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$11,$02,$00,$c1,$9b,$96,$95,$6a,$a5,$a6,$9b,$96,$ac,$95,$6a,$a5,$80,$06,$03,$00,$c1,$19,$80,$0d,$04,$00,$bd,$19,$aa,$8a,$41,$ab,$a7,$c1,$19,$80,$11,$05,$00,$bd,$02,$95,$44,$a5,$a6,$13,$04,$12,$13,$95,$48,$a5,$80,$0d,$06,$00,$bd,$00,$aa,$8a,$41,$ab,$a7,$c1,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:B864 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:C864 -  -  -  -  EndTestInstance:
   18 D1:C864 -  -  -  -  		
   19 D1:C864 -  -  -  -  ; ***************************************************************************************
   20 D1:C864 -  -  -  -  ;
   21 D1:C864 -  -  -  -  ;									Changes and Updates
   22 D1:C864 -  -  -  -  ;
   23 D1:C864 -  -  -  -  ; ***************************************************************************************
   24 D1:C864 -  -  -  -  ;
   25 D1:C864 -  -  -  -  ;		Date			Notes
   26 D1:C864 -  -  -  -  ;		==== 			=====
   27 D1:C864 -  -  -  -  ;
   28 D1:C864 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:C864 -  -  -  -  FinalAddress:
