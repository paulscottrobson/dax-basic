    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_EOR                             	$0092 ; eor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 44 B3 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B4 D1 		ld 		de,TestInstance
   45 D1:A889 21 45 D7 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD EC AD D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 81 A9 D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 6A B3 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 50 B3 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 1B 
              AA D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 1B 
              AA D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  
   59 D1:A8CD -  -  -  -  ; ***************************************************************************************
   60 D1:A8CD -  -  -  -  ;
   61 D1:A8CD -  -  -  -  ;										Run variables
   62 D1:A8CD -  -  -  -  ;
   63 D1:A8CD -  -  -  -  ; ***************************************************************************************
   64 D1:A8CD -  -  -  -  
   65 D1:A8CD -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 D1:A8CD 00 00 00 00 		.dw 	0,0
   67 D1:A8D1 -  -  -  -  		
   68 D1:A8D1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  
   71 D1:A8D5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 D1:A8D5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 D1:A8DB -  -  -  -  
   74 D1:A8DB -  -  -  -  AConvert: 									; used for address conversions.
   75 D1:A8DB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8E1 -  -  -  -  		
   77 D1:A8E1 -  -  -  -  RandomSeed: 								; random number seeds.
   78 D1:A8E1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 D1:A8F1 -  -  -  -  
   80 D1:A8F1 -  -  -  -  s; ***************************************************************************************
   81 D1:A8F1 -  -  -  -  ;
   82 D1:A8F1 -  -  -  -  ;										  Buffers
   83 D1:A8F1 -  -  -  -  ;
   84 D1:A8F1 -  -  -  -  ; ***************************************************************************************
   85 D1:A8F1 -  -  -  -  
   86 D1:A8F1 -  -  -  -  ConvertBuffer:
   87 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 D1:A931 -  -  -  -  
   89 D1:A931 -  -  -  -  ; ***************************************************************************************
   90 D1:A931 -  -  -  -  ;
   91 D1:A931 -  -  -  -  ;									Changes and Updates
   92 D1:A931 -  -  -  -  ;
   93 D1:A931 -  -  -  -  ; ***************************************************************************************
   94 D1:A931 -  -  -  -  ;
   95 D1:A931 -  -  -  -  ;		Date			Notes
   96 D1:A931 -  -  -  -  ;		==== 			=====
   97 D1:A931 -  -  -  -  ;
   98 D1:A931 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A931 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A931 -  -  -  -  ; ***************************************************************************************
    2 D1:A931 -  -  -  -  ; ***************************************************************************************
    3 D1:A931 -  -  -  -  ;
    4 D1:A931 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A931 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A931 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A931 -  -  -  -  ;		Reviewed :	No
    8 D1:A931 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A931 -  -  -  -  ;
   10 D1:A931 -  -  -  -  ; ***************************************************************************************
   11 D1:A931 -  -  -  -  ; ***************************************************************************************
   12 D1:A931 -  -  -  -  
   13 D1:A931 -  -  -  -  ; ***************************************************************************************
   14 D1:A931 -  -  -  -  ;
   15 D1:A931 -  -  -  -  ;									ASSERT command
   16 D1:A931 -  -  -  -  ;
   17 D1:A931 -  -  -  -  ; ***************************************************************************************
   18 D1:A931 -  -  -  -  
   19 D1:A931 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A931 CD 2F AC D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A935 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A93B C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A93C 3E 01 C3 1B 
              AA D1 -  -  		ERR_ASSERT
   24 D1:A942 -  -  -  -  
   25 D1:A942 -  -  -  -  ; ***************************************************************************************
   26 D1:A942 -  -  -  -  ;
   27 D1:A942 -  -  -  -  ;									Changes and Updates
   28 D1:A942 -  -  -  -  ;
   29 D1:A942 -  -  -  -  ; ***************************************************************************************
   30 D1:A942 -  -  -  -  ;
   31 D1:A942 -  -  -  -  ;		Date			Notes
   32 D1:A942 -  -  -  -  ;		==== 			=====
   33 D1:A942 -  -  -  -  ;
   34 D1:A942 -  -  -  -  ; ***************************************************************************************
   35 D1:A942 -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A942 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A942 -  -  -  -  ; ***************************************************************************************
    2 D1:A942 -  -  -  -  ; ***************************************************************************************
    3 D1:A942 -  -  -  -  ;
    4 D1:A942 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A942 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A942 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A942 -  -  -  -  ;		Reviewed :	No
    8 D1:A942 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A942 -  -  -  -  ;
   10 D1:A942 -  -  -  -  ; ***************************************************************************************
   11 D1:A942 -  -  -  -  ; ***************************************************************************************
   12 D1:A942 -  -  -  -  
   13 D1:A942 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A942 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A942 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A942 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A942 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A942 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A942 C3 85 AA D1 		jp 		SyntaxError
   20 D1:A946 -  -  -  -  
   21 D1:A946 -  -  -  -  ; ***************************************************************************************
   22 D1:A946 -  -  -  -  ;
   23 D1:A946 -  -  -  -  ;									Changes and Updates
   24 D1:A946 -  -  -  -  ;
   25 D1:A946 -  -  -  -  ; ***************************************************************************************
   26 D1:A946 -  -  -  -  ;
   27 D1:A946 -  -  -  -  ;		Date			Notes
   28 D1:A946 -  -  -  -  ;		==== 			=====
   29 D1:A946 -  -  -  -  ;
   30 D1:A946 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A946 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A946 -  -  -  -  ; ***************************************************************************************
    2 D1:A946 -  -  -  -  ; ***************************************************************************************
    3 D1:A946 -  -  -  -  ;
    4 D1:A946 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A946 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A946 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A946 -  -  -  -  ;		Reviewed :	No
    8 D1:A946 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A946 -  -  -  -  ;
   10 D1:A946 -  -  -  -  ; ***************************************************************************************
   11 D1:A946 -  -  -  -  ; ***************************************************************************************
   12 D1:A946 -  -  -  -  
   13 D1:A946 -  -  -  -  ; ***************************************************************************************
   14 D1:A946 -  -  -  -  ;
   15 D1:A946 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A946 -  -  -  -  ;
   17 D1:A946 -  -  -  -  ; ***************************************************************************************
   18 D1:A946 -  -  -  -  
   19 D1:A946 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A946 C9 -  -  -  		ret
   21 D1:A947 -  -  -  -  
   22 D1:A947 -  -  -  -  ; ***************************************************************************************
   23 D1:A947 -  -  -  -  ;
   24 D1:A947 -  -  -  -  ;									Changes and Updates
   25 D1:A947 -  -  -  -  ;
   26 D1:A947 -  -  -  -  ; ***************************************************************************************
   27 D1:A947 -  -  -  -  ;
   28 D1:A947 -  -  -  -  ;		Date			Notes
   29 D1:A947 -  -  -  -  ;		==== 			=====
   30 D1:A947 -  -  -  -  ;
   31 D1:A947 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A947 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A947 -  -  -  -  ; ***************************************************************************************
    2 D1:A947 -  -  -  -  ; ***************************************************************************************
    3 D1:A947 -  -  -  -  ;
    4 D1:A947 -  -  -  -  ;		Name : 		end.asm
    5 D1:A947 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A947 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A947 -  -  -  -  ;		Reviewed :	No
    8 D1:A947 -  -  -  -  ;		Purpose :	End command
    9 D1:A947 -  -  -  -  ;
   10 D1:A947 -  -  -  -  ; ***************************************************************************************
   11 D1:A947 -  -  -  -  ; ***************************************************************************************
   12 D1:A947 -  -  -  -  
   13 D1:A947 -  -  -  -  ; ***************************************************************************************
   14 D1:A947 -  -  -  -  ;
   15 D1:A947 -  -  -  -  ;										END command
   16 D1:A947 -  -  -  -  ;
   17 D1:A947 -  -  -  -  ; ***************************************************************************************
   18 D1:A947 -  -  -  -  
   19 D1:A947 -  -  -  -  Command_END: 	;; [end]
   20 D1:A947 3E 00 C3 1B 
              AA D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A94D -  -  -  -  
   22 D1:A94D -  -  -  -  ; ***************************************************************************************
   23 D1:A94D -  -  -  -  ;
   24 D1:A94D -  -  -  -  ;									Changes and Updates
   25 D1:A94D -  -  -  -  ;
   26 D1:A94D -  -  -  -  ; ***************************************************************************************
   27 D1:A94D -  -  -  -  ;
   28 D1:A94D -  -  -  -  ;		Date			Notes
   29 D1:A94D -  -  -  -  ;		==== 			=====
   30 D1:A94D -  -  -  -  ;
   31 D1:A94D -  -  -  -  ; ***************************************************************************************
   32 D1:A94D -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A94D -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A94D -  -  -  -  ; ***************************************************************************************
    2 D1:A94D -  -  -  -  ; ***************************************************************************************
    3 D1:A94D -  -  -  -  ;
    4 D1:A94D -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A94D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A94D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A94D -  -  -  -  ;		Reviewed :	None
    8 D1:A94D -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A94D -  -  -  -  ;
   10 D1:A94D -  -  -  -  ; ***************************************************************************************
   11 D1:A94D -  -  -  -  ; ***************************************************************************************
   12 D1:A94D -  -  -  -  
   13 D1:A94D -  -  -  -  ; ***************************************************************************************
   14 D1:A94D -  -  -  -  ;
   15 D1:A94D -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A94D -  -  -  -  ;
   17 D1:A94D -  -  -  -  ; ***************************************************************************************
   18 D1:A94D -  -  -  -  
   19 D1:A94D -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A94D DD 2A CD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A952 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A956 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A959 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A95B -  -  -  -  		;
   25 D1:A95B ED 7B D1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A960 C3 8F A9 D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A964 -  -  -  -  
   28 D1:A964 -  -  -  -  ; ***************************************************************************************
   29 D1:A964 -  -  -  -  ;
   30 D1:A964 -  -  -  -  ;									Changes and Updates
   31 D1:A964 -  -  -  -  ;
   32 D1:A964 -  -  -  -  ; ***************************************************************************************
   33 D1:A964 -  -  -  -  ;
   34 D1:A964 -  -  -  -  ;		Date			Notes
   35 D1:A964 -  -  -  -  ;		==== 			=====
   36 D1:A964 -  -  -  -  ;
   37 D1:A964 -  -  -  -  ; ***************************************************************************************
   38 D1:A964 -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A964 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:A964 -  -  -  -  ; ***************************************************************************************
    2 D1:A964 -  -  -  -  ; ***************************************************************************************
    3 D1:A964 -  -  -  -  ;
    4 D1:A964 -  -  -  -  ;		Name : 		rem.asm
    5 D1:A964 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A964 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A964 -  -  -  -  ;		Reviewed :	No
    8 D1:A964 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:A964 -  -  -  -  ;
   10 D1:A964 -  -  -  -  ; ***************************************************************************************
   11 D1:A964 -  -  -  -  ; ***************************************************************************************
   12 D1:A964 -  -  -  -  
   13 D1:A964 -  -  -  -  ; ***************************************************************************************
   14 D1:A964 -  -  -  -  ;
   15 D1:A964 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:A964 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:A964 -  -  -  -  ;
   18 D1:A964 -  -  -  -  ; ***************************************************************************************
   19 D1:A964 -  -  -  -  
   20 D1:A964 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:A964 -  -  -  -  Command_REM2: 	;; [']
   22 D1:A964 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:A967 DD 23 -  -  		inc 	ix
   24 D1:A969 FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:A96B C8 -  -  -  		ret 	z
   26 D1:A96C FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:A96E C8 -  -  -  		ret 	z
   28 D1:A96F FE 3F -  -  		cp 		STRING_MARKER
   29 D1:A971 C2 85 AA D1 		jp 		nz,SyntaxError
   30 D1:A975 -  -  -  -  		;		
   31 D1:A975 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:A979 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:A97C 13 -  -  -  		inc 	de 
   34 D1:A97D 13 -  -  -  		inc 	de
   35 D1:A97E DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:A980 C9 -  -  -  		ret
   37 D1:A981 -  -  -  -  
   38 D1:A981 -  -  -  -  ; ***************************************************************************************
   39 D1:A981 -  -  -  -  ;
   40 D1:A981 -  -  -  -  ;									Changes and Updates
   41 D1:A981 -  -  -  -  ;
   42 D1:A981 -  -  -  -  ; ***************************************************************************************
   43 D1:A981 -  -  -  -  ;
   44 D1:A981 -  -  -  -  ;		Date			Notes
   45 D1:A981 -  -  -  -  ;		==== 			=====
   46 D1:A981 -  -  -  -  ;
   47 D1:A981 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 D1:A981 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:A981 -  -  -  -  ; ***************************************************************************************
    2 D1:A981 -  -  -  -  ; ***************************************************************************************
    3 D1:A981 -  -  -  -  ;
    4 D1:A981 -  -  -  -  ;		Name : 		run.asm
    5 D1:A981 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A981 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A981 -  -  -  -  ;		Reviewed :	No
    8 D1:A981 -  -  -  -  ;		Purpose :	Run command
    9 D1:A981 -  -  -  -  ;
   10 D1:A981 -  -  -  -  ; ***************************************************************************************
   11 D1:A981 -  -  -  -  ; ***************************************************************************************
   12 D1:A981 -  -  -  -  
   13 D1:A981 -  -  -  -  ; ***************************************************************************************
   14 D1:A981 -  -  -  -  ;
   15 D1:A981 -  -  -  -  ;										RUN command
   16 D1:A981 -  -  -  -  ;
   17 D1:A981 -  -  -  -  ; ***************************************************************************************
   18 D1:A981 -  -  -  -  
   19 D1:A981 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:A981 CD B9 AD D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:A985 -  -  -  -  
   22 D1:A985 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:A98A ED 73 D1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:A98F -  -  -  -  		;
   25 D1:A98F -  -  -  -  		; 		New line at IX.
   26 D1:A98F -  -  -  -  		;
   27 D1:A98F -  -  -  -  CRNewLine:
   28 D1:A98F DD 22 CD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 D1:A994 -  -  -  -  		;
   30 D1:A994 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 D1:A997 B7 -  -  -  		or 		a
   32 D1:A998 CA 47 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   33 D1:A99C -  -  -  -  		;
   34 D1:A99C DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 D1:A99E DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 D1:A9A0 DD 23 -  -  		inc 	ix
   37 D1:A9A2 -  -  -  -  		;
   38 D1:A9A2 -  -  -  -  		; 		New command at IX
   39 D1:A9A2 -  -  -  -  		;
   40 D1:A9A2 -  -  -  -  _CRNewCommand:	
   41 D1:A9A2 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 D1:A9A5 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 D1:A9A6 F2 DD A9 D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 D1:A9AA -  -  -  -  		;
   45 D1:A9AA FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 D1:A9AC 30 06 -  -  		jr  	nc,_CRDoCommand
   47 D1:A9AE FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 D1:A9B0 D2 D1 A9 D1 		jp 		nc,_CRAlternateLets
   49 D1:A9B4 -  -  -  -  		;
   50 D1:A9B4 -  -  -  -  _CRDoCommand:		
   51 D1:A9B4 E6 7F 21 00 
              00 00 6F 29 
              29 11 36 B0 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 D1:A9C9 DD 23 -  -  		inc 	ix 							; skip over token.
   53 D1:A9CB CD D5 A8 D1 		call 	JumpCode 					; call the routine.
   54 D1:A9CF 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 D1:A9D1 -  -  -  -  		;
   56 D1:A9D1 -  -  -  -  		; 		Do CALL (HL)
   57 D1:A9D1 -  -  -  -  		;
   58 D1:A9D1 -  -  -  -  		;
   59 D1:A9D1 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 D1:A9D1 -  -  -  -  		;		
   61 D1:A9D1 -  -  -  -  _CRAlternateLets:		
   62 D1:A9D1 FE 83 -  -  		cp 		KWD_PLING
   63 D1:A9D3 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 D1:A9D5 FE 84 -  -  		cp 		KWD_QMARK
   65 D1:A9D7 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 D1:A9D9 C3 85 AA D1 		jp 		SyntaxError
   67 D1:A9DD -  -  -  -  		;
   68 D1:A9DD -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 D1:A9DD -  -  -  -  		;
   70 D1:A9DD -  -  -  -  _CRAssignmentHandler:		
   71 D1:A9DD FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 D1:A9DF D2 85 AA D1 		jp 		nc,SyntaxError
   73 D1:A9E3 -  -  -  -  _CRAssignmentLet:		
   74 D1:A9E3 3E 0C C3 1B 
              AA D1 -  -  		ERR_TODO
   75 D1:A9E9 -  -  -  -  		;call	Command_LET
   76 D1:A9E9 C3 A2 A9 D1 		jp 		_CRNewCommand
   77 D1:A9ED -  -  -  -  
   78 D1:A9ED -  -  -  -  ; ***************************************************************************************
   79 D1:A9ED -  -  -  -  ;
   80 D1:A9ED -  -  -  -  ;									Changes and Updates
   81 D1:A9ED -  -  -  -  ;
   82 D1:A9ED -  -  -  -  ; ***************************************************************************************
   83 D1:A9ED -  -  -  -  ;
   84 D1:A9ED -  -  -  -  ;		Date			Notes
   85 D1:A9ED -  -  -  -  ;		==== 			=====
   86 D1:A9ED -  -  -  -  ;
   87 D1:A9ED -  -  -  -  ; ***************************************************************************************
   88 D1:A9ED -  -  -  -  		
Listing for file "_build.asm"
   20 D1:A9ED -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:A9ED -  -  -  -  ; ***************************************************************************************
    2 D1:A9ED -  -  -  -  ; ***************************************************************************************
    3 D1:A9ED -  -  -  -  ;
    4 D1:A9ED -  -  -  -  ;		Name : 		stop.asm
    5 D1:A9ED -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9ED -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9ED -  -  -  -  ;		Reviewed :	No
    8 D1:A9ED -  -  -  -  ;		Purpose :	Stop command
    9 D1:A9ED -  -  -  -  ;
   10 D1:A9ED -  -  -  -  ; ***************************************************************************************
   11 D1:A9ED -  -  -  -  ; ***************************************************************************************
   12 D1:A9ED -  -  -  -  
   13 D1:A9ED -  -  -  -  ; ***************************************************************************************
   14 D1:A9ED -  -  -  -  ;
   15 D1:A9ED -  -  -  -  ;										STOP command
   16 D1:A9ED -  -  -  -  ;
   17 D1:A9ED -  -  -  -  ; ***************************************************************************************
   18 D1:A9ED -  -  -  -  
   19 D1:A9ED -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:A9ED 3E 0A C3 1B 
              AA D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:A9F3 -  -  -  -  
   22 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   23 D1:A9F3 -  -  -  -  ;
   24 D1:A9F3 -  -  -  -  ;									Changes and Updates
   25 D1:A9F3 -  -  -  -  ;
   26 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   27 D1:A9F3 -  -  -  -  ;
   28 D1:A9F3 -  -  -  -  ;		Date			Notes
   29 D1:A9F3 -  -  -  -  ;		==== 			=====
   30 D1:A9F3 -  -  -  -  ;
   31 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   32 D1:A9F3 -  -  -  -  		
Listing for file "_build.asm"
   21 D1:A9F3 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:A9F3 -  -  -  -  ; ***************************************************************************************
    2 D1:A9F3 -  -  -  -  ; ***************************************************************************************
    3 D1:A9F3 -  -  -  -  ;
    4 D1:A9F3 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:A9F3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9F3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9F3 -  -  -  -  ;		Reviewed :	No
    8 D1:A9F3 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:A9F3 -  -  -  -  ;
   10 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   11 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   12 D1:A9F3 -  -  -  -  
   13 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   14 D1:A9F3 -  -  -  -  ;
   15 D1:A9F3 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:A9F3 -  -  -  -  ;
   17 D1:A9F3 -  -  -  -  ; ***************************************************************************************
   18 D1:A9F3 -  -  -  -  
   19 D1:A9F3 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:A9F3             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:A9F3             		inc 	ix
   22 D1:A9F3             		cp 		ch 							; exit if matches
   23 D1:A9F3             		ret 	z
   24 D1:A9F3             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:A9F3             		jp 		ErrorHandler
   26 D1:A9F3             #endmacro
   27 D1:A9F3 -  -  -  -  
   28 D1:A9F3 -  -  -  -  CheckRightBracket:
   29 D1:A9F3 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 1B 
              AA D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AA01 -  -  -  -  
   31 D1:AA01 -  -  -  -  CheckComma:
   32 D1:AA01 DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 1B 
              AA D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 D1:AA0F -  -  -  -  
   34 D1:AA0F -  -  -  -  ; ***************************************************************************************
   35 D1:AA0F -  -  -  -  ;
   36 D1:AA0F -  -  -  -  ; 							Check A, gives Syntax Error
   37 D1:AA0F -  -  -  -  ;
   38 D1:AA0F -  -  -  -  ; ***************************************************************************************
   39 D1:AA0F -  -  -  -  
   40 D1:AA0F -  -  -  -  CheckNextA:
   41 D1:AA0F DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 D1:AA12 DD 23 -  -  		inc 	ix 							; skip character
   43 D1:AA14 C8 -  -  -  		ret 	z 							; yes, okay
   44 D1:AA15 3E 0B C3 1B 
              AA D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 D1:AA1B -  -  -  -  		
   46 D1:AA1B -  -  -  -  ; ***************************************************************************************
   47 D1:AA1B -  -  -  -  ;
   48 D1:AA1B -  -  -  -  ;									Changes and Updates
   49 D1:AA1B -  -  -  -  ;
   50 D1:AA1B -  -  -  -  ; ***************************************************************************************
   51 D1:AA1B -  -  -  -  ;
   52 D1:AA1B -  -  -  -  ;		Date			Notes
   53 D1:AA1B -  -  -  -  ;		==== 			=====
   54 D1:AA1B -  -  -  -  ;
   55 D1:AA1B -  -  -  -  ; ***************************************************************************************
   56 D1:AA1B -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AA1B -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AA1B -  -  -  -  ; ***************************************************************************************
    2 D1:AA1B -  -  -  -  ; ***************************************************************************************
    3 D1:AA1B -  -  -  -  ;
    4 D1:AA1B -  -  -  -  ;		Name : 		errors.asm
    5 D1:AA1B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA1B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA1B -  -  -  -  ;		Reviewed :	No
    8 D1:AA1B -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AA1B -  -  -  -  ;
   10 D1:AA1B -  -  -  -  ; ***************************************************************************************
   11 D1:AA1B -  -  -  -  ; ***************************************************************************************
   12 D1:AA1B -  -  -  -  
   13 D1:AA1B -  -  -  -  ; ***************************************************************************************
   14 D1:AA1B -  -  -  -  ;
   15 D1:AA1B -  -  -  -  ;								Error handler, message A 
   16 D1:AA1B -  -  -  -  ;
   17 D1:AA1B -  -  -  -  ; ***************************************************************************************
   18 D1:AA1B -  -  -  -  
   19 D1:AA1B -  -  -  -  ErrorHandler:
   20 D1:AA1B F5 -  -  -  		push 	af 						; save error ID
   21 D1:AA1C -  -  -  -  
   22 D1:AA1C 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AA20 6F -  -  -  		ld 		l,a
   24 D1:AA21 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AA22 29 -  -  -  		add 	hl,hl 		
   26 D1:AA23 11 30 AF D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AA27 19 -  -  -  		add 	hl,de
   28 D1:AA28 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AA2A CD 0B AE D1 		call 	PrintStringAtHL
   30 D1:AA2E -  -  -  -  		;
   31 D1:AA2E F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AA2F B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AA30 28 2F -  -  		jr 		z,_EHExit
   34 D1:AA32 -  -  -  -  		;
   35 D1:AA32 DD 2A CD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AA37 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AA3A B7 -  -  -  		or 		a
   38 D1:AA3B 28 24 -  -  		jr 		z,_EHExit
   39 D1:AA3D -  -  -  -  
   40 D1:AA3D 21 69 AA D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AA41 CD 0B AE D1 		call 	PrintStringAtHL 
   42 D1:AA45 -  -  -  -  		
   43 D1:AA45 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AA46 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AA4A D9 -  -  -  		exx 
   46 D1:AA4B DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AA4E DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AA51 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AA53 01 F1 A8 D1 		ld 		bc,ConvertBuffer
   50 D1:AA57 CD F8 B2 D1 		call 	Int32ToString
   51 D1:AA5B C5 -  -  -  		push 	bc
   52 D1:AA5C E1 -  -  -  		pop 	hl
   53 D1:AA5D CD 0B AE D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AA61 -  -  -  -  _EHExit:		
   55 D1:AA61 CD 92 B3 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AA65 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AA69 -  -  -  -  
   58 D1:AA69 -  -  -  -  _EHAtText:
   59 D1:AA69 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AA73 -  -  -  -  
   61 D1:AA73 -  -  -  -  NotImplemented:
   62 D1:AA73 3E 04 C3 1B 
              AA D1 -  -  		ERR_DISABLED
   63 D1:AA79 -  -  -  -  TypeMismatch:
   64 D1:AA79 3E 02 C3 1B 
              AA D1 -  -  		ERR_BADTYPE
   65 D1:AA7F -  -  -  -  BadValue:
   66 D1:AA7F 3E 03 C3 1B 
              AA D1 -  -  		ERR_BADVALUE
   67 D1:AA85 -  -  -  -  SyntaxError:
   68 D1:AA85 3E 0B C3 1B 
              AA D1 -  -  		ERR_SYNTAX
   69 D1:AA8B -  -  -  -  						
   70 D1:AA8B -  -  -  -  ; ***************************************************************************************
   71 D1:AA8B -  -  -  -  ;
   72 D1:AA8B -  -  -  -  ;									Changes and Updates
   73 D1:AA8B -  -  -  -  ;
   74 D1:AA8B -  -  -  -  ; ***************************************************************************************
   75 D1:AA8B -  -  -  -  ;
   76 D1:AA8B -  -  -  -  ;		Date			Notes
   77 D1:AA8B -  -  -  -  ;		==== 			=====
   78 D1:AA8B -  -  -  -  ;
   79 D1:AA8B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AA8B -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AA8B -  -  -  -  ; ***************************************************************************************
    2 D1:AA8B -  -  -  -  ; ***************************************************************************************
    3 D1:AA8B -  -  -  -  ;
    4 D1:AA8B -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AA8B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA8B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA8B -  -  -  -  ;		Reviewed :	No
    8 D1:AA8B -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AA8B -  -  -  -  ;
   10 D1:AA8B -  -  -  -  ; ***************************************************************************************
   11 D1:AA8B -  -  -  -  ; ***************************************************************************************
   12 D1:AA8B -  -  -  -  
   13 D1:AA8B -  -  -  -  ; ***************************************************************************************
   14 D1:AA8B -  -  -  -  ;
   15 D1:AA8B -  -  -  -  ; 									Addition
   16 D1:AA8B -  -  -  -  ;
   17 D1:AA8B -  -  -  -  ; ***************************************************************************************
   18 D1:AA8B -  -  -  -  
   19 D1:AA8B -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AA8B CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 77 
              B2 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AA99 -  -  -  -  
   22 D1:AA99 -  -  -  -  ; ***************************************************************************************
   23 D1:AA99 -  -  -  -  ;
   24 D1:AA99 -  -  -  -  ; 									Subtraction
   25 D1:AA99 -  -  -  -  ;
   26 D1:AA99 -  -  -  -  ; ***************************************************************************************
   27 D1:AA99 -  -  -  -  
   28 D1:AA99 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AA99 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 7F 
              B2 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AAA7 -  -  -  -  
   31 D1:AAA7 -  -  -  -  ; ***************************************************************************************
   32 D1:AAA7 -  -  -  -  ;
   33 D1:AAA7 -  -  -  -  ; 									  Multiply
   34 D1:AAA7 -  -  -  -  ;
   35 D1:AAA7 -  -  -  -  ; ***************************************************************************************
   36 D1:AAA7 -  -  -  -  
   37 D1:AAA7 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AAA7 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 3E 
              B2 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AAB5 -  -  -  -  
   40 D1:AAB5 -  -  -  -  ; ***************************************************************************************
   41 D1:AAB5 -  -  -  -  ;
   42 D1:AAB5 -  -  -  -  ; 									  Divide
   43 D1:AAB5 -  -  -  -  ;
   44 D1:AAB5 -  -  -  -  ; ***************************************************************************************
   45 D1:AAB5 -  -  -  -  
   46 D1:AAB5 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AAB5 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 3F 
              B1 D1 -  -  		IntegerDispatch(Int32SDivide)
   48 D1:AAC3 -  -  -  -  
   49 D1:AAC3 -  -  -  -  ; ***************************************************************************************
   50 D1:AAC3 -  -  -  -  ;
   51 D1:AAC3 -  -  -  -  ; 									  Modulus
   52 D1:AAC3 -  -  -  -  ;
   53 D1:AAC3 -  -  -  -  ; ***************************************************************************************
   54 D1:AAC3 -  -  -  -  
   55 D1:AAC3 -  -  -  -  ALUModulus: 	;; [mod]
   56 D1:AAC3 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 42 
              B1 D1 -  -  		IntegerDispatch(Int32Modulus)
   57 D1:AAD1 -  -  -  -  
   58 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   59 D1:AAD1 -  -  -  -  ;
   60 D1:AAD1 -  -  -  -  ; 									  Logical
   61 D1:AAD1 -  -  -  -  ;
   62 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   63 D1:AAD1 -  -  -  -  
   64 D1:AAD1 -  -  -  -  ALUAnd: 		;; [and]
   65 D1:AAD1 CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 89 
              B2 D1 -  -  		IntegerDispatch(Int32And)
   66 D1:AADF -  -  -  -  
   67 D1:AADF -  -  -  -  ALUOr: 			;; [or]
   68 D1:AADF CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 96 
              B2 D1 -  -  		IntegerDispatch(Int32Or)
   69 D1:AAED -  -  -  -  
   70 D1:AAED -  -  -  -  ALUXor: 		;; [eor]
   71 D1:AAED CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 A3 
              B2 D1 -  -  		IntegerDispatch(Int32Xor)
   72 D1:AAFB -  -  -  -  
   73 D1:AAFB -  -  -  -  ; ***************************************************************************************
   74 D1:AAFB -  -  -  -  ;
   75 D1:AAFB -  -  -  -  ;									Changes and Updates
   76 D1:AAFB -  -  -  -  ;
   77 D1:AAFB -  -  -  -  ; ***************************************************************************************
   78 D1:AAFB -  -  -  -  ;
   79 D1:AAFB -  -  -  -  ;		Date			Notes
   80 D1:AAFB -  -  -  -  ;		==== 			=====
   81 D1:AAFB -  -  -  -  ;
   82 D1:AAFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 D1:AAFB -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AAFB -  -  -  -  ; ***************************************************************************************
    2 D1:AAFB -  -  -  -  ; ***************************************************************************************
    3 D1:AAFB -  -  -  -  ;
    4 D1:AAFB -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AAFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAFB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAFB -  -  -  -  ;		Reviewed :	No
    8 D1:AAFB -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AAFB -  -  -  -  ;
   10 D1:AAFB -  -  -  -  ; ***************************************************************************************
   11 D1:AAFB -  -  -  -  ; ***************************************************************************************
   12 D1:AAFB -  -  -  -  
   13 D1:AAFB -  -  -  -  ; ***************************************************************************************
   14 D1:AAFB -  -  -  -  ;
   15 D1:AAFB -  -  -  -  ; 									<l> <op> <r>
   16 D1:AAFB -  -  -  -  ;
   17 D1:AAFB -  -  -  -  ; ***************************************************************************************
   18 D1:AAFB -  -  -  -  
   19 D1:AAFB -  -  -  -  ALULongReference:			;; [!]
   20 D1:AAFB CD 0B AB D1 		call 	BRGetAddress 				; calculate address
   21 D1:AAFF 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AB01 CB F9 -  -  		set 	CIsReference,c
   23 D1:AB03 C9 -  -  -  		ret
   24 D1:AB04 -  -  -  -  
   25 D1:AB04 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AB04 CD FB AA D1 		call 	ALULongReference
   27 D1:AB08 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AB0A C9 -  -  -  		ret
   29 D1:AB0B -  -  -  -  
   30 D1:AB0B -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AB0B CD A7 AB D1 
              78 B1 C2 79 
              AA D1 C3 19 
              AB D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AB19 -  -  -  -  _BRGAMain:		
   33 D1:AB19 CD 77 B2 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AB1D CD 8F AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AB21 C9 -  -  -  		ret
   36 D1:AB22 -  -  -  -  
   37 D1:AB22 -  -  -  -  ; ***************************************************************************************
   38 D1:AB22 -  -  -  -  ;
   39 D1:AB22 -  -  -  -  ;									Changes and Updates
   40 D1:AB22 -  -  -  -  ;
   41 D1:AB22 -  -  -  -  ; ***************************************************************************************
   42 D1:AB22 -  -  -  -  ;
   43 D1:AB22 -  -  -  -  ;		Date			Notes
   44 D1:AB22 -  -  -  -  ;		==== 			=====
   45 D1:AB22 -  -  -  -  ;
   46 D1:AB22 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB22 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AB22 -  -  -  -  ; ***************************************************************************************
    2 D1:AB22 -  -  -  -  ; ***************************************************************************************
    3 D1:AB22 -  -  -  -  ;
    4 D1:AB22 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AB22 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB22 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB22 -  -  -  -  ;		Reviewed :	No
    8 D1:AB22 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AB22 -  -  -  -  ;
   10 D1:AB22 -  -  -  -  ; ***************************************************************************************
   11 D1:AB22 -  -  -  -  ; ***************************************************************************************
   12 D1:AB22 -  -  -  -  
   13 D1:AB22 -  -  -  -  #macro compare_equals(n)
   14 D1:AB22             		call 	CompareBaseCode
   15 D1:AB22             		cp 		n
   16 D1:AB22             		jr 		z,UnaryInt32True
   17 D1:AB22             		jr 		UnaryInt32False
   18 D1:AB22             #endmacro
   19 D1:AB22 -  -  -  -  
   20 D1:AB22 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AB22             		call 	CompareBaseCode
   22 D1:AB22             		cp 		n
   23 D1:AB22             		jr 		nz,UnaryInt32True
   24 D1:AB22             		jr 		UnaryInt32False
   25 D1:AB22             #endmacro
   26 D1:AB22 -  -  -  -  
   27 D1:AB22 -  -  -  -  ; ***************************************************************************************
   28 D1:AB22 -  -  -  -  ;
   29 D1:AB22 -  -  -  -  ; 								Return True/False
   30 D1:AB22 -  -  -  -  ;
   31 D1:AB22 -  -  -  -  ; ***************************************************************************************
   32 D1:AB22 -  -  -  -  
   33 D1:AB22 -  -  -  -  UnaryInt32True:	
   34 D1:AB22 3E FF -  -  		ld 		a,255
   35 D1:AB24 18 01 -  -  		jr 		_Int32Logical
   36 D1:AB26 -  -  -  -  UnaryInt32False: 
   37 D1:AB26 AF -  -  -  		xor 	a
   38 D1:AB27 -  -  -  -  _Int32Logical:
   39 D1:AB27 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AB28 67 -  -  -  		ld 		h,a
   41 D1:AB29 D9 -  -  -  		exx
   42 D1:AB2A 6F -  -  -  		ld 		l,a
   43 D1:AB2B 67 -  -  -  		ld 		h,a
   44 D1:AB2C D9 -  -  -  		exx
   45 D1:AB2D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AB2F C9 -  -  -  		ret
   47 D1:AB30 -  -  -  -  
   48 D1:AB30 -  -  -  -  ; ***************************************************************************************
   49 D1:AB30 -  -  -  -  ;
   50 D1:AB30 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AB30 -  -  -  -  ;
   52 D1:AB30 -  -  -  -  ; ***************************************************************************************
   53 D1:AB30 -  -  -  -  
   54 D1:AB30 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AB30 CD 6C AB D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AB3A -  -  -  -  
   57 D1:AB3A -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AB3A CD 6C AB D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AB44 -  -  -  -  
   60 D1:AB44 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AB44 CD 6C AB D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AB4E -  -  -  -  
   63 D1:AB4E -  -  -  -  ; ***************************************************************************************
   64 D1:AB4E -  -  -  -  ;
   65 D1:AB4E -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AB4E -  -  -  -  ;
   67 D1:AB4E -  -  -  -  ; ***************************************************************************************
   68 D1:AB4E -  -  -  -  
   69 D1:AB4E -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AB4E CD 6C AB D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AB58 -  -  -  -  
   72 D1:AB58 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AB58 CD 6C AB D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AB62 -  -  -  -  
   75 D1:AB62 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AB62 CD 6C AB D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AB6C -  -  -  -  
   78 D1:AB6C -  -  -  -  ; ***************************************************************************************
   79 D1:AB6C -  -  -  -  ;
   80 D1:AB6C -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AB6C -  -  -  -  ;
   82 D1:AB6C -  -  -  -  ; ***************************************************************************************
   83 D1:AB6C -  -  -  -  
   84 D1:AB6C -  -  -  -  CompareBaseCode:
   85 D1:AB6C CD A7 AB D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AB70 -  -  -  -  
   87 D1:AB70 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AB71 A1 -  -  -  		and 	c
   89 D1:AB72 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AB74 C2 86 AB D1 		jp 		nz,StringCompare
   91 D1:AB78 -  -  -  -  
   92 D1:AB78 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AB79 B1 -  -  -  		or 		c
   94 D1:AB7A CB 47 -  -  		bit 	CIsString,a 
   95 D1:AB7C CA B7 B2 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AB80 -  -  -  -  
   97 D1:AB80 3E 02 C3 1B 
              AA D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AB86 -  -  -  -  ;
   99 D1:AB86 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AB86 -  -  -  -  ;
  101 D1:AB86 -  -  -  -  StringCompare:
  102 D1:AB86 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AB87 BE -  -  -  		cp 		(hl)
  104 D1:AB88 38 0C -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AB8A 20 07 -  -  		jr 		nz,_SCLess
  106 D1:AB8C 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AB8D 23 -  -  -  		inc 	hl
  108 D1:AB8E FE 20 -  -  		cp 		' '
  109 D1:AB90 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AB92 C9 -  -  -  		ret
  111 D1:AB93 -  -  -  -  
  112 D1:AB93 -  -  -  -  _SCLess:
  113 D1:AB93 3E FF -  -  		ld 		a,$FF
  114 D1:AB95 C9 -  -  -  		ret
  115 D1:AB96 -  -  -  -  _SCGreater:
  116 D1:AB96 3E 01 -  -  		ld 		a,1
  117 D1:AB98 C9 -  -  -  		ret
  118 D1:AB99 -  -  -  -  
  119 D1:AB99 3E 0C C3 1B 
              AA D1 -  -  		ERR_TODO()
  120 D1:AB9F -  -  -  -  
  121 D1:AB9F -  -  -  -  ; ***************************************************************************************
  122 D1:AB9F -  -  -  -  ;
  123 D1:AB9F -  -  -  -  ;									Changes and Updates
  124 D1:AB9F -  -  -  -  ;
  125 D1:AB9F -  -  -  -  ; ***************************************************************************************
  126 D1:AB9F -  -  -  -  ;
  127 D1:AB9F -  -  -  -  ;		Date			Notes
  128 D1:AB9F -  -  -  -  ;		==== 			=====
  129 D1:AB9F -  -  -  -  ;
  130 D1:AB9F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AB9F -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AB9F -  -  -  -  ; ***************************************************************************************
    2 D1:AB9F -  -  -  -  ; ***************************************************************************************
    3 D1:AB9F -  -  -  -  ;
    4 D1:AB9F -  -  -  -  ;		Name : 		utility.asm
    5 D1:AB9F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB9F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB9F -  -  -  -  ;		Reviewed :	No
    8 D1:AB9F -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AB9F -  -  -  -  ;
   10 D1:AB9F -  -  -  -  ; ***************************************************************************************
   11 D1:AB9F -  -  -  -  ; ***************************************************************************************
   12 D1:AB9F -  -  -  -  
   13 D1:AB9F -  -  -  -  ; ***************************************************************************************
   14 D1:AB9F -  -  -  -  ;
   15 D1:AB9F -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AB9F -  -  -  -  ;
   17 D1:AB9F -  -  -  -  ; ***************************************************************************************
   18 D1:AB9F -  -  -  -  
   19 D1:AB9F -  -  -  -  SwapHLDE:
   20 D1:AB9F EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ABA0 D9 -  -  -  			exx
   22 D1:ABA1 EB -  -  -  			ex 		de,hl
   23 D1:ABA2 D9 -  -  -  			exx
   24 D1:ABA3 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ABA4 41 -  -  -  			ld 		b,c
   26 D1:ABA5 4F -  -  -  			ld 		c,a
   27 D1:ABA6 C9 -  -  -  			ret
   28 D1:ABA7 -  -  -  -  
   29 D1:ABA7 -  -  -  -  ; ***************************************************************************************
   30 D1:ABA7 -  -  -  -  ;
   31 D1:ABA7 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ABA7 -  -  -  -  ;
   33 D1:ABA7 -  -  -  -  ; ***************************************************************************************
   34 D1:ABA7 -  -  -  -  
   35 D1:ABA7 -  -  -  -  DereferenceBoth:
   36 D1:ABA7 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ABA9 C4 62 AC D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ABAD CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ABAF C8 -  -  -  			ret 	z
   40 D1:ABB0 CD 9F AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ABB4 CD 62 AC D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ABB8 CD 9F AB D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ABBC C9 -  -  -  			ret
   44 D1:ABBD -  -  -  -  
   45 D1:ABBD -  -  -  -  ; ***************************************************************************************
   46 D1:ABBD -  -  -  -  ;
   47 D1:ABBD -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ABBD -  -  -  -  ;
   49 D1:ABBD -  -  -  -  ; ***************************************************************************************
   50 D1:ABBD -  -  -  -  
   51 D1:ABBD -  -  -  -  NegateHLHL:	
   52 D1:ABBD CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ABBF C2 79 AA D1 			jp 		nz,TypeMismatch
   54 D1:ABC3 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ABC5 C4 62 AC D1 			call 	nz,Dereference 			; if required.
   56 D1:ABC9 CD E1 B2 D1 			call 	Int32Negate
   57 D1:ABCD C9 -  -  -  			ret
Listing for file "_build.asm"
   27 D1:ABCE -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ABCE -  -  -  -  ; ***************************************************************************************
    2 D1:ABCE -  -  -  -  ; ***************************************************************************************
    3 D1:ABCE -  -  -  -  ;
    4 D1:ABCE -  -  -  -  ;		Name : 		expression.asm
    5 D1:ABCE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABCE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABCE -  -  -  -  ;		Reviewed :	None
    8 D1:ABCE -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ABCE -  -  -  -  ;
   10 D1:ABCE -  -  -  -  ; ***************************************************************************************
   11 D1:ABCE -  -  -  -  ; ***************************************************************************************
   12 D1:ABCE -  -  -  -  
   13 D1:ABCE -  -  -  -  ; ***************************************************************************************
   14 D1:ABCE -  -  -  -  ;
   15 D1:ABCE -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ABCE -  -  -  -  ;
   17 D1:ABCE -  -  -  -  ; ***************************************************************************************
   18 D1:ABCE -  -  -  -  
   19 D1:ABCE -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ABCE AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ABCF -  -  -  -  EvaluateAtPrecedence:
   22 D1:ABCF F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ABD0 -  -  -  -  		;
   24 D1:ABD0 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ABD0 -  -  -  -  		;
   26 D1:ABD0 CD BE AC D1 		call 	EvaluateTerm 				; get term
   27 D1:ABD4 -  -  -  -  		;
   28 D1:ABD4 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ABD4 -  -  -  -  		;
   30 D1:ABD4 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ABD5 -  -  -  -  _EAPLoop:
   32 D1:ABD5 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ABD8 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ABDA D8 -  -  -  		ret 	c
   35 D1:ABDB FE 93 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ABDD D0 -  -  -  		ret 	nc
   37 D1:ABDE -  -  -  -  		;
   38 D1:ABDE -  -  -  -  		; 		Get the precedence.
   39 D1:ABDE -  -  -  -  		;
   40 D1:ABDE E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ABDF D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ABE1 21 20 AF D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ABE5 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ABE6 6F -  -  -  		ld 		l,a
   45 D1:ABE7 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ABE8 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ABE9 -  -  -  -  		;
   48 D1:ABE9 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ABE9 -  -  -  -  		;
   50 D1:ABE9 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ABEA BB -  -  -  		cp 		e
   52 D1:ABEB D0 -  -  -  		ret 	nc
   53 D1:ABEC -  -  -  -  
   54 D1:ABEC -  -  -  -  		;
   55 D1:ABEC -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ABEC -  -  -  -  		;
   57 D1:ABEC D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ABED -  -  -  -  		;
   59 D1:ABED DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ABF0 F5 -  -  -  		push 	af
   61 D1:ABF1 -  -  -  -  		;
   62 D1:ABF1 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ABF2 D9 -  -  -  		exx 								; save HL'
   64 D1:ABF3 E5 -  -  -  		push 	hl
   65 D1:ABF4 D9 -  -  -  		exx 								
   66 D1:ABF5 E5 -  -  -  		push 	hl 							; save HL
   67 D1:ABF6 -  -  -  -  		;
   68 D1:ABF6 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ABF8 -  -  -  -  		;
   70 D1:ABF8 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ABF8 -  -  -  -  		;
   72 D1:ABF8 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ABF9 CD CF AB D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ABFD -  -  -  -  		;
   75 D1:ABFD -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ABFD -  -  -  -  		;
   77 D1:ABFD 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ABFE -  -  -  -  
   79 D1:ABFE EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ABFF E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AC00 D9 -  -  -  		exx
   82 D1:AC01 EB -  -  -  		ex 		de,hl
   83 D1:AC02 E1 -  -  -  		pop 	hl
   84 D1:AC03 D9 -  -  -  		exx
   85 D1:AC04 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AC05 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AC06 -  -  -  -  		;
   88 D1:AC06 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AC06 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AC06 -  -  -  -  		;
   91 D1:AC06 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AC07 -  -  -  -  		;
   93 D1:AC07 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AC07 -  -  -  -  		;
   95 D1:AC07 D5 -  -  -  		push 	de
   96 D1:AC08 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AC09 E6 7F 21 00 
              00 00 6F 29 
              29 11 36 B0 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AC1E E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AC1F D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AC20 CD D5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AC24 -  -  -  -  		;
  102 D1:AC24 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AC25 -  -  -  -  		;
  104 D1:AC25 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AC27 -  -  -  -  
  106 D1:AC27 -  -  -  -  ; ***************************************************************************************
  107 D1:AC27 -  -  -  -  ;
  108 D1:AC27 -  -  -  -  ;									Changes and Updates
  109 D1:AC27 -  -  -  -  ;
  110 D1:AC27 -  -  -  -  ; ***************************************************************************************
  111 D1:AC27 -  -  -  -  ;
  112 D1:AC27 -  -  -  -  ;		Date			Notes
  113 D1:AC27 -  -  -  -  ;		==== 			=====
  114 D1:AC27 -  -  -  -  ;
  115 D1:AC27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC27 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AC27 -  -  -  -  ; ***************************************************************************************
    2 D1:AC27 -  -  -  -  ; ***************************************************************************************
    3 D1:AC27 -  -  -  -  ;
    4 D1:AC27 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AC27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC27 -  -  -  -  ;		Reviewed :	No
    8 D1:AC27 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AC27 -  -  -  -  ;
   10 D1:AC27 -  -  -  -  ; ***************************************************************************************
   11 D1:AC27 -  -  -  -  ; ***************************************************************************************
   12 D1:AC27 -  -  -  -  
   13 D1:AC27 -  -  -  -  ; ***************************************************************************************
   14 D1:AC27 -  -  -  -  ;
   15 D1:AC27 -  -  -  -  ; 						Evaluate and dereference an expression
   16 D1:AC27 -  -  -  -  ;
   17 D1:AC27 -  -  -  -  ; ***************************************************************************************
   18 D1:AC27 -  -  -  -  
   19 D1:AC27 -  -  -  -  EvaluateValue:
   20 D1:AC27 CD CE AB D1 		call 	EvaluateAtPrecedence0
   21 D1:AC2B C3 62 AC D1 		jp 		Dereference
   22 D1:AC2F -  -  -  -  
   23 D1:AC2F -  -  -  -  ; ***************************************************************************************
   24 D1:AC2F -  -  -  -  ;
   25 D1:AC2F -  -  -  -  ; 									Evaluate a number
   26 D1:AC2F -  -  -  -  ;
   27 D1:AC2F -  -  -  -  ; ***************************************************************************************
   28 D1:AC2F -  -  -  -  
   29 D1:AC2F -  -  -  -  EvaluateInteger:
   30 D1:AC2F CD 27 AC D1 		call 	EvaluateValue
   31 D1:AC33 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   32 D1:AC35 C8 -  -  -  		ret 	z
   33 D1:AC36 C3 79 AA D1 		jp 		TypeMismatch
   34 D1:AC3A -  -  -  -  
   35 D1:AC3A -  -  -  -  ; ***************************************************************************************
   36 D1:AC3A -  -  -  -  ;
   37 D1:AC3A -  -  -  -  ; 									Evaluate an 8 bit integer
   38 D1:AC3A -  -  -  -  ;
   39 D1:AC3A -  -  -  -  ; ***************************************************************************************
   40 D1:AC3A -  -  -  -  
   41 D1:AC3A -  -  -  -  Evaluate8BitInteger:
   42 D1:AC3A CD 2F AC D1 		call 	EvaluateInteger
   43 D1:AC3E D9 -  -  -  		exx  								; check if upper 3 bytes zero
   44 D1:AC3F 7C -  -  -  		ld 		a,h
   45 D1:AC40 B5 -  -  -  		or 		l
   46 D1:AC41 D9 -  -  -  		exx 	
   47 D1:AC42 B4 -  -  -  		or 		h
   48 D1:AC43 C2 7F AA D1 		jp 		nz,BadValue
   49 D1:AC47 7D -  -  -  		ld 		a,l 						; return integer in A
   50 D1:AC48 C9 -  -  -  		ret
   51 D1:AC49 -  -  -  -  		
   52 D1:AC49 -  -  -  -  ; ***************************************************************************************
   53 D1:AC49 -  -  -  -  ;
   54 D1:AC49 -  -  -  -  ; 									Evaluate a string
   55 D1:AC49 -  -  -  -  ;
   56 D1:AC49 -  -  -  -  ; ***************************************************************************************
   57 D1:AC49 -  -  -  -  
   58 D1:AC49 -  -  -  -  EvaluateStringOnly:
   59 D1:AC49 CD 27 AC D1 		call 	EvaluateValue
   60 D1:AC4D CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   61 D1:AC4F CA 79 AA D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   62 D1:AC53 C9 -  -  -  		ret
   63 D1:AC54 -  -  -  -  
   64 D1:AC54 -  -  -  -  ; ***************************************************************************************
   65 D1:AC54 -  -  -  -  ;
   66 D1:AC54 -  -  -  -  ; 								Return 8/16 bit constant
   67 D1:AC54 -  -  -  -  ;
   68 D1:AC54 -  -  -  -  ; ***************************************************************************************
   69 D1:AC54 -  -  -  -  
   70 D1:AC54 -  -  -  -  Return8BitConstant:
   71 D1:AC54 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   72 D1:AC58 6F -  -  -  		ld 		l,a
   73 D1:AC59 -  -  -  -  Return16BitConstant:
   74 D1:AC59 D9 -  -  -  		exx 								; clear HL'
   75 D1:AC5A 21 00 00 00 		ld 		hl,0
   76 D1:AC5E D9 -  -  -  		exx
   77 D1:AC5F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
   78 D1:AC61 C9 -  -  -  		ret
   79 D1:AC62 -  -  -  -  
   80 D1:AC62 -  -  -  -  ; ***************************************************************************************
   81 D1:AC62 -  -  -  -  ;
   82 D1:AC62 -  -  -  -  ;									Changes and Updates
   83 D1:AC62 -  -  -  -  ;
   84 D1:AC62 -  -  -  -  ; ***************************************************************************************
   85 D1:AC62 -  -  -  -  ;
   86 D1:AC62 -  -  -  -  ;		Date			Notes
   87 D1:AC62 -  -  -  -  ;		==== 			=====
   88 D1:AC62 -  -  -  -  ;
   89 D1:AC62 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AC62 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AC62 -  -  -  -  ; ***************************************************************************************
    2 D1:AC62 -  -  -  -  ; ***************************************************************************************
    3 D1:AC62 -  -  -  -  ;
    4 D1:AC62 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AC62 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC62 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AC62 -  -  -  -  ;		Reviewed :	No
    8 D1:AC62 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AC62 -  -  -  -  ;
   10 D1:AC62 -  -  -  -  ; ***************************************************************************************
   11 D1:AC62 -  -  -  -  ; ***************************************************************************************
   12 D1:AC62 -  -  -  -  
   13 D1:AC62 -  -  -  -  ; ***************************************************************************************
   14 D1:AC62 -  -  -  -  ;
   15 D1:AC62 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AC62 -  -  -  -  ;
   17 D1:AC62 -  -  -  -  ; ***************************************************************************************
   18 D1:AC62 -  -  -  -  
   19 D1:AC62 -  -  -  -  Dereference:
   20 D1:AC62 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AC64 C8 -  -  -  		ret 	z
   22 D1:AC65 -  -  -  -  
   23 D1:AC65 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AC67 -  -  -  -  		
   25 D1:AC67 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AC69 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AC6B -  -  -  -  
   28 D1:AC6B CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AC6D 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AC6F -  -  -  -  
   31 D1:AC6F E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AC70 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AC72 D9 -  -  -  		exx
   34 D1:AC73 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AC74 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AC75 23 -  -  -  		inc  	hl
   37 D1:AC76 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AC78 D9 -  -  -  		exx 								; fix back
   39 D1:AC79 C9 -  -  -  		ret
   40 D1:AC7A -  -  -  -  
   41 D1:AC7A -  -  -  -  _DeRefByte:		
   42 D1:AC7A 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AC7B 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AC7F 6F -  -  -  		ld	 	l,a
   45 D1:AC80 D9 -  -  -  		exx
   46 D1:AC81 21 00 00 00 		ld 		hl,$0000
   47 D1:AC85 D9 -  -  -  		exx
   48 D1:AC86 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AC88 C9 -  -  -  		ret
   50 D1:AC89 -  -  -  -  
   51 D1:AC89 -  -  -  -  _DRInternal:
   52 D1:AC89 3E 04 C3 1B 
              AA D1 -  -  		ERR_DISABLED
   53 D1:AC8F -  -  -  -  
   54 D1:AC8F -  -  -  -  ; ***************************************************************************************
   55 D1:AC8F -  -  -  -  ;
   56 D1:AC8F -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AC8F -  -  -  -  ;
   58 D1:AC8F -  -  -  -  ; ***************************************************************************************
   59 D1:AC8F -  -  -  -  
   60 D1:AC8F -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AC8F -  -  -  -  		#ifdef EZ80
   62 D1:AC8F 22 DB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AC93 D9 -  -  -  		exx
   64 D1:AC94 22 DD A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AC98 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AC9C D9 -  -  -  		exx
   67 D1:AC9D 2A DB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ACA1 -  -  -  -  		#endif
   69 D1:ACA1 C9 -  -  -  		ret
   70 D1:ACA2 -  -  -  -  
   71 D1:ACA2 -  -  -  -  ; ***************************************************************************************
   72 D1:ACA2 -  -  -  -  ;
   73 D1:ACA2 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ACA2 -  -  -  -  ;
   75 D1:ACA2 -  -  -  -  ; ***************************************************************************************
   76 D1:ACA2 -  -  -  -  
   77 D1:ACA2 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ACA2 -  -  -  -  		#ifdef EZ80
   79 D1:ACA2 22 DB A8 D1 		ld 		(AConvert),hl
   80 D1:ACA6 21 00 00 00 		ld 		hl,$0000
   81 D1:ACAA 22 DE A8 D1 		ld 		(AConvert+3),hl
   82 D1:ACAE D9 -  -  -  		exx
   83 D1:ACAF 2A DD A8 D1 		ld 		hl,(AConvert+2)
   84 D1:ACB3 D9 -  -  -  		exx
   85 D1:ACB4 AF -  -  -  		xor 	a
   86 D1:ACB5 32 DD A8 D1 		ld 		(AConvert+2),a
   87 D1:ACB9 2A DB A8 D1 		ld 		hl,(AConvert)
   88 D1:ACBD -  -  -  -  		#endif
   89 D1:ACBD C9 -  -  -  		ret
   90 D1:ACBE -  -  -  -  
   91 D1:ACBE -  -  -  -  ; ***************************************************************************************
   92 D1:ACBE -  -  -  -  ;
   93 D1:ACBE -  -  -  -  ;									Changes and Updates
   94 D1:ACBE -  -  -  -  ;
   95 D1:ACBE -  -  -  -  ; ***************************************************************************************
   96 D1:ACBE -  -  -  -  ;
   97 D1:ACBE -  -  -  -  ;		Date			Notes
   98 D1:ACBE -  -  -  -  ;		==== 			=====
   99 D1:ACBE -  -  -  -  ;
  100 D1:ACBE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:ACBE -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:ACBE -  -  -  -  ; ***************************************************************************************
    2 D1:ACBE -  -  -  -  ; ***************************************************************************************
    3 D1:ACBE -  -  -  -  ;
    4 D1:ACBE -  -  -  -  ;		Name : 		term.asm
    5 D1:ACBE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACBE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACBE -  -  -  -  ;		Reviewed :	No
    8 D1:ACBE -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:ACBE -  -  -  -  ;
   10 D1:ACBE -  -  -  -  ; ***************************************************************************************
   11 D1:ACBE -  -  -  -  ; ***************************************************************************************
   12 D1:ACBE -  -  -  -  
   13 D1:ACBE -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:ACBE             		add_hlhl_16
   15 D1:ACBE             		exx
   16 D1:ACBE             		adc_hlhl_16
   17 D1:ACBE             		exx
   18 D1:ACBE             #endmacro
   19 D1:ACBE -  -  -  -  
   20 D1:ACBE -  -  -  -  ; ***************************************************************************************
   21 D1:ACBE -  -  -  -  ;
   22 D1:ACBE -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:ACBE -  -  -  -  ;
   24 D1:ACBE -  -  -  -  ; ***************************************************************************************
   25 D1:ACBE -  -  -  -  ;
   26 D1:ACBE -  -  -  -  ; 		Terms can be:
   27 D1:ACBE -  -  -  -  ;
   28 D1:ACBE -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:ACBE -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:ACBE -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:ACBE -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:ACBE -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:ACBE -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:ACBE -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:ACBE -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:ACBE -  -  -  -  ; 														reference of some sort.
   37 D1:ACBE -  -  -  -  ;
   38 D1:ACBE -  -  -  -  ; ***************************************************************************************
   39 D1:ACBE -  -  -  -  
   40 D1:ACBE -  -  -  -  EvaluateTerm:		
   41 D1:ACBE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:ACC0 D9 -  -  -  		exx
   43 D1:ACC1 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:ACC5 D9 -  -  -  		exx
   45 D1:ACC6 21 00 00 00 		ld 		hl,$0000		
   46 D1:ACCA -  -  -  -  		;
   47 D1:ACCA DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:ACCD FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:ACCF 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:ACD1 DA 89 AD D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:ACD5 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:ACD7 C2 2D AD D1 		jp 		nz,_ETFoundKeyword 
   53 D1:ACDB -  -  -  -  		;
   54 D1:ACDB -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:ACDB -  -  -  -  		;
   56 D1:ACDB -  -  -  -  _ETIntegerConstant:
   57 D1:ACDB -  -  -  -  		;
   58 D1:ACDB -  -  -  -  _ETIntegerLoop:		
   59 D1:ACDB DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:ACDE E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:ACE0 B5 -  -  -  		or 		l 							; or into L
   62 D1:ACE1 6F -  -  -  		ld 		l,a
   63 D1:ACE2 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:ACE4 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:ACE7 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:ACE9 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:ACEB D8 -  -  -  		ret 	c
   68 D1:ACEC -  -  -  -  
   69 D1:ACEC 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:ACF3 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:ACFA 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AD01 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AD08 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AD0F 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AD16 -  -  -  -  
   76 D1:AD16 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AD18 -  -  -  -  		;
   78 D1:AD18 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AD18 -  -  -  -  		;
   80 D1:AD18 -  -  -  -  _ETStringMarker:		
   81 D1:AD18 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AD1A DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AD1C DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AD1E E1 -  -  -  		pop 	hl
   85 D1:AD1F 11 00 00 00 		ld 		de,$0000
   86 D1:AD23 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AD26 DD 19 -  -  		add 	ix,de
   88 D1:AD28 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AD2A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AD2C C9 -  -  -  		ret
   91 D1:AD2D -  -  -  -  		;
   92 D1:AD2D -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AD2D -  -  -  -  		;
   94 D1:AD2D -  -  -  -  _ETFoundKeyword:
   95 D1:AD2D DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AD2F FE 93 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AD31 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AD33 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AD35 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AD37 -  -  -  -  		;
  101 D1:AD37 -  -  -  -  		;		Unary group 0
  102 D1:AD37 -  -  -  -  		;
  103 D1:AD37 E6 7F 21 00 
              00 00 6F 29 
              29 11 36 B0 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AD4C C3 D5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AD50 -  -  -  -  
  106 D1:AD50 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AD50 FE 89 -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AD52 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AD54 -  -  -  -  		;
  110 D1:AD54 -  -  -  -  		; 		- term
  111 D1:AD54 -  -  -  -  		;
  112 D1:AD54 CD BE AC D1 		call 	EvaluateTerm 				; evaluate term
  113 D1:AD58 CD BD AB D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AD5C C9 -  -  -  		ret
  115 D1:AD5D -  -  -  -  		;
  116 D1:AD5D -  -  -  -  		;		! ? indirection check
  117 D1:AD5D -  -  -  -  		;
  118 D1:AD5D -  -  -  -  _ETCheckIndirection:	
  119 D1:AD5D FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AD5F 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AD61 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AD63 C2 85 AA D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AD67 -  -  -  -  		;
  124 D1:AD67 -  -  -  -  		; 		! ? indirection
  125 D1:AD67 -  -  -  -  		;
  126 D1:AD67 -  -  -  -  _ETIndirection:
  127 D1:AD67 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AD68 CD BE AC D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AD6C CD 62 AC D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AD70 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AD72 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AD74 CD 8F AC D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AD78 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AD79 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AD7B CB F9 -  -  		set 	CIsReference,c
  136 D1:AD7D FE 83 -  -  		cp 		KWD_PLING
  137 D1:AD7F C8 -  -  -  		ret 	z
  138 D1:AD80 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AD82 C9 -  -  -  		ret
  140 D1:AD83 -  -  -  -  _ETStringIndirect:
  141 D1:AD83 3E 02 C3 1B 
              AA D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AD89 -  -  -  -  		;
  143 D1:AD89 -  -  -  -  		; 		Found an identifier.
  144 D1:AD89 -  -  -  -  		;
  145 D1:AD89 -  -  -  -  _ETVariable:
  146 D1:AD89 3E 0C C3 1B 
              AA D1 -  -  		ERR_TODO
  147 D1:AD8F 3E 0D C3 1B 
              AA D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  148 D1:AD95 -  -  -  -  		
  149 D1:AD95 -  -  -  -  ; ***************************************************************************************
  150 D1:AD95 -  -  -  -  ;
  151 D1:AD95 -  -  -  -  ;									Changes and Updates
  152 D1:AD95 -  -  -  -  ;
  153 D1:AD95 -  -  -  -  ; ***************************************************************************************
  154 D1:AD95 -  -  -  -  ;
  155 D1:AD95 -  -  -  -  ;		Date			Notes
  156 D1:AD95 -  -  -  -  ;		==== 			=====
  157 D1:AD95 -  -  -  -  ;
  158 D1:AD95 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD95 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AD95 -  -  -  -  ; ***************************************************************************************
    2 D1:AD95 -  -  -  -  ; ***************************************************************************************
    3 D1:AD95 -  -  -  -  ;
    4 D1:AD95 -  -  -  -  ;		Name : 		page.asm
    5 D1:AD95 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD95 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD95 -  -  -  -  ;		Reviewed :	No
    8 D1:AD95 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AD95 -  -  -  -  ;
   10 D1:AD95 -  -  -  -  ; ***************************************************************************************
   11 D1:AD95 -  -  -  -  ; ***************************************************************************************
   12 D1:AD95 -  -  -  -  
   13 D1:AD95 -  -  -  -  ; ***************************************************************************************
   14 D1:AD95 -  -  -  -  ;
   15 D1:AD95 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AD95 -  -  -  -  ;
   17 D1:AD95 -  -  -  -  ; ***************************************************************************************
   18 D1:AD95 -  -  -  -  
   19 D1:AD95 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AD95 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AD99 D9 -  -  -  			exx
   22 D1:AD9A 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AD9E D9 -  -  -  			exx
   24 D1:AD9F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:ADA1 C9 -  -  -  			ret
   26 D1:ADA2 -  -  -  -  
   27 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   28 D1:ADA2 -  -  -  -  ;
   29 D1:ADA2 -  -  -  -  ;									Changes and Updates
   30 D1:ADA2 -  -  -  -  ;
   31 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   32 D1:ADA2 -  -  -  -  ;
   33 D1:ADA2 -  -  -  -  ;		Date			Notes
   34 D1:ADA2 -  -  -  -  ;		==== 			=====
   35 D1:ADA2 -  -  -  -  ;
   36 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   37 D1:ADA2 -  -  -  -  			
Listing for file "_build.asm"
   32 D1:ADA2 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:ADA2 -  -  -  -  ; ***************************************************************************************
    2 D1:ADA2 -  -  -  -  ; ***************************************************************************************
    3 D1:ADA2 -  -  -  -  ;
    4 D1:ADA2 -  -  -  -  ;		Name : 		simple.asm
    5 D1:ADA2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADA2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADA2 -  -  -  -  ;		Reviewed :	No
    8 D1:ADA2 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:ADA2 -  -  -  -  ;
   10 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   11 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   12 D1:ADA2 -  -  -  -  
   13 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   14 D1:ADA2 -  -  -  -  ;
   15 D1:ADA2 -  -  -  -  ;								( unary function (think about it)
   16 D1:ADA2 -  -  -  -  ;
   17 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   18 D1:ADA2 -  -  -  -  
   19 D1:ADA2 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:ADA2 CD CE AB D1 		call 	EvaluateAtPrecedence0
   21 D1:ADA6 C3 F3 A9 D1 		jp  	CheckRightBracket
   22 D1:ADAA -  -  -  -  
   23 D1:ADAA -  -  -  -  ; ***************************************************************************************
   24 D1:ADAA -  -  -  -  ;
   25 D1:ADAA -  -  -  -  ;									Handle &x
   26 D1:ADAA -  -  -  -  ;
   27 D1:ADAA -  -  -  -  ; ***************************************************************************************
   28 D1:ADAA -  -  -  -  
   29 D1:ADAA -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:ADAA DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:ADAD E6 C0 -  -  		and 		$C0
   32 D1:ADAF FE 40 -  -  		cp 			$40
   33 D1:ADB1 C2 85 AA D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:ADB5 C3 BE AC D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:ADB9 -  -  -  -  
   36 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   37 D1:ADB9 -  -  -  -  ;
   38 D1:ADB9 -  -  -  -  ;									Changes and Updates
   39 D1:ADB9 -  -  -  -  ;
   40 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   41 D1:ADB9 -  -  -  -  ;
   42 D1:ADB9 -  -  -  -  ;		Date			Notes
   43 D1:ADB9 -  -  -  -  ;		==== 			=====
   44 D1:ADB9 -  -  -  -  ;
   45 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   46 D1:ADB9 -  -  -  -  		
Listing for file "_build.asm"
   33 D1:ADB9 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:ADB9 -  -  -  -  ; ***************************************************************************************
    2 D1:ADB9 -  -  -  -  ; ***************************************************************************************
    3 D1:ADB9 -  -  -  -  ;
    4 D1:ADB9 -  -  -  -  ;		Name : 		clear.asm
    5 D1:ADB9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADB9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADB9 -  -  -  -  ;		Reviewed :	No
    8 D1:ADB9 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:ADB9 -  -  -  -  ;
   10 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   11 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   12 D1:ADB9 -  -  -  -  
   13 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   14 D1:ADB9 -  -  -  -  ;
   15 D1:ADB9 -  -  -  -  ;										CLEAR command
   16 D1:ADB9 -  -  -  -  ;
   17 D1:ADB9 -  -  -  -  ; ***************************************************************************************
   18 D1:ADB9 -  -  -  -  
   19 D1:ADB9 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:ADB9 -  -  -  -  		;
   21 D1:ADB9 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:ADB9 -  -  -  -  		;
   23 D1:ADB9 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:ADBD -  -  -  -  _CCFindLow:
   25 D1:ADBD 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:ADC1 5E -  -  -  		ld 		e,(hl)		
   27 D1:ADC2 19 -  -  -  		add 	hl,de
   28 D1:ADC3 7B -  -  -  		ld 		a,e
   29 D1:ADC4 B7 -  -  -  		or 		a
   30 D1:ADC5 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:ADC7 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 D1:ADC8 23 -  -  -  		inc 	hl
   33 D1:ADC9 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   34 D1:ADCD -  -  -  -  		;
   35 D1:ADCD -  -  -  -  		; 	 		Reset the language stack
   36 D1:ADCD -  -  -  -  		;
   37 D1:ADCD 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 D1:ADD1 -  -  -  -  		;
   39 D1:ADD1 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 D1:ADD3 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:ADD7 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:ADDB 19 -  -  -  		add 	hl,de
   43 D1:ADDC 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:ADDE 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:ADE2 -  -  -  -  		;
   46 D1:ADE2 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:ADE6 19 -  -  -  		add 	hl,de
   48 D1:ADE7 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:ADEB -  -  -  -  		;
   50 D1:ADEB -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 D1:ADEB -  -  -  -  		;
   52 D1:ADEB -  -  -  -  
   53 D1:ADEB -  -  -  -  		;
   54 D1:ADEB -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 D1:ADEB -  -  -  -  		;
   56 D1:ADEB -  -  -  -  
   57 D1:ADEB C9 -  -  -  		ret
   58 D1:ADEC -  -  -  -  
   59 D1:ADEC -  -  -  -  ; ***************************************************************************************
   60 D1:ADEC -  -  -  -  ;
   61 D1:ADEC -  -  -  -  ;									Changes and Updates
   62 D1:ADEC -  -  -  -  ;
   63 D1:ADEC -  -  -  -  ; ***************************************************************************************
   64 D1:ADEC -  -  -  -  ;
   65 D1:ADEC -  -  -  -  ;		Date			Notes
   66 D1:ADEC -  -  -  -  ;		==== 			=====
   67 D1:ADEC -  -  -  -  ;
   68 D1:ADEC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:ADEC -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:ADEC -  -  -  -  ; ***************************************************************************************
    2 D1:ADEC -  -  -  -  ; ***************************************************************************************
    3 D1:ADEC -  -  -  -  ;
    4 D1:ADEC -  -  -  -  ;		Name : 		instance.asm
    5 D1:ADEC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADEC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADEC -  -  -  -  ;		Reviewed :	No
    8 D1:ADEC -  -  -  -  ;		Purpose :	Instance handling
    9 D1:ADEC -  -  -  -  ;
   10 D1:ADEC -  -  -  -  ; ***************************************************************************************
   11 D1:ADEC -  -  -  -  ; ***************************************************************************************
   12 D1:ADEC -  -  -  -  
   13 D1:ADEC -  -  -  -  ; ***************************************************************************************
   14 D1:ADEC -  -  -  -  ;
   15 D1:ADEC -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:ADEC -  -  -  -  ;
   17 D1:ADEC -  -  -  -  ; ***************************************************************************************
   18 D1:ADEC -  -  -  -  
   19 D1:ADEC -  -  -  -  SetCurrentInstance:
   20 D1:ADEC ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:ADF1 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:ADF5 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:ADFA -  -  -  -  
   24 D1:ADFA C9 -  -  -  		ret
   25 D1:ADFB -  -  -  -  
   26 D1:ADFB -  -  -  -  
   27 D1:ADFB -  -  -  -  ; ***************************************************************************************
   28 D1:ADFB -  -  -  -  ;
   29 D1:ADFB -  -  -  -  ;									Changes and Updates
   30 D1:ADFB -  -  -  -  ;
   31 D1:ADFB -  -  -  -  ; ***************************************************************************************
   32 D1:ADFB -  -  -  -  ;
   33 D1:ADFB -  -  -  -  ;		Date			Notes
   34 D1:ADFB -  -  -  -  ;		==== 			=====
   35 D1:ADFB -  -  -  -  ;
   36 D1:ADFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:ADFB -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:ADFB -  -  -  -  ; ***************************************************************************************
    2 D1:ADFB -  -  -  -  ; ***************************************************************************************
    3 D1:ADFB -  -  -  -  ;
    4 D1:ADFB -  -  -  -  ;		Name : 		new.asm
    5 D1:ADFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADFB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADFB -  -  -  -  ;		Reviewed :	No
    8 D1:ADFB -  -  -  -  ;		Purpose :	New command.
    9 D1:ADFB -  -  -  -  ;
   10 D1:ADFB -  -  -  -  ; ***************************************************************************************
   11 D1:ADFB -  -  -  -  ; ***************************************************************************************
   12 D1:ADFB -  -  -  -  
   13 D1:ADFB -  -  -  -  ; ***************************************************************************************
   14 D1:ADFB -  -  -  -  ;
   15 D1:ADFB -  -  -  -  ;										NEW command
   16 D1:ADFB -  -  -  -  ;
   17 D1:ADFB -  -  -  -  ; ***************************************************************************************
   18 D1:ADFB -  -  -  -  
   19 D1:ADFB -  -  -  -  Command_NEW: 	;; [new]
   20 D1:ADFB 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:ADFF 36 00 -  -  		ld 		(hl),0
   22 D1:AE01 CD B9 AD D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:AE05 3E 00 C3 1B 
              AA D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:AE0B -  -  -  -  
   25 D1:AE0B -  -  -  -  ; ***************************************************************************************
   26 D1:AE0B -  -  -  -  ;
   27 D1:AE0B -  -  -  -  ;									Changes and Updates
   28 D1:AE0B -  -  -  -  ;
   29 D1:AE0B -  -  -  -  ; ***************************************************************************************
   30 D1:AE0B -  -  -  -  ;
   31 D1:AE0B -  -  -  -  ;		Date			Notes
   32 D1:AE0B -  -  -  -  ;		==== 			=====
   33 D1:AE0B -  -  -  -  ;
   34 D1:AE0B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AE0B -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:AE0B -  -  -  -  ; ***************************************************************************************
    2 D1:AE0B -  -  -  -  ; ***************************************************************************************
    3 D1:AE0B -  -  -  -  ;
    4 D1:AE0B -  -  -  -  ;		Name : 		utility.asm
    5 D1:AE0B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE0B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE0B -  -  -  -  ;		Reviewed :	No
    8 D1:AE0B -  -  -  -  ;		Purpose :	Utility routines
    9 D1:AE0B -  -  -  -  ;
   10 D1:AE0B -  -  -  -  ; ***************************************************************************************
   11 D1:AE0B -  -  -  -  ; ***************************************************************************************
   12 D1:AE0B -  -  -  -  
   13 D1:AE0B -  -  -  -  ; ***************************************************************************************
   14 D1:AE0B -  -  -  -  ;
   15 D1:AE0B -  -  -  -  ;							Print ASCIIZ string at HL
   16 D1:AE0B -  -  -  -  ;
   17 D1:AE0B -  -  -  -  ; ***************************************************************************************
   18 D1:AE0B -  -  -  -  
   19 D1:AE0B -  -  -  -  PrintStringAtHL:
   20 D1:AE0B 7E -  -  -  		ld 		a,(hl)
   21 D1:AE0C B7 -  -  -  		or 		a
   22 D1:AE0D C8 -  -  -  		ret 	z
   23 D1:AE0E CD 6A B3 D1 		call 	SYSPrintChar
   24 D1:AE12 23 -  -  -  		inc 	hl
   25 D1:AE13 18 F6 -  -  		jr 		PrintStringAtHL
   26 D1:AE15 -  -  -  -  
   27 D1:AE15 -  -  -  -  ; ***************************************************************************************
   28 D1:AE15 -  -  -  -  ;
   29 D1:AE15 -  -  -  -  ;									Changes and Updates
   30 D1:AE15 -  -  -  -  ;
   31 D1:AE15 -  -  -  -  ; ***************************************************************************************
   32 D1:AE15 -  -  -  -  ;
   33 D1:AE15 -  -  -  -  ;		Date			Notes
   34 D1:AE15 -  -  -  -  ;		==== 			=====
   35 D1:AE15 -  -  -  -  ;
   36 D1:AE15 -  -  -  -  ; ***************************************************************************************
   37 D1:AE15 -  -  -  -  		
Listing for file "_build.asm"
   37 D1:AE15 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:AE15 -  -  -  -  ;
    2 D1:AE15 -  -  -  -  ;	This file is automatically generated.
    3 D1:AE15 -  -  -  -  ;
    4 D1:AE15 -  -  -  -  ;
    5 D1:AE15 -  -  -  -  ;	Keywords for set 0
    6 D1:AE15 -  -  -  -  ;
    7 D1:AE15 -  -  -  -  KeywordsSet0:
    8 D1:AE15 01 20 -  -  	.db	1," "              ; $0080
    9 D1:AE17 01 20 -  -  	.db	1," "              ; $0081
   10 D1:AE19 01 20 -  -  	.db	1," "              ; $0082
   11 D1:AE1B 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:AE1D 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:AE1F 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:AE21 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:AE23 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:AE27 01 2B -  -  	.db	1,"+"              ; $0088
   17 D1:AE29 01 2D -  -  	.db	1,"-"              ; $0089
   18 D1:AE2B 02 3E 3D -  	.db	2,">="             ; $008a
   19 D1:AE2E 02 3C 3D -  	.db	2,"<="             ; $008b
   20 D1:AE31 01 3E -  -  	.db	1,">"              ; $008c
   21 D1:AE33 01 3C -  -  	.db	1,"<"              ; $008d
   22 D1:AE35 01 3D -  -  	.db	1,"="              ; $008e
   23 D1:AE37 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 D1:AE3A 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 D1:AE3E 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 D1:AE41 03 45 4F 52 	.db	3,"EOR"            ; $0092
   27 D1:AE45 01 26 -  -  	.db	1,"&"              ; $0093
   28 D1:AE47 01 28 -  -  	.db	1,"("              ; $0094
   29 D1:AE49 01 24 -  -  	.db	1,"$"              ; $0095
   30 D1:AE4B 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 D1:AE4F 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 D1:AE53 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 D1:AE57 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 D1:AE5B 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 D1:AE5F 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 D1:AE64 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 D1:AE68 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 D1:AE6D 01 29 -  -  	.db	1,")"              ; $009e
   39 D1:AE6F 01 2C -  -  	.db	1,","              ; $009f
   40 D1:AE71 01 3A -  -  	.db	1,":"              ; $00a0
   41 D1:AE73 01 3B -  -  	.db	1,";"              ; $00a1
   42 D1:AE75 01 27 -  -  	.db	1,"'"              ; $00a2
   43 D1:AE77 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 D1:AE7E 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 D1:AE84 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 D1:AE87 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 D1:AE8C 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 D1:AE91 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 D1:AE95 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 D1:AE98 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 D1:AE9D 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 D1:AEA2 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 D1:AEA6 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 D1:AEAB 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 D1:AEB3 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 D1:AEB9 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 D1:AEBD 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 D1:AEC1 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 D1:AEC5 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 D1:AEC9 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 D1:AECF 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 D1:AED4 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 D1:AED9 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 D1:AEDE 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 D1:AEE2 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 D1:AEE6 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 D1:AEEB 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 D1:AEF0 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 D1:AEF8 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 D1:AEFF 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 D1:AF05 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 D1:AF09 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 D1:AF0E 00 -  -  -  	.db	0
   74 D1:AF0F -  -  -  -  ;
   75 D1:AF0F -  -  -  -  ;	Keywords for set 1
   76 D1:AF0F -  -  -  -  ;
   77 D1:AF0F -  -  -  -  KeywordsSet1:
   78 D1:AF0F 00 -  -  -  	.db	0
   79 D1:AF10 -  -  -  -  ;
   80 D1:AF10 -  -  -  -  ;	Keywords for set 2
   81 D1:AF10 -  -  -  -  ;
   82 D1:AF10 -  -  -  -  KeywordsSet2:
   83 D1:AF10 00 -  -  -  	.db	0
Listing for file "_build.asm"
   38 D1:AF11 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:AF11 -  -  -  -  ;
    2 D1:AF11 -  -  -  -  ;	This file is automatically generated.
    3 D1:AF11 -  -  -  -  ;
    4 D1:AF11 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 D1:AF20 -  -  -  -  PrecedenceTable:
    6 D1:AF20 06 -  -  -  	.db	6	; $0083 !
    7 D1:AF21 06 -  -  -  	.db	6	; $0084 ?
    8 D1:AF22 05 -  -  -  	.db	5	; $0085 *
    9 D1:AF23 05 -  -  -  	.db	5	; $0086 /
   10 D1:AF24 05 -  -  -  	.db	5	; $0087 mod
   11 D1:AF25 04 -  -  -  	.db	4	; $0088 +
   12 D1:AF26 04 -  -  -  	.db	4	; $0089 -
   13 D1:AF27 03 -  -  -  	.db	3	; $008a >=
   14 D1:AF28 03 -  -  -  	.db	3	; $008b <=
   15 D1:AF29 03 -  -  -  	.db	3	; $008c >
   16 D1:AF2A 03 -  -  -  	.db	3	; $008d <
   17 D1:AF2B 03 -  -  -  	.db	3	; $008e =
   18 D1:AF2C 03 -  -  -  	.db	3	; $008f <>
   19 D1:AF2D 02 -  -  -  	.db	2	; $0090 and
   20 D1:AF2E 01 -  -  -  	.db	1	; $0091 or
   21 D1:AF2F 01 -  -  -  	.db	1	; $0092 eor
   22 D1:AF30 -  -  -  -  
Listing for file "_build.asm"
   39 D1:AF30 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:AF30 -  -  -  -  ;
    2 D1:AF30 -  -  -  -  ;	This is automatically generated.
    3 D1:AF30 -  -  -  -  ;
    4 D1:AF30 -  -  -  -  ErrorIDTable:
    5 D1:AF30 68 AF D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:AF34 6E AF D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:AF38 7F AF D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:AF3C 8D AF D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:AF40 97 AF D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:AF44 B1 AF D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:AF48 C2 AF D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:AF4C D0 AF D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:AF50 DE AF D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 D1:AF54 F4 AF D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 D1:AF58 02 B0 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 D1:AF5C 07 B0 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 D1:AF60 14 B0 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 D1:AF64 25 B0 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 D1:AF68 -  -  -  -  
   20 D1:AF68 -  -  -  -  ErrText_warmstart:
   21 D1:AF68 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 D1:AF6E -  -  -  -  ErrText_assert:
   23 D1:AF6E 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 D1:AF7F -  -  -  -  ErrText_badtype:
   25 D1:AF7F 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 D1:AF8D -  -  -  -  ErrText_badvalue:
   27 D1:AF8D 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 D1:AF97 -  -  -  -  ErrText_disabled:
   29 D1:AF97 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 D1:AFB1 -  -  -  -  ErrText_divzero:
   31 D1:AFB1 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 D1:AFC2 -  -  -  -  ErrText_memory:
   33 D1:AFC2 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 D1:AFD0 -  -  -  -  ErrText_nocomma:
   35 D1:AFD0 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 D1:AFDE -  -  -  -  ErrText_norbracket:
   37 D1:AFDE 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 D1:AFF4 -  -  -  -  ErrText_notref:
   39 D1:AFF4 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 D1:B002 -  -  -  -  ErrText_stop:
   41 D1:B002 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 D1:B007 -  -  -  -  ErrText_syntax:
   43 D1:B007 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 D1:B014 -  -  -  -  ErrText_todo:
   45 D1:B014 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 D1:B025 -  -  -  -  ErrText_unknownvar:
   47 D1:B025 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   40 D1:B036 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B036 -  -  -  -  ;
    2 D1:B036 -  -  -  -  ;	Vectors for set 0
    3 D1:B036 -  -  -  -  ;
    4 D1:B036 -  -  -  -  VectorsSet0:
    5 D1:B036 4D A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B03A A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B03E A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B042 FB AA D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B046 04 AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B04A A7 AA D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B04E B5 AA D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B052 C3 AA D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B056 8B AA D1 00 	addr(ALUAdd)                     ; $0088 +
   14 D1:B05A 99 AA D1 00 	addr(ALUSubtract)                ; $0089 -
   15 D1:B05E 62 AB D1 00 	addr(ALUCompareGreaterEqual)     ; $008a >=
   16 D1:B062 58 AB D1 00 	addr(ALUCompareLessEqual)        ; $008b <=
   17 D1:B066 44 AB D1 00 	addr(ALUCompareGreater)          ; $008c >
   18 D1:B06A 3A AB D1 00 	addr(ALUCompareLess)             ; $008d <
   19 D1:B06E 30 AB D1 00 	addr(ALUCompareEqual)            ; $008e =
   20 D1:B072 4E AB D1 00 	addr(ALUCompareNotEqual)         ; $008f <>
   21 D1:B076 D1 AA D1 00 	addr(ALUAnd)                     ; $0090 and
   22 D1:B07A DF AA D1 00 	addr(ALUOr)                      ; $0091 or
   23 D1:B07E ED AA D1 00 	addr(ALUXor)                     ; $0092 eor
   24 D1:B082 AA AD D1 00 	addr(Unary_Ampersand)            ; $0093 &
   25 D1:B086 A2 AD D1 00 	addr(Unary_Brackets)             ; $0094 (
   26 D1:B08A A5 A8 D1 00 	addr(Unimplemented)              ; $0095 $
   27 D1:B08E A5 A8 D1 00 	addr(Unimplemented)              ; $0096 rnd
   28 D1:B092 A5 A8 D1 00 	addr(Unimplemented)              ; $0097 len
   29 D1:B096 A5 A8 D1 00 	addr(Unimplemented)              ; $0098 abs
   30 D1:B09A A5 A8 D1 00 	addr(Unimplemented)              ; $0099 sgn
   31 D1:B09E A5 A8 D1 00 	addr(Unimplemented)              ; $009a int
   32 D1:B0A2 A5 A8 D1 00 	addr(Unimplemented)              ; $009b str$
   33 D1:B0A6 A5 A8 D1 00 	addr(Unimplemented)              ; $009c asc
   34 D1:B0AA 95 AD D1 00 	addr(Unary_Page)                 ; $009d page
   35 D1:B0AE 42 A9 D1 00 	addr(BadCmd_RBracket)            ; $009e )
   36 D1:B0B2 42 A9 D1 00 	addr(BadCmd_Comma)               ; $009f ,
   37 D1:B0B6 46 A9 D1 00 	addr(Command_Colon)              ; $00a0 :
   38 D1:B0BA 42 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 D1:B0BE 64 A9 D1 00 	addr(Command_REM2)               ; $00a2 '
   40 D1:B0C2 A5 A8 D1 00 	addr(Unimplemented)              ; $00a3 repeat
   41 D1:B0C6 A5 A8 D1 00 	addr(Unimplemented)              ; $00a4 until
   42 D1:B0CA A5 A8 D1 00 	addr(Unimplemented)              ; $00a5 if
   43 D1:B0CE 42 A9 D1 00 	addr(BadCmd_Then)                ; $00a6 then
   44 D1:B0D2 A5 A8 D1 00 	addr(Unimplemented)              ; $00a7 else
   45 D1:B0D6 A5 A8 D1 00 	addr(Unimplemented)              ; $00a8 for
   46 D1:B0DA 42 A9 D1 00 	addr(BadCmd_To)                  ; $00a9 to
   47 D1:B0DE A5 A8 D1 00 	addr(Unimplemented)              ; $00aa step
   48 D1:B0E2 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab next
   49 D1:B0E6 42 A9 D1 00 	addr(BadCmd_Defproc)             ; $00ac def
   50 D1:B0EA A5 A8 D1 00 	addr(Unimplemented)              ; $00ad proc
   51 D1:B0EE A5 A8 D1 00 	addr(Unimplemented)              ; $00ae endproc
   52 D1:B0F2 A5 A8 D1 00 	addr(Unimplemented)              ; $00af local
   53 D1:B0F6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 dim
   54 D1:B0FA 64 A9 D1 00 	addr(Command_REM)                ; $00b1 rem
   55 D1:B0FE A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 let
   56 D1:B102 A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 vdu
   57 D1:B106 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 print
   58 D1:B10A A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 load
   59 D1:B10E A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 save
   60 D1:B112 A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 list
   61 D1:B116 FB AD D1 00 	addr(Command_NEW)                ; $00b8 new
   62 D1:B11A 81 A9 D1 00 	addr(Command_RUN)                ; $00b9 run
   63 D1:B11E A5 A8 D1 00 	addr(Unimplemented)              ; $00ba read
   64 D1:B122 A5 A8 D1 00 	addr(Unimplemented)              ; $00bb data
   65 D1:B126 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc restore
   66 D1:B12A 31 A9 D1 00 	addr(Command_ASSERT)             ; $00bd assert
   67 D1:B12E B9 AD D1 00 	addr(Command_CLEAR)              ; $00be clear
   68 D1:B132 47 A9 D1 00 	addr(Command_END)                ; $00bf end
   69 D1:B136 ED A9 D1 00 	addr(Command_STOP)               ; $00c0 stop
   70 D1:B13A -  -  -  -  ;
   71 D1:B13A -  -  -  -  ;	Vectors for set 1
   72 D1:B13A -  -  -  -  ;
   73 D1:B13A -  -  -  -  VectorsSet1:
   74 D1:B13A -  -  -  -  ;
   75 D1:B13A -  -  -  -  ;	Vectors for set 2
   76 D1:B13A -  -  -  -  ;
   77 D1:B13A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   41 D1:B13A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B13A -  -  -  -  ; ***************************************************************************************
    2 D1:B13A -  -  -  -  ; ***************************************************************************************
    3 D1:B13A -  -  -  -  ;
    4 D1:B13A -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B13A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B13A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B13A -  -  -  -  ;		Reviewed :	No
    8 D1:B13A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B13A -  -  -  -  ;
   10 D1:B13A -  -  -  -  ; ***************************************************************************************
   11 D1:B13A -  -  -  -  ; ***************************************************************************************
   12 D1:B13A -  -  -  -  
   13 D1:B13A -  -  -  -  ; ***************************************************************************************
   14 D1:B13A -  -  -  -  ;
   15 D1:B13A -  -  -  -  ;								Unsigned integer divide
   16 D1:B13A -  -  -  -  ;
   17 D1:B13A -  -  -  -  ; ***************************************************************************************
   18 D1:B13A -  -  -  -  
   19 D1:B13A -  -  -  -  Int32UDivide:
   20 D1:B13A 37 -  -  -  		scf
   21 D1:B13B C3 7F B1 D1 		jp 		_I32UnsignedDivide		
   22 D1:B13F -  -  -  -  
   23 D1:B13F -  -  -  -  ; ***************************************************************************************
   24 D1:B13F -  -  -  -  ;
   25 D1:B13F -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B13F -  -  -  -  ;
   27 D1:B13F -  -  -  -  ; ***************************************************************************************
   28 D1:B13F -  -  -  -  
   29 D1:B13F -  -  -  -  Int32SDivide:
   30 D1:B13F 37 -  -  -  		scf
   31 D1:B140 18 01 -  -  		jr 		_I32SDivide
   32 D1:B142 -  -  -  -  Int32Modulus:
   33 D1:B142 AF -  -  -  		xor 	a
   34 D1:B143 -  -  -  -  _I32SDivide:
   35 D1:B143 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B144 F5 -  -  -  		push 	af
   37 D1:B145 08 -  -  -  		ex 		af,af'
   38 D1:B146 -  -  -  -  
   39 D1:B146 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B147 D9 -  -  -  		exx
   41 D1:B148 D5 -  -  -  		push 	de
   42 D1:B149 D9 -  -  -  		exx
   43 D1:B14A -  -  -  -  
   44 D1:B14A F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B14B AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B14C CD 6C B1 D1 		call 	_I32CheckHLSignSwap
   47 D1:B150 CD 6C B1 D1 		call 	_I32CheckHLSignSwap
   48 D1:B154 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B155 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B156 F5 -  -  -  		push 	af
   51 D1:B157 CD 7F B1 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B15B F1 -  -  -  		pop 	af 							; get function back
   53 D1:B15C 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B15E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B15F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B161 C4 E1 B2 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B165 -  -  -  -  _I32SDExit:
   58 D1:B165 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B166 D1 -  -  -  		pop 	de
   60 D1:B167 D9 -  -  -  		exx
   61 D1:B168 D1 -  -  -  		pop 	de
   62 D1:B169 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B16A 08 -  -  -  		ex 		af,af'
   64 D1:B16B C9 -  -  -  		ret
   65 D1:B16C -  -  -  -  
   66 D1:B16C -  -  -  -  
   67 D1:B16C -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B16C D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B16D CB 7C -  -  		bit 	7,h
   70 D1:B16F D9 -  -  -  		exx
   71 D1:B170 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B172 -  -  -  -  		;
   73 D1:B172 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B174 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B175 CD E1 B2 D1 		call 	Int32Negate 				
   76 D1:B179 F1 -  -  -  		pop 	af
   77 D1:B17A -  -  -  -  _I32CHSPositive:
   78 D1:B17A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B17B EB -  -  -  		ex 		de,hl
   80 D1:B17C D9 -  -  -  		exx		
   81 D1:B17D EB -  -  -  		ex 		de,hl
   82 D1:B17E C9 -  -  -  		ret
   83 D1:B17F -  -  -  -  
   84 D1:B17F -  -  -  -  ; ***************************************************************************************
   85 D1:B17F -  -  -  -  ;
   86 D1:B17F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B17F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B17F -  -  -  -  ;
   89 D1:B17F -  -  -  -  ; ***************************************************************************************
   90 D1:B17F -  -  -  -  
   91 D1:B17F -  -  -  -  _I32UnsignedDivide:
   92 D1:B17F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B180 D5 -  -  -  		push 	de
   94 D1:B181 D9 -  -  -  		exx
   95 D1:B182 C5 -  -  -  		push 	bc
   96 D1:B183 D5 -  -  -  		push 	de 							
   97 D1:B184 D9 -  -  -  		exx
   98 D1:B185 -  -  -  -  
   99 D1:B185 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B186 -  -  -  -  
  101 D1:B186 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B187 B3 -  -  -  		or 		e
  103 D1:B188 D9 -  -  -  		exx
  104 D1:B189 B2 -  -  -  		or 		d
  105 D1:B18A B3 -  -  -  		or 		e
  106 D1:B18B D9 -  -  -  		exx
  107 D1:B18C CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B190 -  -  -  -  
  109 D1:B190 -  -  -  -  
  110 D1:B190 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B191 4D -  -  -  		ld		c,l
  112 D1:B192 21 00 00 00 		ld 		hl,$0000
  113 D1:B196 D9 -  -  -  		exx
  114 D1:B197 44 -  -  -  		ld 		b,h
  115 D1:B198 4D -  -  -  		ld		c,l
  116 D1:B199 21 00 00 00 		ld 		hl,$0000
  117 D1:B19D D9 -  -  -  		exx
  118 D1:B19E -  -  -  -  
  119 D1:B19E 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B1A0 -  -  -  -  _I32DivideLoop:
  121 D1:B1A0 F5 -  -  -  		push 	af
  122 D1:B1A1 -  -  -  -  
  123 D1:B1A1 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B1A3 CB 10 -  -  		rl 		b
  125 D1:B1A5 D9 -  -  -  		exx
  126 D1:B1A6 CB 11 -  -  		rl 		c
  127 D1:B1A8 CB 10 -  -  		rl 		b
  128 D1:B1AA D9 -  -  -  		exx
  129 D1:B1AB CB 15 -  -  		rl 		l
  130 D1:B1AD CB 14 -  -  		rl 		h
  131 D1:B1AF D9 -  -  -  		exx
  132 D1:B1B0 CB 15 -  -  		rl 		l
  133 D1:B1B2 CB 14 -  -  		rl 		h
  134 D1:B1B4 D9 -  -  -  		exx
  135 D1:B1B5 -  -  -  -  
  136 D1:B1B5 CD 7F B2 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B1B9 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B1BB -  -  -  -  
  139 D1:B1BB 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B1BC 18 04 -  -  		jr 		_I32Next
  141 D1:B1BE -  -  -  -  
  142 D1:B1BE -  -  -  -  _I32Borrow:
  143 D1:B1BE CD 77 B2 D1 		call 	Int32Add 					; A = A + M
  144 D1:B1C2 -  -  -  -  _I32Next:
  145 D1:B1C2 F1 -  -  -  		pop 	af
  146 D1:B1C3 3D -  -  -  		dec 	a
  147 D1:B1C4 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B1C6 -  -  -  -  
  149 D1:B1C6 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B1C7 -  -  -  -  
  151 D1:B1C7 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B1C8 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B1CA -  -  -  -  
  154 D1:B1CA 60 -  -  -  		ld  	h,b
  155 D1:B1CB 69 -  -  -  		ld 		l,c
  156 D1:B1CC D9 -  -  -  		exx
  157 D1:B1CD 60 -  -  -  		ld  	h,b
  158 D1:B1CE 69 -  -  -  		ld 		l,c
  159 D1:B1CF D9 -  -  -  		exx
  160 D1:B1D0 -  -  -  -  _I32Modulus1:		
  161 D1:B1D0 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B1D1 D1 -  -  -  		pop 	de
  163 D1:B1D2 C1 -  -  -  		pop 	bc
  164 D1:B1D3 D9 -  -  -  		exx
  165 D1:B1D4 D1 -  -  -  		pop 	de
  166 D1:B1D5 C1 -  -  -  		pop 	bc
  167 D1:B1D6 C9 -  -  -  		ret
  168 D1:B1D7 -  -  -  -  
  169 D1:B1D7 -  -  -  -  ; ***************************************************************************************
  170 D1:B1D7 -  -  -  -  ;
  171 D1:B1D7 -  -  -  -  ;									Changes and Updates
  172 D1:B1D7 -  -  -  -  ;
  173 D1:B1D7 -  -  -  -  ; ***************************************************************************************
  174 D1:B1D7 -  -  -  -  ;
  175 D1:B1D7 -  -  -  -  ;		Date			Notes
  176 D1:B1D7 -  -  -  -  ;		==== 			=====
  177 D1:B1D7 -  -  -  -  ;
  178 D1:B1D7 -  -  -  -  ; ***************************************************************************************
  179 D1:B1D7 -  -  -  -  		
Listing for file "_build.asm"
   42 D1:B1D7 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B1D7 -  -  -  -  ; ***************************************************************************************
    2 D1:B1D7 -  -  -  -  ; ***************************************************************************************
    3 D1:B1D7 -  -  -  -  ;
    4 D1:B1D7 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B1D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1D7 -  -  -  -  ;		Reviewed :	No
    8 D1:B1D7 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B1D7 -  -  -  -  ;
   10 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   11 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   12 D1:B1D7 -  -  -  -  
   13 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   14 D1:B1D7 -  -  -  -  ;
   15 D1:B1D7 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B1D7 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B1D7 -  -  -  -  ;
   18 D1:B1D7 -  -  -  -  ; ***************************************************************************************
   19 D1:B1D7 -  -  -  -  
   20 D1:B1D7 -  -  -  -  Int32FromString:
   21 D1:B1D7 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B1D8 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B1D9 D5 -  -  -  		push 	de
   24 D1:B1DA D9 -  -  -  		exx
   25 D1:B1DB D5 -  -  -  		push 	de
   26 D1:B1DC -  -  -  -  
   27 D1:B1DC 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B1E0 11 00 00 00 		ld 		de,$0000
   29 D1:B1E4 D9 -  -  -  		exx
   30 D1:B1E5 21 00 00 00 		ld 		hl,$0000
   31 D1:B1E9 11 00 00 00 		ld 		de,$0000
   32 D1:B1ED D9 -  -  -  		exx
   33 D1:B1EE -  -  -  -  
   34 D1:B1EE 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B1EF CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B1F1 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B1F3 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B1F5 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B1F6 -  -  -  -  		;
   40 D1:B1F6 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B1F7 F5 -  -  -  		push 	af
   42 D1:B1F8 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B1FA 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B1FB 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B1FD 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B1FE 18 01 -  -  		jr 		_I32FSMain
   47 D1:B200 -  -  -  -  _I32FSNotSigned:		
   48 D1:B200 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B201 -  -  -  -  		;
   50 D1:B201 -  -  -  -  		; 		Main conversion loop.
   51 D1:B201 -  -  -  -  		; 		
   52 D1:B201 -  -  -  -  _I32FSMain:		
   53 D1:B201 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B202 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B204 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B206 D6 20 -  -  		sub 	32
   57 D1:B208 -  -  -  -  _I32FSNotLower:
   58 D1:B208 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B20A 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B20C FE 3A -  -  		cp 		'9'+1
   61 D1:B20E 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B210 FE 41 -  -  		cp 		'A'
   63 D1:B212 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B214 FE 47 -  -  		cp 		'F'+1
   65 D1:B216 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B218 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B21A -  -  -  -  _I32FSOkay:
   68 D1:B21A D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B21C BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B21D 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B21F 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B220 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B221 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B222 CD 3E B2 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B226 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B227 5F -  -  -  		ld 		e,a
   77 D1:B228 CD 77 B2 D1 		call 	Int32Add 					; and add it.
   78 D1:B22C D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B22D 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B22F -  -  -  -  
   81 D1:B22F -  -  -  -  _I32FSExit:
   82 D1:B22F F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B230 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B232 CC E1 B2 D1 		call 	z,Int32Negate
   85 D1:B236 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B237 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B238 D9 -  -  -  		exx
   88 D1:B239 D1 -  -  -  		pop 	de
   89 D1:B23A D9 -  -  -  		exx
   90 D1:B23B C1 -  -  -  		pop 	bc
   91 D1:B23C B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 D1:B23D C9 -  -  -  		ret				
   93 D1:B23E -  -  -  -  
   94 D1:B23E -  -  -  -  ; ***************************************************************************************
   95 D1:B23E -  -  -  -  ;
   96 D1:B23E -  -  -  -  ;									Changes and Updates
   97 D1:B23E -  -  -  -  ;
   98 D1:B23E -  -  -  -  ; ***************************************************************************************
   99 D1:B23E -  -  -  -  ;
  100 D1:B23E -  -  -  -  ;		Date			Notes
  101 D1:B23E -  -  -  -  ;		==== 			=====
  102 D1:B23E -  -  -  -  ;
  103 D1:B23E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B23E -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B23E -  -  -  -  ; ***************************************************************************************
    2 D1:B23E -  -  -  -  ; ***************************************************************************************
    3 D1:B23E -  -  -  -  ;
    4 D1:B23E -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B23E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B23E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B23E -  -  -  -  ;		Reviewed :	No
    8 D1:B23E -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B23E -  -  -  -  ;
   10 D1:B23E -  -  -  -  ; ***************************************************************************************
   11 D1:B23E -  -  -  -  ; ***************************************************************************************
   12 D1:B23E -  -  -  -  
   13 D1:B23E -  -  -  -  Int32Multiply:
   14 D1:B23E C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B23F D5 -  -  -  		push 	de
   16 D1:B240 44 -  -  -  		ld 		b,h
   17 D1:B241 4D -  -  -  		ld 		c,l
   18 D1:B242 21 00 00 00 		ld 		hl,$0000
   19 D1:B246 -  -  -  -  
   20 D1:B246 D9 -  -  -  		exx
   21 D1:B247 C5 -  -  -  		push 	bc
   22 D1:B248 D5 -  -  -  		push 	de
   23 D1:B249 44 -  -  -  		ld 		b,h
   24 D1:B24A 4D -  -  -  		ld 		c,l
   25 D1:B24B 21 00 00 00 		ld 		hl,$0000		
   26 D1:B24F D9 -  -  -  		exx
   27 D1:B250 -  -  -  -  
   28 D1:B250 -  -  -  -  _I32MultiplyLoop:
   29 D1:B250 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B252 C4 77 B2 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B256 -  -  -  -  		;
   32 D1:B256 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B257 CB 38 -  -  		srl 	b
   34 D1:B259 CB 19 -  -  		rr 		c
   35 D1:B25B D9 -  -  -  		exx
   36 D1:B25C CB 18 -  -  		rr 		b
   37 D1:B25E CB 19 -  -  		rr 		c
   38 D1:B260 -  -  -  -  		;
   39 D1:B260 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B262 CB 12 -  -  		rl 		d
   41 D1:B264 D9 -  -  -  		exx
   42 D1:B265 CB 13 -  -  		rl 		e
   43 D1:B267 CB 12 -  -  		rl 		d
   44 D1:B269 -  -  -  -  
   45 D1:B269 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B26A B1 -  -  -  		or 		c
   47 D1:B26B D9 -  -  -  		exx
   48 D1:B26C B0 -  -  -  		or 		b
   49 D1:B26D B1 -  -  -  		or 		c
   50 D1:B26E 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B270 -  -  -  -  
   52 D1:B270 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B271 D1 -  -  -  		pop 	de
   54 D1:B272 C1 -  -  -  		pop 	bc
   55 D1:B273 D9 -  -  -  		exx
   56 D1:B274 D1 -  -  -  		pop 	de
   57 D1:B275 C1 -  -  -  		pop 	bc
   58 D1:B276 C9 -  -  -  		ret
   59 D1:B277 -  -  -  -  
   60 D1:B277 -  -  -  -  ; ***************************************************************************************
   61 D1:B277 -  -  -  -  ;
   62 D1:B277 -  -  -  -  ;									Changes and Updates
   63 D1:B277 -  -  -  -  ;
   64 D1:B277 -  -  -  -  ; ***************************************************************************************
   65 D1:B277 -  -  -  -  ;
   66 D1:B277 -  -  -  -  ;		Date			Notes
   67 D1:B277 -  -  -  -  ;		==== 			=====
   68 D1:B277 -  -  -  -  ;
   69 D1:B277 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B277 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B277 -  -  -  -  ; ***************************************************************************************
    2 D1:B277 -  -  -  -  ; ***************************************************************************************
    3 D1:B277 -  -  -  -  ;
    4 D1:B277 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B277 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B277 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B277 -  -  -  -  ;		Reviewed :	No
    8 D1:B277 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B277 -  -  -  -  ;
   10 D1:B277 -  -  -  -  ; ***************************************************************************************
   11 D1:B277 -  -  -  -  ; ***************************************************************************************
   12 D1:B277 -  -  -  -  
   13 D1:B277 -  -  -  -  ; ***************************************************************************************
   14 D1:B277 -  -  -  -  ;
   15 D1:B277 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B277 -  -  -  -  ;
   17 D1:B277 -  -  -  -  ; ***************************************************************************************
   18 D1:B277 -  -  -  -  
   19 D1:B277 -  -  -  -  Int32Add:
   20 D1:B277 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B279 D9 -  -  -  		exx
   22 D1:B27A 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B27D D9 -  -  -  		exx
   24 D1:B27E C9 -  -  -  		ret
   25 D1:B27F -  -  -  -  
   26 D1:B27F -  -  -  -  ; ***************************************************************************************
   27 D1:B27F -  -  -  -  ;
   28 D1:B27F -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B27F -  -  -  -  ;
   30 D1:B27F -  -  -  -  ; ***************************************************************************************
   31 D1:B27F -  -  -  -  
   32 D1:B27F -  -  -  -  Int32Subtract:
   33 D1:B27F AF -  -  -  		xor 	a 							; clear carry
   34 D1:B280 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B283 D9 -  -  -  		exx
   36 D1:B284 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B287 D9 -  -  -  		exx
   38 D1:B288 C9 -  -  -  		ret
   39 D1:B289 -  -  -  -  
   40 D1:B289 -  -  -  -  ; ***************************************************************************************
   41 D1:B289 -  -  -  -  ;
   42 D1:B289 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B289 -  -  -  -  ;
   44 D1:B289 -  -  -  -  ; ***************************************************************************************
   45 D1:B289 -  -  -  -  
   46 D1:B289 -  -  -  -  Int32And:
   47 D1:B289 D9 -  -  -  		exx
   48 D1:B28A CD 8F B2 D1 		call 	_I32AndHLDE
   49 D1:B28E D9 -  -  -  		exx
   50 D1:B28F -  -  -  -  _I32AndHLDE:		
   51 D1:B28F 7C -  -  -  		ld 		a,h
   52 D1:B290 A2 -  -  -  		and 	d
   53 D1:B291 67 -  -  -  		ld 		h,a
   54 D1:B292 7D -  -  -  		ld 		a,l
   55 D1:B293 A3 -  -  -  		and 	e
   56 D1:B294 6F -  -  -  		ld 		l,a
   57 D1:B295 C9 -  -  -  		ret
   58 D1:B296 -  -  -  -  
   59 D1:B296 -  -  -  -  ; ***************************************************************************************
   60 D1:B296 -  -  -  -  ;
   61 D1:B296 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B296 -  -  -  -  ;
   63 D1:B296 -  -  -  -  ; ***************************************************************************************
   64 D1:B296 -  -  -  -  
   65 D1:B296 -  -  -  -  Int32Or:
   66 D1:B296 D9 -  -  -  		exx
   67 D1:B297 CD 9C B2 D1 		call 	_I32OrHLDE
   68 D1:B29B D9 -  -  -  		exx
   69 D1:B29C -  -  -  -  _I32OrHLDE:		
   70 D1:B29C 7C -  -  -  		ld 		a,h
   71 D1:B29D B2 -  -  -  		or 		d
   72 D1:B29E 67 -  -  -  		ld 		h,a
   73 D1:B29F 7D -  -  -  		ld 		a,l
   74 D1:B2A0 B3 -  -  -  		or 		e
   75 D1:B2A1 6F -  -  -  		ld 		l,a
   76 D1:B2A2 C9 -  -  -  		ret
   77 D1:B2A3 -  -  -  -  
   78 D1:B2A3 -  -  -  -  ; ***************************************************************************************
   79 D1:B2A3 -  -  -  -  ;
   80 D1:B2A3 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B2A3 -  -  -  -  ;
   82 D1:B2A3 -  -  -  -  ; ***************************************************************************************
   83 D1:B2A3 -  -  -  -  
   84 D1:B2A3 -  -  -  -  Int32Xor:
   85 D1:B2A3 D9 -  -  -  		exx
   86 D1:B2A4 CD A9 B2 D1 		call 	_I32XorHLDE
   87 D1:B2A8 D9 -  -  -  		exx
   88 D1:B2A9 -  -  -  -  _I32XorHLDE:		
   89 D1:B2A9 7C -  -  -  		ld 		a,h
   90 D1:B2AA AA -  -  -  		xor 	d
   91 D1:B2AB 67 -  -  -  		ld 		h,a
   92 D1:B2AC 7D -  -  -  		ld 		a,l
   93 D1:B2AD AB -  -  -  		xor 	e
   94 D1:B2AE 6F -  -  -  		ld 		l,a
   95 D1:B2AF C9 -  -  -  		ret
   96 D1:B2B0 -  -  -  -  
   97 D1:B2B0 -  -  -  -  ; ***************************************************************************************
   98 D1:B2B0 -  -  -  -  ;
   99 D1:B2B0 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B2B0 -  -  -  -  ;
  101 D1:B2B0 -  -  -  -  ; ***************************************************************************************
  102 D1:B2B0 -  -  -  -  
  103 D1:B2B0 -  -  -  -  Int32Zero:
  104 D1:B2B0 D9 -  -  -  		exx
  105 D1:B2B1 7D -  -  -  		ld 		a,l
  106 D1:B2B2 B4 -  -  -  		or 		h
  107 D1:B2B3 D9 -  -  -  		exx
  108 D1:B2B4 B5 -  -  -  		or 		l
  109 D1:B2B5 B4 -  -  -  		or 		h
  110 D1:B2B6 C9 -  -  -  		ret
  111 D1:B2B7 -  -  -  -  
  112 D1:B2B7 -  -  -  -  ; ***************************************************************************************
  113 D1:B2B7 -  -  -  -  ;
  114 D1:B2B7 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B2B7 -  -  -  -  ;
  116 D1:B2B7 -  -  -  -  ; ***************************************************************************************
  117 D1:B2B7 -  -  -  -  
  118 D1:B2B7 -  -  -  -  Int32Compare:
  119 D1:B2B7 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B2B8 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B2B9 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B2BC D9 -  -  -  		exx
  123 D1:B2BD E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B2BE 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B2C1 -  -  -  -  		;
  126 D1:B2C1 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B2C2 E2 CA B2 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B2C6 78 -  -  -  		ld 		a,b
  129 D1:B2C7 EE 80 -  -  		xor 	$80
  130 D1:B2C9 47 -  -  -  		ld 		b,a
  131 D1:B2CA -  -  -  -  _I32CNoOverflow:
  132 D1:B2CA 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B2CB B5 -  -  -  		or 		l
  134 D1:B2CC D9 -  -  -  		exx 
  135 D1:B2CD B4 -  -  -  		or 		h
  136 D1:B2CE B5 -  -  -  		or 		l
  137 D1:B2CF 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B2D1 -  -  -  -  		;
  139 D1:B2D1 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B2D2 CB 78 -  -  		bit 	7,b
  141 D1:B2D4 D9 -  -  -  		exx
  142 D1:B2D5 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B2D7 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B2D9 3E FF -  -  		ld 		a,$FF
  145 D1:B2DB -  -  -  -  _I32NotPos:
  146 D1:B2DB D9 -  -  -  		exx
  147 D1:B2DC E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B2DD D9 -  -  -  		exx
  149 D1:B2DE E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B2DF B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B2E0 C9 -  -  -  		ret
  152 D1:B2E1 -  -  -  -  
  153 D1:B2E1 -  -  -  -  ; ***************************************************************************************
  154 D1:B2E1 -  -  -  -  ;
  155 D1:B2E1 -  -  -  -  ;										Negate HL'HL
  156 D1:B2E1 -  -  -  -  ;
  157 D1:B2E1 -  -  -  -  ; ***************************************************************************************
  158 D1:B2E1 -  -  -  -  
  159 D1:B2E1 -  -  -  -  Int32Negate:
  160 D1:B2E1 AF -  -  -  		xor 	a
  161 D1:B2E2 CD ED B2 D1 		call 	_I32NSubtract
  162 D1:B2E6 D9 -  -  -  		exx
  163 D1:B2E7 CD ED B2 D1 		call 	_I32NSubtract
  164 D1:B2EB D9 -  -  -  		exx
  165 D1:B2EC C9 -  -  -  		ret
  166 D1:B2ED -  -  -  -  _I32NSubtract:
  167 D1:B2ED D5 -  -  -  		push 	de
  168 D1:B2EE EB -  -  -  		ex 		de,hl
  169 D1:B2EF 21 00 00 00 		ld 		hl,$0000
  170 D1:B2F3 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B2F6 D1 -  -  -  		pop 	de
  172 D1:B2F7 C9 -  -  -  		ret
  173 D1:B2F8 -  -  -  -  		
  174 D1:B2F8 -  -  -  -  ; ***************************************************************************************
  175 D1:B2F8 -  -  -  -  ;
  176 D1:B2F8 -  -  -  -  ;									Changes and Updates
  177 D1:B2F8 -  -  -  -  ;
  178 D1:B2F8 -  -  -  -  ; ***************************************************************************************
  179 D1:B2F8 -  -  -  -  ;
  180 D1:B2F8 -  -  -  -  ;		Date			Notes
  181 D1:B2F8 -  -  -  -  ;		==== 			=====
  182 D1:B2F8 -  -  -  -  ;
  183 D1:B2F8 -  -  -  -  ; ***************************************************************************************
  184 D1:B2F8 -  -  -  -  		
Listing for file "_build.asm"
   45 D1:B2F8 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B2F8 -  -  -  -  ; ***************************************************************************************
    2 D1:B2F8 -  -  -  -  ; ***************************************************************************************
    3 D1:B2F8 -  -  -  -  ;
    4 D1:B2F8 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B2F8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2F8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B2F8 -  -  -  -  ;		Reviewed :	No
    8 D1:B2F8 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B2F8 -  -  -  -  ;
   10 D1:B2F8 -  -  -  -  ; ***************************************************************************************
   11 D1:B2F8 -  -  -  -  ;
   12 D1:B2F8 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B2F8 -  -  -  -  ;
   14 D1:B2F8 -  -  -  -  ; ***************************************************************************************
   15 D1:B2F8 -  -  -  -  
   16 D1:B2F8 -  -  -  -  Int32ToString:
   17 D1:B2F8 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B2F9 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B2FA E5 -  -  -  		push 	hl
   20 D1:B2FB 11 00 00 00 		ld	 	de,$0000
   21 D1:B2FF D9 -  -  -  		exx
   22 D1:B300 D5 -  -  -  		push 	de
   23 D1:B301 E5 -  -  -  		push 	hl
   24 D1:B302 11 00 00 00 		ld 		de,$000
   25 D1:B306 D9 -  -  -  		exx
   26 D1:B307 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B308 -  -  -  -  		;
   28 D1:B308 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B30A 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B30C ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B30E 5F -  -  -  		ld 		e,a
   32 D1:B30F -  -  -  -  		;
   33 D1:B30F D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B310 CB 7C -  -  		bit 	7,h
   35 D1:B312 D9 -  -  -  		exx
   36 D1:B313 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B315 -  -  -  -  		;
   38 D1:B315 CD E1 B2 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B319 -  -  -  -  		;
   40 D1:B319 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B31B 02 -  -  -  		ld 		(bc),a
   42 D1:B31C 03 -  -  -  		inc 	bc
   43 D1:B31D -  -  -  -  _I32TSNotNegative:	
   44 D1:B31D CD 2B B3 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B321 -  -  -  -  _I32TSExit:
   46 D1:B321 AF -  -  -  		xor 	a  							; write the end of string code
   47 D1:B322 02 -  -  -  		ld 		(bc),a 
   48 D1:B323 -  -  -  -  
   49 D1:B323 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B324 E1 -  -  -  		pop 	hl
   51 D1:B325 D1 -  -  -  		pop 	de
   52 D1:B326 D9 -  -  -  		exx
   53 D1:B327 E1 -  -  -  		pop 	hl
   54 D1:B328 D1 -  -  -  		pop 	de
   55 D1:B329 C1 -  -  -  		pop 	bc
   56 D1:B32A C9 -  -  -  		ret
   57 D1:B32B -  -  -  -  
   58 D1:B32B -  -  -  -  _I32RecursiveConvert:
   59 D1:B32B CD 3A B1 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B32F F5 -  -  -  		push 	af 							; save remainder
   61 D1:B330 CD B0 B2 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B334 C4 2B B3 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B338 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B339 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B33B 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B33D C6 07 -  -  		add 	a,7
   67 D1:B33F -  -  -  -  _I32NotHex:
   68 D1:B33F C6 30 -  -  		add 	a,48
   69 D1:B341 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B342 03 -  -  -  		inc 	bc
   71 D1:B343 C9 -  -  -  		ret		
   72 D1:B344 -  -  -  -  
   73 D1:B344 -  -  -  -  ; ***************************************************************************************
   74 D1:B344 -  -  -  -  ;
   75 D1:B344 -  -  -  -  ;									Changes and Updates
   76 D1:B344 -  -  -  -  ;
   77 D1:B344 -  -  -  -  ; ***************************************************************************************
   78 D1:B344 -  -  -  -  ;
   79 D1:B344 -  -  -  -  ;		Date			Notes
   80 D1:B344 -  -  -  -  ;		==== 			=====
   81 D1:B344 -  -  -  -  ;
   82 D1:B344 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:B344 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B344 -  -  -  -  ; ***************************************************************************************
    2 D1:B344 -  -  -  -  ; ***************************************************************************************
    3 D1:B344 -  -  -  -  ;
    4 D1:B344 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B344 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B344 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B344 -  -  -  -  ;		Reviewed :	No
    8 D1:B344 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B344 -  -  -  -  ;
   10 D1:B344 -  -  -  -  ; ***************************************************************************************
   11 D1:B344 -  -  -  -  ; ***************************************************************************************
   12 D1:B344 -  -  -  -  
   13 D1:B344 -  -  -  -  #ifdef AQUARIUS
   14 D1:B344             
   15 D1:B344             ; ***************************************************************************************
   16 D1:B344             ;
   17 D1:B344             ;								Initialise system stuff
   18 D1:B344             ;
   19 D1:B344             ; ***************************************************************************************
   20 D1:B344             
   21 D1:B344             SYSInitialise:
   22 D1:B344             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B344             	call 	SYSPrintChar
   24 D1:B344             	ret
   25 D1:B344             
   26 D1:B344             ; ***************************************************************************************
   27 D1:B344             ;
   28 D1:B344             ;								Terminate system stuff
   29 D1:B344             ;
   30 D1:B344             ; ***************************************************************************************
   31 D1:B344             
   32 D1:B344             SYSTerminate:
   33 D1:B344             	jr 		SYSTerminate
   34 D1:B344             
   35 D1:B344             ; ***************************************************************************************
   36 D1:B344             ;
   37 D1:B344             ;								Print A character
   38 D1:B344             ;
   39 D1:B344             ; ***************************************************************************************
   40 D1:B344             
   41 D1:B344             SYSPrintChar:
   42 D1:B344             	push 	af 									; we stack everything including alt registers
   43 D1:B344             	push 	bc
   44 D1:B344             	push 	de
   45 D1:B344             	push 	hl
   46 D1:B344             	push 	ix
   47 D1:B344             	push 	iy
   48 D1:B344             	exx
   49 D1:B344             	push 	bc
   50 D1:B344             	push 	de
   51 D1:B344             	push 	hl
   52 D1:B344             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B344             	pop 	hl
   54 D1:B344             	pop 	de
   55 D1:B344             	pop 	bc
   56 D1:B344             	exx
   57 D1:B344             	pop 	iy
   58 D1:B344             	pop 	ix
   59 D1:B344             	pop 	hl
   60 D1:B344             	pop 	de
   61 D1:B344             	pop 	bc
   62 D1:B344             	pop 	af
   63 D1:B344             	ret		
   64 D1:B344             
   65 D1:B344             ; ***************************************************************************************
   66 D1:B344             ;
   67 D1:B344             ;									Print Newline
   68 D1:B344             ;
   69 D1:B344             ; ***************************************************************************************
   70 D1:B344             
   71 D1:B344             SYSPrintCRLF:
   72 D1:B344             	push 	af
   73 D1:B344             	ld 		a,13
   74 D1:B344             	call 	SYSPrintChar
   75 D1:B344             	ld 		a,10
   76 D1:B344             	call 	SYSPrintChar
   77 D1:B344             	pop 	af
   78 D1:B344             	ret
   79 D1:B344             
   80 D1:B344             #endif
   81 D1:B344 -  -  -  -  
   82 D1:B344 -  -  -  -  ; ***************************************************************************************
   83 D1:B344 -  -  -  -  ;
   84 D1:B344 -  -  -  -  ;									Changes and Updates
   85 D1:B344 -  -  -  -  ;
   86 D1:B344 -  -  -  -  ; ***************************************************************************************
   87 D1:B344 -  -  -  -  ;
   88 D1:B344 -  -  -  -  ;		Date			Notes
   89 D1:B344 -  -  -  -  ;		==== 			=====
   90 D1:B344 -  -  -  -  ;
   91 D1:B344 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:B344 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B344 -  -  -  -  ; ***************************************************************************************
    2 D1:B344 -  -  -  -  ; ***************************************************************************************
    3 D1:B344 -  -  -  -  ;
    4 D1:B344 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B344 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B344 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B344 -  -  -  -  ;		Reviewed :	No
    8 D1:B344 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B344 -  -  -  -  ;
   10 D1:B344 -  -  -  -  ; ***************************************************************************************
   11 D1:B344 -  -  -  -  ; ***************************************************************************************
   12 D1:B344 -  -  -  -  
   13 D1:B344 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B344             
   15 D1:B344             ; ***************************************************************************************
   16 D1:B344             ;
   17 D1:B344             ;								Initialise system stuff
   18 D1:B344             ;
   19 D1:B344             ; ***************************************************************************************
   20 D1:B344             
   21 D1:B344             SYSInitialise:
   22 D1:B344             	ret
   23 D1:B344             
   24 D1:B344             ; ***************************************************************************************
   25 D1:B344             ;
   26 D1:B344             ;								Terminate system stuff
   27 D1:B344             ;
   28 D1:B344             ; ***************************************************************************************
   29 D1:B344             
   30 D1:B344             SYSTerminate:
   31 D1:B344             	ret
   32 D1:B344             
   33 D1:B344             ; ***************************************************************************************
   34 D1:B344             ;
   35 D1:B344             ;								Print A character
   36 D1:B344             ;
   37 D1:B344             ; ***************************************************************************************
   38 D1:B344             
   39 D1:B344             SYSPrintChar:
   40 D1:B344             	ret		
   41 D1:B344             
   42 D1:B344             ; ***************************************************************************************
   43 D1:B344             ;
   44 D1:B344             ;									Print Newline
   45 D1:B344             ;
   46 D1:B344             ; ***************************************************************************************
   47 D1:B344             
   48 D1:B344             SYSPrintCRLF:
   49 D1:B344             	ret
   50 D1:B344             
   51 D1:B344             #endif
   52 D1:B344 -  -  -  -  
   53 D1:B344 -  -  -  -  ; ***************************************************************************************
   54 D1:B344 -  -  -  -  ;
   55 D1:B344 -  -  -  -  ;									Changes and Updates
   56 D1:B344 -  -  -  -  ;
   57 D1:B344 -  -  -  -  ; ***************************************************************************************
   58 D1:B344 -  -  -  -  ;
   59 D1:B344 -  -  -  -  ;		Date			Notes
   60 D1:B344 -  -  -  -  ;		==== 			=====
   61 D1:B344 -  -  -  -  ;
   62 D1:B344 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:B344 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B344 -  -  -  -  ; ***************************************************************************************
    2 D1:B344 -  -  -  -  ; ***************************************************************************************
    3 D1:B344 -  -  -  -  ;
    4 D1:B344 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B344 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B344 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B344 -  -  -  -  ;		Reviewed :	No
    8 D1:B344 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B344 -  -  -  -  ;
   10 D1:B344 -  -  -  -  ; ***************************************************************************************
   11 D1:B344 -  -  -  -  ; ***************************************************************************************
   12 D1:B344 -  -  -  -  
   13 D1:B344 -  -  -  -  #ifdef TI84
   14 D1:B344 -  -  -  -  
   15 D1:B344 -  -  -  -  ; ***************************************************************************************
   16 D1:B344 -  -  -  -  ;
   17 D1:B344 -  -  -  -  ;								Initialise system stuff
   18 D1:B344 -  -  -  -  ;
   19 D1:B344 -  -  -  -  ; ***************************************************************************************
   20 D1:B344 -  -  -  -  
   21 D1:B344 -  -  -  -  SYSInitialise:
   22 D1:B344 F3 -  -  -  	di
   23 D1:B345 ED 73 62 B3 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B34A FD 22 66 B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B34F C9 -  -  -  	ret
   26 D1:B350 -  -  -  -  
   27 D1:B350 -  -  -  -  ; ***************************************************************************************
   28 D1:B350 -  -  -  -  ;
   29 D1:B350 -  -  -  -  ;								Terminate system stuff
   30 D1:B350 -  -  -  -  ;
   31 D1:B350 -  -  -  -  ; ***************************************************************************************
   32 D1:B350 -  -  -  -  
   33 D1:B350 -  -  -  -  SYSTerminate:
   34 D1:B350 ED 7B 62 B3 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B355 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B357 FD 2A 66 B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B35C FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B360 FB -  -  -  	ei
   39 D1:B361 C9 -  -  -  	ret 										; and exit.
   40 D1:B362 -  -  -  -  
   41 D1:B362 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B362 00 00 00 00 	.dw 	0,0
   43 D1:B366 -  -  -  -  _IYTemp84:
   44 D1:B366 00 00 00 00 	.dw 	0,0		
   45 D1:B36A -  -  -  -  
   46 D1:B36A -  -  -  -  ; ***************************************************************************************
   47 D1:B36A -  -  -  -  ;
   48 D1:B36A -  -  -  -  ;								Print A character
   49 D1:B36A -  -  -  -  ;
   50 D1:B36A -  -  -  -  ; ***************************************************************************************
   51 D1:B36A -  -  -  -  
   52 D1:B36A -  -  -  -  SYSPrintChar:
   53 D1:B36A F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B36B C5 -  -  -  	push 	bc
   55 D1:B36C D5 -  -  -  	push 	de
   56 D1:B36D E5 -  -  -  	push 	hl
   57 D1:B36E DD E5 -  -  	push 	ix
   58 D1:B370 FD E5 -  -  	push 	iy
   59 D1:B372 D9 -  -  -  	exx
   60 D1:B373 C5 -  -  -  	push 	bc
   61 D1:B374 D5 -  -  -  	push 	de
   62 D1:B375 E5 -  -  -  	push 	hl
   63 D1:B376 -  -  -  -  
   64 D1:B376 FD 2A 66 B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B37B CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B37F F3 -  -  -  	di
   67 D1:B380 FD 22 66 B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B385 -  -  -  -  
   69 D1:B385 E1 -  -  -  	pop 	hl
   70 D1:B386 D1 -  -  -  	pop 	de
   71 D1:B387 C1 -  -  -  	pop 	bc
   72 D1:B388 D9 -  -  -  	exx
   73 D1:B389 FD E1 -  -  	pop 	iy
   74 D1:B38B DD E1 -  -  	pop 	ix
   75 D1:B38D E1 -  -  -  	pop 	hl
   76 D1:B38E D1 -  -  -  	pop 	de
   77 D1:B38F C1 -  -  -  	pop 	bc
   78 D1:B390 F1 -  -  -  	pop 	af
   79 D1:B391 C9 -  -  -  	ret		
   80 D1:B392 -  -  -  -  
   81 D1:B392 -  -  -  -  ; ***************************************************************************************
   82 D1:B392 -  -  -  -  ;
   83 D1:B392 -  -  -  -  ;									Print Newline
   84 D1:B392 -  -  -  -  ;
   85 D1:B392 -  -  -  -  ; ***************************************************************************************
   86 D1:B392 -  -  -  -  
   87 D1:B392 -  -  -  -  SYSPrintCRLF:
   88 D1:B392 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B393 C5 -  -  -  	push 	bc
   90 D1:B394 D5 -  -  -  	push 	de
   91 D1:B395 E5 -  -  -  	push 	hl
   92 D1:B396 DD E5 -  -  	push 	ix
   93 D1:B398 FD E5 -  -  	push 	iy
   94 D1:B39A D9 -  -  -  	exx
   95 D1:B39B C5 -  -  -  	push 	bc
   96 D1:B39C D5 -  -  -  	push 	de
   97 D1:B39D E5 -  -  -  	push 	hl
   98 D1:B39E -  -  -  -  
   99 D1:B39E FD 2A 66 B3 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B3A3 CD F0 07 02 	call 	_newline
  101 D1:B3A7 F3 -  -  -  	di
  102 D1:B3A8 FD 22 66 B3 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B3AD -  -  -  -  
  104 D1:B3AD E1 -  -  -  	pop 	hl
  105 D1:B3AE D1 -  -  -  	pop 	de
  106 D1:B3AF C1 -  -  -  	pop 	bc
  107 D1:B3B0 D9 -  -  -  	exx
  108 D1:B3B1 FD E1 -  -  	pop 	iy
  109 D1:B3B3 DD E1 -  -  	pop 	ix
  110 D1:B3B5 E1 -  -  -  	pop 	hl
  111 D1:B3B6 D1 -  -  -  	pop 	de
  112 D1:B3B7 C1 -  -  -  	pop 	bc
  113 D1:B3B8 F1 -  -  -  	pop 	af
  114 D1:B3B9 C9 -  -  -  	ret
  115 D1:B3BA -  -  -  -  
  116 D1:B3BA -  -  -  -  #endif
  117 D1:B3BA -  -  -  -  
  118 D1:B3BA -  -  -  -  ; ***************************************************************************************
  119 D1:B3BA -  -  -  -  ;
  120 D1:B3BA -  -  -  -  ;									Changes and Updates
  121 D1:B3BA -  -  -  -  ;
  122 D1:B3BA -  -  -  -  ; ***************************************************************************************
  123 D1:B3BA -  -  -  -  ;
  124 D1:B3BA -  -  -  -  ;		Date			Notes
  125 D1:B3BA -  -  -  -  ;		==== 			=====
  126 D1:B3BA -  -  -  -  ;
  127 D1:B3BA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B3BA -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B3BA -  -  -  -  ; ***************************************************************************************
    2 D1:B3BA -  -  -  -  ; ***************************************************************************************
    3 D1:B3BA -  -  -  -  ;
    4 D1:B3BA -  -  -  -  ;		Name : 		basic.asm
    5 D1:B3BA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3BA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B3BA -  -  -  -  ;		Reviewed :	No
    8 D1:B3BA -  -  -  -  ;		Purpose :	Main program.
    9 D1:B3BA -  -  -  -  ;
   10 D1:B3BA -  -  -  -  ; ***************************************************************************************
   11 D1:B3BA -  -  -  -  ; ***************************************************************************************
   12 D1:B3BA -  -  -  -  
   13 D1:B3BA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 D1:B400 -  -  -  -  TestInstance:
   15 D1:B400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B400 -  -  -  -  ;
    2 D1:B400 -  -  -  -  ;	This code automatically generated.
    3 D1:B400 -  -  -  -  ;
    4 D1:B400 -  -  -  -  TestProgram:
    5 D1:B400 22 01 00 B1 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 B1 3F 0C 
              53 65 65 64 
              20 3D 20 35 
              34 37 33 34 
              0D 80 1B 03 
              00 BD 94 89 
              41 69 67 7F 
              69 7B 89 41 
              6C 44 46 7C 
              55 9E 8E 6A 
              53 79 59 70 
              80 1A 04 00 
              BD 94 4B 42 
              42 78 73 92 
              41 70 6E 53 
              48 7E 9E 8E 
              41 7B 6C 51 
              70 4D 80 11 
              05 00 BD 94 
              9D 83 4F 9E 
              8E 41 4D 53 
              44 6D 4A 80 
              1A 06 00 BD 
              94 89 41 4F 
              5D 7E 55 41 
              87 61 4C 7C 
              6D 63 9E 8E 
              4D 44 44 79 
              7B 80 1D 07 
              00 BD 94 41 
              51 68 6C 5A 
              57 89 89 41 
              63 7A 59 57 
              6C 9E 8E 89 
              41 4A 5C 7A 
              4D 7D 80 1B 
              08 00 BD 94 
              45 44 60 7B 
              68 89 89 41 
              57 5E 4F 70 
              63 9E 8E 41 
              5C 62 70 6C 
              4B 80 1C 09 
              00 BD 94 89 
              5C 6B 44 59 
              59 92 89 41 
              49 54 4A 73 
              6B 9E 8E 41 
              55 7F 4E 6A 
              72 80 1E 0A 
              00 BD 94 89 
              41 4E 58 62 
              69 6E 91 89 
              41 6B 74 56 
              51 61 9E 8E 
              89 41 4A 50 
              42 41 61 80 
              11 0B 00 BD 
              94 9D 83 4F 
              9E 8E 41 4D 
              53 44 6D 4A 
              80 1C 0C 00 
              BD 94 89 41 
              48 55 60 49 
              47 87 41 52 
              7D 6B 5A 7E 
              9E 8E 41 48 
              55 60 49 47 
              80 1B 0D 00 
              BD 94 89 52 
              58 42 67 5F 
              85 89 7A 5A 
              68 57 5E 9E 
              8E 89 7E 61 
              4D 56 5E 80 
              1C 0E 00 BD 
              94 44 42 7F 
              68 78 92 89 
              41 6C 7F 47 
              51 73 9E 8E 
              89 41 68 7D 
              78 79 4B 80 
              1C 0F 00 BD 
              94 41 6D 65 
              60 66 60 91 
              89 41 5B 44 
              52 40 48 9E 
              8E 89 52 40 
              52 40 48 80 
              18 10 00 BD 
              94 65 54 43 
              75 6F 85 44 
              51 7D 59 54 
              9E 8E 57 5D 
              7F 49 6C 80 
              1C 11 00 BD 
              94 89 41 6C 
              73 51 56 76 
              85 89 6C 43 
              64 70 7D 9E 
              8E 41 47 51 
              43 51 5E 80 
              1B 12 00 BD 
              94 89 7A 4B 
              50 43 68 85 
              41 5A 68 4C 
              61 4E 9E 8E 
              89 43 5A 78 
              5A 70 80 1C 
              13 00 BD 94 
              89 41 7B 72 
              44 59 55 91 
              89 77 4F 50 
              5C 71 9E 8E 
              89 73 42 40 
              58 51 80 15 
              14 00 BD 94 
              89 60 5B 7A 
              7D 67 86 7F 
              47 60 61 46 
              9E 8E 40 80 
              1C 15 00 BD 
              94 89 41 4F 
              50 6A 63 79 
              92 4C 6F 5A 
              43 4B 9E 8E 
              89 41 43 7F 
              70 60 74 80 
              19 16 00 BD 
              94 53 6F 63 
              51 5B 90 41 
              73 55 59 66 
              6D 9E 8E 53 
              45 41 40 49 
              80 1B 17 00 
              BD 94 41 5A 
              78 7B 5D 55 
              85 41 45 66 
              5E 6B 62 9E 
              8E 89 62 65 
              77 53 76 80 
              1B 18 00 BD 
              94 59 67 63 
              4D 4A 89 41 
              63 4C 57 76 
              59 9E 8E 89 
              41 49 64 74 
              69 4F 80 1A 
              19 00 BD 94 
              41 62 7D 5E 
              42 5A 92 5C 
              62 78 76 7F 
              9E 8E 41 7E 
              5F 66 74 65 
              80 1A 1A 00 
              BD 94 41 5B 
              5E 61 6B 7D 
              92 60 7F 7B 
              7B 6C 9E 8E 
              41 7B 61 5A 
              50 51 80 1B 
              1B 00 BD 94 
              89 41 59 5E 
              47 7D 45 88 
              41 62 66 7F 
              7C 63 9E 8E 
              49 48 77 7F 
              5E 80 1A 1C 
              00 BD 94 89 
              6C 72 64 6A 
              4A 89 89 70 
              5E 71 4E 4F 
              9E 8E 43 6C 
              4C 64 45 80 
              1B 1D 00 BD 
              94 89 49 56 
              70 5F 6B 88 
              41 72 6C 4C 
              7F 5A 9E 8E 
              41 69 55 5C 
              5F 6F 80 0D 
              1E 00 BD 94 
              9D 84 4B 9E 
              8E 41 46 80 
              1B 1F 00 BD 
              94 89 7E 77 
              7D 60 7E 89 
              41 48 50 4C 
              68 71 9E 8E 
              41 78 77 75 
              76 51 80 0D 
              20 00 BD 94 
              9D 84 52 9E 
              8E 41 4D 80 
              1B 21 00 BD 
              94 6C 66 62 
              6E 56 85 89 
              41 6A 63 7A 
              77 7D 9E 8E 
              41 47 59 48 
              7B 42 80 16 
              22 00 BD 94 
              7C 42 5F 4A 
              46 86 89 41 
              66 4D 79 6B 
              56 9E 8E 40 
              80 1B 23 00 
              BD 94 89 41 
              61 6D 5F 55 
              48 87 89 74 
              5D 70 42 68 
              9E 8E 6D 4F 
              6F 52 60 80 
              1B 24 00 BD 
              94 6B 56 5E 
              6D 68 88 89 
              41 65 7A 5C 
              54 7C 9E 8E 
              89 7A 63 7D 
              67 54 80 11 
              25 00 BD 94 
              9D 83 47 9E 
              8E 41 45 51 
              44 4D 42 80 
              1B 26 00 BD 
              94 42 61 43 
              7A 71 85 41 
              77 6D 44 69 
              65 9E 8E 89 
              41 6C 50 41 
              68 6B 80 1D 
              27 00 BD 94 
              89 41 52 52 
              76 59 50 89 
              89 41 46 64 
              48 63 43 9E 
              8E 89 4B 6E 
              6D 76 4D 80 
              1D 28 00 BD 
              94 89 41 54 
              5A 46 6A 68 
              87 89 41 7B 
              7A 5E 63 7E 
              9E 8E 41 54 
              5A 46 6A 68 
              80 1D 29 00 
              BD 94 89 41 
              6F 5D 44 79 
              6D 89 89 6A 
              69 4B 6A 5A 
              9E 8E 89 41 
              44 73 79 4F 
              53 80 1A 2A 
              00 BD 94 50 
              49 67 48 6B 
              85 89 4E 70 
              40 74 6C 9E 
              8E 41 4B 56 
              43 46 5C 80 
              0D 2B 00 BD 
              94 9D 84 49 
              9E 8E 41 44 
              80 1C 2C 00 
              BD 94 41 62 
              47 5A 7E 5D 
              92 89 41 44 
              78 75 43 5C 
              9E 8E 89 66 
              7F 6F 7D 47 
              80 1C 2D 00 
              BD 94 89 48 
              70 54 64 54 
              89 89 41 4D 
              54 5F 75 70 
              9E 8E 41 44 
              64 4B 51 5C 
              80 1B 2E 00 
              BD 94 41 79 
              59 79 66 61 
              90 89 41 43 
              4E 72 57 43 
              9E 8E 78 51 
              49 60 61 80 
              11 2F 00 BD 
              94 9D 83 51 
              9E 8E 41 4F 
              53 64 75 4C 
              80 0D 30 00 
              BD 94 9D 84 
              53 9E 8E 41 
              4E 80 1C 31 
              00 BD 94 89 
              41 4E 44 62 
              59 76 92 4A 
              70 53 61 61 
              9E 8E 89 41 
              44 74 71 78 
              55 80 11 32 
              00 BD 94 9D 
              83 51 9E 8E 
              41 4F 53 64 
              75 4C 80 0D 
              33 00 BD 94 
              9D 84 51 9E 
              8E 41 4C 80 
              19 34 00 BD 
              94 7D 6D 40 
              7F 6C 87 89 
              55 75 70 7C 
              66 9E 8E 52 
              41 5F 46 60 
              80 1A 35 00 
              BD 94 89 41 
              6B 6B 56 52 
              66 87 47 74 
              7A 5D 52 9E 
              8E 45 7B 5E 
              55 7C 80 1A 
              36 00 BD 94 
              41 61 6B 41 
              5D 7F 89 4F 
              43 54 7A 5B 
              9E 8E 41 52 
              67 6C 63 64 
              80 19 37 00 
              BD 94 49 5C 
              5B 49 74 89 
              62 7E 4C 47 
              77 9E 8E 89 
              59 61 70 7E 
              43 80 11 38 
              00 BD 94 9D 
              83 4B 9E 8E 
              41 49 52 44 
              5D 46 80 11 
              39 00 BD 94 
              9D 83 4A 9E 
              8E 41 48 51 
              74 59 45 80 
              16 3A 00 BD 
              94 42 51 45 
              63 68 86 89 
              41 61 61 7E 
              73 5E 9E 8E 
              40 80 1A 3B 
              00 BD 94 4E 
              4D 62 4E 4D 
              88 41 4B 4B 
              7E 76 53 9E 
              8E 41 59 59 
              61 44 60 80 
              1C 3C 00 BD 
              94 41 60 4E 
              65 52 51 92 
              89 5D 45 4A 
              4E 7E 9E 8E 
              89 41 7D 4B 
              6F 5C 6D 80 
              1C 3D 00 BD 
              94 41 5E 47 
              64 6A 71 92 
              89 41 4B 5D 
              77 76 57 9E 
              8E 89 55 5A 
              53 5C 68 80 
              19 3E 00 BD 
              94 89 6A 7D 
              47 40 62 88 
              6E 60 69 6A 
              46 9E 8E 43 
              63 62 69 64 
              80 16 3F 00 
              BD 94 89 45 
              58 67 69 67 
              86 89 5C 73 
              74 7C 4E 9E 
              8E 40 80 1B 
              40 00 BD 94 
              41 66 48 46 
              43 4E 90 89 
              41 74 4C 5F 
              69 71 9E 8E 
              42 40 40 42 
              4E 80 1B 41 
              00 BD 94 41 
              72 68 7B 4D 
              6E 88 89 41 
              5E 40 4A 68 
              60 9E 8E 54 
              68 70 65 4E 
              80 19 42 00 
              BD 94 89 51 
              77 63 75 65 
              92 89 51 50 
              64 5D 53 9E 
              8E 67 47 68 
              76 80 1E 43 
              00 BD 94 89 
              41 6D 69 57 
              49 7F 90 89 
              41 6C 74 4A 
              77 41 9E 8E 
              89 41 6D 7D 
              5F 7F 7F 80 
              1C 44 00 BD 
              94 89 41 4D 
              57 71 58 63 
              88 89 41 78 
              5A 68 46 72 
              9E 8E 7A 4D 
              66 60 6B 80 
              1A 45 00 BD 
              94 7E 71 4B 
              5A 42 91 89 
              57 7A 5A 5C 
              6F 9E 8E 89 
              41 4A 50 44 
              6D 80 1A 46 
              00 BD 94 41 
              5F 6A 73 77 
              66 85 75 53 
              5A 7F 69 9E 
              8E 41 5E 56 
              59 41 56 80 
              1C 47 00 BD 
              94 89 52 46 
              7C 78 47 85 
              41 7F 75 62 
              7D 79 9E 8E 
              89 41 5C 74 
              5A 69 4F 80 
              0D 48 00 BD 
              94 9D 84 54 
              9E 8E 41 4F 
              80 19 49 00 
              BD 94 89 4E 
              67 47 50 7E 
              87 4A 65 41 
              76 4E 9E 8E 
              44 42 45 5A 
              70 80 1B 4A 
              00 BD 94 41 
              71 74 5E 48 
              53 88 62 6F 
              5B 74 6C 9E 
              8E 89 41 6B 
              5C 46 43 41 
              80 17 4B 00 
              BD 94 79 6E 
              45 57 59 89 
              79 4B 6B 62 
              5E 9E 8E 62 
              59 74 7B 80 
              0D 4C 00 BD 
              94 9D 84 51 
              9E 8E 41 4C 
              80 0D 4D 00 
              BD 94 9D 84 
              47 9E 8E 41 
              42 80 1B 4E 
              00 BD 94 89 
              56 7B 54 5F 
              4D 85 89 66 
              56 58 6C 5E 
              9E 8E 89 55 
              7C 44 5B 7A 
              80 19 4F 00 
              BD 94 58 49 
              46 54 4C 90 
              89 54 47 5F 
              5F 75 9E 8E 
              48 48 40 40 
              48 80 14 50 
              00 BD 94 47 
              76 73 79 76 
              86 74 70 66 
              73 6B 9E 8E 
              40 80 1D 51 
              00 BD 94 89 
              41 57 61 6D 
              73 64 88 89 
              41 4D 51 60 
              6C 45 9E 8E 
              41 5B 4C 71 
              60 57 80 19 
              52 00 BD 94 
              41 4C 75 79 
              42 64 87 7F 
              6B 4D 67 42 
              9E 8E 4D 4A 
              6B 5B 62 80 
              1B 53 00 BD 
              94 77 52 46 
              79 43 85 41 
              71 4B 4F 55 
              57 9E 8E 89 
              41 5E 56 46 
              60 7B 80 1C 
              54 00 BD 94 
              41 5F 78 6D 
              76 5A 85 41 
              50 7B 5C 50 
              7F 9E 8E 89 
              41 6D 7B 78 
              7C 5A 80 1C 
              55 00 BD 94 
              89 41 52 55 
              4F 7A 52 91 
              6C 64 40 76 
              7C 9E 8E 89 
              41 52 51 4F 
              48 42 80 1B 
              56 00 BD 94 
              89 48 4A 69 
              78 5C 85 89 
              6E 6D 63 7C 
              7B 9E 8E 89 
              71 57 4A 6E 
              4C 80 1A 57 
              00 BD 94 89 
              64 5B 56 41 
              74 92 7D 62 
              5A 73 61 9E 
              8E 89 59 79 
              4C 72 53 80 
              1A 58 00 BD 
              94 89 51 46 
              51 40 77 87 
              41 65 5D 50 
              43 59 9E 8E 
              51 46 51 40 
              77 80 19 59 
              00 BD 94 89 
              44 5C 5D 63 
              6B 85 4F 52 
              40 5D 77 9E 
              8E 4B 43 5B 
              77 43 80 19 
              5A 00 BD 94 
              7A 41 58 40 
              4B 91 89 6A 
              78 69 73 49 
              9E 8E 89 78 
              61 73 41 80 
              1B 5B 00 BD 
              94 89 7F 6A 
              7D 59 62 91 
              89 65 7B 52 
              52 6A 9E 8E 
              89 65 6A 50 
              50 62 80 17 
              5C 00 BD 94 
              89 41 54 7D 
              7B 45 5C 86 
              89 68 65 67 
              74 4B 9E 8E 
              42 80 1C 5D 
              00 BD 94 89 
              65 68 5C 7A 
              4A 92 89 41 
              6D 5B 4F 78 
              6A 9E 8E 41 
              48 73 53 42 
              60 80 19 5E 
              00 BD 94 78 
              6A 78 70 65 
              88 89 74 54 
              57 5A 49 9E 
              8E 44 56 61 
              56 5C 80 1A 
              5F 00 BD 94 
              59 76 6F 7C 
              58 91 41 65 
              4F 4B 6C 53 
              9E 8E 41 7D 
              7F 6F 7C 5B 
              80 1C 60 00 
              BD 94 89 5E 
              7B 63 7E 66 
              92 89 41 5B 
              78 50 4E 5C 
              9E 8E 41 45 
              43 73 70 7E 
              80 1C 61 00 
              BD 94 89 41 
              58 7A 75 77 
              69 88 89 7A 
              4E 5C 5E 70 
              9E 8E 41 6C 
              76 6D 69 67 
              80 1A 62 00 
              BD 94 89 76 
              54 4B 45 4E 
              88 41 73 6B 
              72 5D 6E 9E 
              8E 7D 57 67 
              58 60 80 19 
              63 00 BD 94 
              41 7A 61 60 
              5C 52 87 5C 
              75 6F 6B 47 
              9E 8E 47 4A 
              61 6F 76 80 
              15 64 00 BD 
              94 41 72 6B 
              53 68 7E 86 
              5C 60 7D 4C 
              68 9E 8E 44 
              80 1E 65 00 
              BD 94 89 41 
              7C 7E 63 4D 
              50 91 89 41 
              6E 61 68 4C 
              55 9E 8E 89 
              41 6C 60 60 
              4C 45 80 0D 
              66 00 BD 94 
              9D 84 50 9E 
              8E 41 4B 80 
              1D 67 00 BD 
              94 89 41 45 
              6F 59 45 5C 
              85 89 46 4D 
              77 7A 65 9E 
              8E 89 41 5C 
              60 60 5E 74 
              80 1B 68 00 
              BD 94 89 48 
              71 5B 7E 76 
              91 89 41 60 
              50 6A 4A 72 
              9E 8E 89 50 
              4A 4A 72 80 
              1D 69 00 BD 
              94 89 41 50 
              71 41 65 5D 
              89 89 41 4A 
              73 79 6D 6A 
              9E 8E 89 45 
              7D 47 77 73 
              80 1C 6A 00 
              BD 94 41 61 
              68 7C 67 4D 
              89 89 41 73 
              64 70 52 4F 
              9E 8E 89 6A 
              72 53 46 64 
              80 19 6B 00 
              BD 94 41 50 
              42 61 47 59 
              87 45 62 59 
              6F 4F 9E 8E 
              42 60 78 72 
              47 80 11 6C 
              00 BD 94 9D 
              83 49 9E 8E 
              41 47 51 64 
              55 44 80 11 
              6D 00 BD 94 
              9D 83 53 9E 
              8E 41 51 54 
              44 7D 4E 80 
              1C 6E 00 BD 
              94 89 72 57 
              5E 4F 60 92 
              41 5B 63 75 
              6C 5B 9E 8E 
              89 41 69 74 
              6B 63 45 80 
              1A 6F 00 BD 
              94 41 4E 7A 
              67 6B 42 85 
              41 7C 78 52 
              62 54 9E 8E 
              5F 4F 74 60 
              68 80 18 70 
              00 BD 94 41 
              64 72 48 51 
              73 86 89 41 
              4C 40 48 6B 
              5D 9E 8E 89 
              41 80 1E 71 
              00 BD 94 89 
              41 4A 58 4B 
              70 4E 85 89 
              41 52 5B 68 
              54 6D 9E 8E 
              89 41 61 51 
              7A 6E 4A 80 
              1D 72 00 BD 
              94 89 76 6D 
              5B 51 7C 90 
              89 41 60 44 
              73 59 58 9E 
              8E 89 41 76 
              6D 7B 5A 40 
              80 15 73 00 
              BD 94 74 5F 
              7D 72 50 86 
              41 52 53 79 
              67 52 9E 8E 
              40 80 1C 74 
              00 BD 94 67 
              53 52 7F 7D 
              89 89 41 76 
              62 75 4B 74 
              9E 8E 89 41 
              62 49 77 74 
              4F 80 18 75 
              00 BD 94 7F 
              59 7D 75 66 
              92 5F 51 64 
              4C 45 9E 8E 
              60 48 59 79 
              63 80 18 76 
              00 BD 94 5E 
              53 65 44 4D 
              89 4E 5F 77 
              74 67 9E 8E 
              4F 73 6D 4F 
              66 80 1A 77 
              00 BD 94 50 
              5A 5B 7F 50 
              92 41 6F 69 
              63 70 6A 9E 
              8E 41 7F 73 
              78 4F 7A 80 
              11 78 00 BD 
              94 9D 83 54 
              9E 8E 41 52 
              54 55 41 4F 
              80 1B 79 00 
              BD 94 89 41 
              50 6D 6A 50 
              67 88 7E 4F 
              42 6D 40 9E 
              8E 89 52 5E 
              67 63 67 80 
              0D 7A 00 BD 
              94 9D 84 48 
              9E 8E 41 43 
              80 1E 7B 00 
              BD 94 89 41 
              55 6D 65 51 
              40 91 89 41 
              43 5F 41 79 
              4B 9E 8E 89 
              41 41 4D 41 
              50 4B 80 1C 
              7C 00 BD 94 
              89 41 7E 52 
              42 51 44 92 
              89 41 46 71 
              5D 71 6F 9E 
              8E 78 63 5F 
              60 6D 80 1A 
              7D 00 BD 94 
              41 49 5A 42 
              69 6F 85 59 
              41 41 4E 64 
              9E 8E 41 42 
              67 56 70 5C 
              80 1C 7E 00 
              BD 94 89 41 
              5B 7D 54 7C 
              6F 91 4D 72 
              7C 6B 56 9E 
              8E 89 41 52 
              4D 40 54 69 
              80 1C 7F 00 
              BD 94 89 41 
              5B 50 4A 5C 
              5F 85 89 70 
              54 63 4F 4C 
              9E 8E 89 4F 
              50 5A 59 4C 
              80 1B 80 00 
              BD 94 41 50 
              4A 76 72 46 
              87 41 63 53 
              48 58 44 9E 
              8E 41 50 4A 
              76 72 46 80 
              1A 81 00 BD 
              94 41 60 59 
              63 67 75 87 
              41 4D 53 6B 
              51 44 9E 8E 
              53 45 78 56 
              71 80 1C 82 
              00 BD 94 41 
              60 4A 62 66 
              5F 89 89 41 
              60 6F 6E 74 
              61 9E 8E 89 
              7F 45 6E 65 
              40 80 18 83 
              00 BD 94 6E 
              5C 5E 5E 42 
              91 51 6C 45 
              45 7B 9E 8E 
              7F 7C 5F 5F 
              7B 80 11 84 
              00 BD 94 9D 
              83 54 9E 8E 
              41 52 54 55 
              41 4F 80 17 
              85 00 BD 94 
              41 51 7E 49 
              75 54 86 89 
              47 56 5A 4E 
              50 9E 8E 89 
              4B 80 1B 86 
              00 BD 94 41 
              49 79 7F 46 
              73 91 41 7F 
              41 7F 7F 43 
              9E 8E 41 7F 
              79 7F 7F 73 
              80 1B 87 00 
              BD 94 41 60 
              71 7D 54 53 
              85 60 42 58 
              45 4D 9E 8E 
              89 41 53 76 
              75 59 49 80 
              1A 88 00 BD 
              94 41 5B 58 
              40 72 7F 87 
              89 66 66 44 
              66 7A 9E 8E 
              4E 4B 77 65 
              4B 80 1C 89 
              00 BD 94 89 
              41 78 7B 73 
              7C 5D 88 89 
              41 6F 4A 45 
              71 60 9E 8E 
              57 7A 46 52 
              43 80 11 8A 
              00 BD 94 9D 
              83 50 9E 8E 
              41 4E 53 54 
              71 4B 80 1D 
              8B 00 BD 94 
              89 41 67 6A 
              4C 78 45 87 
              89 41 6F 74 
              5E 56 45 9E 
              8E 41 67 6A 
              4C 78 45 80 
              1A 8C 00 BD 
              94 41 72 7A 
              5A 71 6F 92 
              41 7A 5E 4B 
              7B 55 9E 8E 
              48 64 51 4A 
              7A 80 1A 8D 
              00 BD 94 89 
              7D 70 4B 57 
              77 92 67 52 
              6E 50 4E 9E 
              8E 89 5A 62 
              65 47 79 80 
              1C 8E 00 BD 
              94 89 41 4A 
              51 46 5F 71 
              85 41 7D 45 
              58 5A 45 9E 
              8E 41 68 52 
              4D 67 4B 80 
              18 8F 00 BD 
              94 59 56 44 
              4B 5B 87 5C 
              62 7F 6A 47 
              9E 8E 59 56 
              44 4B 5B 80 
              1A 90 00 BD 
              94 5C 56 59 
              79 70 91 41 
              78 6F 4C 54 
              46 9E 8E 41 
              7C 7F 5D 7D 
              76 80 1A 91 
              00 BD 94 89 
              41 75 4A 40 
              5A 6F 87 76 
              7F 5B 59 67 
              9E 8E 47 4B 
              49 67 61 80 
              1A 92 00 BD 
              94 89 52 76 
              41 4A 7D 87 
              89 50 70 57 
              73 6D 9E 8E 
              42 45 69 57 
              50 80 16 93 
              00 BD 94 89 
              50 59 4B 41 
              57 86 89 67 
              6D 46 7A 64 
              9E 8E 40 80 
              1C 94 00 BD 
              94 41 6E 78 
              61 49 58 87 
              89 41 76 57 
              40 7F 52 9E 
              8E 41 6E 78 
              61 49 58 80 
              1C 95 00 BD 
              94 61 7C 67 
              5B 64 88 89 
              41 77 58 7B 
              7D 48 9E 8E 
              89 41 55 5C 
              54 61 64 80 
              1A 96 00 BD 
              94 89 6C 58 
              76 6F 43 92 
              89 55 66 47 
              40 4C 9E 8E 
              79 7E 71 6F 
              49 80 1A 97 
              00 BD 94 4C 
              7A 61 7D 73 
              89 41 40 59 
              5E 49 58 9E 
              8E 89 73 5E 
              7C 4B 65 80 
              11 98 00 BD 
              94 9D 83 4A 
              9E 8E 41 48 
              51 74 59 45 
              80 16 99 00 
              BD 94 41 64 
              58 53 61 4E 
              86 41 7F 77 
              6C 47 6E 9E 
              8E 40 80 19 
              9A 00 BD 94 
              41 4F 59 40 
              49 71 89 62 
              66 4B 48 55 
              9E 8E 6C 72 
              75 41 5C 80 
              16 9B 00 BD 
              94 89 5C 78 
              64 4F 48 86 
              4F 42 76 65 
              5D 9E 8E 89 
              41 80 0D 9C 
              00 BD 94 9D 
              84 52 9E 8E 
              41 4D 80 19 
              9D 00 BD 94 
              71 48 4B 7E 
              49 90 41 52 
              56 58 78 72 
              9E 8E 50 40 
              48 78 40 80 
              1A 9E 00 BD 
              94 89 41 69 
              5C 4A 4D 5A 
              90 65 78 5F 
              47 4F 9E 8E 
              44 60 55 42 
              46 80 1A 9F 
              00 BD 94 89 
              5F 72 5C 77 
              58 92 7D 5F 
              66 6C 6C 9E 
              8E 89 62 6D 
              7A 5B 7C 80 
              11 A0 00 BD 
              94 9D 83 52 
              9E 8E 41 50 
              53 74 79 4D 
              80 1C A1 00 
              BD 94 7F 45 
              58 71 7A 89 
              89 41 68 6D 
              69 55 67 9E 
              8E 89 41 58 
              4C 7D 78 5F 
              80 1B A2 00 
              BD 94 41 68 
              7D 56 48 79 
              89 41 75 60 
              73 4C 6D 9E 
              8E 89 4C 63 
              5D 43 74 80 
              0D A3 00 BD 
              94 9D 84 47 
              9E 8E 41 42 
              80 1A A4 00 
              BD 94 89 7D 
              42 41 78 5B 
              92 7B 5C 62 
              58 58 9E 8E 
              89 46 5E 63 
              60 43 80 1A 
              A5 00 BD 94 
              89 4B 57 58 
              66 7E 89 89 
              5D 7A 52 77 
              6E 9E 8E 52 
              62 7A 50 70 
              80 16 A6 00 
              BD 94 50 5C 
              52 4E 6F 86 
              89 41 78 75 
              69 41 6C 9E 
              8E 40 80 18 
              A7 00 BD 94 
              4D 4A 48 48 
              46 87 68 52 
              7D 47 70 9E 
              8E 4D 4A 48 
              48 46 80 11 
              A8 00 BD 94 
              9D 83 4E 9E 
              8E 41 4C 52 
              74 69 49 80 
              1B A9 00 BD 
              94 89 41 7B 
              54 4E 53 5D 
              87 89 60 67 
              7A 46 59 9E 
              8E 59 5C 60 
              40 52 80 1A 
              AA 00 BD 94 
              41 46 5D 65 
              43 51 92 41 
              49 72 53 57 
              63 9E 8E 4F 
              6F 76 54 72 
              80 1C AB 00 
              BD 94 89 68 
              51 7C 48 54 
              92 89 41 4A 
              7F 4B 5A 7E 
              9E 8E 41 62 
              6E 77 52 6E 
              80 1B AC 00 
              BD 94 89 41 
              5B 5E 51 50 
              68 87 41 54 
              5C 60 42 5C 
              9E 8E 47 41 
              71 4E 4C 80 
              1C AD 00 BD 
              94 89 41 57 
              66 75 51 40 
              88 89 6A 44 
              64 45 7E 9E 
              8E 41 7E 54 
              66 69 42 80 
              0D AE 00 BD 
              94 9D 84 4D 
              9E 8E 41 48 
              80 0D AF 00 
              BD 94 9D 84 
              48 9E 8E 41 
              43 80 0D B0 
              00 BD 94 9D 
              84 4A 9E 8E 
              41 45 80 1B 
              B1 00 BD 94 
              89 7E 5F 6D 
              65 57 90 89 
              5A 57 44 6E 
              41 9E 8E 89 
              7E 5F 6D 6F 
              57 80 11 B2 
              00 BD 94 9D 
              83 49 9E 8E 
              41 47 51 64 
              55 44 80 1A 
              B3 00 BD 94 
              89 41 46 64 
              6A 6B 65 91 
              89 69 48 5C 
              7C 6C 9E 8E 
              89 48 68 61 
              80 17 B4 00 
              BD 94 41 72 
              56 45 60 78 
              86 89 41 75 
              45 79 6A 7C 
              9E 8E 40 80 
              19 B5 00 BD 
              94 7B 4B 74 
              7C 71 87 41 
              62 54 64 5F 
              53 9E 8E 7B 
              4B 74 7C 71 
              80 0D B6 00 
              BD 94 9D 84 
              4A 9E 8E 41 
              45 80 1A B7 
              00 BD 94 60 
              6C 79 57 77 
              92 41 7D 4F 
              44 6A 44 9E 
              8E 41 5D 63 
              7D 7D 73 80 
              16 B8 00 BD 
              94 7C 4B 78 
              4B 76 86 89 
              41 41 4E 7A 
              49 60 9E 8E 
              40 80 1A B9 
              00 BD 94 52 
              7D 55 46 77 
              85 89 57 43 
              75 74 64 9E 
              8E 89 43 79 
              7F 62 7C 80 
              1B BA 00 BD 
              94 46 41 54 
              55 69 85 89 
              5B 4E 62 4B 
              7A 9E 8E 89 
              41 61 49 7B 
              6A 4A 80 1C 
              BB 00 BD 94 
              51 5E 54 6B 
              7B 91 89 41 
              5E 6D 46 77 
              65 9E 8E 89 
              41 4E 61 42 
              54 45 80 1A 
              BC 00 BD 94 
              89 44 4B 4D 
              40 41 92 6F 
              54 6D 7E 75 
              9E 8E 89 6B 
              5F 60 7E 76 
              80 1D BD 00 
              BD 94 89 41 
              5E 51 75 43 
              59 88 89 41 
              5E 48 4A 58 
              6D 9E 8E 41 
              43 66 40 63 
              7A 80 11 BE 
              00 BD 94 9D 
              83 4A 9E 8E 
              41 48 51 74 
              59 45 80 1A 
              BF 00 BD 94 
              41 4F 56 59 
              49 4B 89 41 
              49 7E 77 5F 
              63 9E 8E 45 
              57 61 69 68 
              80 11 C0 00 
              BD 94 9D 83 
              4C 9E 8E 41 
              4A 52 54 61 
              47 80 1C C1 
              00 BD 94 41 
              79 64 53 69 
              64 85 89 41 
              40 6F 5B 7F 
              51 9E 8E 41 
              4A 42 6B 61 
              5C 80 1B C2 
              00 BD 94 89 
              41 48 51 42 
              42 56 90 41 
              73 44 60 5B 
              5F 9E 8E 73 
              44 60 59 4A 
              80 11 C3 00 
              BD 94 9D 83 
              46 9E 8E 41 
              44 50 74 49 
              41 80 1B C4 
              00 BD 94 89 
              55 5F 7D 54 
              59 87 89 41 
              5D 78 51 79 
              67 9E 8E 55 
              5F 7D 54 59 
              80 11 C5 00 
              BD 94 9D 83 
              4E 9E 8E 41 
              4C 52 74 69 
              49 80 1C C6 
              00 BD 94 89 
              41 7B 60 48 
              76 4D 85 61 
              69 7C 7C 7C 
              9E 8E 89 41 
              68 64 53 40 
              4C 80 1A C7 
              00 BD 94 41 
              7A 4B 68 64 
              6C 91 89 4A 
              65 48 61 68 
              9E 8E 89 64 
              40 41 44 80 
              1C C8 00 BD 
              94 41 55 4F 
              55 4C 49 89 
              89 41 7B 79 
              60 77 43 9E 
              8E 89 6E 77 
              49 7C 74 80 
              1E C9 00 BD 
              94 89 41 75 
              6A 47 67 5E 
              91 89 41 6F 
              76 52 79 6C 
              9E 8E 89 41 
              65 62 42 61 
              4A 80 1A CA 
              00 BD 94 74 
              47 4D 42 7C 
              88 89 7B 59 
              70 71 6C 9E 
              8E 89 47 52 
              63 6E 70 80 
              00 -  -  -  	.db	$22,$01,$00,$b1,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$b1,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$35,$34,$37,$33,$34,$0d,$80,$1b,$03,$00,$bd,$94,$89,$41,$69,$67,$7f,$69,$7b,$89,$41,$6c,$44,$46,$7c,$55,$9e,$8e,$6a,$53,$79,$59,$70,$80,$1a,$04,$00,$bd,$94,$4b,$42,$42,$78,$73,$92,$41,$70,$6e,$53,$48,$7e,$9e,$8e,$41,$7b,$6c,$51,$70,$4d,$80,$11,$05,$00,$bd,$94,$9d,$83,$4f,$9e,$8e,$41,$4d,$53,$44,$6d,$4a,$80,$1a,$06,$00,$bd,$94,$89,$41,$4f,$5d,$7e,$55,$41,$87,$61,$4c,$7c,$6d,$63,$9e,$8e,$4d,$44,$44,$79,$7b,$80,$1d,$07,$00,$bd,$94,$41,$51,$68,$6c,$5a,$57,$89,$89,$41,$63,$7a,$59,$57,$6c,$9e,$8e,$89,$41,$4a,$5c,$7a,$4d,$7d,$80,$1b,$08,$00,$bd,$94,$45,$44,$60,$7b,$68,$89,$89,$41,$57,$5e,$4f,$70,$63,$9e,$8e,$41,$5c,$62,$70,$6c,$4b,$80,$1c,$09,$00,$bd,$94,$89,$5c,$6b,$44,$59,$59,$92,$89,$41,$49,$54,$4a,$73,$6b,$9e,$8e,$41,$55,$7f,$4e,$6a,$72,$80,$1e,$0a,$00,$bd,$94,$89,$41,$4e,$58,$62,$69,$6e,$91,$89,$41,$6b,$74,$56,$51,$61,$9e,$8e,$89,$41,$4a,$50,$42,$41,$61,$80,$11,$0b,$00,$bd,$94,$9d,$83,$4f,$9e,$8e,$41,$4d,$53,$44,$6d,$4a,$80,$1c,$0c,$00,$bd,$94,$89,$41,$48,$55,$60,$49,$47,$87,$41,$52,$7d,$6b,$5a,$7e,$9e,$8e,$41,$48,$55,$60,$49,$47,$80,$1b,$0d,$00,$bd,$94,$89,$52,$58,$42,$67,$5f,$85,$89,$7a,$5a,$68,$57,$5e,$9e,$8e,$89,$7e,$61,$4d,$56,$5e,$80,$1c,$0e,$00,$bd,$94,$44,$42,$7f,$68,$78,$92,$89,$41,$6c,$7f,$47,$51,$73,$9e,$8e,$89,$41,$68,$7d,$78,$79,$4b,$80,$1c,$0f,$00,$bd,$94,$41,$6d,$65,$60,$66,$60,$91,$89,$41,$5b,$44,$52,$40,$48,$9e,$8e,$89,$52,$40,$52,$40,$48,$80,$18,$10,$00,$bd,$94,$65,$54,$43,$75,$6f,$85,$44,$51,$7d,$59,$54,$9e,$8e,$57,$5d,$7f,$49,$6c,$80,$1c,$11,$00,$bd,$94,$89,$41,$6c,$73,$51,$56,$76,$85,$89,$6c,$43,$64,$70,$7d,$9e,$8e,$41,$47,$51,$43,$51,$5e,$80,$1b,$12,$00,$bd,$94,$89,$7a,$4b,$50,$43,$68,$85,$41,$5a,$68,$4c,$61,$4e,$9e,$8e,$89,$43,$5a,$78,$5a,$70,$80,$1c,$13,$00,$bd,$94,$89,$41,$7b,$72,$44,$59,$55,$91,$89,$77,$4f,$50,$5c,$71,$9e,$8e,$89,$73,$42,$40,$58,$51,$80,$15,$14,$00,$bd,$94,$89,$60,$5b,$7a,$7d,$67,$86,$7f,$47,$60,$61,$46,$9e,$8e,$40,$80,$1c,$15,$00,$bd,$94,$89,$41,$4f,$50,$6a,$63,$79,$92,$4c,$6f,$5a,$43,$4b,$9e,$8e,$89,$41,$43,$7f,$70,$60,$74,$80,$19,$16,$00,$bd,$94,$53,$6f,$63,$51,$5b,$90,$41,$73,$55,$59,$66,$6d,$9e,$8e,$53,$45,$41,$40,$49,$80,$1b,$17,$00,$bd,$94,$41,$5a,$78,$7b,$5d,$55,$85,$41,$45,$66,$5e,$6b,$62,$9e,$8e,$89,$62,$65,$77,$53,$76,$80,$1b,$18,$00,$bd,$94,$59,$67,$63,$4d,$4a,$89,$41,$63,$4c,$57,$76,$59,$9e,$8e,$89,$41,$49,$64,$74,$69,$4f,$80,$1a,$19,$00,$bd,$94,$41,$62,$7d,$5e,$42,$5a,$92,$5c,$62,$78,$76,$7f,$9e,$8e,$41,$7e,$5f,$66,$74,$65,$80,$1a,$1a,$00,$bd,$94,$41,$5b,$5e,$61,$6b,$7d,$92,$60,$7f,$7b,$7b,$6c,$9e,$8e,$41,$7b,$61,$5a,$50,$51,$80,$1b,$1b,$00,$bd,$94,$89,$41,$59,$5e,$47,$7d,$45,$88,$41,$62,$66,$7f,$7c,$63,$9e,$8e,$49,$48,$77,$7f,$5e,$80,$1a,$1c,$00,$bd,$94,$89,$6c,$72,$64,$6a,$4a,$89,$89,$70,$5e,$71,$4e,$4f,$9e,$8e,$43,$6c,$4c,$64,$45,$80,$1b,$1d,$00,$bd,$94,$89,$49,$56,$70,$5f,$6b,$88,$41,$72,$6c,$4c,$7f,$5a,$9e,$8e,$41,$69,$55,$5c,$5f,$6f,$80,$0d,$1e,$00,$bd,$94,$9d,$84,$4b,$9e,$8e,$41,$46,$80,$1b,$1f,$00,$bd,$94,$89,$7e,$77,$7d,$60,$7e,$89,$41,$48,$50,$4c,$68,$71,$9e,$8e,$41,$78,$77,$75,$76,$51,$80,$0d,$20,$00,$bd,$94,$9d,$84,$52,$9e,$8e,$41,$4d,$80,$1b,$21,$00,$bd,$94,$6c,$66,$62,$6e,$56,$85,$89,$41,$6a,$63,$7a,$77,$7d,$9e,$8e,$41,$47,$59,$48,$7b,$42,$80,$16,$22,$00,$bd,$94,$7c,$42,$5f,$4a,$46,$86,$89,$41,$66,$4d,$79,$6b,$56,$9e,$8e,$40,$80,$1b,$23,$00,$bd,$94,$89,$41,$61,$6d,$5f,$55,$48,$87,$89,$74,$5d,$70,$42,$68,$9e,$8e,$6d,$4f,$6f,$52,$60,$80,$1b,$24,$00,$bd,$94,$6b,$56,$5e,$6d,$68,$88,$89,$41,$65,$7a,$5c,$54,$7c,$9e,$8e,$89,$7a,$63,$7d,$67,$54,$80,$11,$25,$00,$bd,$94,$9d,$83,$47,$9e,$8e,$41,$45,$51,$44,$4d,$42,$80,$1b,$26,$00,$bd,$94,$42,$61,$43,$7a,$71,$85,$41,$77,$6d,$44,$69,$65,$9e,$8e,$89,$41,$6c,$50,$41,$68,$6b,$80,$1d,$27,$00,$bd,$94,$89,$41,$52,$52,$76,$59,$50,$89,$89,$41,$46,$64,$48,$63,$43,$9e,$8e,$89,$4b,$6e,$6d,$76,$4d,$80,$1d,$28,$00,$bd,$94,$89,$41,$54,$5a,$46,$6a,$68,$87,$89,$41,$7b,$7a,$5e,$63,$7e,$9e,$8e,$41,$54,$5a,$46,$6a,$68,$80,$1d,$29,$00,$bd,$94,$89,$41,$6f,$5d,$44,$79,$6d,$89,$89,$6a,$69,$4b,$6a,$5a,$9e,$8e,$89,$41,$44,$73,$79,$4f,$53,$80,$1a,$2a,$00,$bd,$94,$50,$49,$67,$48,$6b,$85,$89,$4e,$70,$40,$74,$6c,$9e,$8e,$41,$4b,$56,$43,$46,$5c,$80,$0d,$2b,$00,$bd,$94,$9d,$84,$49,$9e,$8e,$41,$44,$80,$1c,$2c,$00,$bd,$94,$41,$62,$47,$5a,$7e,$5d,$92,$89,$41,$44,$78,$75,$43,$5c,$9e,$8e,$89,$66,$7f,$6f,$7d,$47,$80,$1c,$2d,$00,$bd,$94,$89,$48,$70,$54,$64,$54,$89,$89,$41,$4d,$54,$5f,$75,$70,$9e,$8e,$41,$44,$64,$4b,$51,$5c,$80,$1b,$2e,$00,$bd,$94,$41,$79,$59,$79,$66,$61,$90,$89,$41,$43,$4e,$72,$57,$43,$9e,$8e,$78,$51,$49,$60,$61,$80,$11,$2f,$00,$bd,$94,$9d,$83,$51,$9e,$8e,$41,$4f,$53,$64,$75,$4c,$80,$0d,$30,$00,$bd,$94,$9d,$84,$53,$9e,$8e,$41,$4e,$80,$1c,$31,$00,$bd,$94,$89,$41,$4e,$44,$62,$59,$76,$92,$4a,$70,$53,$61,$61,$9e,$8e,$89,$41,$44,$74,$71,$78,$55,$80,$11,$32,$00,$bd,$94,$9d,$83,$51,$9e,$8e,$41,$4f,$53,$64,$75,$4c,$80,$0d,$33,$00,$bd,$94,$9d,$84,$51,$9e,$8e,$41,$4c,$80,$19,$34,$00,$bd,$94,$7d,$6d,$40,$7f,$6c,$87,$89,$55,$75,$70,$7c,$66,$9e,$8e,$52,$41,$5f,$46,$60,$80,$1a,$35,$00,$bd,$94,$89,$41,$6b,$6b,$56,$52,$66,$87,$47,$74,$7a,$5d,$52,$9e,$8e,$45,$7b,$5e,$55,$7c,$80,$1a,$36,$00,$bd,$94,$41,$61,$6b,$41,$5d,$7f,$89,$4f,$43,$54,$7a,$5b,$9e,$8e,$41,$52,$67,$6c,$63,$64,$80,$19,$37,$00,$bd,$94,$49,$5c,$5b,$49,$74,$89,$62,$7e,$4c,$47,$77,$9e,$8e,$89,$59,$61,$70,$7e,$43,$80,$11,$38,$00,$bd,$94,$9d,$83,$4b,$9e,$8e,$41,$49,$52,$44,$5d,$46,$80,$11,$39,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$16,$3a,$00,$bd,$94,$42,$51,$45,$63,$68,$86,$89,$41,$61,$61,$7e,$73,$5e,$9e,$8e,$40,$80,$1a,$3b,$00,$bd,$94,$4e,$4d,$62,$4e,$4d,$88,$41,$4b,$4b,$7e,$76,$53,$9e,$8e,$41,$59,$59,$61,$44,$60,$80,$1c,$3c,$00,$bd,$94,$41,$60,$4e,$65,$52,$51,$92,$89,$5d,$45,$4a,$4e,$7e,$9e,$8e,$89,$41,$7d,$4b,$6f,$5c,$6d,$80,$1c,$3d,$00,$bd,$94,$41,$5e,$47,$64,$6a,$71,$92,$89,$41,$4b,$5d,$77,$76,$57,$9e,$8e,$89,$55,$5a,$53,$5c,$68,$80,$19,$3e,$00,$bd,$94,$89,$6a,$7d,$47,$40,$62,$88,$6e,$60,$69,$6a,$46,$9e,$8e,$43,$63,$62,$69,$64,$80,$16,$3f,$00,$bd,$94,$89,$45,$58,$67,$69,$67,$86,$89,$5c,$73,$74,$7c,$4e,$9e,$8e,$40,$80,$1b,$40,$00,$bd,$94,$41,$66,$48,$46,$43,$4e,$90,$89,$41,$74,$4c,$5f,$69,$71,$9e,$8e,$42,$40,$40,$42,$4e,$80,$1b,$41,$00,$bd,$94,$41,$72,$68,$7b,$4d,$6e,$88,$89,$41,$5e,$40,$4a,$68,$60,$9e,$8e,$54,$68,$70,$65,$4e,$80,$19,$42,$00,$bd,$94,$89,$51,$77,$63,$75,$65,$92,$89,$51,$50,$64,$5d,$53,$9e,$8e,$67,$47,$68,$76,$80,$1e,$43,$00,$bd,$94,$89,$41,$6d,$69,$57,$49,$7f,$90,$89,$41,$6c,$74,$4a,$77,$41,$9e,$8e,$89,$41,$6d,$7d,$5f,$7f,$7f,$80,$1c,$44,$00,$bd,$94,$89,$41,$4d,$57,$71,$58,$63,$88,$89,$41,$78,$5a,$68,$46,$72,$9e,$8e,$7a,$4d,$66,$60,$6b,$80,$1a,$45,$00,$bd,$94,$7e,$71,$4b,$5a,$42,$91,$89,$57,$7a,$5a,$5c,$6f,$9e,$8e,$89,$41,$4a,$50,$44,$6d,$80,$1a,$46,$00,$bd,$94,$41,$5f,$6a,$73,$77,$66,$85,$75,$53,$5a,$7f,$69,$9e,$8e,$41,$5e,$56,$59,$41,$56,$80,$1c,$47,$00,$bd,$94,$89,$52,$46,$7c,$78,$47,$85,$41,$7f,$75,$62,$7d,$79,$9e,$8e,$89,$41,$5c,$74,$5a,$69,$4f,$80,$0d,$48,$00,$bd,$94,$9d,$84,$54,$9e,$8e,$41,$4f,$80,$19,$49,$00,$bd,$94,$89,$4e,$67,$47,$50,$7e,$87,$4a,$65,$41,$76,$4e,$9e,$8e,$44,$42,$45,$5a,$70,$80,$1b,$4a,$00,$bd,$94,$41,$71,$74,$5e,$48,$53,$88,$62,$6f,$5b,$74,$6c,$9e,$8e,$89,$41,$6b,$5c,$46,$43,$41,$80,$17,$4b,$00,$bd,$94,$79,$6e,$45,$57,$59,$89,$79,$4b,$6b,$62,$5e,$9e,$8e,$62,$59,$74,$7b,$80,$0d,$4c,$00,$bd,$94,$9d,$84,$51,$9e,$8e,$41,$4c,$80,$0d,$4d,$00,$bd,$94,$9d,$84,$47,$9e,$8e,$41,$42,$80,$1b,$4e,$00,$bd,$94,$89,$56,$7b,$54,$5f,$4d,$85,$89,$66,$56,$58,$6c,$5e,$9e,$8e,$89,$55,$7c,$44,$5b,$7a,$80,$19,$4f,$00,$bd,$94,$58,$49,$46,$54,$4c,$90,$89,$54,$47,$5f,$5f,$75,$9e,$8e,$48,$48,$40,$40,$48,$80,$14,$50,$00,$bd,$94,$47,$76,$73,$79,$76,$86,$74,$70,$66,$73,$6b,$9e,$8e,$40,$80,$1d,$51,$00,$bd,$94,$89,$41,$57,$61,$6d,$73,$64,$88,$89,$41,$4d,$51,$60,$6c,$45,$9e,$8e,$41,$5b,$4c,$71,$60,$57,$80,$19,$52,$00,$bd,$94,$41,$4c,$75,$79,$42,$64,$87,$7f,$6b,$4d,$67,$42,$9e,$8e,$4d,$4a,$6b,$5b,$62,$80,$1b,$53,$00,$bd,$94,$77,$52,$46,$79,$43,$85,$41,$71,$4b,$4f,$55,$57,$9e,$8e,$89,$41,$5e,$56,$46,$60,$7b,$80,$1c,$54,$00,$bd,$94,$41,$5f,$78,$6d,$76,$5a,$85,$41,$50,$7b,$5c,$50,$7f,$9e,$8e,$89,$41,$6d,$7b,$78,$7c,$5a,$80,$1c,$55,$00,$bd,$94,$89,$41,$52,$55,$4f,$7a,$52,$91,$6c,$64,$40,$76,$7c,$9e,$8e,$89,$41,$52,$51,$4f,$48,$42,$80,$1b,$56,$00,$bd,$94,$89,$48,$4a,$69,$78,$5c,$85,$89,$6e,$6d,$63,$7c,$7b,$9e,$8e,$89,$71,$57,$4a,$6e,$4c,$80,$1a,$57,$00,$bd,$94,$89,$64,$5b,$56,$41,$74,$92,$7d,$62,$5a,$73,$61,$9e,$8e,$89,$59,$79,$4c,$72,$53,$80,$1a,$58,$00,$bd,$94,$89,$51,$46,$51,$40,$77,$87,$41,$65,$5d,$50,$43,$59,$9e,$8e,$51,$46,$51,$40,$77,$80,$19,$59,$00,$bd,$94,$89,$44,$5c,$5d,$63,$6b,$85,$4f,$52,$40,$5d,$77,$9e,$8e,$4b,$43,$5b,$77,$43,$80,$19,$5a,$00,$bd,$94,$7a,$41,$58,$40,$4b,$91,$89,$6a,$78,$69,$73,$49,$9e,$8e,$89,$78,$61,$73,$41,$80,$1b,$5b,$00,$bd,$94,$89,$7f,$6a,$7d,$59,$62,$91,$89,$65,$7b,$52,$52,$6a,$9e,$8e,$89,$65,$6a,$50,$50,$62,$80,$17,$5c,$00,$bd,$94,$89,$41,$54,$7d,$7b,$45,$5c,$86,$89,$68,$65,$67,$74,$4b,$9e,$8e,$42,$80,$1c,$5d,$00,$bd,$94,$89,$65,$68,$5c,$7a,$4a,$92,$89,$41,$6d,$5b,$4f,$78,$6a,$9e,$8e,$41,$48,$73,$53,$42,$60,$80,$19,$5e,$00,$bd,$94,$78,$6a,$78,$70,$65,$88,$89,$74,$54,$57,$5a,$49,$9e,$8e,$44,$56,$61,$56,$5c,$80,$1a,$5f,$00,$bd,$94,$59,$76,$6f,$7c,$58,$91,$41,$65,$4f,$4b,$6c,$53,$9e,$8e,$41,$7d,$7f,$6f,$7c,$5b,$80,$1c,$60,$00,$bd,$94,$89,$5e,$7b,$63,$7e,$66,$92,$89,$41,$5b,$78,$50,$4e,$5c,$9e,$8e,$41,$45,$43,$73,$70,$7e,$80,$1c,$61,$00,$bd,$94,$89,$41,$58,$7a,$75,$77,$69,$88,$89,$7a,$4e,$5c,$5e,$70,$9e,$8e,$41,$6c,$76,$6d,$69,$67,$80,$1a,$62,$00,$bd,$94,$89,$76,$54,$4b,$45,$4e,$88,$41,$73,$6b,$72,$5d,$6e,$9e,$8e,$7d,$57,$67,$58,$60,$80,$19,$63,$00,$bd,$94,$41,$7a,$61,$60,$5c,$52,$87,$5c,$75,$6f,$6b,$47,$9e,$8e,$47,$4a,$61,$6f,$76,$80,$15,$64,$00,$bd,$94,$41,$72,$6b,$53,$68,$7e,$86,$5c,$60,$7d,$4c,$68,$9e,$8e,$44,$80,$1e,$65,$00,$bd,$94,$89,$41,$7c,$7e,$63,$4d,$50,$91,$89,$41,$6e,$61,$68,$4c,$55,$9e,$8e,$89,$41,$6c,$60,$60,$4c,$45,$80,$0d,$66,$00,$bd,$94,$9d,$84,$50,$9e,$8e,$41,$4b,$80,$1d,$67,$00,$bd,$94,$89,$41,$45,$6f,$59,$45,$5c,$85,$89,$46,$4d,$77,$7a,$65,$9e,$8e,$89,$41,$5c,$60,$60,$5e,$74,$80,$1b,$68,$00,$bd,$94,$89,$48,$71,$5b,$7e,$76,$91,$89,$41,$60,$50,$6a,$4a,$72,$9e,$8e,$89,$50,$4a,$4a,$72,$80,$1d,$69,$00,$bd,$94,$89,$41,$50,$71,$41,$65,$5d,$89,$89,$41,$4a,$73,$79,$6d,$6a,$9e,$8e,$89,$45,$7d,$47,$77,$73,$80,$1c,$6a,$00,$bd,$94,$41,$61,$68,$7c,$67,$4d,$89,$89,$41,$73,$64,$70,$52,$4f,$9e,$8e,$89,$6a,$72,$53,$46,$64,$80,$19,$6b,$00,$bd,$94,$41,$50,$42,$61,$47,$59,$87,$45,$62,$59,$6f,$4f,$9e,$8e,$42,$60,$78,$72,$47,$80,$11,$6c,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$11,$6d,$00,$bd,$94,$9d,$83,$53,$9e,$8e,$41,$51,$54,$44,$7d,$4e,$80,$1c,$6e,$00,$bd,$94,$89,$72,$57,$5e,$4f,$60,$92,$41,$5b,$63,$75,$6c,$5b,$9e,$8e,$89,$41,$69,$74,$6b,$63,$45,$80,$1a,$6f,$00,$bd,$94,$41,$4e,$7a,$67,$6b,$42,$85,$41,$7c,$78,$52,$62,$54,$9e,$8e,$5f,$4f,$74,$60,$68,$80,$18,$70,$00,$bd,$94,$41,$64,$72,$48,$51,$73,$86,$89,$41,$4c,$40,$48,$6b,$5d,$9e,$8e,$89,$41,$80,$1e,$71,$00,$bd,$94,$89,$41,$4a,$58,$4b,$70,$4e,$85,$89,$41,$52,$5b,$68,$54,$6d,$9e,$8e,$89,$41,$61,$51,$7a,$6e,$4a,$80,$1d,$72,$00,$bd,$94,$89,$76,$6d,$5b,$51,$7c,$90,$89,$41,$60,$44,$73,$59,$58,$9e,$8e,$89,$41,$76,$6d,$7b,$5a,$40,$80,$15,$73,$00,$bd,$94,$74,$5f,$7d,$72,$50,$86,$41,$52,$53,$79,$67,$52,$9e,$8e,$40,$80,$1c,$74,$00,$bd,$94,$67,$53,$52,$7f,$7d,$89,$89,$41,$76,$62,$75,$4b,$74,$9e,$8e,$89,$41,$62,$49,$77,$74,$4f,$80,$18,$75,$00,$bd,$94,$7f,$59,$7d,$75,$66,$92,$5f,$51,$64,$4c,$45,$9e,$8e,$60,$48,$59,$79,$63,$80,$18,$76,$00,$bd,$94,$5e,$53,$65,$44,$4d,$89,$4e,$5f,$77,$74,$67,$9e,$8e,$4f,$73,$6d,$4f,$66,$80,$1a,$77,$00,$bd,$94,$50,$5a,$5b,$7f,$50,$92,$41,$6f,$69,$63,$70,$6a,$9e,$8e,$41,$7f,$73,$78,$4f,$7a,$80,$11,$78,$00,$bd,$94,$9d,$83,$54,$9e,$8e,$41,$52,$54,$55,$41,$4f,$80,$1b,$79,$00,$bd,$94,$89,$41,$50,$6d,$6a,$50,$67,$88,$7e,$4f,$42,$6d,$40,$9e,$8e,$89,$52,$5e,$67,$63,$67,$80,$0d,$7a,$00,$bd,$94,$9d,$84,$48,$9e,$8e,$41,$43,$80,$1e,$7b,$00,$bd,$94,$89,$41,$55,$6d,$65,$51,$40,$91,$89,$41,$43,$5f,$41,$79,$4b,$9e,$8e,$89,$41,$41,$4d,$41,$50,$4b,$80,$1c,$7c,$00,$bd,$94,$89,$41,$7e,$52,$42,$51,$44,$92,$89,$41,$46,$71,$5d,$71,$6f,$9e,$8e,$78,$63,$5f,$60,$6d,$80,$1a,$7d,$00,$bd,$94,$41,$49,$5a,$42,$69,$6f,$85,$59,$41,$41,$4e,$64,$9e,$8e,$41,$42,$67,$56,$70,$5c,$80,$1c,$7e,$00,$bd,$94,$89,$41,$5b,$7d,$54,$7c,$6f,$91,$4d,$72,$7c,$6b,$56,$9e,$8e,$89,$41,$52,$4d,$40,$54,$69,$80,$1c,$7f,$00,$bd,$94,$89,$41,$5b,$50,$4a,$5c,$5f,$85,$89,$70,$54,$63,$4f,$4c,$9e,$8e,$89,$4f,$50,$5a,$59,$4c,$80,$1b,$80,$00,$bd,$94,$41,$50,$4a,$76,$72,$46,$87,$41,$63,$53,$48,$58,$44,$9e,$8e,$41,$50,$4a,$76,$72,$46,$80,$1a,$81,$00,$bd,$94,$41,$60,$59,$63,$67,$75,$87,$41,$4d,$53,$6b,$51,$44,$9e,$8e,$53,$45,$78,$56,$71,$80,$1c,$82,$00,$bd,$94,$41,$60,$4a,$62,$66,$5f,$89,$89,$41,$60,$6f,$6e,$74,$61,$9e,$8e,$89,$7f,$45,$6e,$65,$40,$80,$18,$83,$00,$bd,$94,$6e,$5c,$5e,$5e,$42,$91,$51,$6c,$45,$45,$7b,$9e,$8e,$7f,$7c,$5f,$5f,$7b,$80,$11,$84,$00,$bd,$94,$9d,$83,$54,$9e,$8e,$41,$52,$54,$55,$41,$4f,$80,$17,$85,$00,$bd,$94,$41,$51,$7e,$49,$75,$54,$86,$89,$47,$56,$5a,$4e,$50,$9e,$8e,$89,$4b,$80,$1b,$86,$00,$bd,$94,$41,$49,$79,$7f,$46,$73,$91,$41,$7f,$41,$7f,$7f,$43,$9e,$8e,$41,$7f,$79,$7f,$7f,$73,$80,$1b,$87,$00,$bd,$94,$41,$60,$71,$7d,$54,$53,$85,$60,$42,$58,$45,$4d,$9e,$8e,$89,$41,$53,$76,$75,$59,$49,$80,$1a,$88,$00,$bd,$94,$41,$5b,$58,$40,$72,$7f,$87,$89,$66,$66,$44,$66,$7a,$9e,$8e,$4e,$4b,$77,$65,$4b,$80,$1c,$89,$00,$bd,$94,$89,$41,$78,$7b,$73,$7c,$5d,$88,$89,$41,$6f,$4a,$45,$71,$60,$9e,$8e,$57,$7a,$46,$52,$43,$80,$11,$8a,$00,$bd,$94,$9d,$83,$50,$9e,$8e,$41,$4e,$53,$54,$71,$4b,$80,$1d,$8b,$00,$bd,$94,$89,$41,$67,$6a,$4c,$78,$45,$87,$89,$41,$6f,$74,$5e,$56,$45,$9e,$8e,$41,$67,$6a,$4c,$78,$45,$80,$1a,$8c,$00,$bd,$94,$41,$72,$7a,$5a,$71,$6f,$92,$41,$7a,$5e,$4b,$7b,$55,$9e,$8e,$48,$64,$51,$4a,$7a,$80,$1a,$8d,$00,$bd,$94,$89,$7d,$70,$4b,$57,$77,$92,$67,$52,$6e,$50,$4e,$9e,$8e,$89,$5a,$62,$65,$47,$79,$80,$1c,$8e,$00,$bd,$94,$89,$41,$4a,$51,$46,$5f,$71,$85,$41,$7d,$45,$58,$5a,$45,$9e,$8e,$41,$68,$52,$4d,$67,$4b,$80,$18,$8f,$00,$bd,$94,$59,$56,$44,$4b,$5b,$87,$5c,$62,$7f,$6a,$47,$9e,$8e,$59,$56,$44,$4b,$5b,$80,$1a,$90,$00,$bd,$94,$5c,$56,$59,$79,$70,$91,$41,$78,$6f,$4c,$54,$46,$9e,$8e,$41,$7c,$7f,$5d,$7d,$76,$80,$1a,$91,$00,$bd,$94,$89,$41,$75,$4a,$40,$5a,$6f,$87,$76,$7f,$5b,$59,$67,$9e,$8e,$47,$4b,$49,$67,$61,$80,$1a,$92,$00,$bd,$94,$89,$52,$76,$41,$4a,$7d,$87,$89,$50,$70,$57,$73,$6d,$9e,$8e,$42,$45,$69,$57,$50,$80,$16,$93,$00,$bd,$94,$89,$50,$59,$4b,$41,$57,$86,$89,$67,$6d,$46,$7a,$64,$9e,$8e,$40,$80,$1c,$94,$00,$bd,$94,$41,$6e,$78,$61,$49,$58,$87,$89,$41,$76,$57,$40,$7f,$52,$9e,$8e,$41,$6e,$78,$61,$49,$58,$80,$1c,$95,$00,$bd,$94,$61,$7c,$67,$5b,$64,$88,$89,$41,$77,$58,$7b,$7d,$48,$9e,$8e,$89,$41,$55,$5c,$54,$61,$64,$80,$1a,$96,$00,$bd,$94,$89,$6c,$58,$76,$6f,$43,$92,$89,$55,$66,$47,$40,$4c,$9e,$8e,$79,$7e,$71,$6f,$49,$80,$1a,$97,$00,$bd,$94,$4c,$7a,$61,$7d,$73,$89,$41,$40,$59,$5e,$49,$58,$9e,$8e,$89,$73,$5e,$7c,$4b,$65,$80,$11,$98,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$16,$99,$00,$bd,$94,$41,$64,$58,$53,$61,$4e,$86,$41,$7f,$77,$6c,$47,$6e,$9e,$8e,$40,$80,$19,$9a,$00,$bd,$94,$41,$4f,$59,$40,$49,$71,$89,$62,$66,$4b,$48,$55,$9e,$8e,$6c,$72,$75,$41,$5c,$80,$16,$9b,$00,$bd,$94,$89,$5c,$78,$64,$4f,$48,$86,$4f,$42,$76,$65,$5d,$9e,$8e,$89,$41,$80,$0d,$9c,$00,$bd,$94,$9d,$84,$52,$9e,$8e,$41,$4d,$80,$19,$9d,$00,$bd,$94,$71,$48,$4b,$7e,$49,$90,$41,$52,$56,$58,$78,$72,$9e,$8e,$50,$40,$48,$78,$40,$80,$1a,$9e,$00,$bd,$94,$89,$41,$69,$5c,$4a,$4d,$5a,$90,$65,$78,$5f,$47,$4f,$9e,$8e,$44,$60,$55,$42,$46,$80,$1a,$9f,$00,$bd,$94,$89,$5f,$72,$5c,$77,$58,$92,$7d,$5f,$66,$6c,$6c,$9e,$8e,$89,$62,$6d,$7a,$5b,$7c,$80,$11,$a0,$00,$bd,$94,$9d,$83,$52,$9e,$8e,$41,$50,$53,$74,$79,$4d,$80,$1c,$a1,$00,$bd,$94,$7f,$45,$58,$71,$7a,$89,$89,$41,$68,$6d,$69,$55,$67,$9e,$8e,$89,$41,$58,$4c,$7d,$78,$5f,$80,$1b,$a2,$00,$bd,$94,$41,$68,$7d,$56,$48,$79,$89,$41,$75,$60,$73,$4c,$6d,$9e,$8e,$89,$4c,$63,$5d,$43,$74,$80,$0d,$a3,$00,$bd,$94,$9d,$84,$47,$9e,$8e,$41,$42,$80,$1a,$a4,$00,$bd,$94,$89,$7d,$42,$41,$78,$5b,$92,$7b,$5c,$62,$58,$58,$9e,$8e,$89,$46,$5e,$63,$60,$43,$80,$1a,$a5,$00,$bd,$94,$89,$4b,$57,$58,$66,$7e,$89,$89,$5d,$7a,$52,$77,$6e,$9e,$8e,$52,$62,$7a,$50,$70,$80,$16,$a6,$00,$bd,$94,$50,$5c,$52,$4e,$6f,$86,$89,$41,$78,$75,$69,$41,$6c,$9e,$8e,$40,$80,$18,$a7,$00,$bd,$94,$4d,$4a,$48,$48,$46,$87,$68,$52,$7d,$47,$70,$9e,$8e,$4d,$4a,$48,$48,$46,$80,$11,$a8,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$1b,$a9,$00,$bd,$94,$89,$41,$7b,$54,$4e,$53,$5d,$87,$89,$60,$67,$7a,$46,$59,$9e,$8e,$59,$5c,$60,$40,$52,$80,$1a,$aa,$00,$bd,$94,$41,$46,$5d,$65,$43,$51,$92,$41,$49,$72,$53,$57,$63,$9e,$8e,$4f,$6f,$76,$54,$72,$80,$1c,$ab,$00,$bd,$94,$89,$68,$51,$7c,$48,$54,$92,$89,$41,$4a,$7f,$4b,$5a,$7e,$9e,$8e,$41,$62,$6e,$77,$52,$6e,$80,$1b,$ac,$00,$bd,$94,$89,$41,$5b,$5e,$51,$50,$68,$87,$41,$54,$5c,$60,$42,$5c,$9e,$8e,$47,$41,$71,$4e,$4c,$80,$1c,$ad,$00,$bd,$94,$89,$41,$57,$66,$75,$51,$40,$88,$89,$6a,$44,$64,$45,$7e,$9e,$8e,$41,$7e,$54,$66,$69,$42,$80,$0d,$ae,$00,$bd,$94,$9d,$84,$4d,$9e,$8e,$41,$48,$80,$0d,$af,$00,$bd,$94,$9d,$84,$48,$9e,$8e,$41,$43,$80,$0d,$b0,$00,$bd,$94,$9d,$84,$4a,$9e,$8e,$41,$45,$80,$1b,$b1,$00,$bd,$94,$89,$7e,$5f,$6d,$65,$57,$90,$89,$5a,$57,$44,$6e,$41,$9e,$8e,$89,$7e,$5f,$6d,$6f,$57,$80,$11,$b2,$00,$bd,$94,$9d,$83,$49,$9e,$8e,$41,$47,$51,$64,$55,$44,$80,$1a,$b3,$00,$bd,$94,$89,$41,$46,$64,$6a,$6b,$65,$91,$89,$69,$48,$5c,$7c,$6c,$9e,$8e,$89,$48,$68,$61,$80,$17,$b4,$00,$bd,$94,$41,$72,$56,$45,$60,$78,$86,$89,$41,$75,$45,$79,$6a,$7c,$9e,$8e,$40,$80,$19,$b5,$00,$bd,$94,$7b,$4b,$74,$7c,$71,$87,$41,$62,$54,$64,$5f,$53,$9e,$8e,$7b,$4b,$74,$7c,$71,$80,$0d,$b6,$00,$bd,$94,$9d,$84,$4a,$9e,$8e,$41,$45,$80,$1a,$b7,$00,$bd,$94,$60,$6c,$79,$57,$77,$92,$41,$7d,$4f,$44,$6a,$44,$9e,$8e,$41,$5d,$63,$7d,$7d,$73,$80,$16,$b8,$00,$bd,$94,$7c,$4b,$78,$4b,$76,$86,$89,$41,$41,$4e,$7a,$49,$60,$9e,$8e,$40,$80,$1a,$b9,$00,$bd,$94,$52,$7d,$55,$46,$77,$85,$89,$57,$43,$75,$74,$64,$9e,$8e,$89,$43,$79,$7f,$62,$7c,$80,$1b,$ba,$00,$bd,$94,$46,$41,$54,$55,$69,$85,$89,$5b,$4e,$62,$4b,$7a,$9e,$8e,$89,$41,$61,$49,$7b,$6a,$4a,$80,$1c,$bb,$00,$bd,$94,$51,$5e,$54,$6b,$7b,$91,$89,$41,$5e,$6d,$46,$77,$65,$9e,$8e,$89,$41,$4e,$61,$42,$54,$45,$80,$1a,$bc,$00,$bd,$94,$89,$44,$4b,$4d,$40,$41,$92,$6f,$54,$6d,$7e,$75,$9e,$8e,$89,$6b,$5f,$60,$7e,$76,$80,$1d,$bd,$00,$bd,$94,$89,$41,$5e,$51,$75,$43,$59,$88,$89,$41,$5e,$48,$4a,$58,$6d,$9e,$8e,$41,$43,$66,$40,$63,$7a,$80,$11,$be,$00,$bd,$94,$9d,$83,$4a,$9e,$8e,$41,$48,$51,$74,$59,$45,$80,$1a,$bf,$00,$bd,$94,$41,$4f,$56,$59,$49,$4b,$89,$41,$49,$7e,$77,$5f,$63,$9e,$8e,$45,$57,$61,$69,$68,$80,$11,$c0,$00,$bd,$94,$9d,$83,$4c,$9e,$8e,$41,$4a,$52,$54,$61,$47,$80,$1c,$c1,$00,$bd,$94,$41,$79,$64,$53,$69,$64,$85,$89,$41,$40,$6f,$5b,$7f,$51,$9e,$8e,$41,$4a,$42,$6b,$61,$5c,$80,$1b,$c2,$00,$bd,$94,$89,$41,$48,$51,$42,$42,$56,$90,$41,$73,$44,$60,$5b,$5f,$9e,$8e,$73,$44,$60,$59,$4a,$80,$11,$c3,$00,$bd,$94,$9d,$83,$46,$9e,$8e,$41,$44,$50,$74,$49,$41,$80,$1b,$c4,$00,$bd,$94,$89,$55,$5f,$7d,$54,$59,$87,$89,$41,$5d,$78,$51,$79,$67,$9e,$8e,$55,$5f,$7d,$54,$59,$80,$11,$c5,$00,$bd,$94,$9d,$83,$4e,$9e,$8e,$41,$4c,$52,$74,$69,$49,$80,$1c,$c6,$00,$bd,$94,$89,$41,$7b,$60,$48,$76,$4d,$85,$61,$69,$7c,$7c,$7c,$9e,$8e,$89,$41,$68,$64,$53,$40,$4c,$80,$1a,$c7,$00,$bd,$94,$41,$7a,$4b,$68,$64,$6c,$91,$89,$4a,$65,$48,$61,$68,$9e,$8e,$89,$64,$40,$41,$44,$80,$1c,$c8,$00,$bd,$94,$41,$55,$4f,$55,$4c,$49,$89,$89,$41,$7b,$79,$60,$77,$43,$9e,$8e,$89,$6e,$77,$49,$7c,$74,$80,$1e,$c9,$00,$bd,$94,$89,$41,$75,$6a,$47,$67,$5e,$91,$89,$41,$6f,$76,$52,$79,$6c,$9e,$8e,$89,$41,$65,$62,$42,$61,$4a,$80,$1a,$ca,$00,$bd,$94,$74,$47,$4d,$42,$7c,$88,$89,$7b,$59,$70,$71,$6c,$9e,$8e,$89,$47,$52,$63,$6e,$70,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C745 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D745 -  -  -  -  EndTestInstance:
   18 D1:D745 -  -  -  -  		
   19 D1:D745 -  -  -  -  ; ***************************************************************************************
   20 D1:D745 -  -  -  -  ;
   21 D1:D745 -  -  -  -  ;									Changes and Updates
   22 D1:D745 -  -  -  -  ;
   23 D1:D745 -  -  -  -  ; ***************************************************************************************
   24 D1:D745 -  -  -  -  ;
   25 D1:D745 -  -  -  -  ;		Date			Notes
   26 D1:D745 -  -  -  -  ;		==== 			=====
   27 D1:D745 -  -  -  -  ;
   28 D1:D745 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:D745 -  -  -  -  FinalAddress:
