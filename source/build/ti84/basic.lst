    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_GOSUB = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_GOSUB
   56 00:0000             	ld a,ERRID_GOSUB
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_INDEX = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_INDEX
   63 00:0000             	ld a,ERRID_INDEX
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_LINENO = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_LINENO
   70 00:0000             	ld a,ERRID_LINENO
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_MEMORY = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_MEMORY
   77 00:0000             	ld a,ERRID_MEMORY
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NEXT = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NEXT
   84 00:0000             	ld a,ERRID_NEXT
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOCOMMA = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   91 00:0000             	ld a,ERRID_NOCOMMA
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NODOLLAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   98 00:0000             	ld a,ERRID_NODOLLAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NOLBRACKET = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  105 00:0000             	ld a,ERRID_NOLBRACKET
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOPROC = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOPROC
  112 00:0000             	ld a,ERRID_NOPROC
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NORBRACKET = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  119 00:0000             	ld a,ERRID_NORBRACKET
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NOTREF = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NOTREF
  126 00:0000             	ld a,ERRID_NOTREF
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_PARAM = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_PARAM
  133 00:0000             	ld a,ERRID_PARAM
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PROC = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PROC
  140 00:0000             	ld a,ERRID_PROC
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_REPEAT = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_REPEAT
  147 00:0000             	ld a,ERRID_REPEAT
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_STACK = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_STACK
  154 00:0000             	ld a,ERRID_STACK
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STOP = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STOP
  161 00:0000             	ld a,ERRID_STOP
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_SYNTAX = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_SYNTAX
  168 00:0000             	ld a,ERRID_SYNTAX
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_TODO = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_TODO
  175 00:0000             	ld a,ERRID_TODO
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  182 00:0000             	ld a,ERRID_UNKNOWNVAR
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 D1:A881             		ld 		sp,$BFFF
   41 D1:A881             #endif
   42 D1:A881             
   43 D1:A881             #endif
   44 D1:A881 CD 3A BC D1 		call 	SYSInitialise
   45 D1:A885 11 00 C0 D1 		ld 		de,TestInstance
   46 D1:A889 21 E9 D0 D1 		ld 		hl,EndTestInstance
   47 D1:A88D CD EF B2 D1 		call 	SetCurrentInstance
   48 D1:A891 -  -  -  -  
   49 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 D1:A893 32 E5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 D1:A897 -  -  -  -  		
   52 D1:A897 C3 31 AB D1 		jp 		Command_RUN
   53 D1:A89B -  -  -  -  
   54 D1:A89B -  -  -  -  WarmStart:		
   55 D1:A89B 3E 2A -  -  		ld 		a,'*'
   56 D1:A89D CD 60 BC D1 		call 	SYSPrintChar
   57 D1:A8A1 CD 46 BC D1 		call 	SYSTerminate
   58 D1:A8A5 -  -  -  -  
   59 D1:A8A5 -  -  -  -  Unimplemented:
   60 D1:A8A5 3E 05 C3 22 
              AC D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   62 D1:A8AB 3E 06 C3 22 
              AC D1 -  -  		ERR_DIVZERO
   63 D1:A8B1 -  -  -  -  
   64 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   65 D1:A8B1 -  -  -  -  ;
   66 D1:A8B1 -  -  -  -  ;									Changes and Updates
   67 D1:A8B1 -  -  -  -  ;
   68 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   69 D1:A8B1 -  -  -  -  ;
   70 D1:A8B1 -  -  -  -  ;		Date			Notes
   71 D1:A8B1 -  -  -  -  ;		==== 			=====
   72 D1:A8B1 -  -  -  -  ;
   73 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  
   78 D1:A8DD -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  		
   81 D1:A8E1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 D1:A8E1 00 00 00 00 		.dw 	0,0
   83 D1:A8E5 -  -  -  -  
   84 D1:A8E5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 D1:A8E5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8EB -  -  -  -  
   87 D1:A8EB -  -  -  -  AConvert: 									; used for address conversions.
   88 D1:A8EB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 D1:A8F1 -  -  -  -  		
   90 D1:A8F1 -  -  -  -  RandomSeed: 								; random number seeds.
   91 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 D1:A901 -  -  -  -  
   93 D1:A901 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 D1:A901 00 00 -  -  		.dw 	0
   95 D1:A903 -  -  -  -  
   96 D1:A903 -  -  -  -  PrintBase: 									; current base for PRINT
   97 D1:A903 00 00 -  -  		.dw 	0 
   98 D1:A905 -  -  -  -  
   99 D1:A905 -  -  -  -  ; ***************************************************************************************
  100 D1:A905 -  -  -  -  ;
  101 D1:A905 -  -  -  -  ;									Variable Information
  102 D1:A905 -  -  -  -  ;
  103 D1:A905 -  -  -  -  ; ***************************************************************************************
  104 D1:A905 -  -  -  -  
  105 D1:A905 -  -  -  -  VarNameStart: 								; first byte of name
  106 D1:A905 00 00 00 00 		.dw 	0,0
  107 D1:A909 -  -  -  -  VarHash: 									; name hash value
  108 D1:A909 00 00 -  -  		.dw 	0		
  109 D1:A90B -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 D1:A90B 00 00 00 00 		.dw 	0,0
  111 D1:A90F -  -  -  -  		
  112 D1:A90F -  -  -  -  ; ***************************************************************************************
  113 D1:A90F -  -  -  -  ;
  114 D1:A90F -  -  -  -  ;										  Buffers
  115 D1:A90F -  -  -  -  ;
  116 D1:A90F -  -  -  -  ; ***************************************************************************************
  117 D1:A90F -  -  -  -  
  118 D1:A90F -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 D1:A90F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 D1:A91F -  -  -  -  
  121 D1:A91F -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 D1:A91F 00 00 -  -  		.dw 	0
  123 D1:A921 -  -  -  -  
  124 D1:A921 -  -  -  -  ConvertBuffer: 								; general usage
  125 D1:A921 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 D1:A961 -  -  -  -  
  127 D1:A961 -  -  -  -  ; ***************************************************************************************
  128 D1:A961 -  -  -  -  ;
  129 D1:A961 -  -  -  -  ;									Changes and Updates
  130 D1:A961 -  -  -  -  ;
  131 D1:A961 -  -  -  -  ; ***************************************************************************************
  132 D1:A961 -  -  -  -  ;
  133 D1:A961 -  -  -  -  ;		Date			Notes
  134 D1:A961 -  -  -  -  ;		==== 			=====
  135 D1:A961 -  -  -  -  ;
  136 D1:A961 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 D1:A961 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A961 -  -  -  -  ; ***************************************************************************************
    2 D1:A961 -  -  -  -  ; ***************************************************************************************
    3 D1:A961 -  -  -  -  ;
    4 D1:A961 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A961 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A961 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A961 -  -  -  -  ;		Reviewed :	No
    8 D1:A961 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A961 -  -  -  -  ;
   10 D1:A961 -  -  -  -  ; ***************************************************************************************
   11 D1:A961 -  -  -  -  ; ***************************************************************************************
   12 D1:A961 -  -  -  -  
   13 D1:A961 -  -  -  -  ; ***************************************************************************************
   14 D1:A961 -  -  -  -  ;
   15 D1:A961 -  -  -  -  ;									ASSERT command
   16 D1:A961 -  -  -  -  ;
   17 D1:A961 -  -  -  -  ; ***************************************************************************************
   18 D1:A961 -  -  -  -  
   19 D1:A961 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A961 CD 55 AE D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A965 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A96B C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A96C 3E 01 C3 22 
              AC D1 -  -  		ERR_ASSERT
   24 D1:A972 -  -  -  -  
   25 D1:A972 -  -  -  -  ; ***************************************************************************************
   26 D1:A972 -  -  -  -  ;
   27 D1:A972 -  -  -  -  ;									Changes and Updates
   28 D1:A972 -  -  -  -  ;
   29 D1:A972 -  -  -  -  ; ***************************************************************************************
   30 D1:A972 -  -  -  -  ;
   31 D1:A972 -  -  -  -  ;		Date			Notes
   32 D1:A972 -  -  -  -  ;		==== 			=====
   33 D1:A972 -  -  -  -  ;
   34 D1:A972 -  -  -  -  ; ***************************************************************************************
   35 D1:A972 -  -  -  -  		
Listing for file "_build.asm"
   15 D1:A972 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A972 -  -  -  -  ; ***************************************************************************************
    2 D1:A972 -  -  -  -  ; ***************************************************************************************
    3 D1:A972 -  -  -  -  ;
    4 D1:A972 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A972 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A972 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A972 -  -  -  -  ;		Reviewed :	No
    8 D1:A972 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A972 -  -  -  -  ;
   10 D1:A972 -  -  -  -  ; ***************************************************************************************
   11 D1:A972 -  -  -  -  ; ***************************************************************************************
   12 D1:A972 -  -  -  -  
   13 D1:A972 -  -  -  -  BadCmd_Def: 		;; [def]
   14 D1:A972 -  -  -  -  BadCmd_Then: 		;; [then]
   15 D1:A972 -  -  -  -  BadCmd_RBracket: 	;; [)]
   16 D1:A972 -  -  -  -  BadCmd_LSBracket: 	;; [[]
   17 D1:A972 -  -  -  -  BadCmd_RSBracket: 	;; []]
   18 D1:A972 -  -  -  -  BadCmd_Comma: 		;; [,]
   19 D1:A972 -  -  -  -  BadCmd_Comma: 		;; [~]
   20 D1:A972 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   21 D1:A972 -  -  -  -  BadCmd_To: 			;; [to]
   22 D1:A972 -  -  -  -  BadCmd_Step: 		;; [step]
   23 D1:A972 C3 8C AC D1 		jp 		SyntaxError
   24 D1:A976 -  -  -  -  
   25 D1:A976 -  -  -  -  ; ***************************************************************************************
   26 D1:A976 -  -  -  -  ;
   27 D1:A976 -  -  -  -  ;									Changes and Updates
   28 D1:A976 -  -  -  -  ;
   29 D1:A976 -  -  -  -  ; ***************************************************************************************
   30 D1:A976 -  -  -  -  ;
   31 D1:A976 -  -  -  -  ;		Date			Notes
   32 D1:A976 -  -  -  -  ;		==== 			=====
   33 D1:A976 -  -  -  -  ;
   34 D1:A976 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A976 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A976 -  -  -  -  ; ***************************************************************************************
    2 D1:A976 -  -  -  -  ; ***************************************************************************************
    3 D1:A976 -  -  -  -  ;
    4 D1:A976 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A976 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A976 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A976 -  -  -  -  ;		Reviewed :	No
    8 D1:A976 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A976 -  -  -  -  ;
   10 D1:A976 -  -  -  -  ; ***************************************************************************************
   11 D1:A976 -  -  -  -  ; ***************************************************************************************
   12 D1:A976 -  -  -  -  
   13 D1:A976 -  -  -  -  ; ***************************************************************************************
   14 D1:A976 -  -  -  -  ;
   15 D1:A976 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A976 -  -  -  -  ;
   17 D1:A976 -  -  -  -  ; ***************************************************************************************
   18 D1:A976 -  -  -  -  
   19 D1:A976 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A976 C9 -  -  -  		ret
   21 D1:A977 -  -  -  -  
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  ;
   24 D1:A977 -  -  -  -  ;									Changes and Updates
   25 D1:A977 -  -  -  -  ;
   26 D1:A977 -  -  -  -  ; ***************************************************************************************
   27 D1:A977 -  -  -  -  ;
   28 D1:A977 -  -  -  -  ;		Date			Notes
   29 D1:A977 -  -  -  -  ;		==== 			=====
   30 D1:A977 -  -  -  -  ;
   31 D1:A977 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A977 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A977 -  -  -  -  ; ***************************************************************************************
    2 D1:A977 -  -  -  -  ; ***************************************************************************************
    3 D1:A977 -  -  -  -  ;
    4 D1:A977 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A977 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A977 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A977 -  -  -  -  ;		Reviewed :	No
    8 D1:A977 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A977 -  -  -  -  ;
   10 D1:A977 -  -  -  -  ; ***************************************************************************************
   11 D1:A977 -  -  -  -  ; ***************************************************************************************
   12 D1:A977 -  -  -  -  
   13 D1:A977 -  -  -  -  ; ***************************************************************************************
   14 D1:A977 -  -  -  -  ;
   15 D1:A977 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:A977 -  -  -  -  ;	
   17 D1:A977 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:A977 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:A977 -  -  -  -  ;								(can be comma chained)
   20 D1:A977 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:A977 -  -  -  -  ;
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  
   24 D1:A977 -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:A977 -  -  -  -  		;
   26 D1:A977 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A977 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A977 -  -  -  -  		;
   29 D1:A977 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A979 D1 -  -  -  		pop 	de
   31 D1:A97A -  -  -  -  		;
   32 D1:A97A DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A97D FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A97F D2 8C AC D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A983 -  -  -  -  _DISkip:
   36 D1:A983 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A985 DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A988 FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A98A 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A98C -  -  -  -  		;
   41 D1:A98C DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A98F FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A991 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A992 CC F3 A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A996 F1 -  -  -  		pop 	af
   46 D1:A997 C4 AB A9 D1 		call 	nz,DimensionAllocate
   47 D1:A99B -  -  -  -  		;
   48 D1:A99B DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A99E FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A9A0 C0 -  -  -  		ret 	nz
   51 D1:A9A1 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A9A3 18 D2 -  -  		jr 		Command_DIM
   53 D1:A9A5 -  -  -  -  
   54 D1:A9A5 -  -  -  -  _CDError:
   55 D1:A9A5 3E 04 C3 22 
              AC D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:A9AB -  -  -  -  
   57 D1:A9AB -  -  -  -  ; ***************************************************************************************
   58 D1:A9AB -  -  -  -  ;
   59 D1:A9AB -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:A9AB -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:A9AB -  -  -  -  ;
   62 D1:A9AB -  -  -  -  ; ***************************************************************************************
   63 D1:A9AB -  -  -  -  
   64 D1:A9AB -  -  -  -  DimensionAllocate:
   65 D1:A9AB D5 -  -  -  		push 	de 							; save start on stack
   66 D1:A9AC DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:A9AE 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:A9B0 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   69 D1:A9B4 CD BF B5 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:A9B8 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:A9BA 28 E9 -  -  		jr 		z,_CDError
   72 D1:A9BC CB 41 -  -  		bit 	CIsString,c
   73 D1:A9BE 20 E5 -  -  		jr 		nz,_CDError
   74 D1:A9C0 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:A9C2 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:A9C3 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:A9C5 CD 16 AC D1 		call 	CheckNextA 					; check for [
   78 D1:A9C9 CD 55 AE D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:A9CD 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:A9CF CD 16 AC D1 		call 	CheckNextA 					; check for ]
   81 D1:A9D3 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:A9D4 7C -  -  -  		ld 		a,h
   83 D1:A9D5 B5 -  -  -  		or 		l
   84 D1:A9D6 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:A9D8 D9 -  -  -  		exx
   86 D1:A9D9 23 -  -  -  		inc 	hl
   87 D1:A9DA D9 -  -  -  		exx
   88 D1:A9DB -  -  -  -  _DANoCarry:
   89 D1:A9DB D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:A9DC 7C -  -  -  		ld 		a,h
   91 D1:A9DD B5 -  -  -  		or 		l
   92 D1:A9DE D9 -  -  -  		exx
   93 D1:A9DF 20 C4 -  -  		jr 		nz,_CDError
   94 D1:A9E1 CD 7C B2 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:A9E5 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:A9E6 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:A9E7 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:A9ED AF -  -  -  		xor 	a 							; autocreate off
   99 D1:A9EE 32 01 A9 D1 		ld 		(AllowAutoCreate),a
  100 D1:A9F2 C9 -  -  -  		ret
  101 D1:A9F3 -  -  -  -  
  102 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  103 D1:A9F3 -  -  -  -  ;
  104 D1:A9F3 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:A9F3 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:A9F3 -  -  -  -  ;
  107 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  108 D1:A9F3 -  -  -  -  
  109 D1:A9F3 -  -  -  -  DimensionArray:
  110 D1:A9F3 D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:A9F4 -  -  -  -  		;
  112 D1:A9F4 CD 55 AE D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:A9F8 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:A9F9 E6 FC -  -  		and 	$FC
  115 D1:A9FB D9 -  -  -  		exx
  116 D1:A9FC B4 -  -  -  		or 		h
  117 D1:A9FD B5 -  -  -  		or 		l
  118 D1:A9FE D9 -  -  -  		exx
  119 D1:A9FF 20 A4 -  -  		jr 		nz,_CDError
  120 D1:AA01 -  -  -  -  		;
  121 D1:AA01 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:AA03 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:AA04 -  -  -  -  		;
  124 D1:AA04 CD 4C B6 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AA08 CD 88 B6 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AA0C 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AA0E -  -  -  -  		;
  128 D1:AA0E E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AA0F E5 -  -  -  		push 	hl
  130 D1:AA10 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AA11 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AA12 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AA13 29 -  -  -  		add 	hl,hl
  134 D1:AA14 CD 7C B5 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AA18 -  -  -  -  		;
  136 D1:AA18 D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AA19 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AA1D 09 -  -  -  		add 	hl,bc
  139 D1:AA1E ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AA24 DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AA26 C9 -  -  -  		ret		
  142 D1:AA27 -  -  -  -  
  143 D1:AA27 -  -  -  -  
  144 D1:AA27 -  -  -  -  ; ***************************************************************************************
  145 D1:AA27 -  -  -  -  ;
  146 D1:AA27 -  -  -  -  ;									Changes and Updates
  147 D1:AA27 -  -  -  -  ;
  148 D1:AA27 -  -  -  -  ; ***************************************************************************************
  149 D1:AA27 -  -  -  -  ;
  150 D1:AA27 -  -  -  -  ;		Date			Notes
  151 D1:AA27 -  -  -  -  ;		==== 			=====
  152 D1:AA27 -  -  -  -  ;
  153 D1:AA27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 D1:AA27 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AA27 -  -  -  -  ; ***************************************************************************************
    2 D1:AA27 -  -  -  -  ; ***************************************************************************************
    3 D1:AA27 -  -  -  -  ;
    4 D1:AA27 -  -  -  -  ;		Name : 		end.asm
    5 D1:AA27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA27 -  -  -  -  ;		Reviewed :	No
    8 D1:AA27 -  -  -  -  ;		Purpose :	End command
    9 D1:AA27 -  -  -  -  ;
   10 D1:AA27 -  -  -  -  ; ***************************************************************************************
   11 D1:AA27 -  -  -  -  ; ***************************************************************************************
   12 D1:AA27 -  -  -  -  
   13 D1:AA27 -  -  -  -  ; ***************************************************************************************
   14 D1:AA27 -  -  -  -  ;
   15 D1:AA27 -  -  -  -  ;										END command
   16 D1:AA27 -  -  -  -  ;
   17 D1:AA27 -  -  -  -  ; ***************************************************************************************
   18 D1:AA27 -  -  -  -  
   19 D1:AA27 -  -  -  -  Command_END: 	;; [end]
   20 D1:AA27 3E 00 C3 22 
              AC D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AA2D -  -  -  -  
   22 D1:AA2D -  -  -  -  ; ***************************************************************************************
   23 D1:AA2D -  -  -  -  ;
   24 D1:AA2D -  -  -  -  ;									Changes and Updates
   25 D1:AA2D -  -  -  -  ;
   26 D1:AA2D -  -  -  -  ; ***************************************************************************************
   27 D1:AA2D -  -  -  -  ;
   28 D1:AA2D -  -  -  -  ;		Date			Notes
   29 D1:AA2D -  -  -  -  ;		==== 			=====
   30 D1:AA2D -  -  -  -  ;
   31 D1:AA2D -  -  -  -  ; ***************************************************************************************
   32 D1:AA2D -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA2D -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AA2D -  -  -  -  ; ***************************************************************************************
    2 D1:AA2D -  -  -  -  ; ***************************************************************************************
    3 D1:AA2D -  -  -  -  ;
    4 D1:AA2D -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AA2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA2D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA2D -  -  -  -  ;		Reviewed :	None
    8 D1:AA2D -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AA2D -  -  -  -  ;
   10 D1:AA2D -  -  -  -  ; ***************************************************************************************
   11 D1:AA2D -  -  -  -  ; ***************************************************************************************
   12 D1:AA2D -  -  -  -  
   13 D1:AA2D -  -  -  -  ; ***************************************************************************************
   14 D1:AA2D -  -  -  -  ;
   15 D1:AA2D -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AA2D -  -  -  -  ;
   17 D1:AA2D -  -  -  -  ; ***************************************************************************************
   18 D1:AA2D -  -  -  -  
   19 D1:AA2D -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AA2D DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AA32 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA36 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA39 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA3B -  -  -  -  		;
   25 D1:AA3B ED 7B E1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA40 C3 44 AB D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA44 -  -  -  -  
   28 D1:AA44 -  -  -  -  ; ***************************************************************************************
   29 D1:AA44 -  -  -  -  ;
   30 D1:AA44 -  -  -  -  ;									Changes and Updates
   31 D1:AA44 -  -  -  -  ;
   32 D1:AA44 -  -  -  -  ; ***************************************************************************************
   33 D1:AA44 -  -  -  -  ;
   34 D1:AA44 -  -  -  -  ;		Date			Notes
   35 D1:AA44 -  -  -  -  ;		==== 			=====
   36 D1:AA44 -  -  -  -  ;
   37 D1:AA44 -  -  -  -  ; ***************************************************************************************
   38 D1:AA44 -  -  -  -  		
Listing for file "_build.asm"
   20 D1:AA44 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA44 -  -  -  -  ; ***************************************************************************************
    2 D1:AA44 -  -  -  -  ; ***************************************************************************************
    3 D1:AA44 -  -  -  -  ;
    4 D1:AA44 -  -  -  -  ;		Name : 		let.asm
    5 D1:AA44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA44 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA44 -  -  -  -  ;		Reviewed :	No
    8 D1:AA44 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA44 -  -  -  -  ;
   10 D1:AA44 -  -  -  -  ; ***************************************************************************************
   11 D1:AA44 -  -  -  -  ; ***************************************************************************************
   12 D1:AA44 -  -  -  -  
   13 D1:AA44 -  -  -  -  ; ***************************************************************************************
   14 D1:AA44 -  -  -  -  ;
   15 D1:AA44 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA44 -  -  -  -  ;
   17 D1:AA44 -  -  -  -  ; ***************************************************************************************
   18 D1:AA44 -  -  -  -  
   19 D1:AA44 -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA44 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA47 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA49 28 2F -  -  		jr 		z,_CLString
   23 D1:AA4B FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA4D 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA4F 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA51 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA55 -  -  -  -  _CLNoAuto:
   28 D1:AA55 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA57 CD D7 AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA5B CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA5D CA 8C AC D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA61 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA62 C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA63 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA64 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA68 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA6A CD 16 AC D1 		call 	CheckNextA
   38 D1:AA6E -  -  -  -  
   39 D1:AA6E CD 4D AE D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA72 -  -  -  -  
   41 D1:AA72 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA73 43 -  -  -  		ld 		b,e 						
   43 D1:AA74 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA75 -  -  -  -  		;
   45 D1:AA75 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA75 -  -  -  -  		;
   47 D1:AA75 CD 93 AA D1 		call 	WriteHLToDE
   48 D1:AA79 C9 -  -  -  		ret
   49 D1:AA7A -  -  -  -  		;
   50 D1:AA7A -  -  -  -  		; 		String assignment code.
   51 D1:AA7A -  -  -  -  		;
   52 D1:AA7A -  -  -  -  _CLString:
   53 D1:AA7A CD 3E AE D1 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 D1:AA7E E5 -  -  -  		push 	hl 							; save target expression
   55 D1:AA7F 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 D1:AA81 CD 16 AC D1 		call 	CheckNextA
   57 D1:AA85 CD 6F AE D1 		call 	EvaluateString 				; get the thing to copy
   58 D1:AA89 D1 -  -  -  		pop 	de 							; target in DE.
   59 D1:AA8A -  -  -  -  _CLCopy:
   60 D1:AA8A 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 D1:AA8B 12 -  -  -  		ld 		(de),a
   62 D1:AA8C 23 -  -  -  		inc 	hl
   63 D1:AA8D 13 -  -  -  		inc 	de
   64 D1:AA8E FE 20 -  -  		cp 		$20 						; until control character
   65 D1:AA90 30 F8 -  -  		jr 		nc,_CLCopy
   66 D1:AA92 C9 -  -  -  		ret
   67 D1:AA93 -  -  -  -  
   68 D1:AA93 -  -  -  -  ; ***************************************************************************************
   69 D1:AA93 -  -  -  -  ;
   70 D1:AA93 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 D1:AA93 -  -  -  -  ;
   72 D1:AA93 -  -  -  -  ; ***************************************************************************************
   73 D1:AA93 -  -  -  -  
   74 D1:AA93 -  -  -  -  WriteHLToDE:
   75 D1:AA93 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 D1:AA95 C2 80 AC D1 		jp 		nz,TypeMismatch
   77 D1:AA99 -  -  -  -  		;
   78 D1:AA99 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 D1:AA99 -  -  -  -  		;		
   80 D1:AA99 -  -  -  -  _WHDWriteNumber:
   81 D1:AA99 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 D1:AA9A D9 -  -  -  		exx
   83 D1:AA9B EB -  -  -  		ex 		de,hl
   84 D1:AA9C D9 -  -  -  		exx
   85 D1:AA9D -  -  -  -  
   86 D1:AA9D 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 D1:AA9E 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 D1:AA9F 72 -  -  -  		ld 		(hl),d
   89 D1:AAA0 23 -  -  -  		inc 	hl
   90 D1:AAA1 E5 -  -  -  		push 	hl
   91 D1:AAA2 D9 -  -  -  		exx
   92 D1:AAA3 E1 -  -  -  		pop 	hl
   93 D1:AAA4 73 -  -  -  		ld 		(hl),e
   94 D1:AAA5 23 -  -  -  		inc 	hl
   95 D1:AAA6 72 -  -  -  		ld 		(hl),d
   96 D1:AAA7 D9 -  -  -  		exx
   97 D1:AAA8 -  -  -  -  
   98 D1:AAA8 C9 -  -  -  		ret
   99 D1:AAA9 -  -  -  -  
  100 D1:AAA9 -  -  -  -  ; ***************************************************************************************
  101 D1:AAA9 -  -  -  -  ;
  102 D1:AAA9 -  -  -  -  ;									Changes and Updates
  103 D1:AAA9 -  -  -  -  ;
  104 D1:AAA9 -  -  -  -  ; ***************************************************************************************
  105 D1:AAA9 -  -  -  -  ;
  106 D1:AAA9 -  -  -  -  ;		Date			Notes
  107 D1:AAA9 -  -  -  -  ;		==== 			=====
  108 D1:AAA9 -  -  -  -  ;
  109 D1:AAA9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AAA9 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AAA9 -  -  -  -  ; ***************************************************************************************
    2 D1:AAA9 -  -  -  -  ; ***************************************************************************************
    3 D1:AAA9 -  -  -  -  ;
    4 D1:AAA9 -  -  -  -  ;		Name : 		print.asm
    5 D1:AAA9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAA9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAA9 -  -  -  -  ;		Reviewed :	No
    8 D1:AAA9 -  -  -  -  ;		Purpose :	Print command
    9 D1:AAA9 -  -  -  -  ;
   10 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   11 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   12 D1:AAA9 -  -  -  -  
   13 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   14 D1:AAA9 -  -  -  -  ;
   15 D1:AAA9 -  -  -  -  ;										PRINT command
   16 D1:AAA9 -  -  -  -  ;
   17 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   18 D1:AAA9 -  -  -  -  
   19 D1:AAA9 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AAA9 3E F6 -  -  		ld 		a,-10 						; default base.
   21 D1:AAAB 32 03 A9 D1 		ld 		(PrintBase),a
   22 D1:AAAF -  -  -  -  		;
   23 D1:AAAF -  -  -  -  		;		Main loop
   24 D1:AAAF -  -  -  -  		;
   25 D1:AAAF -  -  -  -  _CPRLoop:
   26 D1:AAAF DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 D1:AAB2 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 D1:AAB4 28 59 -  -  		jr 		z,_CPRExitNL
   29 D1:AAB6 FE A7 -  -  		cp 		KWD_COLON 	
   30 D1:AAB8 28 55 -  -  		jr 		z,_CPRExitNL
   31 D1:AABA FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 D1:AABC 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 D1:AABE FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 D1:AAC0 28 34 -  -  		jr 		z,_CPRTab
   35 D1:AAC2 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 D1:AAC4 28 2A -  -  		jr 		z,_CPRNewLine
   37 D1:AAC6 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 D1:AAC8 28 1C -  -  		jr 		z,_CPRHexMode
   39 D1:AACA -  -  -  -  		;
   40 D1:AACA CD 4D AE D1 		call 	EvaluateValue 				; so it must be an expression.		
   41 D1:AACE CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 D1:AAD0 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 D1:AAD2 -  -  -  -  		;
   44 D1:AAD2 3A 03 A9 D1 		ld 		a,(PrintBase)				; current print mode.
   45 D1:AAD6 -  -  -  -  _CPRPrintNumber:
   46 D1:AAD6 01 21 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AADA C5 -  -  -  		push 	bc
   48 D1:AADB CD ED BB D1 		call 	Int32ToString 				; convert to string
   49 D1:AADF E1 -  -  -  		pop 	hl
   50 D1:AAE0 -  -  -  -  		;
   51 D1:AAE0 -  -  -  -  		; 		Print text at HL.
   52 D1:AAE0 -  -  -  -  		;
   53 D1:AAE0 -  -  -  -  _CPRPrintHL:
   54 D1:AAE0 CD 71 B5 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AAE4 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AAE6 -  -  -  -  		;
   57 D1:AAE6 -  -  -  -  		;		Hex mode (~)
   58 D1:AAE6 -  -  -  -  		;
   59 D1:AAE6 -  -  -  -  _CPRHexMode:		
   60 D1:AAE6 3E 10 -  -  		ld 		a,16
   61 D1:AAE8 32 03 A9 D1 		ld 		(PrintBase),a
   62 D1:AAEC DD 23 -  -  		inc 	ix
   63 D1:AAEE 18 BF -  -  		jr 		_CPRLoop
   64 D1:AAF0 -  -  -  -  		;
   65 D1:AAF0 -  -  -  -  		; 		New line (')
   66 D1:AAF0 -  -  -  -  		;
   67 D1:AAF0 -  -  -  -  _CPRNewLine:
   68 D1:AAF0 CD 88 BC D1 		call 	SYSPrintCRLF
   69 D1:AAF4 18 0C -  -  		jr 		_CPRCheckNext
   70 D1:AAF6 -  -  -  -  		;
   71 D1:AAF6 -  -  -  -  		; 		Tab command (,)
   72 D1:AAF6 -  -  -  -  		;
   73 D1:AAF6 -  -  -  -  _CPRTab:
   74 D1:AAF6 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 D1:AAF8 CD 60 BC D1 		call 	SYSPrintChar
   76 D1:AAFC -  -  -  -  		;
   77 D1:AAFC -  -  -  -  		;		Set to base 10 then check next character
   78 D1:AAFC -  -  -  -  		;
   79 D1:AAFC -  -  -  -  _CPRCheckNext10:		
   80 D1:AAFC 3E F6 -  -  		ld 		a,-10
   81 D1:AAFE 32 03 A9 D1 		ld 		(PrintBase),a
   82 D1:AB02 -  -  -  -  		;
   83 D1:AB02 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 D1:AB02 -  -  -  -  		;		
   85 D1:AB02 -  -  -  -  _CPRCheckNext:
   86 D1:AB02 DD 23 -  -  		inc 	ix 							; consume current
   87 D1:AB04 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 D1:AB07 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 D1:AB09 C8 -  -  -  		ret 	z
   90 D1:AB0A FE A7 -  -  		cp 		KWD_COLON
   91 D1:AB0C C8 -  -  -  		ret 	z
   92 D1:AB0D 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 D1:AB0F -  -  -  -  		;
   94 D1:AB0F -  -  -  -  		;		Found EOL or : not after ; ,
   95 D1:AB0F -  -  -  -  		;
   96 D1:AB0F -  -  -  -  _CPRExitNL:
   97 D1:AB0F CD 88 BC D1 		call 	SYSPrintCRLF 				; do CR/LF
   98 D1:AB13 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 D1:AB14 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AB14 -  -  -  -  ; ***************************************************************************************
    2 D1:AB14 -  -  -  -  ; ***************************************************************************************
    3 D1:AB14 -  -  -  -  ;
    4 D1:AB14 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AB14 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB14 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB14 -  -  -  -  ;		Reviewed :	No
    8 D1:AB14 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AB14 -  -  -  -  ;
   10 D1:AB14 -  -  -  -  ; ***************************************************************************************
   11 D1:AB14 -  -  -  -  ; ***************************************************************************************
   12 D1:AB14 -  -  -  -  
   13 D1:AB14 -  -  -  -  ; ***************************************************************************************
   14 D1:AB14 -  -  -  -  ;
   15 D1:AB14 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AB14 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AB14 -  -  -  -  ;
   18 D1:AB14 -  -  -  -  ; ***************************************************************************************
   19 D1:AB14 -  -  -  -  
   20 D1:AB14 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AB14 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AB14 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AB17 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 D1:AB19 C8 -  -  -  		ret 	z
   25 D1:AB1A DD 23 -  -  		inc 	ix
   26 D1:AB1C FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 D1:AB1E C8 -  -  -  		ret 	z
   28 D1:AB1F FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AB21 C2 8C AC D1 		jp 		nz,SyntaxError
   30 D1:AB25 -  -  -  -  		;		
   31 D1:AB25 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AB29 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AB2C 13 -  -  -  		inc 	de 
   34 D1:AB2D 13 -  -  -  		inc 	de
   35 D1:AB2E DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AB30 C9 -  -  -  		ret
   37 D1:AB31 -  -  -  -  
   38 D1:AB31 -  -  -  -  ; ***************************************************************************************
   39 D1:AB31 -  -  -  -  ;
   40 D1:AB31 -  -  -  -  ;									Changes and Updates
   41 D1:AB31 -  -  -  -  ;
   42 D1:AB31 -  -  -  -  ; ***************************************************************************************
   43 D1:AB31 -  -  -  -  ;
   44 D1:AB31 -  -  -  -  ;		Date			Notes
   45 D1:AB31 -  -  -  -  ;		==== 			=====
   46 D1:AB31 -  -  -  -  ;
   47 D1:AB31 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AB31 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AB31 -  -  -  -  ; ***************************************************************************************
    2 D1:AB31 -  -  -  -  ; ***************************************************************************************
    3 D1:AB31 -  -  -  -  ;
    4 D1:AB31 -  -  -  -  ;		Name : 		run.asm
    5 D1:AB31 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB31 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB31 -  -  -  -  ;		Reviewed :	No
    8 D1:AB31 -  -  -  -  ;		Purpose :	Run command
    9 D1:AB31 -  -  -  -  ;
   10 D1:AB31 -  -  -  -  ; ***************************************************************************************
   11 D1:AB31 -  -  -  -  ; ***************************************************************************************
   12 D1:AB31 -  -  -  -  
   13 D1:AB31 -  -  -  -  ; ***************************************************************************************
   14 D1:AB31 -  -  -  -  ;
   15 D1:AB31 -  -  -  -  ;										RUN command
   16 D1:AB31 -  -  -  -  ;
   17 D1:AB31 -  -  -  -  ; ***************************************************************************************
   18 D1:AB31 -  -  -  -  
   19 D1:AB31 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AB31 CD 9E B2 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AB35 -  -  -  -  
   22 D1:AB35 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AB3A ED 73 E1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AB3F AF -  -  -  		xor 	a
   25 D1:AB40 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AB44 -  -  -  -  		;
   27 D1:AB44 -  -  -  -  		; 		New line at IX.
   28 D1:AB44 -  -  -  -  		;
   29 D1:AB44 -  -  -  -  CRNewLine:
   30 D1:AB44 DD 22 DD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AB49 -  -  -  -  		;
   32 D1:AB49 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AB4C B7 -  -  -  		or 		a
   34 D1:AB4D CA 27 AA D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AB51 -  -  -  -  		;
   36 D1:AB51 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AB53 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AB55 DD 23 -  -  		inc 	ix
   39 D1:AB57 -  -  -  -  		;
   40 D1:AB57 -  -  -  -  		; 		New command at IX
   41 D1:AB57 -  -  -  -  		;
   42 D1:AB57 -  -  -  -  _CRNewCommand:	
   43 D1:AB57 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB5A B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB5B F2 96 AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB5F -  -  -  -  		;
   47 D1:AB5F FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB61 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB63 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB65 D2 86 AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB69 -  -  -  -  		;
   52 D1:AB69 -  -  -  -  _CRDoCommand:		
   53 D1:AB69 E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 B8 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB7E DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB80 CD E5 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB84 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB86 -  -  -  -  		;
   58 D1:AB86 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB86 -  -  -  -  		;
   60 D1:AB86 -  -  -  -  		;
   61 D1:AB86 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB86 -  -  -  -  		;		
   63 D1:AB86 -  -  -  -  _CRAlternateLets:		
   64 D1:AB86 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB88 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB8A FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB8C 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB8E FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB90 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB92 C3 8C AC D1 		jp 		SyntaxError
   71 D1:AB96 -  -  -  -  		;
   72 D1:AB96 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB96 -  -  -  -  		;
   74 D1:AB96 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB96 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB98 D2 8C AC D1 		jp 		nc,SyntaxError
   77 D1:AB9C -  -  -  -  _CRAssignmentLet:		
   78 D1:AB9C CD 44 AA D1 		call	Command_LET 				; do LET.
   79 D1:ABA0 C3 57 AB D1 		jp 		_CRNewCommand
   80 D1:ABA4 -  -  -  -  
   81 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   82 D1:ABA4 -  -  -  -  ;
   83 D1:ABA4 -  -  -  -  ;									Changes and Updates
   84 D1:ABA4 -  -  -  -  ;
   85 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   86 D1:ABA4 -  -  -  -  ;
   87 D1:ABA4 -  -  -  -  ;		Date			Notes
   88 D1:ABA4 -  -  -  -  ;		==== 			=====
   89 D1:ABA4 -  -  -  -  ;
   90 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   91 D1:ABA4 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:ABA4 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:ABA4 -  -  -  -  ; ***************************************************************************************
    2 D1:ABA4 -  -  -  -  ; ***************************************************************************************
    3 D1:ABA4 -  -  -  -  ;
    4 D1:ABA4 -  -  -  -  ;		Name : 		stop.asm
    5 D1:ABA4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABA4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABA4 -  -  -  -  ;		Reviewed :	No
    8 D1:ABA4 -  -  -  -  ;		Purpose :	Stop command
    9 D1:ABA4 -  -  -  -  ;
   10 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   11 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   12 D1:ABA4 -  -  -  -  
   13 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   14 D1:ABA4 -  -  -  -  ;
   15 D1:ABA4 -  -  -  -  ;										STOP command
   16 D1:ABA4 -  -  -  -  ;
   17 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   18 D1:ABA4 -  -  -  -  
   19 D1:ABA4 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:ABA4 3E 16 C3 22 
              AC D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:ABAA -  -  -  -  
   22 D1:ABAA -  -  -  -  ; ***************************************************************************************
   23 D1:ABAA -  -  -  -  ;
   24 D1:ABAA -  -  -  -  ;									Changes and Updates
   25 D1:ABAA -  -  -  -  ;
   26 D1:ABAA -  -  -  -  ; ***************************************************************************************
   27 D1:ABAA -  -  -  -  ;
   28 D1:ABAA -  -  -  -  ;		Date			Notes
   29 D1:ABAA -  -  -  -  ;		==== 			=====
   30 D1:ABAA -  -  -  -  ;
   31 D1:ABAA -  -  -  -  ; ***************************************************************************************
   32 D1:ABAA -  -  -  -  		
Listing for file "_build.asm"
   25 D1:ABAA -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 D1:ABAA -  -  -  -  ; ***************************************************************************************
    2 D1:ABAA -  -  -  -  ; ***************************************************************************************
    3 D1:ABAA -  -  -  -  ;
    4 D1:ABAA -  -  -  -  ;		Name : 		vdu.asm
    5 D1:ABAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABAA -  -  -  -  ;		Date : 		8th June 2022
    7 D1:ABAA -  -  -  -  ;		Reviewed :	No
    8 D1:ABAA -  -  -  -  ;		Purpose :	Vdu command
    9 D1:ABAA -  -  -  -  ;
   10 D1:ABAA -  -  -  -  ; ***************************************************************************************
   11 D1:ABAA -  -  -  -  ; ***************************************************************************************
   12 D1:ABAA -  -  -  -  
   13 D1:ABAA -  -  -  -  ; ***************************************************************************************
   14 D1:ABAA -  -  -  -  ;
   15 D1:ABAA -  -  -  -  ;										END command
   16 D1:ABAA -  -  -  -  ;
   17 D1:ABAA -  -  -  -  ; ***************************************************************************************
   18 D1:ABAA -  -  -  -  
   19 D1:ABAA -  -  -  -  Command_VDU: 	;; [vdu]
   20 D1:ABAA DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 D1:ABAD FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 D1:ABAF C8 -  -  -  		ret 	z
   23 D1:ABB0 FE A7 -  -  		cp 		KWD_COLON
   24 D1:ABB2 C8 -  -  -  		ret 	z
   25 D1:ABB3 -  -  -  -  		;
   26 D1:ABB3 CD 55 AE D1 		call 	EvaluateInteger 			; evaluate integer value
   27 D1:ABB7 D9 -  -  -  		exx 								; check 0-FFFF
   28 D1:ABB8 7C -  -  -  		ld 		a,h
   29 D1:ABB9 B5 -  -  -  		or 		l
   30 D1:ABBA D9 -  -  -  		exx
   31 D1:ABBB C2 86 AC D1 		jp  	nz,BadValue
   32 D1:ABBF E5 -  -  -  		push 	hl 							; save on stack
   33 D1:ABC0 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 D1:ABC1 CD 60 BC D1 		call 	SYSPrintChar
   35 D1:ABC5 E1 -  -  -  		pop 	hl 							; get upper back
   36 D1:ABC6 DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 D1:ABC9 DD 23 -  -  		inc 	ix 
   38 D1:ABCB FE A6 -  -  		cp 		KWD_COMMA 					
   39 D1:ABCD 28 DB -  -  		jr 		z,Command_VDU
   40 D1:ABCF FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 D1:ABD1 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 D1:ABD3 DD 2B -  -  		dec 	ix 							; go back and try again
   43 D1:ABD5 18 D3 -  -  		jr 		Command_VDU
   44 D1:ABD7 -  -  -  -  
   45 D1:ABD7 -  -  -  -  _VDUUpper:
   46 D1:ABD7 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 D1:ABD8 CD 60 BC D1 		call 	SYSPrintChar
   48 D1:ABDC 18 CC -  -  		jr 		Command_VDU		
   49 D1:ABDE -  -  -  -  
   50 D1:ABDE -  -  -  -  ; ***************************************************************************************
   51 D1:ABDE -  -  -  -  ;
   52 D1:ABDE -  -  -  -  ;									Changes and Updates
   53 D1:ABDE -  -  -  -  ;
   54 D1:ABDE -  -  -  -  ; ***************************************************************************************
   55 D1:ABDE -  -  -  -  ;
   56 D1:ABDE -  -  -  -  ;		Date			Notes
   57 D1:ABDE -  -  -  -  ;		==== 			=====
   58 D1:ABDE -  -  -  -  ;
   59 D1:ABDE -  -  -  -  ; ***************************************************************************************
   60 D1:ABDE -  -  -  -  		
Listing for file "_build.asm"
   26 D1:ABDE -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:ABDE -  -  -  -  ; ***************************************************************************************
    2 D1:ABDE -  -  -  -  ; ***************************************************************************************
    3 D1:ABDE -  -  -  -  ;
    4 D1:ABDE -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:ABDE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABDE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABDE -  -  -  -  ;		Reviewed :	No
    8 D1:ABDE -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:ABDE -  -  -  -  ;
   10 D1:ABDE -  -  -  -  ; ***************************************************************************************
   11 D1:ABDE -  -  -  -  ; ***************************************************************************************
   12 D1:ABDE -  -  -  -  
   13 D1:ABDE -  -  -  -  ; ***************************************************************************************
   14 D1:ABDE -  -  -  -  ;
   15 D1:ABDE -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:ABDE -  -  -  -  ;
   17 D1:ABDE -  -  -  -  ; ***************************************************************************************
   18 D1:ABDE -  -  -  -  
   19 D1:ABDE -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:ABDE             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:ABDE             		inc 	ix
   22 D1:ABDE             		cp 		ch 							; exit if matches
   23 D1:ABDE             		ret 	z
   24 D1:ABDE             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:ABDE             		jp 		ErrorHandler
   26 D1:ABDE             #endmacro
   27 D1:ABDE -  -  -  -  
   28 D1:ABDE -  -  -  -  CheckLeftBracket:
   29 D1:ABDE DD 7E 00 DD 
              23 FE 95 C8 
              3E 0E C3 22 
              AC D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:ABEC -  -  -  -  
   31 D1:ABEC -  -  -  -  CheckRightBracket:
   32 D1:ABEC DD 7E 00 DD 
              23 FE A5 C8 
              3E 10 C3 22 
              AC D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:ABFA -  -  -  -  
   34 D1:ABFA -  -  -  -  CheckDollar:
   35 D1:ABFA DD 7E 00 DD 
              23 FE 96 C8 
              3E 0D C3 22 
              AC D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AC08 -  -  -  -  		
   37 D1:AC08 -  -  -  -  CheckComma:
   38 D1:AC08 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0C C3 22 
              AC D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AC16 -  -  -  -  
   40 D1:AC16 -  -  -  -  ; ***************************************************************************************
   41 D1:AC16 -  -  -  -  ;
   42 D1:AC16 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AC16 -  -  -  -  ;
   44 D1:AC16 -  -  -  -  ; ***************************************************************************************
   45 D1:AC16 -  -  -  -  
   46 D1:AC16 -  -  -  -  CheckNextA:
   47 D1:AC16 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AC19 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AC1B C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AC1C 3E 17 C3 22 
              AC D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AC22 -  -  -  -  		
   52 D1:AC22 -  -  -  -  ; ***************************************************************************************
   53 D1:AC22 -  -  -  -  ;
   54 D1:AC22 -  -  -  -  ;									Changes and Updates
   55 D1:AC22 -  -  -  -  ;
   56 D1:AC22 -  -  -  -  ; ***************************************************************************************
   57 D1:AC22 -  -  -  -  ;
   58 D1:AC22 -  -  -  -  ;		Date			Notes
   59 D1:AC22 -  -  -  -  ;		==== 			=====
   60 D1:AC22 -  -  -  -  ;
   61 D1:AC22 -  -  -  -  ; ***************************************************************************************
   62 D1:AC22 -  -  -  -  		
Listing for file "_build.asm"
   27 D1:AC22 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AC22 -  -  -  -  ; ***************************************************************************************
    2 D1:AC22 -  -  -  -  ; ***************************************************************************************
    3 D1:AC22 -  -  -  -  ;
    4 D1:AC22 -  -  -  -  ;		Name : 		errors.asm
    5 D1:AC22 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC22 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC22 -  -  -  -  ;		Reviewed :	No
    8 D1:AC22 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AC22 -  -  -  -  ;
   10 D1:AC22 -  -  -  -  ; ***************************************************************************************
   11 D1:AC22 -  -  -  -  ; ***************************************************************************************
   12 D1:AC22 -  -  -  -  
   13 D1:AC22 -  -  -  -  ; ***************************************************************************************
   14 D1:AC22 -  -  -  -  ;
   15 D1:AC22 -  -  -  -  ;								Error handler, message A 
   16 D1:AC22 -  -  -  -  ;
   17 D1:AC22 -  -  -  -  ; ***************************************************************************************
   18 D1:AC22 -  -  -  -  
   19 D1:AC22 -  -  -  -  ErrorHandler:
   20 D1:AC22 F5 -  -  -  		push 	af 						; save error ID
   21 D1:AC23 -  -  -  -  
   22 D1:AC23 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AC27 6F -  -  -  		ld 		l,a
   24 D1:AC28 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AC29 29 -  -  -  		add 	hl,hl 		
   26 D1:AC2A 11 F1 B6 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AC2E 19 -  -  -  		add 	hl,de
   28 D1:AC2F ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AC31 CD 71 B5 D1 		call 	PrintStringAtHL
   30 D1:AC35 -  -  -  -  		;
   31 D1:AC35 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AC36 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AC37 28 2F -  -  		jr 		z,_EHExit
   34 D1:AC39 -  -  -  -  		;
   35 D1:AC39 DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AC3E DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AC41 B7 -  -  -  		or 		a
   38 D1:AC42 28 24 -  -  		jr 		z,_EHExit
   39 D1:AC44 -  -  -  -  
   40 D1:AC44 21 70 AC D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AC48 CD 71 B5 D1 		call 	PrintStringAtHL 
   42 D1:AC4C -  -  -  -  		
   43 D1:AC4C D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AC4D 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AC51 D9 -  -  -  		exx 
   46 D1:AC52 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AC55 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AC58 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AC5A 01 21 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AC5E CD ED BB D1 		call 	Int32ToString
   51 D1:AC62 C5 -  -  -  		push 	bc
   52 D1:AC63 E1 -  -  -  		pop 	hl
   53 D1:AC64 CD 71 B5 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AC68 -  -  -  -  _EHExit:		
   55 D1:AC68 CD 88 BC D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AC6C C3 9B A8 D1 		jp 		WarmStart
   57 D1:AC70 -  -  -  -  
   58 D1:AC70 -  -  -  -  _EHAtText:
   59 D1:AC70 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AC7A -  -  -  -  
   61 D1:AC7A -  -  -  -  NotImplemented:
   62 D1:AC7A 3E 05 C3 22 
              AC D1 -  -  		ERR_DISABLED
   63 D1:AC80 -  -  -  -  TypeMismatch:
   64 D1:AC80 3E 02 C3 22 
              AC D1 -  -  		ERR_BADTYPE
   65 D1:AC86 -  -  -  -  BadValue:
   66 D1:AC86 3E 03 C3 22 
              AC D1 -  -  		ERR_BADVALUE
   67 D1:AC8C -  -  -  -  SyntaxError:
   68 D1:AC8C 3E 17 C3 22 
              AC D1 -  -  		ERR_SYNTAX
   69 D1:AC92 -  -  -  -  						
   70 D1:AC92 -  -  -  -  ; ***************************************************************************************
   71 D1:AC92 -  -  -  -  ;
   72 D1:AC92 -  -  -  -  ;									Changes and Updates
   73 D1:AC92 -  -  -  -  ;
   74 D1:AC92 -  -  -  -  ; ***************************************************************************************
   75 D1:AC92 -  -  -  -  ;
   76 D1:AC92 -  -  -  -  ;		Date			Notes
   77 D1:AC92 -  -  -  -  ;		==== 			=====
   78 D1:AC92 -  -  -  -  ;
   79 D1:AC92 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC92 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AC92 -  -  -  -  ; ***************************************************************************************
    2 D1:AC92 -  -  -  -  ; ***************************************************************************************
    3 D1:AC92 -  -  -  -  ;
    4 D1:AC92 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AC92 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC92 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC92 -  -  -  -  ;		Reviewed :	No
    8 D1:AC92 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AC92 -  -  -  -  ;
   10 D1:AC92 -  -  -  -  ; ***************************************************************************************
   11 D1:AC92 -  -  -  -  ; ***************************************************************************************
   12 D1:AC92 -  -  -  -  
   13 D1:AC92 -  -  -  -  ; ***************************************************************************************
   14 D1:AC92 -  -  -  -  ;
   15 D1:AC92 -  -  -  -  ; 									Addition
   16 D1:AC92 -  -  -  -  ;
   17 D1:AC92 -  -  -  -  ; ***************************************************************************************
   18 D1:AC92 -  -  -  -  
   19 D1:AC92 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AC92 CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 6C 
              BB D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:ACA0 -  -  -  -  
   22 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   23 D1:ACA0 -  -  -  -  ;
   24 D1:ACA0 -  -  -  -  ; 									Subtraction
   25 D1:ACA0 -  -  -  -  ;
   26 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   27 D1:ACA0 -  -  -  -  
   28 D1:ACA0 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:ACA0 CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 74 
              BB D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:ACAE -  -  -  -  
   31 D1:ACAE -  -  -  -  ; ***************************************************************************************
   32 D1:ACAE -  -  -  -  ;
   33 D1:ACAE -  -  -  -  ; 									  Multiply
   34 D1:ACAE -  -  -  -  ;
   35 D1:ACAE -  -  -  -  ; ***************************************************************************************
   36 D1:ACAE -  -  -  -  
   37 D1:ACAE -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:ACAE CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 33 
              BB D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:ACBC -  -  -  -  
   40 D1:ACBC -  -  -  -  ; ***************************************************************************************
   41 D1:ACBC -  -  -  -  ;
   42 D1:ACBC -  -  -  -  ; 									  Divide
   43 D1:ACBC -  -  -  -  ;
   44 D1:ACBC -  -  -  -  ; ***************************************************************************************
   45 D1:ACBC -  -  -  -  
   46 D1:ACBC -  -  -  -  ALUDivide: 	;; [/]
   47 D1:ACBC -  -  -  -  ALUDivide2:	;; [div]
   48 D1:ACBC CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 33 
              BA D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:ACCA -  -  -  -  
   50 D1:ACCA -  -  -  -  ; ***************************************************************************************
   51 D1:ACCA -  -  -  -  ;
   52 D1:ACCA -  -  -  -  ; 									  Modulus
   53 D1:ACCA -  -  -  -  ;
   54 D1:ACCA -  -  -  -  ; ***************************************************************************************
   55 D1:ACCA -  -  -  -  
   56 D1:ACCA -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:ACCA CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 36 
              BA D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:ACD8 -  -  -  -  
   59 D1:ACD8 -  -  -  -  ; ***************************************************************************************
   60 D1:ACD8 -  -  -  -  ;
   61 D1:ACD8 -  -  -  -  ; 									  Logical
   62 D1:ACD8 -  -  -  -  ;
   63 D1:ACD8 -  -  -  -  ; ***************************************************************************************
   64 D1:ACD8 -  -  -  -  
   65 D1:ACD8 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:ACD8 CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 7E 
              BB D1 -  -  		IntegerDispatch(Int32And)
   67 D1:ACE6 -  -  -  -  
   68 D1:ACE6 -  -  -  -  ALUOr: 			;; [or]
   69 D1:ACE6 CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 8B 
              BB D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ACF4 -  -  -  -  
   71 D1:ACF4 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ACF4 CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 98 
              BB D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AD02 -  -  -  -  
   74 D1:AD02 -  -  -  -  ; ***************************************************************************************
   75 D1:AD02 -  -  -  -  ;
   76 D1:AD02 -  -  -  -  ;									Changes and Updates
   77 D1:AD02 -  -  -  -  ;
   78 D1:AD02 -  -  -  -  ; ***************************************************************************************
   79 D1:AD02 -  -  -  -  ;
   80 D1:AD02 -  -  -  -  ;		Date			Notes
   81 D1:AD02 -  -  -  -  ;		==== 			=====
   82 D1:AD02 -  -  -  -  ;
   83 D1:AD02 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:AD02 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AD02 -  -  -  -  ; ***************************************************************************************
    2 D1:AD02 -  -  -  -  ; ***************************************************************************************
    3 D1:AD02 -  -  -  -  ;
    4 D1:AD02 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AD02 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD02 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD02 -  -  -  -  ;		Reviewed :	No
    8 D1:AD02 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AD02 -  -  -  -  ;
   10 D1:AD02 -  -  -  -  ; ***************************************************************************************
   11 D1:AD02 -  -  -  -  ; ***************************************************************************************
   12 D1:AD02 -  -  -  -  
   13 D1:AD02 -  -  -  -  ; ***************************************************************************************
   14 D1:AD02 -  -  -  -  ;
   15 D1:AD02 -  -  -  -  ; 									<l> <op> <r>
   16 D1:AD02 -  -  -  -  ;
   17 D1:AD02 -  -  -  -  ; ***************************************************************************************
   18 D1:AD02 -  -  -  -  
   19 D1:AD02 -  -  -  -  ALULongReference:			;; [!]
   20 D1:AD02 CD 12 AD D1 		call 	BRGetAddress 				; calculate address
   21 D1:AD06 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AD08 CB F9 -  -  		set 	CIsReference,c
   23 D1:AD0A C9 -  -  -  		ret
   24 D1:AD0B -  -  -  -  
   25 D1:AD0B -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AD0B CD 02 AD D1 		call 	ALULongReference
   27 D1:AD0F CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AD11 C9 -  -  -  		ret
   29 D1:AD12 -  -  -  -  
   30 D1:AD12 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AD12 CD AF AD D1 
              78 B1 C2 80 
              AC D1 C3 20 
              AD D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AD20 -  -  -  -  _BRGAMain:		
   33 D1:AD20 CD 6C BB D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AD24 CD B5 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AD28 C9 -  -  -  		ret
   36 D1:AD29 -  -  -  -  
   37 D1:AD29 -  -  -  -  ; ***************************************************************************************
   38 D1:AD29 -  -  -  -  ;
   39 D1:AD29 -  -  -  -  ;									Changes and Updates
   40 D1:AD29 -  -  -  -  ;
   41 D1:AD29 -  -  -  -  ; ***************************************************************************************
   42 D1:AD29 -  -  -  -  ;
   43 D1:AD29 -  -  -  -  ;		Date			Notes
   44 D1:AD29 -  -  -  -  ;		==== 			=====
   45 D1:AD29 -  -  -  -  ;
   46 D1:AD29 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD29 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AD29 -  -  -  -  ; ***************************************************************************************
    2 D1:AD29 -  -  -  -  ; ***************************************************************************************
    3 D1:AD29 -  -  -  -  ;
    4 D1:AD29 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AD29 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD29 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD29 -  -  -  -  ;		Reviewed :	No
    8 D1:AD29 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AD29 -  -  -  -  ;
   10 D1:AD29 -  -  -  -  ; ***************************************************************************************
   11 D1:AD29 -  -  -  -  ; ***************************************************************************************
   12 D1:AD29 -  -  -  -  
   13 D1:AD29 -  -  -  -  #macro compare_equals(n)
   14 D1:AD29             		call 	CompareBaseCode
   15 D1:AD29             		cp 		n
   16 D1:AD29             		jr 		z,UnaryInt32True
   17 D1:AD29             		jr 		UnaryInt32False
   18 D1:AD29             #endmacro
   19 D1:AD29 -  -  -  -  
   20 D1:AD29 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AD29             		call 	CompareBaseCode
   22 D1:AD29             		cp 		n
   23 D1:AD29             		jr 		nz,UnaryInt32True
   24 D1:AD29             		jr 		UnaryInt32False
   25 D1:AD29             #endmacro
   26 D1:AD29 -  -  -  -  
   27 D1:AD29 -  -  -  -  ; ***************************************************************************************
   28 D1:AD29 -  -  -  -  ;
   29 D1:AD29 -  -  -  -  ; 								Return True/False
   30 D1:AD29 -  -  -  -  ;
   31 D1:AD29 -  -  -  -  ; ***************************************************************************************
   32 D1:AD29 -  -  -  -  
   33 D1:AD29 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AD29 3E FF -  -  		ld 		a,255
   35 D1:AD2B 18 01 -  -  		jr 		_Int32Logical
   36 D1:AD2D -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:AD2D AF -  -  -  		xor 	a
   38 D1:AD2E -  -  -  -  _Int32Logical:
   39 D1:AD2E 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AD2F 67 -  -  -  		ld 		h,a
   41 D1:AD30 D9 -  -  -  		exx
   42 D1:AD31 6F -  -  -  		ld 		l,a
   43 D1:AD32 67 -  -  -  		ld 		h,a
   44 D1:AD33 D9 -  -  -  		exx
   45 D1:AD34 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AD36 C9 -  -  -  		ret
   47 D1:AD37 -  -  -  -  
   48 D1:AD37 -  -  -  -  ; ***************************************************************************************
   49 D1:AD37 -  -  -  -  ;
   50 D1:AD37 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AD37 -  -  -  -  ;
   52 D1:AD37 -  -  -  -  ; ***************************************************************************************
   53 D1:AD37 -  -  -  -  
   54 D1:AD37 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AD37 CD 73 AD D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AD41 -  -  -  -  
   57 D1:AD41 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AD41 CD 73 AD D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AD4B -  -  -  -  
   60 D1:AD4B -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AD4B CD 73 AD D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AD55 -  -  -  -  
   63 D1:AD55 -  -  -  -  ; ***************************************************************************************
   64 D1:AD55 -  -  -  -  ;
   65 D1:AD55 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AD55 -  -  -  -  ;
   67 D1:AD55 -  -  -  -  ; ***************************************************************************************
   68 D1:AD55 -  -  -  -  
   69 D1:AD55 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AD55 CD 73 AD D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AD5F -  -  -  -  
   72 D1:AD5F -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AD5F CD 73 AD D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AD69 -  -  -  -  
   75 D1:AD69 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AD69 CD 73 AD D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AD73 -  -  -  -  
   78 D1:AD73 -  -  -  -  ; ***************************************************************************************
   79 D1:AD73 -  -  -  -  ;
   80 D1:AD73 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AD73 -  -  -  -  ;
   82 D1:AD73 -  -  -  -  ; ***************************************************************************************
   83 D1:AD73 -  -  -  -  
   84 D1:AD73 -  -  -  -  CompareBaseCode:
   85 D1:AD73 CD AF AD D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AD77 -  -  -  -  
   87 D1:AD77 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AD78 A1 -  -  -  		and 	c
   89 D1:AD79 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AD7B C2 8D AD D1 		jp 		nz,StringCompare
   91 D1:AD7F -  -  -  -  
   92 D1:AD7F 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AD80 B1 -  -  -  		or 		c
   94 D1:AD81 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AD83 CA AC BB D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AD87 -  -  -  -  
   97 D1:AD87 3E 02 C3 22 
              AC D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AD8D -  -  -  -  ;
   99 D1:AD8D -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AD8D -  -  -  -  ;
  101 D1:AD8D -  -  -  -  StringCompare:
  102 D1:AD8D 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AD8E BE -  -  -  		cp 		(hl)
  104 D1:AD8F 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AD91 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AD93 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AD94 23 -  -  -  		inc 	hl
  108 D1:AD95 FE 20 -  -  		cp 		' '
  109 D1:AD97 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AD99 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AD9A C9 -  -  -  		ret
  112 D1:AD9B -  -  -  -  
  113 D1:AD9B -  -  -  -  _SCLess:
  114 D1:AD9B 3E FF -  -  		ld 		a,$FF
  115 D1:AD9D C9 -  -  -  		ret
  116 D1:AD9E -  -  -  -  _SCGreater:
  117 D1:AD9E 3E 01 -  -  		ld 		a,1
  118 D1:ADA0 C9 -  -  -  		ret
  119 D1:ADA1 -  -  -  -  
  120 D1:ADA1 3E 18 C3 22 
              AC D1 -  -  		ERR_TODO()
  121 D1:ADA7 -  -  -  -  
  122 D1:ADA7 -  -  -  -  ; ***************************************************************************************
  123 D1:ADA7 -  -  -  -  ;
  124 D1:ADA7 -  -  -  -  ;									Changes and Updates
  125 D1:ADA7 -  -  -  -  ;
  126 D1:ADA7 -  -  -  -  ; ***************************************************************************************
  127 D1:ADA7 -  -  -  -  ;
  128 D1:ADA7 -  -  -  -  ;		Date			Notes
  129 D1:ADA7 -  -  -  -  ;		==== 			=====
  130 D1:ADA7 -  -  -  -  ;
  131 D1:ADA7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:ADA7 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:ADA7 -  -  -  -  ; ***************************************************************************************
    2 D1:ADA7 -  -  -  -  ; ***************************************************************************************
    3 D1:ADA7 -  -  -  -  ;
    4 D1:ADA7 -  -  -  -  ;		Name : 		utility.asm
    5 D1:ADA7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADA7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADA7 -  -  -  -  ;		Reviewed :	No
    8 D1:ADA7 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:ADA7 -  -  -  -  ;
   10 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   11 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   12 D1:ADA7 -  -  -  -  
   13 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   14 D1:ADA7 -  -  -  -  ;
   15 D1:ADA7 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:ADA7 -  -  -  -  ;
   17 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   18 D1:ADA7 -  -  -  -  
   19 D1:ADA7 -  -  -  -  SwapHLDE:
   20 D1:ADA7 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ADA8 D9 -  -  -  			exx
   22 D1:ADA9 EB -  -  -  			ex 		de,hl
   23 D1:ADAA D9 -  -  -  			exx
   24 D1:ADAB 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ADAC 41 -  -  -  			ld 		b,c
   26 D1:ADAD 4F -  -  -  			ld 		c,a
   27 D1:ADAE C9 -  -  -  			ret
   28 D1:ADAF -  -  -  -  
   29 D1:ADAF -  -  -  -  ; ***************************************************************************************
   30 D1:ADAF -  -  -  -  ;
   31 D1:ADAF -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ADAF -  -  -  -  ;
   33 D1:ADAF -  -  -  -  ; ***************************************************************************************
   34 D1:ADAF -  -  -  -  
   35 D1:ADAF -  -  -  -  DereferenceBoth:
   36 D1:ADAF CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ADB1 C4 88 AE D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ADB5 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ADB7 C8 -  -  -  			ret 	z
   40 D1:ADB8 CD A7 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ADBC CD 88 AE D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ADC0 CD A7 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ADC4 C9 -  -  -  			ret
   44 D1:ADC5 -  -  -  -  
   45 D1:ADC5 -  -  -  -  ; ***************************************************************************************
   46 D1:ADC5 -  -  -  -  ;
   47 D1:ADC5 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ADC5 -  -  -  -  ;
   49 D1:ADC5 -  -  -  -  ; ***************************************************************************************
   50 D1:ADC5 -  -  -  -  
   51 D1:ADC5 -  -  -  -  NegateHLHL:	
   52 D1:ADC5 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ADC7 C2 80 AC D1 			jp 		nz,TypeMismatch
   54 D1:ADCB CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ADCD C4 88 AE D1 			call 	nz,Dereference 			; if required.
   56 D1:ADD1 CD D6 BB D1 			call 	Int32Negate
   57 D1:ADD5 C9 -  -  -  			ret
Listing for file "_build.asm"
   32 D1:ADD6 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ADD6 -  -  -  -  ; ***************************************************************************************
    2 D1:ADD6 -  -  -  -  ; ***************************************************************************************
    3 D1:ADD6 -  -  -  -  ;
    4 D1:ADD6 -  -  -  -  ;		Name : 		expression.asm
    5 D1:ADD6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADD6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADD6 -  -  -  -  ;		Reviewed :	None
    8 D1:ADD6 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ADD6 -  -  -  -  ;
   10 D1:ADD6 -  -  -  -  ; ***************************************************************************************
   11 D1:ADD6 -  -  -  -  ; ***************************************************************************************
   12 D1:ADD6 -  -  -  -  
   13 D1:ADD6 -  -  -  -  ; ***************************************************************************************
   14 D1:ADD6 -  -  -  -  ;
   15 D1:ADD6 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ADD6 -  -  -  -  ;
   17 D1:ADD6 -  -  -  -  ; ***************************************************************************************
   18 D1:ADD6 -  -  -  -  
   19 D1:ADD6 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ADD6 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ADD7 -  -  -  -  EvaluateAtPrecedence:
   22 D1:ADD7 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ADD8 -  -  -  -  		;
   24 D1:ADD8 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ADD8 -  -  -  -  		;
   26 D1:ADD8 CD E4 AE D1 		call 	EvaluateTerm 				; get term
   27 D1:ADDC -  -  -  -  		;
   28 D1:ADDC -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ADDC -  -  -  -  		;
   30 D1:ADDC D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ADDD -  -  -  -  _EAPLoop:
   32 D1:ADDD DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ADE0 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ADE2 D8 -  -  -  		ret 	c
   35 D1:ADE3 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ADE5 D0 -  -  -  		ret 	nc
   37 D1:ADE6 -  -  -  -  		;
   38 D1:ADE6 -  -  -  -  		; 		Get the precedence.
   39 D1:ADE6 -  -  -  -  		;
   40 D1:ADE6 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ADE7 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ADE9 21 E0 B6 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ADED B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ADEE 6F -  -  -  		ld 		l,a
   45 D1:ADEF 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ADF0 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ADF1 -  -  -  -  		;
   48 D1:ADF1 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ADF1 -  -  -  -  		;
   50 D1:ADF1 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ADF2 BB -  -  -  		cp 		e
   52 D1:ADF3 D0 -  -  -  		ret 	nc
   53 D1:ADF4 -  -  -  -  
   54 D1:ADF4 -  -  -  -  		;
   55 D1:ADF4 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ADF4 -  -  -  -  		;
   57 D1:ADF4 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ADF5 -  -  -  -  		;
   59 D1:ADF5 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ADF8 F5 -  -  -  		push 	af
   61 D1:ADF9 -  -  -  -  		;
   62 D1:ADF9 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ADFA D9 -  -  -  		exx 								; save HL'
   64 D1:ADFB E5 -  -  -  		push 	hl
   65 D1:ADFC D9 -  -  -  		exx 								
   66 D1:ADFD E5 -  -  -  		push 	hl 							; save HL
   67 D1:ADFE -  -  -  -  		;
   68 D1:ADFE DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AE00 -  -  -  -  		;
   70 D1:AE00 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AE00 -  -  -  -  		;
   72 D1:AE00 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AE01 CD D7 AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AE05 -  -  -  -  		;
   75 D1:AE05 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AE05 -  -  -  -  		;
   77 D1:AE05 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AE06 -  -  -  -  
   79 D1:AE06 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AE07 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AE08 D9 -  -  -  		exx
   82 D1:AE09 EB -  -  -  		ex 		de,hl
   83 D1:AE0A E1 -  -  -  		pop 	hl
   84 D1:AE0B D9 -  -  -  		exx
   85 D1:AE0C C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AE0D 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AE0E -  -  -  -  		;
   88 D1:AE0E -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AE0E -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AE0E -  -  -  -  		;
   91 D1:AE0E F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AE0F -  -  -  -  		;
   93 D1:AE0F -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AE0F -  -  -  -  		;
   95 D1:AE0F D5 -  -  -  		push 	de
   96 D1:AE10 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AE11 E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 B8 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AE26 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AE27 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AE28 CD E5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AE2C -  -  -  -  		;
  102 D1:AE2C D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AE2D -  -  -  -  		;
  104 D1:AE2D 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AE2F -  -  -  -  
  106 D1:AE2F -  -  -  -  ; ***************************************************************************************
  107 D1:AE2F -  -  -  -  ;
  108 D1:AE2F -  -  -  -  ;									Changes and Updates
  109 D1:AE2F -  -  -  -  ;
  110 D1:AE2F -  -  -  -  ; ***************************************************************************************
  111 D1:AE2F -  -  -  -  ;
  112 D1:AE2F -  -  -  -  ;		Date			Notes
  113 D1:AE2F -  -  -  -  ;		==== 			=====
  114 D1:AE2F -  -  -  -  ;
  115 D1:AE2F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE2F -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AE2F -  -  -  -  ; ***************************************************************************************
    2 D1:AE2F -  -  -  -  ; ***************************************************************************************
    3 D1:AE2F -  -  -  -  ;
    4 D1:AE2F -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AE2F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE2F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE2F -  -  -  -  ;		Reviewed :	No
    8 D1:AE2F -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AE2F -  -  -  -  ;
   10 D1:AE2F -  -  -  -  ; ***************************************************************************************
   11 D1:AE2F -  -  -  -  ; ***************************************************************************************
   12 D1:AE2F -  -  -  -  
   13 D1:AE2F -  -  -  -  ; ***************************************************************************************
   14 D1:AE2F -  -  -  -  ;
   15 D1:AE2F -  -  -  -  ; 								Evaluate an integer term
   16 D1:AE2F -  -  -  -  ;
   17 D1:AE2F -  -  -  -  ; ***************************************************************************************
   18 D1:AE2F -  -  -  -  
   19 D1:AE2F -  -  -  -  EvaluateIntegerTerm:
   20 D1:AE2F CD E4 AE D1 		call 	EvaluateTerm
   21 D1:AE33 CD 88 AE D1 		call 	DeReference
   22 D1:AE37 CB 41 -  -  		bit 	CIsString,c
   23 D1:AE39 C8 -  -  -  		ret 	z
   24 D1:AE3A C3 80 AC D1 		jp 		TypeMismatch
   25 D1:AE3E -  -  -  -  
   26 D1:AE3E -  -  -  -  ; ***************************************************************************************
   27 D1:AE3E -  -  -  -  ;
   28 D1:AE3E -  -  -  -  ; 								Evaluate a string term
   29 D1:AE3E -  -  -  -  ;
   30 D1:AE3E -  -  -  -  ; ***************************************************************************************
   31 D1:AE3E -  -  -  -  
   32 D1:AE3E -  -  -  -  EvaluateStringTerm:
   33 D1:AE3E CD E4 AE D1 		call 	EvaluateTerm
   34 D1:AE42 CD 88 AE D1 		call 	DeReference
   35 D1:AE46 CB 41 -  -  		bit 	CIsString,c
   36 D1:AE48 C0 -  -  -  		ret 	nz
   37 D1:AE49 C3 80 AC D1 		jp 		TypeMismatch
   38 D1:AE4D -  -  -  -  
   39 D1:AE4D -  -  -  -  ; ***************************************************************************************
   40 D1:AE4D -  -  -  -  ;
   41 D1:AE4D -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AE4D -  -  -  -  ;
   43 D1:AE4D -  -  -  -  ; ***************************************************************************************
   44 D1:AE4D -  -  -  -  
   45 D1:AE4D -  -  -  -  EvaluateValue:
   46 D1:AE4D CD D6 AD D1 		call 	EvaluateAtPrecedence0
   47 D1:AE51 C3 88 AE D1 		jp 		Dereference
   48 D1:AE55 -  -  -  -  
   49 D1:AE55 -  -  -  -  ; ***************************************************************************************
   50 D1:AE55 -  -  -  -  ;
   51 D1:AE55 -  -  -  -  ; 									Evaluate a number
   52 D1:AE55 -  -  -  -  ;
   53 D1:AE55 -  -  -  -  ; ***************************************************************************************
   54 D1:AE55 -  -  -  -  
   55 D1:AE55 -  -  -  -  EvaluateInteger:
   56 D1:AE55 CD 4D AE D1 		call 	EvaluateValue
   57 D1:AE59 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AE5B C8 -  -  -  		ret 	z
   59 D1:AE5C C3 80 AC D1 		jp 		TypeMismatch
   60 D1:AE60 -  -  -  -  
   61 D1:AE60 -  -  -  -  ; ***************************************************************************************
   62 D1:AE60 -  -  -  -  ;
   63 D1:AE60 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AE60 -  -  -  -  ;
   65 D1:AE60 -  -  -  -  ; ***************************************************************************************
   66 D1:AE60 -  -  -  -  
   67 D1:AE60 -  -  -  -  Evaluate8BitInteger:
   68 D1:AE60 CD 55 AE D1 		call 	EvaluateInteger
   69 D1:AE64 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AE65 7C -  -  -  		ld 		a,h
   71 D1:AE66 B5 -  -  -  		or 		l
   72 D1:AE67 D9 -  -  -  		exx 	
   73 D1:AE68 B4 -  -  -  		or 		h
   74 D1:AE69 C2 86 AC D1 		jp 		nz,BadValue
   75 D1:AE6D 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AE6E C9 -  -  -  		ret
   77 D1:AE6F -  -  -  -  		
   78 D1:AE6F -  -  -  -  ; ***************************************************************************************
   79 D1:AE6F -  -  -  -  ;
   80 D1:AE6F -  -  -  -  ; 									Evaluate a string
   81 D1:AE6F -  -  -  -  ;
   82 D1:AE6F -  -  -  -  ; ***************************************************************************************
   83 D1:AE6F -  -  -  -  
   84 D1:AE6F -  -  -  -  EvaluateString:
   85 D1:AE6F CD 4D AE D1 		call 	EvaluateValue
   86 D1:AE73 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AE75 CA 80 AC D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AE79 C9 -  -  -  		ret
   89 D1:AE7A -  -  -  -  
   90 D1:AE7A -  -  -  -  ; ***************************************************************************************
   91 D1:AE7A -  -  -  -  ;
   92 D1:AE7A -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AE7A -  -  -  -  ;
   94 D1:AE7A -  -  -  -  ; ***************************************************************************************
   95 D1:AE7A -  -  -  -  
   96 D1:AE7A -  -  -  -  Return8BitConstant:
   97 D1:AE7A 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AE7E 6F -  -  -  		ld 		l,a
   99 D1:AE7F -  -  -  -  Return16BitConstant:
  100 D1:AE7F D9 -  -  -  		exx 								; clear HL'
  101 D1:AE80 21 00 00 00 		ld 		hl,0
  102 D1:AE84 D9 -  -  -  		exx
  103 D1:AE85 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AE87 C9 -  -  -  		ret
  105 D1:AE88 -  -  -  -  
  106 D1:AE88 -  -  -  -  ; ***************************************************************************************
  107 D1:AE88 -  -  -  -  ;
  108 D1:AE88 -  -  -  -  ;									Changes and Updates
  109 D1:AE88 -  -  -  -  ;
  110 D1:AE88 -  -  -  -  ; ***************************************************************************************
  111 D1:AE88 -  -  -  -  ;
  112 D1:AE88 -  -  -  -  ;		Date			Notes
  113 D1:AE88 -  -  -  -  ;		==== 			=====
  114 D1:AE88 -  -  -  -  ;
  115 D1:AE88 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AE88 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AE88 -  -  -  -  ; ***************************************************************************************
    2 D1:AE88 -  -  -  -  ; ***************************************************************************************
    3 D1:AE88 -  -  -  -  ;
    4 D1:AE88 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AE88 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE88 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AE88 -  -  -  -  ;		Reviewed :	No
    8 D1:AE88 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AE88 -  -  -  -  ;
   10 D1:AE88 -  -  -  -  ; ***************************************************************************************
   11 D1:AE88 -  -  -  -  ; ***************************************************************************************
   12 D1:AE88 -  -  -  -  
   13 D1:AE88 -  -  -  -  ; ***************************************************************************************
   14 D1:AE88 -  -  -  -  ;
   15 D1:AE88 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AE88 -  -  -  -  ;
   17 D1:AE88 -  -  -  -  ; ***************************************************************************************
   18 D1:AE88 -  -  -  -  
   19 D1:AE88 -  -  -  -  Dereference:
   20 D1:AE88 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AE8A C8 -  -  -  		ret 	z
   22 D1:AE8B -  -  -  -  
   23 D1:AE8B CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AE8D -  -  -  -  		
   25 D1:AE8D CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AE8F 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AE91 -  -  -  -  
   28 D1:AE91 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AE93 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AE95 -  -  -  -  
   31 D1:AE95 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AE96 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AE98 D9 -  -  -  		exx
   34 D1:AE99 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AE9A 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AE9B 23 -  -  -  		inc  	hl
   37 D1:AE9C ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AE9E D9 -  -  -  		exx 								; fix back
   39 D1:AE9F C9 -  -  -  		ret
   40 D1:AEA0 -  -  -  -  
   41 D1:AEA0 -  -  -  -  _DeRefByte:		
   42 D1:AEA0 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AEA1 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AEA5 6F -  -  -  		ld	 	l,a
   45 D1:AEA6 D9 -  -  -  		exx
   46 D1:AEA7 21 00 00 00 		ld 		hl,$0000
   47 D1:AEAB D9 -  -  -  		exx
   48 D1:AEAC 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AEAE C9 -  -  -  		ret
   50 D1:AEAF -  -  -  -  
   51 D1:AEAF -  -  -  -  _DRInternal:
   52 D1:AEAF 3E 05 C3 22 
              AC D1 -  -  		ERR_DISABLED
   53 D1:AEB5 -  -  -  -  
   54 D1:AEB5 -  -  -  -  ; ***************************************************************************************
   55 D1:AEB5 -  -  -  -  ;
   56 D1:AEB5 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AEB5 -  -  -  -  ;
   58 D1:AEB5 -  -  -  -  ; ***************************************************************************************
   59 D1:AEB5 -  -  -  -  
   60 D1:AEB5 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AEB5 -  -  -  -  		#ifdef EZ80
   62 D1:AEB5 22 EB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AEB9 D9 -  -  -  		exx
   64 D1:AEBA 22 ED A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AEBE 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AEC2 D9 -  -  -  		exx
   67 D1:AEC3 2A EB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AEC7 -  -  -  -  		#endif
   69 D1:AEC7 C9 -  -  -  		ret
   70 D1:AEC8 -  -  -  -  
   71 D1:AEC8 -  -  -  -  ; ***************************************************************************************
   72 D1:AEC8 -  -  -  -  ;
   73 D1:AEC8 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AEC8 -  -  -  -  ;
   75 D1:AEC8 -  -  -  -  ; ***************************************************************************************
   76 D1:AEC8 -  -  -  -  
   77 D1:AEC8 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AEC8 -  -  -  -  		#ifdef EZ80
   79 D1:AEC8 22 EB A8 D1 		ld 		(AConvert),hl
   80 D1:AECC 21 00 00 00 		ld 		hl,$0000
   81 D1:AED0 22 EE A8 D1 		ld 		(AConvert+3),hl
   82 D1:AED4 D9 -  -  -  		exx
   83 D1:AED5 2A ED A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AED9 D9 -  -  -  		exx
   85 D1:AEDA AF -  -  -  		xor 	a
   86 D1:AEDB 32 ED A8 D1 		ld 		(AConvert+2),a
   87 D1:AEDF 2A EB A8 D1 		ld 		hl,(AConvert)
   88 D1:AEE3 -  -  -  -  		#endif
   89 D1:AEE3 C9 -  -  -  		ret
   90 D1:AEE4 -  -  -  -  
   91 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   92 D1:AEE4 -  -  -  -  ;
   93 D1:AEE4 -  -  -  -  ;									Changes and Updates
   94 D1:AEE4 -  -  -  -  ;
   95 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   96 D1:AEE4 -  -  -  -  ;
   97 D1:AEE4 -  -  -  -  ;		Date			Notes
   98 D1:AEE4 -  -  -  -  ;		==== 			=====
   99 D1:AEE4 -  -  -  -  ;
  100 D1:AEE4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AEE4 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AEE4 -  -  -  -  ; ***************************************************************************************
    2 D1:AEE4 -  -  -  -  ; ***************************************************************************************
    3 D1:AEE4 -  -  -  -  ;
    4 D1:AEE4 -  -  -  -  ;		Name : 		term.asm
    5 D1:AEE4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEE4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEE4 -  -  -  -  ;		Reviewed :	No
    8 D1:AEE4 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AEE4 -  -  -  -  ;
   10 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   11 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   12 D1:AEE4 -  -  -  -  
   13 D1:AEE4 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AEE4             		add_hlhl_16
   15 D1:AEE4             		exx
   16 D1:AEE4             		adc_hlhl_16
   17 D1:AEE4             		exx
   18 D1:AEE4             #endmacro
   19 D1:AEE4 -  -  -  -  
   20 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   21 D1:AEE4 -  -  -  -  ;
   22 D1:AEE4 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AEE4 -  -  -  -  ;
   24 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   25 D1:AEE4 -  -  -  -  ;
   26 D1:AEE4 -  -  -  -  ; 		Terms can be:
   27 D1:AEE4 -  -  -  -  ;
   28 D1:AEE4 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AEE4 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AEE4 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AEE4 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AEE4 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AEE4 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AEE4 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AEE4 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AEE4 -  -  -  -  ; 														reference of some sort.
   37 D1:AEE4 -  -  -  -  ;
   38 D1:AEE4 -  -  -  -  ; ***************************************************************************************
   39 D1:AEE4 -  -  -  -  
   40 D1:AEE4 -  -  -  -  EvaluateTerm:		
   41 D1:AEE4 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AEE6 D9 -  -  -  		exx
   43 D1:AEE7 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AEEB D9 -  -  -  		exx
   45 D1:AEEC 21 00 00 00 		ld 		hl,$0000		
   46 D1:AEF0 -  -  -  -  		;
   47 D1:AEF0 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AEF3 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AEF5 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AEF7 DA AF AF D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AEFB CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AEFD C2 53 AF D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AF01 -  -  -  -  		;
   54 D1:AF01 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AF01 -  -  -  -  		;
   56 D1:AF01 -  -  -  -  _ETIntegerConstant:
   57 D1:AF01 -  -  -  -  		;
   58 D1:AF01 -  -  -  -  _ETIntegerLoop:		
   59 D1:AF01 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AF04 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AF06 B5 -  -  -  		or 		l 							; or into L
   62 D1:AF07 6F -  -  -  		ld 		l,a
   63 D1:AF08 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AF0A DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AF0D C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AF0F FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AF11 D8 -  -  -  		ret 	c
   68 D1:AF12 -  -  -  -  
   69 D1:AF12 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AF19 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AF20 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AF27 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AF2E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AF35 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AF3C -  -  -  -  
   76 D1:AF3C 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AF3E -  -  -  -  		;
   78 D1:AF3E -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AF3E -  -  -  -  		;
   80 D1:AF3E -  -  -  -  _ETStringMarker:		
   81 D1:AF3E DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AF40 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AF42 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AF44 E1 -  -  -  		pop 	hl
   85 D1:AF45 11 00 00 00 		ld 		de,$0000
   86 D1:AF49 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AF4C DD 19 -  -  		add 	ix,de
   88 D1:AF4E DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AF50 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AF52 C9 -  -  -  		ret
   91 D1:AF53 -  -  -  -  		;
   92 D1:AF53 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AF53 -  -  -  -  		;
   94 D1:AF53 -  -  -  -  _ETFoundKeyword:
   95 D1:AF53 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AF55 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AF57 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AF59 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AF5B 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AF5D -  -  -  -  		;
  101 D1:AF5D -  -  -  -  		;		Unary group 0
  102 D1:AF5D -  -  -  -  		;
  103 D1:AF5D E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 B8 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AF72 C3 E5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AF76 -  -  -  -  
  106 D1:AF76 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AF76 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AF78 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AF7A -  -  -  -  		;
  110 D1:AF7A -  -  -  -  		; 		- term
  111 D1:AF7A -  -  -  -  		;
  112 D1:AF7A CD 2F AE D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AF7E CD C5 AD D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AF82 C9 -  -  -  		ret
  115 D1:AF83 -  -  -  -  		;
  116 D1:AF83 -  -  -  -  		;		! ? indirection check
  117 D1:AF83 -  -  -  -  		;
  118 D1:AF83 -  -  -  -  _ETCheckIndirection:	
  119 D1:AF83 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AF85 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AF87 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AF89 C2 8C AC D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AF8D -  -  -  -  		;
  124 D1:AF8D -  -  -  -  		; 		! ? indirection
  125 D1:AF8D -  -  -  -  		;
  126 D1:AF8D -  -  -  -  _ETIndirection:
  127 D1:AF8D F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AF8E CD E4 AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AF92 CD 88 AE D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AF96 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AF98 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AF9A CD B5 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AF9E F1 -  -  -  		pop 	af 							; get type back
  134 D1:AF9F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AFA1 CB F9 -  -  		set 	CIsReference,c
  136 D1:AFA3 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AFA5 C8 -  -  -  		ret 	z
  138 D1:AFA6 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AFA8 C9 -  -  -  		ret
  140 D1:AFA9 -  -  -  -  _ETStringIndirect:
  141 D1:AFA9 3E 02 C3 22 
              AC D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AFAF -  -  -  -  		;
  143 D1:AFAF -  -  -  -  		; 		Found an identifier.
  144 D1:AFAF -  -  -  -  		;
  145 D1:AFAF -  -  -  -  _ETVariable:
  146 D1:AFAF CD BF B5 D1 		call 	FindVariable 				; find the variable.
  147 D1:AFB3 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AFB4 3E 19 C3 22 
              AC D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AFBA -  -  -  -  		
  150 D1:AFBA -  -  -  -  ; ***************************************************************************************
  151 D1:AFBA -  -  -  -  ;
  152 D1:AFBA -  -  -  -  ;									Changes and Updates
  153 D1:AFBA -  -  -  -  ;
  154 D1:AFBA -  -  -  -  ; ***************************************************************************************
  155 D1:AFBA -  -  -  -  ;
  156 D1:AFBA -  -  -  -  ;		Date			Notes
  157 D1:AFBA -  -  -  -  ;		==== 			=====
  158 D1:AFBA -  -  -  -  ;
  159 D1:AFBA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AFBA -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AFBA -  -  -  -  ; ***************************************************************************************
    2 D1:AFBA -  -  -  -  ; ***************************************************************************************
    3 D1:AFBA -  -  -  -  ;
    4 D1:AFBA -  -  -  -  ;		Name : 		abs.asm
    5 D1:AFBA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFBA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFBA -  -  -  -  ;		Reviewed :	No
    8 D1:AFBA -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AFBA -  -  -  -  ;
   10 D1:AFBA -  -  -  -  ; ***************************************************************************************
   11 D1:AFBA -  -  -  -  ; ***************************************************************************************
   12 D1:AFBA -  -  -  -  
   13 D1:AFBA -  -  -  -  ; ***************************************************************************************
   14 D1:AFBA -  -  -  -  ;
   15 D1:AFBA -  -  -  -  ;								abs( unary function
   16 D1:AFBA -  -  -  -  ;
   17 D1:AFBA -  -  -  -  ; ***************************************************************************************
   18 D1:AFBA -  -  -  -  
   19 D1:AFBA -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AFBA CD 2F AE D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AFBE D9 -  -  -  		exx 								; test MSB
   22 D1:AFBF CB 7C -  -  		bit 	7,h
   23 D1:AFC1 D9 -  -  -  		exx
   24 D1:AFC2 C4 C5 AD D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AFC6 C9 -  -  -  		ret
   26 D1:AFC7 -  -  -  -  
   27 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   28 D1:AFC7 -  -  -  -  ;
   29 D1:AFC7 -  -  -  -  ;									Changes and Updates
   30 D1:AFC7 -  -  -  -  ;
   31 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   32 D1:AFC7 -  -  -  -  ;
   33 D1:AFC7 -  -  -  -  ;		Date			Notes
   34 D1:AFC7 -  -  -  -  ;		==== 			=====
   35 D1:AFC7 -  -  -  -  ;
   36 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   37 D1:AFC7 -  -  -  -  		
Listing for file "_build.asm"
   37 D1:AFC7 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AFC7 -  -  -  -  ; ***************************************************************************************
    2 D1:AFC7 -  -  -  -  ; ***************************************************************************************
    3 D1:AFC7 -  -  -  -  ;
    4 D1:AFC7 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AFC7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFC7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFC7 -  -  -  -  ;		Reviewed :	No
    8 D1:AFC7 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AFC7 -  -  -  -  ;
   10 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   11 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   12 D1:AFC7 -  -  -  -  
   13 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   14 D1:AFC7 -  -  -  -  ;
   15 D1:AFC7 -  -  -  -  ;								Asc unary function
   16 D1:AFC7 -  -  -  -  ;
   17 D1:AFC7 -  -  -  -  ; ***************************************************************************************
   18 D1:AFC7 -  -  -  -  
   19 D1:AFC7 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AFC7 CD 3E AE D1 		call	EvaluateStringTerm			; Get string
   21 D1:AFCB 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AFCC C3 7A AE D1 		jp 		Return8BitConstant
   23 D1:AFD0 -  -  -  -  
   24 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   25 D1:AFD0 -  -  -  -  ;
   26 D1:AFD0 -  -  -  -  ;									Changes and Updates
   27 D1:AFD0 -  -  -  -  ;
   28 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   29 D1:AFD0 -  -  -  -  ;
   30 D1:AFD0 -  -  -  -  ;		Date			Notes
   31 D1:AFD0 -  -  -  -  ;		==== 			=====
   32 D1:AFD0 -  -  -  -  ;
   33 D1:AFD0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:AFD0 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AFD0 -  -  -  -  ; ***************************************************************************************
    2 D1:AFD0 -  -  -  -  ; ***************************************************************************************
    3 D1:AFD0 -  -  -  -  ;
    4 D1:AFD0 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AFD0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFD0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFD0 -  -  -  -  ;		Reviewed :	No
    8 D1:AFD0 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AFD0 -  -  -  -  ;
   10 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   11 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   12 D1:AFD0 -  -  -  -  
   13 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   14 D1:AFD0 -  -  -  -  ;
   15 D1:AFD0 -  -  -  -  ;								Chr$() unary function
   16 D1:AFD0 -  -  -  -  ;
   17 D1:AFD0 -  -  -  -  ; ***************************************************************************************
   18 D1:AFD0 -  -  -  -  
   19 D1:AFD0 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AFD0 CD FA AB D1 		call 	CheckDollar
   21 D1:AFD4 CD 2F AE D1 		call 	EvaluateIntegerTerm
   22 D1:AFD8 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AFD9 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AFDB 21 20 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AFDF 36 0D -  -  		ld 		(hl),13
   26 D1:AFE1 2B -  -  -  		dec 	hl
   27 D1:AFE2 77 -  -  -  		ld 		(hl),a
   28 D1:AFE3 C9 -  -  -  		ret
   29 D1:AFE4 -  -  -  -  
   30 D1:AFE4 -  -  -  -  ; ***************************************************************************************
   31 D1:AFE4 -  -  -  -  ;
   32 D1:AFE4 -  -  -  -  ;									Changes and Updates
   33 D1:AFE4 -  -  -  -  ;
   34 D1:AFE4 -  -  -  -  ; ***************************************************************************************
   35 D1:AFE4 -  -  -  -  ;
   36 D1:AFE4 -  -  -  -  ;		Date			Notes
   37 D1:AFE4 -  -  -  -  ;		==== 			=====
   38 D1:AFE4 -  -  -  -  ;
   39 D1:AFE4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AFE4 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AFE4 -  -  -  -  ; ***************************************************************************************
    2 D1:AFE4 -  -  -  -  ; ***************************************************************************************
    3 D1:AFE4 -  -  -  -  ;
    4 D1:AFE4 -  -  -  -  ;		Name : 		len.asm
    5 D1:AFE4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFE4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFE4 -  -  -  -  ;		Reviewed :	None
    8 D1:AFE4 -  -  -  -  ;		Purpose :	String Length
    9 D1:AFE4 -  -  -  -  ;
   10 D1:AFE4 -  -  -  -  ; ***************************************************************************************
   11 D1:AFE4 -  -  -  -  ; ***************************************************************************************
   12 D1:AFE4 -  -  -  -  
   13 D1:AFE4 -  -  -  -  ; ***************************************************************************************
   14 D1:AFE4 -  -  -  -  ;
   15 D1:AFE4 -  -  -  -  ;								Len unary function
   16 D1:AFE4 -  -  -  -  ;
   17 D1:AFE4 -  -  -  -  ; ***************************************************************************************
   18 D1:AFE4 -  -  -  -  
   19 D1:AFE4 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AFE4 CD 3E AE D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AFE8 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AFE9 CD 2D AD D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AFED -  -  -  -  _ULCount:
   24 D1:AFED 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AFEE FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AFF0 D8 -  -  -  		ret 	c
   27 D1:AFF1 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AFF2 13 -  -  -  		inc 	de
   29 D1:AFF3 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AFF5 -  -  -  -  
   31 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   32 D1:AFF5 -  -  -  -  ;
   33 D1:AFF5 -  -  -  -  ;									Changes and Updates
   34 D1:AFF5 -  -  -  -  ;
   35 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   36 D1:AFF5 -  -  -  -  ;
   37 D1:AFF5 -  -  -  -  ;		Date			Notes
   38 D1:AFF5 -  -  -  -  ;		==== 			=====
   39 D1:AFF5 -  -  -  -  ;
   40 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   41 D1:AFF5 -  -  -  -  		
Listing for file "_build.asm"
   40 D1:AFF5 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AFF5 -  -  -  -  ; ***************************************************************************************
    2 D1:AFF5 -  -  -  -  ; ***************************************************************************************
    3 D1:AFF5 -  -  -  -  ;
    4 D1:AFF5 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AFF5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFF5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFF5 -  -  -  -  ;		Reviewed :	No
    8 D1:AFF5 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AFF5 -  -  -  -  ;
   10 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   11 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   12 D1:AFF5 -  -  -  -  
   13 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   14 D1:AFF5 -  -  -  -  ;
   15 D1:AFF5 -  -  -  -  ;								Str$() unary function
   16 D1:AFF5 -  -  -  -  ;
   17 D1:AFF5 -  -  -  -  ; ***************************************************************************************
   18 D1:AFF5 -  -  -  -  
   19 D1:AFF5 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AFF5 CD 2F AE D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AFF9 CD B5 AE D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AFFD 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AFFF C9 -  -  -  		ret
   24 D1:B000 -  -  -  -  
   25 D1:B000 -  -  -  -  ; ***************************************************************************************
   26 D1:B000 -  -  -  -  ;
   27 D1:B000 -  -  -  -  ;									Changes and Updates
   28 D1:B000 -  -  -  -  ;
   29 D1:B000 -  -  -  -  ; ***************************************************************************************
   30 D1:B000 -  -  -  -  ;
   31 D1:B000 -  -  -  -  ;		Date			Notes
   32 D1:B000 -  -  -  -  ;		==== 			=====
   33 D1:B000 -  -  -  -  ;
   34 D1:B000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:B000 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:B000 -  -  -  -  ; ***************************************************************************************
    2 D1:B000 -  -  -  -  ; ***************************************************************************************
    3 D1:B000 -  -  -  -  ;
    4 D1:B000 -  -  -  -  ;		Name : 		not.asm
    5 D1:B000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B000 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:B000 -  -  -  -  ;		Reviewed :	No
    8 D1:B000 -  -  -  -  ;		Purpose :	Logical not
    9 D1:B000 -  -  -  -  ;
   10 D1:B000 -  -  -  -  ; ***************************************************************************************
   11 D1:B000 -  -  -  -  ; ***************************************************************************************
   12 D1:B000 -  -  -  -  
   13 D1:B000 -  -  -  -  ; ***************************************************************************************
   14 D1:B000 -  -  -  -  ;
   15 D1:B000 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:B000 -  -  -  -  ;
   17 D1:B000 -  -  -  -  ; ***************************************************************************************
   18 D1:B000 -  -  -  -  
   19 D1:B000 -  -  -  -  Unary_Not:		;; [not]
   20 D1:B000 CD 2F AE D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:B004 CD 0D B0 D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:B008 CD 0D B0 D1 		call 	__UNSwap		
   23 D1:B00C C9 -  -  -  		ret
   24 D1:B00D -  -  -  -  
   25 D1:B00D -  -  -  -  __UNSwap:
   26 D1:B00D 7C -  -  -  		ld 		a,h
   27 D1:B00E 2F -  -  -  		cpl
   28 D1:B00F 67 -  -  -  		ld 		h,a
   29 D1:B010 7D -  -  -  		ld 		a,l
   30 D1:B011 2F -  -  -  		cpl 	
   31 D1:B012 6F -  -  -  		ld 		l,a
   32 D1:B013 D9 -  -  -  		exx
   33 D1:B014 C9 -  -  -  		ret
   34 D1:B015 -  -  -  -  
   35 D1:B015 -  -  -  -  ; ***************************************************************************************
   36 D1:B015 -  -  -  -  ;
   37 D1:B015 -  -  -  -  ;									Changes and Updates
   38 D1:B015 -  -  -  -  ;
   39 D1:B015 -  -  -  -  ; ***************************************************************************************
   40 D1:B015 -  -  -  -  ;
   41 D1:B015 -  -  -  -  ;		Date			Notes
   42 D1:B015 -  -  -  -  ;		==== 			=====
   43 D1:B015 -  -  -  -  ;
   44 D1:B015 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:B015 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:B015 -  -  -  -  ; ***************************************************************************************
    2 D1:B015 -  -  -  -  ; ***************************************************************************************
    3 D1:B015 -  -  -  -  ;
    4 D1:B015 -  -  -  -  ;		Name : 		page.asm
    5 D1:B015 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B015 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B015 -  -  -  -  ;		Reviewed :	No
    8 D1:B015 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B015 -  -  -  -  ;
   10 D1:B015 -  -  -  -  ; ***************************************************************************************
   11 D1:B015 -  -  -  -  ; ***************************************************************************************
   12 D1:B015 -  -  -  -  
   13 D1:B015 -  -  -  -  ; ***************************************************************************************
   14 D1:B015 -  -  -  -  ;
   15 D1:B015 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B015 -  -  -  -  ;
   17 D1:B015 -  -  -  -  ; ***************************************************************************************
   18 D1:B015 -  -  -  -  
   19 D1:B015 -  -  -  -  Unary_Page:	;; [page]
   20 D1:B015 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:B019 D9 -  -  -  			exx
   22 D1:B01A 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:B01E D9 -  -  -  			exx
   24 D1:B01F 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B021 C9 -  -  -  			ret
   26 D1:B022 -  -  -  -  
   27 D1:B022 -  -  -  -  ; ***************************************************************************************
   28 D1:B022 -  -  -  -  ;
   29 D1:B022 -  -  -  -  ;									Changes and Updates
   30 D1:B022 -  -  -  -  ;
   31 D1:B022 -  -  -  -  ; ***************************************************************************************
   32 D1:B022 -  -  -  -  ;
   33 D1:B022 -  -  -  -  ;		Date			Notes
   34 D1:B022 -  -  -  -  ;		==== 			=====
   35 D1:B022 -  -  -  -  ;
   36 D1:B022 -  -  -  -  ; ***************************************************************************************
   37 D1:B022 -  -  -  -  			
Listing for file "_build.asm"
   43 D1:B022 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:B022 -  -  -  -  ; ***************************************************************************************
    2 D1:B022 -  -  -  -  ; ***************************************************************************************
    3 D1:B022 -  -  -  -  ;
    4 D1:B022 -  -  -  -  ;		Name : 		random.asm
    5 D1:B022 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B022 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B022 -  -  -  -  ;		Reviewed :	No
    8 D1:B022 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:B022 -  -  -  -  ;
   10 D1:B022 -  -  -  -  ; ***************************************************************************************
   11 D1:B022 -  -  -  -  ; ***************************************************************************************
   12 D1:B022 -  -  -  -  
   13 D1:B022 -  -  -  -  ; ***************************************************************************************
   14 D1:B022 -  -  -  -  ;
   15 D1:B022 -  -  -  -  ;								Random unary function
   16 D1:B022 -  -  -  -  ;
   17 D1:B022 -  -  -  -  ; ***************************************************************************************
   18 D1:B022 -  -  -  -  
   19 D1:B022 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:B022 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:B02A CD 2F AE D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:B02E D9 -  -  -  		exx 								; is it -ve
   23 D1:B02F CB 7C -  -  		bit 	7,h
   24 D1:B031 D9 -  -  -  		exx
   25 D1:B032 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:B034 22 F1 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:B038 D9 -  -  -  		exx
   28 D1:B039 22 F5 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:B03D D9 -  -  -  		exx
   30 D1:B03E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:B040 C9 -  -  -  		ret
   32 D1:B041 -  -  -  -  _URDontSeed:		
   33 D1:B041 -  -  -  -  
   34 D1:B041 CD A5 BB D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:B045 28 1C -  -  		jr 		z,_URFail
   36 D1:B047 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:B048 D9 -  -  -  		exx
   38 D1:B049 E5 -  -  -  		push 	hl
   39 D1:B04A D9 -  -  -  		exx
   40 D1:B04B -  -  -  -  		;
   41 D1:B04B CD 74 B0 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:B04F D9 -  -  -  		exx
   43 D1:B050 CD 74 B0 D1 		call 	URandomHL
   44 D1:B054 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:B056 D9 -  -  -  		exx
   46 D1:B057 -  -  -  -  		;
   47 D1:B057 D9 -  -  -  		exx 								; restore range.
   48 D1:B058 D1 -  -  -  		pop 	de
   49 D1:B059 D9 -  -  -  		exx
   50 D1:B05A D1 -  -  -  		pop 	de
   51 D1:B05B -  -  -  -  		;
   52 D1:B05B CD 36 BA D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B05F 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B060 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B062 C9 -  -  -  		ret
   56 D1:B063 -  -  -  -  _URFail:
   57 D1:B063 3E 03 C3 22 
              AC D1 -  -  		ERR_BADVALUE
   58 D1:B069 -  -  -  -  ; ***************************************************************************************
   59 D1:B069 -  -  -  -  ;
   60 D1:B069 -  -  -  -  ; 									Push RNG off zero
   61 D1:B069 -  -  -  -  ;
   62 D1:B069 -  -  -  -  ; ***************************************************************************************
   63 D1:B069 -  -  -  -  
   64 D1:B069 -  -  -  -  UnaryRandomInitialise:
   65 D1:B069 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B06B -  -  -  -  _URILoop:
   67 D1:B06B C5 -  -  -  		push 	bc
   68 D1:B06C CD 74 B0 D1 		call 	URandomHL
   69 D1:B070 C1 -  -  -  		pop 	bc
   70 D1:B071 10 F8 -  -  		djnz 	_URILoop
   71 D1:B073 C9 -  -  -  		ret
   72 D1:B074 -  -  -  -  
   73 D1:B074 -  -  -  -  ; ***************************************************************************************
   74 D1:B074 -  -  -  -  ;
   75 D1:B074 -  -  -  -  ;							16 bit random number generator
   76 D1:B074 -  -  -  -  ;
   77 D1:B074 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B074 -  -  -  -  ;		Actual author unspecified.
   79 D1:B074 -  -  -  -  ;
   80 D1:B074 -  -  -  -  ; ***************************************************************************************
   81 D1:B074 -  -  -  -  
   82 D1:B074 -  -  -  -  URandomHL:
   83 D1:B074 2A F1 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B078 ED 5B F5 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B07D 44 -  -  -  	    ld 		b,h
   86 D1:B07E 4D -  -  -  	    ld 		c,l
   87 D1:B07F 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B084 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B089 2C -  -  -  	    inc 	l
   90 D1:B08A 09 -  -  -  	    add 	hl,bc
   91 D1:B08B 22 F1 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B08F 2A F5 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B093 ED 5A -  -  	    adc 	hl,de
   94 D1:B095 22 F5 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B099 EB -  -  -  	    ex 		de,hl
   96 D1:B09A 2A F9 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B09E ED 4B FD A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B0A3 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B0A8 ED 43 FD A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B0AD 9F -  -  -  	    sbc 	a,a
  101 D1:B0AE E6 C5 -  -  	    and 	%11000101
  102 D1:B0B0 AD -  -  -  	    xor 	l
  103 D1:B0B1 6F -  -  -  	    ld 		l,a
  104 D1:B0B2 22 F9 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B0B6 EB -  -  -  	    ex 		de,hl
  106 D1:B0B7 09 -  -  -  	    add 	hl,bc
  107 D1:B0B8 C9 -  -  -  	    ret		
  108 D1:B0B9 -  -  -  -  
  109 D1:B0B9 -  -  -  -  ; ***************************************************************************************
  110 D1:B0B9 -  -  -  -  ;
  111 D1:B0B9 -  -  -  -  ;									Changes and Updates
  112 D1:B0B9 -  -  -  -  ;
  113 D1:B0B9 -  -  -  -  ; ***************************************************************************************
  114 D1:B0B9 -  -  -  -  ;
  115 D1:B0B9 -  -  -  -  ;		Date			Notes
  116 D1:B0B9 -  -  -  -  ;		==== 			=====
  117 D1:B0B9 -  -  -  -  ;
  118 D1:B0B9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B0B9 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B0B9 -  -  -  -  ; ***************************************************************************************
    2 D1:B0B9 -  -  -  -  ; ***************************************************************************************
    3 D1:B0B9 -  -  -  -  ;
    4 D1:B0B9 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B0B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0B9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0B9 -  -  -  -  ;		Reviewed :	No
    8 D1:B0B9 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B0B9 -  -  -  -  ;
   10 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   11 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   12 D1:B0B9 -  -  -  -  
   13 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   14 D1:B0B9 -  -  -  -  ;
   15 D1:B0B9 -  -  -  -  ;								sgn unary function
   16 D1:B0B9 -  -  -  -  ;
   17 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   18 D1:B0B9 -  -  -  -  
   19 D1:B0B9 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B0B9 CD 2F AE D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B0BD CD A5 BB D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B0C1 CA 2D AD D1 		jp 		z,UnaryInt32False
   23 D1:B0C5 D9 -  -  -  		exx
   24 D1:B0C6 CB 7C -  -  		bit 	7,h
   25 D1:B0C8 D9 -  -  -  		exx
   26 D1:B0C9 C2 29 AD D1 		jp 		nz,UnaryInt32True
   27 D1:B0CD 3E 01 -  -  		ld 		a,1
   28 D1:B0CF C3 7A AE D1 		jp 		Return8BitConstant
   29 D1:B0D3 -  -  -  -  
   30 D1:B0D3 -  -  -  -  ; ***************************************************************************************
   31 D1:B0D3 -  -  -  -  ;
   32 D1:B0D3 -  -  -  -  ;									Changes and Updates
   33 D1:B0D3 -  -  -  -  ;
   34 D1:B0D3 -  -  -  -  ; ***************************************************************************************
   35 D1:B0D3 -  -  -  -  ;
   36 D1:B0D3 -  -  -  -  ;		Date			Notes
   37 D1:B0D3 -  -  -  -  ;		==== 			=====
   38 D1:B0D3 -  -  -  -  ;
   39 D1:B0D3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:B0D3 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B0D3 -  -  -  -  ; ***************************************************************************************
    2 D1:B0D3 -  -  -  -  ; ***************************************************************************************
    3 D1:B0D3 -  -  -  -  ;
    4 D1:B0D3 -  -  -  -  ;		Name : 		simple.asm
    5 D1:B0D3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0D3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0D3 -  -  -  -  ;		Reviewed :	No
    8 D1:B0D3 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B0D3 -  -  -  -  ;
   10 D1:B0D3 -  -  -  -  ; ***************************************************************************************
   11 D1:B0D3 -  -  -  -  ; ***************************************************************************************
   12 D1:B0D3 -  -  -  -  
   13 D1:B0D3 -  -  -  -  ; ***************************************************************************************
   14 D1:B0D3 -  -  -  -  ;
   15 D1:B0D3 -  -  -  -  ;								( unary function (think about it)
   16 D1:B0D3 -  -  -  -  ;
   17 D1:B0D3 -  -  -  -  ; ***************************************************************************************
   18 D1:B0D3 -  -  -  -  
   19 D1:B0D3 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B0D3 CD D6 AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B0D7 C3 EC AB D1 		jp  	CheckRightBracket
   22 D1:B0DB -  -  -  -  
   23 D1:B0DB -  -  -  -  ; ***************************************************************************************
   24 D1:B0DB -  -  -  -  ;
   25 D1:B0DB -  -  -  -  ;									Handle &x
   26 D1:B0DB -  -  -  -  ;
   27 D1:B0DB -  -  -  -  ; ***************************************************************************************
   28 D1:B0DB -  -  -  -  
   29 D1:B0DB -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B0DB DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B0DE E6 C0 -  -  		and 		$C0
   32 D1:B0E0 FE 40 -  -  		cp 			$40
   33 D1:B0E2 C2 8C AC D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B0E6 C3 E4 AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B0EA -  -  -  -  
   36 D1:B0EA -  -  -  -  ; ***************************************************************************************
   37 D1:B0EA -  -  -  -  ;
   38 D1:B0EA -  -  -  -  ;									Changes and Updates
   39 D1:B0EA -  -  -  -  ;
   40 D1:B0EA -  -  -  -  ; ***************************************************************************************
   41 D1:B0EA -  -  -  -  ;
   42 D1:B0EA -  -  -  -  ;		Date			Notes
   43 D1:B0EA -  -  -  -  ;		==== 			=====
   44 D1:B0EA -  -  -  -  ;
   45 D1:B0EA -  -  -  -  ; ***************************************************************************************
   46 D1:B0EA -  -  -  -  		
Listing for file "_build.asm"
   46 D1:B0EA -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B0EA -  -  -  -  ; ***************************************************************************************
    2 D1:B0EA -  -  -  -  ; ***************************************************************************************
    3 D1:B0EA -  -  -  -  ;
    4 D1:B0EA -  -  -  -  ;		Name : 		str.asm
    5 D1:B0EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0EA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0EA -  -  -  -  ;		Reviewed :	No
    8 D1:B0EA -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B0EA -  -  -  -  ;
   10 D1:B0EA -  -  -  -  ; ***************************************************************************************
   11 D1:B0EA -  -  -  -  ; ***************************************************************************************
   12 D1:B0EA -  -  -  -  
   13 D1:B0EA -  -  -  -  ; ***************************************************************************************
   14 D1:B0EA -  -  -  -  ;
   15 D1:B0EA -  -  -  -  ;								Str$() unary function
   16 D1:B0EA -  -  -  -  ;
   17 D1:B0EA -  -  -  -  ; ***************************************************************************************
   18 D1:B0EA -  -  -  -  
   19 D1:B0EA -  -  -  -  Unary_Str:	;; [str]
   20 D1:B0EA CD FA AB D1 		call 	CheckDollar
   21 D1:B0EE DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B0F1 EE AC -  -  		xor		KWD_TILDE
   23 D1:B0F3 F5 -  -  -  		push 	af
   24 D1:B0F4 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B0F6 DD 23 -  -  		inc 	ix
   26 D1:B0F8 -  -  -  -  _USNotHex:		
   27 D1:B0F8 CD 2F AE D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B0FC 01 0F A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B100 F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B101 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B103 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B105 3E 10 -  -  		ld 		a,16
   33 D1:B107 -  -  -  -  _USNotHex2:		
   34 D1:B107 CD ED BB D1 		call 	Int32ToString 				
   35 D1:B10B 21 0F A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B10F 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B111 C9 -  -  -  		ret
   38 D1:B112 -  -  -  -  
   39 D1:B112 -  -  -  -  ; ***************************************************************************************
   40 D1:B112 -  -  -  -  ;
   41 D1:B112 -  -  -  -  ;									Changes and Updates
   42 D1:B112 -  -  -  -  ;
   43 D1:B112 -  -  -  -  ; ***************************************************************************************
   44 D1:B112 -  -  -  -  ;
   45 D1:B112 -  -  -  -  ;		Date			Notes
   46 D1:B112 -  -  -  -  ;		==== 			=====
   47 D1:B112 -  -  -  -  ;
   48 D1:B112 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:B112 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B112 -  -  -  -  ; ***************************************************************************************
    2 D1:B112 -  -  -  -  ; ***************************************************************************************
    3 D1:B112 -  -  -  -  ;
    4 D1:B112 -  -  -  -  ;		Name : 		time.asm
    5 D1:B112 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B112 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B112 -  -  -  -  ;		Reviewed :	No
    8 D1:B112 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B112 -  -  -  -  ;
   10 D1:B112 -  -  -  -  ; ***************************************************************************************
   11 D1:B112 -  -  -  -  ; ***************************************************************************************
   12 D1:B112 -  -  -  -  
   13 D1:B112 -  -  -  -  ; ***************************************************************************************
   14 D1:B112 -  -  -  -  ;
   15 D1:B112 -  -  -  -  ;							Get system time in ms
   16 D1:B112 -  -  -  -  ;
   17 D1:B112 -  -  -  -  ; ***************************************************************************************
   18 D1:B112 -  -  -  -  
   19 D1:B112 -  -  -  -  Unary_Time:	;; [time]
   20 D1:B112 CD B0 BC D1 			call 	SYSGetTimer
   21 D1:B116 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B118 C9 -  -  -  			ret
   23 D1:B119 -  -  -  -  
   24 D1:B119 -  -  -  -  ; ***************************************************************************************
   25 D1:B119 -  -  -  -  ;
   26 D1:B119 -  -  -  -  ;									Changes and Updates
   27 D1:B119 -  -  -  -  ;
   28 D1:B119 -  -  -  -  ; ***************************************************************************************
   29 D1:B119 -  -  -  -  ;
   30 D1:B119 -  -  -  -  ;		Date			Notes
   31 D1:B119 -  -  -  -  ;		==== 			=====
   32 D1:B119 -  -  -  -  ;
   33 D1:B119 -  -  -  -  ; ***************************************************************************************
   34 D1:B119 -  -  -  -  			
Listing for file "_build.asm"
   48 D1:B119 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B119 -  -  -  -  ; ***************************************************************************************
    2 D1:B119 -  -  -  -  ; ***************************************************************************************
    3 D1:B119 -  -  -  -  ;
    4 D1:B119 -  -  -  -  ;		Name : 		top.asm
    5 D1:B119 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B119 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B119 -  -  -  -  ;		Reviewed :	No
    8 D1:B119 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B119 -  -  -  -  ;
   10 D1:B119 -  -  -  -  ; ***************************************************************************************
   11 D1:B119 -  -  -  -  ; ***************************************************************************************
   12 D1:B119 -  -  -  -  
   13 D1:B119 -  -  -  -  ; ***************************************************************************************
   14 D1:B119 -  -  -  -  ;
   15 D1:B119 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B119 -  -  -  -  ;
   17 D1:B119 -  -  -  -  ; ***************************************************************************************
   18 D1:B119 -  -  -  -  
   19 D1:B119 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B119 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B11D D9 -  -  -  			exx
   22 D1:B11E 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B122 D9 -  -  -  			exx
   24 D1:B123 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B125 C9 -  -  -  			ret
   26 D1:B126 -  -  -  -  
   27 D1:B126 -  -  -  -  ; ***************************************************************************************
   28 D1:B126 -  -  -  -  ;
   29 D1:B126 -  -  -  -  ;									Changes and Updates
   30 D1:B126 -  -  -  -  ;
   31 D1:B126 -  -  -  -  ; ***************************************************************************************
   32 D1:B126 -  -  -  -  ;
   33 D1:B126 -  -  -  -  ;		Date			Notes
   34 D1:B126 -  -  -  -  ;		==== 			=====
   35 D1:B126 -  -  -  -  ;
   36 D1:B126 -  -  -  -  ; ***************************************************************************************
   37 D1:B126 -  -  -  -  			
Listing for file "_build.asm"
   49 D1:B126 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B126 -  -  -  -  ; ***************************************************************************************
    2 D1:B126 -  -  -  -  ; ***************************************************************************************
    3 D1:B126 -  -  -  -  ;
    4 D1:B126 -  -  -  -  ;		Name : 		val.asm
    5 D1:B126 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B126 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B126 -  -  -  -  ;		Reviewed :	No
    8 D1:B126 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B126 -  -  -  -  ;
   10 D1:B126 -  -  -  -  ; ***************************************************************************************
   11 D1:B126 -  -  -  -  ; ***************************************************************************************
   12 D1:B126 -  -  -  -  
   13 D1:B126 -  -  -  -  ; ***************************************************************************************
   14 D1:B126 -  -  -  -  ;
   15 D1:B126 -  -  -  -  ;								val( unary function
   16 D1:B126 -  -  -  -  ;
   17 D1:B126 -  -  -  -  ; ***************************************************************************************
   18 D1:B126 -  -  -  -  
   19 D1:B126 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B126 CD 3E AE D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B12A E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B12B C1 -  -  -  		pop 	bc
   23 D1:B12C 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B12E CD CB BA D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B132 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B134 C8 -  -  -  		ret		z 							; okay
   27 D1:B135 3E 03 C3 22 
              AC D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B13B -  -  -  -  
   29 D1:B13B -  -  -  -  ; ***************************************************************************************
   30 D1:B13B -  -  -  -  ;
   31 D1:B13B -  -  -  -  ;									Changes and Updates
   32 D1:B13B -  -  -  -  ;
   33 D1:B13B -  -  -  -  ; ***************************************************************************************
   34 D1:B13B -  -  -  -  ;
   35 D1:B13B -  -  -  -  ;		Date			Notes
   36 D1:B13B -  -  -  -  ;		==== 			=====
   37 D1:B13B -  -  -  -  ;
   38 D1:B13B -  -  -  -  ; ***************************************************************************************
   39 D1:B13B -  -  -  -  		
Listing for file "_build.asm"
   50 D1:B13B -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 D1:B13B -  -  -  -  ; ***************************************************************************************
    2 D1:B13B -  -  -  -  ; ***************************************************************************************
    3 D1:B13B -  -  -  -  ;
    4 D1:B13B -  -  -  -  ;		Name : 		locals.asm
    5 D1:B13B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B13B -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B13B -  -  -  -  ;		Reviewed :	No
    8 D1:B13B -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 D1:B13B -  -  -  -  ;
   10 D1:B13B -  -  -  -  ; ***************************************************************************************
   11 D1:B13B -  -  -  -  ; ***************************************************************************************
   12 D1:B13B -  -  -  -  
   13 D1:B13B -  -  -  -  ; ***************************************************************************************
   14 D1:B13B -  -  -  -  ;
   15 D1:B13B -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   16 D1:B13B -  -  -  -  ;
   17 D1:B13B -  -  -  -  ; ***************************************************************************************
   18 D1:B13B -  -  -  -  
   19 D1:B13B -  -  -  -  LocalCreateVariable:
   20 D1:B13B E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   21 D1:B13C D9 -  -  -  		exx
   22 D1:B13D E5 -  -  -  		push 	hl
   23 D1:B13E D9 -  -  -  		exx
   24 D1:B13F -  -  -  -  
   25 D1:B13F 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   26 D1:B141 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   27 D1:B145 CD BF B5 D1 		call 	FindVariable 				; locate the variable, address in UHL now.
   28 D1:B149 E5 -  -  -  		push 	hl 							; save variable address.
   29 D1:B14A -  -  -  -  
   30 D1:B14A 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   31 D1:B14C CD FC B4 D1 		call 	StackOpenFrame
   32 D1:B150 -  -  -  -  
   33 D1:B150 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; point to SP+1
   34 D1:B154 23 -  -  -  		inc 	hl
   35 D1:B155 D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   36 D1:B156 D5 -  -  -  		push 	de
   37 D1:B157 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   38 D1:B15D -  -  -  -  		;
   39 D1:B15D EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   40 D1:B15E CD 80 B1 D1 		call 	_LCVRead32HL 				; read HL current value into HL'HL
   41 D1:B162 CD 70 B1 D1 		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   42 D1:B166 -  -  -  -  		;
   43 D1:B166 D1 -  -  -  		pop 	de 							; the address of the variable itself.
   44 D1:B167 -  -  -  -  		;
   45 D1:B167 D9 -  -  -  		exx 								; restore the value being initialised to.
   46 D1:B168 E1 -  -  -  		pop 	hl
   47 D1:B169 D9 -  -  -  		exx
   48 D1:B16A E1 -  -  -  		pop 	hl
   49 D1:B16B CD 70 B1 D1 		call 	_LCVWrite32HL 				; write HL'HL to DE.
   50 D1:B16F C9 -  -  -  		ret
   51 D1:B170 -  -  -  -  
   52 D1:B170 -  -  -  -  ; ***************************************************************************************
   53 D1:B170 -  -  -  -  ;
   54 D1:B170 -  -  -  -  ;									Write HL'HL to DE.
   55 D1:B170 -  -  -  -  ;
   56 D1:B170 -  -  -  -  ; ***************************************************************************************
   57 D1:B170 -  -  -  -  
   58 D1:B170 -  -  -  -  _LCVWrite32HL:
   59 D1:B170 7D -  -  -  		ld 		a,l
   60 D1:B171 12 -  -  -  		ld 		(de),a
   61 D1:B172 13 -  -  -  		inc 	de
   62 D1:B173 7C -  -  -  		ld 		a,h
   63 D1:B174 12 -  -  -  		ld 		(de),a
   64 D1:B175 13 -  -  -  		inc 	de
   65 D1:B176 D5 -  -  -  		push 	de
   66 D1:B177 D9 -  -  -  		exx
   67 D1:B178 D1 -  -  -  		pop 	de
   68 D1:B179 7D -  -  -  		ld 		a,l
   69 D1:B17A 12 -  -  -  		ld 		(de),a
   70 D1:B17B 13 -  -  -  		inc 	de
   71 D1:B17C 7C -  -  -  		ld 		a,h
   72 D1:B17D 12 -  -  -  		ld 		(de),a
   73 D1:B17E D9 -  -  -  		exx
   74 D1:B17F C9 -  -  -  		ret
   75 D1:B180 -  -  -  -  
   76 D1:B180 -  -  -  -  
   77 D1:B180 -  -  -  -  ; ***************************************************************************************
   78 D1:B180 -  -  -  -  ;
   79 D1:B180 -  -  -  -  ;									Read (HL) to HL'HL
   80 D1:B180 -  -  -  -  ;
   81 D1:B180 -  -  -  -  ; ***************************************************************************************
   82 D1:B180 -  -  -  -  
   83 D1:B180 -  -  -  -  _LCVRead32HL:
   84 D1:B180 E5 -  -  -  		push 	hl
   85 D1:B181 ED 27 -  -  		ld_ind_hl
   86 D1:B183 D9 -  -  -  		exx
   87 D1:B184 E1 -  -  -  		pop 	hl
   88 D1:B185 23 -  -  -  		inc 	hl
   89 D1:B186 23 -  -  -  		inc 	hl
   90 D1:B187 ED 27 -  -  		ld_ind_hl
   91 D1:B189 D9 -  -  -  		exx
   92 D1:B18A C9 -  -  -  		ret
   93 D1:B18B -  -  -  -  
   94 D1:B18B -  -  -  -  ; ***************************************************************************************
   95 D1:B18B -  -  -  -  ;
   96 D1:B18B -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
   97 D1:B18B -  -  -  -  ;			or parameter
   98 D1:B18B -  -  -  -  ;
   99 D1:B18B -  -  -  -  ; ***************************************************************************************
  100 D1:B18B -  -  -  -  
  101 D1:B18B -  -  -  -  PopLocals:
  102 D1:B18B 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  103 D1:B18D CD 34 B5 D1 		call 	StackCheckFrame
  104 D1:B191 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  105 D1:B192 -  -  -  -  
  106 D1:B192 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  107 D1:B196 23 -  -  -  		inc 	hl
  108 D1:B197 E5 -  -  -  		push 	hl 							; save it
  109 D1:B198 ED 27 -  -  		ld_ind_hl 							; read address into HL
  110 D1:B19A EB -  -  -  		ex 		de,hl 						; target address is in DE.
  111 D1:B19B -  -  -  -  		;
  112 D1:B19B E1 -  -  -  		pop 	hl 							; address of old value
  113 D1:B19C 23 -  -  -  		inc 	hl
  114 D1:B19D 23 -  -  -  		inc 	hl
  115 D1:B19E 23 -  -  -  		inc 	hl
  116 D1:B19F 23 -  -  -  		inc 	hl
  117 D1:B1A0 CD 80 B1 D1 		call 	_LCVRead32HL 				; value into HL'HL
  118 D1:B1A4 CD 70 B1 D1 		call 	_LCVWrite32HL 				; and write it out again to var address
  119 D1:B1A8 -  -  -  -  
  120 D1:B1A8 CD 21 B5 D1 		call 	StackCloseFrame 			; remove the local/parameter
  121 D1:B1AC 18 DD -  -  		jr 		PopLocals 					; check any more ?
  122 D1:B1AE -  -  -  -  
  123 D1:B1AE -  -  -  -  ; ***************************************************************************************
  124 D1:B1AE -  -  -  -  ;
  125 D1:B1AE -  -  -  -  ;									Changes and Updates
  126 D1:B1AE -  -  -  -  ;
  127 D1:B1AE -  -  -  -  ; ***************************************************************************************
  128 D1:B1AE -  -  -  -  ;
  129 D1:B1AE -  -  -  -  ;		Date			Notes
  130 D1:B1AE -  -  -  -  ;		==== 			=====
  131 D1:B1AE -  -  -  -  ;
  132 D1:B1AE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B1AE -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 D1:B1AE -  -  -  -  ; ***************************************************************************************
    2 D1:B1AE -  -  -  -  ; ***************************************************************************************
    3 D1:B1AE -  -  -  -  ;
    4 D1:B1AE -  -  -  -  ;		Name : 		proc.asm
    5 D1:B1AE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1AE -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B1AE -  -  -  -  ;		Reviewed :	No
    8 D1:B1AE -  -  -  -  ;		Purpose :	Proc command
    9 D1:B1AE -  -  -  -  ;
   10 D1:B1AE -  -  -  -  ; ***************************************************************************************
   11 D1:B1AE -  -  -  -  ; ***************************************************************************************
   12 D1:B1AE -  -  -  -  
   13 D1:B1AE -  -  -  -  ; ***************************************************************************************
   14 D1:B1AE -  -  -  -  ;
   15 D1:B1AE -  -  -  -  ;										PROC Command
   16 D1:B1AE -  -  -  -  ;
   17 D1:B1AE -  -  -  -  ; ***************************************************************************************
   18 D1:B1AE -  -  -  -  
   19 D1:B1AE -  -  -  -  Command_PROC: 	;; [proc]
   20 D1:B1AE 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 D1:B1B0 CD FC B4 D1 			call 	StackOpenFrame 			; marker position.
   22 D1:B1B4 -  -  -  -  			;
   23 D1:B1B4 DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 D1:B1B7 FE 26 -  -  			cp 		IDENTIFIER_END
   25 D1:B1B9 D2 8C AC D1 			jp 		nc,SyntaxError 			; no , no call possible.
   26 D1:B1BD CD 33 B2 D1 			call 	SearchProcedure 		; find procedure referenced at IX.
   27 D1:B1C1 -  -  -  -  			;
   28 D1:B1C1 -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 D1:B1C1 -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 D1:B1C1 -  -  -  -  			;
   31 D1:B1C1 D5 -  -  -  			push 	de 						; save start of line
   32 D1:B1C2 DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 D1:B1C5 FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 D1:B1C7 CC DE B1 D1 			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 D1:B1CB -  -  -  -  			;
   36 D1:B1CB E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 D1:B1CC -  -  -  -  			;
   38 D1:B1CC 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 D1:B1CE CD FC B4 D1 			call 	StackOpenFrame 
   40 D1:B1D2 CD 3A B5 D1 			call 	StackSavePosition 		; and save the return address on the stack.
   41 D1:B1D6 -  -  -  -  
   42 D1:B1D6 DD E1 -  -  			pop 	ix 						; new position in code
   43 D1:B1D8 E1 -  -  -  			pop 	hl 						; start of line
   44 D1:B1D9 22 DD A8 D1 			ld 		(CurrentLineStart),hl 	; save start of line
   45 D1:B1DD C9 -  -  -  			ret
   46 D1:B1DE -  -  -  -  
   47 D1:B1DE -  -  -  -  ; ***************************************************************************************
   48 D1:B1DE -  -  -  -  ;
   49 D1:B1DE -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 D1:B1DE -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 D1:B1DE -  -  -  -  ;
   52 D1:B1DE -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 D1:B1DE -  -  -  -  ;			final ) on the parameter lists.
   54 D1:B1DE -  -  -  -  ;
   55 D1:B1DE -  -  -  -  ; ***************************************************************************************
   56 D1:B1DE -  -  -  -  
   57 D1:B1DE -  -  -  -  ProcDoParameterList:
   58 D1:B1DE 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 D1:B1DF DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 D1:B1E2 20 1E -  -  			jr 		nz,_ParamError
   61 D1:B1E4 -  -  -  -  			;
   62 D1:B1E4 DD 23 -  -  			inc 	ix 						; skip over it
   63 D1:B1E6 23 -  -  -  			inc 	hl
   64 D1:B1E7 FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 D1:B1E9 C8 -  -  -  			ret 	z
   66 D1:B1EA -  -  -  -  			;
   67 D1:B1EA FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 D1:B1EC 28 04 -  -  			jr 		z,_PDPFound
   69 D1:B1EE FE A6 -  -  			cp 		KWD_COMMA
   70 D1:B1F0 20 10 -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 D1:B1F2 -  -  -  -  			;
   72 D1:B1F2 -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 D1:B1F2 -  -  -  -  			;
   74 D1:B1F2 -  -  -  -  _PDPFound:			
   75 D1:B1F2 E5 -  -  -  			push 	hl 						; save callee on stack
   76 D1:B1F3 CD 55 AE D1 			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 D1:B1F7 DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 D1:B1F9 CD 3B B1 D1 			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 D1:B1FD DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 D1:B1FF E1 -  -  -  			pop 	hl 						; and HL the callee
   81 D1:B200 18 DC -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 D1:B202 -  -  -  -  
   83 D1:B202 -  -  -  -  _ParamError:
   84 D1:B202 3E 12 C3 22 
              AC D1 -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 D1:B208 -  -  -  -  
   86 D1:B208 -  -  -  -  ; ***************************************************************************************
   87 D1:B208 -  -  -  -  ;
   88 D1:B208 -  -  -  -  ;										ENDPROC Command
   89 D1:B208 -  -  -  -  ;
   90 D1:B208 -  -  -  -  ; ***************************************************************************************
   91 D1:B208 -  -  -  -  
   92 D1:B208 -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 D1:B208 CD 8B B1 D1 			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 D1:B20C 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 D1:B20E CD 34 B5 D1 			call 	StackCheckFrame
   96 D1:B212 20 19 -  -  			jr 		nz,_EndProcError
   97 D1:B214 CD 55 B5 D1 			call 	StackLoadPosition 		; restore position into IX/SOL
   98 D1:B218 CD 21 B5 D1 			call 	StackCloseFrame 		
   99 D1:B21C -  -  -  -  
  100 D1:B21C CD 8B B1 D1 			call 	PopLocals 				; restore any locals (parameters)
  101 D1:B220 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 D1:B222 CD 34 B5 D1 			call 	StackCheckFrame
  103 D1:B226 20 05 -  -  			jr 		nz,_EndProcError
  104 D1:B228 CD 21 B5 D1 			call 	StackCloseFrame 		
  105 D1:B22C C9 -  -  -  			ret
  106 D1:B22D -  -  -  -  _EndProcError:
  107 D1:B22D 3E 0F C3 22 
              AC D1 -  -  			ERR_NOPROC
  108 D1:B233 -  -  -  -  
  109 D1:B233 -  -  -  -  ; ***************************************************************************************
  110 D1:B233 -  -  -  -  ;
  111 D1:B233 -  -  -  -  ;									Changes and Updates
  112 D1:B233 -  -  -  -  ;
  113 D1:B233 -  -  -  -  ; ***************************************************************************************
  114 D1:B233 -  -  -  -  ;
  115 D1:B233 -  -  -  -  ;		Date			Notes
  116 D1:B233 -  -  -  -  ;		==== 			=====
  117 D1:B233 -  -  -  -  ;
  118 D1:B233 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B233 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 D1:B233 -  -  -  -  ; ***************************************************************************************
    2 D1:B233 -  -  -  -  ; ***************************************************************************************
    3 D1:B233 -  -  -  -  ;
    4 D1:B233 -  -  -  -  ;		Name : 		search.asm
    5 D1:B233 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B233 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B233 -  -  -  -  ;		Reviewed :	No
    8 D1:B233 -  -  -  -  ;		Purpose :	Search program for procedures
    9 D1:B233 -  -  -  -  ;
   10 D1:B233 -  -  -  -  ; ***************************************************************************************
   11 D1:B233 -  -  -  -  ; ***************************************************************************************
   12 D1:B233 -  -  -  -  
   13 D1:B233 -  -  -  -  ; ***************************************************************************************
   14 D1:B233 -  -  -  -  ;
   15 D1:B233 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 D1:B233 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 D1:B233 -  -  -  -  ;
   18 D1:B233 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 D1:B233 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 D1:B233 -  -  -  -  ;
   21 D1:B233 -  -  -  -  ; ***************************************************************************************
   22 D1:B233 -  -  -  -  
   23 D1:B233 -  -  -  -  SearchProcedure:
   24 D1:B233 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 D1:B236 -  -  -  -  
   26 D1:B236 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; start of program space
   27 D1:B23A -  -  -  -  			;
   28 D1:B23A -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 D1:B23A -  -  -  -  			;
   30 D1:B23A 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 D1:B23B B7 -  -  -  			or 		a
   32 D1:B23C 28 38 -  -  			jr 		z,_SPFail
   33 D1:B23E E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 D1:B23F 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 D1:B240 23 -  -  -  			inc 	hl
   36 D1:B241 23 -  -  -  			inc 	hl
   37 D1:B242 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 D1:B243 FE B6 -  -  			cp 		KWD_DEF 				
   39 D1:B245 20 0B -  -  			jr 		nz,_SPNext
   40 D1:B247 23 -  -  -  			inc 	hl 				
   41 D1:B248 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 D1:B249 FE B7 -  -  			cp 		KWD_PROC
   43 D1:B24B 20 05 -  -  			jr 		nz,_SPNext
   44 D1:B24D 23 -  -  -  			inc 	hl
   45 D1:B24E 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 D1:B24F B9 -  -  -  			cp 		c
   47 D1:B250 28 09 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 D1:B252 -  -  -  -  			;
   49 D1:B252 -  -  -  -  			;		Advance to next entry.
   50 D1:B252 -  -  -  -  			;			
   51 D1:B252 E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 D1:B253 11 00 00 00 			ld 		de,0 					; offset into UDE
   53 D1:B257 5E -  -  -  			ld 		e,(hl)
   54 D1:B258 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 D1:B259 18 DF -  -  			jr 		_SPLoop
   56 D1:B25B -  -  -  -  			;
   57 D1:B25B -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 D1:B25B -  -  -  -  			; 		DEF PROC line.
   59 D1:B25B -  -  -  -  			;		
   60 D1:B25B -  -  -  -  			;		Already know the first characters match
   61 D1:B25B -  -  -  -  			;
   62 D1:B25B -  -  -  -  _SPFullCheck:
   63 D1:B25B DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 D1:B25D -  -  -  -  _SPCheckLoop:
   65 D1:B25D DD 23 -  -  			inc 	ix 						; look at next character.
   66 D1:B25F 23 -  -  -  			inc 	hl
   67 D1:B260 DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 D1:B263 FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 D1:B265 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 D1:B267 BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 D1:B268 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 D1:B26A -  -  -  -  			;
   73 D1:B26A -  -  -  -  			;		Full check failed.
   74 D1:B26A -  -  -  -  			;
   75 D1:B26A -  -  -  -  _SPFullCheckFailed:			
   76 D1:B26A DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 D1:B26C 18 E4 -  -  			jr 		_SPNext 				; do the next line.
   78 D1:B26E -  -  -  -  			;
   79 D1:B26E -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 D1:B26E -  -  -  -  			;
   81 D1:B26E -  -  -  -  _SPCheckBothEnd:
   82 D1:B26E 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 D1:B26F FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 D1:B271 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 D1:B273 -  -  -  -  			;
   86 D1:B273 -  -  -  -  			;	 	We found it.
   87 D1:B273 -  -  -  -  			;
   88 D1:B273 C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 D1:B274 D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 D1:B275 C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 D1:B276 -  -  -  -  
   92 D1:B276 -  -  -  -  _SPFail: 									; come here when not found.
   93 D1:B276 3E 13 C3 22 
              AC D1 -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 D1:B27C -  -  -  -  
   95 D1:B27C -  -  -  -  ; ***************************************************************************************
   96 D1:B27C -  -  -  -  ;
   97 D1:B27C -  -  -  -  ;									Changes and Updates
   98 D1:B27C -  -  -  -  ;
   99 D1:B27C -  -  -  -  ; ***************************************************************************************
  100 D1:B27C -  -  -  -  ;
  101 D1:B27C -  -  -  -  ;		Date			Notes
  102 D1:B27C -  -  -  -  ;		==== 			=====
  103 D1:B27C -  -  -  -  ;
  104 D1:B27C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 D1:B27C -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B27C -  -  -  -  ; ***************************************************************************************
    2 D1:B27C -  -  -  -  ; ***************************************************************************************
    3 D1:B27C -  -  -  -  ;
    4 D1:B27C -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B27C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B27C -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B27C -  -  -  -  ;		Reviewed :	No
    8 D1:B27C -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B27C -  -  -  -  ;
   10 D1:B27C -  -  -  -  ; ***************************************************************************************
   11 D1:B27C -  -  -  -  ; ***************************************************************************************
   12 D1:B27C -  -  -  -  
   13 D1:B27C -  -  -  -  ; ***************************************************************************************
   14 D1:B27C -  -  -  -  ;
   15 D1:B27C -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B27C -  -  -  -  ;
   17 D1:B27C -  -  -  -  ; ***************************************************************************************
   18 D1:B27C -  -  -  -  
   19 D1:B27C -  -  -  -  AllocateBytes:
   20 D1:B27C EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B27D 21 00 00 00 		ld 		hl,$000000
   22 D1:B281 62 -  -  -  		ld 		h,d
   23 D1:B282 6B -  -  -  		ld 		l,e
   24 D1:B283 -  -  -  -  		;
   25 D1:B283 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 D1:B288 D5 -  -  -  		push 	de 							; save on stack
   27 D1:B289 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 D1:B28A 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   29 D1:B28E -  -  -  -  		;
   30 D1:B28E EB -  -  -  		ex 		de,hl 						; put in DE
   31 D1:B28F 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 D1:B293 AF -  -  -  		xor 	a
   33 D1:B294 ED 52 -  -  		sbc 	hl,de
   34 D1:B296 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 D1:B297 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 D1:B298 3E 0A C3 22 
              AC D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 D1:B29E -  -  -  -  
   38 D1:B29E -  -  -  -  ; ***************************************************************************************
   39 D1:B29E -  -  -  -  ;
   40 D1:B29E -  -  -  -  ;									Changes and Updates
   41 D1:B29E -  -  -  -  ;
   42 D1:B29E -  -  -  -  ; ***************************************************************************************
   43 D1:B29E -  -  -  -  ;
   44 D1:B29E -  -  -  -  ;		Date			Notes
   45 D1:B29E -  -  -  -  ;		==== 			=====
   46 D1:B29E -  -  -  -  ;
   47 D1:B29E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B29E -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B29E -  -  -  -  ; ***************************************************************************************
    2 D1:B29E -  -  -  -  ; ***************************************************************************************
    3 D1:B29E -  -  -  -  ;
    4 D1:B29E -  -  -  -  ;		Name : 		clear.asm
    5 D1:B29E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B29E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B29E -  -  -  -  ;		Reviewed :	No
    8 D1:B29E -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B29E -  -  -  -  ;
   10 D1:B29E -  -  -  -  ; ***************************************************************************************
   11 D1:B29E -  -  -  -  ; ***************************************************************************************
   12 D1:B29E -  -  -  -  
   13 D1:B29E -  -  -  -  ; ***************************************************************************************
   14 D1:B29E -  -  -  -  ;
   15 D1:B29E -  -  -  -  ;										CLEAR command
   16 D1:B29E -  -  -  -  ;
   17 D1:B29E -  -  -  -  ; ***************************************************************************************
   18 D1:B29E -  -  -  -  
   19 D1:B29E -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B29E -  -  -  -  		;
   21 D1:B29E -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B29E -  -  -  -  		;
   23 D1:B29E 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B2A2 -  -  -  -  _CCFindLow:
   25 D1:B2A2 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B2A6 5E -  -  -  		ld 		e,(hl)		
   27 D1:B2A7 19 -  -  -  		add 	hl,de
   28 D1:B2A8 7B -  -  -  		ld 		a,e
   29 D1:B2A9 B7 -  -  -  		or 		a
   30 D1:B2AA 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B2AC 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B2AD 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B2B1 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B2B2 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B2B6 -  -  -  -  		;
   36 D1:B2B6 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B2B6 -  -  -  -  		;
   38 D1:B2B6 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B2BA -  -  -  -  		;
   40 D1:B2BA 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:B2BE 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:B2C2 19 -  -  -  		add 	hl,de
   43 D1:B2C3 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:B2C5 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:B2C9 -  -  -  -  		;
   46 D1:B2C9 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:B2CD 19 -  -  -  		add 	hl,de
   48 D1:B2CE 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:B2D2 -  -  -  -  		;
   50 D1:B2D2 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 D1:B2D2 -  -  -  -  		;
   52 D1:B2D2 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 D1:B2D6 -  -  -  -  _CCFClearHT:
   54 D1:B2D6 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 D1:B2D7 36 00 -  -  		ld 		(hl),0
   56 D1:B2D9 1B -  -  -  		dec 	de
   57 D1:B2DA 7A -  -  -  		ld 		a,d
   58 D1:B2DB B3 -  -  -  		or 		e
   59 D1:B2DC 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 D1:B2DE 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   61 D1:B2E2 -  -  -  -  		;
   62 D1:B2E2 -  -  -  -  		; 		Save highest byte that can be allocate
   63 D1:B2E2 -  -  -  -  		;
   64 D1:B2E2 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   65 D1:B2E6 -  -  -  -  		;
   66 D1:B2E6 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 D1:B2E6 -  -  -  -  		;
   68 D1:B2E6 CD 69 B0 D1 		call 	UnaryRandomInitialise
   69 D1:B2EA -  -  -  -  		;
   70 D1:B2EA -  -  -  -  		;		Erase the stack
   71 D1:B2EA -  -  -  -  		;
   72 D1:B2EA CD F0 B4 D1 		call 	StackReset 					; reset the basic stack to empty
   73 D1:B2EE C9 -  -  -  		ret
   74 D1:B2EF -  -  -  -  
   75 D1:B2EF -  -  -  -  ; ***************************************************************************************
   76 D1:B2EF -  -  -  -  ;
   77 D1:B2EF -  -  -  -  ;									Changes and Updates
   78 D1:B2EF -  -  -  -  ;
   79 D1:B2EF -  -  -  -  ; ***************************************************************************************
   80 D1:B2EF -  -  -  -  ;
   81 D1:B2EF -  -  -  -  ;		Date			Notes
   82 D1:B2EF -  -  -  -  ;		==== 			=====
   83 D1:B2EF -  -  -  -  ;
   84 D1:B2EF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B2EF -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B2EF -  -  -  -  ; ***************************************************************************************
    2 D1:B2EF -  -  -  -  ; ***************************************************************************************
    3 D1:B2EF -  -  -  -  ;
    4 D1:B2EF -  -  -  -  ;		Name : 		instance.asm
    5 D1:B2EF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2EF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B2EF -  -  -  -  ;		Reviewed :	No
    8 D1:B2EF -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B2EF -  -  -  -  ;
   10 D1:B2EF -  -  -  -  ; ***************************************************************************************
   11 D1:B2EF -  -  -  -  ; ***************************************************************************************
   12 D1:B2EF -  -  -  -  
   13 D1:B2EF -  -  -  -  ; ***************************************************************************************
   14 D1:B2EF -  -  -  -  ;
   15 D1:B2EF -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B2EF -  -  -  -  ;
   17 D1:B2EF -  -  -  -  ; ***************************************************************************************
   18 D1:B2EF -  -  -  -  
   19 D1:B2EF -  -  -  -  SetCurrentInstance:
   20 D1:B2EF ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B2F4 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B2F8 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B2FD -  -  -  -  
   24 D1:B2FD C9 -  -  -  		ret
   25 D1:B2FE -  -  -  -  
   26 D1:B2FE -  -  -  -  
   27 D1:B2FE -  -  -  -  ; ***************************************************************************************
   28 D1:B2FE -  -  -  -  ;
   29 D1:B2FE -  -  -  -  ;									Changes and Updates
   30 D1:B2FE -  -  -  -  ;
   31 D1:B2FE -  -  -  -  ; ***************************************************************************************
   32 D1:B2FE -  -  -  -  ;
   33 D1:B2FE -  -  -  -  ;		Date			Notes
   34 D1:B2FE -  -  -  -  ;		==== 			=====
   35 D1:B2FE -  -  -  -  ;
   36 D1:B2FE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B2FE -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B2FE -  -  -  -  ; ***************************************************************************************
    2 D1:B2FE -  -  -  -  ; ***************************************************************************************
    3 D1:B2FE -  -  -  -  ;
    4 D1:B2FE -  -  -  -  ;		Name : 		new.asm
    5 D1:B2FE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2FE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B2FE -  -  -  -  ;		Reviewed :	No
    8 D1:B2FE -  -  -  -  ;		Purpose :	New command.
    9 D1:B2FE -  -  -  -  ;
   10 D1:B2FE -  -  -  -  ; ***************************************************************************************
   11 D1:B2FE -  -  -  -  ; ***************************************************************************************
   12 D1:B2FE -  -  -  -  
   13 D1:B2FE -  -  -  -  ; ***************************************************************************************
   14 D1:B2FE -  -  -  -  ;
   15 D1:B2FE -  -  -  -  ;										NEW command
   16 D1:B2FE -  -  -  -  ;
   17 D1:B2FE -  -  -  -  ; ***************************************************************************************
   18 D1:B2FE -  -  -  -  
   19 D1:B2FE -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B2FE 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B302 36 00 -  -  		ld 		(hl),0
   22 D1:B304 CD 9E B2 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B308 3E 00 C3 22 
              AC D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B30E -  -  -  -  
   25 D1:B30E -  -  -  -  ; ***************************************************************************************
   26 D1:B30E -  -  -  -  ;
   27 D1:B30E -  -  -  -  ;									Changes and Updates
   28 D1:B30E -  -  -  -  ;
   29 D1:B30E -  -  -  -  ; ***************************************************************************************
   30 D1:B30E -  -  -  -  ;
   31 D1:B30E -  -  -  -  ;		Date			Notes
   32 D1:B30E -  -  -  -  ;		==== 			=====
   33 D1:B30E -  -  -  -  ;
   34 D1:B30E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 D1:B30E -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 D1:B30E -  -  -  -  ; ***************************************************************************************
    2 D1:B30E -  -  -  -  ; ***************************************************************************************
    3 D1:B30E -  -  -  -  ;
    4 D1:B30E -  -  -  -  ;		Name : 		for.asm
    5 D1:B30E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B30E -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B30E -  -  -  -  ;		Reviewed :	No
    8 D1:B30E -  -  -  -  ;		Purpose :	For/Next command
    9 D1:B30E -  -  -  -  ;
   10 D1:B30E -  -  -  -  ; ***************************************************************************************
   11 D1:B30E -  -  -  -  
   12 D1:B30E -  -  -  -  ; ***************************************************************************************
   13 D1:B30E -  -  -  -  ;
   14 D1:B30E -  -  -  -  ;									For Command
   15 D1:B30E -  -  -  -  ;
   16 D1:B30E -  -  -  -  ; ***************************************************************************************
   17 D1:B30E -  -  -  -  
   18 D1:B30E -  -  -  -  Command_FOR: ;; [for]
   19 D1:B30E 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 D1:B310 CD FC B4 D1 			call 	StackOpenFrame
   21 D1:B314 -  -  -  -  			;
   22 D1:B314 -  -  -  -  			;		Variable Reference to increment
   23 D1:B314 -  -  -  -  			;
   24 D1:B314 DD E5 -  -  			push	ix 						; save start position
   25 D1:B316 3E FF -  -  			ld 		a,255 					; FOR can create
   26 D1:B318 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   27 D1:B31C CD E4 AE D1 			call 	EvaluateTerm 			; get term
   28 D1:B320 AF -  -  -  			xor 	a 						; autocreate off.
   29 D1:B321 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   30 D1:B325 DD E1 -  -  			pop 	ix 						; get start position
   31 D1:B327 E5 -  -  -  			push 	hl 						; save reference address.
   32 D1:B328 -  -  -  -  			;
   33 D1:B328 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 D1:B32A C2 8C AC D1 			jp 		nz,SyntaxError
   35 D1:B32E EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 D1:B32F -  -  -  -  			;
   37 D1:B32F 2A D9 A8 D1 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 D1:B333 01 06 00 00 			ld 		bc,6
   39 D1:B337 09 -  -  -  			add 	hl,bc 
   40 D1:B338 D1 -  -  -  			pop 	de 						; get reference.
   41 D1:B339 ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 D1:B33F -  -  -  -  			;
   43 D1:B33F -  -  -  -  			;		var = value
   44 D1:B33F -  -  -  -  			;
   45 D1:B33F CD 44 AA D1 			call 	Command_LET 			; so we do I = 1 or whatever.
   46 D1:B343 -  -  -  -  			; 		
   47 D1:B343 -  -  -  -  			; 		TO
   48 D1:B343 -  -  -  -  			;
   49 D1:B343 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 D1:B345 CD 16 AC D1 			call 	CheckNextA
   51 D1:B349 -  -  -  -  			;
   52 D1:B349 -  -  -  -  			;		value
   53 D1:B349 -  -  -  -  			;
   54 D1:B349 CD 55 AE D1 			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 D1:B34D 3E 0A -  -  			ld 		a,10
   56 D1:B34F CD 8A B3 D1 			call 	CFWriteHLHLToA 
   57 D1:B353 -  -  -  -  			;
   58 D1:B353 -  -  -  -  			;		Check STEP ?
   59 D1:B353 -  -  -  -  			;
   60 D1:B353 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   61 D1:B357 D9 -  -  -  			exx
   62 D1:B358 21 00 00 00 			ld 		hl,0
   63 D1:B35C D9 -  -  -  			exx			
   64 D1:B35D DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 D1:B360 FE B4 -  -  			cp 		KWD_STEP 				
   66 D1:B362 20 06 -  -  			jr 		nz,_CFDefaultStep
   67 D1:B364 -  -  -  -  			;
   68 D1:B364 DD 23 -  -  			inc 	ix 						; get step
   69 D1:B366 CD 55 AE D1 			call 	EvaluateInteger
   70 D1:B36A -  -  -  -  _CFDefaultStep:			
   71 D1:B36A 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 D1:B36C CD 8A B3 D1 			call 	CFWriteHLHLToA 
   73 D1:B370 CD 3A B5 D1 			call 	StackSavePosition 		; save loop address
   74 D1:B374 C9 -  -  -  			ret
   75 D1:B375 -  -  -  -  
   76 D1:B375 -  -  -  -  ; ***************************************************************************************
   77 D1:B375 -  -  -  -  ;
   78 D1:B375 -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 D1:B375 -  -  -  -  ;
   80 D1:B375 -  -  -  -  ; ***************************************************************************************
   81 D1:B375 -  -  -  -  
   82 D1:B375 -  -  -  -  CFReadAToHLHL:
   83 D1:B375 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   84 D1:B379 4F -  -  -  			ld 		c,a
   85 D1:B37A 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
   86 D1:B37E 09 -  -  -  			add 	hl,bc
   87 D1:B37F -  -  -  -  
   88 D1:B37F -  -  -  -  CFReadHLToHLHL:
   89 D1:B37F E5 -  -  -  			push 	hl
   90 D1:B380 ED 27 -  -  			ld_ind_hl 						; get low word
   91 D1:B382 D9 -  -  -  			exx
   92 D1:B383 -  -  -  -  
   93 D1:B383 E1 -  -  -  			pop 	hl 						; get high word
   94 D1:B384 23 -  -  -  			inc 	hl
   95 D1:B385 23 -  -  -  			inc 	hl
   96 D1:B386 ED 27 -  -  			ld_ind_hl
   97 D1:B388 D9 -  -  -  			exx
   98 D1:B389 -  -  -  -  
   99 D1:B389 C9 -  -  -  			ret
  100 D1:B38A -  -  -  -  
  101 D1:B38A -  -  -  -  ; ***************************************************************************************
  102 D1:B38A -  -  -  -  ;
  103 D1:B38A -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 D1:B38A -  -  -  -  ;
  105 D1:B38A -  -  -  -  ; ***************************************************************************************
  106 D1:B38A -  -  -  -  
  107 D1:B38A -  -  -  -  CFWriteHLHLToA:
  108 D1:B38A EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 D1:B38B D9 -  -  -  			exx
  110 D1:B38C EB -  -  -  			ex 		de,hl
  111 D1:B38D D9 -  -  -  			exx
  112 D1:B38E -  -  -  -  
  113 D1:B38E 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  114 D1:B392 4F -  -  -  			ld 		c,a
  115 D1:B393 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
  116 D1:B397 09 -  -  -  			add 	hl,bc
  117 D1:B398 -  -  -  -  
  118 D1:B398 -  -  -  -  CFWriteDEDEToHL:
  119 D1:B398 73 -  -  -  			ld 		(hl),e 					; write low word
  120 D1:B399 23 -  -  -  			inc 	hl
  121 D1:B39A 72 -  -  -  			ld 		(hl),d
  122 D1:B39B 23 -  -  -  			inc 	hl
  123 D1:B39C -  -  -  -  
  124 D1:B39C E5 -  -  -  			push 	hl 						; write high word
  125 D1:B39D D9 -  -  -  			exx
  126 D1:B39E E1 -  -  -  			pop 	hl
  127 D1:B39F 73 -  -  -  			ld 		(hl),e
  128 D1:B3A0 23 -  -  -  			inc 	hl
  129 D1:B3A1 72 -  -  -  			ld 		(hl),d
  130 D1:B3A2 D9 -  -  -  			exx
  131 D1:B3A3 C9 -  -  -  			ret			
  132 D1:B3A4 -  -  -  -  
  133 D1:B3A4 -  -  -  -  ; ***************************************************************************************
  134 D1:B3A4 -  -  -  -  ;
  135 D1:B3A4 -  -  -  -  ;									Next Command
  136 D1:B3A4 -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 D1:B3A4 -  -  -  -  ;
  138 D1:B3A4 -  -  -  -  ; ***************************************************************************************
  139 D1:B3A4 -  -  -  -  
  140 D1:B3A4 -  -  -  -  Command_Next:	;; [next]
  141 D1:B3A4 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 D1:B3A6 CD 34 B5 D1 			call 	StackCheckFrame
  143 D1:B3AA -  -  -  -  			;
  144 D1:B3AA -  -  -  -  			;		Get address of FOR variable
  145 D1:B3AA -  -  -  -  			;
  146 D1:B3AA 2A D9 A8 D1 			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 D1:B3AE 01 06 00 00 			ld 		bc,6
  148 D1:B3B2 09 -  -  -  			add 	hl,bc
  149 D1:B3B3 ED 27 -  -  			ld_ind_hl
  150 D1:B3B5 -  -  -  -  			;
  151 D1:B3B5 -  -  -  -  			; 		Save reference, read value into DE.
  152 D1:B3B5 -  -  -  -  			;
  153 D1:B3B5 E5 -  -  -  			push 	hl 						; save index address
  154 D1:B3B6 CD 7F B3 D1 			call 	CFReadHLToHLHL 			; read the index value.
  155 D1:B3BA -  -  -  -  
  156 D1:B3BA EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 D1:B3BB D9 -  -  -  			exx
  158 D1:B3BC EB -  -  -  			ex 		de,hl
  159 D1:B3BD D9 -  -  -  			exx
  160 D1:B3BE -  -  -  -  			;
  161 D1:B3BE -  -  -  -  			; 		Read step and Add
  162 D1:B3BE -  -  -  -  			;
  163 D1:B3BE 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 D1:B3C0 CD 75 B3 D1 			call 	CFReadAToHLHL
  165 D1:B3C4 D9 -  -  -  			exx 							; msb of step on stack
  166 D1:B3C5 7C -  -  -  			ld 		a,h
  167 D1:B3C6 D9 -  -  -  			exx
  168 D1:B3C7 F5 -  -  -  			push 	af
  169 D1:B3C8 CD 6C BB D1 			call 	Int32Add 				; add step to offset => HL'HL
  170 D1:B3CC -  -  -  -  			;
  171 D1:B3CC -  -  -  -  			;		Put result in DE and write back out
  172 D1:B3CC -  -  -  -  			;
  173 D1:B3CC EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 D1:B3CD D9 -  -  -  			exx
  175 D1:B3CE EB -  -  -  			ex 		de,hl
  176 D1:B3CF D9 -  -  -  			exx
  177 D1:B3D0 F1 -  -  -  			pop 	af 						; get msb of step
  178 D1:B3D1 E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 D1:B3D2 F5 -  -  -  			push 	af 						; push msb of step back.
  180 D1:B3D3 CD 98 B3 D1 			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 D1:B3D7 -  -  -  -  			;
  182 D1:B3D7 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 D1:B3D7 -  -  -  -  			;
  184 D1:B3D7 3E 0A -  -  			ld 		a,10 					; load limit
  185 D1:B3D9 CD 75 B3 D1 			call 	CFReadAToHLHL
  186 D1:B3DD CD AC BB D1 			call 	Int32Compare 			; compare limit to index.
  187 D1:B3E1 C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 D1:B3E2 B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 D1:B3E3 28 0A -  -  			jr 		z,_CNXLoopBack
  190 D1:B3E5 CB 78 -  -  			bit 	7,b 					; was step -ve
  191 D1:B3E7 28 02 -  -  			jr 		z,_CNXNotMStep
  192 D1:B3E9 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 D1:B3EB -  -  -  -  _CNXNotMStep:			
  194 D1:B3EB E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 D1:B3ED 20 04 -  -  			jr 		nz,_CNXLoopOver
  196 D1:B3EF -  -  -  -  			;
  197 D1:B3EF -  -  -  -  			;		For loop goes round again.
  198 D1:B3EF -  -  -  -  			;
  199 D1:B3EF -  -  -  -  _CNXLoopBack:			
  200 D1:B3EF C3 55 B5 D1 			jp 		StackLoadPosition
  201 D1:B3F3 -  -  -  -  			;
  202 D1:B3F3 -  -  -  -  			;		For loop completed
  203 D1:B3F3 -  -  -  -  			;
  204 D1:B3F3 -  -  -  -  _CNXLoopOver:
  205 D1:B3F3 C3 21 B5 D1 			jp 		StackCloseFrame
  206 D1:B3F7 F5 3E 02 32 
              FF FF FF F1 			debug
  207 D1:B3FF -  -  -  -  
  208 D1:B3FF -  -  -  -  ; ***************************************************************************************
  209 D1:B3FF -  -  -  -  ;
  210 D1:B3FF -  -  -  -  ;									Changes and Updates
  211 D1:B3FF -  -  -  -  ;
  212 D1:B3FF -  -  -  -  ; ***************************************************************************************
  213 D1:B3FF -  -  -  -  ;
  214 D1:B3FF -  -  -  -  ;		Date			Notes
  215 D1:B3FF -  -  -  -  ;		==== 			=====
  216 D1:B3FF -  -  -  -  ;
  217 D1:B3FF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 D1:B3FF -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 D1:B3FF -  -  -  -  ; ***************************************************************************************
    2 D1:B3FF -  -  -  -  ; ***************************************************************************************
    3 D1:B3FF -  -  -  -  ;
    4 D1:B3FF -  -  -  -  ;		Name : 		gosub.asm
    5 D1:B3FF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3FF -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B3FF -  -  -  -  ;		Reviewed :	No
    8 D1:B3FF -  -  -  -  ;		Purpose :	Gosub/Return command
    9 D1:B3FF -  -  -  -  ;
   10 D1:B3FF -  -  -  -  ; ***************************************************************************************
   11 D1:B3FF -  -  -  -  
   12 D1:B3FF -  -  -  -  ; ***************************************************************************************
   13 D1:B3FF -  -  -  -  ;
   14 D1:B3FF -  -  -  -  ;									Gosub Command
   15 D1:B3FF -  -  -  -  ;
   16 D1:B3FF -  -  -  -  ; ***************************************************************************************
   17 D1:B3FF -  -  -  -  
   18 D1:B3FF -  -  -  -  Command_GOSUB: ;; [gosub]
   19 D1:B3FF 3E 13 -  -  			ld		a,STM_GOSUB
   20 D1:B401 CD FC B4 D1 			call 	StackOpenFrame
   21 D1:B405 CD 34 B4 D1 			call 	GoGetLineNumber
   22 D1:B409 E5 -  -  -  			push 	hl
   23 D1:B40A CD 3A B5 D1 			call 	StackSavePosition
   24 D1:B40E E1 -  -  -  			pop 	hl
   25 D1:B40F CD 41 B4 D1 			call	TransferToLineHL
   26 D1:B413 C9 -  -  -  			ret
   27 D1:B414 -  -  -  -  
   28 D1:B414 -  -  -  -  ; ***************************************************************************************
   29 D1:B414 -  -  -  -  ;
   30 D1:B414 -  -  -  -  ;									Return command
   31 D1:B414 -  -  -  -  ;
   32 D1:B414 -  -  -  -  ; ***************************************************************************************
   33 D1:B414 -  -  -  -  
   34 D1:B414 -  -  -  -  Command_Return: ;; [return]
   35 D1:B414 3E 13 -  -  			ld		a,STM_GOSUB
   36 D1:B416 CD 34 B5 D1 			call 	StackCheckFrame
   37 D1:B41A 20 09 -  -  			jr 		nz,_ReturnError
   38 D1:B41C CD 55 B5 D1 			call 	StackLoadPosition
   39 D1:B420 CD 21 B5 D1 			call 	StackCloseFrame
   40 D1:B424 C9 -  -  -  			ret
   41 D1:B425 -  -  -  -  _ReturnError:
   42 D1:B425 3E 07 C3 22 
              AC D1 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 D1:B42B -  -  -  -  
   44 D1:B42B -  -  -  -  ; ***************************************************************************************
   45 D1:B42B -  -  -  -  ;
   46 D1:B42B -  -  -  -  ;									Changes and Updates
   47 D1:B42B -  -  -  -  ;
   48 D1:B42B -  -  -  -  ; ***************************************************************************************
   49 D1:B42B -  -  -  -  ;
   50 D1:B42B -  -  -  -  ;		Date			Notes
   51 D1:B42B -  -  -  -  ;		==== 			=====
   52 D1:B42B -  -  -  -  ;
   53 D1:B42B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 D1:B42B -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 D1:B42B -  -  -  -  ; ***************************************************************************************
    2 D1:B42B -  -  -  -  ; ***************************************************************************************
    3 D1:B42B -  -  -  -  ;
    4 D1:B42B -  -  -  -  ;		Name : 		goto.asm
    5 D1:B42B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B42B -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B42B -  -  -  -  ;		Reviewed :	No
    8 D1:B42B -  -  -  -  ;		Purpose :	Goto command
    9 D1:B42B -  -  -  -  ;
   10 D1:B42B -  -  -  -  ; ***************************************************************************************
   11 D1:B42B -  -  -  -  
   12 D1:B42B -  -  -  -  ; ***************************************************************************************
   13 D1:B42B -  -  -  -  ;
   14 D1:B42B -  -  -  -  ;									Goto Command
   15 D1:B42B -  -  -  -  ;
   16 D1:B42B -  -  -  -  ; ***************************************************************************************
   17 D1:B42B -  -  -  -  
   18 D1:B42B -  -  -  -  Command_GOTO: ;; [goto]
   19 D1:B42B CD 34 B4 D1 			call 	GoGetLineNumber
   20 D1:B42F CD 41 B4 D1 			call	TransferToLineHL
   21 D1:B433 C9 -  -  -  			ret
   22 D1:B434 -  -  -  -  
   23 D1:B434 -  -  -  -  ; ***************************************************************************************
   24 D1:B434 -  -  -  -  ;
   25 D1:B434 -  -  -  -  ;							Get and validate a line number in HL
   26 D1:B434 -  -  -  -  ;
   27 D1:B434 -  -  -  -  ; ***************************************************************************************
   28 D1:B434 -  -  -  -  
   29 D1:B434 -  -  -  -  GoGetLineNumber:
   30 D1:B434 CD 55 AE D1 			call 	EvaluateInteger
   31 D1:B438 D9 -  -  -  			exx
   32 D1:B439 7C -  -  -  			ld 		a,h
   33 D1:B43A B5 -  -  -  			or 		l
   34 D1:B43B D9 -  -  -  			exx
   35 D1:B43C C8 -  -  -  			ret 	z
   36 D1:B43D C3 86 AC D1 			jp 		BadValue
   37 D1:B441 -  -  -  -  
   38 D1:B441 -  -  -  -  ; ***************************************************************************************
   39 D1:B441 -  -  -  -  ;
   40 D1:B441 -  -  -  -  ;							Transfer to Line Number HL
   41 D1:B441 -  -  -  -  ;
   42 D1:B441 -  -  -  -  ; ***************************************************************************************
   43 D1:B441 -  -  -  -  
   44 D1:B441 -  -  -  -  TransferToLineHL:
   45 D1:B441 EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 D1:B442 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 D1:B446 DD 2A B9 A8 
              D1 -  -  -  			ld 		ix,(CodeAddress)
   48 D1:B44B -  -  -  -  _TLSearch:	
   49 D1:B44B DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 D1:B44D DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 D1:B450 B7 -  -  -  			or 		a 						; if zero
   52 D1:B451 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 D1:B453 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 D1:B454 -  -  -  -  
   55 D1:B454 7B -  -  -  			ld 		a,e						; compare line address
   56 D1:B455 DD BE 01 -  			cp 		(ix+1)
   57 D1:B458 20 F1 -  -  			jr 		nz,_TLSearch
   58 D1:B45A 7A -  -  -  			ld 		a,d
   59 D1:B45B DD BE 02 -  			cp 		(ix+2)
   60 D1:B45E 20 EB -  -  			jr 		nz,_TLSearch
   61 D1:B460 -  -  -  -  			;
   62 D1:B460 DD 22 DD A8 
              D1 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 D1:B465 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 D1:B467 DD 23 -  -  			inc 	ix
   65 D1:B469 DD 23 -  -  			inc 	ix
   66 D1:B46B -  -  -  -  
   67 D1:B46B C9 -  -  -  			ret
   68 D1:B46C -  -  -  -  
   69 D1:B46C -  -  -  -  _TLNotFound:
   70 D1:B46C 3E 09 C3 22 
              AC D1 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 D1:B472 -  -  -  -  
   72 D1:B472 -  -  -  -  ; ***************************************************************************************
   73 D1:B472 -  -  -  -  ;
   74 D1:B472 -  -  -  -  ;									Changes and Updates
   75 D1:B472 -  -  -  -  ;
   76 D1:B472 -  -  -  -  ; ***************************************************************************************
   77 D1:B472 -  -  -  -  ;
   78 D1:B472 -  -  -  -  ;		Date			Notes
   79 D1:B472 -  -  -  -  ;		==== 			=====
   80 D1:B472 -  -  -  -  ;
   81 D1:B472 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 D1:B472 -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 D1:B472 -  -  -  -  ; ***************************************************************************************
    2 D1:B472 -  -  -  -  ; ***************************************************************************************
    3 D1:B472 -  -  -  -  ;
    4 D1:B472 -  -  -  -  ;		Name : 		if.asm
    5 D1:B472 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B472 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B472 -  -  -  -  ;		Reviewed :	No
    8 D1:B472 -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 D1:B472 -  -  -  -  ;
   10 D1:B472 -  -  -  -  ; ***************************************************************************************
   11 D1:B472 -  -  -  -  
   12 D1:B472 -  -  -  -  ; ***************************************************************************************
   13 D1:B472 -  -  -  -  ;
   14 D1:B472 -  -  -  -  ;									If Command
   15 D1:B472 -  -  -  -  ;
   16 D1:B472 -  -  -  -  ; ***************************************************************************************
   17 D1:B472 -  -  -  -  
   18 D1:B472 -  -  -  -  Command_IF: ;; [if]
   19 D1:B472 CD 55 AE D1 		call 	EvaluateInteger 			; work out the test.
   20 D1:B476 CD A5 BB D1 		call 	Int32Zero 					; test if zero
   21 D1:B47A 28 1D -  -  		jr 		z,_IFFail
   22 D1:B47C -  -  -  -  		;
   23 D1:B47C -  -  -  -  		;	 	Passed
   24 D1:B47C -  -  -  -  		;
   25 D1:B47C DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 D1:B47F DD 23 -  -  		inc 	ix
   27 D1:B481 FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 D1:B483 CA 2B B4 D1 		jp 		z,Command_GOTO
   29 D1:B487 FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 D1:B489 C2 8C AC D1 		jp 		nz,SyntaxError
   31 D1:B48D DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 D1:B490 E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 D1:B492 FE 40 -  -  		cp 		$40
   34 D1:B494 CA 2B B4 D1 		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 D1:B498 C9 -  -  -  		ret 								; otherwise carry on.
   36 D1:B499 -  -  -  -  		;
   37 D1:B499 -  -  -  -  		;		Failed.
   38 D1:B499 -  -  -  -  		;
   39 D1:B499 -  -  -  -  _IFFail:
   40 D1:B499 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 D1:B49B 0E B1 -  -  		ld 		c,KWD_ELSE
   42 D1:B49D CD D6 B4 D1 		call 	SearchForwardTokens 		; searching forward.
   43 D1:B4A1 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 D1:B4A3 CA 2D AA D1 		jp 		z,EOLHandler 				; do the next line code.
   45 D1:B4A7 C9 -  -  -  		ret 								; otherwise carry on.
   46 D1:B4A8 -  -  -  -  
   47 D1:B4A8 -  -  -  -  ; ***************************************************************************************
   48 D1:B4A8 -  -  -  -  ;
   49 D1:B4A8 -  -  -  -  ;						Else command => Progress to next line
   50 D1:B4A8 -  -  -  -  ;
   51 D1:B4A8 -  -  -  -  ; ***************************************************************************************
   52 D1:B4A8 -  -  -  -  
   53 D1:B4A8 -  -  -  -  Command_Else: ;; [else]
   54 D1:B4A8 C3 2D AA D1 		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 D1:B4AC -  -  -  -  
   56 D1:B4AC -  -  -  -  ; ***************************************************************************************
   57 D1:B4AC -  -  -  -  ;
   58 D1:B4AC -  -  -  -  ;									Changes and Updates
   59 D1:B4AC -  -  -  -  ;
   60 D1:B4AC -  -  -  -  ; ***************************************************************************************
   61 D1:B4AC -  -  -  -  ;
   62 D1:B4AC -  -  -  -  ;		Date			Notes
   63 D1:B4AC -  -  -  -  ;		==== 			=====
   64 D1:B4AC -  -  -  -  ;
   65 D1:B4AC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B4AC -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 D1:B4AC -  -  -  -  ; ***************************************************************************************
    2 D1:B4AC -  -  -  -  ; ***************************************************************************************
    3 D1:B4AC -  -  -  -  ;
    4 D1:B4AC -  -  -  -  ;		Name : 		repeat.asm
    5 D1:B4AC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4AC -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B4AC -  -  -  -  ;		Reviewed :	No
    8 D1:B4AC -  -  -  -  ;		Purpose :	Repeat/Until command
    9 D1:B4AC -  -  -  -  ;
   10 D1:B4AC -  -  -  -  ; ***************************************************************************************
   11 D1:B4AC -  -  -  -  
   12 D1:B4AC -  -  -  -  ; ***************************************************************************************
   13 D1:B4AC -  -  -  -  ;
   14 D1:B4AC -  -  -  -  ;									Repeat Command
   15 D1:B4AC -  -  -  -  ;
   16 D1:B4AC -  -  -  -  ; ***************************************************************************************
   17 D1:B4AC -  -  -  -  
   18 D1:B4AC -  -  -  -  Command_REPEAT: ;; [repeat]
   19 D1:B4AC 3E 23 -  -  			ld		a,STM_REPEAT
   20 D1:B4AE CD FC B4 D1 			call 	StackOpenFrame
   21 D1:B4B2 CD 3A B5 D1 			call 	StackSavePosition
   22 D1:B4B6 C9 -  -  -  			ret
   23 D1:B4B7 -  -  -  -  
   24 D1:B4B7 -  -  -  -  ; ***************************************************************************************
   25 D1:B4B7 -  -  -  -  ;
   26 D1:B4B7 -  -  -  -  ;									Until command
   27 D1:B4B7 -  -  -  -  ;
   28 D1:B4B7 -  -  -  -  ; ***************************************************************************************
   29 D1:B4B7 -  -  -  -  
   30 D1:B4B7 -  -  -  -  Command_Until: ;; [until]
   31 D1:B4B7 3E 23 -  -  			ld		a,STM_REPEAT
   32 D1:B4B9 CD 34 B5 D1 			call 	StackCheckFrame
   33 D1:B4BD 20 11 -  -  			jr 		nz,_UntilError
   34 D1:B4BF CD 55 AE D1 			call	EvaluateInteger 		; until what
   35 D1:B4C3 CD A5 BB D1 			call 	Int32Zero 				; check zero
   36 D1:B4C7 CA 55 B5 D1 			jp 		z,StackLoadPosition 	; if zero loop back
   37 D1:B4CB CD 21 B5 D1 			call 	StackCloseFrame 		; otherwise end frame.
   38 D1:B4CF C9 -  -  -  			ret
   39 D1:B4D0 -  -  -  -  _UntilError:
   40 D1:B4D0 3E 14 C3 22 
              AC D1 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 D1:B4D6 -  -  -  -  
   42 D1:B4D6 -  -  -  -  ; ***************************************************************************************
   43 D1:B4D6 -  -  -  -  ;
   44 D1:B4D6 -  -  -  -  ;									Changes and Updates
   45 D1:B4D6 -  -  -  -  ;
   46 D1:B4D6 -  -  -  -  ; ***************************************************************************************
   47 D1:B4D6 -  -  -  -  ;
   48 D1:B4D6 -  -  -  -  ;		Date			Notes
   49 D1:B4D6 -  -  -  -  ;		==== 			=====
   50 D1:B4D6 -  -  -  -  ;
   51 D1:B4D6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B4D6 -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 D1:B4D6 -  -  -  -  ; ***************************************************************************************
    2 D1:B4D6 -  -  -  -  ; ***************************************************************************************
    3 D1:B4D6 -  -  -  -  ;
    4 D1:B4D6 -  -  -  -  ;		Name : 		search.asm
    5 D1:B4D6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4D6 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B4D6 -  -  -  -  ;		Reviewed :	No
    8 D1:B4D6 -  -  -  -  ;		Purpose :	Search forward for token
    9 D1:B4D6 -  -  -  -  ;
   10 D1:B4D6 -  -  -  -  ; ***************************************************************************************
   11 D1:B4D6 -  -  -  -  
   12 D1:B4D6 -  -  -  -  ; ***************************************************************************************
   13 D1:B4D6 -  -  -  -  ;
   14 D1:B4D6 -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 D1:B4D6 -  -  -  -  ; 		and IX points to next byte.
   16 D1:B4D6 -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 D1:B4D6 -  -  -  -  ;
   18 D1:B4D6 -  -  -  -  ; ***************************************************************************************
   19 D1:B4D6 -  -  -  -  
   20 D1:B4D6 -  -  -  -  SearchForwardTokens:
   21 D1:B4D6 DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 D1:B4D9 DD 23 -  -  		inc 	ix
   23 D1:B4DB B8 -  -  -  		cp 		b 							; exit if either found.
   24 D1:B4DC C8 -  -  -  		ret 	z
   25 D1:B4DD B9 -  -  -  		cp 		c
   26 D1:B4DE C8 -  -  -  		ret 	z
   27 D1:B4DF -  -  -  -  		;
   28 D1:B4DF FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 D1:B4E1 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 D1:B4E3 -  -  -  -  
   31 D1:B4E3 11 00 00 00 		ld 		de,0 						; put length into DE
   32 D1:B4E7 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:B4EA 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 D1:B4EB 13 -  -  -  		inc 	de
   35 D1:B4EC DD 19 -  -  		add 	ix,de 						; jump forward
   36 D1:B4EE 18 E6 -  -  		jr 		SearchForwardTokens
   37 D1:B4F0 -  -  -  -  
   38 D1:B4F0 -  -  -  -  ; ***************************************************************************************
   39 D1:B4F0 -  -  -  -  ;
   40 D1:B4F0 -  -  -  -  ;									Changes and Updates
   41 D1:B4F0 -  -  -  -  ;
   42 D1:B4F0 -  -  -  -  ; ***************************************************************************************
   43 D1:B4F0 -  -  -  -  ;
   44 D1:B4F0 -  -  -  -  ;		Date			Notes
   45 D1:B4F0 -  -  -  -  ;		==== 			=====
   46 D1:B4F0 -  -  -  -  ;
   47 D1:B4F0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B4F0 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 D1:B4F0 -  -  -  -  ; ***************************************************************************************
    2 D1:B4F0 -  -  -  -  ; ***************************************************************************************
    3 D1:B4F0 -  -  -  -  ;
    4 D1:B4F0 -  -  -  -  ;		Name : 		stack.asm
    5 D1:B4F0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4F0 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B4F0 -  -  -  -  ;		Reviewed :	No
    8 D1:B4F0 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:B4F0 -  -  -  -  ;
   10 D1:B4F0 -  -  -  -  ; ***************************************************************************************
   11 D1:B4F0 -  -  -  -  ; ***************************************************************************************
   12 D1:B4F0 -  -  -  -  ;
   13 D1:B4F0 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 D1:B4F0 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 D1:B4F0 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 D1:B4F0 -  -  -  -  ;
   17 D1:B4F0 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 D1:B4F0 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 D1:B4F0 -  -  -  -  ;
   20 D1:B4F0 -  -  -  -  ; ***************************************************************************************
   21 D1:B4F0 -  -  -  -  ;
   22 D1:B4F0 -  -  -  -  ;								Clear the stack
   23 D1:B4F0 -  -  -  -  ;
   24 D1:B4F0 -  -  -  -  ; ***************************************************************************************
   25 D1:B4F0 -  -  -  -  
   26 D1:B4F0 -  -  -  -  StackReset:
   27 D1:B4F0 2A BD A8 D1 		ld 		hl,(LanguageStack) 			; top of language stack
   28 D1:B4F4 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 D1:B4F5 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write out current position
   30 D1:B4F9 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 D1:B4FB C9 -  -  -  		ret
   32 D1:B4FC -  -  -  -  
   33 D1:B4FC -  -  -  -  ; ***************************************************************************************
   34 D1:B4FC -  -  -  -  ;
   35 D1:B4FC -  -  -  -  ;								Open a stack frame type A
   36 D1:B4FC -  -  -  -  ;
   37 D1:B4FC -  -  -  -  ; ***************************************************************************************
   38 D1:B4FC -  -  -  -  
   39 D1:B4FC -  -  -  -  StackOpenFrame:
   40 D1:B4FC F5 -  -  -  		push 	af 							; save frame type
   41 D1:B4FD E6 0F -  -  		and 	$0F 						; get size of frame
   42 D1:B4FF 87 -  -  -  		add 	a,a 						; double it
   43 D1:B500 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 D1:B504 5F -  -  -  		ld 		e,a
   45 D1:B505 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get stack pointer
   46 D1:B509 AF -  -  -  		xor 	a
   47 D1:B50A ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 D1:B50C 22 D9 A8 D1 		ld 		(BasicSP),hl
   49 D1:B510 F1 -  -  -  		pop 	af 							; copy out frame type
   50 D1:B511 77 -  -  -  		ld 		(hl),a
   51 D1:B512 ED 5B C1 A8 
              D1 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 D1:B517 AF -  -  -  		xor 	a
   53 D1:B518 ED 52 -  -  		sbc 	hl,de
   54 D1:B51A D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 D1:B51B 3E 15 C3 22 
              AC D1 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 D1:B521 -  -  -  -  
   57 D1:B521 -  -  -  -  ; ***************************************************************************************
   58 D1:B521 -  -  -  -  ;
   59 D1:B521 -  -  -  -  ;								Close Stack Frame
   60 D1:B521 -  -  -  -  ;
   61 D1:B521 -  -  -  -  ; ***************************************************************************************
   62 D1:B521 -  -  -  -  
   63 D1:B521 -  -  -  -  StackCloseFrame:
   64 D1:B521 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   65 D1:B525 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 D1:B526 E6 0F -  -  		and 	$0F 						; put into UDE
   67 D1:B528 87 -  -  -  		add 	a,a 						; double it
   68 D1:B529 11 00 00 00 		ld 		de,$000000
   69 D1:B52D 5F -  -  -  		ld 		e,a
   70 D1:B52E 19 -  -  -  		add 	hl,de 						; close it
   71 D1:B52F 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write it back
   72 D1:B533 C9 -  -  -  		ret
   73 D1:B534 -  -  -  -  
   74 D1:B534 -  -  -  -  ; ***************************************************************************************
   75 D1:B534 -  -  -  -  ;
   76 D1:B534 -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 D1:B534 -  -  -  -  ;
   78 D1:B534 -  -  -  -  ; ***************************************************************************************
   79 D1:B534 -  -  -  -  
   80 D1:B534 -  -  -  -  StackCheckFrame:
   81 D1:B534 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   82 D1:B538 BE -  -  -  		cp 		(hl) 						; get stack marker
   83 D1:B539 C9 -  -  -  		ret
   84 D1:B53A -  -  -  -  
   85 D1:B53A -  -  -  -  ; ***************************************************************************************
   86 D1:B53A -  -  -  -  ;
   87 D1:B53A -  -  -  -  ;								Save position on stack
   88 D1:B53A -  -  -  -  ;
   89 D1:B53A -  -  -  -  ; ***************************************************************************************
   90 D1:B53A -  -  -  -  
   91 D1:B53A -  -  -  -  StackSavePosition:
   92 D1:B53A 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 D1:B53E 23 -  -  -  		inc 	hl
   94 D1:B53F ED 5B DD A8 
              D1 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 D1:B544 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 D1:B54A -  -  -  -  		;
   97 D1:B54A E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 D1:B54B DD E5 -  -  		push 	ix 							; HL = current position
   99 D1:B54D E1 -  -  -  		pop 	hl
  100 D1:B54E AF -  -  -  		xor 	a 							; calculate offset
  101 D1:B54F ED 52 -  -  		sbc 	hl,de
  102 D1:B551 7D -  -  -  		ld 		a,l 						; into A
  103 D1:B552 E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 D1:B553 77 -  -  -  		ld 		(hl),a
  105 D1:B554 C9 -  -  -  		ret
  106 D1:B555 -  -  -  -  
  107 D1:B555 -  -  -  -  ; ***************************************************************************************
  108 D1:B555 -  -  -  -  ;
  109 D1:B555 -  -  -  -  ;								Load position off stack
  110 D1:B555 -  -  -  -  ;
  111 D1:B555 -  -  -  -  ; ***************************************************************************************
  112 D1:B555 -  -  -  -  
  113 D1:B555 -  -  -  -  StackLoadPosition:
  114 D1:B555 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 D1:B559 23 -  -  -  		inc 	hl
  116 D1:B55A E5 -  -  -  		push 	hl 							; save on stack
  117 D1:B55B ED 27 -  -  		ld_ind_hl 							; get start of line
  118 D1:B55D 22 DD A8 D1 		ld 		(CurrentLineStart),hl 		; write it back
  119 D1:B561 D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 D1:B562 13 -  -  -  		inc 	de
  121 D1:B563 13 -  -  -  		inc 	de
  122 D1:B564 13 -  -  -  		inc 	de
  123 D1:B565 13 -  -  -  		inc 	de
  124 D1:B566 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 D1:B567 11 00 00 00 		ld 		de,$000000
  126 D1:B56B 5F -  -  -  		ld 		e,a
  127 D1:B56C 19 -  -  -  		add 	hl,de 						; add to start => position
  128 D1:B56D E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 D1:B56E DD E1 -  -  		pop 	ix
  130 D1:B570 C9 -  -  -  		ret
  131 D1:B571 -  -  -  -  
  132 D1:B571 -  -  -  -  ; ***************************************************************************************
  133 D1:B571 -  -  -  -  ;
  134 D1:B571 -  -  -  -  ;									Changes and Updates
  135 D1:B571 -  -  -  -  ;
  136 D1:B571 -  -  -  -  ; ***************************************************************************************
  137 D1:B571 -  -  -  -  ;
  138 D1:B571 -  -  -  -  ;		Date			Notes
  139 D1:B571 -  -  -  -  ;		==== 			=====
  140 D1:B571 -  -  -  -  ;
  141 D1:B571 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 D1:B571 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B571 -  -  -  -  ; ***************************************************************************************
    2 D1:B571 -  -  -  -  ; ***************************************************************************************
    3 D1:B571 -  -  -  -  ;
    4 D1:B571 -  -  -  -  ;		Name : 		utility.asm
    5 D1:B571 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B571 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B571 -  -  -  -  ;		Reviewed :	No
    8 D1:B571 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B571 -  -  -  -  ;
   10 D1:B571 -  -  -  -  ; ***************************************************************************************
   11 D1:B571 -  -  -  -  ; ***************************************************************************************
   12 D1:B571 -  -  -  -  
   13 D1:B571 -  -  -  -  ; ***************************************************************************************
   14 D1:B571 -  -  -  -  ;
   15 D1:B571 -  -  -  -  ;							Print ASCII string at HL
   16 D1:B571 -  -  -  -  ;
   17 D1:B571 -  -  -  -  ; ***************************************************************************************
   18 D1:B571 -  -  -  -  
   19 D1:B571 -  -  -  -  PrintStringAtHL:
   20 D1:B571 7E -  -  -  		ld 		a,(hl)
   21 D1:B572 FE 20 -  -  		cp 		$20		
   22 D1:B574 D8 -  -  -  		ret 	c
   23 D1:B575 CD 60 BC D1 		call 	SYSPrintChar
   24 D1:B579 23 -  -  -  		inc 	hl
   25 D1:B57A 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B57C -  -  -  -  
   27 D1:B57C -  -  -  -  ; ***************************************************************************************
   28 D1:B57C -  -  -  -  ;
   29 D1:B57C -  -  -  -  ;									Changes and Updates
   30 D1:B57C -  -  -  -  ;
   31 D1:B57C -  -  -  -  ; ***************************************************************************************
   32 D1:B57C -  -  -  -  ;
   33 D1:B57C -  -  -  -  ;		Date			Notes
   34 D1:B57C -  -  -  -  ;		==== 			=====
   35 D1:B57C -  -  -  -  ;
   36 D1:B57C -  -  -  -  ; ***************************************************************************************
   37 D1:B57C -  -  -  -  		
Listing for file "_build.asm"
   65 D1:B57C -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B57C -  -  -  -  ; ***************************************************************************************
    2 D1:B57C -  -  -  -  ; ***************************************************************************************
    3 D1:B57C -  -  -  -  ;
    4 D1:B57C -  -  -  -  ;		Name : 		create.asm
    5 D1:B57C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B57C -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B57C -  -  -  -  ;		Reviewed :	No
    8 D1:B57C -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B57C -  -  -  -  ;
   10 D1:B57C -  -  -  -  ; ***************************************************************************************
   11 D1:B57C -  -  -  -  ; ***************************************************************************************
   12 D1:B57C -  -  -  -  
   13 D1:B57C -  -  -  -  ; ***************************************************************************************
   14 D1:B57C -  -  -  -  ;
   15 D1:B57C -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B57C -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B57C -  -  -  -  ;
   18 D1:B57C -  -  -  -  ; ***************************************************************************************
   19 D1:B57C -  -  -  -  
   20 D1:B57C -  -  -  -  VariableCreate:		
   21 D1:B57C -  -  -  -  		;
   22 D1:B57C -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B57C -  -  -  -  		;
   24 D1:B57C 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B580 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B581 E5 -  -  -  		push 	hl 							; save count.
   27 D1:B582 CD 7C B2 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B586 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B587 -  -  -  -  		;
   30 D1:B587 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B587 -  -  -  -  		;
   32 D1:B587 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B588 -  -  -  -  _VCClear:
   34 D1:B588 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B58A 23 -  -  -  		inc 	hl
   36 D1:B58B 0B -  -  -  		dec 	bc
   37 D1:B58C 78 -  -  -  		ld		a,b
   38 D1:B58D B1 -  -  -  		or 		c
   39 D1:B58E 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B590 E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B591 -  -  -  -  		;
   42 D1:B591 -  -  -  -  		;		Now start to create the data.
   43 D1:B591 -  -  -  -  		;
   44 D1:B591 E5 -  -  -  		push 	hl 							; save start
   45 D1:B592 -  -  -  -  		;
   46 D1:B592 -  -  -  -  		;		Write hash to +0
   47 D1:B592 -  -  -  -  		;
   48 D1:B592 3A 09 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B596 77 -  -  -  		ld 		(hl),a
   50 D1:B597 23 -  -  -  		inc 	hl
   51 D1:B598 -  -  -  -  		;
   52 D1:B598 -  -  -  -  		;		Write list head to +1
   53 D1:B598 -  -  -  -  		;
   54 D1:B598 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B599 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B59D ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B59F EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B5A0 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B5A1 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B5A7 -  -  -  -  		;
   61 D1:B5A7 -  -  -  -  		;		Write variable name to +5
   62 D1:B5A7 -  -  -  -  		;
   63 D1:B5A7 ED 5B 05 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B5AC ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B5B2 -  -  -  -  		;
   66 D1:B5B2 D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B5B3 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B5B7 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B5BD -  -  -  -  		;
   70 D1:B5BD EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B5BE C9 -  -  -  		ret
   72 D1:B5BF -  -  -  -  
   73 D1:B5BF -  -  -  -  ; ***************************************************************************************
   74 D1:B5BF -  -  -  -  ;
   75 D1:B5BF -  -  -  -  ;									Changes and Updates
   76 D1:B5BF -  -  -  -  ;
   77 D1:B5BF -  -  -  -  ; ***************************************************************************************
   78 D1:B5BF -  -  -  -  ;
   79 D1:B5BF -  -  -  -  ;		Date			Notes
   80 D1:B5BF -  -  -  -  ;		==== 			=====
   81 D1:B5BF -  -  -  -  ;
   82 D1:B5BF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B5BF -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B5BF -  -  -  -  ; ***************************************************************************************
    2 D1:B5BF -  -  -  -  ; ***************************************************************************************
    3 D1:B5BF -  -  -  -  ;
    4 D1:B5BF -  -  -  -  ;		Name : 		find.asm
    5 D1:B5BF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5BF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5BF -  -  -  -  ;		Reviewed :	No
    8 D1:B5BF -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B5BF -  -  -  -  ;
   10 D1:B5BF -  -  -  -  ; ***************************************************************************************
   11 D1:B5BF -  -  -  -  ; ***************************************************************************************
   12 D1:B5BF -  -  -  -  
   13 D1:B5BF -  -  -  -  ; ***************************************************************************************
   14 D1:B5BF -  -  -  -  ;
   15 D1:B5BF -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B5BF -  -  -  -  ; 		variable information at (IX)
   17 D1:B5BF -  -  -  -  ;
   18 D1:B5BF -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B5BF -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B5BF -  -  -  -  ;
   21 D1:B5BF -  -  -  -  ; ***************************************************************************************
   22 D1:B5BF -  -  -  -  
   23 D1:B5BF -  -  -  -  FindVariable:
   24 D1:B5BF DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B5C2 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B5C4 D2 8C AC D1 		jp 		nc,SyntaxError 		
   27 D1:B5C8 -  -  -  -  
   28 D1:B5C8 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B5CB FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B5CD 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B5CF FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B5D1 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B5D3 -  -  -  -  		;
   34 D1:B5D3 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B5D3 -  -  -  -  		;
   36 D1:B5D3 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B5D7 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B5DA 87 -  -  -  		add 	a,a 						; x4
   39 D1:B5DB 87 -  -  -  		add 	a,a
   40 D1:B5DC B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B5DD 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B5DE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B5E0 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B5E2 DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B5E4 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B5E5 C9 -  -  -  		ret
   47 D1:B5E6 -  -  -  -  		;
   48 D1:B5E6 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B5E6 -  -  -  -  		;
   50 D1:B5E6 -  -  -  -  _FVNotSimple:
   51 D1:B5E6 CD 4C B6 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B5EA CD 88 B6 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B5EE 38 14 -  -  		jr 		c,_FVNotFound  				
   54 D1:B5F0 -  -  -  -  		;
   55 D1:B5F0 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B5F0 -  -  -  -  		;
   57 D1:B5F0 -  -  -  -  _FVExitReference:		
   58 D1:B5F0 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B5F4 19 -  -  -  		add 	hl,de 
   60 D1:B5F5 -  -  -  -  		;
   61 D1:B5F5 -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 D1:B5F5 -  -  -  -  		;
   63 D1:B5F5 DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 D1:B5F8 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 D1:B5FA CC 23 B6 D1 		call 	z,ArrayLookup 				; array access required.
   66 D1:B5FE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 D1:B600 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 D1:B602 AF -  -  -  		xor 	a 							; clear carry and return
   69 D1:B603 C9 -  -  -  		ret
   70 D1:B604 -  -  -  -  		;
   71 D1:B604 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 D1:B604 -  -  -  -  		;
   73 D1:B604 -  -  -  -  _FVNotFound:		
   74 D1:B604 3A 01 A9 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 D1:B608 B7 -  -  -  		or 		a
   76 D1:B609 28 11 -  -  		jr 		z,_FVFail
   77 D1:B60B DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 D1:B60E FE 95 -  -  		cp 		KWD_LPAREN 		
   79 D1:B610 28 0A -  -  		jr 		z,_FVFail
   80 D1:B612 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 D1:B616 CD 7C B5 D1 		call 	VariableCreate 				; create a new variable.
   82 D1:B61A 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 D1:B61C -  -  -  -  
   84 D1:B61C -  -  -  -  _FVFail:
   85 D1:B61C DD 2A 05 A9 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 D1:B621 37 -  -  -  		scf
   87 D1:B622 C9 -  -  -  		ret
   88 D1:B623 -  -  -  -  
   89 D1:B623 -  -  -  -  ; ***************************************************************************************
   90 D1:B623 -  -  -  -  ;
   91 D1:B623 -  -  -  -  ;									 Array lookup
   92 D1:B623 -  -  -  -  ;
   93 D1:B623 -  -  -  -  ; ***************************************************************************************
   94 D1:B623 -  -  -  -  
   95 D1:B623 -  -  -  -  ArrayLookup:
   96 D1:B623 E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 D1:B624 CD 2F AE D1 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 D1:B628 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 D1:B629 7C -  -  -  		ld 		a,h
  100 D1:B62A B5 -  -  -  		or 		l
  101 D1:B62B D9 -  -  -  		exx
  102 D1:B62C 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 D1:B62E 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 D1:B632 54 -  -  -  		ld 		d,h
  105 D1:B633 5D -  -  -  		ld 		e,l
  106 D1:B634 E1 -  -  -  		pop 	hl 							; get the array base back
  107 D1:B635 E5 -  -  -  		push 	hl
  108 D1:B636 ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 D1:B638 AF -  -  -  		xor  	a							; subtract maximum from index
  110 D1:B639 ED 52 -  -  		sbc 	hl,de
  111 D1:B63B DA 46 B6 D1 		jp 		c,_ALBadValue 				; if max < index then error
  112 D1:B63F EB -  -  -  		ex 		de,hl 						; index back into HL
  113 D1:B640 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 D1:B641 29 -  -  -  		add 	hl,hl 						; x 4
  115 D1:B642 29 -  -  -  		add 	hl,hl
  116 D1:B643 D1 -  -  -  		pop 	de 							; get array base back
  117 D1:B644 19 -  -  -  		add 	hl,de 						; add offset to it
  118 D1:B645 C9 -  -  -  		ret
  119 D1:B646 -  -  -  -  
  120 D1:B646 -  -  -  -  _ALBadValue:
  121 D1:B646 3E 08 C3 22 
              AC D1 -  -  		ERR_INDEX
  122 D1:B64C -  -  -  -  		
  123 D1:B64C -  -  -  -  ; ***************************************************************************************
  124 D1:B64C -  -  -  -  ;
  125 D1:B64C -  -  -  -  ;									Changes and Updates
  126 D1:B64C -  -  -  -  ;
  127 D1:B64C -  -  -  -  ; ***************************************************************************************
  128 D1:B64C -  -  -  -  ;
  129 D1:B64C -  -  -  -  ;		Date			Notes
  130 D1:B64C -  -  -  -  ;		==== 			=====
  131 D1:B64C -  -  -  -  ;
  132 D1:B64C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B64C -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B64C -  -  -  -  ; ***************************************************************************************
    2 D1:B64C -  -  -  -  ; ***************************************************************************************
    3 D1:B64C -  -  -  -  ;
    4 D1:B64C -  -  -  -  ;		Name : 		info.asm
    5 D1:B64C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B64C -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B64C -  -  -  -  ;		Reviewed :	No
    8 D1:B64C -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B64C -  -  -  -  ;
   10 D1:B64C -  -  -  -  ; ***************************************************************************************
   11 D1:B64C -  -  -  -  ; ***************************************************************************************
   12 D1:B64C -  -  -  -  
   13 D1:B64C -  -  -  -  ; ***************************************************************************************
   14 D1:B64C -  -  -  -  ;
   15 D1:B64C -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B64C -  -  -  -  ; 		after the identifier.
   17 D1:B64C -  -  -  -  ;
   18 D1:B64C -  -  -  -  ; ***************************************************************************************
   19 D1:B64C -  -  -  -  
   20 D1:B64C -  -  -  -  VariableInformation:
   21 D1:B64C DD 22 05 A9 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B651 -  -  -  -  		;
   23 D1:B651 -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B651 -  -  -  -  		;
   25 D1:B651 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B653 -  -  -  -  _VICalculateHash:
   27 D1:B653 DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B656 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B658 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B65A 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B65B 07 -  -  -  		rlca
   32 D1:B65C 07 -  -  -  		rlca
   33 D1:B65D 80 -  -  -  		add 	a,b
   34 D1:B65E 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B65F DD 23 -  -  		inc 	ix 							; next character
   36 D1:B661 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B663 -  -  -  -  		;
   38 D1:B663 -  -  -  -  _VIHashDone:
   39 D1:B663 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B664 -  -  -  -  		;
   41 D1:B664 -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B664 -  -  -  -  		;
   43 D1:B664 32 09 A9 D1 		ld 		(VarHash),a
   44 D1:B668 -  -  -  -  		;
   45 D1:B668 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B668 -  -  -  -  		;		
   47 D1:B668 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B66A 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B66E 6F -  -  -  		ld 		l,a
   50 D1:B66F 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B670 29 -  -  -  		add 	hl,hl
   52 D1:B671 -  -  -  -  		;
   53 D1:B671 ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B676 19 -  -  -  		add 	hl,de
   55 D1:B677 -  -  -  -  		;
   56 D1:B677 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B67A FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B67C 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B67E 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B682 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B683 -  -  -  -  _VINotArray:
   62 D1:B683 22 0B A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B687 C9 -  -  -  		ret
   64 D1:B688 -  -  -  -  
   65 D1:B688 -  -  -  -  ; ***************************************************************************************
   66 D1:B688 -  -  -  -  ;
   67 D1:B688 -  -  -  -  ;									Changes and Updates
   68 D1:B688 -  -  -  -  ;
   69 D1:B688 -  -  -  -  ; ***************************************************************************************
   70 D1:B688 -  -  -  -  ;
   71 D1:B688 -  -  -  -  ;		Date			Notes
   72 D1:B688 -  -  -  -  ;		==== 			=====
   73 D1:B688 -  -  -  -  ;
   74 D1:B688 -  -  -  -  ; ***************************************************************************************
   75 D1:B688 -  -  -  -  
Listing for file "_build.asm"
   68 D1:B688 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B688 -  -  -  -  ; ***************************************************************************************
    2 D1:B688 -  -  -  -  ; ***************************************************************************************
    3 D1:B688 -  -  -  -  ;
    4 D1:B688 -  -  -  -  ;		Name : 		search.asm
    5 D1:B688 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B688 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B688 -  -  -  -  ;		Reviewed :	No
    8 D1:B688 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B688 -  -  -  -  ;
   10 D1:B688 -  -  -  -  ; ***************************************************************************************
   11 D1:B688 -  -  -  -  ; ***************************************************************************************
   12 D1:B688 -  -  -  -  
   13 D1:B688 -  -  -  -  ; ***************************************************************************************
   14 D1:B688 -  -  -  -  ;
   15 D1:B688 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B688 -  -  -  -  ;		CS if failed.
   17 D1:B688 -  -  -  -  ;
   18 D1:B688 -  -  -  -  ; ***************************************************************************************
   19 D1:B688 -  -  -  -  
   20 D1:B688 -  -  -  -  VariableSearchList:
   21 D1:B688 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B68C -  -  -  -  		;
   23 D1:B68C -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B68C -  -  -  -  		;		the address of the hash record
   25 D1:B68C -  -  -  -  		;
   26 D1:B68C -  -  -  -  _VSLLoop:
   27 D1:B68C ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B68E -  -  -  -  		;
   29 D1:B68E E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B68F AF -  -  -  		xor 	a
   31 D1:B690 ED 6A -  -  		adc 	hl,hl
   32 D1:B692 E1 -  -  -  		pop 	hl
   33 D1:B693 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B695 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B696 C8 -  -  -  		ret 	z
   36 D1:B697 -  -  -  -  _VSLRecord:
   37 D1:B697 -  -  -  -  		;
   38 D1:B697 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B697 -  -  -  -  		;
   40 D1:B697 3A 09 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B69B BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B69C 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B69D 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B69F -  -  -  -  		;
   45 D1:B69F -  -  -  -  		;		Now check the name
   46 D1:B69F -  -  -  -  		;
   47 D1:B69F E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B6A0 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B6A1 23 -  -  -  		inc 	hl
   50 D1:B6A2 23 -  -  -  		inc 	hl
   51 D1:B6A3 23 -  -  -  		inc 	hl
   52 D1:B6A4 ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B6A6 ED 5B 05 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B6AB -  -  -  -  		;
   55 D1:B6AB -  -  -  -  		;		Check individual characters
   56 D1:B6AB -  -  -  -  		;
   57 D1:B6AB -  -  -  -  _VSLCharacter:
   58 D1:B6AB 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B6AC FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B6AE 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B6B0 BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B6B1 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B6B2 13 -  -  -  		inc 	de
   64 D1:B6B3 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B6B5 -  -  -  -  		;
   66 D1:B6B5 -  -  -  -  _VSLFailed:
   67 D1:B6B5 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B6B6 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B6B8 -  -  -  -  		;
   70 D1:B6B8 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B6B8 -  -  -  -  		;		
   72 D1:B6B8 -  -  -  -  _VSLEndIdentifier:
   73 D1:B6B8 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B6B9 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B6BB 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B6BD -  -  -  -  		;
   77 D1:B6BD E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B6BE 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B6BF AF -  -  -  		xor 	a 							; clear carry
   80 D1:B6C0 C9 -  -  -  		ret
   81 D1:B6C1 -  -  -  -  
   82 D1:B6C1 -  -  -  -  ; ***************************************************************************************
   83 D1:B6C1 -  -  -  -  ;
   84 D1:B6C1 -  -  -  -  ;									Changes and Updates
   85 D1:B6C1 -  -  -  -  ;
   86 D1:B6C1 -  -  -  -  ; ***************************************************************************************
   87 D1:B6C1 -  -  -  -  ;
   88 D1:B6C1 -  -  -  -  ;		Date			Notes
   89 D1:B6C1 -  -  -  -  ;		==== 			=====
   90 D1:B6C1 -  -  -  -  ;
   91 D1:B6C1 -  -  -  -  ; ***************************************************************************************
   92 D1:B6C1 -  -  -  -  		
Listing for file "_build.asm"
   69 D1:B6C1 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B6C1 -  -  -  -  ;
    2 D1:B6C1 -  -  -  -  ;	This file is automatically generated.
    3 D1:B6C1 -  -  -  -  ;
    4 D1:B6C1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  	.block	$20-($ & $1F)
    5 D1:B6E0 -  -  -  -  PrecedenceTable:
    6 D1:B6E0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B6E1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B6E2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B6E3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B6E4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B6E5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B6E6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B6E7 04 -  -  -  	.db	4	; $008a -
   14 D1:B6E8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B6E9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B6EA 03 -  -  -  	.db	3	; $008d >
   17 D1:B6EB 03 -  -  -  	.db	3	; $008e <
   18 D1:B6EC 03 -  -  -  	.db	3	; $008f =
   19 D1:B6ED 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B6EE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B6EF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B6F0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B6F1 -  -  -  -  
Listing for file "_build.asm"
   70 D1:B6F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B6F1 -  -  -  -  ;
    2 D1:B6F1 -  -  -  -  ;	This is automatically generated.
    3 D1:B6F1 -  -  -  -  ;
    4 D1:B6F1 -  -  -  -  ErrorIDTable:
    5 D1:B6F1 59 B7 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B6F5 5F B7 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B6F9 70 B7 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B6FD 7E B7 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B701 88 B7 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B705 92 B7 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B709 AC B7 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B70D BD B7 D1 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   13 D1:B711 D2 B7 D1 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   14 D1:B715 E2 B7 D1 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   15 D1:B719 F7 B7 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   16 D1:B71D 05 B8 D1 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   17 D1:B721 16 B8 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   18 D1:B725 24 B8 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   19 D1:B729 2E B8 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   20 D1:B72D 43 B8 D1 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   21 D1:B731 58 B8 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   22 D1:B735 6E B8 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   23 D1:B739 7C B8 D1 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   24 D1:B73D 8F B8 D1 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   25 D1:B741 A1 B8 D1 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   26 D1:B745 B6 B8 D1 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   27 D1:B749 C2 B8 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   28 D1:B74D C7 B8 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   29 D1:B751 D4 B8 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   30 D1:B755 E5 B8 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   31 D1:B759 -  -  -  -  
   32 D1:B759 -  -  -  -  ErrText_warmstart:
   33 D1:B759 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   34 D1:B75F -  -  -  -  ErrText_assert:
   35 D1:B75F 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   36 D1:B770 -  -  -  -  ErrText_badtype:
   37 D1:B770 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   38 D1:B77E -  -  -  -  ErrText_badvalue:
   39 D1:B77E 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   40 D1:B788 -  -  -  -  ErrText_dim:
   41 D1:B788 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   42 D1:B792 -  -  -  -  ErrText_disabled:
   43 D1:B792 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   44 D1:B7AC -  -  -  -  ErrText_divzero:
   45 D1:B7AC 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   46 D1:B7BD -  -  -  -  ErrText_gosub:
   47 D1:B7BD 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   48 D1:B7D2 -  -  -  -  ErrText_index:
   49 D1:B7D2 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   50 D1:B7E2 -  -  -  -  ErrText_lineno:
   51 D1:B7E2 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   52 D1:B7F7 -  -  -  -  ErrText_memory:
   53 D1:B7F7 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   54 D1:B805 -  -  -  -  ErrText_next:
   55 D1:B805 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   56 D1:B816 -  -  -  -  ErrText_nocomma:
   57 D1:B816 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   58 D1:B824 -  -  -  -  ErrText_nodollar:
   59 D1:B824 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   60 D1:B82E -  -  -  -  ErrText_nolbracket:
   61 D1:B82E 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   62 D1:B843 -  -  -  -  ErrText_noproc:
   63 D1:B843 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   64 D1:B858 -  -  -  -  ErrText_norbracket:
   65 D1:B858 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   66 D1:B86E -  -  -  -  ErrText_notref:
   67 D1:B86E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   68 D1:B87C -  -  -  -  ErrText_param:
   69 D1:B87C 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   70 D1:B88F -  -  -  -  ErrText_proc:
   71 D1:B88F 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   72 D1:B8A1 -  -  -  -  ErrText_repeat:
   73 D1:B8A1 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   74 D1:B8B6 -  -  -  -  ErrText_stack:
   75 D1:B8B6 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   76 D1:B8C2 -  -  -  -  ErrText_stop:
   77 D1:B8C2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   78 D1:B8C7 -  -  -  -  ErrText_syntax:
   79 D1:B8C7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   80 D1:B8D4 -  -  -  -  ErrText_todo:
   81 D1:B8D4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   82 D1:B8E5 -  -  -  -  ErrText_unknownvar:
   83 D1:B8E5 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   71 D1:B8F6 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B8F6 -  -  -  -  ;
    2 D1:B8F6 -  -  -  -  ;	Vectors for set 0
    3 D1:B8F6 -  -  -  -  ;
    4 D1:B8F6 -  -  -  -  VectorsSet0:
    5 D1:B8F6 2D AA D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B8FA A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B8FE A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B902 02 AD D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B906 0B AD D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B90A AE AC D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B90E BC AC D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B912 CA AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B916 BC AC D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B91A 92 AC D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B91E A0 AC D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B922 69 AD D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B926 5F AD D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B92A 4B AD D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B92E 41 AD D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B932 37 AD D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B936 55 AD D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B93A D8 AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B93E E6 AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B942 F4 AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B946 DB B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B94A D3 B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B94E F5 AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B952 22 B0 D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B956 E4 AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B95A BA AF D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B95E B9 B0 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B962 EA B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B966 D0 AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B96A C7 AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B96E 00 B0 D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B972 15 B0 D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B976 12 B1 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B97A 19 B1 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B97E 26 B1 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B982 29 AD D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B986 2D AD D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B98A 72 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B98E 72 A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B992 76 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B996 72 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B99A 14 AB D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B99E 72 A9 D1 00 	addr(BadCmd_LSBracket)           ; $00aa [
   48 D1:B9A2 72 A9 D1 00 	addr(BadCmd_RSBracket)           ; $00ab ]
   49 D1:B9A6 72 A9 D1 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 D1:B9AA AC B4 D1 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 D1:B9AE B7 B4 D1 00 	addr(Command_Until)              ; $00ae until
   52 D1:B9B2 72 B4 D1 00 	addr(Command_IF)                 ; $00af if
   53 D1:B9B6 72 A9 D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:B9BA A8 B4 D1 00 	addr(Command_Else)               ; $00b1 else
   55 D1:B9BE 0E B3 D1 00 	addr(Command_FOR)                ; $00b2 for
   56 D1:B9C2 72 A9 D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:B9C6 72 A9 D1 00 	addr(BadCmd_Step)                ; $00b4 step
   58 D1:B9CA A4 B3 D1 00 	addr(Command_Next)               ; $00b5 next
   59 D1:B9CE 72 A9 D1 00 	addr(BadCmd_Def)                 ; $00b6 def
   60 D1:B9D2 AE B1 D1 00 	addr(Command_PROC)               ; $00b7 proc
   61 D1:B9D6 08 B2 D1 00 	addr(Command_ENDPROC)            ; $00b8 endproc
   62 D1:B9DA FF B3 D1 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 D1:B9DE 14 B4 D1 00 	addr(Command_Return)             ; $00ba return
   64 D1:B9E2 2B B4 D1 00 	addr(Command_GOTO)               ; $00bb goto
   65 D1:B9E6 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc local
   66 D1:B9EA 77 A9 D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:B9EE 14 AB D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:B9F2 44 AA D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:B9F6 AA AB D1 00 	addr(Command_VDU)                ; $00c0 vdu
   70 D1:B9FA A9 AA D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:B9FE A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:BA02 A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:BA06 A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 list
   74 D1:BA0A FE B2 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:BA0E 31 AB D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:BA12 A5 A8 D1 00 	addr(Unimplemented)              ; $00c7 read
   77 D1:BA16 A5 A8 D1 00 	addr(Unimplemented)              ; $00c8 data
   78 D1:BA1A A5 A8 D1 00 	addr(Unimplemented)              ; $00c9 restore
   79 D1:BA1E 61 A9 D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:BA22 9E B2 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:BA26 27 AA D1 00 	addr(Command_END)                ; $00cc end
   82 D1:BA2A A4 AB D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:BA2E -  -  -  -  ;
   84 D1:BA2E -  -  -  -  ;	Vectors for set 1
   85 D1:BA2E -  -  -  -  ;
   86 D1:BA2E -  -  -  -  VectorsSet1:
   87 D1:BA2E -  -  -  -  ;
   88 D1:BA2E -  -  -  -  ;	Vectors for set 2
   89 D1:BA2E -  -  -  -  ;
   90 D1:BA2E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   72 D1:BA2E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:BA2E -  -  -  -  ; ***************************************************************************************
    2 D1:BA2E -  -  -  -  ; ***************************************************************************************
    3 D1:BA2E -  -  -  -  ;
    4 D1:BA2E -  -  -  -  ;		Name : 		idivide.asm
    5 D1:BA2E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BA2E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BA2E -  -  -  -  ;		Reviewed :	No
    8 D1:BA2E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:BA2E -  -  -  -  ;
   10 D1:BA2E -  -  -  -  ; ***************************************************************************************
   11 D1:BA2E -  -  -  -  ; ***************************************************************************************
   12 D1:BA2E -  -  -  -  
   13 D1:BA2E -  -  -  -  ; ***************************************************************************************
   14 D1:BA2E -  -  -  -  ;
   15 D1:BA2E -  -  -  -  ;								Unsigned integer divide
   16 D1:BA2E -  -  -  -  ;
   17 D1:BA2E -  -  -  -  ; ***************************************************************************************
   18 D1:BA2E -  -  -  -  
   19 D1:BA2E -  -  -  -  Int32UDivide:
   20 D1:BA2E 37 -  -  -  		scf
   21 D1:BA2F C3 73 BA D1 		jp 		_I32UnsignedDivide		
   22 D1:BA33 -  -  -  -  
   23 D1:BA33 -  -  -  -  ; ***************************************************************************************
   24 D1:BA33 -  -  -  -  ;
   25 D1:BA33 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:BA33 -  -  -  -  ;
   27 D1:BA33 -  -  -  -  ; ***************************************************************************************
   28 D1:BA33 -  -  -  -  
   29 D1:BA33 -  -  -  -  Int32SDivide:
   30 D1:BA33 37 -  -  -  		scf
   31 D1:BA34 18 01 -  -  		jr 		_I32SDivide
   32 D1:BA36 -  -  -  -  Int32Modulus:
   33 D1:BA36 AF -  -  -  		xor 	a
   34 D1:BA37 -  -  -  -  _I32SDivide:
   35 D1:BA37 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:BA38 F5 -  -  -  		push 	af
   37 D1:BA39 08 -  -  -  		ex 		af,af'
   38 D1:BA3A -  -  -  -  
   39 D1:BA3A D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:BA3B D9 -  -  -  		exx
   41 D1:BA3C D5 -  -  -  		push 	de
   42 D1:BA3D D9 -  -  -  		exx
   43 D1:BA3E -  -  -  -  
   44 D1:BA3E F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:BA3F AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:BA40 CD 60 BA D1 		call 	_I32CheckHLSignSwap
   47 D1:BA44 CD 60 BA D1 		call 	_I32CheckHLSignSwap
   48 D1:BA48 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:BA49 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:BA4A F5 -  -  -  		push 	af
   51 D1:BA4B CD 73 BA D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:BA4F F1 -  -  -  		pop 	af 							; get function back
   53 D1:BA50 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:BA52 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:BA53 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:BA55 C4 D6 BB D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:BA59 -  -  -  -  _I32SDExit:
   58 D1:BA59 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:BA5A D1 -  -  -  		pop 	de
   60 D1:BA5B D9 -  -  -  		exx
   61 D1:BA5C D1 -  -  -  		pop 	de
   62 D1:BA5D F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:BA5E 08 -  -  -  		ex 		af,af'
   64 D1:BA5F C9 -  -  -  		ret
   65 D1:BA60 -  -  -  -  
   66 D1:BA60 -  -  -  -  
   67 D1:BA60 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:BA60 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:BA61 CB 7C -  -  		bit 	7,h
   70 D1:BA63 D9 -  -  -  		exx
   71 D1:BA64 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:BA66 -  -  -  -  		;
   73 D1:BA66 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:BA68 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:BA69 CD D6 BB D1 		call 	Int32Negate 				
   76 D1:BA6D F1 -  -  -  		pop 	af
   77 D1:BA6E -  -  -  -  _I32CHSPositive:
   78 D1:BA6E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:BA6F EB -  -  -  		ex 		de,hl
   80 D1:BA70 D9 -  -  -  		exx		
   81 D1:BA71 EB -  -  -  		ex 		de,hl
   82 D1:BA72 C9 -  -  -  		ret
   83 D1:BA73 -  -  -  -  
   84 D1:BA73 -  -  -  -  ; ***************************************************************************************
   85 D1:BA73 -  -  -  -  ;
   86 D1:BA73 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:BA73 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:BA73 -  -  -  -  ;
   89 D1:BA73 -  -  -  -  ; ***************************************************************************************
   90 D1:BA73 -  -  -  -  
   91 D1:BA73 -  -  -  -  _I32UnsignedDivide:
   92 D1:BA73 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:BA74 D5 -  -  -  		push 	de
   94 D1:BA75 D9 -  -  -  		exx
   95 D1:BA76 C5 -  -  -  		push 	bc
   96 D1:BA77 D5 -  -  -  		push 	de 							
   97 D1:BA78 D9 -  -  -  		exx
   98 D1:BA79 -  -  -  -  
   99 D1:BA79 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:BA7A -  -  -  -  
  101 D1:BA7A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:BA7B B3 -  -  -  		or 		e
  103 D1:BA7C D9 -  -  -  		exx
  104 D1:BA7D B2 -  -  -  		or 		d
  105 D1:BA7E B3 -  -  -  		or 		e
  106 D1:BA7F D9 -  -  -  		exx
  107 D1:BA80 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:BA84 -  -  -  -  
  109 D1:BA84 -  -  -  -  
  110 D1:BA84 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:BA85 4D -  -  -  		ld		c,l
  112 D1:BA86 21 00 00 00 		ld 		hl,$0000
  113 D1:BA8A D9 -  -  -  		exx
  114 D1:BA8B 44 -  -  -  		ld 		b,h
  115 D1:BA8C 4D -  -  -  		ld		c,l
  116 D1:BA8D 21 00 00 00 		ld 		hl,$0000
  117 D1:BA91 D9 -  -  -  		exx
  118 D1:BA92 -  -  -  -  
  119 D1:BA92 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:BA94 -  -  -  -  _I32DivideLoop:
  121 D1:BA94 F5 -  -  -  		push 	af
  122 D1:BA95 -  -  -  -  
  123 D1:BA95 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:BA97 CB 10 -  -  		rl 		b
  125 D1:BA99 D9 -  -  -  		exx
  126 D1:BA9A CB 11 -  -  		rl 		c
  127 D1:BA9C CB 10 -  -  		rl 		b
  128 D1:BA9E D9 -  -  -  		exx
  129 D1:BA9F CB 15 -  -  		rl 		l
  130 D1:BAA1 CB 14 -  -  		rl 		h
  131 D1:BAA3 D9 -  -  -  		exx
  132 D1:BAA4 CB 15 -  -  		rl 		l
  133 D1:BAA6 CB 14 -  -  		rl 		h
  134 D1:BAA8 D9 -  -  -  		exx
  135 D1:BAA9 -  -  -  -  
  136 D1:BAA9 CD 74 BB D1 		call 	Int32Subtract 				; A = A - M
  137 D1:BAAD 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:BAAF -  -  -  -  
  139 D1:BAAF 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:BAB0 18 04 -  -  		jr 		_I32Next
  141 D1:BAB2 -  -  -  -  
  142 D1:BAB2 -  -  -  -  _I32Borrow:
  143 D1:BAB2 CD 6C BB D1 		call 	Int32Add 					; A = A + M
  144 D1:BAB6 -  -  -  -  _I32Next:
  145 D1:BAB6 F1 -  -  -  		pop 	af
  146 D1:BAB7 3D -  -  -  		dec 	a
  147 D1:BAB8 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:BABA -  -  -  -  
  149 D1:BABA F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:BABB -  -  -  -  
  151 D1:BABB 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:BABC 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:BABE -  -  -  -  
  154 D1:BABE 60 -  -  -  		ld  	h,b
  155 D1:BABF 69 -  -  -  		ld 		l,c
  156 D1:BAC0 D9 -  -  -  		exx
  157 D1:BAC1 60 -  -  -  		ld  	h,b
  158 D1:BAC2 69 -  -  -  		ld 		l,c
  159 D1:BAC3 D9 -  -  -  		exx
  160 D1:BAC4 -  -  -  -  _I32Modulus1:		
  161 D1:BAC4 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:BAC5 D1 -  -  -  		pop 	de
  163 D1:BAC6 C1 -  -  -  		pop 	bc
  164 D1:BAC7 D9 -  -  -  		exx
  165 D1:BAC8 D1 -  -  -  		pop 	de
  166 D1:BAC9 C1 -  -  -  		pop 	bc
  167 D1:BACA C9 -  -  -  		ret
  168 D1:BACB -  -  -  -  
  169 D1:BACB -  -  -  -  ; ***************************************************************************************
  170 D1:BACB -  -  -  -  ;
  171 D1:BACB -  -  -  -  ;									Changes and Updates
  172 D1:BACB -  -  -  -  ;
  173 D1:BACB -  -  -  -  ; ***************************************************************************************
  174 D1:BACB -  -  -  -  ;
  175 D1:BACB -  -  -  -  ;		Date			Notes
  176 D1:BACB -  -  -  -  ;		==== 			=====
  177 D1:BACB -  -  -  -  ;
  178 D1:BACB -  -  -  -  ; ***************************************************************************************
  179 D1:BACB -  -  -  -  		
Listing for file "_build.asm"
   73 D1:BACB -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:BACB -  -  -  -  ; ***************************************************************************************
    2 D1:BACB -  -  -  -  ; ***************************************************************************************
    3 D1:BACB -  -  -  -  ;
    4 D1:BACB -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:BACB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BACB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BACB -  -  -  -  ;		Reviewed :	No
    8 D1:BACB -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:BACB -  -  -  -  ;
   10 D1:BACB -  -  -  -  ; ***************************************************************************************
   11 D1:BACB -  -  -  -  ; ***************************************************************************************
   12 D1:BACB -  -  -  -  
   13 D1:BACB -  -  -  -  ; ***************************************************************************************
   14 D1:BACB -  -  -  -  ;
   15 D1:BACB -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:BACB -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:BACB -  -  -  -  ;
   18 D1:BACB -  -  -  -  ; ***************************************************************************************
   19 D1:BACB -  -  -  -  
   20 D1:BACB -  -  -  -  Int32FromString:
   21 D1:BACB C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:BACC D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:BACD D5 -  -  -  		push 	de
   24 D1:BACE D9 -  -  -  		exx
   25 D1:BACF D5 -  -  -  		push 	de
   26 D1:BAD0 -  -  -  -  
   27 D1:BAD0 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:BAD4 11 00 00 00 		ld 		de,$0000
   29 D1:BAD8 D9 -  -  -  		exx
   30 D1:BAD9 21 00 00 00 		ld 		hl,$0000
   31 D1:BADD 11 00 00 00 		ld 		de,$0000
   32 D1:BAE1 D9 -  -  -  		exx
   33 D1:BAE2 -  -  -  -  
   34 D1:BAE2 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:BAE3 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:BAE5 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:BAE7 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:BAE9 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:BAEA -  -  -  -  		;
   40 D1:BAEA 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:BAEB F5 -  -  -  		push 	af
   42 D1:BAEC FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:BAEE 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:BAEF 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:BAF1 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:BAF2 18 01 -  -  		jr 		_I32FSMain
   47 D1:BAF4 -  -  -  -  _I32FSNotSigned:		
   48 D1:BAF4 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:BAF5 -  -  -  -  		;
   50 D1:BAF5 -  -  -  -  		; 		Main conversion loop.
   51 D1:BAF5 -  -  -  -  		; 		
   52 D1:BAF5 -  -  -  -  _I32FSMain:		
   53 D1:BAF5 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:BAF6 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:BAF8 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:BAFA D6 20 -  -  		sub 	32
   57 D1:BAFC -  -  -  -  _I32FSNotLower:
   58 D1:BAFC FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:BAFE 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:BB00 FE 3A -  -  		cp 		'9'+1
   61 D1:BB02 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:BB04 FE 41 -  -  		cp 		'A'
   63 D1:BB06 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:BB08 FE 47 -  -  		cp 		'F'+1
   65 D1:BB0A 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:BB0C D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:BB0E -  -  -  -  _I32FSOkay:
   68 D1:BB0E D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:BB10 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:BB11 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:BB13 03 -  -  -  		inc 	bc 							; consume character
   72 D1:BB14 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:BB15 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:BB16 CD 33 BB D1 		call 	Int32Multiply 				; result *= base
   75 D1:BB1A F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:BB1B 5F -  -  -  		ld 		e,a
   77 D1:BB1C CD 6C BB D1 		call 	Int32Add 					; and add it.
   78 D1:BB20 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:BB21 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:BB23 -  -  -  -  
   81 D1:BB23 -  -  -  -  _I32FSExit:
   82 D1:BB23 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:BB24 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:BB26 CC D6 BB D1 		call 	z,Int32Negate
   85 D1:BB2A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:BB2B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:BB2C D9 -  -  -  		exx
   88 D1:BB2D D1 -  -  -  		pop 	de
   89 D1:BB2E D9 -  -  -  		exx
   90 D1:BB2F C1 -  -  -  		pop 	bc
   91 D1:BB30 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:BB32 C9 -  -  -  		ret				
   93 D1:BB33 -  -  -  -  
   94 D1:BB33 -  -  -  -  ; ***************************************************************************************
   95 D1:BB33 -  -  -  -  ;
   96 D1:BB33 -  -  -  -  ;									Changes and Updates
   97 D1:BB33 -  -  -  -  ;
   98 D1:BB33 -  -  -  -  ; ***************************************************************************************
   99 D1:BB33 -  -  -  -  ;
  100 D1:BB33 -  -  -  -  ;		Date			Notes
  101 D1:BB33 -  -  -  -  ;		==== 			=====
  102 D1:BB33 -  -  -  -  ;
  103 D1:BB33 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   74 D1:BB33 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:BB33 -  -  -  -  ; ***************************************************************************************
    2 D1:BB33 -  -  -  -  ; ***************************************************************************************
    3 D1:BB33 -  -  -  -  ;
    4 D1:BB33 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:BB33 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BB33 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BB33 -  -  -  -  ;		Reviewed :	No
    8 D1:BB33 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:BB33 -  -  -  -  ;
   10 D1:BB33 -  -  -  -  ; ***************************************************************************************
   11 D1:BB33 -  -  -  -  ; ***************************************************************************************
   12 D1:BB33 -  -  -  -  
   13 D1:BB33 -  -  -  -  Int32Multiply:
   14 D1:BB33 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:BB34 D5 -  -  -  		push 	de
   16 D1:BB35 44 -  -  -  		ld 		b,h
   17 D1:BB36 4D -  -  -  		ld 		c,l
   18 D1:BB37 21 00 00 00 		ld 		hl,$0000
   19 D1:BB3B -  -  -  -  
   20 D1:BB3B D9 -  -  -  		exx
   21 D1:BB3C C5 -  -  -  		push 	bc
   22 D1:BB3D D5 -  -  -  		push 	de
   23 D1:BB3E 44 -  -  -  		ld 		b,h
   24 D1:BB3F 4D -  -  -  		ld 		c,l
   25 D1:BB40 21 00 00 00 		ld 		hl,$0000		
   26 D1:BB44 D9 -  -  -  		exx
   27 D1:BB45 -  -  -  -  
   28 D1:BB45 -  -  -  -  _I32MultiplyLoop:
   29 D1:BB45 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:BB47 C4 6C BB D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:BB4B -  -  -  -  		;
   32 D1:BB4B D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:BB4C CB 38 -  -  		srl 	b
   34 D1:BB4E CB 19 -  -  		rr 		c
   35 D1:BB50 D9 -  -  -  		exx
   36 D1:BB51 CB 18 -  -  		rr 		b
   37 D1:BB53 CB 19 -  -  		rr 		c
   38 D1:BB55 -  -  -  -  		;
   39 D1:BB55 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:BB57 CB 12 -  -  		rl 		d
   41 D1:BB59 D9 -  -  -  		exx
   42 D1:BB5A CB 13 -  -  		rl 		e
   43 D1:BB5C CB 12 -  -  		rl 		d
   44 D1:BB5E -  -  -  -  
   45 D1:BB5E 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:BB5F B1 -  -  -  		or 		c
   47 D1:BB60 D9 -  -  -  		exx
   48 D1:BB61 B0 -  -  -  		or 		b
   49 D1:BB62 B1 -  -  -  		or 		c
   50 D1:BB63 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:BB65 -  -  -  -  
   52 D1:BB65 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:BB66 D1 -  -  -  		pop 	de
   54 D1:BB67 C1 -  -  -  		pop 	bc
   55 D1:BB68 D9 -  -  -  		exx
   56 D1:BB69 D1 -  -  -  		pop 	de
   57 D1:BB6A C1 -  -  -  		pop 	bc
   58 D1:BB6B C9 -  -  -  		ret
   59 D1:BB6C -  -  -  -  
   60 D1:BB6C -  -  -  -  ; ***************************************************************************************
   61 D1:BB6C -  -  -  -  ;
   62 D1:BB6C -  -  -  -  ;									Changes and Updates
   63 D1:BB6C -  -  -  -  ;
   64 D1:BB6C -  -  -  -  ; ***************************************************************************************
   65 D1:BB6C -  -  -  -  ;
   66 D1:BB6C -  -  -  -  ;		Date			Notes
   67 D1:BB6C -  -  -  -  ;		==== 			=====
   68 D1:BB6C -  -  -  -  ;
   69 D1:BB6C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   75 D1:BB6C -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:BB6C -  -  -  -  ; ***************************************************************************************
    2 D1:BB6C -  -  -  -  ; ***************************************************************************************
    3 D1:BB6C -  -  -  -  ;
    4 D1:BB6C -  -  -  -  ;		Name : 		isimple.asm
    5 D1:BB6C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BB6C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BB6C -  -  -  -  ;		Reviewed :	No
    8 D1:BB6C -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:BB6C -  -  -  -  ;
   10 D1:BB6C -  -  -  -  ; ***************************************************************************************
   11 D1:BB6C -  -  -  -  ; ***************************************************************************************
   12 D1:BB6C -  -  -  -  
   13 D1:BB6C -  -  -  -  ; ***************************************************************************************
   14 D1:BB6C -  -  -  -  ;
   15 D1:BB6C -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:BB6C -  -  -  -  ;
   17 D1:BB6C -  -  -  -  ; ***************************************************************************************
   18 D1:BB6C -  -  -  -  
   19 D1:BB6C -  -  -  -  Int32Add:
   20 D1:BB6C 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:BB6E D9 -  -  -  		exx
   22 D1:BB6F 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:BB72 D9 -  -  -  		exx
   24 D1:BB73 C9 -  -  -  		ret
   25 D1:BB74 -  -  -  -  
   26 D1:BB74 -  -  -  -  ; ***************************************************************************************
   27 D1:BB74 -  -  -  -  ;
   28 D1:BB74 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:BB74 -  -  -  -  ;
   30 D1:BB74 -  -  -  -  ; ***************************************************************************************
   31 D1:BB74 -  -  -  -  
   32 D1:BB74 -  -  -  -  Int32Subtract:
   33 D1:BB74 AF -  -  -  		xor 	a 							; clear carry
   34 D1:BB75 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:BB78 D9 -  -  -  		exx
   36 D1:BB79 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:BB7C D9 -  -  -  		exx
   38 D1:BB7D C9 -  -  -  		ret
   39 D1:BB7E -  -  -  -  
   40 D1:BB7E -  -  -  -  ; ***************************************************************************************
   41 D1:BB7E -  -  -  -  ;
   42 D1:BB7E -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:BB7E -  -  -  -  ;
   44 D1:BB7E -  -  -  -  ; ***************************************************************************************
   45 D1:BB7E -  -  -  -  
   46 D1:BB7E -  -  -  -  Int32And:
   47 D1:BB7E D9 -  -  -  		exx
   48 D1:BB7F CD 84 BB D1 		call 	_I32AndHLDE
   49 D1:BB83 D9 -  -  -  		exx
   50 D1:BB84 -  -  -  -  _I32AndHLDE:		
   51 D1:BB84 7C -  -  -  		ld 		a,h
   52 D1:BB85 A2 -  -  -  		and 	d
   53 D1:BB86 67 -  -  -  		ld 		h,a
   54 D1:BB87 7D -  -  -  		ld 		a,l
   55 D1:BB88 A3 -  -  -  		and 	e
   56 D1:BB89 6F -  -  -  		ld 		l,a
   57 D1:BB8A C9 -  -  -  		ret
   58 D1:BB8B -  -  -  -  
   59 D1:BB8B -  -  -  -  ; ***************************************************************************************
   60 D1:BB8B -  -  -  -  ;
   61 D1:BB8B -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:BB8B -  -  -  -  ;
   63 D1:BB8B -  -  -  -  ; ***************************************************************************************
   64 D1:BB8B -  -  -  -  
   65 D1:BB8B -  -  -  -  Int32Or:
   66 D1:BB8B D9 -  -  -  		exx
   67 D1:BB8C CD 91 BB D1 		call 	_I32OrHLDE
   68 D1:BB90 D9 -  -  -  		exx
   69 D1:BB91 -  -  -  -  _I32OrHLDE:		
   70 D1:BB91 7C -  -  -  		ld 		a,h
   71 D1:BB92 B2 -  -  -  		or 		d
   72 D1:BB93 67 -  -  -  		ld 		h,a
   73 D1:BB94 7D -  -  -  		ld 		a,l
   74 D1:BB95 B3 -  -  -  		or 		e
   75 D1:BB96 6F -  -  -  		ld 		l,a
   76 D1:BB97 C9 -  -  -  		ret
   77 D1:BB98 -  -  -  -  
   78 D1:BB98 -  -  -  -  ; ***************************************************************************************
   79 D1:BB98 -  -  -  -  ;
   80 D1:BB98 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:BB98 -  -  -  -  ;
   82 D1:BB98 -  -  -  -  ; ***************************************************************************************
   83 D1:BB98 -  -  -  -  
   84 D1:BB98 -  -  -  -  Int32Xor:
   85 D1:BB98 D9 -  -  -  		exx
   86 D1:BB99 CD 9E BB D1 		call 	_I32XorHLDE
   87 D1:BB9D D9 -  -  -  		exx
   88 D1:BB9E -  -  -  -  _I32XorHLDE:		
   89 D1:BB9E 7C -  -  -  		ld 		a,h
   90 D1:BB9F AA -  -  -  		xor 	d
   91 D1:BBA0 67 -  -  -  		ld 		h,a
   92 D1:BBA1 7D -  -  -  		ld 		a,l
   93 D1:BBA2 AB -  -  -  		xor 	e
   94 D1:BBA3 6F -  -  -  		ld 		l,a
   95 D1:BBA4 C9 -  -  -  		ret
   96 D1:BBA5 -  -  -  -  
   97 D1:BBA5 -  -  -  -  ; ***************************************************************************************
   98 D1:BBA5 -  -  -  -  ;
   99 D1:BBA5 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:BBA5 -  -  -  -  ;
  101 D1:BBA5 -  -  -  -  ; ***************************************************************************************
  102 D1:BBA5 -  -  -  -  
  103 D1:BBA5 -  -  -  -  Int32Zero:
  104 D1:BBA5 D9 -  -  -  		exx
  105 D1:BBA6 7D -  -  -  		ld 		a,l
  106 D1:BBA7 B4 -  -  -  		or 		h
  107 D1:BBA8 D9 -  -  -  		exx
  108 D1:BBA9 B5 -  -  -  		or 		l
  109 D1:BBAA B4 -  -  -  		or 		h
  110 D1:BBAB C9 -  -  -  		ret
  111 D1:BBAC -  -  -  -  
  112 D1:BBAC -  -  -  -  ; ***************************************************************************************
  113 D1:BBAC -  -  -  -  ;
  114 D1:BBAC -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:BBAC -  -  -  -  ;
  116 D1:BBAC -  -  -  -  ; ***************************************************************************************
  117 D1:BBAC -  -  -  -  
  118 D1:BBAC -  -  -  -  Int32Compare:
  119 D1:BBAC E5 -  -  -  		push 	hl 							; save HL
  120 D1:BBAD AF -  -  -  		xor 	a 							; clear carry
  121 D1:BBAE 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:BBB1 D9 -  -  -  		exx
  123 D1:BBB2 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:BBB3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:BBB6 -  -  -  -  		;
  126 D1:BBB6 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:BBB7 E2 BF BB D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:BBBB 78 -  -  -  		ld 		a,b
  129 D1:BBBC EE 80 -  -  		xor 	$80
  130 D1:BBBE 47 -  -  -  		ld 		b,a
  131 D1:BBBF -  -  -  -  _I32CNoOverflow:
  132 D1:BBBF 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:BBC0 B5 -  -  -  		or 		l
  134 D1:BBC1 D9 -  -  -  		exx 
  135 D1:BBC2 B4 -  -  -  		or 		h
  136 D1:BBC3 B5 -  -  -  		or 		l
  137 D1:BBC4 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:BBC6 -  -  -  -  		;
  139 D1:BBC6 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:BBC7 CB 78 -  -  		bit 	7,b
  141 D1:BBC9 D9 -  -  -  		exx
  142 D1:BBCA 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:BBCC 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:BBCE 3E FF -  -  		ld 		a,$FF
  145 D1:BBD0 -  -  -  -  _I32NotPos:
  146 D1:BBD0 D9 -  -  -  		exx
  147 D1:BBD1 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:BBD2 D9 -  -  -  		exx
  149 D1:BBD3 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:BBD4 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:BBD5 C9 -  -  -  		ret
  152 D1:BBD6 -  -  -  -  
  153 D1:BBD6 -  -  -  -  ; ***************************************************************************************
  154 D1:BBD6 -  -  -  -  ;
  155 D1:BBD6 -  -  -  -  ;										Negate HL'HL
  156 D1:BBD6 -  -  -  -  ;
  157 D1:BBD6 -  -  -  -  ; ***************************************************************************************
  158 D1:BBD6 -  -  -  -  
  159 D1:BBD6 -  -  -  -  Int32Negate:
  160 D1:BBD6 AF -  -  -  		xor 	a
  161 D1:BBD7 CD E2 BB D1 		call 	_I32NSubtract
  162 D1:BBDB D9 -  -  -  		exx
  163 D1:BBDC CD E2 BB D1 		call 	_I32NSubtract
  164 D1:BBE0 D9 -  -  -  		exx
  165 D1:BBE1 C9 -  -  -  		ret
  166 D1:BBE2 -  -  -  -  _I32NSubtract:
  167 D1:BBE2 D5 -  -  -  		push 	de
  168 D1:BBE3 EB -  -  -  		ex 		de,hl
  169 D1:BBE4 21 00 00 00 		ld 		hl,$0000
  170 D1:BBE8 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:BBEB D1 -  -  -  		pop 	de
  172 D1:BBEC C9 -  -  -  		ret
  173 D1:BBED -  -  -  -  		
  174 D1:BBED -  -  -  -  ; ***************************************************************************************
  175 D1:BBED -  -  -  -  ;
  176 D1:BBED -  -  -  -  ;									Changes and Updates
  177 D1:BBED -  -  -  -  ;
  178 D1:BBED -  -  -  -  ; ***************************************************************************************
  179 D1:BBED -  -  -  -  ;
  180 D1:BBED -  -  -  -  ;		Date			Notes
  181 D1:BBED -  -  -  -  ;		==== 			=====
  182 D1:BBED -  -  -  -  ;
  183 D1:BBED -  -  -  -  ; ***************************************************************************************
  184 D1:BBED -  -  -  -  		
Listing for file "_build.asm"
   76 D1:BBED -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:BBED -  -  -  -  ; ***************************************************************************************
    2 D1:BBED -  -  -  -  ; ***************************************************************************************
    3 D1:BBED -  -  -  -  ;
    4 D1:BBED -  -  -  -  ;		Name : 		itostring.asm
    5 D1:BBED -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BBED -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BBED -  -  -  -  ;		Reviewed :	No
    8 D1:BBED -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:BBED -  -  -  -  ;
   10 D1:BBED -  -  -  -  ; ***************************************************************************************
   11 D1:BBED -  -  -  -  ;
   12 D1:BBED -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:BBED -  -  -  -  ;
   14 D1:BBED -  -  -  -  ; ***************************************************************************************
   15 D1:BBED -  -  -  -  
   16 D1:BBED -  -  -  -  Int32ToString:
   17 D1:BBED C5 -  -  -  		push 	bc 							; save string start
   18 D1:BBEE D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:BBEF E5 -  -  -  		push 	hl
   20 D1:BBF0 11 00 00 00 		ld	 	de,$0000
   21 D1:BBF4 D9 -  -  -  		exx
   22 D1:BBF5 D5 -  -  -  		push 	de
   23 D1:BBF6 E5 -  -  -  		push 	hl
   24 D1:BBF7 11 00 00 00 		ld 		de,$000
   25 D1:BBFB D9 -  -  -  		exx
   26 D1:BBFC 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:BBFD -  -  -  -  		;
   28 D1:BBFD CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:BBFF 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:BC01 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:BC03 5F -  -  -  		ld 		e,a
   32 D1:BC04 -  -  -  -  		;
   33 D1:BC04 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:BC05 CB 7C -  -  		bit 	7,h
   35 D1:BC07 D9 -  -  -  		exx
   36 D1:BC08 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:BC0A -  -  -  -  		;
   38 D1:BC0A CD D6 BB D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:BC0E -  -  -  -  		;
   40 D1:BC0E 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:BC10 02 -  -  -  		ld 		(bc),a
   42 D1:BC11 03 -  -  -  		inc 	bc
   43 D1:BC12 -  -  -  -  _I32TSNotNegative:	
   44 D1:BC12 CD 21 BC D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:BC16 -  -  -  -  _I32TSExit:
   46 D1:BC16 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:BC18 02 -  -  -  		ld 		(bc),a 
   48 D1:BC19 -  -  -  -  
   49 D1:BC19 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:BC1A E1 -  -  -  		pop 	hl
   51 D1:BC1B D1 -  -  -  		pop 	de
   52 D1:BC1C D9 -  -  -  		exx
   53 D1:BC1D E1 -  -  -  		pop 	hl
   54 D1:BC1E D1 -  -  -  		pop 	de
   55 D1:BC1F C1 -  -  -  		pop 	bc
   56 D1:BC20 C9 -  -  -  		ret
   57 D1:BC21 -  -  -  -  
   58 D1:BC21 -  -  -  -  _I32RecursiveConvert:
   59 D1:BC21 CD 2E BA D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:BC25 F5 -  -  -  		push 	af 							; save remainder
   61 D1:BC26 CD A5 BB D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:BC2A C4 21 BC D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:BC2E F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:BC2F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:BC31 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:BC33 C6 07 -  -  		add 	a,7
   67 D1:BC35 -  -  -  -  _I32NotHex:
   68 D1:BC35 C6 30 -  -  		add 	a,48
   69 D1:BC37 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:BC38 03 -  -  -  		inc 	bc
   71 D1:BC39 C9 -  -  -  		ret		
   72 D1:BC3A -  -  -  -  
   73 D1:BC3A -  -  -  -  ; ***************************************************************************************
   74 D1:BC3A -  -  -  -  ;
   75 D1:BC3A -  -  -  -  ;									Changes and Updates
   76 D1:BC3A -  -  -  -  ;
   77 D1:BC3A -  -  -  -  ; ***************************************************************************************
   78 D1:BC3A -  -  -  -  ;
   79 D1:BC3A -  -  -  -  ;		Date			Notes
   80 D1:BC3A -  -  -  -  ;		==== 			=====
   81 D1:BC3A -  -  -  -  ;
   82 D1:BC3A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 D1:BC3A -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:BC3A -  -  -  -  ; ***************************************************************************************
    2 D1:BC3A -  -  -  -  ; ***************************************************************************************
    3 D1:BC3A -  -  -  -  ;
    4 D1:BC3A -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:BC3A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BC3A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BC3A -  -  -  -  ;		Reviewed :	No
    8 D1:BC3A -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:BC3A -  -  -  -  ;
   10 D1:BC3A -  -  -  -  ; ***************************************************************************************
   11 D1:BC3A -  -  -  -  ; ***************************************************************************************
   12 D1:BC3A -  -  -  -  
   13 D1:BC3A -  -  -  -  #ifdef AQUARIUS
   14 D1:BC3A             
   15 D1:BC3A             ; ***************************************************************************************
   16 D1:BC3A             ;
   17 D1:BC3A             ;								Initialise system stuff
   18 D1:BC3A             ;
   19 D1:BC3A             ; ***************************************************************************************
   20 D1:BC3A             
   21 D1:BC3A             SYSInitialise:
   22 D1:BC3A             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:BC3A             	call 	SYSPrintChar
   24 D1:BC3A             	ret
   25 D1:BC3A             
   26 D1:BC3A             ; ***************************************************************************************
   27 D1:BC3A             ;
   28 D1:BC3A             ;								Terminate system stuff
   29 D1:BC3A             ;
   30 D1:BC3A             ; ***************************************************************************************
   31 D1:BC3A             
   32 D1:BC3A             SYSTerminate:
   33 D1:BC3A             	jr 		SYSTerminate
   34 D1:BC3A             
   35 D1:BC3A             ; ***************************************************************************************
   36 D1:BC3A             ;
   37 D1:BC3A             ;						Print A character (note 13,10 required for CRLF)
   38 D1:BC3A             ;
   39 D1:BC3A             ; ***************************************************************************************
   40 D1:BC3A             
   41 D1:BC3A             SYSPrintChar:
   42 D1:BC3A             	push 	af 									; we stack everything including alt registers
   43 D1:BC3A             	push 	bc
   44 D1:BC3A             	push 	de
   45 D1:BC3A             	push 	hl
   46 D1:BC3A             	push 	ix
   47 D1:BC3A             	push 	iy
   48 D1:BC3A             	exx
   49 D1:BC3A             	push 	bc
   50 D1:BC3A             	push 	de
   51 D1:BC3A             	push 	hl
   52 D1:BC3A             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:BC3A             	pop 	hl
   54 D1:BC3A             	pop 	de
   55 D1:BC3A             	pop 	bc
   56 D1:BC3A             	exx
   57 D1:BC3A             	pop 	iy
   58 D1:BC3A             	pop 	ix
   59 D1:BC3A             	pop 	hl
   60 D1:BC3A             	pop 	de
   61 D1:BC3A             	pop 	bc
   62 D1:BC3A             	pop 	af
   63 D1:BC3A             	ret		
   64 D1:BC3A             
   65 D1:BC3A             ; ***************************************************************************************
   66 D1:BC3A             ;
   67 D1:BC3A             ;									Print Newline
   68 D1:BC3A             ;
   69 D1:BC3A             ; ***************************************************************************************
   70 D1:BC3A             
   71 D1:BC3A             SYSPrintCRLF:
   72 D1:BC3A             	push 	af
   73 D1:BC3A             	ld 		a,13
   74 D1:BC3A             	call 	SYSPrintChar
   75 D1:BC3A             	ld 		a,10
   76 D1:BC3A             	call 	SYSPrintChar
   77 D1:BC3A             	pop 	af
   78 D1:BC3A             	ret
   79 D1:BC3A             
   80 D1:BC3A             ; ***************************************************************************************
   81 D1:BC3A             ;
   82 D1:BC3A             ;									Get time into HL'HL
   83 D1:BC3A             ;
   84 D1:BC3A             ; ***************************************************************************************
   85 D1:BC3A             
   86 D1:BC3A             SYSGetTimer:
   87 D1:BC3A              	in 		a,($00)
   88 D1:BC3A              	ld 		l,a
   89 D1:BC3A              	in 		a,($01)
   90 D1:BC3A              	ld 		h,a
   91 D1:BC3A              	exx
   92 D1:BC3A              	in 		a,($02)
   93 D1:BC3A              	ld 		l,a
   94 D1:BC3A              	in 		a,($03)
   95 D1:BC3A              	ld 		h,a
   96 D1:BC3A              	exx
   97 D1:BC3A             	ret 	
   98 D1:BC3A             	
   99 D1:BC3A             #endif
  100 D1:BC3A -  -  -  -  
  101 D1:BC3A -  -  -  -  ; ***************************************************************************************
  102 D1:BC3A -  -  -  -  ;
  103 D1:BC3A -  -  -  -  ;									Changes and Updates
  104 D1:BC3A -  -  -  -  ;
  105 D1:BC3A -  -  -  -  ; ***************************************************************************************
  106 D1:BC3A -  -  -  -  ;
  107 D1:BC3A -  -  -  -  ;		Date			Notes
  108 D1:BC3A -  -  -  -  ;		==== 			=====
  109 D1:BC3A -  -  -  -  ;
  110 D1:BC3A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   78 D1:BC3A -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:BC3A -  -  -  -  ; ***************************************************************************************
    2 D1:BC3A -  -  -  -  ; ***************************************************************************************
    3 D1:BC3A -  -  -  -  ;
    4 D1:BC3A -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:BC3A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BC3A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BC3A -  -  -  -  ;		Reviewed :	No
    8 D1:BC3A -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:BC3A -  -  -  -  ;
   10 D1:BC3A -  -  -  -  ; ***************************************************************************************
   11 D1:BC3A -  -  -  -  ; ***************************************************************************************
   12 D1:BC3A -  -  -  -  
   13 D1:BC3A -  -  -  -  #ifdef CLEANEZ80
   14 D1:BC3A             
   15 D1:BC3A             ; ***************************************************************************************
   16 D1:BC3A             ;
   17 D1:BC3A             ;								Initialise system stuff
   18 D1:BC3A             ;
   19 D1:BC3A             ; ***************************************************************************************
   20 D1:BC3A             
   21 D1:BC3A             SYSInitialise:
   22 D1:BC3A             	ret
   23 D1:BC3A             
   24 D1:BC3A             ; ***************************************************************************************
   25 D1:BC3A             ;
   26 D1:BC3A             ;								Terminate system stuff
   27 D1:BC3A             ;
   28 D1:BC3A             ; ***************************************************************************************
   29 D1:BC3A             
   30 D1:BC3A             SYSTerminate:
   31 D1:BC3A             	ret
   32 D1:BC3A             
   33 D1:BC3A             ; ***************************************************************************************
   34 D1:BC3A             ;
   35 D1:BC3A             ;								Print A character
   36 D1:BC3A             ;
   37 D1:BC3A             ; ***************************************************************************************
   38 D1:BC3A             
   39 D1:BC3A             SYSPrintChar:
   40 D1:BC3A             	ret		
   41 D1:BC3A             
   42 D1:BC3A             ; ***************************************************************************************
   43 D1:BC3A             ;
   44 D1:BC3A             ;									Print Newline
   45 D1:BC3A             ;
   46 D1:BC3A             ; ***************************************************************************************
   47 D1:BC3A             
   48 D1:BC3A             SYSPrintCRLF:
   49 D1:BC3A             	ret
   50 D1:BC3A             
   51 D1:BC3A             ; ***************************************************************************************
   52 D1:BC3A             ;
   53 D1:BC3A             ;									Get time into HL'HL
   54 D1:BC3A             ;
   55 D1:BC3A             ; ***************************************************************************************
   56 D1:BC3A             
   57 D1:BC3A             SYSGetTimer:
   58 D1:BC3A             	ret
   59 D1:BC3A             
   60 D1:BC3A             #endif
   61 D1:BC3A -  -  -  -  
   62 D1:BC3A -  -  -  -  ; ***************************************************************************************
   63 D1:BC3A -  -  -  -  ;
   64 D1:BC3A -  -  -  -  ;									Changes and Updates
   65 D1:BC3A -  -  -  -  ;
   66 D1:BC3A -  -  -  -  ; ***************************************************************************************
   67 D1:BC3A -  -  -  -  ;
   68 D1:BC3A -  -  -  -  ;		Date			Notes
   69 D1:BC3A -  -  -  -  ;		==== 			=====
   70 D1:BC3A -  -  -  -  ;
   71 D1:BC3A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 D1:BC3A -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:BC3A -  -  -  -  ; ***************************************************************************************
    2 D1:BC3A -  -  -  -  ; ***************************************************************************************
    3 D1:BC3A -  -  -  -  ;
    4 D1:BC3A -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:BC3A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BC3A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BC3A -  -  -  -  ;		Reviewed :	No
    8 D1:BC3A -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:BC3A -  -  -  -  ;
   10 D1:BC3A -  -  -  -  ; ***************************************************************************************
   11 D1:BC3A -  -  -  -  ; ***************************************************************************************
   12 D1:BC3A -  -  -  -  
   13 D1:BC3A -  -  -  -  #ifdef TI84
   14 D1:BC3A -  -  -  -  
   15 D1:BC3A -  -  -  -  ; ***************************************************************************************
   16 D1:BC3A -  -  -  -  ;
   17 D1:BC3A -  -  -  -  ;								Initialise system stuff
   18 D1:BC3A -  -  -  -  ;
   19 D1:BC3A -  -  -  -  ; ***************************************************************************************
   20 D1:BC3A -  -  -  -  
   21 D1:BC3A -  -  -  -  SYSInitialise:
   22 D1:BC3A F3 -  -  -  	di
   23 D1:BC3B ED 73 58 BC 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:BC40 FD 22 5C BC 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:BC45 C9 -  -  -  	ret
   26 D1:BC46 -  -  -  -  
   27 D1:BC46 -  -  -  -  ; ***************************************************************************************
   28 D1:BC46 -  -  -  -  ;
   29 D1:BC46 -  -  -  -  ;								Terminate system stuff
   30 D1:BC46 -  -  -  -  ;
   31 D1:BC46 -  -  -  -  ; ***************************************************************************************
   32 D1:BC46 -  -  -  -  
   33 D1:BC46 -  -  -  -  SYSTerminate:
   34 D1:BC46 ED 7B 58 BC 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:BC4B FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:BC4D FD 2A 5C BC 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:BC52 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:BC56 FB -  -  -  	ei
   39 D1:BC57 C9 -  -  -  	ret 										; and exit.
   40 D1:BC58 -  -  -  -  
   41 D1:BC58 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:BC58 00 00 00 00 	.dw 	0,0
   43 D1:BC5C -  -  -  -  _IYTemp84:
   44 D1:BC5C 00 00 00 00 	.dw 	0,0		
   45 D1:BC60 -  -  -  -  
   46 D1:BC60 -  -  -  -  ; ***************************************************************************************
   47 D1:BC60 -  -  -  -  ;
   48 D1:BC60 -  -  -  -  ;								Print A character
   49 D1:BC60 -  -  -  -  ;
   50 D1:BC60 -  -  -  -  ; ***************************************************************************************
   51 D1:BC60 -  -  -  -  
   52 D1:BC60 -  -  -  -  SYSPrintChar:
   53 D1:BC60 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:BC61 C5 -  -  -  	push 	bc
   55 D1:BC62 D5 -  -  -  	push 	de
   56 D1:BC63 E5 -  -  -  	push 	hl
   57 D1:BC64 DD E5 -  -  	push 	ix
   58 D1:BC66 FD E5 -  -  	push 	iy
   59 D1:BC68 D9 -  -  -  	exx
   60 D1:BC69 C5 -  -  -  	push 	bc
   61 D1:BC6A D5 -  -  -  	push 	de
   62 D1:BC6B E5 -  -  -  	push 	hl
   63 D1:BC6C -  -  -  -  
   64 D1:BC6C FD 2A 5C BC 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:BC71 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:BC75 F3 -  -  -  	di
   67 D1:BC76 FD 22 5C BC 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:BC7B -  -  -  -  
   69 D1:BC7B E1 -  -  -  	pop 	hl
   70 D1:BC7C D1 -  -  -  	pop 	de
   71 D1:BC7D C1 -  -  -  	pop 	bc
   72 D1:BC7E D9 -  -  -  	exx
   73 D1:BC7F FD E1 -  -  	pop 	iy
   74 D1:BC81 DD E1 -  -  	pop 	ix
   75 D1:BC83 E1 -  -  -  	pop 	hl
   76 D1:BC84 D1 -  -  -  	pop 	de
   77 D1:BC85 C1 -  -  -  	pop 	bc
   78 D1:BC86 F1 -  -  -  	pop 	af
   79 D1:BC87 C9 -  -  -  	ret		
   80 D1:BC88 -  -  -  -  
   81 D1:BC88 -  -  -  -  ; ***************************************************************************************
   82 D1:BC88 -  -  -  -  ;
   83 D1:BC88 -  -  -  -  ;									Print Newline
   84 D1:BC88 -  -  -  -  ;
   85 D1:BC88 -  -  -  -  ; ***************************************************************************************
   86 D1:BC88 -  -  -  -  
   87 D1:BC88 -  -  -  -  SYSPrintCRLF:
   88 D1:BC88 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:BC89 C5 -  -  -  	push 	bc
   90 D1:BC8A D5 -  -  -  	push 	de
   91 D1:BC8B E5 -  -  -  	push 	hl
   92 D1:BC8C DD E5 -  -  	push 	ix
   93 D1:BC8E FD E5 -  -  	push 	iy
   94 D1:BC90 D9 -  -  -  	exx
   95 D1:BC91 C5 -  -  -  	push 	bc
   96 D1:BC92 D5 -  -  -  	push 	de
   97 D1:BC93 E5 -  -  -  	push 	hl
   98 D1:BC94 -  -  -  -  
   99 D1:BC94 FD 2A 5C BC 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:BC99 CD F0 07 02 	call 	_newline
  101 D1:BC9D F3 -  -  -  	di
  102 D1:BC9E FD 22 5C BC 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:BCA3 -  -  -  -  
  104 D1:BCA3 E1 -  -  -  	pop 	hl
  105 D1:BCA4 D1 -  -  -  	pop 	de
  106 D1:BCA5 C1 -  -  -  	pop 	bc
  107 D1:BCA6 D9 -  -  -  	exx
  108 D1:BCA7 FD E1 -  -  	pop 	iy
  109 D1:BCA9 DD E1 -  -  	pop 	ix
  110 D1:BCAB E1 -  -  -  	pop 	hl
  111 D1:BCAC D1 -  -  -  	pop 	de
  112 D1:BCAD C1 -  -  -  	pop 	bc
  113 D1:BCAE F1 -  -  -  	pop 	af
  114 D1:BCAF C9 -  -  -  	ret
  115 D1:BCB0 -  -  -  -  
  116 D1:BCB0 -  -  -  -  ; ***************************************************************************************
  117 D1:BCB0 -  -  -  -  ;
  118 D1:BCB0 -  -  -  -  ;									Get time into HL'HL
  119 D1:BCB0 -  -  -  -  ;
  120 D1:BCB0 -  -  -  -  ; ***************************************************************************************
  121 D1:BCB0 -  -  -  -  
  122 D1:BCB0 -  -  -  -  SYSGetTimer:
  123 D1:BCB0 21 34 12 00 	ld 		hl,$1234
  124 D1:BCB4 D9 -  -  -  	exx
  125 D1:BCB5 21 78 56 00 	ld 		hl,$5678
  126 D1:BCB9 D9 -  -  -  	exx
  127 D1:BCBA C9 -  -  -  	ret
  128 D1:BCBB -  -  -  -  
  129 D1:BCBB -  -  -  -  #endif
  130 D1:BCBB -  -  -  -  
  131 D1:BCBB -  -  -  -  ; ***************************************************************************************
  132 D1:BCBB -  -  -  -  ;
  133 D1:BCBB -  -  -  -  ;									Changes and Updates
  134 D1:BCBB -  -  -  -  ;
  135 D1:BCBB -  -  -  -  ; ***************************************************************************************
  136 D1:BCBB -  -  -  -  ;
  137 D1:BCBB -  -  -  -  ;		Date			Notes
  138 D1:BCBB -  -  -  -  ;		==== 			=====
  139 D1:BCBB -  -  -  -  ;
  140 D1:BCBB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 D1:BCBB -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:BCBB -  -  -  -  ; ***************************************************************************************
    2 D1:BCBB -  -  -  -  ; ***************************************************************************************
    3 D1:BCBB -  -  -  -  ;
    4 D1:BCBB -  -  -  -  ;		Name : 		basic.asm
    5 D1:BCBB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BCBB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BCBB -  -  -  -  ;		Reviewed :	No
    8 D1:BCBB -  -  -  -  ;		Purpose :	Main program.
    9 D1:BCBB -  -  -  -  ;
   10 D1:BCBB -  -  -  -  ; ***************************************************************************************
   11 D1:BCBB -  -  -  -  ; ***************************************************************************************
   12 D1:BCBB -  -  -  -  
   13 D1:BCBB 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:C000 -  -  -  -  TestInstance:
   15 D1:C000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:C000 -  -  -  -  ;
    2 D1:C000 -  -  -  -  ;	This code automatically generated.
    3 D1:C000 -  -  -  -  ;
    4 D1:C000 -  -  -  -  TestProgram:
    5 D1:C000 09 01 00 0D 
              1B 8F 8A 43 
              80 08 02 00 
              02 8F 8A 47 
              80 20 03 00 
              B7 13 04 12 
              13 1B 95 44 
              A5 A7 C1 3F 
              04 4E 65 78 
              74 0D A7 B7 
              13 04 12 13 
              1B 95 48 A5 
              80 0E 04 00 
              B7 13 04 17 
              95 8A 4B A6 
              4C A5 80 06 
              05 00 C1 02 
              80 07 06 00 
              C1 0D 1B 80 
              0F 07 00 B7 
              02 07 04 02 
              0A 95 8A 4F 
              67 A5 80 06 
              08 00 C1 02 
              80 05 09 00 
              CC 80 0E 0A 
              00 B6 B7 02 
              07 04 02 0A 
              95 02 A5 80 
              06 0B 00 C1 
              02 80 05 0C 
              00 B8 80 11 
              0D 00 B6 B7 
              13 04 17 95 
              0D 1B A6 00 
              01 02 A5 80 
              12 0E 00 C1 
              3F 03 74 65 
              78 0D A6 0D 
              1B A6 00 01 
              02 80 12 0F 
              00 B7 13 04 
              12 13 1B 95 
              0D 1B 85 00 
              01 02 A5 80 
              0C 10 00 C1 
              3F 04 65 74 
              65 78 0D 80 
              05 11 00 B8 
              80 0E 12 00 
              B6 B7 13 04 
              12 13 1B 95 
              02 A5 80 10 
              13 00 C1 3F 
              06 74 65 73 
              74 31 20 0D 
              A8 02 80 05 
              14 00 B8 80 
              00 -  -  -  	.db	$09,$01,$00,$0d,$1b,$8f,$8a,$43,$80,$08,$02,$00,$02,$8f,$8a,$47,$80,$20,$03,$00,$b7,$13,$04,$12,$13,$1b,$95,$44,$a5,$a7,$c1,$3f,$04,$4e,$65,$78,$74,$0d,$a7,$b7,$13,$04,$12,$13,$1b,$95,$48,$a5,$80,$0e,$04,$00,$b7,$13,$04,$17,$95,$8a,$4b,$a6,$4c,$a5,$80,$06,$05,$00,$c1,$02,$80,$07,$06,$00,$c1,$0d,$1b,$80,$0f,$07,$00,$b7,$02,$07,$04,$02,$0a,$95,$8a,$4f,$67,$a5,$80,$06,$08,$00,$c1,$02,$80,$05,$09,$00,$cc,$80,$0e,$0a,$00,$b6,$b7,$02,$07,$04,$02,$0a,$95,$02,$a5,$80,$06,$0b,$00,$c1,$02,$80,$05,$0c,$00,$b8,$80,$11,$0d,$00,$b6,$b7,$13,$04,$17,$95,$0d,$1b,$a6,$00,$01,$02,$a5,$80,$12,$0e,$00,$c1,$3f,$03,$74,$65,$78,$0d,$a6,$0d,$1b,$a6,$00,$01,$02,$80,$12,$0f,$00,$b7,$13,$04,$12,$13,$1b,$95,$0d,$1b,$85,$00,$01,$02,$a5,$80,$0c,$10,$00,$c1,$3f,$04,$65,$74,$65,$78,$0d,$80,$05,$11,$00,$b8,$80,$0e,$12,$00,$b6,$b7,$13,$04,$12,$13,$1b,$95,$02,$a5,$80,$10,$13,$00,$c1,$3f,$06,$74,$65,$73,$74,$31,$20,$0d,$a8,$02,$80,$05,$14,$00,$b8,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C0E9 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D0E9 -  -  -  -  EndTestInstance:
   18 D1:D0E9 -  -  -  -  		
   19 D1:D0E9 -  -  -  -  ; ***************************************************************************************
   20 D1:D0E9 -  -  -  -  ;
   21 D1:D0E9 -  -  -  -  ;									Changes and Updates
   22 D1:D0E9 -  -  -  -  ;
   23 D1:D0E9 -  -  -  -  ; ***************************************************************************************
   24 D1:D0E9 -  -  -  -  ;
   25 D1:D0E9 -  -  -  -  ;		Date			Notes
   26 D1:D0E9 -  -  -  -  ;		==== 			=====
   27 D1:D0E9 -  -  -  -  ;
   28 D1:D0E9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 D1:D0E9 -  -  -  -  FinalAddress:
