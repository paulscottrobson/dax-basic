    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  STM_PROC = $41 								; Proc Marker : Element 4, one byte
   25 00:0000 -  -  -  -  
   26 00:0000 -  -  -  -  STM_PROCINFO = $53 							; Proc Return : Element 5, six bytes
   27 00:0000 -  -  -  -  											; return position (5) marker (1)
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  STM_LOCAL = $65 							; Local/Param : Element 6, nine bytes
   30 00:0000 -  -  -  -  											; 1..4 	Address of variable localised
   31 00:0000 -  -  -  -  											; 5..8  Value to restore to it.
   32 00:0000 -  -  -  -  											
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;									Changes and Updates
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
   38 00:0000 -  -  -  -  ;
   39 00:0000 -  -  -  -  ;		Date			Notes
   40 00:0000 -  -  -  -  ;		==== 			=====
   41 00:0000 -  -  -  -  ;
   42 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DATA = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DATA
   35 00:0000             	ld a,ERRID_DATA
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIM = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIM
   42 00:0000             	ld a,ERRID_DIM
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DISABLED = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DISABLED
   49 00:0000             	ld a,ERRID_DISABLED
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_DIVZERO = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_DIVZERO
   56 00:0000             	ld a,ERRID_DIVZERO
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_GOSUB = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_GOSUB
   63 00:0000             	ld a,ERRID_GOSUB
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_INDEX = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_INDEX
   70 00:0000             	ld a,ERRID_INDEX
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_LINENO = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_LINENO
   77 00:0000             	ld a,ERRID_LINENO
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_MEMORY = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_MEMORY
   84 00:0000             	ld a,ERRID_MEMORY
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NEXT = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NEXT
   91 00:0000             	ld a,ERRID_NEXT
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NOCOMMA = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   98 00:0000             	ld a,ERRID_NOCOMMA
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NODOLLAR = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NODOLLAR
  105 00:0000             	ld a,ERRID_NODOLLAR
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NOLBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  112 00:0000             	ld a,ERRID_NOLBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOPROC = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOPROC
  119 00:0000             	ld a,ERRID_NOPROC
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_NORBRACKET = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  126 00:0000             	ld a,ERRID_NORBRACKET
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_NOTREF = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_NOTREF
  133 00:0000             	ld a,ERRID_NOTREF
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_PARAM = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_PARAM
  140 00:0000             	ld a,ERRID_PARAM
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_PROC = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_PROC
  147 00:0000             	ld a,ERRID_PROC
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_REPEAT = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_REPEAT
  154 00:0000             	ld a,ERRID_REPEAT
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_STACK = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_STACK
  161 00:0000             	ld a,ERRID_STACK
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
  165 00:0000 -  -  -  -  ERRID_STOP = 23
  166 00:0000 -  -  -  -  
  167 00:0000 -  -  -  -  #macro ERR_STOP
  168 00:0000             	ld a,ERRID_STOP
  169 00:0000             	jp ErrorHandler
  170 00:0000             #endmacro
  171 00:0000 -  -  -  -  
  172 00:0000 -  -  -  -  ERRID_SYNTAX = 24
  173 00:0000 -  -  -  -  
  174 00:0000 -  -  -  -  #macro ERR_SYNTAX
  175 00:0000             	ld a,ERRID_SYNTAX
  176 00:0000             	jp ErrorHandler
  177 00:0000             #endmacro
  178 00:0000 -  -  -  -  
  179 00:0000 -  -  -  -  ERRID_TODO = 25
  180 00:0000 -  -  -  -  
  181 00:0000 -  -  -  -  #macro ERR_TODO
  182 00:0000             	ld a,ERRID_TODO
  183 00:0000             	jp ErrorHandler
  184 00:0000             #endmacro
  185 00:0000 -  -  -  -  
  186 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 26
  187 00:0000 -  -  -  -  
  188 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  189 00:0000             	ld a,ERRID_UNKNOWNVAR
  190 00:0000             	jp ErrorHandler
  191 00:0000             #endmacro
  192 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 D1:A881             		ld 		sp,$BFFF
   41 D1:A881             #endif
   42 D1:A881             
   43 D1:A881             #endif
   44 D1:A881 CD EA BC D1 		call 	SYSInitialise
   45 D1:A885 11 00 C0 D1 		ld 		de,TestInstance
   46 D1:A889 21 C8 D0 D1 		ld 		hl,EndTestInstance
   47 D1:A88D CD 98 B3 D1 		call 	SetCurrentInstance
   48 D1:A891 -  -  -  -  
   49 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 D1:A893 32 E5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 D1:A897 -  -  -  -  		
   52 D1:A897 C3 37 AB D1 		jp 		Command_RUN
   53 D1:A89B -  -  -  -  
   54 D1:A89B -  -  -  -  WarmStart:		
   55 D1:A89B 3E 2A -  -  		ld 		a,'*'
   56 D1:A89D CD 10 BD D1 		call 	SYSPrintChar
   57 D1:A8A1 CD F6 BC D1 		call 	SYSTerminate
   58 D1:A8A5 -  -  -  -  
   59 D1:A8A5 -  -  -  -  Unimplemented:
   60 D1:A8A5 3E 06 C3 AF 
              AC D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   62 D1:A8AB 3E 07 C3 AF 
              AC D1 -  -  		ERR_DIVZERO
   63 D1:A8B1 -  -  -  -  
   64 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   65 D1:A8B1 -  -  -  -  ;
   66 D1:A8B1 -  -  -  -  ;									Changes and Updates
   67 D1:A8B1 -  -  -  -  ;
   68 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   69 D1:A8B1 -  -  -  -  ;
   70 D1:A8B1 -  -  -  -  ;		Date			Notes
   71 D1:A8B1 -  -  -  -  ;		==== 			=====
   72 D1:A8B1 -  -  -  -  ;
   73 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  
   78 D1:A8DD -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  		
   81 D1:A8E1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 D1:A8E1 00 00 00 00 		.dw 	0,0
   83 D1:A8E5 -  -  -  -  
   84 D1:A8E5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 D1:A8E5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8EB -  -  -  -  
   87 D1:A8EB -  -  -  -  AConvert: 									; used for address conversions.
   88 D1:A8EB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 D1:A8F1 -  -  -  -  		
   90 D1:A8F1 -  -  -  -  RandomSeed: 								; random number seeds.
   91 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 D1:A901 -  -  -  -  
   93 D1:A901 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 D1:A901 00 00 -  -  		.dw 	0
   95 D1:A903 -  -  -  -  
   96 D1:A903 -  -  -  -  PrintBase: 									; current base for PRINT
   97 D1:A903 00 00 -  -  		.dw 	0 
   98 D1:A905 -  -  -  -  
   99 D1:A905 -  -  -  -  ReadDataPointer: 							; pointer for READ/DATA.
  100 D1:A905 00 00 00 00 		.dw 	0,0
  101 D1:A909 -  -  -  -  
  102 D1:A909 -  -  -  -  DataScanRequired: 							; flag set when scan forward for DATA required.
  103 D1:A909 00 00 -  -  		.dw 	0		
  104 D1:A90B -  -  -  -  
  105 D1:A90B -  -  -  -  ; ***************************************************************************************
  106 D1:A90B -  -  -  -  ;
  107 D1:A90B -  -  -  -  ;									Variable Information
  108 D1:A90B -  -  -  -  ;
  109 D1:A90B -  -  -  -  ; ***************************************************************************************
  110 D1:A90B -  -  -  -  
  111 D1:A90B -  -  -  -  VarNameStart: 								; first byte of name
  112 D1:A90B 00 00 00 00 		.dw 	0,0
  113 D1:A90F -  -  -  -  VarHash: 									; name hash value
  114 D1:A90F 00 00 -  -  		.dw 	0		
  115 D1:A911 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  116 D1:A911 00 00 00 00 		.dw 	0,0
  117 D1:A915 -  -  -  -  		
  118 D1:A915 -  -  -  -  ; ***************************************************************************************
  119 D1:A915 -  -  -  -  ;
  120 D1:A915 -  -  -  -  ;										  Buffers
  121 D1:A915 -  -  -  -  ;
  122 D1:A915 -  -  -  -  ; ***************************************************************************************
  123 D1:A915 -  -  -  -  
  124 D1:A915 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  125 D1:A915 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  126 D1:A925 -  -  -  -  
  127 D1:A925 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  128 D1:A925 00 00 -  -  		.dw 	0
  129 D1:A927 -  -  -  -  
  130 D1:A927 -  -  -  -  ConvertBuffer: 								; general usage
  131 D1:A927 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  132 D1:A967 -  -  -  -  
  133 D1:A967 -  -  -  -  ; ***************************************************************************************
  134 D1:A967 -  -  -  -  ;
  135 D1:A967 -  -  -  -  ;									Changes and Updates
  136 D1:A967 -  -  -  -  ;
  137 D1:A967 -  -  -  -  ; ***************************************************************************************
  138 D1:A967 -  -  -  -  ;
  139 D1:A967 -  -  -  -  ;		Date			Notes
  140 D1:A967 -  -  -  -  ;		==== 			=====
  141 D1:A967 -  -  -  -  ;
  142 D1:A967 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 D1:A967 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A967 -  -  -  -  ; ***************************************************************************************
    2 D1:A967 -  -  -  -  ; ***************************************************************************************
    3 D1:A967 -  -  -  -  ;
    4 D1:A967 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A967 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A967 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A967 -  -  -  -  ;		Reviewed :	No
    8 D1:A967 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A967 -  -  -  -  ;
   10 D1:A967 -  -  -  -  ; ***************************************************************************************
   11 D1:A967 -  -  -  -  ; ***************************************************************************************
   12 D1:A967 -  -  -  -  
   13 D1:A967 -  -  -  -  ; ***************************************************************************************
   14 D1:A967 -  -  -  -  ;
   15 D1:A967 -  -  -  -  ;									ASSERT command
   16 D1:A967 -  -  -  -  ;
   17 D1:A967 -  -  -  -  ; ***************************************************************************************
   18 D1:A967 -  -  -  -  
   19 D1:A967 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A967 CD E2 AE D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A96B 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A971 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A972 3E 01 C3 AF 
              AC D1 -  -  		ERR_ASSERT
   24 D1:A978 -  -  -  -  
   25 D1:A978 -  -  -  -  ; ***************************************************************************************
   26 D1:A978 -  -  -  -  ;
   27 D1:A978 -  -  -  -  ;									Changes and Updates
   28 D1:A978 -  -  -  -  ;
   29 D1:A978 -  -  -  -  ; ***************************************************************************************
   30 D1:A978 -  -  -  -  ;
   31 D1:A978 -  -  -  -  ;		Date			Notes
   32 D1:A978 -  -  -  -  ;		==== 			=====
   33 D1:A978 -  -  -  -  ;
   34 D1:A978 -  -  -  -  ; ***************************************************************************************
   35 D1:A978 -  -  -  -  		
Listing for file "_build.asm"
   15 D1:A978 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A978 -  -  -  -  ; ***************************************************************************************
    2 D1:A978 -  -  -  -  ; ***************************************************************************************
    3 D1:A978 -  -  -  -  ;
    4 D1:A978 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A978 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A978 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A978 -  -  -  -  ;		Reviewed :	No
    8 D1:A978 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A978 -  -  -  -  ;
   10 D1:A978 -  -  -  -  ; ***************************************************************************************
   11 D1:A978 -  -  -  -  ; ***************************************************************************************
   12 D1:A978 -  -  -  -  
   13 D1:A978 -  -  -  -  BadCmd_Def: 		;; [def]
   14 D1:A978 -  -  -  -  BadCmd_Data: 		;; [data]
   15 D1:A978 -  -  -  -  BadCmd_Then: 		;; [then]
   16 D1:A978 -  -  -  -  BadCmd_RBracket: 	;; [)]
   17 D1:A978 -  -  -  -  BadCmd_LSBracket: 	;; [[]
   18 D1:A978 -  -  -  -  BadCmd_RSBracket: 	;; []]
   19 D1:A978 -  -  -  -  BadCmd_Comma: 		;; [,]
   20 D1:A978 -  -  -  -  BadCmd_Comma: 		;; [~]
   21 D1:A978 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   22 D1:A978 -  -  -  -  BadCmd_To: 			;; [to]
   23 D1:A978 -  -  -  -  BadCmd_Step: 		;; [step]
   24 D1:A978 C3 19 AD D1 		jp 		SyntaxError
   25 D1:A97C -  -  -  -  
   26 D1:A97C -  -  -  -  ; ***************************************************************************************
   27 D1:A97C -  -  -  -  ;
   28 D1:A97C -  -  -  -  ;									Changes and Updates
   29 D1:A97C -  -  -  -  ;
   30 D1:A97C -  -  -  -  ; ***************************************************************************************
   31 D1:A97C -  -  -  -  ;
   32 D1:A97C -  -  -  -  ;		Date			Notes
   33 D1:A97C -  -  -  -  ;		==== 			=====
   34 D1:A97C -  -  -  -  ;
   35 D1:A97C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A97C -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A97C -  -  -  -  ; ***************************************************************************************
    2 D1:A97C -  -  -  -  ; ***************************************************************************************
    3 D1:A97C -  -  -  -  ;
    4 D1:A97C -  -  -  -  ;		Name : 		colon.asm
    5 D1:A97C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A97C -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A97C -  -  -  -  ;		Reviewed :	No
    8 D1:A97C -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A97C -  -  -  -  ;
   10 D1:A97C -  -  -  -  ; ***************************************************************************************
   11 D1:A97C -  -  -  -  ; ***************************************************************************************
   12 D1:A97C -  -  -  -  
   13 D1:A97C -  -  -  -  ; ***************************************************************************************
   14 D1:A97C -  -  -  -  ;
   15 D1:A97C -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A97C -  -  -  -  ;
   17 D1:A97C -  -  -  -  ; ***************************************************************************************
   18 D1:A97C -  -  -  -  
   19 D1:A97C -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A97C C9 -  -  -  		ret
   21 D1:A97D -  -  -  -  
   22 D1:A97D -  -  -  -  ; ***************************************************************************************
   23 D1:A97D -  -  -  -  ;
   24 D1:A97D -  -  -  -  ;									Changes and Updates
   25 D1:A97D -  -  -  -  ;
   26 D1:A97D -  -  -  -  ; ***************************************************************************************
   27 D1:A97D -  -  -  -  ;
   28 D1:A97D -  -  -  -  ;		Date			Notes
   29 D1:A97D -  -  -  -  ;		==== 			=====
   30 D1:A97D -  -  -  -  ;
   31 D1:A97D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A97D -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A97D -  -  -  -  ; ***************************************************************************************
    2 D1:A97D -  -  -  -  ; ***************************************************************************************
    3 D1:A97D -  -  -  -  ;
    4 D1:A97D -  -  -  -  ;		Name : 		dim.asm
    5 D1:A97D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A97D -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A97D -  -  -  -  ;		Reviewed :	No
    8 D1:A97D -  -  -  -  ;		Purpose :	Dim command
    9 D1:A97D -  -  -  -  ;
   10 D1:A97D -  -  -  -  ; ***************************************************************************************
   11 D1:A97D -  -  -  -  ; ***************************************************************************************
   12 D1:A97D -  -  -  -  
   13 D1:A97D -  -  -  -  ; ***************************************************************************************
   14 D1:A97D -  -  -  -  ;
   15 D1:A97D -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:A97D -  -  -  -  ;	
   17 D1:A97D -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:A97D -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:A97D -  -  -  -  ;								(can be comma chained)
   20 D1:A97D -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:A97D -  -  -  -  ;
   22 D1:A97D -  -  -  -  ; ***************************************************************************************
   23 D1:A97D -  -  -  -  
   24 D1:A97D -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:A97D -  -  -  -  		;
   26 D1:A97D -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A97D -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A97D -  -  -  -  		;
   29 D1:A97D DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A97F D1 -  -  -  		pop 	de
   31 D1:A980 -  -  -  -  		;
   32 D1:A980 DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A983 FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A985 D2 19 AD D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A989 -  -  -  -  _DISkip:
   36 D1:A989 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A98B DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A98E FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A990 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A992 -  -  -  -  		;
   41 D1:A992 DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A995 FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A997 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A998 CC F9 A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A99C F1 -  -  -  		pop 	af
   46 D1:A99D C4 B1 A9 D1 		call 	nz,DimensionAllocate
   47 D1:A9A1 -  -  -  -  		;
   48 D1:A9A1 DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A9A4 FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A9A6 C0 -  -  -  		ret 	nz
   51 D1:A9A7 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A9A9 18 D2 -  -  		jr 		Command_DIM
   53 D1:A9AB -  -  -  -  
   54 D1:A9AB -  -  -  -  _CDError:
   55 D1:A9AB 3E 05 C3 AF 
              AC D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:A9B1 -  -  -  -  
   57 D1:A9B1 -  -  -  -  ; ***************************************************************************************
   58 D1:A9B1 -  -  -  -  ;
   59 D1:A9B1 -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:A9B1 -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:A9B1 -  -  -  -  ;
   62 D1:A9B1 -  -  -  -  ; ***************************************************************************************
   63 D1:A9B1 -  -  -  -  
   64 D1:A9B1 -  -  -  -  DimensionAllocate:
   65 D1:A9B1 D5 -  -  -  		push 	de 							; save start on stack
   66 D1:A9B2 DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:A9B4 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:A9B6 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   69 D1:A9BA CD 68 B6 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:A9BE CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:A9C0 28 E9 -  -  		jr 		z,_CDError
   72 D1:A9C2 CB 41 -  -  		bit 	CIsString,c
   73 D1:A9C4 20 E5 -  -  		jr 		nz,_CDError
   74 D1:A9C6 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:A9C8 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:A9C9 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:A9CB CD A3 AC D1 		call 	CheckNextA 					; check for [
   78 D1:A9CF CD E2 AE D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:A9D3 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:A9D5 CD A3 AC D1 		call 	CheckNextA 					; check for ]
   81 D1:A9D9 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:A9DA 7C -  -  -  		ld 		a,h
   83 D1:A9DB B5 -  -  -  		or 		l
   84 D1:A9DC 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:A9DE D9 -  -  -  		exx
   86 D1:A9DF 23 -  -  -  		inc 	hl
   87 D1:A9E0 D9 -  -  -  		exx
   88 D1:A9E1 -  -  -  -  _DANoCarry:
   89 D1:A9E1 D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:A9E2 7C -  -  -  		ld 		a,h
   91 D1:A9E3 B5 -  -  -  		or 		l
   92 D1:A9E4 D9 -  -  -  		exx
   93 D1:A9E5 20 C4 -  -  		jr 		nz,_CDError
   94 D1:A9E7 CD 21 B3 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:A9EB EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:A9EC E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:A9ED ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:A9F3 AF -  -  -  		xor 	a 							; autocreate off
   99 D1:A9F4 32 01 A9 D1 		ld 		(AllowAutoCreate),a
  100 D1:A9F8 C9 -  -  -  		ret
  101 D1:A9F9 -  -  -  -  
  102 D1:A9F9 -  -  -  -  ; ***************************************************************************************
  103 D1:A9F9 -  -  -  -  ;
  104 D1:A9F9 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:A9F9 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:A9F9 -  -  -  -  ;
  107 D1:A9F9 -  -  -  -  ; ***************************************************************************************
  108 D1:A9F9 -  -  -  -  
  109 D1:A9F9 -  -  -  -  DimensionArray:
  110 D1:A9F9 D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:A9FA -  -  -  -  		;
  112 D1:A9FA CD E2 AE D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:A9FE 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:A9FF E6 FC -  -  		and 	$FC
  115 D1:AA01 D9 -  -  -  		exx
  116 D1:AA02 B4 -  -  -  		or 		h
  117 D1:AA03 B5 -  -  -  		or 		l
  118 D1:AA04 D9 -  -  -  		exx
  119 D1:AA05 20 A4 -  -  		jr 		nz,_CDError
  120 D1:AA07 -  -  -  -  		;
  121 D1:AA07 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:AA09 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:AA0A -  -  -  -  		;
  124 D1:AA0A CD F5 B6 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AA0E CD 31 B7 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AA12 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AA14 -  -  -  -  		;
  128 D1:AA14 E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AA15 E5 -  -  -  		push 	hl
  130 D1:AA16 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AA17 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AA18 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AA19 29 -  -  -  		add 	hl,hl
  134 D1:AA1A CD 25 B6 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AA1E -  -  -  -  		;
  136 D1:AA1E D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AA1F 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AA23 09 -  -  -  		add 	hl,bc
  139 D1:AA24 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AA2A DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AA2C C9 -  -  -  		ret		
  142 D1:AA2D -  -  -  -  
  143 D1:AA2D -  -  -  -  
  144 D1:AA2D -  -  -  -  ; ***************************************************************************************
  145 D1:AA2D -  -  -  -  ;
  146 D1:AA2D -  -  -  -  ;									Changes and Updates
  147 D1:AA2D -  -  -  -  ;
  148 D1:AA2D -  -  -  -  ; ***************************************************************************************
  149 D1:AA2D -  -  -  -  ;
  150 D1:AA2D -  -  -  -  ;		Date			Notes
  151 D1:AA2D -  -  -  -  ;		==== 			=====
  152 D1:AA2D -  -  -  -  ;
  153 D1:AA2D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 D1:AA2D -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AA2D -  -  -  -  ; ***************************************************************************************
    2 D1:AA2D -  -  -  -  ; ***************************************************************************************
    3 D1:AA2D -  -  -  -  ;
    4 D1:AA2D -  -  -  -  ;		Name : 		end.asm
    5 D1:AA2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA2D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA2D -  -  -  -  ;		Reviewed :	No
    8 D1:AA2D -  -  -  -  ;		Purpose :	End command
    9 D1:AA2D -  -  -  -  ;
   10 D1:AA2D -  -  -  -  ; ***************************************************************************************
   11 D1:AA2D -  -  -  -  ; ***************************************************************************************
   12 D1:AA2D -  -  -  -  
   13 D1:AA2D -  -  -  -  ; ***************************************************************************************
   14 D1:AA2D -  -  -  -  ;
   15 D1:AA2D -  -  -  -  ;										END command
   16 D1:AA2D -  -  -  -  ;
   17 D1:AA2D -  -  -  -  ; ***************************************************************************************
   18 D1:AA2D -  -  -  -  
   19 D1:AA2D -  -  -  -  Command_END: 	;; [end]
   20 D1:AA2D 3E 00 C3 AF 
              AC D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AA33 -  -  -  -  
   22 D1:AA33 -  -  -  -  ; ***************************************************************************************
   23 D1:AA33 -  -  -  -  ;
   24 D1:AA33 -  -  -  -  ;									Changes and Updates
   25 D1:AA33 -  -  -  -  ;
   26 D1:AA33 -  -  -  -  ; ***************************************************************************************
   27 D1:AA33 -  -  -  -  ;
   28 D1:AA33 -  -  -  -  ;		Date			Notes
   29 D1:AA33 -  -  -  -  ;		==== 			=====
   30 D1:AA33 -  -  -  -  ;
   31 D1:AA33 -  -  -  -  ; ***************************************************************************************
   32 D1:AA33 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA33 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AA33 -  -  -  -  ; ***************************************************************************************
    2 D1:AA33 -  -  -  -  ; ***************************************************************************************
    3 D1:AA33 -  -  -  -  ;
    4 D1:AA33 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AA33 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA33 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA33 -  -  -  -  ;		Reviewed :	None
    8 D1:AA33 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AA33 -  -  -  -  ;
   10 D1:AA33 -  -  -  -  ; ***************************************************************************************
   11 D1:AA33 -  -  -  -  ; ***************************************************************************************
   12 D1:AA33 -  -  -  -  
   13 D1:AA33 -  -  -  -  ; ***************************************************************************************
   14 D1:AA33 -  -  -  -  ;
   15 D1:AA33 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AA33 -  -  -  -  ;
   17 D1:AA33 -  -  -  -  ; ***************************************************************************************
   18 D1:AA33 -  -  -  -  
   19 D1:AA33 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AA33 DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AA38 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA3C DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA3F DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA41 -  -  -  -  		;
   25 D1:AA41 ED 7B E1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA46 C3 4A AB D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA4A -  -  -  -  
   28 D1:AA4A -  -  -  -  ; ***************************************************************************************
   29 D1:AA4A -  -  -  -  ;
   30 D1:AA4A -  -  -  -  ;									Changes and Updates
   31 D1:AA4A -  -  -  -  ;
   32 D1:AA4A -  -  -  -  ; ***************************************************************************************
   33 D1:AA4A -  -  -  -  ;
   34 D1:AA4A -  -  -  -  ;		Date			Notes
   35 D1:AA4A -  -  -  -  ;		==== 			=====
   36 D1:AA4A -  -  -  -  ;
   37 D1:AA4A -  -  -  -  ; ***************************************************************************************
   38 D1:AA4A -  -  -  -  		
Listing for file "_build.asm"
   20 D1:AA4A -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA4A -  -  -  -  ; ***************************************************************************************
    2 D1:AA4A -  -  -  -  ; ***************************************************************************************
    3 D1:AA4A -  -  -  -  ;
    4 D1:AA4A -  -  -  -  ;		Name : 		let.asm
    5 D1:AA4A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA4A -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA4A -  -  -  -  ;		Reviewed :	No
    8 D1:AA4A -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA4A -  -  -  -  ;
   10 D1:AA4A -  -  -  -  ; ***************************************************************************************
   11 D1:AA4A -  -  -  -  ; ***************************************************************************************
   12 D1:AA4A -  -  -  -  
   13 D1:AA4A -  -  -  -  ; ***************************************************************************************
   14 D1:AA4A -  -  -  -  ;
   15 D1:AA4A -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA4A -  -  -  -  ;
   17 D1:AA4A -  -  -  -  ; ***************************************************************************************
   18 D1:AA4A -  -  -  -  
   19 D1:AA4A -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA4A DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA4D FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA4F 28 2F -  -  		jr 		z,_CLString
   23 D1:AA51 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA53 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA55 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA57 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA5B -  -  -  -  _CLNoAuto:
   28 D1:AA5B 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA5D CD 64 AE D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA61 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA63 CA 19 AD D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA67 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA68 C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA69 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA6A 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA6E 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA70 CD A3 AC D1 		call 	CheckNextA
   38 D1:AA74 -  -  -  -  
   39 D1:AA74 CD DA AE D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA78 -  -  -  -  
   41 D1:AA78 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA79 43 -  -  -  		ld 		b,e 						
   43 D1:AA7A D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA7B -  -  -  -  		;
   45 D1:AA7B -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA7B -  -  -  -  		;
   47 D1:AA7B CD 99 AA D1 		call 	WriteHLToDE
   48 D1:AA7F C9 -  -  -  		ret
   49 D1:AA80 -  -  -  -  		;
   50 D1:AA80 -  -  -  -  		; 		String assignment code.
   51 D1:AA80 -  -  -  -  		;
   52 D1:AA80 -  -  -  -  _CLString:
   53 D1:AA80 CD CB AE D1 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 D1:AA84 E5 -  -  -  		push 	hl 							; save target expression
   55 D1:AA85 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 D1:AA87 CD A3 AC D1 		call 	CheckNextA
   57 D1:AA8B CD FC AE D1 		call 	EvaluateString 				; get the thing to copy
   58 D1:AA8F D1 -  -  -  		pop 	de 							; target in DE.
   59 D1:AA90 -  -  -  -  _CLCopy:
   60 D1:AA90 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 D1:AA91 12 -  -  -  		ld 		(de),a
   62 D1:AA92 23 -  -  -  		inc 	hl
   63 D1:AA93 13 -  -  -  		inc 	de
   64 D1:AA94 FE 20 -  -  		cp 		$20 						; until control character
   65 D1:AA96 30 F8 -  -  		jr 		nc,_CLCopy
   66 D1:AA98 C9 -  -  -  		ret
   67 D1:AA99 -  -  -  -  
   68 D1:AA99 -  -  -  -  ; ***************************************************************************************
   69 D1:AA99 -  -  -  -  ;
   70 D1:AA99 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 D1:AA99 -  -  -  -  ;
   72 D1:AA99 -  -  -  -  ; ***************************************************************************************
   73 D1:AA99 -  -  -  -  
   74 D1:AA99 -  -  -  -  WriteHLToDE:
   75 D1:AA99 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 D1:AA9B C2 0D AD D1 		jp 		nz,TypeMismatch
   77 D1:AA9F -  -  -  -  		;
   78 D1:AA9F -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 D1:AA9F -  -  -  -  		;		
   80 D1:AA9F -  -  -  -  _WHDWriteNumber:
   81 D1:AA9F EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 D1:AAA0 D9 -  -  -  		exx
   83 D1:AAA1 EB -  -  -  		ex 		de,hl
   84 D1:AAA2 D9 -  -  -  		exx
   85 D1:AAA3 -  -  -  -  
   86 D1:AAA3 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 D1:AAA4 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 D1:AAA5 72 -  -  -  		ld 		(hl),d
   89 D1:AAA6 23 -  -  -  		inc 	hl
   90 D1:AAA7 E5 -  -  -  		push 	hl
   91 D1:AAA8 D9 -  -  -  		exx
   92 D1:AAA9 E1 -  -  -  		pop 	hl
   93 D1:AAAA 73 -  -  -  		ld 		(hl),e
   94 D1:AAAB 23 -  -  -  		inc 	hl
   95 D1:AAAC 72 -  -  -  		ld 		(hl),d
   96 D1:AAAD D9 -  -  -  		exx
   97 D1:AAAE -  -  -  -  
   98 D1:AAAE C9 -  -  -  		ret
   99 D1:AAAF -  -  -  -  
  100 D1:AAAF -  -  -  -  ; ***************************************************************************************
  101 D1:AAAF -  -  -  -  ;
  102 D1:AAAF -  -  -  -  ;									Changes and Updates
  103 D1:AAAF -  -  -  -  ;
  104 D1:AAAF -  -  -  -  ; ***************************************************************************************
  105 D1:AAAF -  -  -  -  ;
  106 D1:AAAF -  -  -  -  ;		Date			Notes
  107 D1:AAAF -  -  -  -  ;		==== 			=====
  108 D1:AAAF -  -  -  -  ;
  109 D1:AAAF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AAAF -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AAAF -  -  -  -  ; ***************************************************************************************
    2 D1:AAAF -  -  -  -  ; ***************************************************************************************
    3 D1:AAAF -  -  -  -  ;
    4 D1:AAAF -  -  -  -  ;		Name : 		print.asm
    5 D1:AAAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAAF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAAF -  -  -  -  ;		Reviewed :	No
    8 D1:AAAF -  -  -  -  ;		Purpose :	Print command
    9 D1:AAAF -  -  -  -  ;
   10 D1:AAAF -  -  -  -  ; ***************************************************************************************
   11 D1:AAAF -  -  -  -  ; ***************************************************************************************
   12 D1:AAAF -  -  -  -  
   13 D1:AAAF -  -  -  -  ; ***************************************************************************************
   14 D1:AAAF -  -  -  -  ;
   15 D1:AAAF -  -  -  -  ;										PRINT command
   16 D1:AAAF -  -  -  -  ;
   17 D1:AAAF -  -  -  -  ; ***************************************************************************************
   18 D1:AAAF -  -  -  -  
   19 D1:AAAF -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AAAF 3E F6 -  -  		ld 		a,-10 						; default base.
   21 D1:AAB1 32 03 A9 D1 		ld 		(PrintBase),a
   22 D1:AAB5 -  -  -  -  		;
   23 D1:AAB5 -  -  -  -  		;		Main loop
   24 D1:AAB5 -  -  -  -  		;
   25 D1:AAB5 -  -  -  -  _CPRLoop:
   26 D1:AAB5 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 D1:AAB8 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 D1:AABA 28 59 -  -  		jr 		z,_CPRExitNL
   29 D1:AABC FE A7 -  -  		cp 		KWD_COLON 	
   30 D1:AABE 28 55 -  -  		jr 		z,_CPRExitNL
   31 D1:AAC0 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 D1:AAC2 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 D1:AAC4 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 D1:AAC6 28 34 -  -  		jr 		z,_CPRTab
   35 D1:AAC8 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 D1:AACA 28 2A -  -  		jr 		z,_CPRNewLine
   37 D1:AACC FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 D1:AACE 28 1C -  -  		jr 		z,_CPRHexMode
   39 D1:AAD0 -  -  -  -  		;
   40 D1:AAD0 CD DA AE D1 		call 	EvaluateValue 				; so it must be an expression.		
   41 D1:AAD4 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 D1:AAD6 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 D1:AAD8 -  -  -  -  		;
   44 D1:AAD8 3A 03 A9 D1 		ld 		a,(PrintBase)				; current print mode.
   45 D1:AADC -  -  -  -  _CPRPrintNumber:
   46 D1:AADC 01 27 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AAE0 C5 -  -  -  		push 	bc
   48 D1:AAE1 CD 9D BC D1 		call 	Int32ToString 				; convert to string
   49 D1:AAE5 E1 -  -  -  		pop 	hl
   50 D1:AAE6 -  -  -  -  		;
   51 D1:AAE6 -  -  -  -  		; 		Print text at HL.
   52 D1:AAE6 -  -  -  -  		;
   53 D1:AAE6 -  -  -  -  _CPRPrintHL:
   54 D1:AAE6 CD 1A B6 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AAEA 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AAEC -  -  -  -  		;
   57 D1:AAEC -  -  -  -  		;		Hex mode (~)
   58 D1:AAEC -  -  -  -  		;
   59 D1:AAEC -  -  -  -  _CPRHexMode:		
   60 D1:AAEC 3E 10 -  -  		ld 		a,16
   61 D1:AAEE 32 03 A9 D1 		ld 		(PrintBase),a
   62 D1:AAF2 DD 23 -  -  		inc 	ix
   63 D1:AAF4 18 BF -  -  		jr 		_CPRLoop
   64 D1:AAF6 -  -  -  -  		;
   65 D1:AAF6 -  -  -  -  		; 		New line (')
   66 D1:AAF6 -  -  -  -  		;
   67 D1:AAF6 -  -  -  -  _CPRNewLine:
   68 D1:AAF6 CD 38 BD D1 		call 	SYSPrintCRLF
   69 D1:AAFA 18 0C -  -  		jr 		_CPRCheckNext
   70 D1:AAFC -  -  -  -  		;
   71 D1:AAFC -  -  -  -  		; 		Tab command (,)
   72 D1:AAFC -  -  -  -  		;
   73 D1:AAFC -  -  -  -  _CPRTab:
   74 D1:AAFC 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 D1:AAFE CD 10 BD D1 		call 	SYSPrintChar
   76 D1:AB02 -  -  -  -  		;
   77 D1:AB02 -  -  -  -  		;		Set to base 10 then check next character
   78 D1:AB02 -  -  -  -  		;
   79 D1:AB02 -  -  -  -  _CPRCheckNext10:		
   80 D1:AB02 3E F6 -  -  		ld 		a,-10
   81 D1:AB04 32 03 A9 D1 		ld 		(PrintBase),a
   82 D1:AB08 -  -  -  -  		;
   83 D1:AB08 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 D1:AB08 -  -  -  -  		;		
   85 D1:AB08 -  -  -  -  _CPRCheckNext:
   86 D1:AB08 DD 23 -  -  		inc 	ix 							; consume current
   87 D1:AB0A DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 D1:AB0D FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 D1:AB0F C8 -  -  -  		ret 	z
   90 D1:AB10 FE A7 -  -  		cp 		KWD_COLON
   91 D1:AB12 C8 -  -  -  		ret 	z
   92 D1:AB13 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 D1:AB15 -  -  -  -  		;
   94 D1:AB15 -  -  -  -  		;		Found EOL or : not after ; ,
   95 D1:AB15 -  -  -  -  		;
   96 D1:AB15 -  -  -  -  _CPRExitNL:
   97 D1:AB15 CD 38 BD D1 		call 	SYSPrintCRLF 				; do CR/LF
   98 D1:AB19 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 D1:AB1A -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AB1A -  -  -  -  ; ***************************************************************************************
    2 D1:AB1A -  -  -  -  ; ***************************************************************************************
    3 D1:AB1A -  -  -  -  ;
    4 D1:AB1A -  -  -  -  ;		Name : 		rem.asm
    5 D1:AB1A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB1A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB1A -  -  -  -  ;		Reviewed :	No
    8 D1:AB1A -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AB1A -  -  -  -  ;
   10 D1:AB1A -  -  -  -  ; ***************************************************************************************
   11 D1:AB1A -  -  -  -  ; ***************************************************************************************
   12 D1:AB1A -  -  -  -  
   13 D1:AB1A -  -  -  -  ; ***************************************************************************************
   14 D1:AB1A -  -  -  -  ;
   15 D1:AB1A -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AB1A -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AB1A -  -  -  -  ;
   18 D1:AB1A -  -  -  -  ; ***************************************************************************************
   19 D1:AB1A -  -  -  -  
   20 D1:AB1A -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AB1A -  -  -  -  Command_REM2: 	;; [']
   22 D1:AB1A DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AB1D FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 D1:AB1F C8 -  -  -  		ret 	z
   25 D1:AB20 DD 23 -  -  		inc 	ix
   26 D1:AB22 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 D1:AB24 C8 -  -  -  		ret 	z
   28 D1:AB25 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AB27 C2 19 AD D1 		jp 		nz,SyntaxError
   30 D1:AB2B -  -  -  -  		;		
   31 D1:AB2B 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AB2F DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AB32 13 -  -  -  		inc 	de 
   34 D1:AB33 13 -  -  -  		inc 	de
   35 D1:AB34 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AB36 C9 -  -  -  		ret
   37 D1:AB37 -  -  -  -  
   38 D1:AB37 -  -  -  -  ; ***************************************************************************************
   39 D1:AB37 -  -  -  -  ;
   40 D1:AB37 -  -  -  -  ;									Changes and Updates
   41 D1:AB37 -  -  -  -  ;
   42 D1:AB37 -  -  -  -  ; ***************************************************************************************
   43 D1:AB37 -  -  -  -  ;
   44 D1:AB37 -  -  -  -  ;		Date			Notes
   45 D1:AB37 -  -  -  -  ;		==== 			=====
   46 D1:AB37 -  -  -  -  ;
   47 D1:AB37 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AB37 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AB37 -  -  -  -  ; ***************************************************************************************
    2 D1:AB37 -  -  -  -  ; ***************************************************************************************
    3 D1:AB37 -  -  -  -  ;
    4 D1:AB37 -  -  -  -  ;		Name : 		run.asm
    5 D1:AB37 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB37 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB37 -  -  -  -  ;		Reviewed :	No
    8 D1:AB37 -  -  -  -  ;		Purpose :	Run command
    9 D1:AB37 -  -  -  -  ;
   10 D1:AB37 -  -  -  -  ; ***************************************************************************************
   11 D1:AB37 -  -  -  -  ; ***************************************************************************************
   12 D1:AB37 -  -  -  -  
   13 D1:AB37 -  -  -  -  ; ***************************************************************************************
   14 D1:AB37 -  -  -  -  ;
   15 D1:AB37 -  -  -  -  ;										RUN command
   16 D1:AB37 -  -  -  -  ;
   17 D1:AB37 -  -  -  -  ; ***************************************************************************************
   18 D1:AB37 -  -  -  -  
   19 D1:AB37 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AB37 CD 43 B3 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AB3B -  -  -  -  
   22 D1:AB3B DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AB40 ED 73 E1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AB45 AF -  -  -  		xor 	a
   25 D1:AB46 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AB4A -  -  -  -  		;
   27 D1:AB4A -  -  -  -  		; 		New line at IX.
   28 D1:AB4A -  -  -  -  		;
   29 D1:AB4A -  -  -  -  CRNewLine:
   30 D1:AB4A DD 22 DD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AB4F -  -  -  -  		;
   32 D1:AB4F DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AB52 B7 -  -  -  		or 		a
   34 D1:AB53 CA 2D AA D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AB57 -  -  -  -  		;
   36 D1:AB57 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AB59 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AB5B DD 23 -  -  		inc 	ix
   39 D1:AB5D -  -  -  -  		;
   40 D1:AB5D -  -  -  -  		; 		New command at IX
   41 D1:AB5D -  -  -  -  		;
   42 D1:AB5D -  -  -  -  _CRNewCommand:	
   43 D1:AB5D DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB60 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB61 F2 9C AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB65 -  -  -  -  		;
   47 D1:AB65 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB67 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB69 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB6B D2 8C AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB6F -  -  -  -  		;
   52 D1:AB6F -  -  -  -  _CRDoCommand:		
   53 D1:AB6F E6 7F 21 00 
              00 00 6F 29 
              29 11 A6 B9 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB84 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB86 CD E5 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB8A 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB8C -  -  -  -  		;
   58 D1:AB8C -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB8C -  -  -  -  		;
   60 D1:AB8C -  -  -  -  		;
   61 D1:AB8C -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB8C -  -  -  -  		;		
   63 D1:AB8C -  -  -  -  _CRAlternateLets:		
   64 D1:AB8C FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB8E 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB90 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB92 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB94 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB96 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB98 C3 19 AD D1 		jp 		SyntaxError
   71 D1:AB9C -  -  -  -  		;
   72 D1:AB9C -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB9C -  -  -  -  		;
   74 D1:AB9C -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB9C FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB9E D2 19 AD D1 		jp 		nc,SyntaxError
   77 D1:ABA2 -  -  -  -  _CRAssignmentLet:		
   78 D1:ABA2 CD 4A AA D1 		call	Command_LET 				; do LET.
   79 D1:ABA6 C3 5D AB D1 		jp 		_CRNewCommand
   80 D1:ABAA -  -  -  -  
   81 D1:ABAA -  -  -  -  ; ***************************************************************************************
   82 D1:ABAA -  -  -  -  ;
   83 D1:ABAA -  -  -  -  ;									Changes and Updates
   84 D1:ABAA -  -  -  -  ;
   85 D1:ABAA -  -  -  -  ; ***************************************************************************************
   86 D1:ABAA -  -  -  -  ;
   87 D1:ABAA -  -  -  -  ;		Date			Notes
   88 D1:ABAA -  -  -  -  ;		==== 			=====
   89 D1:ABAA -  -  -  -  ;
   90 D1:ABAA -  -  -  -  ; ***************************************************************************************
   91 D1:ABAA -  -  -  -  		
Listing for file "_build.asm"
   24 D1:ABAA -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:ABAA -  -  -  -  ; ***************************************************************************************
    2 D1:ABAA -  -  -  -  ; ***************************************************************************************
    3 D1:ABAA -  -  -  -  ;
    4 D1:ABAA -  -  -  -  ;		Name : 		stop.asm
    5 D1:ABAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABAA -  -  -  -  ;		Reviewed :	No
    8 D1:ABAA -  -  -  -  ;		Purpose :	Stop command
    9 D1:ABAA -  -  -  -  ;
   10 D1:ABAA -  -  -  -  ; ***************************************************************************************
   11 D1:ABAA -  -  -  -  ; ***************************************************************************************
   12 D1:ABAA -  -  -  -  
   13 D1:ABAA -  -  -  -  ; ***************************************************************************************
   14 D1:ABAA -  -  -  -  ;
   15 D1:ABAA -  -  -  -  ;										STOP command
   16 D1:ABAA -  -  -  -  ;
   17 D1:ABAA -  -  -  -  ; ***************************************************************************************
   18 D1:ABAA -  -  -  -  
   19 D1:ABAA -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:ABAA 3E 17 C3 AF 
              AC D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:ABB0 -  -  -  -  
   22 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   23 D1:ABB0 -  -  -  -  ;
   24 D1:ABB0 -  -  -  -  ;									Changes and Updates
   25 D1:ABB0 -  -  -  -  ;
   26 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   27 D1:ABB0 -  -  -  -  ;
   28 D1:ABB0 -  -  -  -  ;		Date			Notes
   29 D1:ABB0 -  -  -  -  ;		==== 			=====
   30 D1:ABB0 -  -  -  -  ;
   31 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   32 D1:ABB0 -  -  -  -  		
Listing for file "_build.asm"
   25 D1:ABB0 -  -  -  -  #include "core/commands/vdu.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/vdu.asm"
    1 D1:ABB0 -  -  -  -  ; ***************************************************************************************
    2 D1:ABB0 -  -  -  -  ; ***************************************************************************************
    3 D1:ABB0 -  -  -  -  ;
    4 D1:ABB0 -  -  -  -  ;		Name : 		vdu.asm
    5 D1:ABB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABB0 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:ABB0 -  -  -  -  ;		Reviewed :	No
    8 D1:ABB0 -  -  -  -  ;		Purpose :	Vdu command
    9 D1:ABB0 -  -  -  -  ;
   10 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   11 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   12 D1:ABB0 -  -  -  -  
   13 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   14 D1:ABB0 -  -  -  -  ;
   15 D1:ABB0 -  -  -  -  ;										END command
   16 D1:ABB0 -  -  -  -  ;
   17 D1:ABB0 -  -  -  -  ; ***************************************************************************************
   18 D1:ABB0 -  -  -  -  
   19 D1:ABB0 -  -  -  -  Command_VDU: 	;; [vdu]
   20 D1:ABB0 DD 7E 00 -  		ld 		a,(ix+0) 					; exit if : or EOL
   21 D1:ABB3 FE 80 -  -  		cp 		KWC_EOL_MARKER
   22 D1:ABB5 C8 -  -  -  		ret 	z
   23 D1:ABB6 FE A7 -  -  		cp 		KWD_COLON
   24 D1:ABB8 C8 -  -  -  		ret 	z
   25 D1:ABB9 -  -  -  -  		;
   26 D1:ABB9 CD E2 AE D1 		call 	EvaluateInteger 			; evaluate integer value
   27 D1:ABBD D9 -  -  -  		exx 								; check 0-FFFF
   28 D1:ABBE 7C -  -  -  		ld 		a,h
   29 D1:ABBF B5 -  -  -  		or 		l
   30 D1:ABC0 D9 -  -  -  		exx
   31 D1:ABC1 C2 13 AD D1 		jp  	nz,BadValue
   32 D1:ABC5 E5 -  -  -  		push 	hl 							; save on stack
   33 D1:ABC6 7D -  -  -  		ld 		a,l 						; do the LSB anyway
   34 D1:ABC7 CD 10 BD D1 		call 	SYSPrintChar
   35 D1:ABCB E1 -  -  -  		pop 	hl 							; get upper back
   36 D1:ABCC DD 7E 00 -  		ld 		a,(ix+0) 					; what follows ?
   37 D1:ABCF DD 23 -  -  		inc 	ix 
   38 D1:ABD1 FE A6 -  -  		cp 		KWD_COMMA 					
   39 D1:ABD3 28 DB -  -  		jr 		z,Command_VDU
   40 D1:ABD5 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon
   41 D1:ABD7 28 04 -  -  		jr 		z,_VDUUpper 				; print the MSB
   42 D1:ABD9 DD 2B -  -  		dec 	ix 							; go back and try again
   43 D1:ABDB 18 D3 -  -  		jr 		Command_VDU
   44 D1:ABDD -  -  -  -  
   45 D1:ABDD -  -  -  -  _VDUUpper:
   46 D1:ABDD 7C -  -  -  		ld 		a,h 						; print MSB of expr.
   47 D1:ABDE CD 10 BD D1 		call 	SYSPrintChar
   48 D1:ABE2 18 CC -  -  		jr 		Command_VDU		
   49 D1:ABE4 -  -  -  -  
   50 D1:ABE4 -  -  -  -  ; ***************************************************************************************
   51 D1:ABE4 -  -  -  -  ;
   52 D1:ABE4 -  -  -  -  ;									Changes and Updates
   53 D1:ABE4 -  -  -  -  ;
   54 D1:ABE4 -  -  -  -  ; ***************************************************************************************
   55 D1:ABE4 -  -  -  -  ;
   56 D1:ABE4 -  -  -  -  ;		Date			Notes
   57 D1:ABE4 -  -  -  -  ;		==== 			=====
   58 D1:ABE4 -  -  -  -  ;
   59 D1:ABE4 -  -  -  -  ; ***************************************************************************************
   60 D1:ABE4 -  -  -  -  		
Listing for file "_build.asm"
   26 D1:ABE4 -  -  -  -  #include "core/data/read.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
    1 D1:ABE4 -  -  -  -  ; ***************************************************************************************
    2 D1:ABE4 -  -  -  -  ; ***************************************************************************************
    3 D1:ABE4 -  -  -  -  ;
    4 D1:ABE4 -  -  -  -  ;		Name : 		read.asm
    5 D1:ABE4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABE4 -  -  -  -  ;		Date : 		9th June 2022
    7 D1:ABE4 -  -  -  -  ;		Reviewed :	No
    8 D1:ABE4 -  -  -  -  ;		Purpose :	READ command
    9 D1:ABE4 -  -  -  -  ;
   10 D1:ABE4 -  -  -  -  ; ***************************************************************************************
   11 D1:ABE4 -  -  -  -  
   12 D1:ABE4 -  -  -  -  ; ***************************************************************************************
   13 D1:ABE4 -  -  -  -  ;
   14 D1:ABE4 -  -  -  -  ;									Read Command
   15 D1:ABE4 -  -  -  -  ;
   16 D1:ABE4 -  -  -  -  ; ***************************************************************************************
   17 D1:ABE4 -  -  -  -  
   18 D1:ABE4 -  -  -  -  Command_READ: ;; [read]
   19 D1:ABE4 -  -  -  -  			;
   20 D1:ABE4 -  -  -  -  			;		READ loop
   21 D1:ABE4 -  -  -  -  			;
   22 D1:ABE4 -  -  -  -  _CRLoop:	
   23 D1:ABE4 21 09 A9 D1 			ld 		hl,DataScanRequired 	; check and clear scan required flag
   24 D1:ABE8 7E -  -  -  			ld 		a,(hl)
   25 D1:ABE9 36 00 -  -  			ld 		(hl),0 
   26 D1:ABEB B7 -  -  -  			or 		a
   27 D1:ABEC C4 2C AC D1 			call 	nz,CRScanForward 		; if required, scan forward to the first data
   28 D1:ABF0 -  -  -  -  			;
   29 D1:ABF0 3E FF -  -  			ld 		a,$FF 					; we can autocreate READ variables
   30 D1:ABF2 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   31 D1:ABF6 CD 68 B6 D1 			call 	FindVariable 			; locate the variable, address in UHL now.
   32 D1:ABFA AF -  -  -  			xor 	a 						
   33 D1:ABFB 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   34 D1:ABFF DD E5 -  -  			push 	ix 						; save position in program
   35 D1:AC01 E5 -  -  -  			push 	hl						; save variable target address.
   36 D1:AC02 -  -  -  -  			;
   37 D1:AC02 -  -  -  -  _CRLocateData:			
   38 D1:AC02 DD 2A 05 A9 
              D1 -  -  -  			ld 		ix,(ReadDataPointer) 	; current read position
   39 D1:AC07 CD E2 AE D1 			call 	EvaluateInteger 		; should be an integer there.
   40 D1:AC0B D1 -  -  -  			pop 	de 						; target address in DE
   41 D1:AC0C CD 15 B2 D1 			call 	_LCVWrite32HL 			; function to write HL'HL to DE
   42 D1:AC10 -  -  -  -  			;
   43 D1:AC10 DD 7E 00 -  			ld 		a,(ix+0) 				; get following.
   44 D1:AC13 DD 23 -  -  			inc 	ix
   45 D1:AC15 DD 22 05 A9 
              D1 -  -  -  			ld 		(ReadDataPointer),ix 	; skip over it. It should be , EOS or :
   46 D1:AC1A -  -  -  -  			;
   47 D1:AC1A EE A6 -  -  			xor 	KWD_COMMA 				; will be zero if a comma, hence no scan required
   48 D1:AC1C 32 09 A9 D1 			ld 		(DataScanRequired),a 	; update the flag accordingly.
   49 D1:AC20 -  -  -  -  			;
   50 D1:AC20 DD E1 -  -  			pop 	ix						; get program position back
   51 D1:AC22 DD 7E 00 -  			ld 		a,(ix+0) 				; is it followed by a comma
   52 D1:AC25 FE A6 -  -  			cp 		KWD_COMMA
   53 D1:AC27 C0 -  -  -  			ret 	nz 						; no, end of READ
   54 D1:AC28 DD 23 -  -  			inc 	ix 						; skip comma
   55 D1:AC2A 18 B8 -  -  			jr 		_CRLoop 				; go round again.
   56 D1:AC2C -  -  -  -  
   57 D1:AC2C -  -  -  -  ; ***************************************************************************************
   58 D1:AC2C -  -  -  -  ;
   59 D1:AC2C -  -  -  -  ;			Scan the data pointer forward to the next data statement, error if none.
   60 D1:AC2C -  -  -  -  ;
   61 D1:AC2C -  -  -  -  ; ***************************************************************************************
   62 D1:AC2C -  -  -  -  
   63 D1:AC2C -  -  -  -  CRScanForward:
   64 D1:AC2C DD E5 -  -  			push 	ix
   65 D1:AC2E DD 2A 05 A9 
              D1 -  -  -  			ld 		ix,(ReadDataPointer)
   66 D1:AC33 -  -  -  -  _CRScanLoop:
   67 D1:AC33 06 C8 -  -  			ld 		b,KWD_DATA 				; want to search for DATA or EOL
   68 D1:AC35 0E 80 -  -  			ld 		c,KWC_EOL_MARKER
   69 D1:AC37 CD 7F B5 D1 			call 	SearchForwardTokens 	; look for DATA or EOL in current line.
   70 D1:AC3B FE C8 -  -  			cp 		KWD_DATA 				; DATA found, we can exit
   71 D1:AC3D 28 12 -  -  			jr 		z,_CRScanExit
   72 D1:AC3F -  -  -  -  			;
   73 D1:AC3F DD 7E 00 -  			ld 		a,(ix+0) 				; get offset
   74 D1:AC42 DD 23 -  -  			inc 	ix 						; point to start of next line.
   75 D1:AC44 DD 23 -  -  			inc 	ix
   76 D1:AC46 DD 23 -  -  			inc 	ix
   77 D1:AC48 B7 -  -  -  			or 		a 						; if offset non zero try that line.
   78 D1:AC49 20 E8 -  -  			jr 		nz,_CRScanLoop
   79 D1:AC4B 3E 04 C3 AF 
              AC D1 -  -  			ERR_DATA 						; we have no data.
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/read.asm"
   80 D1:AC51 -  -  -  -  
   81 D1:AC51 -  -  -  -  _CRScanExit:
   82 D1:AC51 DD 22 05 A9 
              D1 -  -  -  			ld 		(ReadDataPointer),ix 	; update pointer at new DATA.
   83 D1:AC56 DD E1 -  -  			pop 	ix
   84 D1:AC58 C9 -  -  -  			ret
   85 D1:AC59 -  -  -  -  
   86 D1:AC59 -  -  -  -  ; ***************************************************************************************
   87 D1:AC59 -  -  -  -  ;
   88 D1:AC59 -  -  -  -  ;									Changes and Updates
   89 D1:AC59 -  -  -  -  ;
   90 D1:AC59 -  -  -  -  ; ***************************************************************************************
   91 D1:AC59 -  -  -  -  ;
   92 D1:AC59 -  -  -  -  ;		Date			Notes
   93 D1:AC59 -  -  -  -  ;		==== 			=====
   94 D1:AC59 -  -  -  -  ;
   95 D1:AC59 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC59 -  -  -  -  #include "core/data/restore.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/data/restore.asm"
    1 D1:AC59 -  -  -  -  ; ***************************************************************************************
    2 D1:AC59 -  -  -  -  ; ***************************************************************************************
    3 D1:AC59 -  -  -  -  ;
    4 D1:AC59 -  -  -  -  ;		Name : 		restore.asm
    5 D1:AC59 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC59 -  -  -  -  ;		Date : 		9th June 2022
    7 D1:AC59 -  -  -  -  ;		Reviewed :	No
    8 D1:AC59 -  -  -  -  ;		Purpose :	RESTORE command
    9 D1:AC59 -  -  -  -  ;
   10 D1:AC59 -  -  -  -  ; ***************************************************************************************
   11 D1:AC59 -  -  -  -  
   12 D1:AC59 -  -  -  -  ; ***************************************************************************************
   13 D1:AC59 -  -  -  -  ;
   14 D1:AC59 -  -  -  -  ;									Restore Command
   15 D1:AC59 -  -  -  -  ;
   16 D1:AC59 -  -  -  -  ; ***************************************************************************************
   17 D1:AC59 -  -  -  -  
   18 D1:AC59 -  -  -  -  Command_RESTORE: ;; [restore]
   19 D1:AC59 2A B9 A8 D1 			ld 		hl,(CodeAddress)		; HL+3 is the first token.
   20 D1:AC5D 23 -  -  -  			inc 	hl
   21 D1:AC5E 23 -  -  -  			inc 	hl
   22 D1:AC5F 23 -  -  -  			inc 	hl
   23 D1:AC60 22 05 A9 D1 			ld 		(ReadDataPointer),hl 	; scan from here.
   24 D1:AC64 3E FF -  -  			ld 		a,$FF 					; scan required first time out.
   25 D1:AC66 32 09 A9 D1 			ld 		(DataScanRequired),a
   26 D1:AC6A C9 -  -  -  			ret 					
   27 D1:AC6B -  -  -  -  
   28 D1:AC6B -  -  -  -  ; ***************************************************************************************
   29 D1:AC6B -  -  -  -  ;
   30 D1:AC6B -  -  -  -  ;									Changes and Updates
   31 D1:AC6B -  -  -  -  ;
   32 D1:AC6B -  -  -  -  ; ***************************************************************************************
   33 D1:AC6B -  -  -  -  ;
   34 D1:AC6B -  -  -  -  ;		Date			Notes
   35 D1:AC6B -  -  -  -  ;		==== 			=====
   36 D1:AC6B -  -  -  -  ;
   37 D1:AC6B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC6B -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AC6B -  -  -  -  ; ***************************************************************************************
    2 D1:AC6B -  -  -  -  ; ***************************************************************************************
    3 D1:AC6B -  -  -  -  ;
    4 D1:AC6B -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AC6B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC6B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC6B -  -  -  -  ;		Reviewed :	No
    8 D1:AC6B -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AC6B -  -  -  -  ;
   10 D1:AC6B -  -  -  -  ; ***************************************************************************************
   11 D1:AC6B -  -  -  -  ; ***************************************************************************************
   12 D1:AC6B -  -  -  -  
   13 D1:AC6B -  -  -  -  ; ***************************************************************************************
   14 D1:AC6B -  -  -  -  ;
   15 D1:AC6B -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AC6B -  -  -  -  ;
   17 D1:AC6B -  -  -  -  ; ***************************************************************************************
   18 D1:AC6B -  -  -  -  
   19 D1:AC6B -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AC6B             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AC6B             		inc 	ix
   22 D1:AC6B             		cp 		ch 							; exit if matches
   23 D1:AC6B             		ret 	z
   24 D1:AC6B             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AC6B             		jp 		ErrorHandler
   26 D1:AC6B             #endmacro
   27 D1:AC6B -  -  -  -  
   28 D1:AC6B -  -  -  -  CheckLeftBracket:
   29 D1:AC6B DD 7E 00 DD 
              23 FE 95 C8 
              3E 0F C3 AF 
              AC D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AC79 -  -  -  -  
   31 D1:AC79 -  -  -  -  CheckRightBracket:
   32 D1:AC79 DD 7E 00 DD 
              23 FE A5 C8 
              3E 11 C3 AF 
              AC D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AC87 -  -  -  -  
   34 D1:AC87 -  -  -  -  CheckDollar:
   35 D1:AC87 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0E C3 AF 
              AC D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AC95 -  -  -  -  		
   37 D1:AC95 -  -  -  -  CheckComma:
   38 D1:AC95 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0D C3 AF 
              AC D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:ACA3 -  -  -  -  
   40 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   41 D1:ACA3 -  -  -  -  ;
   42 D1:ACA3 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:ACA3 -  -  -  -  ;
   44 D1:ACA3 -  -  -  -  ; ***************************************************************************************
   45 D1:ACA3 -  -  -  -  
   46 D1:ACA3 -  -  -  -  CheckNextA:
   47 D1:ACA3 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:ACA6 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:ACA8 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:ACA9 3E 18 C3 AF 
              AC D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:ACAF -  -  -  -  		
   52 D1:ACAF -  -  -  -  ; ***************************************************************************************
   53 D1:ACAF -  -  -  -  ;
   54 D1:ACAF -  -  -  -  ;									Changes and Updates
   55 D1:ACAF -  -  -  -  ;
   56 D1:ACAF -  -  -  -  ; ***************************************************************************************
   57 D1:ACAF -  -  -  -  ;
   58 D1:ACAF -  -  -  -  ;		Date			Notes
   59 D1:ACAF -  -  -  -  ;		==== 			=====
   60 D1:ACAF -  -  -  -  ;
   61 D1:ACAF -  -  -  -  ; ***************************************************************************************
   62 D1:ACAF -  -  -  -  		
Listing for file "_build.asm"
   29 D1:ACAF -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:ACAF -  -  -  -  ; ***************************************************************************************
    2 D1:ACAF -  -  -  -  ; ***************************************************************************************
    3 D1:ACAF -  -  -  -  ;
    4 D1:ACAF -  -  -  -  ;		Name : 		errors.asm
    5 D1:ACAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACAF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACAF -  -  -  -  ;		Reviewed :	No
    8 D1:ACAF -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:ACAF -  -  -  -  ;
   10 D1:ACAF -  -  -  -  ; ***************************************************************************************
   11 D1:ACAF -  -  -  -  ; ***************************************************************************************
   12 D1:ACAF -  -  -  -  
   13 D1:ACAF -  -  -  -  ; ***************************************************************************************
   14 D1:ACAF -  -  -  -  ;
   15 D1:ACAF -  -  -  -  ;								Error handler, message A 
   16 D1:ACAF -  -  -  -  ;
   17 D1:ACAF -  -  -  -  ; ***************************************************************************************
   18 D1:ACAF -  -  -  -  
   19 D1:ACAF -  -  -  -  ErrorHandler:
   20 D1:ACAF F5 -  -  -  		push 	af 						; save error ID
   21 D1:ACB0 -  -  -  -  
   22 D1:ACB0 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:ACB4 6F -  -  -  		ld 		l,a
   24 D1:ACB5 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:ACB6 29 -  -  -  		add 	hl,hl 		
   26 D1:ACB7 11 91 B7 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:ACBB 19 -  -  -  		add 	hl,de
   28 D1:ACBC ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:ACBE CD 1A B6 D1 		call 	PrintStringAtHL
   30 D1:ACC2 -  -  -  -  		;
   31 D1:ACC2 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:ACC3 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:ACC4 28 2F -  -  		jr 		z,_EHExit
   34 D1:ACC6 -  -  -  -  		;
   35 D1:ACC6 DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:ACCB DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:ACCE B7 -  -  -  		or 		a
   38 D1:ACCF 28 24 -  -  		jr 		z,_EHExit
   39 D1:ACD1 -  -  -  -  
   40 D1:ACD1 21 FD AC D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:ACD5 CD 1A B6 D1 		call 	PrintStringAtHL 
   42 D1:ACD9 -  -  -  -  		
   43 D1:ACD9 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:ACDA 21 00 00 00 		ld 		hl,$0000 		
   45 D1:ACDE D9 -  -  -  		exx 
   46 D1:ACDF DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:ACE2 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:ACE5 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:ACE7 01 27 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:ACEB CD 9D BC D1 		call 	Int32ToString
   51 D1:ACEF C5 -  -  -  		push 	bc
   52 D1:ACF0 E1 -  -  -  		pop 	hl
   53 D1:ACF1 CD 1A B6 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:ACF5 -  -  -  -  _EHExit:		
   55 D1:ACF5 CD 38 BD D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:ACF9 C3 9B A8 D1 		jp 		WarmStart
   57 D1:ACFD -  -  -  -  
   58 D1:ACFD -  -  -  -  _EHAtText:
   59 D1:ACFD 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AD07 -  -  -  -  
   61 D1:AD07 -  -  -  -  NotImplemented:
   62 D1:AD07 3E 06 C3 AF 
              AC D1 -  -  		ERR_DISABLED
   63 D1:AD0D -  -  -  -  TypeMismatch:
   64 D1:AD0D 3E 02 C3 AF 
              AC D1 -  -  		ERR_BADTYPE
   65 D1:AD13 -  -  -  -  BadValue:
   66 D1:AD13 3E 03 C3 AF 
              AC D1 -  -  		ERR_BADVALUE
   67 D1:AD19 -  -  -  -  SyntaxError:
   68 D1:AD19 3E 18 C3 AF 
              AC D1 -  -  		ERR_SYNTAX
   69 D1:AD1F -  -  -  -  						
   70 D1:AD1F -  -  -  -  ; ***************************************************************************************
   71 D1:AD1F -  -  -  -  ;
   72 D1:AD1F -  -  -  -  ;									Changes and Updates
   73 D1:AD1F -  -  -  -  ;
   74 D1:AD1F -  -  -  -  ; ***************************************************************************************
   75 D1:AD1F -  -  -  -  ;
   76 D1:AD1F -  -  -  -  ;		Date			Notes
   77 D1:AD1F -  -  -  -  ;		==== 			=====
   78 D1:AD1F -  -  -  -  ;
   79 D1:AD1F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD1F -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AD1F -  -  -  -  ; ***************************************************************************************
    2 D1:AD1F -  -  -  -  ; ***************************************************************************************
    3 D1:AD1F -  -  -  -  ;
    4 D1:AD1F -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AD1F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD1F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD1F -  -  -  -  ;		Reviewed :	No
    8 D1:AD1F -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AD1F -  -  -  -  ;
   10 D1:AD1F -  -  -  -  ; ***************************************************************************************
   11 D1:AD1F -  -  -  -  ; ***************************************************************************************
   12 D1:AD1F -  -  -  -  
   13 D1:AD1F -  -  -  -  ; ***************************************************************************************
   14 D1:AD1F -  -  -  -  ;
   15 D1:AD1F -  -  -  -  ; 									Addition
   16 D1:AD1F -  -  -  -  ;
   17 D1:AD1F -  -  -  -  ; ***************************************************************************************
   18 D1:AD1F -  -  -  -  
   19 D1:AD1F -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AD1F CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 1C 
              BC D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AD2D -  -  -  -  
   22 D1:AD2D -  -  -  -  ; ***************************************************************************************
   23 D1:AD2D -  -  -  -  ;
   24 D1:AD2D -  -  -  -  ; 									Subtraction
   25 D1:AD2D -  -  -  -  ;
   26 D1:AD2D -  -  -  -  ; ***************************************************************************************
   27 D1:AD2D -  -  -  -  
   28 D1:AD2D -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AD2D CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 24 
              BC D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AD3B -  -  -  -  
   31 D1:AD3B -  -  -  -  ; ***************************************************************************************
   32 D1:AD3B -  -  -  -  ;
   33 D1:AD3B -  -  -  -  ; 									  Multiply
   34 D1:AD3B -  -  -  -  ;
   35 D1:AD3B -  -  -  -  ; ***************************************************************************************
   36 D1:AD3B -  -  -  -  
   37 D1:AD3B -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AD3B CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 E3 
              BB D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AD49 -  -  -  -  
   40 D1:AD49 -  -  -  -  ; ***************************************************************************************
   41 D1:AD49 -  -  -  -  ;
   42 D1:AD49 -  -  -  -  ; 									  Divide
   43 D1:AD49 -  -  -  -  ;
   44 D1:AD49 -  -  -  -  ; ***************************************************************************************
   45 D1:AD49 -  -  -  -  
   46 D1:AD49 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AD49 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AD49 CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 E3 
              BA D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AD57 -  -  -  -  
   50 D1:AD57 -  -  -  -  ; ***************************************************************************************
   51 D1:AD57 -  -  -  -  ;
   52 D1:AD57 -  -  -  -  ; 									  Modulus
   53 D1:AD57 -  -  -  -  ;
   54 D1:AD57 -  -  -  -  ; ***************************************************************************************
   55 D1:AD57 -  -  -  -  
   56 D1:AD57 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AD57 CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 E6 
              BA D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:AD65 -  -  -  -  
   59 D1:AD65 -  -  -  -  ; ***************************************************************************************
   60 D1:AD65 -  -  -  -  ;
   61 D1:AD65 -  -  -  -  ; 									  Logical
   62 D1:AD65 -  -  -  -  ;
   63 D1:AD65 -  -  -  -  ; ***************************************************************************************
   64 D1:AD65 -  -  -  -  
   65 D1:AD65 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:AD65 CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 2E 
              BC D1 -  -  		IntegerDispatch(Int32And)
   67 D1:AD73 -  -  -  -  
   68 D1:AD73 -  -  -  -  ALUOr: 			;; [or]
   69 D1:AD73 CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 3B 
              BC D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:AD81 -  -  -  -  
   71 D1:AD81 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:AD81 CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 48 
              BC D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:AD8F -  -  -  -  
   74 D1:AD8F -  -  -  -  ; ***************************************************************************************
   75 D1:AD8F -  -  -  -  ;
   76 D1:AD8F -  -  -  -  ;									Changes and Updates
   77 D1:AD8F -  -  -  -  ;
   78 D1:AD8F -  -  -  -  ; ***************************************************************************************
   79 D1:AD8F -  -  -  -  ;
   80 D1:AD8F -  -  -  -  ;		Date			Notes
   81 D1:AD8F -  -  -  -  ;		==== 			=====
   82 D1:AD8F -  -  -  -  ;
   83 D1:AD8F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD8F -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:AD8F -  -  -  -  ; ***************************************************************************************
    2 D1:AD8F -  -  -  -  ; ***************************************************************************************
    3 D1:AD8F -  -  -  -  ;
    4 D1:AD8F -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:AD8F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD8F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD8F -  -  -  -  ;		Reviewed :	No
    8 D1:AD8F -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:AD8F -  -  -  -  ;
   10 D1:AD8F -  -  -  -  ; ***************************************************************************************
   11 D1:AD8F -  -  -  -  ; ***************************************************************************************
   12 D1:AD8F -  -  -  -  
   13 D1:AD8F -  -  -  -  ; ***************************************************************************************
   14 D1:AD8F -  -  -  -  ;
   15 D1:AD8F -  -  -  -  ; 									<l> <op> <r>
   16 D1:AD8F -  -  -  -  ;
   17 D1:AD8F -  -  -  -  ; ***************************************************************************************
   18 D1:AD8F -  -  -  -  
   19 D1:AD8F -  -  -  -  ALULongReference:			;; [!]
   20 D1:AD8F CD 9F AD D1 		call 	BRGetAddress 				; calculate address
   21 D1:AD93 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AD95 CB F9 -  -  		set 	CIsReference,c
   23 D1:AD97 C9 -  -  -  		ret
   24 D1:AD98 -  -  -  -  
   25 D1:AD98 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AD98 CD 8F AD D1 		call 	ALULongReference
   27 D1:AD9C CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AD9E C9 -  -  -  		ret
   29 D1:AD9F -  -  -  -  
   30 D1:AD9F -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AD9F CD 3C AE D1 
              78 B1 C2 0D 
              AD D1 C3 AD 
              AD D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ADAD -  -  -  -  _BRGAMain:		
   33 D1:ADAD CD 1C BC D1 		call 	Int32Add 					; address in HL'HL
   34 D1:ADB1 CD 42 AF D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:ADB5 C9 -  -  -  		ret
   36 D1:ADB6 -  -  -  -  
   37 D1:ADB6 -  -  -  -  ; ***************************************************************************************
   38 D1:ADB6 -  -  -  -  ;
   39 D1:ADB6 -  -  -  -  ;									Changes and Updates
   40 D1:ADB6 -  -  -  -  ;
   41 D1:ADB6 -  -  -  -  ; ***************************************************************************************
   42 D1:ADB6 -  -  -  -  ;
   43 D1:ADB6 -  -  -  -  ;		Date			Notes
   44 D1:ADB6 -  -  -  -  ;		==== 			=====
   45 D1:ADB6 -  -  -  -  ;
   46 D1:ADB6 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:ADB6 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:ADB6 -  -  -  -  ; ***************************************************************************************
    2 D1:ADB6 -  -  -  -  ; ***************************************************************************************
    3 D1:ADB6 -  -  -  -  ;
    4 D1:ADB6 -  -  -  -  ;		Name : 		compare.asm
    5 D1:ADB6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADB6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADB6 -  -  -  -  ;		Reviewed :	No
    8 D1:ADB6 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:ADB6 -  -  -  -  ;
   10 D1:ADB6 -  -  -  -  ; ***************************************************************************************
   11 D1:ADB6 -  -  -  -  ; ***************************************************************************************
   12 D1:ADB6 -  -  -  -  
   13 D1:ADB6 -  -  -  -  #macro compare_equals(n)
   14 D1:ADB6             		call 	CompareBaseCode
   15 D1:ADB6             		cp 		n
   16 D1:ADB6             		jr 		z,UnaryInt32True
   17 D1:ADB6             		jr 		UnaryInt32False
   18 D1:ADB6             #endmacro
   19 D1:ADB6 -  -  -  -  
   20 D1:ADB6 -  -  -  -  #macro compare_not_equals(n)
   21 D1:ADB6             		call 	CompareBaseCode
   22 D1:ADB6             		cp 		n
   23 D1:ADB6             		jr 		nz,UnaryInt32True
   24 D1:ADB6             		jr 		UnaryInt32False
   25 D1:ADB6             #endmacro
   26 D1:ADB6 -  -  -  -  
   27 D1:ADB6 -  -  -  -  ; ***************************************************************************************
   28 D1:ADB6 -  -  -  -  ;
   29 D1:ADB6 -  -  -  -  ; 								Return True/False
   30 D1:ADB6 -  -  -  -  ;
   31 D1:ADB6 -  -  -  -  ; ***************************************************************************************
   32 D1:ADB6 -  -  -  -  
   33 D1:ADB6 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:ADB6 3E FF -  -  		ld 		a,255
   35 D1:ADB8 18 01 -  -  		jr 		_Int32Logical
   36 D1:ADBA -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:ADBA AF -  -  -  		xor 	a
   38 D1:ADBB -  -  -  -  _Int32Logical:
   39 D1:ADBB 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ADBC 67 -  -  -  		ld 		h,a
   41 D1:ADBD D9 -  -  -  		exx
   42 D1:ADBE 6F -  -  -  		ld 		l,a
   43 D1:ADBF 67 -  -  -  		ld 		h,a
   44 D1:ADC0 D9 -  -  -  		exx
   45 D1:ADC1 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:ADC3 C9 -  -  -  		ret
   47 D1:ADC4 -  -  -  -  
   48 D1:ADC4 -  -  -  -  ; ***************************************************************************************
   49 D1:ADC4 -  -  -  -  ;
   50 D1:ADC4 -  -  -  -  ; 										> = < (compare == value)
   51 D1:ADC4 -  -  -  -  ;
   52 D1:ADC4 -  -  -  -  ; ***************************************************************************************
   53 D1:ADC4 -  -  -  -  
   54 D1:ADC4 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:ADC4 CD 00 AE D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:ADCE -  -  -  -  
   57 D1:ADCE -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:ADCE CD 00 AE D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:ADD8 -  -  -  -  
   60 D1:ADD8 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:ADD8 CD 00 AE D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:ADE2 -  -  -  -  
   63 D1:ADE2 -  -  -  -  ; ***************************************************************************************
   64 D1:ADE2 -  -  -  -  ;
   65 D1:ADE2 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:ADE2 -  -  -  -  ;
   67 D1:ADE2 -  -  -  -  ; ***************************************************************************************
   68 D1:ADE2 -  -  -  -  
   69 D1:ADE2 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:ADE2 CD 00 AE D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:ADEC -  -  -  -  
   72 D1:ADEC -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:ADEC CD 00 AE D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:ADF6 -  -  -  -  
   75 D1:ADF6 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:ADF6 CD 00 AE D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AE00 -  -  -  -  
   78 D1:AE00 -  -  -  -  ; ***************************************************************************************
   79 D1:AE00 -  -  -  -  ;
   80 D1:AE00 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AE00 -  -  -  -  ;
   82 D1:AE00 -  -  -  -  ; ***************************************************************************************
   83 D1:AE00 -  -  -  -  
   84 D1:AE00 -  -  -  -  CompareBaseCode:
   85 D1:AE00 CD 3C AE D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AE04 -  -  -  -  
   87 D1:AE04 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AE05 A1 -  -  -  		and 	c
   89 D1:AE06 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AE08 C2 1A AE D1 		jp 		nz,StringCompare
   91 D1:AE0C -  -  -  -  
   92 D1:AE0C 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AE0D B1 -  -  -  		or 		c
   94 D1:AE0E CB 47 -  -  		bit 	CIsString,a 
   95 D1:AE10 CA 5C BC D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AE14 -  -  -  -  
   97 D1:AE14 3E 02 C3 AF 
              AC D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AE1A -  -  -  -  ;
   99 D1:AE1A -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AE1A -  -  -  -  ;
  101 D1:AE1A -  -  -  -  StringCompare:
  102 D1:AE1A 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AE1B BE -  -  -  		cp 		(hl)
  104 D1:AE1C 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AE1E 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AE20 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AE21 23 -  -  -  		inc 	hl
  108 D1:AE22 FE 20 -  -  		cp 		' '
  109 D1:AE24 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AE26 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AE27 C9 -  -  -  		ret
  112 D1:AE28 -  -  -  -  
  113 D1:AE28 -  -  -  -  _SCLess:
  114 D1:AE28 3E FF -  -  		ld 		a,$FF
  115 D1:AE2A C9 -  -  -  		ret
  116 D1:AE2B -  -  -  -  _SCGreater:
  117 D1:AE2B 3E 01 -  -  		ld 		a,1
  118 D1:AE2D C9 -  -  -  		ret
  119 D1:AE2E -  -  -  -  
  120 D1:AE2E 3E 19 C3 AF 
              AC D1 -  -  		ERR_TODO()
  121 D1:AE34 -  -  -  -  
  122 D1:AE34 -  -  -  -  ; ***************************************************************************************
  123 D1:AE34 -  -  -  -  ;
  124 D1:AE34 -  -  -  -  ;									Changes and Updates
  125 D1:AE34 -  -  -  -  ;
  126 D1:AE34 -  -  -  -  ; ***************************************************************************************
  127 D1:AE34 -  -  -  -  ;
  128 D1:AE34 -  -  -  -  ;		Date			Notes
  129 D1:AE34 -  -  -  -  ;		==== 			=====
  130 D1:AE34 -  -  -  -  ;
  131 D1:AE34 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE34 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AE34 -  -  -  -  ; ***************************************************************************************
    2 D1:AE34 -  -  -  -  ; ***************************************************************************************
    3 D1:AE34 -  -  -  -  ;
    4 D1:AE34 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AE34 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE34 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE34 -  -  -  -  ;		Reviewed :	No
    8 D1:AE34 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AE34 -  -  -  -  ;
   10 D1:AE34 -  -  -  -  ; ***************************************************************************************
   11 D1:AE34 -  -  -  -  ; ***************************************************************************************
   12 D1:AE34 -  -  -  -  
   13 D1:AE34 -  -  -  -  ; ***************************************************************************************
   14 D1:AE34 -  -  -  -  ;
   15 D1:AE34 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AE34 -  -  -  -  ;
   17 D1:AE34 -  -  -  -  ; ***************************************************************************************
   18 D1:AE34 -  -  -  -  
   19 D1:AE34 -  -  -  -  SwapHLDE:
   20 D1:AE34 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AE35 D9 -  -  -  			exx
   22 D1:AE36 EB -  -  -  			ex 		de,hl
   23 D1:AE37 D9 -  -  -  			exx
   24 D1:AE38 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AE39 41 -  -  -  			ld 		b,c
   26 D1:AE3A 4F -  -  -  			ld 		c,a
   27 D1:AE3B C9 -  -  -  			ret
   28 D1:AE3C -  -  -  -  
   29 D1:AE3C -  -  -  -  ; ***************************************************************************************
   30 D1:AE3C -  -  -  -  ;
   31 D1:AE3C -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AE3C -  -  -  -  ;
   33 D1:AE3C -  -  -  -  ; ***************************************************************************************
   34 D1:AE3C -  -  -  -  
   35 D1:AE3C -  -  -  -  DereferenceBoth:
   36 D1:AE3C CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AE3E C4 15 AF D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AE42 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AE44 C8 -  -  -  			ret 	z
   40 D1:AE45 CD 34 AE D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AE49 CD 15 AF D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AE4D CD 34 AE D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AE51 C9 -  -  -  			ret
   44 D1:AE52 -  -  -  -  
   45 D1:AE52 -  -  -  -  ; ***************************************************************************************
   46 D1:AE52 -  -  -  -  ;
   47 D1:AE52 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AE52 -  -  -  -  ;
   49 D1:AE52 -  -  -  -  ; ***************************************************************************************
   50 D1:AE52 -  -  -  -  
   51 D1:AE52 -  -  -  -  NegateHLHL:	
   52 D1:AE52 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AE54 C2 0D AD D1 			jp 		nz,TypeMismatch
   54 D1:AE58 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AE5A C4 15 AF D1 			call 	nz,Dereference 			; if required.
   56 D1:AE5E CD 86 BC D1 			call 	Int32Negate
   57 D1:AE62 C9 -  -  -  			ret
Listing for file "_build.asm"
   34 D1:AE63 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:AE63 -  -  -  -  ; ***************************************************************************************
    2 D1:AE63 -  -  -  -  ; ***************************************************************************************
    3 D1:AE63 -  -  -  -  ;
    4 D1:AE63 -  -  -  -  ;		Name : 		expression.asm
    5 D1:AE63 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE63 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE63 -  -  -  -  ;		Reviewed :	None
    8 D1:AE63 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:AE63 -  -  -  -  ;
   10 D1:AE63 -  -  -  -  ; ***************************************************************************************
   11 D1:AE63 -  -  -  -  ; ***************************************************************************************
   12 D1:AE63 -  -  -  -  
   13 D1:AE63 -  -  -  -  ; ***************************************************************************************
   14 D1:AE63 -  -  -  -  ;
   15 D1:AE63 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:AE63 -  -  -  -  ;
   17 D1:AE63 -  -  -  -  ; ***************************************************************************************
   18 D1:AE63 -  -  -  -  
   19 D1:AE63 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:AE63 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:AE64 -  -  -  -  EvaluateAtPrecedence:
   22 D1:AE64 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:AE65 -  -  -  -  		;
   24 D1:AE65 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:AE65 -  -  -  -  		;
   26 D1:AE65 CD 71 AF D1 		call 	EvaluateTerm 				; get term
   27 D1:AE69 -  -  -  -  		;
   28 D1:AE69 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:AE69 -  -  -  -  		;
   30 D1:AE69 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:AE6A -  -  -  -  _EAPLoop:
   32 D1:AE6A DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:AE6D FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:AE6F D8 -  -  -  		ret 	c
   35 D1:AE70 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:AE72 D0 -  -  -  		ret 	nc
   37 D1:AE73 -  -  -  -  		;
   38 D1:AE73 -  -  -  -  		; 		Get the precedence.
   39 D1:AE73 -  -  -  -  		;
   40 D1:AE73 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:AE74 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:AE76 21 80 B7 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:AE7A B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:AE7B 6F -  -  -  		ld 		l,a
   45 D1:AE7C 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:AE7D E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:AE7E -  -  -  -  		;
   48 D1:AE7E -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:AE7E -  -  -  -  		;
   50 D1:AE7E 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:AE7F BB -  -  -  		cp 		e
   52 D1:AE80 D0 -  -  -  		ret 	nc
   53 D1:AE81 -  -  -  -  
   54 D1:AE81 -  -  -  -  		;
   55 D1:AE81 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:AE81 -  -  -  -  		;
   57 D1:AE81 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:AE82 -  -  -  -  		;
   59 D1:AE82 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:AE85 F5 -  -  -  		push 	af
   61 D1:AE86 -  -  -  -  		;
   62 D1:AE86 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:AE87 D9 -  -  -  		exx 								; save HL'
   64 D1:AE88 E5 -  -  -  		push 	hl
   65 D1:AE89 D9 -  -  -  		exx 								
   66 D1:AE8A E5 -  -  -  		push 	hl 							; save HL
   67 D1:AE8B -  -  -  -  		;
   68 D1:AE8B DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:AE8D -  -  -  -  		;
   70 D1:AE8D -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:AE8D -  -  -  -  		;
   72 D1:AE8D 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:AE8E CD 64 AE D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:AE92 -  -  -  -  		;
   75 D1:AE92 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:AE92 -  -  -  -  		;
   77 D1:AE92 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:AE93 -  -  -  -  
   79 D1:AE93 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AE94 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AE95 D9 -  -  -  		exx
   82 D1:AE96 EB -  -  -  		ex 		de,hl
   83 D1:AE97 E1 -  -  -  		pop 	hl
   84 D1:AE98 D9 -  -  -  		exx
   85 D1:AE99 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AE9A 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AE9B -  -  -  -  		;
   88 D1:AE9B -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AE9B -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AE9B -  -  -  -  		;
   91 D1:AE9B F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AE9C -  -  -  -  		;
   93 D1:AE9C -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AE9C -  -  -  -  		;
   95 D1:AE9C D5 -  -  -  		push 	de
   96 D1:AE9D E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AE9E E6 7F 21 00 
              00 00 6F 29 
              29 11 A6 B9 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AEB3 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AEB4 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AEB5 CD E5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AEB9 -  -  -  -  		;
  102 D1:AEB9 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AEBA -  -  -  -  		;
  104 D1:AEBA 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AEBC -  -  -  -  
  106 D1:AEBC -  -  -  -  ; ***************************************************************************************
  107 D1:AEBC -  -  -  -  ;
  108 D1:AEBC -  -  -  -  ;									Changes and Updates
  109 D1:AEBC -  -  -  -  ;
  110 D1:AEBC -  -  -  -  ; ***************************************************************************************
  111 D1:AEBC -  -  -  -  ;
  112 D1:AEBC -  -  -  -  ;		Date			Notes
  113 D1:AEBC -  -  -  -  ;		==== 			=====
  114 D1:AEBC -  -  -  -  ;
  115 D1:AEBC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AEBC -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AEBC -  -  -  -  ; ***************************************************************************************
    2 D1:AEBC -  -  -  -  ; ***************************************************************************************
    3 D1:AEBC -  -  -  -  ;
    4 D1:AEBC -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AEBC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEBC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEBC -  -  -  -  ;		Reviewed :	No
    8 D1:AEBC -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AEBC -  -  -  -  ;
   10 D1:AEBC -  -  -  -  ; ***************************************************************************************
   11 D1:AEBC -  -  -  -  ; ***************************************************************************************
   12 D1:AEBC -  -  -  -  
   13 D1:AEBC -  -  -  -  ; ***************************************************************************************
   14 D1:AEBC -  -  -  -  ;
   15 D1:AEBC -  -  -  -  ; 								Evaluate an integer term
   16 D1:AEBC -  -  -  -  ;
   17 D1:AEBC -  -  -  -  ; ***************************************************************************************
   18 D1:AEBC -  -  -  -  
   19 D1:AEBC -  -  -  -  EvaluateIntegerTerm:
   20 D1:AEBC CD 71 AF D1 		call 	EvaluateTerm
   21 D1:AEC0 CD 15 AF D1 		call 	DeReference
   22 D1:AEC4 CB 41 -  -  		bit 	CIsString,c
   23 D1:AEC6 C8 -  -  -  		ret 	z
   24 D1:AEC7 C3 0D AD D1 		jp 		TypeMismatch
   25 D1:AECB -  -  -  -  
   26 D1:AECB -  -  -  -  ; ***************************************************************************************
   27 D1:AECB -  -  -  -  ;
   28 D1:AECB -  -  -  -  ; 								Evaluate a string term
   29 D1:AECB -  -  -  -  ;
   30 D1:AECB -  -  -  -  ; ***************************************************************************************
   31 D1:AECB -  -  -  -  
   32 D1:AECB -  -  -  -  EvaluateStringTerm:
   33 D1:AECB CD 71 AF D1 		call 	EvaluateTerm
   34 D1:AECF CD 15 AF D1 		call 	DeReference
   35 D1:AED3 CB 41 -  -  		bit 	CIsString,c
   36 D1:AED5 C0 -  -  -  		ret 	nz
   37 D1:AED6 C3 0D AD D1 		jp 		TypeMismatch
   38 D1:AEDA -  -  -  -  
   39 D1:AEDA -  -  -  -  ; ***************************************************************************************
   40 D1:AEDA -  -  -  -  ;
   41 D1:AEDA -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AEDA -  -  -  -  ;
   43 D1:AEDA -  -  -  -  ; ***************************************************************************************
   44 D1:AEDA -  -  -  -  
   45 D1:AEDA -  -  -  -  EvaluateValue:
   46 D1:AEDA CD 63 AE D1 		call 	EvaluateAtPrecedence0
   47 D1:AEDE C3 15 AF D1 		jp 		Dereference
   48 D1:AEE2 -  -  -  -  
   49 D1:AEE2 -  -  -  -  ; ***************************************************************************************
   50 D1:AEE2 -  -  -  -  ;
   51 D1:AEE2 -  -  -  -  ; 									Evaluate a number
   52 D1:AEE2 -  -  -  -  ;
   53 D1:AEE2 -  -  -  -  ; ***************************************************************************************
   54 D1:AEE2 -  -  -  -  
   55 D1:AEE2 -  -  -  -  EvaluateInteger:
   56 D1:AEE2 CD DA AE D1 		call 	EvaluateValue
   57 D1:AEE6 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AEE8 C8 -  -  -  		ret 	z
   59 D1:AEE9 C3 0D AD D1 		jp 		TypeMismatch
   60 D1:AEED -  -  -  -  
   61 D1:AEED -  -  -  -  ; ***************************************************************************************
   62 D1:AEED -  -  -  -  ;
   63 D1:AEED -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AEED -  -  -  -  ;
   65 D1:AEED -  -  -  -  ; ***************************************************************************************
   66 D1:AEED -  -  -  -  
   67 D1:AEED -  -  -  -  Evaluate8BitInteger:
   68 D1:AEED CD E2 AE D1 		call 	EvaluateInteger
   69 D1:AEF1 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AEF2 7C -  -  -  		ld 		a,h
   71 D1:AEF3 B5 -  -  -  		or 		l
   72 D1:AEF4 D9 -  -  -  		exx 	
   73 D1:AEF5 B4 -  -  -  		or 		h
   74 D1:AEF6 C2 13 AD D1 		jp 		nz,BadValue
   75 D1:AEFA 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AEFB C9 -  -  -  		ret
   77 D1:AEFC -  -  -  -  		
   78 D1:AEFC -  -  -  -  ; ***************************************************************************************
   79 D1:AEFC -  -  -  -  ;
   80 D1:AEFC -  -  -  -  ; 									Evaluate a string
   81 D1:AEFC -  -  -  -  ;
   82 D1:AEFC -  -  -  -  ; ***************************************************************************************
   83 D1:AEFC -  -  -  -  
   84 D1:AEFC -  -  -  -  EvaluateString:
   85 D1:AEFC CD DA AE D1 		call 	EvaluateValue
   86 D1:AF00 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AF02 CA 0D AD D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AF06 C9 -  -  -  		ret
   89 D1:AF07 -  -  -  -  
   90 D1:AF07 -  -  -  -  ; ***************************************************************************************
   91 D1:AF07 -  -  -  -  ;
   92 D1:AF07 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AF07 -  -  -  -  ;
   94 D1:AF07 -  -  -  -  ; ***************************************************************************************
   95 D1:AF07 -  -  -  -  
   96 D1:AF07 -  -  -  -  Return8BitConstant:
   97 D1:AF07 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AF0B 6F -  -  -  		ld 		l,a
   99 D1:AF0C -  -  -  -  Return16BitConstant:
  100 D1:AF0C D9 -  -  -  		exx 								; clear HL'
  101 D1:AF0D 21 00 00 00 		ld 		hl,0
  102 D1:AF11 D9 -  -  -  		exx
  103 D1:AF12 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AF14 C9 -  -  -  		ret
  105 D1:AF15 -  -  -  -  
  106 D1:AF15 -  -  -  -  ; ***************************************************************************************
  107 D1:AF15 -  -  -  -  ;
  108 D1:AF15 -  -  -  -  ;									Changes and Updates
  109 D1:AF15 -  -  -  -  ;
  110 D1:AF15 -  -  -  -  ; ***************************************************************************************
  111 D1:AF15 -  -  -  -  ;
  112 D1:AF15 -  -  -  -  ;		Date			Notes
  113 D1:AF15 -  -  -  -  ;		==== 			=====
  114 D1:AF15 -  -  -  -  ;
  115 D1:AF15 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AF15 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AF15 -  -  -  -  ; ***************************************************************************************
    2 D1:AF15 -  -  -  -  ; ***************************************************************************************
    3 D1:AF15 -  -  -  -  ;
    4 D1:AF15 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AF15 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF15 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AF15 -  -  -  -  ;		Reviewed :	No
    8 D1:AF15 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AF15 -  -  -  -  ;
   10 D1:AF15 -  -  -  -  ; ***************************************************************************************
   11 D1:AF15 -  -  -  -  ; ***************************************************************************************
   12 D1:AF15 -  -  -  -  
   13 D1:AF15 -  -  -  -  ; ***************************************************************************************
   14 D1:AF15 -  -  -  -  ;
   15 D1:AF15 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AF15 -  -  -  -  ;
   17 D1:AF15 -  -  -  -  ; ***************************************************************************************
   18 D1:AF15 -  -  -  -  
   19 D1:AF15 -  -  -  -  Dereference:
   20 D1:AF15 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AF17 C8 -  -  -  		ret 	z
   22 D1:AF18 -  -  -  -  
   23 D1:AF18 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AF1A -  -  -  -  		
   25 D1:AF1A CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AF1C 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AF1E -  -  -  -  
   28 D1:AF1E CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AF20 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AF22 -  -  -  -  
   31 D1:AF22 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AF23 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AF25 D9 -  -  -  		exx
   34 D1:AF26 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AF27 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AF28 23 -  -  -  		inc  	hl
   37 D1:AF29 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AF2B D9 -  -  -  		exx 								; fix back
   39 D1:AF2C C9 -  -  -  		ret
   40 D1:AF2D -  -  -  -  
   41 D1:AF2D -  -  -  -  _DeRefByte:		
   42 D1:AF2D 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AF2E 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AF32 6F -  -  -  		ld	 	l,a
   45 D1:AF33 D9 -  -  -  		exx
   46 D1:AF34 21 00 00 00 		ld 		hl,$0000
   47 D1:AF38 D9 -  -  -  		exx
   48 D1:AF39 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AF3B C9 -  -  -  		ret
   50 D1:AF3C -  -  -  -  
   51 D1:AF3C -  -  -  -  _DRInternal:
   52 D1:AF3C 3E 06 C3 AF 
              AC D1 -  -  		ERR_DISABLED
   53 D1:AF42 -  -  -  -  
   54 D1:AF42 -  -  -  -  ; ***************************************************************************************
   55 D1:AF42 -  -  -  -  ;
   56 D1:AF42 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AF42 -  -  -  -  ;
   58 D1:AF42 -  -  -  -  ; ***************************************************************************************
   59 D1:AF42 -  -  -  -  
   60 D1:AF42 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AF42 -  -  -  -  		#ifdef EZ80
   62 D1:AF42 22 EB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AF46 D9 -  -  -  		exx
   64 D1:AF47 22 ED A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AF4B 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AF4F D9 -  -  -  		exx
   67 D1:AF50 2A EB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AF54 -  -  -  -  		#endif
   69 D1:AF54 C9 -  -  -  		ret
   70 D1:AF55 -  -  -  -  
   71 D1:AF55 -  -  -  -  ; ***************************************************************************************
   72 D1:AF55 -  -  -  -  ;
   73 D1:AF55 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AF55 -  -  -  -  ;
   75 D1:AF55 -  -  -  -  ; ***************************************************************************************
   76 D1:AF55 -  -  -  -  
   77 D1:AF55 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AF55 -  -  -  -  		#ifdef EZ80
   79 D1:AF55 22 EB A8 D1 		ld 		(AConvert),hl
   80 D1:AF59 21 00 00 00 		ld 		hl,$0000
   81 D1:AF5D 22 EE A8 D1 		ld 		(AConvert+3),hl
   82 D1:AF61 D9 -  -  -  		exx
   83 D1:AF62 2A ED A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AF66 D9 -  -  -  		exx
   85 D1:AF67 AF -  -  -  		xor 	a
   86 D1:AF68 32 ED A8 D1 		ld 		(AConvert+2),a
   87 D1:AF6C 2A EB A8 D1 		ld 		hl,(AConvert)
   88 D1:AF70 -  -  -  -  		#endif
   89 D1:AF70 C9 -  -  -  		ret
   90 D1:AF71 -  -  -  -  
   91 D1:AF71 -  -  -  -  ; ***************************************************************************************
   92 D1:AF71 -  -  -  -  ;
   93 D1:AF71 -  -  -  -  ;									Changes and Updates
   94 D1:AF71 -  -  -  -  ;
   95 D1:AF71 -  -  -  -  ; ***************************************************************************************
   96 D1:AF71 -  -  -  -  ;
   97 D1:AF71 -  -  -  -  ;		Date			Notes
   98 D1:AF71 -  -  -  -  ;		==== 			=====
   99 D1:AF71 -  -  -  -  ;
  100 D1:AF71 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF71 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AF71 -  -  -  -  ; ***************************************************************************************
    2 D1:AF71 -  -  -  -  ; ***************************************************************************************
    3 D1:AF71 -  -  -  -  ;
    4 D1:AF71 -  -  -  -  ;		Name : 		term.asm
    5 D1:AF71 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF71 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF71 -  -  -  -  ;		Reviewed :	No
    8 D1:AF71 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AF71 -  -  -  -  ;
   10 D1:AF71 -  -  -  -  ; ***************************************************************************************
   11 D1:AF71 -  -  -  -  ; ***************************************************************************************
   12 D1:AF71 -  -  -  -  
   13 D1:AF71 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AF71             		add_hlhl_16
   15 D1:AF71             		exx
   16 D1:AF71             		adc_hlhl_16
   17 D1:AF71             		exx
   18 D1:AF71             #endmacro
   19 D1:AF71 -  -  -  -  
   20 D1:AF71 -  -  -  -  ; ***************************************************************************************
   21 D1:AF71 -  -  -  -  ;
   22 D1:AF71 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AF71 -  -  -  -  ;
   24 D1:AF71 -  -  -  -  ; ***************************************************************************************
   25 D1:AF71 -  -  -  -  ;
   26 D1:AF71 -  -  -  -  ; 		Terms can be:
   27 D1:AF71 -  -  -  -  ;
   28 D1:AF71 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AF71 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AF71 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AF71 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AF71 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AF71 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AF71 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AF71 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AF71 -  -  -  -  ; 														reference of some sort.
   37 D1:AF71 -  -  -  -  ;
   38 D1:AF71 -  -  -  -  ; ***************************************************************************************
   39 D1:AF71 -  -  -  -  
   40 D1:AF71 -  -  -  -  EvaluateTerm:		
   41 D1:AF71 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AF73 D9 -  -  -  		exx
   43 D1:AF74 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AF78 D9 -  -  -  		exx
   45 D1:AF79 21 00 00 00 		ld 		hl,$0000		
   46 D1:AF7D -  -  -  -  		;
   47 D1:AF7D DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AF80 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AF82 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AF84 DA 3C B0 D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AF88 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AF8A C2 E0 AF D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AF8E -  -  -  -  		;
   54 D1:AF8E -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AF8E -  -  -  -  		;
   56 D1:AF8E -  -  -  -  _ETIntegerConstant:
   57 D1:AF8E -  -  -  -  		;
   58 D1:AF8E -  -  -  -  _ETIntegerLoop:		
   59 D1:AF8E DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AF91 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AF93 B5 -  -  -  		or 		l 							; or into L
   62 D1:AF94 6F -  -  -  		ld 		l,a
   63 D1:AF95 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AF97 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AF9A C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AF9C FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AF9E D8 -  -  -  		ret 	c
   68 D1:AF9F -  -  -  -  
   69 D1:AF9F 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AFA6 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AFAD 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AFB4 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AFBB 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AFC2 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AFC9 -  -  -  -  
   76 D1:AFC9 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AFCB -  -  -  -  		;
   78 D1:AFCB -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AFCB -  -  -  -  		;
   80 D1:AFCB -  -  -  -  _ETStringMarker:		
   81 D1:AFCB DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AFCD DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AFCF DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AFD1 E1 -  -  -  		pop 	hl
   85 D1:AFD2 11 00 00 00 		ld 		de,$0000
   86 D1:AFD6 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AFD9 DD 19 -  -  		add 	ix,de
   88 D1:AFDB DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AFDD 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AFDF C9 -  -  -  		ret
   91 D1:AFE0 -  -  -  -  		;
   92 D1:AFE0 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AFE0 -  -  -  -  		;
   94 D1:AFE0 -  -  -  -  _ETFoundKeyword:
   95 D1:AFE0 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AFE2 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AFE4 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AFE6 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AFE8 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AFEA -  -  -  -  		;
  101 D1:AFEA -  -  -  -  		;		Unary group 0
  102 D1:AFEA -  -  -  -  		;
  103 D1:AFEA E6 7F 21 00 
              00 00 6F 29 
              29 11 A6 B9 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AFFF C3 E5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:B003 -  -  -  -  
  106 D1:B003 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:B003 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:B005 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:B007 -  -  -  -  		;
  110 D1:B007 -  -  -  -  		; 		- term
  111 D1:B007 -  -  -  -  		;
  112 D1:B007 CD BC AE D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:B00B CD 52 AE D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:B00F C9 -  -  -  		ret
  115 D1:B010 -  -  -  -  		;
  116 D1:B010 -  -  -  -  		;		! ? indirection check
  117 D1:B010 -  -  -  -  		;
  118 D1:B010 -  -  -  -  _ETCheckIndirection:	
  119 D1:B010 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:B012 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:B014 FE 83 -  -  		cp 		KWD_PLING
  122 D1:B016 C2 19 AD D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:B01A -  -  -  -  		;
  124 D1:B01A -  -  -  -  		; 		! ? indirection
  125 D1:B01A -  -  -  -  		;
  126 D1:B01A -  -  -  -  _ETIndirection:
  127 D1:B01A F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:B01B CD 71 AF D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:B01F CD 15 AF D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:B023 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:B025 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:B027 CD 42 AF D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:B02B F1 -  -  -  		pop 	af 							; get type back
  134 D1:B02C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:B02E CB F9 -  -  		set 	CIsReference,c
  136 D1:B030 FE 83 -  -  		cp 		KWD_PLING
  137 D1:B032 C8 -  -  -  		ret 	z
  138 D1:B033 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:B035 C9 -  -  -  		ret
  140 D1:B036 -  -  -  -  _ETStringIndirect:
  141 D1:B036 3E 02 C3 AF 
              AC D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:B03C -  -  -  -  		;
  143 D1:B03C -  -  -  -  		; 		Found an identifier.
  144 D1:B03C -  -  -  -  		;
  145 D1:B03C -  -  -  -  _ETVariable:
  146 D1:B03C CD 68 B6 D1 		call 	FindVariable 				; find the variable.
  147 D1:B040 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:B041 3E 1A C3 AF 
              AC D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:B047 -  -  -  -  		
  150 D1:B047 -  -  -  -  ; ***************************************************************************************
  151 D1:B047 -  -  -  -  ;
  152 D1:B047 -  -  -  -  ;									Changes and Updates
  153 D1:B047 -  -  -  -  ;
  154 D1:B047 -  -  -  -  ; ***************************************************************************************
  155 D1:B047 -  -  -  -  ;
  156 D1:B047 -  -  -  -  ;		Date			Notes
  157 D1:B047 -  -  -  -  ;		==== 			=====
  158 D1:B047 -  -  -  -  ;
  159 D1:B047 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:B047 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:B047 -  -  -  -  ; ***************************************************************************************
    2 D1:B047 -  -  -  -  ; ***************************************************************************************
    3 D1:B047 -  -  -  -  ;
    4 D1:B047 -  -  -  -  ;		Name : 		abs.asm
    5 D1:B047 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B047 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B047 -  -  -  -  ;		Reviewed :	No
    8 D1:B047 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:B047 -  -  -  -  ;
   10 D1:B047 -  -  -  -  ; ***************************************************************************************
   11 D1:B047 -  -  -  -  ; ***************************************************************************************
   12 D1:B047 -  -  -  -  
   13 D1:B047 -  -  -  -  ; ***************************************************************************************
   14 D1:B047 -  -  -  -  ;
   15 D1:B047 -  -  -  -  ;								abs( unary function
   16 D1:B047 -  -  -  -  ;
   17 D1:B047 -  -  -  -  ; ***************************************************************************************
   18 D1:B047 -  -  -  -  
   19 D1:B047 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:B047 CD BC AE D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:B04B D9 -  -  -  		exx 								; test MSB
   22 D1:B04C CB 7C -  -  		bit 	7,h
   23 D1:B04E D9 -  -  -  		exx
   24 D1:B04F C4 52 AE D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:B053 C9 -  -  -  		ret
   26 D1:B054 -  -  -  -  
   27 D1:B054 -  -  -  -  ; ***************************************************************************************
   28 D1:B054 -  -  -  -  ;
   29 D1:B054 -  -  -  -  ;									Changes and Updates
   30 D1:B054 -  -  -  -  ;
   31 D1:B054 -  -  -  -  ; ***************************************************************************************
   32 D1:B054 -  -  -  -  ;
   33 D1:B054 -  -  -  -  ;		Date			Notes
   34 D1:B054 -  -  -  -  ;		==== 			=====
   35 D1:B054 -  -  -  -  ;
   36 D1:B054 -  -  -  -  ; ***************************************************************************************
   37 D1:B054 -  -  -  -  		
Listing for file "_build.asm"
   39 D1:B054 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:B054 -  -  -  -  ; ***************************************************************************************
    2 D1:B054 -  -  -  -  ; ***************************************************************************************
    3 D1:B054 -  -  -  -  ;
    4 D1:B054 -  -  -  -  ;		Name : 		asc.asm
    5 D1:B054 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B054 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B054 -  -  -  -  ;		Reviewed :	No
    8 D1:B054 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:B054 -  -  -  -  ;
   10 D1:B054 -  -  -  -  ; ***************************************************************************************
   11 D1:B054 -  -  -  -  ; ***************************************************************************************
   12 D1:B054 -  -  -  -  
   13 D1:B054 -  -  -  -  ; ***************************************************************************************
   14 D1:B054 -  -  -  -  ;
   15 D1:B054 -  -  -  -  ;								Asc unary function
   16 D1:B054 -  -  -  -  ;
   17 D1:B054 -  -  -  -  ; ***************************************************************************************
   18 D1:B054 -  -  -  -  
   19 D1:B054 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:B054 CD CB AE D1 		call	EvaluateStringTerm			; Get string
   21 D1:B058 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:B059 C3 07 AF D1 		jp 		Return8BitConstant
   23 D1:B05D -  -  -  -  
   24 D1:B05D -  -  -  -  ; ***************************************************************************************
   25 D1:B05D -  -  -  -  ;
   26 D1:B05D -  -  -  -  ;									Changes and Updates
   27 D1:B05D -  -  -  -  ;
   28 D1:B05D -  -  -  -  ; ***************************************************************************************
   29 D1:B05D -  -  -  -  ;
   30 D1:B05D -  -  -  -  ;		Date			Notes
   31 D1:B05D -  -  -  -  ;		==== 			=====
   32 D1:B05D -  -  -  -  ;
   33 D1:B05D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:B05D -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:B05D -  -  -  -  ; ***************************************************************************************
    2 D1:B05D -  -  -  -  ; ***************************************************************************************
    3 D1:B05D -  -  -  -  ;
    4 D1:B05D -  -  -  -  ;		Name : 		chr.asm
    5 D1:B05D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B05D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B05D -  -  -  -  ;		Reviewed :	No
    8 D1:B05D -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:B05D -  -  -  -  ;
   10 D1:B05D -  -  -  -  ; ***************************************************************************************
   11 D1:B05D -  -  -  -  ; ***************************************************************************************
   12 D1:B05D -  -  -  -  
   13 D1:B05D -  -  -  -  ; ***************************************************************************************
   14 D1:B05D -  -  -  -  ;
   15 D1:B05D -  -  -  -  ;								Chr$() unary function
   16 D1:B05D -  -  -  -  ;
   17 D1:B05D -  -  -  -  ; ***************************************************************************************
   18 D1:B05D -  -  -  -  
   19 D1:B05D -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:B05D CD 87 AC D1 		call 	CheckDollar
   21 D1:B061 CD BC AE D1 		call 	EvaluateIntegerTerm
   22 D1:B065 7D -  -  -  		ld 		a,l 						; get character
   23 D1:B066 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:B068 21 26 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:B06C 36 0D -  -  		ld 		(hl),13
   26 D1:B06E 2B -  -  -  		dec 	hl
   27 D1:B06F 77 -  -  -  		ld 		(hl),a
   28 D1:B070 C9 -  -  -  		ret
   29 D1:B071 -  -  -  -  
   30 D1:B071 -  -  -  -  ; ***************************************************************************************
   31 D1:B071 -  -  -  -  ;
   32 D1:B071 -  -  -  -  ;									Changes and Updates
   33 D1:B071 -  -  -  -  ;
   34 D1:B071 -  -  -  -  ; ***************************************************************************************
   35 D1:B071 -  -  -  -  ;
   36 D1:B071 -  -  -  -  ;		Date			Notes
   37 D1:B071 -  -  -  -  ;		==== 			=====
   38 D1:B071 -  -  -  -  ;
   39 D1:B071 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:B071 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:B071 -  -  -  -  ; ***************************************************************************************
    2 D1:B071 -  -  -  -  ; ***************************************************************************************
    3 D1:B071 -  -  -  -  ;
    4 D1:B071 -  -  -  -  ;		Name : 		len.asm
    5 D1:B071 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B071 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B071 -  -  -  -  ;		Reviewed :	None
    8 D1:B071 -  -  -  -  ;		Purpose :	String Length
    9 D1:B071 -  -  -  -  ;
   10 D1:B071 -  -  -  -  ; ***************************************************************************************
   11 D1:B071 -  -  -  -  ; ***************************************************************************************
   12 D1:B071 -  -  -  -  
   13 D1:B071 -  -  -  -  ; ***************************************************************************************
   14 D1:B071 -  -  -  -  ;
   15 D1:B071 -  -  -  -  ;								Len unary function
   16 D1:B071 -  -  -  -  ;
   17 D1:B071 -  -  -  -  ; ***************************************************************************************
   18 D1:B071 -  -  -  -  
   19 D1:B071 -  -  -  -  Unary_Len:	;; [len]
   20 D1:B071 CD CB AE D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:B075 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:B076 CD BA AD D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:B07A -  -  -  -  _ULCount:
   24 D1:B07A 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:B07B FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:B07D D8 -  -  -  		ret 	c
   27 D1:B07E 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:B07F 13 -  -  -  		inc 	de
   29 D1:B080 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:B082 -  -  -  -  
   31 D1:B082 -  -  -  -  ; ***************************************************************************************
   32 D1:B082 -  -  -  -  ;
   33 D1:B082 -  -  -  -  ;									Changes and Updates
   34 D1:B082 -  -  -  -  ;
   35 D1:B082 -  -  -  -  ; ***************************************************************************************
   36 D1:B082 -  -  -  -  ;
   37 D1:B082 -  -  -  -  ;		Date			Notes
   38 D1:B082 -  -  -  -  ;		==== 			=====
   39 D1:B082 -  -  -  -  ;
   40 D1:B082 -  -  -  -  ; ***************************************************************************************
   41 D1:B082 -  -  -  -  		
Listing for file "_build.asm"
   42 D1:B082 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:B082 -  -  -  -  ; ***************************************************************************************
    2 D1:B082 -  -  -  -  ; ***************************************************************************************
    3 D1:B082 -  -  -  -  ;
    4 D1:B082 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:B082 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B082 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B082 -  -  -  -  ;		Reviewed :	No
    8 D1:B082 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:B082 -  -  -  -  ;
   10 D1:B082 -  -  -  -  ; ***************************************************************************************
   11 D1:B082 -  -  -  -  ; ***************************************************************************************
   12 D1:B082 -  -  -  -  
   13 D1:B082 -  -  -  -  ; ***************************************************************************************
   14 D1:B082 -  -  -  -  ;
   15 D1:B082 -  -  -  -  ;								Str$() unary function
   16 D1:B082 -  -  -  -  ;
   17 D1:B082 -  -  -  -  ; ***************************************************************************************
   18 D1:B082 -  -  -  -  
   19 D1:B082 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:B082 CD BC AE D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:B086 CD 42 AF D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:B08A 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:B08C C9 -  -  -  		ret
   24 D1:B08D -  -  -  -  
   25 D1:B08D -  -  -  -  ; ***************************************************************************************
   26 D1:B08D -  -  -  -  ;
   27 D1:B08D -  -  -  -  ;									Changes and Updates
   28 D1:B08D -  -  -  -  ;
   29 D1:B08D -  -  -  -  ; ***************************************************************************************
   30 D1:B08D -  -  -  -  ;
   31 D1:B08D -  -  -  -  ;		Date			Notes
   32 D1:B08D -  -  -  -  ;		==== 			=====
   33 D1:B08D -  -  -  -  ;
   34 D1:B08D -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B08D -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:B08D -  -  -  -  ; ***************************************************************************************
    2 D1:B08D -  -  -  -  ; ***************************************************************************************
    3 D1:B08D -  -  -  -  ;
    4 D1:B08D -  -  -  -  ;		Name : 		not.asm
    5 D1:B08D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08D -  -  -  -  ;		Date : 		5th June 2023
    7 D1:B08D -  -  -  -  ;		Reviewed :	No
    8 D1:B08D -  -  -  -  ;		Purpose :	Logical not
    9 D1:B08D -  -  -  -  ;
   10 D1:B08D -  -  -  -  ; ***************************************************************************************
   11 D1:B08D -  -  -  -  ; ***************************************************************************************
   12 D1:B08D -  -  -  -  
   13 D1:B08D -  -  -  -  ; ***************************************************************************************
   14 D1:B08D -  -  -  -  ;
   15 D1:B08D -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:B08D -  -  -  -  ;
   17 D1:B08D -  -  -  -  ; ***************************************************************************************
   18 D1:B08D -  -  -  -  
   19 D1:B08D -  -  -  -  Unary_Not:		;; [not]
   20 D1:B08D CD BC AE D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:B091 CD 9A B0 D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:B095 CD 9A B0 D1 		call 	__UNSwap		
   23 D1:B099 C9 -  -  -  		ret
   24 D1:B09A -  -  -  -  
   25 D1:B09A -  -  -  -  __UNSwap:
   26 D1:B09A 7C -  -  -  		ld 		a,h
   27 D1:B09B 2F -  -  -  		cpl
   28 D1:B09C 67 -  -  -  		ld 		h,a
   29 D1:B09D 7D -  -  -  		ld 		a,l
   30 D1:B09E 2F -  -  -  		cpl 	
   31 D1:B09F 6F -  -  -  		ld 		l,a
   32 D1:B0A0 D9 -  -  -  		exx
   33 D1:B0A1 C9 -  -  -  		ret
   34 D1:B0A2 -  -  -  -  
   35 D1:B0A2 -  -  -  -  ; ***************************************************************************************
   36 D1:B0A2 -  -  -  -  ;
   37 D1:B0A2 -  -  -  -  ;									Changes and Updates
   38 D1:B0A2 -  -  -  -  ;
   39 D1:B0A2 -  -  -  -  ; ***************************************************************************************
   40 D1:B0A2 -  -  -  -  ;
   41 D1:B0A2 -  -  -  -  ;		Date			Notes
   42 D1:B0A2 -  -  -  -  ;		==== 			=====
   43 D1:B0A2 -  -  -  -  ;
   44 D1:B0A2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B0A2 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:B0A2 -  -  -  -  ; ***************************************************************************************
    2 D1:B0A2 -  -  -  -  ; ***************************************************************************************
    3 D1:B0A2 -  -  -  -  ;
    4 D1:B0A2 -  -  -  -  ;		Name : 		page.asm
    5 D1:B0A2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0A2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0A2 -  -  -  -  ;		Reviewed :	No
    8 D1:B0A2 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B0A2 -  -  -  -  ;
   10 D1:B0A2 -  -  -  -  ; ***************************************************************************************
   11 D1:B0A2 -  -  -  -  ; ***************************************************************************************
   12 D1:B0A2 -  -  -  -  
   13 D1:B0A2 -  -  -  -  ; ***************************************************************************************
   14 D1:B0A2 -  -  -  -  ;
   15 D1:B0A2 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B0A2 -  -  -  -  ;
   17 D1:B0A2 -  -  -  -  ; ***************************************************************************************
   18 D1:B0A2 -  -  -  -  
   19 D1:B0A2 -  -  -  -  Unary_Page:	;; [page]
   20 D1:B0A2 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:B0A6 D9 -  -  -  			exx
   22 D1:B0A7 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:B0AB D9 -  -  -  			exx
   24 D1:B0AC 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B0AE C9 -  -  -  			ret
   26 D1:B0AF -  -  -  -  
   27 D1:B0AF -  -  -  -  ; ***************************************************************************************
   28 D1:B0AF -  -  -  -  ;
   29 D1:B0AF -  -  -  -  ;									Changes and Updates
   30 D1:B0AF -  -  -  -  ;
   31 D1:B0AF -  -  -  -  ; ***************************************************************************************
   32 D1:B0AF -  -  -  -  ;
   33 D1:B0AF -  -  -  -  ;		Date			Notes
   34 D1:B0AF -  -  -  -  ;		==== 			=====
   35 D1:B0AF -  -  -  -  ;
   36 D1:B0AF -  -  -  -  ; ***************************************************************************************
   37 D1:B0AF -  -  -  -  			
Listing for file "_build.asm"
   45 D1:B0AF -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:B0AF -  -  -  -  ; ***************************************************************************************
    2 D1:B0AF -  -  -  -  ; ***************************************************************************************
    3 D1:B0AF -  -  -  -  ;
    4 D1:B0AF -  -  -  -  ;		Name : 		random.asm
    5 D1:B0AF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0AF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0AF -  -  -  -  ;		Reviewed :	No
    8 D1:B0AF -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:B0AF -  -  -  -  ;
   10 D1:B0AF -  -  -  -  ; ***************************************************************************************
   11 D1:B0AF -  -  -  -  ; ***************************************************************************************
   12 D1:B0AF -  -  -  -  
   13 D1:B0AF -  -  -  -  ; ***************************************************************************************
   14 D1:B0AF -  -  -  -  ;
   15 D1:B0AF -  -  -  -  ;								Random unary function
   16 D1:B0AF -  -  -  -  ;
   17 D1:B0AF -  -  -  -  ; ***************************************************************************************
   18 D1:B0AF -  -  -  -  
   19 D1:B0AF -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:B0AF F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:B0B7 CD BC AE D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:B0BB D9 -  -  -  		exx 								; is it -ve
   23 D1:B0BC CB 7C -  -  		bit 	7,h
   24 D1:B0BE D9 -  -  -  		exx
   25 D1:B0BF 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:B0C1 22 F1 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:B0C5 D9 -  -  -  		exx
   28 D1:B0C6 22 F5 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:B0CA D9 -  -  -  		exx
   30 D1:B0CB 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:B0CD C9 -  -  -  		ret
   32 D1:B0CE -  -  -  -  _URDontSeed:		
   33 D1:B0CE -  -  -  -  
   34 D1:B0CE CD 55 BC D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:B0D2 28 1C -  -  		jr 		z,_URFail
   36 D1:B0D4 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:B0D5 D9 -  -  -  		exx
   38 D1:B0D6 E5 -  -  -  		push 	hl
   39 D1:B0D7 D9 -  -  -  		exx
   40 D1:B0D8 -  -  -  -  		;
   41 D1:B0D8 CD 01 B1 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:B0DC D9 -  -  -  		exx
   43 D1:B0DD CD 01 B1 D1 		call 	URandomHL
   44 D1:B0E1 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:B0E3 D9 -  -  -  		exx
   46 D1:B0E4 -  -  -  -  		;
   47 D1:B0E4 D9 -  -  -  		exx 								; restore range.
   48 D1:B0E5 D1 -  -  -  		pop 	de
   49 D1:B0E6 D9 -  -  -  		exx
   50 D1:B0E7 D1 -  -  -  		pop 	de
   51 D1:B0E8 -  -  -  -  		;
   52 D1:B0E8 CD E6 BA D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B0EC 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B0ED 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B0EF C9 -  -  -  		ret
   56 D1:B0F0 -  -  -  -  _URFail:
   57 D1:B0F0 3E 03 C3 AF 
              AC D1 -  -  		ERR_BADVALUE
   58 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   59 D1:B0F6 -  -  -  -  ;
   60 D1:B0F6 -  -  -  -  ; 									Push RNG off zero
   61 D1:B0F6 -  -  -  -  ;
   62 D1:B0F6 -  -  -  -  ; ***************************************************************************************
   63 D1:B0F6 -  -  -  -  
   64 D1:B0F6 -  -  -  -  UnaryRandomInitialise:
   65 D1:B0F6 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B0F8 -  -  -  -  _URILoop:
   67 D1:B0F8 C5 -  -  -  		push 	bc
   68 D1:B0F9 CD 01 B1 D1 		call 	URandomHL
   69 D1:B0FD C1 -  -  -  		pop 	bc
   70 D1:B0FE 10 F8 -  -  		djnz 	_URILoop
   71 D1:B100 C9 -  -  -  		ret
   72 D1:B101 -  -  -  -  
   73 D1:B101 -  -  -  -  ; ***************************************************************************************
   74 D1:B101 -  -  -  -  ;
   75 D1:B101 -  -  -  -  ;							16 bit random number generator
   76 D1:B101 -  -  -  -  ;
   77 D1:B101 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B101 -  -  -  -  ;		Actual author unspecified.
   79 D1:B101 -  -  -  -  ;
   80 D1:B101 -  -  -  -  ; ***************************************************************************************
   81 D1:B101 -  -  -  -  
   82 D1:B101 -  -  -  -  URandomHL:
   83 D1:B101 2A F1 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B105 ED 5B F5 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B10A 44 -  -  -  	    ld 		b,h
   86 D1:B10B 4D -  -  -  	    ld 		c,l
   87 D1:B10C 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B111 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B116 2C -  -  -  	    inc 	l
   90 D1:B117 09 -  -  -  	    add 	hl,bc
   91 D1:B118 22 F1 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B11C 2A F5 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B120 ED 5A -  -  	    adc 	hl,de
   94 D1:B122 22 F5 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B126 EB -  -  -  	    ex 		de,hl
   96 D1:B127 2A F9 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B12B ED 4B FD A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B130 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B135 ED 43 FD A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B13A 9F -  -  -  	    sbc 	a,a
  101 D1:B13B E6 C5 -  -  	    and 	%11000101
  102 D1:B13D AD -  -  -  	    xor 	l
  103 D1:B13E 6F -  -  -  	    ld 		l,a
  104 D1:B13F 22 F9 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B143 EB -  -  -  	    ex 		de,hl
  106 D1:B144 09 -  -  -  	    add 	hl,bc
  107 D1:B145 C9 -  -  -  	    ret		
  108 D1:B146 -  -  -  -  
  109 D1:B146 -  -  -  -  ; ***************************************************************************************
  110 D1:B146 -  -  -  -  ;
  111 D1:B146 -  -  -  -  ;									Changes and Updates
  112 D1:B146 -  -  -  -  ;
  113 D1:B146 -  -  -  -  ; ***************************************************************************************
  114 D1:B146 -  -  -  -  ;
  115 D1:B146 -  -  -  -  ;		Date			Notes
  116 D1:B146 -  -  -  -  ;		==== 			=====
  117 D1:B146 -  -  -  -  ;
  118 D1:B146 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:B146 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B146 -  -  -  -  ; ***************************************************************************************
    2 D1:B146 -  -  -  -  ; ***************************************************************************************
    3 D1:B146 -  -  -  -  ;
    4 D1:B146 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B146 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B146 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B146 -  -  -  -  ;		Reviewed :	No
    8 D1:B146 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B146 -  -  -  -  ;
   10 D1:B146 -  -  -  -  ; ***************************************************************************************
   11 D1:B146 -  -  -  -  ; ***************************************************************************************
   12 D1:B146 -  -  -  -  
   13 D1:B146 -  -  -  -  ; ***************************************************************************************
   14 D1:B146 -  -  -  -  ;
   15 D1:B146 -  -  -  -  ;								sgn unary function
   16 D1:B146 -  -  -  -  ;
   17 D1:B146 -  -  -  -  ; ***************************************************************************************
   18 D1:B146 -  -  -  -  
   19 D1:B146 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B146 CD BC AE D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B14A CD 55 BC D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B14E CA BA AD D1 		jp 		z,UnaryInt32False
   23 D1:B152 D9 -  -  -  		exx
   24 D1:B153 CB 7C -  -  		bit 	7,h
   25 D1:B155 D9 -  -  -  		exx
   26 D1:B156 C2 B6 AD D1 		jp 		nz,UnaryInt32True
   27 D1:B15A 3E 01 -  -  		ld 		a,1
   28 D1:B15C C3 07 AF D1 		jp 		Return8BitConstant
   29 D1:B160 -  -  -  -  
   30 D1:B160 -  -  -  -  ; ***************************************************************************************
   31 D1:B160 -  -  -  -  ;
   32 D1:B160 -  -  -  -  ;									Changes and Updates
   33 D1:B160 -  -  -  -  ;
   34 D1:B160 -  -  -  -  ; ***************************************************************************************
   35 D1:B160 -  -  -  -  ;
   36 D1:B160 -  -  -  -  ;		Date			Notes
   37 D1:B160 -  -  -  -  ;		==== 			=====
   38 D1:B160 -  -  -  -  ;
   39 D1:B160 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   47 D1:B160 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B160 -  -  -  -  ; ***************************************************************************************
    2 D1:B160 -  -  -  -  ; ***************************************************************************************
    3 D1:B160 -  -  -  -  ;
    4 D1:B160 -  -  -  -  ;		Name : 		simple.asm
    5 D1:B160 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B160 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B160 -  -  -  -  ;		Reviewed :	No
    8 D1:B160 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B160 -  -  -  -  ;
   10 D1:B160 -  -  -  -  ; ***************************************************************************************
   11 D1:B160 -  -  -  -  ; ***************************************************************************************
   12 D1:B160 -  -  -  -  
   13 D1:B160 -  -  -  -  ; ***************************************************************************************
   14 D1:B160 -  -  -  -  ;
   15 D1:B160 -  -  -  -  ;								( unary function (think about it)
   16 D1:B160 -  -  -  -  ;
   17 D1:B160 -  -  -  -  ; ***************************************************************************************
   18 D1:B160 -  -  -  -  
   19 D1:B160 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B160 CD 63 AE D1 		call 	EvaluateAtPrecedence0
   21 D1:B164 C3 79 AC D1 		jp  	CheckRightBracket
   22 D1:B168 -  -  -  -  
   23 D1:B168 -  -  -  -  ; ***************************************************************************************
   24 D1:B168 -  -  -  -  ;
   25 D1:B168 -  -  -  -  ;									Handle &x
   26 D1:B168 -  -  -  -  ;
   27 D1:B168 -  -  -  -  ; ***************************************************************************************
   28 D1:B168 -  -  -  -  
   29 D1:B168 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B168 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B16B E6 C0 -  -  		and 		$C0
   32 D1:B16D FE 40 -  -  		cp 			$40
   33 D1:B16F C2 19 AD D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B173 C3 71 AF D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B177 -  -  -  -  
   36 D1:B177 -  -  -  -  ; ***************************************************************************************
   37 D1:B177 -  -  -  -  ;
   38 D1:B177 -  -  -  -  ;									Changes and Updates
   39 D1:B177 -  -  -  -  ;
   40 D1:B177 -  -  -  -  ; ***************************************************************************************
   41 D1:B177 -  -  -  -  ;
   42 D1:B177 -  -  -  -  ;		Date			Notes
   43 D1:B177 -  -  -  -  ;		==== 			=====
   44 D1:B177 -  -  -  -  ;
   45 D1:B177 -  -  -  -  ; ***************************************************************************************
   46 D1:B177 -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B177 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B177 -  -  -  -  ; ***************************************************************************************
    2 D1:B177 -  -  -  -  ; ***************************************************************************************
    3 D1:B177 -  -  -  -  ;
    4 D1:B177 -  -  -  -  ;		Name : 		str.asm
    5 D1:B177 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B177 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B177 -  -  -  -  ;		Reviewed :	No
    8 D1:B177 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B177 -  -  -  -  ;
   10 D1:B177 -  -  -  -  ; ***************************************************************************************
   11 D1:B177 -  -  -  -  ; ***************************************************************************************
   12 D1:B177 -  -  -  -  
   13 D1:B177 -  -  -  -  ; ***************************************************************************************
   14 D1:B177 -  -  -  -  ;
   15 D1:B177 -  -  -  -  ;								Str$() unary function
   16 D1:B177 -  -  -  -  ;
   17 D1:B177 -  -  -  -  ; ***************************************************************************************
   18 D1:B177 -  -  -  -  
   19 D1:B177 -  -  -  -  Unary_Str:	;; [str]
   20 D1:B177 CD 87 AC D1 		call 	CheckDollar
   21 D1:B17B DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B17E EE AC -  -  		xor		KWD_TILDE
   23 D1:B180 F5 -  -  -  		push 	af
   24 D1:B181 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B183 DD 23 -  -  		inc 	ix
   26 D1:B185 -  -  -  -  _USNotHex:		
   27 D1:B185 CD BC AE D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B189 01 15 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B18D F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B18E 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B190 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B192 3E 10 -  -  		ld 		a,16
   33 D1:B194 -  -  -  -  _USNotHex2:		
   34 D1:B194 CD 9D BC D1 		call 	Int32ToString 				
   35 D1:B198 21 15 A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B19C 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B19E C9 -  -  -  		ret
   38 D1:B19F -  -  -  -  
   39 D1:B19F -  -  -  -  ; ***************************************************************************************
   40 D1:B19F -  -  -  -  ;
   41 D1:B19F -  -  -  -  ;									Changes and Updates
   42 D1:B19F -  -  -  -  ;
   43 D1:B19F -  -  -  -  ; ***************************************************************************************
   44 D1:B19F -  -  -  -  ;
   45 D1:B19F -  -  -  -  ;		Date			Notes
   46 D1:B19F -  -  -  -  ;		==== 			=====
   47 D1:B19F -  -  -  -  ;
   48 D1:B19F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B19F -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B19F -  -  -  -  ; ***************************************************************************************
    2 D1:B19F -  -  -  -  ; ***************************************************************************************
    3 D1:B19F -  -  -  -  ;
    4 D1:B19F -  -  -  -  ;		Name : 		time.asm
    5 D1:B19F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B19F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B19F -  -  -  -  ;		Reviewed :	No
    8 D1:B19F -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B19F -  -  -  -  ;
   10 D1:B19F -  -  -  -  ; ***************************************************************************************
   11 D1:B19F -  -  -  -  ; ***************************************************************************************
   12 D1:B19F -  -  -  -  
   13 D1:B19F -  -  -  -  ; ***************************************************************************************
   14 D1:B19F -  -  -  -  ;
   15 D1:B19F -  -  -  -  ;							Get system time in ms
   16 D1:B19F -  -  -  -  ;
   17 D1:B19F -  -  -  -  ; ***************************************************************************************
   18 D1:B19F -  -  -  -  
   19 D1:B19F -  -  -  -  Unary_Time:	;; [time]
   20 D1:B19F CD 60 BD D1 			call 	SYSGetTimer
   21 D1:B1A3 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B1A5 C9 -  -  -  			ret
   23 D1:B1A6 -  -  -  -  
   24 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   25 D1:B1A6 -  -  -  -  ;
   26 D1:B1A6 -  -  -  -  ;									Changes and Updates
   27 D1:B1A6 -  -  -  -  ;
   28 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   29 D1:B1A6 -  -  -  -  ;
   30 D1:B1A6 -  -  -  -  ;		Date			Notes
   31 D1:B1A6 -  -  -  -  ;		==== 			=====
   32 D1:B1A6 -  -  -  -  ;
   33 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   34 D1:B1A6 -  -  -  -  			
Listing for file "_build.asm"
   50 D1:B1A6 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B1A6 -  -  -  -  ; ***************************************************************************************
    2 D1:B1A6 -  -  -  -  ; ***************************************************************************************
    3 D1:B1A6 -  -  -  -  ;
    4 D1:B1A6 -  -  -  -  ;		Name : 		top.asm
    5 D1:B1A6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1A6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1A6 -  -  -  -  ;		Reviewed :	No
    8 D1:B1A6 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B1A6 -  -  -  -  ;
   10 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   11 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   12 D1:B1A6 -  -  -  -  
   13 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   14 D1:B1A6 -  -  -  -  ;
   15 D1:B1A6 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B1A6 -  -  -  -  ;
   17 D1:B1A6 -  -  -  -  ; ***************************************************************************************
   18 D1:B1A6 -  -  -  -  
   19 D1:B1A6 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B1A6 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B1AA D9 -  -  -  			exx
   22 D1:B1AB 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B1AF D9 -  -  -  			exx
   24 D1:B1B0 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B1B2 C9 -  -  -  			ret
   26 D1:B1B3 -  -  -  -  
   27 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   28 D1:B1B3 -  -  -  -  ;
   29 D1:B1B3 -  -  -  -  ;									Changes and Updates
   30 D1:B1B3 -  -  -  -  ;
   31 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   32 D1:B1B3 -  -  -  -  ;
   33 D1:B1B3 -  -  -  -  ;		Date			Notes
   34 D1:B1B3 -  -  -  -  ;		==== 			=====
   35 D1:B1B3 -  -  -  -  ;
   36 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   37 D1:B1B3 -  -  -  -  			
Listing for file "_build.asm"
   51 D1:B1B3 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B1B3 -  -  -  -  ; ***************************************************************************************
    2 D1:B1B3 -  -  -  -  ; ***************************************************************************************
    3 D1:B1B3 -  -  -  -  ;
    4 D1:B1B3 -  -  -  -  ;		Name : 		val.asm
    5 D1:B1B3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1B3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B1B3 -  -  -  -  ;		Reviewed :	No
    8 D1:B1B3 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B1B3 -  -  -  -  ;
   10 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   11 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   12 D1:B1B3 -  -  -  -  
   13 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   14 D1:B1B3 -  -  -  -  ;
   15 D1:B1B3 -  -  -  -  ;								val( unary function
   16 D1:B1B3 -  -  -  -  ;
   17 D1:B1B3 -  -  -  -  ; ***************************************************************************************
   18 D1:B1B3 -  -  -  -  
   19 D1:B1B3 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B1B3 CD CB AE D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B1B7 E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B1B8 C1 -  -  -  		pop 	bc
   23 D1:B1B9 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B1BB CD 7B BB D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B1BF 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B1C1 C8 -  -  -  		ret		z 							; okay
   27 D1:B1C2 3E 03 C3 AF 
              AC D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B1C8 -  -  -  -  
   29 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   30 D1:B1C8 -  -  -  -  ;
   31 D1:B1C8 -  -  -  -  ;									Changes and Updates
   32 D1:B1C8 -  -  -  -  ;
   33 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   34 D1:B1C8 -  -  -  -  ;
   35 D1:B1C8 -  -  -  -  ;		Date			Notes
   36 D1:B1C8 -  -  -  -  ;		==== 			=====
   37 D1:B1C8 -  -  -  -  ;
   38 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   39 D1:B1C8 -  -  -  -  		
Listing for file "_build.asm"
   52 D1:B1C8 -  -  -  -  #include "core/procedures/locals.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
    1 D1:B1C8 -  -  -  -  ; ***************************************************************************************
    2 D1:B1C8 -  -  -  -  ; ***************************************************************************************
    3 D1:B1C8 -  -  -  -  ;
    4 D1:B1C8 -  -  -  -  ;		Name : 		locals.asm
    5 D1:B1C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B1C8 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B1C8 -  -  -  -  ;		Reviewed :	No
    8 D1:B1C8 -  -  -  -  ;		Purpose :	Handling of LOCAL, locals and parameters.
    9 D1:B1C8 -  -  -  -  ;
   10 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   11 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   12 D1:B1C8 -  -  -  -  
   13 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   14 D1:B1C8 -  -  -  -  ;
   15 D1:B1C8 -  -  -  -  ;									Locals command
   16 D1:B1C8 -  -  -  -  ;
   17 D1:B1C8 -  -  -  -  ; ***************************************************************************************
   18 D1:B1C8 -  -  -  -  
   19 D1:B1C8 -  -  -  -  Command_LOCAL:	;; [local]
   20 D1:B1C8 21 00 00 00 		ld 		hl,0 						; set HL'HL, the default value, to zero
   21 D1:B1CC D9 -  -  -  		exx
   22 D1:B1CD 21 00 00 00 		ld 		hl,0
   23 D1:B1D1 D9 -  -  -  		exx
   24 D1:B1D2 CD E0 B1 D1 		call 	LocalCreateVariable 		; create a variable
   25 D1:B1D6 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a comma ?
   26 D1:B1D9 FE A6 -  -  		cp 		KWD_COMMA
   27 D1:B1DB C0 -  -  -  		ret 	nz 							; exit if not
   28 D1:B1DC DD 23 -  -  		inc 	ix 							; skip comma
   29 D1:B1DE 18 E8 -  -  		jr 		Command_LOCAL 				; and go try the next one.
   30 D1:B1E0 -  -  -  -  		
   31 D1:B1E0 -  -  -  -  ; ***************************************************************************************
   32 D1:B1E0 -  -  -  -  ;
   33 D1:B1E0 -  -  -  -  ;			Create variable at IX, give it the initial value HL'HL
   34 D1:B1E0 -  -  -  -  ;						(used for parameters and locals)
   35 D1:B1E0 -  -  -  -  ;
   36 D1:B1E0 -  -  -  -  ; ***************************************************************************************
   37 D1:B1E0 -  -  -  -  
   38 D1:B1E0 -  -  -  -  LocalCreateVariable:
   39 D1:B1E0 E5 -  -  -  		push 	hl 							; push the initial value on the stack.
   40 D1:B1E1 D9 -  -  -  		exx
   41 D1:B1E2 E5 -  -  -  		push 	hl
   42 D1:B1E3 D9 -  -  -  		exx
   43 D1:B1E4 -  -  -  -  
   44 D1:B1E4 3E FF -  -  		ld 		a,$FF 						; we can autocreate locals and parameters
   45 D1:B1E6 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   46 D1:B1EA CD 68 B6 D1 		call 	FindVariable 				; locate the variable, address in UHL now.
   47 D1:B1EE E5 -  -  -  		push 	hl 							; save variable address.
   48 D1:B1EF -  -  -  -  
   49 D1:B1EF 3E 65 -  -  		ld		a,STM_LOCAL 				; create a local stack frame 
   50 D1:B1F1 CD A5 B5 D1 		call 	StackOpenFrame
   51 D1:B1F5 -  -  -  -  
   52 D1:B1F5 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; point to SP+1
   53 D1:B1F9 23 -  -  -  		inc 	hl
   54 D1:B1FA D1 -  -  -  		pop 	de 							; variable address in UDE keeping on stack.
   55 D1:B1FB D5 -  -  -  		push 	de
   56 D1:B1FC ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr					; write the variable address to SP+1, advance to +5
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/locals.asm"
   57 D1:B202 -  -  -  -  		;
   58 D1:B202 EB -  -  -  		ex 		de,hl 						; final write address is now in DE, variable address in HL
   59 D1:B203 CD 25 B2 D1 		call 	_LCVRead32HL 				; read HL current value into HL'HL
   60 D1:B207 CD 15 B2 D1 		call 	_LCVWrite32HL 				; and write back the original value of the variable to DE.
   61 D1:B20B -  -  -  -  		;
   62 D1:B20B D1 -  -  -  		pop 	de 							; the address of the variable itself.
   63 D1:B20C -  -  -  -  		;
   64 D1:B20C D9 -  -  -  		exx 								; restore the value being initialised to.
   65 D1:B20D E1 -  -  -  		pop 	hl
   66 D1:B20E D9 -  -  -  		exx
   67 D1:B20F E1 -  -  -  		pop 	hl
   68 D1:B210 CD 15 B2 D1 		call 	_LCVWrite32HL 				; write HL'HL to DE.
   69 D1:B214 C9 -  -  -  		ret
   70 D1:B215 -  -  -  -  
   71 D1:B215 -  -  -  -  ; ***************************************************************************************
   72 D1:B215 -  -  -  -  ;
   73 D1:B215 -  -  -  -  ;									Write HL'HL to DE.
   74 D1:B215 -  -  -  -  ;
   75 D1:B215 -  -  -  -  ; ***************************************************************************************
   76 D1:B215 -  -  -  -  
   77 D1:B215 -  -  -  -  _LCVWrite32HL:
   78 D1:B215 7D -  -  -  		ld 		a,l
   79 D1:B216 12 -  -  -  		ld 		(de),a
   80 D1:B217 13 -  -  -  		inc 	de
   81 D1:B218 7C -  -  -  		ld 		a,h
   82 D1:B219 12 -  -  -  		ld 		(de),a
   83 D1:B21A 13 -  -  -  		inc 	de
   84 D1:B21B D5 -  -  -  		push 	de
   85 D1:B21C D9 -  -  -  		exx
   86 D1:B21D D1 -  -  -  		pop 	de
   87 D1:B21E 7D -  -  -  		ld 		a,l
   88 D1:B21F 12 -  -  -  		ld 		(de),a
   89 D1:B220 13 -  -  -  		inc 	de
   90 D1:B221 7C -  -  -  		ld 		a,h
   91 D1:B222 12 -  -  -  		ld 		(de),a
   92 D1:B223 D9 -  -  -  		exx
   93 D1:B224 C9 -  -  -  		ret
   94 D1:B225 -  -  -  -  
   95 D1:B225 -  -  -  -  ; ***************************************************************************************
   96 D1:B225 -  -  -  -  ;
   97 D1:B225 -  -  -  -  ;									Read (HL) to HL'HL
   98 D1:B225 -  -  -  -  ;
   99 D1:B225 -  -  -  -  ; ***************************************************************************************
  100 D1:B225 -  -  -  -  
  101 D1:B225 -  -  -  -  _LCVRead32HL:
  102 D1:B225 E5 -  -  -  		push 	hl
  103 D1:B226 ED 27 -  -  		ld_ind_hl
  104 D1:B228 D9 -  -  -  		exx
  105 D1:B229 E1 -  -  -  		pop 	hl
  106 D1:B22A 23 -  -  -  		inc 	hl
  107 D1:B22B 23 -  -  -  		inc 	hl
  108 D1:B22C ED 27 -  -  		ld_ind_hl
  109 D1:B22E D9 -  -  -  		exx
  110 D1:B22F C9 -  -  -  		ret
  111 D1:B230 -  -  -  -  
  112 D1:B230 -  -  -  -  ; ***************************************************************************************
  113 D1:B230 -  -  -  -  ;
  114 D1:B230 -  -  -  -  ;			If the local marker is on the top of the stack, then undo the local
  115 D1:B230 -  -  -  -  ;			or parameter
  116 D1:B230 -  -  -  -  ;
  117 D1:B230 -  -  -  -  ; ***************************************************************************************
  118 D1:B230 -  -  -  -  
  119 D1:B230 -  -  -  -  PopLocals:
  120 D1:B230 3E 65 -  -  		ld 		a,STM_LOCAL 				; is there a LOCAL on the stack ?
  121 D1:B232 CD DD B5 D1 		call 	StackCheckFrame
  122 D1:B236 C0 -  -  -  		ret 	nz 							; no, we've popped this lot.
  123 D1:B237 -  -  -  -  
  124 D1:B237 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get SP+1, which is the address to write to.
  125 D1:B23B 23 -  -  -  		inc 	hl
  126 D1:B23C E5 -  -  -  		push 	hl 							; save it
  127 D1:B23D ED 27 -  -  		ld_ind_hl 							; read address into HL
  128 D1:B23F EB -  -  -  		ex 		de,hl 						; target address is in DE.
  129 D1:B240 -  -  -  -  		;
  130 D1:B240 E1 -  -  -  		pop 	hl 							; address of old value
  131 D1:B241 23 -  -  -  		inc 	hl
  132 D1:B242 23 -  -  -  		inc 	hl
  133 D1:B243 23 -  -  -  		inc 	hl
  134 D1:B244 23 -  -  -  		inc 	hl
  135 D1:B245 CD 25 B2 D1 		call 	_LCVRead32HL 				; value into HL'HL
  136 D1:B249 CD 15 B2 D1 		call 	_LCVWrite32HL 				; and write it out again to var address
  137 D1:B24D -  -  -  -  
  138 D1:B24D CD CA B5 D1 		call 	StackCloseFrame 			; remove the local/parameter
  139 D1:B251 18 DD -  -  		jr 		PopLocals 					; check any more ?
  140 D1:B253 -  -  -  -  
  141 D1:B253 -  -  -  -  ; ***************************************************************************************
  142 D1:B253 -  -  -  -  ;
  143 D1:B253 -  -  -  -  ;									Changes and Updates
  144 D1:B253 -  -  -  -  ;
  145 D1:B253 -  -  -  -  ; ***************************************************************************************
  146 D1:B253 -  -  -  -  ;
  147 D1:B253 -  -  -  -  ;		Date			Notes
  148 D1:B253 -  -  -  -  ;		==== 			=====
  149 D1:B253 -  -  -  -  ;
  150 D1:B253 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 D1:B253 -  -  -  -  #include "core/procedures/proc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
    1 D1:B253 -  -  -  -  ; ***************************************************************************************
    2 D1:B253 -  -  -  -  ; ***************************************************************************************
    3 D1:B253 -  -  -  -  ;
    4 D1:B253 -  -  -  -  ;		Name : 		proc.asm
    5 D1:B253 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B253 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B253 -  -  -  -  ;		Reviewed :	No
    8 D1:B253 -  -  -  -  ;		Purpose :	Proc command
    9 D1:B253 -  -  -  -  ;
   10 D1:B253 -  -  -  -  ; ***************************************************************************************
   11 D1:B253 -  -  -  -  ; ***************************************************************************************
   12 D1:B253 -  -  -  -  
   13 D1:B253 -  -  -  -  ; ***************************************************************************************
   14 D1:B253 -  -  -  -  ;
   15 D1:B253 -  -  -  -  ;										PROC Command
   16 D1:B253 -  -  -  -  ;
   17 D1:B253 -  -  -  -  ; ***************************************************************************************
   18 D1:B253 -  -  -  -  
   19 D1:B253 -  -  -  -  Command_PROC: 	;; [proc]
   20 D1:B253 3E 41 -  -  			ld		a,STM_PROC 				; open a PROC frame. This is an empty
   21 D1:B255 CD A5 B5 D1 			call 	StackOpenFrame 			; marker position.
   22 D1:B259 -  -  -  -  			;
   23 D1:B259 DD 7E 00 -  			ld 		a,(ix+0) 				; check followed by identifier
   24 D1:B25C FE 26 -  -  			cp 		IDENTIFIER_END
   25 D1:B25E D2 19 AD D1 			jp 		nc,SyntaxError 			; no , no call possible.
   26 D1:B262 CD D8 B2 D1 			call 	SearchProcedure 		; find procedure referenced at IX.
   27 D1:B266 -  -  -  -  			;
   28 D1:B266 -  -  -  -  			;		We have the start of line in DE, and the position in the line
   29 D1:B266 -  -  -  -  			;		of the callee (possible parameter list) in HL.
   30 D1:B266 -  -  -  -  			;
   31 D1:B266 D5 -  -  -  			push 	de 						; save start of line
   32 D1:B267 DD 7E 00 -  			ld 		a,(ix+0) 				; does the caller provide any parameters
   33 D1:B26A FE 95 -  -  			cp 		KWD_LPAREN 				; e.g. DEF PROC name(42)
   34 D1:B26C CC 83 B2 D1 			call 	z,ProcDoParameterList 	; this may create more LOCAL frames.
   35 D1:B270 -  -  -  -  			;
   36 D1:B270 E5 -  -  -  			push 	hl 						; save start of new code, after PROC call
   37 D1:B271 -  -  -  -  			;
   38 D1:B271 3E 53 -  -  			ld 		a,STM_PROCINFO 			; open a frame for the PROC data.
   39 D1:B273 CD A5 B5 D1 			call 	StackOpenFrame 
   40 D1:B277 CD E3 B5 D1 			call 	StackSavePosition 		; and save the return address on the stack.
   41 D1:B27B -  -  -  -  
   42 D1:B27B DD E1 -  -  			pop 	ix 						; new position in code
   43 D1:B27D E1 -  -  -  			pop 	hl 						; start of line
   44 D1:B27E 22 DD A8 D1 			ld 		(CurrentLineStart),hl 	; save start of line
   45 D1:B282 C9 -  -  -  			ret
   46 D1:B283 -  -  -  -  
   47 D1:B283 -  -  -  -  ; ***************************************************************************************
   48 D1:B283 -  -  -  -  ;
   49 D1:B283 -  -  -  -  ;			IX points to the ( of the parameter list <known>, check the param list
   50 D1:B283 -  -  -  -  ; 			exists at callee (HL), then transfer the parameters
   51 D1:B283 -  -  -  -  ;
   52 D1:B283 -  -  -  -  ;			on exit the HL and IX should both point to the position *after* the
   53 D1:B283 -  -  -  -  ;			final ) on the parameter lists.
   54 D1:B283 -  -  -  -  ;
   55 D1:B283 -  -  -  -  ; ***************************************************************************************
   56 D1:B283 -  -  -  -  
   57 D1:B283 -  -  -  -  ProcDoParameterList:
   58 D1:B283 7E -  -  -  			ld 		a,(hl) 					; check (HL) = (DE) , at this point they
   59 D1:B284 DD BE 00 -  			cp 		(ix+0) 					; should point to the same thing ( , or )
   60 D1:B287 20 1E -  -  			jr 		nz,_ParamError
   61 D1:B289 -  -  -  -  			;
   62 D1:B289 DD 23 -  -  			inc 	ix 						; skip over it
   63 D1:B28B 23 -  -  -  			inc 	hl
   64 D1:B28C FE A5 -  -  			cp 		KWD_RPAREN 				; if it was ), then reached the end.
   65 D1:B28E C8 -  -  -  			ret 	z
   66 D1:B28F -  -  -  -  			;
   67 D1:B28F FE 95 -  -  			cp 		KWD_LPAREN 				; if it was ( or , it's okay.
   68 D1:B291 28 04 -  -  			jr 		z,_PDPFound
   69 D1:B293 FE A6 -  -  			cp 		KWD_COMMA
   70 D1:B295 20 10 -  -  			jr 		nz,_ParamError 			; if not, there's an error.
   71 D1:B297 -  -  -  -  			;
   72 D1:B297 -  -  -  -  			;		at this point HL points to callee, IX to caller.
   73 D1:B297 -  -  -  -  			;
   74 D1:B297 -  -  -  -  _PDPFound:			
   75 D1:B297 E5 -  -  -  			push 	hl 						; save callee on stack
   76 D1:B298 CD E2 AE D1 			call 	EvaluateInteger 		; get a parameter, integer only => HL'HL
   77 D1:B29C DD E3 -  -  			ex 		(sp),ix 				; now IX points to callee, caller is on stack
   78 D1:B29E CD E0 B1 D1 			call 	LocalCreateVariable 	; create variable at IX with start value HL'HL
   79 D1:B2A2 DD E3 -  -  			ex 		(sp),ix 				; now IX is caller again 
   80 D1:B2A4 E1 -  -  -  			pop 	hl 						; and HL the callee
   81 D1:B2A5 18 DC -  -  			jr 		ProcDoParameterList 	; both should point to ) or ,
   82 D1:B2A7 -  -  -  -  
   83 D1:B2A7 -  -  -  -  _ParamError:
   84 D1:B2A7 3E 13 C3 AF 
              AC D1 -  -  			ERR_PARAM
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/proc.asm"
   85 D1:B2AD -  -  -  -  
   86 D1:B2AD -  -  -  -  ; ***************************************************************************************
   87 D1:B2AD -  -  -  -  ;
   88 D1:B2AD -  -  -  -  ;										ENDPROC Command
   89 D1:B2AD -  -  -  -  ;
   90 D1:B2AD -  -  -  -  ; ***************************************************************************************
   91 D1:B2AD -  -  -  -  
   92 D1:B2AD -  -  -  -  Command_ENDPROC: ;; [endproc]
   93 D1:B2AD CD 30 B2 D1 			call 	PopLocals 				; restore any locals (declared using LOCAL)
   94 D1:B2B1 3E 53 -  -  			ld		a,STM_PROCINFO 			; check its a procedure information frame
   95 D1:B2B3 CD DD B5 D1 			call 	StackCheckFrame
   96 D1:B2B7 20 19 -  -  			jr 		nz,_EndProcError
   97 D1:B2B9 CD FE B5 D1 			call 	StackLoadPosition 		; restore position into IX/SOL
   98 D1:B2BD CD CA B5 D1 			call 	StackCloseFrame 		
   99 D1:B2C1 -  -  -  -  
  100 D1:B2C1 CD 30 B2 D1 			call 	PopLocals 				; restore any locals (parameters)
  101 D1:B2C5 3E 41 -  -  			ld		a,STM_PROC 				; check its a procedure marker frame
  102 D1:B2C7 CD DD B5 D1 			call 	StackCheckFrame
  103 D1:B2CB 20 05 -  -  			jr 		nz,_EndProcError
  104 D1:B2CD CD CA B5 D1 			call 	StackCloseFrame 		
  105 D1:B2D1 C9 -  -  -  			ret
  106 D1:B2D2 -  -  -  -  _EndProcError:
  107 D1:B2D2 3E 10 C3 AF 
              AC D1 -  -  			ERR_NOPROC
  108 D1:B2D8 -  -  -  -  
  109 D1:B2D8 -  -  -  -  ; ***************************************************************************************
  110 D1:B2D8 -  -  -  -  ;
  111 D1:B2D8 -  -  -  -  ;									Changes and Updates
  112 D1:B2D8 -  -  -  -  ;
  113 D1:B2D8 -  -  -  -  ; ***************************************************************************************
  114 D1:B2D8 -  -  -  -  ;
  115 D1:B2D8 -  -  -  -  ;		Date			Notes
  116 D1:B2D8 -  -  -  -  ;		==== 			=====
  117 D1:B2D8 -  -  -  -  ;
  118 D1:B2D8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B2D8 -  -  -  -  #include "core/procedures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
    1 D1:B2D8 -  -  -  -  ; ***************************************************************************************
    2 D1:B2D8 -  -  -  -  ; ***************************************************************************************
    3 D1:B2D8 -  -  -  -  ;
    4 D1:B2D8 -  -  -  -  ;		Name : 		search.asm
    5 D1:B2D8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2D8 -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B2D8 -  -  -  -  ;		Reviewed :	No
    8 D1:B2D8 -  -  -  -  ;		Purpose :	Search program for procedures
    9 D1:B2D8 -  -  -  -  ;
   10 D1:B2D8 -  -  -  -  ; ***************************************************************************************
   11 D1:B2D8 -  -  -  -  ; ***************************************************************************************
   12 D1:B2D8 -  -  -  -  
   13 D1:B2D8 -  -  -  -  ; ***************************************************************************************
   14 D1:B2D8 -  -  -  -  ;
   15 D1:B2D8 -  -  -  -  ;					Search program for procedure, procedure identifier at IX
   16 D1:B2D8 -  -  -  -  ;					returns line at HL, after identifier in IX / or error.
   17 D1:B2D8 -  -  -  -  ;
   18 D1:B2D8 -  -  -  -  ;					A very simple search which may actually be good enough.
   19 D1:B2D8 -  -  -  -  ;					Give consideration to a table w/index ? 
   20 D1:B2D8 -  -  -  -  ;
   21 D1:B2D8 -  -  -  -  ; ***************************************************************************************
   22 D1:B2D8 -  -  -  -  
   23 D1:B2D8 -  -  -  -  SearchProcedure:
   24 D1:B2D8 DD 4E 00 -  			ld 		c,(ix+0) 				; put the first character of the name into C.
   25 D1:B2DB -  -  -  -  
   26 D1:B2DB 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; start of program space
   27 D1:B2DF -  -  -  -  			;
   28 D1:B2DF -  -  -  -  			;		Main loop. First we look for <DEF> <PROC> <1st Character>
   29 D1:B2DF -  -  -  -  			;
   30 D1:B2DF 7E -  -  -  _SPLoop:	ld 		a,(hl) 					; is this the end of the program.
   31 D1:B2E0 B7 -  -  -  			or 		a
   32 D1:B2E1 28 38 -  -  			jr 		z,_SPFail
   33 D1:B2E3 E5 -  -  -  			push 	hl 						; save start of line on the stack
   34 D1:B2E4 23 -  -  -  			inc 	hl 						; skip over offset and line number.
   35 D1:B2E5 23 -  -  -  			inc 	hl
   36 D1:B2E6 23 -  -  -  			inc 	hl
   37 D1:B2E7 7E -  -  -  			ld 		a,(hl) 					; check for DEF.
   38 D1:B2E8 FE B6 -  -  			cp 		KWD_DEF 				
   39 D1:B2EA 20 0B -  -  			jr 		nz,_SPNext
   40 D1:B2EC 23 -  -  -  			inc 	hl 				
   41 D1:B2ED 7E -  -  -  			ld 		a,(hl) 					; check for PROC.
   42 D1:B2EE FE B7 -  -  			cp 		KWD_PROC
   43 D1:B2F0 20 05 -  -  			jr 		nz,_SPNext
   44 D1:B2F2 23 -  -  -  			inc 	hl
   45 D1:B2F3 7E -  -  -  			ld 		a,(hl) 					; check first character
   46 D1:B2F4 B9 -  -  -  			cp 		c
   47 D1:B2F5 28 09 -  -  			jr 		z,_SPFullCheck 			; no, do full check.
   48 D1:B2F7 -  -  -  -  			;
   49 D1:B2F7 -  -  -  -  			;		Advance to next entry.
   50 D1:B2F7 -  -  -  -  			;			
   51 D1:B2F7 E1 -  -  -  _SPNext:	pop 	hl 						; start of line
   52 D1:B2F8 11 00 00 00 			ld 		de,0 					; offset into UDE
   53 D1:B2FC 5E -  -  -  			ld 		e,(hl)
   54 D1:B2FD 19 -  -  -  			add 	hl,de 					; add it and go round again.
   55 D1:B2FE 18 DF -  -  			jr 		_SPLoop
   56 D1:B300 -  -  -  -  			;
   57 D1:B300 -  -  -  -  			;		Full check. IX points to the name in the caller, DE to HL to the name in the
   58 D1:B300 -  -  -  -  			; 		DEF PROC line.
   59 D1:B300 -  -  -  -  			;		
   60 D1:B300 -  -  -  -  			;		Already know the first characters match
   61 D1:B300 -  -  -  -  			;
   62 D1:B300 -  -  -  -  _SPFullCheck:
   63 D1:B300 DD E5 -  -  			push 	ix 						; save position of the 1st character of caller on the stack.			
   64 D1:B302 -  -  -  -  _SPCheckLoop:
   65 D1:B302 DD 23 -  -  			inc 	ix 						; look at next character.
   66 D1:B304 23 -  -  -  			inc 	hl
   67 D1:B305 DD 7E 00 -  			ld 		a,(ix+0) 				; get first in caller.
   68 D1:B308 FE 26 -  -  			cp 		IDENTIFIER_END 			; end of identifier ?
   69 D1:B30A 30 07 -  -  			jr 		nc,_SPCheckBothEnd 		; check both end here.
   70 D1:B30C BE -  -  -  			cp 		(hl) 					; matches callee ?
   71 D1:B30D 28 F3 -  -  			jr 		z,_SPCheckLoop 			; go round again keep checking.
   72 D1:B30F -  -  -  -  			;
   73 D1:B30F -  -  -  -  			;		Full check failed.
   74 D1:B30F -  -  -  -  			;
   75 D1:B30F -  -  -  -  _SPFullCheckFailed:			
   76 D1:B30F DD E1 -  -  			pop 	ix 						; restore the original caller position
   77 D1:B311 18 E4 -  -  			jr 		_SPNext 				; do the next line.
   78 D1:B313 -  -  -  -  			;
   79 D1:B313 -  -  -  -  			;		End of identifier in caller, check end of identifier in callee
   80 D1:B313 -  -  -  -  			;
   81 D1:B313 -  -  -  -  _SPCheckBothEnd:
   82 D1:B313 7E -  -  -  			ld 		a,(hl) 					; if the character in callee is an identifier	
   83 D1:B314 FE 26 -  -  			cp 		IDENTIFIER_END 			; the names do not match.
   84 D1:B316 38 F7 -  -  			jr 		c,_SPFullCheckFailed			
   85 D1:B318 -  -  -  -  			;
   86 D1:B318 -  -  -  -  			;	 	We found it.
   87 D1:B318 -  -  -  -  			;
   88 D1:B318 C1 -  -  -  			pop 	bc  					; throw away the original caller position
   89 D1:B319 D1 -  -  -  			pop 	de 						; DE is the start of the line it is on
   90 D1:B31A C9 -  -  -  			ret 							; HL is the character after the identifier.
   91 D1:B31B -  -  -  -  
   92 D1:B31B -  -  -  -  _SPFail: 									; come here when not found.
   93 D1:B31B 3E 14 C3 AF 
              AC D1 -  -  			ERR_PROC			
Listing for file "/home/paulr/Projects/dax-basic/source/core/procedures/search.asm"
   94 D1:B321 -  -  -  -  
   95 D1:B321 -  -  -  -  ; ***************************************************************************************
   96 D1:B321 -  -  -  -  ;
   97 D1:B321 -  -  -  -  ;									Changes and Updates
   98 D1:B321 -  -  -  -  ;
   99 D1:B321 -  -  -  -  ; ***************************************************************************************
  100 D1:B321 -  -  -  -  ;
  101 D1:B321 -  -  -  -  ;		Date			Notes
  102 D1:B321 -  -  -  -  ;		==== 			=====
  103 D1:B321 -  -  -  -  ;
  104 D1:B321 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B321 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B321 -  -  -  -  ; ***************************************************************************************
    2 D1:B321 -  -  -  -  ; ***************************************************************************************
    3 D1:B321 -  -  -  -  ;
    4 D1:B321 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B321 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B321 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B321 -  -  -  -  ;		Reviewed :	No
    8 D1:B321 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B321 -  -  -  -  ;
   10 D1:B321 -  -  -  -  ; ***************************************************************************************
   11 D1:B321 -  -  -  -  ; ***************************************************************************************
   12 D1:B321 -  -  -  -  
   13 D1:B321 -  -  -  -  ; ***************************************************************************************
   14 D1:B321 -  -  -  -  ;
   15 D1:B321 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B321 -  -  -  -  ;
   17 D1:B321 -  -  -  -  ; ***************************************************************************************
   18 D1:B321 -  -  -  -  
   19 D1:B321 -  -  -  -  AllocateBytes:
   20 D1:B321 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B322 21 00 00 00 		ld 		hl,$000000
   22 D1:B326 62 -  -  -  		ld 		h,d
   23 D1:B327 6B -  -  -  		ld 		l,e
   24 D1:B328 -  -  -  -  		;
   25 D1:B328 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 D1:B32D D5 -  -  -  		push 	de 							; save on stack
   27 D1:B32E 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 D1:B32F 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   29 D1:B333 -  -  -  -  		;
   30 D1:B333 EB -  -  -  		ex 		de,hl 						; put in DE
   31 D1:B334 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 D1:B338 AF -  -  -  		xor 	a
   33 D1:B339 ED 52 -  -  		sbc 	hl,de
   34 D1:B33B E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 D1:B33C D0 -  -  -  		ret 	nc 							; return if high >= low
   36 D1:B33D 3E 0B C3 AF 
              AC D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 D1:B343 -  -  -  -  
   38 D1:B343 -  -  -  -  ; ***************************************************************************************
   39 D1:B343 -  -  -  -  ;
   40 D1:B343 -  -  -  -  ;									Changes and Updates
   41 D1:B343 -  -  -  -  ;
   42 D1:B343 -  -  -  -  ; ***************************************************************************************
   43 D1:B343 -  -  -  -  ;
   44 D1:B343 -  -  -  -  ;		Date			Notes
   45 D1:B343 -  -  -  -  ;		==== 			=====
   46 D1:B343 -  -  -  -  ;
   47 D1:B343 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B343 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B343 -  -  -  -  ; ***************************************************************************************
    2 D1:B343 -  -  -  -  ; ***************************************************************************************
    3 D1:B343 -  -  -  -  ;
    4 D1:B343 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B343 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B343 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B343 -  -  -  -  ;		Reviewed :	No
    8 D1:B343 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B343 -  -  -  -  ;
   10 D1:B343 -  -  -  -  ; ***************************************************************************************
   11 D1:B343 -  -  -  -  ; ***************************************************************************************
   12 D1:B343 -  -  -  -  
   13 D1:B343 -  -  -  -  ; ***************************************************************************************
   14 D1:B343 -  -  -  -  ;
   15 D1:B343 -  -  -  -  ;										CLEAR command
   16 D1:B343 -  -  -  -  ;
   17 D1:B343 -  -  -  -  ; ***************************************************************************************
   18 D1:B343 -  -  -  -  
   19 D1:B343 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B343 -  -  -  -  		;
   21 D1:B343 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B343 -  -  -  -  		;
   23 D1:B343 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B347 -  -  -  -  _CCFindLow:
   25 D1:B347 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B34B 5E -  -  -  		ld 		e,(hl)		
   27 D1:B34C 19 -  -  -  		add 	hl,de
   28 D1:B34D 7B -  -  -  		ld 		a,e
   29 D1:B34E B7 -  -  -  		or 		a
   30 D1:B34F 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B351 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B352 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B356 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B357 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B35B -  -  -  -  		;
   36 D1:B35B -  -  -  -  		; 	 		Reset the language stack
   37 D1:B35B -  -  -  -  		;
   38 D1:B35B 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B35F -  -  -  -  		;
   40 D1:B35F 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:B363 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:B367 19 -  -  -  		add 	hl,de
   43 D1:B368 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:B36A 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:B36E -  -  -  -  		;
   46 D1:B36E 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:B372 19 -  -  -  		add 	hl,de
   48 D1:B373 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:B377 -  -  -  -  		;
   50 D1:B377 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 D1:B377 -  -  -  -  		;
   52 D1:B377 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 D1:B37B -  -  -  -  _CCFClearHT:
   54 D1:B37B 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 D1:B37C 36 00 -  -  		ld 		(hl),0
   56 D1:B37E 1B -  -  -  		dec 	de
   57 D1:B37F 7A -  -  -  		ld 		a,d
   58 D1:B380 B3 -  -  -  		or 		e
   59 D1:B381 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 D1:B383 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   61 D1:B387 -  -  -  -  		;
   62 D1:B387 -  -  -  -  		; 		Save highest byte that can be allocate
   63 D1:B387 -  -  -  -  		;
   64 D1:B387 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   65 D1:B38B -  -  -  -  		;
   66 D1:B38B -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 D1:B38B -  -  -  -  		;
   68 D1:B38B CD F6 B0 D1 		call 	UnaryRandomInitialise
   69 D1:B38F -  -  -  -  		;
   70 D1:B38F -  -  -  -  		;		Erase the stack
   71 D1:B38F -  -  -  -  		;
   72 D1:B38F CD 99 B5 D1 		call 	StackReset 					; reset the basic stack to empty
   73 D1:B393 -  -  -  -  		;
   74 D1:B393 -  -  -  -  		;		Reset READ/DATA
   75 D1:B393 -  -  -  -  		;
   76 D1:B393 CD 59 AC D1 		call 	Command_RESTORE
   77 D1:B397 C9 -  -  -  		ret
   78 D1:B398 -  -  -  -  
   79 D1:B398 -  -  -  -  ; ***************************************************************************************
   80 D1:B398 -  -  -  -  ;
   81 D1:B398 -  -  -  -  ;									Changes and Updates
   82 D1:B398 -  -  -  -  ;
   83 D1:B398 -  -  -  -  ; ***************************************************************************************
   84 D1:B398 -  -  -  -  ;
   85 D1:B398 -  -  -  -  ;		Date			Notes
   86 D1:B398 -  -  -  -  ;		==== 			=====
   87 D1:B398 -  -  -  -  ;
   88 D1:B398 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 D1:B398 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B398 -  -  -  -  ; ***************************************************************************************
    2 D1:B398 -  -  -  -  ; ***************************************************************************************
    3 D1:B398 -  -  -  -  ;
    4 D1:B398 -  -  -  -  ;		Name : 		instance.asm
    5 D1:B398 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B398 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B398 -  -  -  -  ;		Reviewed :	No
    8 D1:B398 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B398 -  -  -  -  ;
   10 D1:B398 -  -  -  -  ; ***************************************************************************************
   11 D1:B398 -  -  -  -  ; ***************************************************************************************
   12 D1:B398 -  -  -  -  
   13 D1:B398 -  -  -  -  ; ***************************************************************************************
   14 D1:B398 -  -  -  -  ;
   15 D1:B398 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B398 -  -  -  -  ;
   17 D1:B398 -  -  -  -  ; ***************************************************************************************
   18 D1:B398 -  -  -  -  
   19 D1:B398 -  -  -  -  SetCurrentInstance:
   20 D1:B398 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B39D 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B3A1 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B3A6 -  -  -  -  
   24 D1:B3A6 C9 -  -  -  		ret
   25 D1:B3A7 -  -  -  -  
   26 D1:B3A7 -  -  -  -  
   27 D1:B3A7 -  -  -  -  ; ***************************************************************************************
   28 D1:B3A7 -  -  -  -  ;
   29 D1:B3A7 -  -  -  -  ;									Changes and Updates
   30 D1:B3A7 -  -  -  -  ;
   31 D1:B3A7 -  -  -  -  ; ***************************************************************************************
   32 D1:B3A7 -  -  -  -  ;
   33 D1:B3A7 -  -  -  -  ;		Date			Notes
   34 D1:B3A7 -  -  -  -  ;		==== 			=====
   35 D1:B3A7 -  -  -  -  ;
   36 D1:B3A7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 D1:B3A7 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B3A7 -  -  -  -  ; ***************************************************************************************
    2 D1:B3A7 -  -  -  -  ; ***************************************************************************************
    3 D1:B3A7 -  -  -  -  ;
    4 D1:B3A7 -  -  -  -  ;		Name : 		new.asm
    5 D1:B3A7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3A7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B3A7 -  -  -  -  ;		Reviewed :	No
    8 D1:B3A7 -  -  -  -  ;		Purpose :	New command.
    9 D1:B3A7 -  -  -  -  ;
   10 D1:B3A7 -  -  -  -  ; ***************************************************************************************
   11 D1:B3A7 -  -  -  -  ; ***************************************************************************************
   12 D1:B3A7 -  -  -  -  
   13 D1:B3A7 -  -  -  -  ; ***************************************************************************************
   14 D1:B3A7 -  -  -  -  ;
   15 D1:B3A7 -  -  -  -  ;										NEW command
   16 D1:B3A7 -  -  -  -  ;
   17 D1:B3A7 -  -  -  -  ; ***************************************************************************************
   18 D1:B3A7 -  -  -  -  
   19 D1:B3A7 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B3A7 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B3AB 36 00 -  -  		ld 		(hl),0
   22 D1:B3AD CD 43 B3 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B3B1 3E 00 C3 AF 
              AC D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B3B7 -  -  -  -  
   25 D1:B3B7 -  -  -  -  ; ***************************************************************************************
   26 D1:B3B7 -  -  -  -  ;
   27 D1:B3B7 -  -  -  -  ;									Changes and Updates
   28 D1:B3B7 -  -  -  -  ;
   29 D1:B3B7 -  -  -  -  ; ***************************************************************************************
   30 D1:B3B7 -  -  -  -  ;
   31 D1:B3B7 -  -  -  -  ;		Date			Notes
   32 D1:B3B7 -  -  -  -  ;		==== 			=====
   33 D1:B3B7 -  -  -  -  ;
   34 D1:B3B7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 D1:B3B7 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 D1:B3B7 -  -  -  -  ; ***************************************************************************************
    2 D1:B3B7 -  -  -  -  ; ***************************************************************************************
    3 D1:B3B7 -  -  -  -  ;
    4 D1:B3B7 -  -  -  -  ;		Name : 		for.asm
    5 D1:B3B7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3B7 -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B3B7 -  -  -  -  ;		Reviewed :	No
    8 D1:B3B7 -  -  -  -  ;		Purpose :	For/Next command
    9 D1:B3B7 -  -  -  -  ;
   10 D1:B3B7 -  -  -  -  ; ***************************************************************************************
   11 D1:B3B7 -  -  -  -  
   12 D1:B3B7 -  -  -  -  ; ***************************************************************************************
   13 D1:B3B7 -  -  -  -  ;
   14 D1:B3B7 -  -  -  -  ;									For Command
   15 D1:B3B7 -  -  -  -  ;
   16 D1:B3B7 -  -  -  -  ; ***************************************************************************************
   17 D1:B3B7 -  -  -  -  
   18 D1:B3B7 -  -  -  -  Command_FOR: ;; [for]
   19 D1:B3B7 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 D1:B3B9 CD A5 B5 D1 			call 	StackOpenFrame
   21 D1:B3BD -  -  -  -  			;
   22 D1:B3BD -  -  -  -  			;		Variable Reference to increment
   23 D1:B3BD -  -  -  -  			;
   24 D1:B3BD DD E5 -  -  			push	ix 						; save start position
   25 D1:B3BF 3E FF -  -  			ld 		a,255 					; FOR can create
   26 D1:B3C1 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   27 D1:B3C5 CD 71 AF D1 			call 	EvaluateTerm 			; get term
   28 D1:B3C9 AF -  -  -  			xor 	a 						; autocreate off.
   29 D1:B3CA 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   30 D1:B3CE DD E1 -  -  			pop 	ix 						; get start position
   31 D1:B3D0 E5 -  -  -  			push 	hl 						; save reference address.
   32 D1:B3D1 -  -  -  -  			;
   33 D1:B3D1 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 D1:B3D3 C2 19 AD D1 			jp 		nz,SyntaxError
   35 D1:B3D7 EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 D1:B3D8 -  -  -  -  			;
   37 D1:B3D8 2A D9 A8 D1 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 D1:B3DC 01 06 00 00 			ld 		bc,6
   39 D1:B3E0 09 -  -  -  			add 	hl,bc 
   40 D1:B3E1 D1 -  -  -  			pop 	de 						; get reference.
   41 D1:B3E2 ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   42 D1:B3E8 -  -  -  -  			;
   43 D1:B3E8 -  -  -  -  			;		var = value
   44 D1:B3E8 -  -  -  -  			;
   45 D1:B3E8 CD 4A AA D1 			call 	Command_LET 			; so we do I = 1 or whatever.
   46 D1:B3EC -  -  -  -  			; 		
   47 D1:B3EC -  -  -  -  			; 		TO
   48 D1:B3EC -  -  -  -  			;
   49 D1:B3EC 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   50 D1:B3EE CD A3 AC D1 			call 	CheckNextA
   51 D1:B3F2 -  -  -  -  			;
   52 D1:B3F2 -  -  -  -  			;		value
   53 D1:B3F2 -  -  -  -  			;
   54 D1:B3F2 CD E2 AE D1 			call 	EvaluateInteger  		; write the TO value to offset 10.
   55 D1:B3F6 3E 0A -  -  			ld 		a,10
   56 D1:B3F8 CD 33 B4 D1 			call 	CFWriteHLHLToA 
   57 D1:B3FC -  -  -  -  			;
   58 D1:B3FC -  -  -  -  			;		Check STEP ?
   59 D1:B3FC -  -  -  -  			;
   60 D1:B3FC 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   61 D1:B400 D9 -  -  -  			exx
   62 D1:B401 21 00 00 00 			ld 		hl,0
   63 D1:B405 D9 -  -  -  			exx			
   64 D1:B406 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   65 D1:B409 FE B4 -  -  			cp 		KWD_STEP 				
   66 D1:B40B 20 06 -  -  			jr 		nz,_CFDefaultStep
   67 D1:B40D -  -  -  -  			;
   68 D1:B40D DD 23 -  -  			inc 	ix 						; get step
   69 D1:B40F CD E2 AE D1 			call 	EvaluateInteger
   70 D1:B413 -  -  -  -  _CFDefaultStep:			
   71 D1:B413 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   72 D1:B415 CD 33 B4 D1 			call 	CFWriteHLHLToA 
   73 D1:B419 CD E3 B5 D1 			call 	StackSavePosition 		; save loop address
   74 D1:B41D C9 -  -  -  			ret
   75 D1:B41E -  -  -  -  
   76 D1:B41E -  -  -  -  ; ***************************************************************************************
   77 D1:B41E -  -  -  -  ;
   78 D1:B41E -  -  -  -  ;								Read BasicStack+A to HL'HL
   79 D1:B41E -  -  -  -  ;
   80 D1:B41E -  -  -  -  ; ***************************************************************************************
   81 D1:B41E -  -  -  -  
   82 D1:B41E -  -  -  -  CFReadAToHLHL:
   83 D1:B41E 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   84 D1:B422 4F -  -  -  			ld 		c,a
   85 D1:B423 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
   86 D1:B427 09 -  -  -  			add 	hl,bc
   87 D1:B428 -  -  -  -  
   88 D1:B428 -  -  -  -  CFReadHLToHLHL:
   89 D1:B428 E5 -  -  -  			push 	hl
   90 D1:B429 ED 27 -  -  			ld_ind_hl 						; get low word
   91 D1:B42B D9 -  -  -  			exx
   92 D1:B42C -  -  -  -  
   93 D1:B42C E1 -  -  -  			pop 	hl 						; get high word
   94 D1:B42D 23 -  -  -  			inc 	hl
   95 D1:B42E 23 -  -  -  			inc 	hl
   96 D1:B42F ED 27 -  -  			ld_ind_hl
   97 D1:B431 D9 -  -  -  			exx
   98 D1:B432 -  -  -  -  
   99 D1:B432 C9 -  -  -  			ret
  100 D1:B433 -  -  -  -  
  101 D1:B433 -  -  -  -  ; ***************************************************************************************
  102 D1:B433 -  -  -  -  ;
  103 D1:B433 -  -  -  -  ;								Write HL'HL to BasicStack+A
  104 D1:B433 -  -  -  -  ;
  105 D1:B433 -  -  -  -  ; ***************************************************************************************
  106 D1:B433 -  -  -  -  
  107 D1:B433 -  -  -  -  CFWriteHLHLToA:
  108 D1:B433 EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  109 D1:B434 D9 -  -  -  			exx
  110 D1:B435 EB -  -  -  			ex 		de,hl
  111 D1:B436 D9 -  -  -  			exx
  112 D1:B437 -  -  -  -  
  113 D1:B437 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  114 D1:B43B 4F -  -  -  			ld 		c,a
  115 D1:B43C 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
  116 D1:B440 09 -  -  -  			add 	hl,bc
  117 D1:B441 -  -  -  -  
  118 D1:B441 -  -  -  -  CFWriteDEDEToHL:
  119 D1:B441 73 -  -  -  			ld 		(hl),e 					; write low word
  120 D1:B442 23 -  -  -  			inc 	hl
  121 D1:B443 72 -  -  -  			ld 		(hl),d
  122 D1:B444 23 -  -  -  			inc 	hl
  123 D1:B445 -  -  -  -  
  124 D1:B445 E5 -  -  -  			push 	hl 						; write high word
  125 D1:B446 D9 -  -  -  			exx
  126 D1:B447 E1 -  -  -  			pop 	hl
  127 D1:B448 73 -  -  -  			ld 		(hl),e
  128 D1:B449 23 -  -  -  			inc 	hl
  129 D1:B44A 72 -  -  -  			ld 		(hl),d
  130 D1:B44B D9 -  -  -  			exx
  131 D1:B44C C9 -  -  -  			ret			
  132 D1:B44D -  -  -  -  
  133 D1:B44D -  -  -  -  ; ***************************************************************************************
  134 D1:B44D -  -  -  -  ;
  135 D1:B44D -  -  -  -  ;									Next Command
  136 D1:B44D -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  137 D1:B44D -  -  -  -  ;
  138 D1:B44D -  -  -  -  ; ***************************************************************************************
  139 D1:B44D -  -  -  -  
  140 D1:B44D -  -  -  -  Command_Next:	;; [next]
  141 D1:B44D 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  142 D1:B44F CD DD B5 D1 			call 	StackCheckFrame
  143 D1:B453 -  -  -  -  			;
  144 D1:B453 -  -  -  -  			;		Get address of FOR variable
  145 D1:B453 -  -  -  -  			;
  146 D1:B453 2A D9 A8 D1 			ld 		hl,(BasicSP)			; get the address of the variable in HL
  147 D1:B457 01 06 00 00 			ld 		bc,6
  148 D1:B45B 09 -  -  -  			add 	hl,bc
  149 D1:B45C ED 27 -  -  			ld_ind_hl
  150 D1:B45E -  -  -  -  			;
  151 D1:B45E -  -  -  -  			; 		Save reference, read value into DE.
  152 D1:B45E -  -  -  -  			;
  153 D1:B45E E5 -  -  -  			push 	hl 						; save index address
  154 D1:B45F CD 28 B4 D1 			call 	CFReadHLToHLHL 			; read the index value.
  155 D1:B463 -  -  -  -  
  156 D1:B463 EB -  -  -  			ex 		de,hl 					; copy current index value into DE.
  157 D1:B464 D9 -  -  -  			exx
  158 D1:B465 EB -  -  -  			ex 		de,hl
  159 D1:B466 D9 -  -  -  			exx
  160 D1:B467 -  -  -  -  			;
  161 D1:B467 -  -  -  -  			; 		Read step and Add
  162 D1:B467 -  -  -  -  			;
  163 D1:B467 3E 0E -  -  			ld 		a,14 					; read step (offset 14)
  164 D1:B469 CD 1E B4 D1 			call 	CFReadAToHLHL
  165 D1:B46D D9 -  -  -  			exx 							; msb of step on stack
  166 D1:B46E 7C -  -  -  			ld 		a,h
  167 D1:B46F D9 -  -  -  			exx
  168 D1:B470 F5 -  -  -  			push 	af
  169 D1:B471 CD 1C BC D1 			call 	Int32Add 				; add step to offset => HL'HL
  170 D1:B475 -  -  -  -  			;
  171 D1:B475 -  -  -  -  			;		Put result in DE and write back out
  172 D1:B475 -  -  -  -  			;
  173 D1:B475 EB -  -  -  			ex 		de,hl 					; new index value to DE
  174 D1:B476 D9 -  -  -  			exx
  175 D1:B477 EB -  -  -  			ex 		de,hl
  176 D1:B478 D9 -  -  -  			exx
  177 D1:B479 F1 -  -  -  			pop 	af 						; get msb of step
  178 D1:B47A E1 -  -  -  			pop 	hl 						; address of for variable in HL
  179 D1:B47B F5 -  -  -  			push 	af 						; push msb of step back.
  180 D1:B47C CD 41 B4 D1 			call 	CFWriteDEDEToHL 		; write value back to that variable
  181 D1:B480 -  -  -  -  			;
  182 D1:B480 -  -  -  -  			;		Get limit in DE and compare Limit-Index
  183 D1:B480 -  -  -  -  			;
  184 D1:B480 3E 0A -  -  			ld 		a,10 					; load limit
  185 D1:B482 CD 1E B4 D1 			call 	CFReadAToHLHL
  186 D1:B486 CD 5C BC D1 			call 	Int32Compare 			; compare limit to index.
  187 D1:B48A C1 -  -  -  			pop 	bc 						; so the MSB of step should now be in B
  188 D1:B48B B7 -  -  -  			or 		a 						; if zero, loop round as equal.
  189 D1:B48C 28 0A -  -  			jr 		z,_CNXLoopBack
  190 D1:B48E CB 78 -  -  			bit 	7,b 					; was step -ve
  191 D1:B490 28 02 -  -  			jr 		z,_CNXNotMStep
  192 D1:B492 EE FE -  -  			xor 	254 					; this is 1 XOR 255, so flips it round
  193 D1:B494 -  -  -  -  _CNXNotMStep:			
  194 D1:B494 E6 80 -  -  			and 	$80						; if +ve then loop is incomplete
  195 D1:B496 20 04 -  -  			jr 		nz,_CNXLoopOver
  196 D1:B498 -  -  -  -  			;
  197 D1:B498 -  -  -  -  			;		For loop goes round again.
  198 D1:B498 -  -  -  -  			;
  199 D1:B498 -  -  -  -  _CNXLoopBack:			
  200 D1:B498 C3 FE B5 D1 			jp 		StackLoadPosition
  201 D1:B49C -  -  -  -  			;
  202 D1:B49C -  -  -  -  			;		For loop completed
  203 D1:B49C -  -  -  -  			;
  204 D1:B49C -  -  -  -  _CNXLoopOver:
  205 D1:B49C C3 CA B5 D1 			jp 		StackCloseFrame
  206 D1:B4A0 F5 3E 02 32 
              FF FF FF F1 			debug
  207 D1:B4A8 -  -  -  -  
  208 D1:B4A8 -  -  -  -  ; ***************************************************************************************
  209 D1:B4A8 -  -  -  -  ;
  210 D1:B4A8 -  -  -  -  ;									Changes and Updates
  211 D1:B4A8 -  -  -  -  ;
  212 D1:B4A8 -  -  -  -  ; ***************************************************************************************
  213 D1:B4A8 -  -  -  -  ;
  214 D1:B4A8 -  -  -  -  ;		Date			Notes
  215 D1:B4A8 -  -  -  -  ;		==== 			=====
  216 D1:B4A8 -  -  -  -  ;
  217 D1:B4A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 D1:B4A8 -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 D1:B4A8 -  -  -  -  ; ***************************************************************************************
    2 D1:B4A8 -  -  -  -  ; ***************************************************************************************
    3 D1:B4A8 -  -  -  -  ;
    4 D1:B4A8 -  -  -  -  ;		Name : 		gosub.asm
    5 D1:B4A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4A8 -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B4A8 -  -  -  -  ;		Reviewed :	No
    8 D1:B4A8 -  -  -  -  ;		Purpose :	Gosub/Return command
    9 D1:B4A8 -  -  -  -  ;
   10 D1:B4A8 -  -  -  -  ; ***************************************************************************************
   11 D1:B4A8 -  -  -  -  
   12 D1:B4A8 -  -  -  -  ; ***************************************************************************************
   13 D1:B4A8 -  -  -  -  ;
   14 D1:B4A8 -  -  -  -  ;									Gosub Command
   15 D1:B4A8 -  -  -  -  ;
   16 D1:B4A8 -  -  -  -  ; ***************************************************************************************
   17 D1:B4A8 -  -  -  -  
   18 D1:B4A8 -  -  -  -  Command_GOSUB: ;; [gosub]
   19 D1:B4A8 3E 13 -  -  			ld		a,STM_GOSUB
   20 D1:B4AA CD A5 B5 D1 			call 	StackOpenFrame
   21 D1:B4AE CD DD B4 D1 			call 	GoGetLineNumber
   22 D1:B4B2 E5 -  -  -  			push 	hl
   23 D1:B4B3 CD E3 B5 D1 			call 	StackSavePosition
   24 D1:B4B7 E1 -  -  -  			pop 	hl
   25 D1:B4B8 CD EA B4 D1 			call	TransferToLineHL
   26 D1:B4BC C9 -  -  -  			ret
   27 D1:B4BD -  -  -  -  
   28 D1:B4BD -  -  -  -  ; ***************************************************************************************
   29 D1:B4BD -  -  -  -  ;
   30 D1:B4BD -  -  -  -  ;									Return command
   31 D1:B4BD -  -  -  -  ;
   32 D1:B4BD -  -  -  -  ; ***************************************************************************************
   33 D1:B4BD -  -  -  -  
   34 D1:B4BD -  -  -  -  Command_Return: ;; [return]
   35 D1:B4BD 3E 13 -  -  			ld		a,STM_GOSUB
   36 D1:B4BF CD DD B5 D1 			call 	StackCheckFrame
   37 D1:B4C3 20 09 -  -  			jr 		nz,_ReturnError
   38 D1:B4C5 CD FE B5 D1 			call 	StackLoadPosition
   39 D1:B4C9 CD CA B5 D1 			call 	StackCloseFrame
   40 D1:B4CD C9 -  -  -  			ret
   41 D1:B4CE -  -  -  -  _ReturnError:
   42 D1:B4CE 3E 08 C3 AF 
              AC D1 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 D1:B4D4 -  -  -  -  
   44 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   45 D1:B4D4 -  -  -  -  ;
   46 D1:B4D4 -  -  -  -  ;									Changes and Updates
   47 D1:B4D4 -  -  -  -  ;
   48 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   49 D1:B4D4 -  -  -  -  ;
   50 D1:B4D4 -  -  -  -  ;		Date			Notes
   51 D1:B4D4 -  -  -  -  ;		==== 			=====
   52 D1:B4D4 -  -  -  -  ;
   53 D1:B4D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B4D4 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 D1:B4D4 -  -  -  -  ; ***************************************************************************************
    2 D1:B4D4 -  -  -  -  ; ***************************************************************************************
    3 D1:B4D4 -  -  -  -  ;
    4 D1:B4D4 -  -  -  -  ;		Name : 		goto.asm
    5 D1:B4D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4D4 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B4D4 -  -  -  -  ;		Reviewed :	No
    8 D1:B4D4 -  -  -  -  ;		Purpose :	Goto command
    9 D1:B4D4 -  -  -  -  ;
   10 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   11 D1:B4D4 -  -  -  -  
   12 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   13 D1:B4D4 -  -  -  -  ;
   14 D1:B4D4 -  -  -  -  ;									Goto Command
   15 D1:B4D4 -  -  -  -  ;
   16 D1:B4D4 -  -  -  -  ; ***************************************************************************************
   17 D1:B4D4 -  -  -  -  
   18 D1:B4D4 -  -  -  -  Command_GOTO: ;; [goto]
   19 D1:B4D4 CD DD B4 D1 			call 	GoGetLineNumber
   20 D1:B4D8 CD EA B4 D1 			call	TransferToLineHL
   21 D1:B4DC C9 -  -  -  			ret
   22 D1:B4DD -  -  -  -  
   23 D1:B4DD -  -  -  -  ; ***************************************************************************************
   24 D1:B4DD -  -  -  -  ;
   25 D1:B4DD -  -  -  -  ;							Get and validate a line number in HL
   26 D1:B4DD -  -  -  -  ;
   27 D1:B4DD -  -  -  -  ; ***************************************************************************************
   28 D1:B4DD -  -  -  -  
   29 D1:B4DD -  -  -  -  GoGetLineNumber:
   30 D1:B4DD CD E2 AE D1 			call 	EvaluateInteger
   31 D1:B4E1 D9 -  -  -  			exx
   32 D1:B4E2 7C -  -  -  			ld 		a,h
   33 D1:B4E3 B5 -  -  -  			or 		l
   34 D1:B4E4 D9 -  -  -  			exx
   35 D1:B4E5 C8 -  -  -  			ret 	z
   36 D1:B4E6 C3 13 AD D1 			jp 		BadValue
   37 D1:B4EA -  -  -  -  
   38 D1:B4EA -  -  -  -  ; ***************************************************************************************
   39 D1:B4EA -  -  -  -  ;
   40 D1:B4EA -  -  -  -  ;							Transfer to Line Number HL
   41 D1:B4EA -  -  -  -  ;
   42 D1:B4EA -  -  -  -  ; ***************************************************************************************
   43 D1:B4EA -  -  -  -  
   44 D1:B4EA -  -  -  -  TransferToLineHL:
   45 D1:B4EA EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 D1:B4EB 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 D1:B4EF DD 2A B9 A8 
              D1 -  -  -  			ld 		ix,(CodeAddress)
   48 D1:B4F4 -  -  -  -  _TLSearch:	
   49 D1:B4F4 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 D1:B4F6 DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 D1:B4F9 B7 -  -  -  			or 		a 						; if zero
   52 D1:B4FA 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 D1:B4FC 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 D1:B4FD -  -  -  -  
   55 D1:B4FD 7B -  -  -  			ld 		a,e						; compare line address
   56 D1:B4FE DD BE 01 -  			cp 		(ix+1)
   57 D1:B501 20 F1 -  -  			jr 		nz,_TLSearch
   58 D1:B503 7A -  -  -  			ld 		a,d
   59 D1:B504 DD BE 02 -  			cp 		(ix+2)
   60 D1:B507 20 EB -  -  			jr 		nz,_TLSearch
   61 D1:B509 -  -  -  -  			;
   62 D1:B509 DD 22 DD A8 
              D1 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 D1:B50E DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 D1:B510 DD 23 -  -  			inc 	ix
   65 D1:B512 DD 23 -  -  			inc 	ix
   66 D1:B514 -  -  -  -  
   67 D1:B514 C9 -  -  -  			ret
   68 D1:B515 -  -  -  -  
   69 D1:B515 -  -  -  -  _TLNotFound:
   70 D1:B515 3E 0A C3 AF 
              AC D1 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 D1:B51B -  -  -  -  
   72 D1:B51B -  -  -  -  ; ***************************************************************************************
   73 D1:B51B -  -  -  -  ;
   74 D1:B51B -  -  -  -  ;									Changes and Updates
   75 D1:B51B -  -  -  -  ;
   76 D1:B51B -  -  -  -  ; ***************************************************************************************
   77 D1:B51B -  -  -  -  ;
   78 D1:B51B -  -  -  -  ;		Date			Notes
   79 D1:B51B -  -  -  -  ;		==== 			=====
   80 D1:B51B -  -  -  -  ;
   81 D1:B51B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B51B -  -  -  -  #include "core/structures/if.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/if.asm"
    1 D1:B51B -  -  -  -  ; ***************************************************************************************
    2 D1:B51B -  -  -  -  ; ***************************************************************************************
    3 D1:B51B -  -  -  -  ;
    4 D1:B51B -  -  -  -  ;		Name : 		if.asm
    5 D1:B51B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B51B -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B51B -  -  -  -  ;		Reviewed :	No
    8 D1:B51B -  -  -  -  ;		Purpose :	If / Then / Else commands
    9 D1:B51B -  -  -  -  ;
   10 D1:B51B -  -  -  -  ; ***************************************************************************************
   11 D1:B51B -  -  -  -  
   12 D1:B51B -  -  -  -  ; ***************************************************************************************
   13 D1:B51B -  -  -  -  ;
   14 D1:B51B -  -  -  -  ;									If Command
   15 D1:B51B -  -  -  -  ;
   16 D1:B51B -  -  -  -  ; ***************************************************************************************
   17 D1:B51B -  -  -  -  
   18 D1:B51B -  -  -  -  Command_IF: ;; [if]
   19 D1:B51B CD E2 AE D1 		call 	EvaluateInteger 			; work out the test.
   20 D1:B51F CD 55 BC D1 		call 	Int32Zero 					; test if zero
   21 D1:B523 28 1D -  -  		jr 		z,_IFFail
   22 D1:B525 -  -  -  -  		;
   23 D1:B525 -  -  -  -  		;	 	Passed
   24 D1:B525 -  -  -  -  		;
   25 D1:B525 DD 7E 00 -  		ld 		a,(ix+0) 					; get next, which should be THEN or GOTO
   26 D1:B528 DD 23 -  -  		inc 	ix
   27 D1:B52A FE BB -  -  		cp 		KWD_GOTO 					; if GOTO goto GOTO code ;-)
   28 D1:B52C CA D4 B4 D1 		jp 		z,Command_GOTO
   29 D1:B530 FE B0 -  -  		cp 		KWD_THEN 					; no THEN, syntax error
   30 D1:B532 C2 19 AD D1 		jp 		nz,SyntaxError
   31 D1:B536 DD 7E 00 -  		ld 		a,(ix+0) 					; check THEN <number>
   32 D1:B539 E6 C0 -  -  		and 	$C0 						; this checks 40-7F e.g. number
   33 D1:B53B FE 40 -  -  		cp 		$40
   34 D1:B53D CA D4 B4 D1 		jp 		z,Command_GOTO 				; if number found then GOTO code
   35 D1:B541 C9 -  -  -  		ret 								; otherwise carry on.
   36 D1:B542 -  -  -  -  		;
   37 D1:B542 -  -  -  -  		;		Failed.
   38 D1:B542 -  -  -  -  		;
   39 D1:B542 -  -  -  -  _IFFail:
   40 D1:B542 06 80 -  -  		ld 		b,KWC_EOL_MARKER 			; look for EOL or ELSE.
   41 D1:B544 0E B1 -  -  		ld 		c,KWD_ELSE
   42 D1:B546 CD 7F B5 D1 		call 	SearchForwardTokens 		; searching forward.
   43 D1:B54A FE 80 -  -  		cp 		KWC_EOL_MARKER 				; if EOL was found
   44 D1:B54C CA 33 AA D1 		jp 		z,EOLHandler 				; do the next line code.
   45 D1:B550 C9 -  -  -  		ret 								; otherwise carry on.
   46 D1:B551 -  -  -  -  
   47 D1:B551 -  -  -  -  ; ***************************************************************************************
   48 D1:B551 -  -  -  -  ;
   49 D1:B551 -  -  -  -  ;						Else command => Progress to next line
   50 D1:B551 -  -  -  -  ;
   51 D1:B551 -  -  -  -  ; ***************************************************************************************
   52 D1:B551 -  -  -  -  
   53 D1:B551 -  -  -  -  Command_Else: ;; [else]
   54 D1:B551 C3 33 AA D1 		jp 		EOLHandler 					; same code as EOL e.g. read offset from start line.
   55 D1:B555 -  -  -  -  
   56 D1:B555 -  -  -  -  ; ***************************************************************************************
   57 D1:B555 -  -  -  -  ;
   58 D1:B555 -  -  -  -  ;									Changes and Updates
   59 D1:B555 -  -  -  -  ;
   60 D1:B555 -  -  -  -  ; ***************************************************************************************
   61 D1:B555 -  -  -  -  ;
   62 D1:B555 -  -  -  -  ;		Date			Notes
   63 D1:B555 -  -  -  -  ;		==== 			=====
   64 D1:B555 -  -  -  -  ;
   65 D1:B555 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B555 -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 D1:B555 -  -  -  -  ; ***************************************************************************************
    2 D1:B555 -  -  -  -  ; ***************************************************************************************
    3 D1:B555 -  -  -  -  ;
    4 D1:B555 -  -  -  -  ;		Name : 		repeat.asm
    5 D1:B555 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B555 -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B555 -  -  -  -  ;		Reviewed :	No
    8 D1:B555 -  -  -  -  ;		Purpose :	Repeat/Until command
    9 D1:B555 -  -  -  -  ;
   10 D1:B555 -  -  -  -  ; ***************************************************************************************
   11 D1:B555 -  -  -  -  
   12 D1:B555 -  -  -  -  ; ***************************************************************************************
   13 D1:B555 -  -  -  -  ;
   14 D1:B555 -  -  -  -  ;									Repeat Command
   15 D1:B555 -  -  -  -  ;
   16 D1:B555 -  -  -  -  ; ***************************************************************************************
   17 D1:B555 -  -  -  -  
   18 D1:B555 -  -  -  -  Command_REPEAT: ;; [repeat]
   19 D1:B555 3E 23 -  -  			ld		a,STM_REPEAT
   20 D1:B557 CD A5 B5 D1 			call 	StackOpenFrame
   21 D1:B55B CD E3 B5 D1 			call 	StackSavePosition
   22 D1:B55F C9 -  -  -  			ret
   23 D1:B560 -  -  -  -  
   24 D1:B560 -  -  -  -  ; ***************************************************************************************
   25 D1:B560 -  -  -  -  ;
   26 D1:B560 -  -  -  -  ;									Until command
   27 D1:B560 -  -  -  -  ;
   28 D1:B560 -  -  -  -  ; ***************************************************************************************
   29 D1:B560 -  -  -  -  
   30 D1:B560 -  -  -  -  Command_Until: ;; [until]
   31 D1:B560 3E 23 -  -  			ld		a,STM_REPEAT
   32 D1:B562 CD DD B5 D1 			call 	StackCheckFrame
   33 D1:B566 20 11 -  -  			jr 		nz,_UntilError
   34 D1:B568 CD E2 AE D1 			call	EvaluateInteger 		; until what
   35 D1:B56C CD 55 BC D1 			call 	Int32Zero 				; check zero
   36 D1:B570 CA FE B5 D1 			jp 		z,StackLoadPosition 	; if zero loop back
   37 D1:B574 CD CA B5 D1 			call 	StackCloseFrame 		; otherwise end frame.
   38 D1:B578 C9 -  -  -  			ret
   39 D1:B579 -  -  -  -  _UntilError:
   40 D1:B579 3E 15 C3 AF 
              AC D1 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 D1:B57F -  -  -  -  
   42 D1:B57F -  -  -  -  ; ***************************************************************************************
   43 D1:B57F -  -  -  -  ;
   44 D1:B57F -  -  -  -  ;									Changes and Updates
   45 D1:B57F -  -  -  -  ;
   46 D1:B57F -  -  -  -  ; ***************************************************************************************
   47 D1:B57F -  -  -  -  ;
   48 D1:B57F -  -  -  -  ;		Date			Notes
   49 D1:B57F -  -  -  -  ;		==== 			=====
   50 D1:B57F -  -  -  -  ;
   51 D1:B57F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 D1:B57F -  -  -  -  #include "core/structures/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/search.asm"
    1 D1:B57F -  -  -  -  ; ***************************************************************************************
    2 D1:B57F -  -  -  -  ; ***************************************************************************************
    3 D1:B57F -  -  -  -  ;
    4 D1:B57F -  -  -  -  ;		Name : 		search.asm
    5 D1:B57F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B57F -  -  -  -  ;		Date : 		8th June 2022
    7 D1:B57F -  -  -  -  ;		Reviewed :	No
    8 D1:B57F -  -  -  -  ;		Purpose :	Search forward for token
    9 D1:B57F -  -  -  -  ;
   10 D1:B57F -  -  -  -  ; ***************************************************************************************
   11 D1:B57F -  -  -  -  
   12 D1:B57F -  -  -  -  ; ***************************************************************************************
   13 D1:B57F -  -  -  -  ;
   14 D1:B57F -  -  -  -  ;		Search forward for either B or C tokens. If found, return the token in A, 
   15 D1:B57F -  -  -  -  ; 		and IX points to next byte.
   16 D1:B57F -  -  -  -  ;		At EOL error if EOL is not one of the two tokens.							
   17 D1:B57F -  -  -  -  ;
   18 D1:B57F -  -  -  -  ; ***************************************************************************************
   19 D1:B57F -  -  -  -  
   20 D1:B57F -  -  -  -  SearchForwardTokens:
   21 D1:B57F DD 7E 00 -  		ld 		a,(ix+0) 					; get token and skip it
   22 D1:B582 DD 23 -  -  		inc 	ix
   23 D1:B584 B8 -  -  -  		cp 		b 							; exit if either found.
   24 D1:B585 C8 -  -  -  		ret 	z
   25 D1:B586 B9 -  -  -  		cp 		c
   26 D1:B587 C8 -  -  -  		ret 	z
   27 D1:B588 -  -  -  -  		;
   28 D1:B588 FE 3F -  -  		cp 		STRING_MARKER 				; string constant is special skip
   29 D1:B58A 20 F3 -  -  		jr 		nz,SearchForwardTokens
   30 D1:B58C -  -  -  -  
   31 D1:B58C 11 00 00 00 		ld 		de,0 						; put length into DE
   32 D1:B590 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:B593 13 -  -  -  		inc 	de 							; add 1 for length, 1 for terminator
   34 D1:B594 13 -  -  -  		inc 	de
   35 D1:B595 DD 19 -  -  		add 	ix,de 						; jump forward
   36 D1:B597 18 E6 -  -  		jr 		SearchForwardTokens
   37 D1:B599 -  -  -  -  
   38 D1:B599 -  -  -  -  ; ***************************************************************************************
   39 D1:B599 -  -  -  -  ;
   40 D1:B599 -  -  -  -  ;									Changes and Updates
   41 D1:B599 -  -  -  -  ;
   42 D1:B599 -  -  -  -  ; ***************************************************************************************
   43 D1:B599 -  -  -  -  ;
   44 D1:B599 -  -  -  -  ;		Date			Notes
   45 D1:B599 -  -  -  -  ;		==== 			=====
   46 D1:B599 -  -  -  -  ;
   47 D1:B599 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B599 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 D1:B599 -  -  -  -  ; ***************************************************************************************
    2 D1:B599 -  -  -  -  ; ***************************************************************************************
    3 D1:B599 -  -  -  -  ;
    4 D1:B599 -  -  -  -  ;		Name : 		stack.asm
    5 D1:B599 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B599 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B599 -  -  -  -  ;		Reviewed :	No
    8 D1:B599 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:B599 -  -  -  -  ;
   10 D1:B599 -  -  -  -  ; ***************************************************************************************
   11 D1:B599 -  -  -  -  ; ***************************************************************************************
   12 D1:B599 -  -  -  -  ;
   13 D1:B599 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 D1:B599 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 D1:B599 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 D1:B599 -  -  -  -  ;
   17 D1:B599 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 D1:B599 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 D1:B599 -  -  -  -  ;
   20 D1:B599 -  -  -  -  ; ***************************************************************************************
   21 D1:B599 -  -  -  -  ;
   22 D1:B599 -  -  -  -  ;								Clear the stack
   23 D1:B599 -  -  -  -  ;
   24 D1:B599 -  -  -  -  ; ***************************************************************************************
   25 D1:B599 -  -  -  -  
   26 D1:B599 -  -  -  -  StackReset:
   27 D1:B599 2A BD A8 D1 		ld 		hl,(LanguageStack) 			; top of language stack
   28 D1:B59D 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 D1:B59E 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write out current position
   30 D1:B5A2 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 D1:B5A4 C9 -  -  -  		ret
   32 D1:B5A5 -  -  -  -  
   33 D1:B5A5 -  -  -  -  ; ***************************************************************************************
   34 D1:B5A5 -  -  -  -  ;
   35 D1:B5A5 -  -  -  -  ;								Open a stack frame type A
   36 D1:B5A5 -  -  -  -  ;
   37 D1:B5A5 -  -  -  -  ; ***************************************************************************************
   38 D1:B5A5 -  -  -  -  
   39 D1:B5A5 -  -  -  -  StackOpenFrame:
   40 D1:B5A5 F5 -  -  -  		push 	af 							; save frame type
   41 D1:B5A6 E6 0F -  -  		and 	$0F 						; get size of frame
   42 D1:B5A8 87 -  -  -  		add 	a,a 						; double it
   43 D1:B5A9 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 D1:B5AD 5F -  -  -  		ld 		e,a
   45 D1:B5AE 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get stack pointer
   46 D1:B5B2 AF -  -  -  		xor 	a
   47 D1:B5B3 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 D1:B5B5 22 D9 A8 D1 		ld 		(BasicSP),hl
   49 D1:B5B9 F1 -  -  -  		pop 	af 							; copy out frame type
   50 D1:B5BA 77 -  -  -  		ld 		(hl),a
   51 D1:B5BB ED 5B C1 A8 
              D1 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 D1:B5C0 AF -  -  -  		xor 	a
   53 D1:B5C1 ED 52 -  -  		sbc 	hl,de
   54 D1:B5C3 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 D1:B5C4 3E 16 C3 AF 
              AC D1 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 D1:B5CA -  -  -  -  
   57 D1:B5CA -  -  -  -  ; ***************************************************************************************
   58 D1:B5CA -  -  -  -  ;
   59 D1:B5CA -  -  -  -  ;								Close Stack Frame
   60 D1:B5CA -  -  -  -  ;
   61 D1:B5CA -  -  -  -  ; ***************************************************************************************
   62 D1:B5CA -  -  -  -  
   63 D1:B5CA -  -  -  -  StackCloseFrame:
   64 D1:B5CA 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   65 D1:B5CE 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 D1:B5CF E6 0F -  -  		and 	$0F 						; put into UDE
   67 D1:B5D1 87 -  -  -  		add 	a,a 						; double it
   68 D1:B5D2 11 00 00 00 		ld 		de,$000000
   69 D1:B5D6 5F -  -  -  		ld 		e,a
   70 D1:B5D7 19 -  -  -  		add 	hl,de 						; close it
   71 D1:B5D8 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write it back
   72 D1:B5DC C9 -  -  -  		ret
   73 D1:B5DD -  -  -  -  
   74 D1:B5DD -  -  -  -  ; ***************************************************************************************
   75 D1:B5DD -  -  -  -  ;
   76 D1:B5DD -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 D1:B5DD -  -  -  -  ;
   78 D1:B5DD -  -  -  -  ; ***************************************************************************************
   79 D1:B5DD -  -  -  -  
   80 D1:B5DD -  -  -  -  StackCheckFrame:
   81 D1:B5DD 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   82 D1:B5E1 BE -  -  -  		cp 		(hl) 						; get stack marker
   83 D1:B5E2 C9 -  -  -  		ret
   84 D1:B5E3 -  -  -  -  
   85 D1:B5E3 -  -  -  -  ; ***************************************************************************************
   86 D1:B5E3 -  -  -  -  ;
   87 D1:B5E3 -  -  -  -  ;								Save position on stack
   88 D1:B5E3 -  -  -  -  ;
   89 D1:B5E3 -  -  -  -  ; ***************************************************************************************
   90 D1:B5E3 -  -  -  -  
   91 D1:B5E3 -  -  -  -  StackSavePosition:
   92 D1:B5E3 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 D1:B5E7 23 -  -  -  		inc 	hl
   94 D1:B5E8 ED 5B DD A8 
              D1 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 D1:B5ED ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 D1:B5F3 -  -  -  -  		;
   97 D1:B5F3 E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 D1:B5F4 DD E5 -  -  		push 	ix 							; HL = current position
   99 D1:B5F6 E1 -  -  -  		pop 	hl
  100 D1:B5F7 AF -  -  -  		xor 	a 							; calculate offset
  101 D1:B5F8 ED 52 -  -  		sbc 	hl,de
  102 D1:B5FA 7D -  -  -  		ld 		a,l 						; into A
  103 D1:B5FB E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 D1:B5FC 77 -  -  -  		ld 		(hl),a
  105 D1:B5FD C9 -  -  -  		ret
  106 D1:B5FE -  -  -  -  
  107 D1:B5FE -  -  -  -  ; ***************************************************************************************
  108 D1:B5FE -  -  -  -  ;
  109 D1:B5FE -  -  -  -  ;								Load position off stack
  110 D1:B5FE -  -  -  -  ;
  111 D1:B5FE -  -  -  -  ; ***************************************************************************************
  112 D1:B5FE -  -  -  -  
  113 D1:B5FE -  -  -  -  StackLoadPosition:
  114 D1:B5FE 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 D1:B602 23 -  -  -  		inc 	hl
  116 D1:B603 E5 -  -  -  		push 	hl 							; save on stack
  117 D1:B604 ED 27 -  -  		ld_ind_hl 							; get start of line
  118 D1:B606 22 DD A8 D1 		ld 		(CurrentLineStart),hl 		; write it back
  119 D1:B60A D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 D1:B60B 13 -  -  -  		inc 	de
  121 D1:B60C 13 -  -  -  		inc 	de
  122 D1:B60D 13 -  -  -  		inc 	de
  123 D1:B60E 13 -  -  -  		inc 	de
  124 D1:B60F 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 D1:B610 11 00 00 00 		ld 		de,$000000
  126 D1:B614 5F -  -  -  		ld 		e,a
  127 D1:B615 19 -  -  -  		add 	hl,de 						; add to start => position
  128 D1:B616 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 D1:B617 DD E1 -  -  		pop 	ix
  130 D1:B619 C9 -  -  -  		ret
  131 D1:B61A -  -  -  -  
  132 D1:B61A -  -  -  -  ; ***************************************************************************************
  133 D1:B61A -  -  -  -  ;
  134 D1:B61A -  -  -  -  ;									Changes and Updates
  135 D1:B61A -  -  -  -  ;
  136 D1:B61A -  -  -  -  ; ***************************************************************************************
  137 D1:B61A -  -  -  -  ;
  138 D1:B61A -  -  -  -  ;		Date			Notes
  139 D1:B61A -  -  -  -  ;		==== 			=====
  140 D1:B61A -  -  -  -  ;
  141 D1:B61A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B61A -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B61A -  -  -  -  ; ***************************************************************************************
    2 D1:B61A -  -  -  -  ; ***************************************************************************************
    3 D1:B61A -  -  -  -  ;
    4 D1:B61A -  -  -  -  ;		Name : 		utility.asm
    5 D1:B61A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B61A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B61A -  -  -  -  ;		Reviewed :	No
    8 D1:B61A -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B61A -  -  -  -  ;
   10 D1:B61A -  -  -  -  ; ***************************************************************************************
   11 D1:B61A -  -  -  -  ; ***************************************************************************************
   12 D1:B61A -  -  -  -  
   13 D1:B61A -  -  -  -  ; ***************************************************************************************
   14 D1:B61A -  -  -  -  ;
   15 D1:B61A -  -  -  -  ;							Print ASCII string at HL
   16 D1:B61A -  -  -  -  ;
   17 D1:B61A -  -  -  -  ; ***************************************************************************************
   18 D1:B61A -  -  -  -  
   19 D1:B61A -  -  -  -  PrintStringAtHL:
   20 D1:B61A 7E -  -  -  		ld 		a,(hl)
   21 D1:B61B FE 20 -  -  		cp 		$20		
   22 D1:B61D D8 -  -  -  		ret 	c
   23 D1:B61E CD 10 BD D1 		call 	SYSPrintChar
   24 D1:B622 23 -  -  -  		inc 	hl
   25 D1:B623 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B625 -  -  -  -  
   27 D1:B625 -  -  -  -  ; ***************************************************************************************
   28 D1:B625 -  -  -  -  ;
   29 D1:B625 -  -  -  -  ;									Changes and Updates
   30 D1:B625 -  -  -  -  ;
   31 D1:B625 -  -  -  -  ; ***************************************************************************************
   32 D1:B625 -  -  -  -  ;
   33 D1:B625 -  -  -  -  ;		Date			Notes
   34 D1:B625 -  -  -  -  ;		==== 			=====
   35 D1:B625 -  -  -  -  ;
   36 D1:B625 -  -  -  -  ; ***************************************************************************************
   37 D1:B625 -  -  -  -  		
Listing for file "_build.asm"
   67 D1:B625 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B625 -  -  -  -  ; ***************************************************************************************
    2 D1:B625 -  -  -  -  ; ***************************************************************************************
    3 D1:B625 -  -  -  -  ;
    4 D1:B625 -  -  -  -  ;		Name : 		create.asm
    5 D1:B625 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B625 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B625 -  -  -  -  ;		Reviewed :	No
    8 D1:B625 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B625 -  -  -  -  ;
   10 D1:B625 -  -  -  -  ; ***************************************************************************************
   11 D1:B625 -  -  -  -  ; ***************************************************************************************
   12 D1:B625 -  -  -  -  
   13 D1:B625 -  -  -  -  ; ***************************************************************************************
   14 D1:B625 -  -  -  -  ;
   15 D1:B625 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B625 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B625 -  -  -  -  ;
   18 D1:B625 -  -  -  -  ; ***************************************************************************************
   19 D1:B625 -  -  -  -  
   20 D1:B625 -  -  -  -  VariableCreate:		
   21 D1:B625 -  -  -  -  		;
   22 D1:B625 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B625 -  -  -  -  		;
   24 D1:B625 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B629 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B62A E5 -  -  -  		push 	hl 							; save count.
   27 D1:B62B CD 21 B3 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B62F C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B630 -  -  -  -  		;
   30 D1:B630 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B630 -  -  -  -  		;
   32 D1:B630 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B631 -  -  -  -  _VCClear:
   34 D1:B631 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B633 23 -  -  -  		inc 	hl
   36 D1:B634 0B -  -  -  		dec 	bc
   37 D1:B635 78 -  -  -  		ld		a,b
   38 D1:B636 B1 -  -  -  		or 		c
   39 D1:B637 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B639 E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B63A -  -  -  -  		;
   42 D1:B63A -  -  -  -  		;		Now start to create the data.
   43 D1:B63A -  -  -  -  		;
   44 D1:B63A E5 -  -  -  		push 	hl 							; save start
   45 D1:B63B -  -  -  -  		;
   46 D1:B63B -  -  -  -  		;		Write hash to +0
   47 D1:B63B -  -  -  -  		;
   48 D1:B63B 3A 0F A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B63F 77 -  -  -  		ld 		(hl),a
   50 D1:B640 23 -  -  -  		inc 	hl
   51 D1:B641 -  -  -  -  		;
   52 D1:B641 -  -  -  -  		;		Write list head to +1
   53 D1:B641 -  -  -  -  		;
   54 D1:B641 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B642 2A 11 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B646 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B648 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B649 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B64A ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B650 -  -  -  -  		;
   61 D1:B650 -  -  -  -  		;		Write variable name to +5
   62 D1:B650 -  -  -  -  		;
   63 D1:B650 ED 5B 0B A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B655 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B65B -  -  -  -  		;
   66 D1:B65B D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B65C 2A 11 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B660 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B666 -  -  -  -  		;
   70 D1:B666 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B667 C9 -  -  -  		ret
   72 D1:B668 -  -  -  -  
   73 D1:B668 -  -  -  -  ; ***************************************************************************************
   74 D1:B668 -  -  -  -  ;
   75 D1:B668 -  -  -  -  ;									Changes and Updates
   76 D1:B668 -  -  -  -  ;
   77 D1:B668 -  -  -  -  ; ***************************************************************************************
   78 D1:B668 -  -  -  -  ;
   79 D1:B668 -  -  -  -  ;		Date			Notes
   80 D1:B668 -  -  -  -  ;		==== 			=====
   81 D1:B668 -  -  -  -  ;
   82 D1:B668 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B668 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B668 -  -  -  -  ; ***************************************************************************************
    2 D1:B668 -  -  -  -  ; ***************************************************************************************
    3 D1:B668 -  -  -  -  ;
    4 D1:B668 -  -  -  -  ;		Name : 		find.asm
    5 D1:B668 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B668 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B668 -  -  -  -  ;		Reviewed :	No
    8 D1:B668 -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B668 -  -  -  -  ;
   10 D1:B668 -  -  -  -  ; ***************************************************************************************
   11 D1:B668 -  -  -  -  ; ***************************************************************************************
   12 D1:B668 -  -  -  -  
   13 D1:B668 -  -  -  -  ; ***************************************************************************************
   14 D1:B668 -  -  -  -  ;
   15 D1:B668 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B668 -  -  -  -  ; 		variable information at (IX)
   17 D1:B668 -  -  -  -  ;
   18 D1:B668 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B668 -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B668 -  -  -  -  ;
   21 D1:B668 -  -  -  -  ; ***************************************************************************************
   22 D1:B668 -  -  -  -  
   23 D1:B668 -  -  -  -  FindVariable:
   24 D1:B668 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B66B FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B66D D2 19 AD D1 		jp 		nc,SyntaxError 		
   27 D1:B671 -  -  -  -  
   28 D1:B671 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B674 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B676 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B678 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B67A 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B67C -  -  -  -  		;
   34 D1:B67C -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B67C -  -  -  -  		;
   36 D1:B67C 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B680 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B683 87 -  -  -  		add 	a,a 						; x4
   39 D1:B684 87 -  -  -  		add 	a,a
   40 D1:B685 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B686 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B687 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B689 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B68B DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B68D AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B68E C9 -  -  -  		ret
   47 D1:B68F -  -  -  -  		;
   48 D1:B68F -  -  -  -  		;		Not a standard simple variable.
   49 D1:B68F -  -  -  -  		;
   50 D1:B68F -  -  -  -  _FVNotSimple:
   51 D1:B68F CD F5 B6 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B693 CD 31 B7 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B697 38 14 -  -  		jr 		c,_FVNotFound  				
   54 D1:B699 -  -  -  -  		;
   55 D1:B699 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B699 -  -  -  -  		;
   57 D1:B699 -  -  -  -  _FVExitReference:		
   58 D1:B699 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B69D 19 -  -  -  		add 	hl,de 
   60 D1:B69E -  -  -  -  		;
   61 D1:B69E -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 D1:B69E -  -  -  -  		;
   63 D1:B69E DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 D1:B6A1 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 D1:B6A3 CC CC B6 D1 		call 	z,ArrayLookup 				; array access required.
   66 D1:B6A7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 D1:B6A9 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 D1:B6AB AF -  -  -  		xor 	a 							; clear carry and return
   69 D1:B6AC C9 -  -  -  		ret
   70 D1:B6AD -  -  -  -  		;
   71 D1:B6AD -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 D1:B6AD -  -  -  -  		;
   73 D1:B6AD -  -  -  -  _FVNotFound:		
   74 D1:B6AD 3A 01 A9 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 D1:B6B1 B7 -  -  -  		or 		a
   76 D1:B6B2 28 11 -  -  		jr 		z,_FVFail
   77 D1:B6B4 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 D1:B6B7 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 D1:B6B9 28 0A -  -  		jr 		z,_FVFail
   80 D1:B6BB 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 D1:B6BF CD 25 B6 D1 		call 	VariableCreate 				; create a new variable.
   82 D1:B6C3 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 D1:B6C5 -  -  -  -  
   84 D1:B6C5 -  -  -  -  _FVFail:
   85 D1:B6C5 DD 2A 0B A9 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 D1:B6CA 37 -  -  -  		scf
   87 D1:B6CB C9 -  -  -  		ret
   88 D1:B6CC -  -  -  -  
   89 D1:B6CC -  -  -  -  ; ***************************************************************************************
   90 D1:B6CC -  -  -  -  ;
   91 D1:B6CC -  -  -  -  ;									 Array lookup
   92 D1:B6CC -  -  -  -  ;
   93 D1:B6CC -  -  -  -  ; ***************************************************************************************
   94 D1:B6CC -  -  -  -  
   95 D1:B6CC -  -  -  -  ArrayLookup:
   96 D1:B6CC E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 D1:B6CD CD BC AE D1 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 D1:B6D1 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 D1:B6D2 7C -  -  -  		ld 		a,h
  100 D1:B6D3 B5 -  -  -  		or 		l
  101 D1:B6D4 D9 -  -  -  		exx
  102 D1:B6D5 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 D1:B6D7 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 D1:B6DB 54 -  -  -  		ld 		d,h
  105 D1:B6DC 5D -  -  -  		ld 		e,l
  106 D1:B6DD E1 -  -  -  		pop 	hl 							; get the array base back
  107 D1:B6DE E5 -  -  -  		push 	hl
  108 D1:B6DF ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 D1:B6E1 AF -  -  -  		xor  	a							; subtract maximum from index
  110 D1:B6E2 ED 52 -  -  		sbc 	hl,de
  111 D1:B6E4 DA EF B6 D1 		jp 		c,_ALBadValue 				; if max < index then error
  112 D1:B6E8 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 D1:B6E9 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 D1:B6EA 29 -  -  -  		add 	hl,hl 						; x 4
  115 D1:B6EB 29 -  -  -  		add 	hl,hl
  116 D1:B6EC D1 -  -  -  		pop 	de 							; get array base back
  117 D1:B6ED 19 -  -  -  		add 	hl,de 						; add offset to it
  118 D1:B6EE C9 -  -  -  		ret
  119 D1:B6EF -  -  -  -  
  120 D1:B6EF -  -  -  -  _ALBadValue:
  121 D1:B6EF 3E 09 C3 AF 
              AC D1 -  -  		ERR_INDEX
  122 D1:B6F5 -  -  -  -  		
  123 D1:B6F5 -  -  -  -  ; ***************************************************************************************
  124 D1:B6F5 -  -  -  -  ;
  125 D1:B6F5 -  -  -  -  ;									Changes and Updates
  126 D1:B6F5 -  -  -  -  ;
  127 D1:B6F5 -  -  -  -  ; ***************************************************************************************
  128 D1:B6F5 -  -  -  -  ;
  129 D1:B6F5 -  -  -  -  ;		Date			Notes
  130 D1:B6F5 -  -  -  -  ;		==== 			=====
  131 D1:B6F5 -  -  -  -  ;
  132 D1:B6F5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:B6F5 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B6F5 -  -  -  -  ; ***************************************************************************************
    2 D1:B6F5 -  -  -  -  ; ***************************************************************************************
    3 D1:B6F5 -  -  -  -  ;
    4 D1:B6F5 -  -  -  -  ;		Name : 		info.asm
    5 D1:B6F5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6F5 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B6F5 -  -  -  -  ;		Reviewed :	No
    8 D1:B6F5 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B6F5 -  -  -  -  ;
   10 D1:B6F5 -  -  -  -  ; ***************************************************************************************
   11 D1:B6F5 -  -  -  -  ; ***************************************************************************************
   12 D1:B6F5 -  -  -  -  
   13 D1:B6F5 -  -  -  -  ; ***************************************************************************************
   14 D1:B6F5 -  -  -  -  ;
   15 D1:B6F5 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B6F5 -  -  -  -  ; 		after the identifier.
   17 D1:B6F5 -  -  -  -  ;
   18 D1:B6F5 -  -  -  -  ; ***************************************************************************************
   19 D1:B6F5 -  -  -  -  
   20 D1:B6F5 -  -  -  -  VariableInformation:
   21 D1:B6F5 DD 22 0B A9 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B6FA -  -  -  -  		;
   23 D1:B6FA -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B6FA -  -  -  -  		;
   25 D1:B6FA 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B6FC -  -  -  -  _VICalculateHash:
   27 D1:B6FC DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B6FF FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B701 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B703 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B704 07 -  -  -  		rlca
   32 D1:B705 07 -  -  -  		rlca
   33 D1:B706 80 -  -  -  		add 	a,b
   34 D1:B707 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B708 DD 23 -  -  		inc 	ix 							; next character
   36 D1:B70A 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B70C -  -  -  -  		;
   38 D1:B70C -  -  -  -  _VIHashDone:
   39 D1:B70C 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B70D -  -  -  -  		;
   41 D1:B70D -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B70D -  -  -  -  		;
   43 D1:B70D 32 0F A9 D1 		ld 		(VarHash),a
   44 D1:B711 -  -  -  -  		;
   45 D1:B711 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B711 -  -  -  -  		;		
   47 D1:B711 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B713 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B717 6F -  -  -  		ld 		l,a
   50 D1:B718 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B719 29 -  -  -  		add 	hl,hl
   52 D1:B71A -  -  -  -  		;
   53 D1:B71A ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B71F 19 -  -  -  		add 	hl,de
   55 D1:B720 -  -  -  -  		;
   56 D1:B720 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B723 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B725 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B727 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B72B 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B72C -  -  -  -  _VINotArray:
   62 D1:B72C 22 11 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B730 C9 -  -  -  		ret
   64 D1:B731 -  -  -  -  
   65 D1:B731 -  -  -  -  ; ***************************************************************************************
   66 D1:B731 -  -  -  -  ;
   67 D1:B731 -  -  -  -  ;									Changes and Updates
   68 D1:B731 -  -  -  -  ;
   69 D1:B731 -  -  -  -  ; ***************************************************************************************
   70 D1:B731 -  -  -  -  ;
   71 D1:B731 -  -  -  -  ;		Date			Notes
   72 D1:B731 -  -  -  -  ;		==== 			=====
   73 D1:B731 -  -  -  -  ;
   74 D1:B731 -  -  -  -  ; ***************************************************************************************
   75 D1:B731 -  -  -  -  
Listing for file "_build.asm"
   70 D1:B731 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B731 -  -  -  -  ; ***************************************************************************************
    2 D1:B731 -  -  -  -  ; ***************************************************************************************
    3 D1:B731 -  -  -  -  ;
    4 D1:B731 -  -  -  -  ;		Name : 		search.asm
    5 D1:B731 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B731 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B731 -  -  -  -  ;		Reviewed :	No
    8 D1:B731 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B731 -  -  -  -  ;
   10 D1:B731 -  -  -  -  ; ***************************************************************************************
   11 D1:B731 -  -  -  -  ; ***************************************************************************************
   12 D1:B731 -  -  -  -  
   13 D1:B731 -  -  -  -  ; ***************************************************************************************
   14 D1:B731 -  -  -  -  ;
   15 D1:B731 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B731 -  -  -  -  ;		CS if failed.
   17 D1:B731 -  -  -  -  ;
   18 D1:B731 -  -  -  -  ; ***************************************************************************************
   19 D1:B731 -  -  -  -  
   20 D1:B731 -  -  -  -  VariableSearchList:
   21 D1:B731 2A 11 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B735 -  -  -  -  		;
   23 D1:B735 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B735 -  -  -  -  		;		the address of the hash record
   25 D1:B735 -  -  -  -  		;
   26 D1:B735 -  -  -  -  _VSLLoop:
   27 D1:B735 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B737 -  -  -  -  		;
   29 D1:B737 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B738 AF -  -  -  		xor 	a
   31 D1:B739 ED 6A -  -  		adc 	hl,hl
   32 D1:B73B E1 -  -  -  		pop 	hl
   33 D1:B73C 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B73E 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B73F C8 -  -  -  		ret 	z
   36 D1:B740 -  -  -  -  _VSLRecord:
   37 D1:B740 -  -  -  -  		;
   38 D1:B740 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B740 -  -  -  -  		;
   40 D1:B740 3A 0F A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B744 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B745 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B746 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B748 -  -  -  -  		;
   45 D1:B748 -  -  -  -  		;		Now check the name
   46 D1:B748 -  -  -  -  		;
   47 D1:B748 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B749 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B74A 23 -  -  -  		inc 	hl
   50 D1:B74B 23 -  -  -  		inc 	hl
   51 D1:B74C 23 -  -  -  		inc 	hl
   52 D1:B74D ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B74F ED 5B 0B A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B754 -  -  -  -  		;
   55 D1:B754 -  -  -  -  		;		Check individual characters
   56 D1:B754 -  -  -  -  		;
   57 D1:B754 -  -  -  -  _VSLCharacter:
   58 D1:B754 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B755 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B757 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B759 BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B75A 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B75B 13 -  -  -  		inc 	de
   64 D1:B75C 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B75E -  -  -  -  		;
   66 D1:B75E -  -  -  -  _VSLFailed:
   67 D1:B75E E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B75F 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B761 -  -  -  -  		;
   70 D1:B761 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B761 -  -  -  -  		;		
   72 D1:B761 -  -  -  -  _VSLEndIdentifier:
   73 D1:B761 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B762 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B764 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B766 -  -  -  -  		;
   77 D1:B766 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B767 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B768 AF -  -  -  		xor 	a 							; clear carry
   80 D1:B769 C9 -  -  -  		ret
   81 D1:B76A -  -  -  -  
   82 D1:B76A -  -  -  -  ; ***************************************************************************************
   83 D1:B76A -  -  -  -  ;
   84 D1:B76A -  -  -  -  ;									Changes and Updates
   85 D1:B76A -  -  -  -  ;
   86 D1:B76A -  -  -  -  ; ***************************************************************************************
   87 D1:B76A -  -  -  -  ;
   88 D1:B76A -  -  -  -  ;		Date			Notes
   89 D1:B76A -  -  -  -  ;		==== 			=====
   90 D1:B76A -  -  -  -  ;
   91 D1:B76A -  -  -  -  ; ***************************************************************************************
   92 D1:B76A -  -  -  -  		
Listing for file "_build.asm"
   71 D1:B76A -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B76A -  -  -  -  ;
    2 D1:B76A -  -  -  -  ;	This file is automatically generated.
    3 D1:B76A -  -  -  -  ;
    4 D1:B76A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 D1:B780 -  -  -  -  PrecedenceTable:
    6 D1:B780 06 -  -  -  	.db	6	; $0083 !
    7 D1:B781 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B782 05 -  -  -  	.db	5	; $0085 *
    9 D1:B783 05 -  -  -  	.db	5	; $0086 /
   10 D1:B784 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B785 05 -  -  -  	.db	5	; $0088 div
   12 D1:B786 04 -  -  -  	.db	4	; $0089 +
   13 D1:B787 04 -  -  -  	.db	4	; $008a -
   14 D1:B788 03 -  -  -  	.db	3	; $008b >=
   15 D1:B789 03 -  -  -  	.db	3	; $008c <=
   16 D1:B78A 03 -  -  -  	.db	3	; $008d >
   17 D1:B78B 03 -  -  -  	.db	3	; $008e <
   18 D1:B78C 03 -  -  -  	.db	3	; $008f =
   19 D1:B78D 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B78E 02 -  -  -  	.db	2	; $0091 and
   21 D1:B78F 01 -  -  -  	.db	1	; $0092 or
   22 D1:B790 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B791 -  -  -  -  
Listing for file "_build.asm"
   72 D1:B791 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B791 -  -  -  -  ;
    2 D1:B791 -  -  -  -  ;	This is automatically generated.
    3 D1:B791 -  -  -  -  ;
    4 D1:B791 -  -  -  -  ErrorIDTable:
    5 D1:B791 FD B7 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B795 03 B8 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B799 14 B8 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B79D 22 B8 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B7A1 2C B8 D1 00 	.dw	ErrText_data & $FFFF,ErrText_data >> 16
   10 D1:B7A5 38 B8 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   11 D1:B7A9 42 B8 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   12 D1:B7AD 5C B8 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   13 D1:B7B1 6D B8 D1 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   14 D1:B7B5 82 B8 D1 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   15 D1:B7B9 92 B8 D1 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   16 D1:B7BD A7 B8 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   17 D1:B7C1 B5 B8 D1 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   18 D1:B7C5 C6 B8 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   19 D1:B7C9 D4 B8 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   20 D1:B7CD DE B8 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   21 D1:B7D1 F3 B8 D1 00 	.dw	ErrText_noproc & $FFFF,ErrText_noproc >> 16
   22 D1:B7D5 08 B9 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   23 D1:B7D9 1E B9 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   24 D1:B7DD 2C B9 D1 00 	.dw	ErrText_param & $FFFF,ErrText_param >> 16
   25 D1:B7E1 3F B9 D1 00 	.dw	ErrText_proc & $FFFF,ErrText_proc >> 16
   26 D1:B7E5 51 B9 D1 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   27 D1:B7E9 66 B9 D1 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   28 D1:B7ED 72 B9 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   29 D1:B7F1 77 B9 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   30 D1:B7F5 84 B9 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   31 D1:B7F9 95 B9 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   32 D1:B7FD -  -  -  -  
   33 D1:B7FD -  -  -  -  ErrText_warmstart:
   34 D1:B7FD 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   35 D1:B803 -  -  -  -  ErrText_assert:
   36 D1:B803 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   37 D1:B814 -  -  -  -  ErrText_badtype:
   38 D1:B814 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   39 D1:B822 -  -  -  -  ErrText_badvalue:
   40 D1:B822 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   41 D1:B82C -  -  -  -  ErrText_data:
   42 D1:B82C 4F 75 74 20 
              6F 66 20 44 
              61 74 61 00 	.db "Out of Data",0
   43 D1:B838 -  -  -  -  ErrText_dim:
   44 D1:B838 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   45 D1:B842 -  -  -  -  ErrText_disabled:
   46 D1:B842 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   47 D1:B85C -  -  -  -  ErrText_divzero:
   48 D1:B85C 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   49 D1:B86D -  -  -  -  ErrText_gosub:
   50 D1:B86D 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   51 D1:B882 -  -  -  -  ErrText_index:
   52 D1:B882 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   53 D1:B892 -  -  -  -  ErrText_lineno:
   54 D1:B892 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   55 D1:B8A7 -  -  -  -  ErrText_memory:
   56 D1:B8A7 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   57 D1:B8B5 -  -  -  -  ErrText_next:
   58 D1:B8B5 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   59 D1:B8C6 -  -  -  -  ErrText_nocomma:
   60 D1:B8C6 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   61 D1:B8D4 -  -  -  -  ErrText_nodollar:
   62 D1:B8D4 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   63 D1:B8DE -  -  -  -  ErrText_nolbracket:
   64 D1:B8DE 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   65 D1:B8F3 -  -  -  -  ErrText_noproc:
   66 D1:B8F3 45 6E 64 50 
              72 6F 63 20 
              77 69 74 68 
              6F 75 74 20 
              50 72 6F 63 
              00 -  -  -  	.db "EndProc without Proc",0
   67 D1:B908 -  -  -  -  ErrText_norbracket:
   68 D1:B908 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   69 D1:B91E -  -  -  -  ErrText_notref:
   70 D1:B91E 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   71 D1:B92C -  -  -  -  ErrText_param:
   72 D1:B92C 50 61 72 61 
              6D 65 74 65 
              72 20 4D 69 
              73 6D 61 74 
              63 68 00 -  	.db "Parameter Mismatch",0
   73 D1:B93F -  -  -  -  ErrText_proc:
   74 D1:B93F 55 6E 6B 6E 
              6F 77 6E 20 
              50 72 6F 63 
              65 64 75 72 
              65 00 -  -  	.db "Unknown Procedure",0
   75 D1:B951 -  -  -  -  ErrText_repeat:
   76 D1:B951 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   77 D1:B966 -  -  -  -  ErrText_stack:
   78 D1:B966 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   79 D1:B972 -  -  -  -  ErrText_stop:
   80 D1:B972 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   81 D1:B977 -  -  -  -  ErrText_syntax:
   82 D1:B977 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   83 D1:B984 -  -  -  -  ErrText_todo:
   84 D1:B984 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   85 D1:B995 -  -  -  -  ErrText_unknownvar:
   86 D1:B995 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   73 D1:B9A6 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B9A6 -  -  -  -  ;
    2 D1:B9A6 -  -  -  -  ;	Vectors for set 0
    3 D1:B9A6 -  -  -  -  ;
    4 D1:B9A6 -  -  -  -  VectorsSet0:
    5 D1:B9A6 33 AA D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B9AA A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B9AE A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B9B2 8F AD D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B9B6 98 AD D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B9BA 3B AD D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B9BE 49 AD D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B9C2 57 AD D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B9C6 49 AD D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B9CA 1F AD D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B9CE 2D AD D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B9D2 F6 AD D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B9D6 EC AD D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B9DA D8 AD D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B9DE CE AD D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B9E2 C4 AD D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B9E6 E2 AD D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B9EA 65 AD D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B9EE 73 AD D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B9F2 81 AD D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B9F6 68 B1 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B9FA 60 B1 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B9FE 82 B0 D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:BA02 AF B0 D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:BA06 71 B0 D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:BA0A 47 B0 D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:BA0E 46 B1 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:BA12 77 B1 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:BA16 5D B0 D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:BA1A 54 B0 D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:BA1E 8D B0 D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:BA22 A2 B0 D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:BA26 9F B1 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:BA2A A6 B1 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:BA2E B3 B1 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:BA32 B6 AD D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:BA36 BA AD D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:BA3A 78 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:BA3E 78 A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:BA42 7C A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:BA46 78 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:BA4A 1A AB D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:BA4E 78 A9 D1 00 	addr(BadCmd_LSBracket)           ; $00aa [
   48 D1:BA52 78 A9 D1 00 	addr(BadCmd_RSBracket)           ; $00ab ]
   49 D1:BA56 78 A9 D1 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 D1:BA5A 55 B5 D1 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 D1:BA5E 60 B5 D1 00 	addr(Command_Until)              ; $00ae until
   52 D1:BA62 1B B5 D1 00 	addr(Command_IF)                 ; $00af if
   53 D1:BA66 78 A9 D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:BA6A 51 B5 D1 00 	addr(Command_Else)               ; $00b1 else
   55 D1:BA6E B7 B3 D1 00 	addr(Command_FOR)                ; $00b2 for
   56 D1:BA72 78 A9 D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:BA76 78 A9 D1 00 	addr(BadCmd_Step)                ; $00b4 step
   58 D1:BA7A 4D B4 D1 00 	addr(Command_Next)               ; $00b5 next
   59 D1:BA7E 78 A9 D1 00 	addr(BadCmd_Def)                 ; $00b6 def
   60 D1:BA82 53 B2 D1 00 	addr(Command_PROC)               ; $00b7 proc
   61 D1:BA86 AD B2 D1 00 	addr(Command_ENDPROC)            ; $00b8 endproc
   62 D1:BA8A A8 B4 D1 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 D1:BA8E BD B4 D1 00 	addr(Command_Return)             ; $00ba return
   64 D1:BA92 D4 B4 D1 00 	addr(Command_GOTO)               ; $00bb goto
   65 D1:BA96 C8 B1 D1 00 	addr(Command_LOCAL)              ; $00bc local
   66 D1:BA9A 7D A9 D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:BA9E 1A AB D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:BAA2 4A AA D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:BAA6 B0 AB D1 00 	addr(Command_VDU)                ; $00c0 vdu
   70 D1:BAAA AF AA D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:BAAE A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:BAB2 A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:BAB6 A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 list
   74 D1:BABA A7 B3 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:BABE 37 AB D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:BAC2 E4 AB D1 00 	addr(Command_READ)               ; $00c7 read
   77 D1:BAC6 78 A9 D1 00 	addr(BadCmd_Data)                ; $00c8 data
   78 D1:BACA 59 AC D1 00 	addr(Command_RESTORE)            ; $00c9 restore
   79 D1:BACE 67 A9 D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:BAD2 43 B3 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:BAD6 2D AA D1 00 	addr(Command_END)                ; $00cc end
   82 D1:BADA AA AB D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:BADE -  -  -  -  ;
   84 D1:BADE -  -  -  -  ;	Vectors for set 1
   85 D1:BADE -  -  -  -  ;
   86 D1:BADE -  -  -  -  VectorsSet1:
   87 D1:BADE -  -  -  -  ;
   88 D1:BADE -  -  -  -  ;	Vectors for set 2
   89 D1:BADE -  -  -  -  ;
   90 D1:BADE -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   74 D1:BADE -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:BADE -  -  -  -  ; ***************************************************************************************
    2 D1:BADE -  -  -  -  ; ***************************************************************************************
    3 D1:BADE -  -  -  -  ;
    4 D1:BADE -  -  -  -  ;		Name : 		idivide.asm
    5 D1:BADE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BADE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BADE -  -  -  -  ;		Reviewed :	No
    8 D1:BADE -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:BADE -  -  -  -  ;
   10 D1:BADE -  -  -  -  ; ***************************************************************************************
   11 D1:BADE -  -  -  -  ; ***************************************************************************************
   12 D1:BADE -  -  -  -  
   13 D1:BADE -  -  -  -  ; ***************************************************************************************
   14 D1:BADE -  -  -  -  ;
   15 D1:BADE -  -  -  -  ;								Unsigned integer divide
   16 D1:BADE -  -  -  -  ;
   17 D1:BADE -  -  -  -  ; ***************************************************************************************
   18 D1:BADE -  -  -  -  
   19 D1:BADE -  -  -  -  Int32UDivide:
   20 D1:BADE 37 -  -  -  		scf
   21 D1:BADF C3 23 BB D1 		jp 		_I32UnsignedDivide		
   22 D1:BAE3 -  -  -  -  
   23 D1:BAE3 -  -  -  -  ; ***************************************************************************************
   24 D1:BAE3 -  -  -  -  ;
   25 D1:BAE3 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:BAE3 -  -  -  -  ;
   27 D1:BAE3 -  -  -  -  ; ***************************************************************************************
   28 D1:BAE3 -  -  -  -  
   29 D1:BAE3 -  -  -  -  Int32SDivide:
   30 D1:BAE3 37 -  -  -  		scf
   31 D1:BAE4 18 01 -  -  		jr 		_I32SDivide
   32 D1:BAE6 -  -  -  -  Int32Modulus:
   33 D1:BAE6 AF -  -  -  		xor 	a
   34 D1:BAE7 -  -  -  -  _I32SDivide:
   35 D1:BAE7 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:BAE8 F5 -  -  -  		push 	af
   37 D1:BAE9 08 -  -  -  		ex 		af,af'
   38 D1:BAEA -  -  -  -  
   39 D1:BAEA D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:BAEB D9 -  -  -  		exx
   41 D1:BAEC D5 -  -  -  		push 	de
   42 D1:BAED D9 -  -  -  		exx
   43 D1:BAEE -  -  -  -  
   44 D1:BAEE F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:BAEF AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:BAF0 CD 10 BB D1 		call 	_I32CheckHLSignSwap
   47 D1:BAF4 CD 10 BB D1 		call 	_I32CheckHLSignSwap
   48 D1:BAF8 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:BAF9 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:BAFA F5 -  -  -  		push 	af
   51 D1:BAFB CD 23 BB D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:BAFF F1 -  -  -  		pop 	af 							; get function back
   53 D1:BB00 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:BB02 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:BB03 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:BB05 C4 86 BC D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:BB09 -  -  -  -  _I32SDExit:
   58 D1:BB09 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:BB0A D1 -  -  -  		pop 	de
   60 D1:BB0B D9 -  -  -  		exx
   61 D1:BB0C D1 -  -  -  		pop 	de
   62 D1:BB0D F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:BB0E 08 -  -  -  		ex 		af,af'
   64 D1:BB0F C9 -  -  -  		ret
   65 D1:BB10 -  -  -  -  
   66 D1:BB10 -  -  -  -  
   67 D1:BB10 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:BB10 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:BB11 CB 7C -  -  		bit 	7,h
   70 D1:BB13 D9 -  -  -  		exx
   71 D1:BB14 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:BB16 -  -  -  -  		;
   73 D1:BB16 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:BB18 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:BB19 CD 86 BC D1 		call 	Int32Negate 				
   76 D1:BB1D F1 -  -  -  		pop 	af
   77 D1:BB1E -  -  -  -  _I32CHSPositive:
   78 D1:BB1E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:BB1F EB -  -  -  		ex 		de,hl
   80 D1:BB20 D9 -  -  -  		exx		
   81 D1:BB21 EB -  -  -  		ex 		de,hl
   82 D1:BB22 C9 -  -  -  		ret
   83 D1:BB23 -  -  -  -  
   84 D1:BB23 -  -  -  -  ; ***************************************************************************************
   85 D1:BB23 -  -  -  -  ;
   86 D1:BB23 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:BB23 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:BB23 -  -  -  -  ;
   89 D1:BB23 -  -  -  -  ; ***************************************************************************************
   90 D1:BB23 -  -  -  -  
   91 D1:BB23 -  -  -  -  _I32UnsignedDivide:
   92 D1:BB23 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:BB24 D5 -  -  -  		push 	de
   94 D1:BB25 D9 -  -  -  		exx
   95 D1:BB26 C5 -  -  -  		push 	bc
   96 D1:BB27 D5 -  -  -  		push 	de 							
   97 D1:BB28 D9 -  -  -  		exx
   98 D1:BB29 -  -  -  -  
   99 D1:BB29 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:BB2A -  -  -  -  
  101 D1:BB2A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:BB2B B3 -  -  -  		or 		e
  103 D1:BB2C D9 -  -  -  		exx
  104 D1:BB2D B2 -  -  -  		or 		d
  105 D1:BB2E B3 -  -  -  		or 		e
  106 D1:BB2F D9 -  -  -  		exx
  107 D1:BB30 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:BB34 -  -  -  -  
  109 D1:BB34 -  -  -  -  
  110 D1:BB34 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:BB35 4D -  -  -  		ld		c,l
  112 D1:BB36 21 00 00 00 		ld 		hl,$0000
  113 D1:BB3A D9 -  -  -  		exx
  114 D1:BB3B 44 -  -  -  		ld 		b,h
  115 D1:BB3C 4D -  -  -  		ld		c,l
  116 D1:BB3D 21 00 00 00 		ld 		hl,$0000
  117 D1:BB41 D9 -  -  -  		exx
  118 D1:BB42 -  -  -  -  
  119 D1:BB42 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:BB44 -  -  -  -  _I32DivideLoop:
  121 D1:BB44 F5 -  -  -  		push 	af
  122 D1:BB45 -  -  -  -  
  123 D1:BB45 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:BB47 CB 10 -  -  		rl 		b
  125 D1:BB49 D9 -  -  -  		exx
  126 D1:BB4A CB 11 -  -  		rl 		c
  127 D1:BB4C CB 10 -  -  		rl 		b
  128 D1:BB4E D9 -  -  -  		exx
  129 D1:BB4F CB 15 -  -  		rl 		l
  130 D1:BB51 CB 14 -  -  		rl 		h
  131 D1:BB53 D9 -  -  -  		exx
  132 D1:BB54 CB 15 -  -  		rl 		l
  133 D1:BB56 CB 14 -  -  		rl 		h
  134 D1:BB58 D9 -  -  -  		exx
  135 D1:BB59 -  -  -  -  
  136 D1:BB59 CD 24 BC D1 		call 	Int32Subtract 				; A = A - M
  137 D1:BB5D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:BB5F -  -  -  -  
  139 D1:BB5F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:BB60 18 04 -  -  		jr 		_I32Next
  141 D1:BB62 -  -  -  -  
  142 D1:BB62 -  -  -  -  _I32Borrow:
  143 D1:BB62 CD 1C BC D1 		call 	Int32Add 					; A = A + M
  144 D1:BB66 -  -  -  -  _I32Next:
  145 D1:BB66 F1 -  -  -  		pop 	af
  146 D1:BB67 3D -  -  -  		dec 	a
  147 D1:BB68 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:BB6A -  -  -  -  
  149 D1:BB6A F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:BB6B -  -  -  -  
  151 D1:BB6B 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:BB6C 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:BB6E -  -  -  -  
  154 D1:BB6E 60 -  -  -  		ld  	h,b
  155 D1:BB6F 69 -  -  -  		ld 		l,c
  156 D1:BB70 D9 -  -  -  		exx
  157 D1:BB71 60 -  -  -  		ld  	h,b
  158 D1:BB72 69 -  -  -  		ld 		l,c
  159 D1:BB73 D9 -  -  -  		exx
  160 D1:BB74 -  -  -  -  _I32Modulus1:		
  161 D1:BB74 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:BB75 D1 -  -  -  		pop 	de
  163 D1:BB76 C1 -  -  -  		pop 	bc
  164 D1:BB77 D9 -  -  -  		exx
  165 D1:BB78 D1 -  -  -  		pop 	de
  166 D1:BB79 C1 -  -  -  		pop 	bc
  167 D1:BB7A C9 -  -  -  		ret
  168 D1:BB7B -  -  -  -  
  169 D1:BB7B -  -  -  -  ; ***************************************************************************************
  170 D1:BB7B -  -  -  -  ;
  171 D1:BB7B -  -  -  -  ;									Changes and Updates
  172 D1:BB7B -  -  -  -  ;
  173 D1:BB7B -  -  -  -  ; ***************************************************************************************
  174 D1:BB7B -  -  -  -  ;
  175 D1:BB7B -  -  -  -  ;		Date			Notes
  176 D1:BB7B -  -  -  -  ;		==== 			=====
  177 D1:BB7B -  -  -  -  ;
  178 D1:BB7B -  -  -  -  ; ***************************************************************************************
  179 D1:BB7B -  -  -  -  		
Listing for file "_build.asm"
   75 D1:BB7B -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:BB7B -  -  -  -  ; ***************************************************************************************
    2 D1:BB7B -  -  -  -  ; ***************************************************************************************
    3 D1:BB7B -  -  -  -  ;
    4 D1:BB7B -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:BB7B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BB7B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BB7B -  -  -  -  ;		Reviewed :	No
    8 D1:BB7B -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:BB7B -  -  -  -  ;
   10 D1:BB7B -  -  -  -  ; ***************************************************************************************
   11 D1:BB7B -  -  -  -  ; ***************************************************************************************
   12 D1:BB7B -  -  -  -  
   13 D1:BB7B -  -  -  -  ; ***************************************************************************************
   14 D1:BB7B -  -  -  -  ;
   15 D1:BB7B -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:BB7B -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:BB7B -  -  -  -  ;
   18 D1:BB7B -  -  -  -  ; ***************************************************************************************
   19 D1:BB7B -  -  -  -  
   20 D1:BB7B -  -  -  -  Int32FromString:
   21 D1:BB7B C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:BB7C D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:BB7D D5 -  -  -  		push 	de
   24 D1:BB7E D9 -  -  -  		exx
   25 D1:BB7F D5 -  -  -  		push 	de
   26 D1:BB80 -  -  -  -  
   27 D1:BB80 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:BB84 11 00 00 00 		ld 		de,$0000
   29 D1:BB88 D9 -  -  -  		exx
   30 D1:BB89 21 00 00 00 		ld 		hl,$0000
   31 D1:BB8D 11 00 00 00 		ld 		de,$0000
   32 D1:BB91 D9 -  -  -  		exx
   33 D1:BB92 -  -  -  -  
   34 D1:BB92 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:BB93 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:BB95 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:BB97 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:BB99 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:BB9A -  -  -  -  		;
   40 D1:BB9A 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:BB9B F5 -  -  -  		push 	af
   42 D1:BB9C FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:BB9E 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:BB9F 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:BBA1 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:BBA2 18 01 -  -  		jr 		_I32FSMain
   47 D1:BBA4 -  -  -  -  _I32FSNotSigned:		
   48 D1:BBA4 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:BBA5 -  -  -  -  		;
   50 D1:BBA5 -  -  -  -  		; 		Main conversion loop.
   51 D1:BBA5 -  -  -  -  		; 		
   52 D1:BBA5 -  -  -  -  _I32FSMain:		
   53 D1:BBA5 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:BBA6 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:BBA8 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:BBAA D6 20 -  -  		sub 	32
   57 D1:BBAC -  -  -  -  _I32FSNotLower:
   58 D1:BBAC FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:BBAE 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:BBB0 FE 3A -  -  		cp 		'9'+1
   61 D1:BBB2 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:BBB4 FE 41 -  -  		cp 		'A'
   63 D1:BBB6 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:BBB8 FE 47 -  -  		cp 		'F'+1
   65 D1:BBBA 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:BBBC D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:BBBE -  -  -  -  _I32FSOkay:
   68 D1:BBBE D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:BBC0 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:BBC1 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:BBC3 03 -  -  -  		inc 	bc 							; consume character
   72 D1:BBC4 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:BBC5 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:BBC6 CD E3 BB D1 		call 	Int32Multiply 				; result *= base
   75 D1:BBCA F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:BBCB 5F -  -  -  		ld 		e,a
   77 D1:BBCC CD 1C BC D1 		call 	Int32Add 					; and add it.
   78 D1:BBD0 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:BBD1 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:BBD3 -  -  -  -  
   81 D1:BBD3 -  -  -  -  _I32FSExit:
   82 D1:BBD3 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:BBD4 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:BBD6 CC 86 BC D1 		call 	z,Int32Negate
   85 D1:BBDA 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:BBDB D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:BBDC D9 -  -  -  		exx
   88 D1:BBDD D1 -  -  -  		pop 	de
   89 D1:BBDE D9 -  -  -  		exx
   90 D1:BBDF C1 -  -  -  		pop 	bc
   91 D1:BBE0 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:BBE2 C9 -  -  -  		ret				
   93 D1:BBE3 -  -  -  -  
   94 D1:BBE3 -  -  -  -  ; ***************************************************************************************
   95 D1:BBE3 -  -  -  -  ;
   96 D1:BBE3 -  -  -  -  ;									Changes and Updates
   97 D1:BBE3 -  -  -  -  ;
   98 D1:BBE3 -  -  -  -  ; ***************************************************************************************
   99 D1:BBE3 -  -  -  -  ;
  100 D1:BBE3 -  -  -  -  ;		Date			Notes
  101 D1:BBE3 -  -  -  -  ;		==== 			=====
  102 D1:BBE3 -  -  -  -  ;
  103 D1:BBE3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   76 D1:BBE3 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:BBE3 -  -  -  -  ; ***************************************************************************************
    2 D1:BBE3 -  -  -  -  ; ***************************************************************************************
    3 D1:BBE3 -  -  -  -  ;
    4 D1:BBE3 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:BBE3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BBE3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BBE3 -  -  -  -  ;		Reviewed :	No
    8 D1:BBE3 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:BBE3 -  -  -  -  ;
   10 D1:BBE3 -  -  -  -  ; ***************************************************************************************
   11 D1:BBE3 -  -  -  -  ; ***************************************************************************************
   12 D1:BBE3 -  -  -  -  
   13 D1:BBE3 -  -  -  -  Int32Multiply:
   14 D1:BBE3 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:BBE4 D5 -  -  -  		push 	de
   16 D1:BBE5 44 -  -  -  		ld 		b,h
   17 D1:BBE6 4D -  -  -  		ld 		c,l
   18 D1:BBE7 21 00 00 00 		ld 		hl,$0000
   19 D1:BBEB -  -  -  -  
   20 D1:BBEB D9 -  -  -  		exx
   21 D1:BBEC C5 -  -  -  		push 	bc
   22 D1:BBED D5 -  -  -  		push 	de
   23 D1:BBEE 44 -  -  -  		ld 		b,h
   24 D1:BBEF 4D -  -  -  		ld 		c,l
   25 D1:BBF0 21 00 00 00 		ld 		hl,$0000		
   26 D1:BBF4 D9 -  -  -  		exx
   27 D1:BBF5 -  -  -  -  
   28 D1:BBF5 -  -  -  -  _I32MultiplyLoop:
   29 D1:BBF5 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:BBF7 C4 1C BC D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:BBFB -  -  -  -  		;
   32 D1:BBFB D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:BBFC CB 38 -  -  		srl 	b
   34 D1:BBFE CB 19 -  -  		rr 		c
   35 D1:BC00 D9 -  -  -  		exx
   36 D1:BC01 CB 18 -  -  		rr 		b
   37 D1:BC03 CB 19 -  -  		rr 		c
   38 D1:BC05 -  -  -  -  		;
   39 D1:BC05 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:BC07 CB 12 -  -  		rl 		d
   41 D1:BC09 D9 -  -  -  		exx
   42 D1:BC0A CB 13 -  -  		rl 		e
   43 D1:BC0C CB 12 -  -  		rl 		d
   44 D1:BC0E -  -  -  -  
   45 D1:BC0E 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:BC0F B1 -  -  -  		or 		c
   47 D1:BC10 D9 -  -  -  		exx
   48 D1:BC11 B0 -  -  -  		or 		b
   49 D1:BC12 B1 -  -  -  		or 		c
   50 D1:BC13 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:BC15 -  -  -  -  
   52 D1:BC15 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:BC16 D1 -  -  -  		pop 	de
   54 D1:BC17 C1 -  -  -  		pop 	bc
   55 D1:BC18 D9 -  -  -  		exx
   56 D1:BC19 D1 -  -  -  		pop 	de
   57 D1:BC1A C1 -  -  -  		pop 	bc
   58 D1:BC1B C9 -  -  -  		ret
   59 D1:BC1C -  -  -  -  
   60 D1:BC1C -  -  -  -  ; ***************************************************************************************
   61 D1:BC1C -  -  -  -  ;
   62 D1:BC1C -  -  -  -  ;									Changes and Updates
   63 D1:BC1C -  -  -  -  ;
   64 D1:BC1C -  -  -  -  ; ***************************************************************************************
   65 D1:BC1C -  -  -  -  ;
   66 D1:BC1C -  -  -  -  ;		Date			Notes
   67 D1:BC1C -  -  -  -  ;		==== 			=====
   68 D1:BC1C -  -  -  -  ;
   69 D1:BC1C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   77 D1:BC1C -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:BC1C -  -  -  -  ; ***************************************************************************************
    2 D1:BC1C -  -  -  -  ; ***************************************************************************************
    3 D1:BC1C -  -  -  -  ;
    4 D1:BC1C -  -  -  -  ;		Name : 		isimple.asm
    5 D1:BC1C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BC1C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BC1C -  -  -  -  ;		Reviewed :	No
    8 D1:BC1C -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:BC1C -  -  -  -  ;
   10 D1:BC1C -  -  -  -  ; ***************************************************************************************
   11 D1:BC1C -  -  -  -  ; ***************************************************************************************
   12 D1:BC1C -  -  -  -  
   13 D1:BC1C -  -  -  -  ; ***************************************************************************************
   14 D1:BC1C -  -  -  -  ;
   15 D1:BC1C -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:BC1C -  -  -  -  ;
   17 D1:BC1C -  -  -  -  ; ***************************************************************************************
   18 D1:BC1C -  -  -  -  
   19 D1:BC1C -  -  -  -  Int32Add:
   20 D1:BC1C 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:BC1E D9 -  -  -  		exx
   22 D1:BC1F 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:BC22 D9 -  -  -  		exx
   24 D1:BC23 C9 -  -  -  		ret
   25 D1:BC24 -  -  -  -  
   26 D1:BC24 -  -  -  -  ; ***************************************************************************************
   27 D1:BC24 -  -  -  -  ;
   28 D1:BC24 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:BC24 -  -  -  -  ;
   30 D1:BC24 -  -  -  -  ; ***************************************************************************************
   31 D1:BC24 -  -  -  -  
   32 D1:BC24 -  -  -  -  Int32Subtract:
   33 D1:BC24 AF -  -  -  		xor 	a 							; clear carry
   34 D1:BC25 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:BC28 D9 -  -  -  		exx
   36 D1:BC29 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:BC2C D9 -  -  -  		exx
   38 D1:BC2D C9 -  -  -  		ret
   39 D1:BC2E -  -  -  -  
   40 D1:BC2E -  -  -  -  ; ***************************************************************************************
   41 D1:BC2E -  -  -  -  ;
   42 D1:BC2E -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:BC2E -  -  -  -  ;
   44 D1:BC2E -  -  -  -  ; ***************************************************************************************
   45 D1:BC2E -  -  -  -  
   46 D1:BC2E -  -  -  -  Int32And:
   47 D1:BC2E D9 -  -  -  		exx
   48 D1:BC2F CD 34 BC D1 		call 	_I32AndHLDE
   49 D1:BC33 D9 -  -  -  		exx
   50 D1:BC34 -  -  -  -  _I32AndHLDE:		
   51 D1:BC34 7C -  -  -  		ld 		a,h
   52 D1:BC35 A2 -  -  -  		and 	d
   53 D1:BC36 67 -  -  -  		ld 		h,a
   54 D1:BC37 7D -  -  -  		ld 		a,l
   55 D1:BC38 A3 -  -  -  		and 	e
   56 D1:BC39 6F -  -  -  		ld 		l,a
   57 D1:BC3A C9 -  -  -  		ret
   58 D1:BC3B -  -  -  -  
   59 D1:BC3B -  -  -  -  ; ***************************************************************************************
   60 D1:BC3B -  -  -  -  ;
   61 D1:BC3B -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:BC3B -  -  -  -  ;
   63 D1:BC3B -  -  -  -  ; ***************************************************************************************
   64 D1:BC3B -  -  -  -  
   65 D1:BC3B -  -  -  -  Int32Or:
   66 D1:BC3B D9 -  -  -  		exx
   67 D1:BC3C CD 41 BC D1 		call 	_I32OrHLDE
   68 D1:BC40 D9 -  -  -  		exx
   69 D1:BC41 -  -  -  -  _I32OrHLDE:		
   70 D1:BC41 7C -  -  -  		ld 		a,h
   71 D1:BC42 B2 -  -  -  		or 		d
   72 D1:BC43 67 -  -  -  		ld 		h,a
   73 D1:BC44 7D -  -  -  		ld 		a,l
   74 D1:BC45 B3 -  -  -  		or 		e
   75 D1:BC46 6F -  -  -  		ld 		l,a
   76 D1:BC47 C9 -  -  -  		ret
   77 D1:BC48 -  -  -  -  
   78 D1:BC48 -  -  -  -  ; ***************************************************************************************
   79 D1:BC48 -  -  -  -  ;
   80 D1:BC48 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:BC48 -  -  -  -  ;
   82 D1:BC48 -  -  -  -  ; ***************************************************************************************
   83 D1:BC48 -  -  -  -  
   84 D1:BC48 -  -  -  -  Int32Xor:
   85 D1:BC48 D9 -  -  -  		exx
   86 D1:BC49 CD 4E BC D1 		call 	_I32XorHLDE
   87 D1:BC4D D9 -  -  -  		exx
   88 D1:BC4E -  -  -  -  _I32XorHLDE:		
   89 D1:BC4E 7C -  -  -  		ld 		a,h
   90 D1:BC4F AA -  -  -  		xor 	d
   91 D1:BC50 67 -  -  -  		ld 		h,a
   92 D1:BC51 7D -  -  -  		ld 		a,l
   93 D1:BC52 AB -  -  -  		xor 	e
   94 D1:BC53 6F -  -  -  		ld 		l,a
   95 D1:BC54 C9 -  -  -  		ret
   96 D1:BC55 -  -  -  -  
   97 D1:BC55 -  -  -  -  ; ***************************************************************************************
   98 D1:BC55 -  -  -  -  ;
   99 D1:BC55 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:BC55 -  -  -  -  ;
  101 D1:BC55 -  -  -  -  ; ***************************************************************************************
  102 D1:BC55 -  -  -  -  
  103 D1:BC55 -  -  -  -  Int32Zero:
  104 D1:BC55 D9 -  -  -  		exx
  105 D1:BC56 7D -  -  -  		ld 		a,l
  106 D1:BC57 B4 -  -  -  		or 		h
  107 D1:BC58 D9 -  -  -  		exx
  108 D1:BC59 B5 -  -  -  		or 		l
  109 D1:BC5A B4 -  -  -  		or 		h
  110 D1:BC5B C9 -  -  -  		ret
  111 D1:BC5C -  -  -  -  
  112 D1:BC5C -  -  -  -  ; ***************************************************************************************
  113 D1:BC5C -  -  -  -  ;
  114 D1:BC5C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:BC5C -  -  -  -  ;
  116 D1:BC5C -  -  -  -  ; ***************************************************************************************
  117 D1:BC5C -  -  -  -  
  118 D1:BC5C -  -  -  -  Int32Compare:
  119 D1:BC5C E5 -  -  -  		push 	hl 							; save HL
  120 D1:BC5D AF -  -  -  		xor 	a 							; clear carry
  121 D1:BC5E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:BC61 D9 -  -  -  		exx
  123 D1:BC62 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:BC63 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:BC66 -  -  -  -  		;
  126 D1:BC66 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:BC67 E2 6F BC D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:BC6B 78 -  -  -  		ld 		a,b
  129 D1:BC6C EE 80 -  -  		xor 	$80
  130 D1:BC6E 47 -  -  -  		ld 		b,a
  131 D1:BC6F -  -  -  -  _I32CNoOverflow:
  132 D1:BC6F 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:BC70 B5 -  -  -  		or 		l
  134 D1:BC71 D9 -  -  -  		exx 
  135 D1:BC72 B4 -  -  -  		or 		h
  136 D1:BC73 B5 -  -  -  		or 		l
  137 D1:BC74 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:BC76 -  -  -  -  		;
  139 D1:BC76 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:BC77 CB 78 -  -  		bit 	7,b
  141 D1:BC79 D9 -  -  -  		exx
  142 D1:BC7A 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:BC7C 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:BC7E 3E FF -  -  		ld 		a,$FF
  145 D1:BC80 -  -  -  -  _I32NotPos:
  146 D1:BC80 D9 -  -  -  		exx
  147 D1:BC81 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:BC82 D9 -  -  -  		exx
  149 D1:BC83 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:BC84 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:BC85 C9 -  -  -  		ret
  152 D1:BC86 -  -  -  -  
  153 D1:BC86 -  -  -  -  ; ***************************************************************************************
  154 D1:BC86 -  -  -  -  ;
  155 D1:BC86 -  -  -  -  ;										Negate HL'HL
  156 D1:BC86 -  -  -  -  ;
  157 D1:BC86 -  -  -  -  ; ***************************************************************************************
  158 D1:BC86 -  -  -  -  
  159 D1:BC86 -  -  -  -  Int32Negate:
  160 D1:BC86 AF -  -  -  		xor 	a
  161 D1:BC87 CD 92 BC D1 		call 	_I32NSubtract
  162 D1:BC8B D9 -  -  -  		exx
  163 D1:BC8C CD 92 BC D1 		call 	_I32NSubtract
  164 D1:BC90 D9 -  -  -  		exx
  165 D1:BC91 C9 -  -  -  		ret
  166 D1:BC92 -  -  -  -  _I32NSubtract:
  167 D1:BC92 D5 -  -  -  		push 	de
  168 D1:BC93 EB -  -  -  		ex 		de,hl
  169 D1:BC94 21 00 00 00 		ld 		hl,$0000
  170 D1:BC98 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:BC9B D1 -  -  -  		pop 	de
  172 D1:BC9C C9 -  -  -  		ret
  173 D1:BC9D -  -  -  -  		
  174 D1:BC9D -  -  -  -  ; ***************************************************************************************
  175 D1:BC9D -  -  -  -  ;
  176 D1:BC9D -  -  -  -  ;									Changes and Updates
  177 D1:BC9D -  -  -  -  ;
  178 D1:BC9D -  -  -  -  ; ***************************************************************************************
  179 D1:BC9D -  -  -  -  ;
  180 D1:BC9D -  -  -  -  ;		Date			Notes
  181 D1:BC9D -  -  -  -  ;		==== 			=====
  182 D1:BC9D -  -  -  -  ;
  183 D1:BC9D -  -  -  -  ; ***************************************************************************************
  184 D1:BC9D -  -  -  -  		
Listing for file "_build.asm"
   78 D1:BC9D -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:BC9D -  -  -  -  ; ***************************************************************************************
    2 D1:BC9D -  -  -  -  ; ***************************************************************************************
    3 D1:BC9D -  -  -  -  ;
    4 D1:BC9D -  -  -  -  ;		Name : 		itostring.asm
    5 D1:BC9D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BC9D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BC9D -  -  -  -  ;		Reviewed :	No
    8 D1:BC9D -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:BC9D -  -  -  -  ;
   10 D1:BC9D -  -  -  -  ; ***************************************************************************************
   11 D1:BC9D -  -  -  -  ;
   12 D1:BC9D -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:BC9D -  -  -  -  ;
   14 D1:BC9D -  -  -  -  ; ***************************************************************************************
   15 D1:BC9D -  -  -  -  
   16 D1:BC9D -  -  -  -  Int32ToString:
   17 D1:BC9D C5 -  -  -  		push 	bc 							; save string start
   18 D1:BC9E D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:BC9F E5 -  -  -  		push 	hl
   20 D1:BCA0 11 00 00 00 		ld	 	de,$0000
   21 D1:BCA4 D9 -  -  -  		exx
   22 D1:BCA5 D5 -  -  -  		push 	de
   23 D1:BCA6 E5 -  -  -  		push 	hl
   24 D1:BCA7 11 00 00 00 		ld 		de,$000
   25 D1:BCAB D9 -  -  -  		exx
   26 D1:BCAC 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:BCAD -  -  -  -  		;
   28 D1:BCAD CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:BCAF 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:BCB1 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:BCB3 5F -  -  -  		ld 		e,a
   32 D1:BCB4 -  -  -  -  		;
   33 D1:BCB4 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:BCB5 CB 7C -  -  		bit 	7,h
   35 D1:BCB7 D9 -  -  -  		exx
   36 D1:BCB8 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:BCBA -  -  -  -  		;
   38 D1:BCBA CD 86 BC D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:BCBE -  -  -  -  		;
   40 D1:BCBE 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:BCC0 02 -  -  -  		ld 		(bc),a
   42 D1:BCC1 03 -  -  -  		inc 	bc
   43 D1:BCC2 -  -  -  -  _I32TSNotNegative:	
   44 D1:BCC2 CD D1 BC D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:BCC6 -  -  -  -  _I32TSExit:
   46 D1:BCC6 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:BCC8 02 -  -  -  		ld 		(bc),a 
   48 D1:BCC9 -  -  -  -  
   49 D1:BCC9 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:BCCA E1 -  -  -  		pop 	hl
   51 D1:BCCB D1 -  -  -  		pop 	de
   52 D1:BCCC D9 -  -  -  		exx
   53 D1:BCCD E1 -  -  -  		pop 	hl
   54 D1:BCCE D1 -  -  -  		pop 	de
   55 D1:BCCF C1 -  -  -  		pop 	bc
   56 D1:BCD0 C9 -  -  -  		ret
   57 D1:BCD1 -  -  -  -  
   58 D1:BCD1 -  -  -  -  _I32RecursiveConvert:
   59 D1:BCD1 CD DE BA D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:BCD5 F5 -  -  -  		push 	af 							; save remainder
   61 D1:BCD6 CD 55 BC D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:BCDA C4 D1 BC D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:BCDE F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:BCDF FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:BCE1 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:BCE3 C6 07 -  -  		add 	a,7
   67 D1:BCE5 -  -  -  -  _I32NotHex:
   68 D1:BCE5 C6 30 -  -  		add 	a,48
   69 D1:BCE7 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:BCE8 03 -  -  -  		inc 	bc
   71 D1:BCE9 C9 -  -  -  		ret		
   72 D1:BCEA -  -  -  -  
   73 D1:BCEA -  -  -  -  ; ***************************************************************************************
   74 D1:BCEA -  -  -  -  ;
   75 D1:BCEA -  -  -  -  ;									Changes and Updates
   76 D1:BCEA -  -  -  -  ;
   77 D1:BCEA -  -  -  -  ; ***************************************************************************************
   78 D1:BCEA -  -  -  -  ;
   79 D1:BCEA -  -  -  -  ;		Date			Notes
   80 D1:BCEA -  -  -  -  ;		==== 			=====
   81 D1:BCEA -  -  -  -  ;
   82 D1:BCEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   79 D1:BCEA -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:BCEA -  -  -  -  ; ***************************************************************************************
    2 D1:BCEA -  -  -  -  ; ***************************************************************************************
    3 D1:BCEA -  -  -  -  ;
    4 D1:BCEA -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:BCEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BCEA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BCEA -  -  -  -  ;		Reviewed :	No
    8 D1:BCEA -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:BCEA -  -  -  -  ;
   10 D1:BCEA -  -  -  -  ; ***************************************************************************************
   11 D1:BCEA -  -  -  -  ; ***************************************************************************************
   12 D1:BCEA -  -  -  -  
   13 D1:BCEA -  -  -  -  #ifdef AQUARIUS
   14 D1:BCEA             
   15 D1:BCEA             ; ***************************************************************************************
   16 D1:BCEA             ;
   17 D1:BCEA             ;								Initialise system stuff
   18 D1:BCEA             ;
   19 D1:BCEA             ; ***************************************************************************************
   20 D1:BCEA             
   21 D1:BCEA             SYSInitialise:
   22 D1:BCEA             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:BCEA             	call 	SYSPrintChar
   24 D1:BCEA             	ret
   25 D1:BCEA             
   26 D1:BCEA             ; ***************************************************************************************
   27 D1:BCEA             ;
   28 D1:BCEA             ;								Terminate system stuff
   29 D1:BCEA             ;
   30 D1:BCEA             ; ***************************************************************************************
   31 D1:BCEA             
   32 D1:BCEA             SYSTerminate:
   33 D1:BCEA             	jr 		SYSTerminate
   34 D1:BCEA             
   35 D1:BCEA             ; ***************************************************************************************
   36 D1:BCEA             ;
   37 D1:BCEA             ;						Print A character (note 13,10 required for CRLF)
   38 D1:BCEA             ;
   39 D1:BCEA             ; ***************************************************************************************
   40 D1:BCEA             
   41 D1:BCEA             SYSPrintChar:
   42 D1:BCEA             	push 	af 									; we stack everything including alt registers
   43 D1:BCEA             	push 	bc
   44 D1:BCEA             	push 	de
   45 D1:BCEA             	push 	hl
   46 D1:BCEA             	push 	ix
   47 D1:BCEA             	push 	iy
   48 D1:BCEA             	exx
   49 D1:BCEA             	push 	bc
   50 D1:BCEA             	push 	de
   51 D1:BCEA             	push 	hl
   52 D1:BCEA             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:BCEA             	pop 	hl
   54 D1:BCEA             	pop 	de
   55 D1:BCEA             	pop 	bc
   56 D1:BCEA             	exx
   57 D1:BCEA             	pop 	iy
   58 D1:BCEA             	pop 	ix
   59 D1:BCEA             	pop 	hl
   60 D1:BCEA             	pop 	de
   61 D1:BCEA             	pop 	bc
   62 D1:BCEA             	pop 	af
   63 D1:BCEA             	ret		
   64 D1:BCEA             
   65 D1:BCEA             ; ***************************************************************************************
   66 D1:BCEA             ;
   67 D1:BCEA             ;									Print Newline
   68 D1:BCEA             ;
   69 D1:BCEA             ; ***************************************************************************************
   70 D1:BCEA             
   71 D1:BCEA             SYSPrintCRLF:
   72 D1:BCEA             	push 	af
   73 D1:BCEA             	ld 		a,13
   74 D1:BCEA             	call 	SYSPrintChar
   75 D1:BCEA             	ld 		a,10
   76 D1:BCEA             	call 	SYSPrintChar
   77 D1:BCEA             	pop 	af
   78 D1:BCEA             	ret
   79 D1:BCEA             
   80 D1:BCEA             ; ***************************************************************************************
   81 D1:BCEA             ;
   82 D1:BCEA             ;									Get time into HL'HL
   83 D1:BCEA             ;
   84 D1:BCEA             ; ***************************************************************************************
   85 D1:BCEA             
   86 D1:BCEA             SYSGetTimer:
   87 D1:BCEA              	in 		a,($00)
   88 D1:BCEA              	ld 		l,a
   89 D1:BCEA              	in 		a,($01)
   90 D1:BCEA              	ld 		h,a
   91 D1:BCEA              	exx
   92 D1:BCEA              	in 		a,($02)
   93 D1:BCEA              	ld 		l,a
   94 D1:BCEA              	in 		a,($03)
   95 D1:BCEA              	ld 		h,a
   96 D1:BCEA              	exx
   97 D1:BCEA             	ret 	
   98 D1:BCEA             	
   99 D1:BCEA             #endif
  100 D1:BCEA -  -  -  -  
  101 D1:BCEA -  -  -  -  ; ***************************************************************************************
  102 D1:BCEA -  -  -  -  ;
  103 D1:BCEA -  -  -  -  ;									Changes and Updates
  104 D1:BCEA -  -  -  -  ;
  105 D1:BCEA -  -  -  -  ; ***************************************************************************************
  106 D1:BCEA -  -  -  -  ;
  107 D1:BCEA -  -  -  -  ;		Date			Notes
  108 D1:BCEA -  -  -  -  ;		==== 			=====
  109 D1:BCEA -  -  -  -  ;
  110 D1:BCEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   80 D1:BCEA -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:BCEA -  -  -  -  ; ***************************************************************************************
    2 D1:BCEA -  -  -  -  ; ***************************************************************************************
    3 D1:BCEA -  -  -  -  ;
    4 D1:BCEA -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:BCEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BCEA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BCEA -  -  -  -  ;		Reviewed :	No
    8 D1:BCEA -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:BCEA -  -  -  -  ;
   10 D1:BCEA -  -  -  -  ; ***************************************************************************************
   11 D1:BCEA -  -  -  -  ; ***************************************************************************************
   12 D1:BCEA -  -  -  -  
   13 D1:BCEA -  -  -  -  #ifdef CLEANEZ80
   14 D1:BCEA             
   15 D1:BCEA             ; ***************************************************************************************
   16 D1:BCEA             ;
   17 D1:BCEA             ;								Initialise system stuff
   18 D1:BCEA             ;
   19 D1:BCEA             ; ***************************************************************************************
   20 D1:BCEA             
   21 D1:BCEA             SYSInitialise:
   22 D1:BCEA             	ret
   23 D1:BCEA             
   24 D1:BCEA             ; ***************************************************************************************
   25 D1:BCEA             ;
   26 D1:BCEA             ;								Terminate system stuff
   27 D1:BCEA             ;
   28 D1:BCEA             ; ***************************************************************************************
   29 D1:BCEA             
   30 D1:BCEA             SYSTerminate:
   31 D1:BCEA             	ret
   32 D1:BCEA             
   33 D1:BCEA             ; ***************************************************************************************
   34 D1:BCEA             ;
   35 D1:BCEA             ;								Print A character
   36 D1:BCEA             ;
   37 D1:BCEA             ; ***************************************************************************************
   38 D1:BCEA             
   39 D1:BCEA             SYSPrintChar:
   40 D1:BCEA             	ret		
   41 D1:BCEA             
   42 D1:BCEA             ; ***************************************************************************************
   43 D1:BCEA             ;
   44 D1:BCEA             ;									Print Newline
   45 D1:BCEA             ;
   46 D1:BCEA             ; ***************************************************************************************
   47 D1:BCEA             
   48 D1:BCEA             SYSPrintCRLF:
   49 D1:BCEA             	ret
   50 D1:BCEA             
   51 D1:BCEA             ; ***************************************************************************************
   52 D1:BCEA             ;
   53 D1:BCEA             ;									Get time into HL'HL
   54 D1:BCEA             ;
   55 D1:BCEA             ; ***************************************************************************************
   56 D1:BCEA             
   57 D1:BCEA             SYSGetTimer:
   58 D1:BCEA             	ret
   59 D1:BCEA             
   60 D1:BCEA             #endif
   61 D1:BCEA -  -  -  -  
   62 D1:BCEA -  -  -  -  ; ***************************************************************************************
   63 D1:BCEA -  -  -  -  ;
   64 D1:BCEA -  -  -  -  ;									Changes and Updates
   65 D1:BCEA -  -  -  -  ;
   66 D1:BCEA -  -  -  -  ; ***************************************************************************************
   67 D1:BCEA -  -  -  -  ;
   68 D1:BCEA -  -  -  -  ;		Date			Notes
   69 D1:BCEA -  -  -  -  ;		==== 			=====
   70 D1:BCEA -  -  -  -  ;
   71 D1:BCEA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   81 D1:BCEA -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:BCEA -  -  -  -  ; ***************************************************************************************
    2 D1:BCEA -  -  -  -  ; ***************************************************************************************
    3 D1:BCEA -  -  -  -  ;
    4 D1:BCEA -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:BCEA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BCEA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BCEA -  -  -  -  ;		Reviewed :	No
    8 D1:BCEA -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:BCEA -  -  -  -  ;
   10 D1:BCEA -  -  -  -  ; ***************************************************************************************
   11 D1:BCEA -  -  -  -  ; ***************************************************************************************
   12 D1:BCEA -  -  -  -  
   13 D1:BCEA -  -  -  -  #ifdef TI84
   14 D1:BCEA -  -  -  -  
   15 D1:BCEA -  -  -  -  ; ***************************************************************************************
   16 D1:BCEA -  -  -  -  ;
   17 D1:BCEA -  -  -  -  ;								Initialise system stuff
   18 D1:BCEA -  -  -  -  ;
   19 D1:BCEA -  -  -  -  ; ***************************************************************************************
   20 D1:BCEA -  -  -  -  
   21 D1:BCEA -  -  -  -  SYSInitialise:
   22 D1:BCEA F3 -  -  -  	di
   23 D1:BCEB ED 73 08 BD 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:BCF0 FD 22 0C BD 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:BCF5 C9 -  -  -  	ret
   26 D1:BCF6 -  -  -  -  
   27 D1:BCF6 -  -  -  -  ; ***************************************************************************************
   28 D1:BCF6 -  -  -  -  ;
   29 D1:BCF6 -  -  -  -  ;								Terminate system stuff
   30 D1:BCF6 -  -  -  -  ;
   31 D1:BCF6 -  -  -  -  ; ***************************************************************************************
   32 D1:BCF6 -  -  -  -  
   33 D1:BCF6 -  -  -  -  SYSTerminate:
   34 D1:BCF6 ED 7B 08 BD 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:BCFB FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:BCFD FD 2A 0C BD 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:BD02 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:BD06 FB -  -  -  	ei
   39 D1:BD07 C9 -  -  -  	ret 										; and exit.
   40 D1:BD08 -  -  -  -  
   41 D1:BD08 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:BD08 00 00 00 00 	.dw 	0,0
   43 D1:BD0C -  -  -  -  _IYTemp84:
   44 D1:BD0C 00 00 00 00 	.dw 	0,0		
   45 D1:BD10 -  -  -  -  
   46 D1:BD10 -  -  -  -  ; ***************************************************************************************
   47 D1:BD10 -  -  -  -  ;
   48 D1:BD10 -  -  -  -  ;								Print A character
   49 D1:BD10 -  -  -  -  ;
   50 D1:BD10 -  -  -  -  ; ***************************************************************************************
   51 D1:BD10 -  -  -  -  
   52 D1:BD10 -  -  -  -  SYSPrintChar:
   53 D1:BD10 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:BD11 C5 -  -  -  	push 	bc
   55 D1:BD12 D5 -  -  -  	push 	de
   56 D1:BD13 E5 -  -  -  	push 	hl
   57 D1:BD14 DD E5 -  -  	push 	ix
   58 D1:BD16 FD E5 -  -  	push 	iy
   59 D1:BD18 D9 -  -  -  	exx
   60 D1:BD19 C5 -  -  -  	push 	bc
   61 D1:BD1A D5 -  -  -  	push 	de
   62 D1:BD1B E5 -  -  -  	push 	hl
   63 D1:BD1C -  -  -  -  
   64 D1:BD1C FD 2A 0C BD 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:BD21 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:BD25 F3 -  -  -  	di
   67 D1:BD26 FD 22 0C BD 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:BD2B -  -  -  -  
   69 D1:BD2B E1 -  -  -  	pop 	hl
   70 D1:BD2C D1 -  -  -  	pop 	de
   71 D1:BD2D C1 -  -  -  	pop 	bc
   72 D1:BD2E D9 -  -  -  	exx
   73 D1:BD2F FD E1 -  -  	pop 	iy
   74 D1:BD31 DD E1 -  -  	pop 	ix
   75 D1:BD33 E1 -  -  -  	pop 	hl
   76 D1:BD34 D1 -  -  -  	pop 	de
   77 D1:BD35 C1 -  -  -  	pop 	bc
   78 D1:BD36 F1 -  -  -  	pop 	af
   79 D1:BD37 C9 -  -  -  	ret		
   80 D1:BD38 -  -  -  -  
   81 D1:BD38 -  -  -  -  ; ***************************************************************************************
   82 D1:BD38 -  -  -  -  ;
   83 D1:BD38 -  -  -  -  ;									Print Newline
   84 D1:BD38 -  -  -  -  ;
   85 D1:BD38 -  -  -  -  ; ***************************************************************************************
   86 D1:BD38 -  -  -  -  
   87 D1:BD38 -  -  -  -  SYSPrintCRLF:
   88 D1:BD38 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:BD39 C5 -  -  -  	push 	bc
   90 D1:BD3A D5 -  -  -  	push 	de
   91 D1:BD3B E5 -  -  -  	push 	hl
   92 D1:BD3C DD E5 -  -  	push 	ix
   93 D1:BD3E FD E5 -  -  	push 	iy
   94 D1:BD40 D9 -  -  -  	exx
   95 D1:BD41 C5 -  -  -  	push 	bc
   96 D1:BD42 D5 -  -  -  	push 	de
   97 D1:BD43 E5 -  -  -  	push 	hl
   98 D1:BD44 -  -  -  -  
   99 D1:BD44 FD 2A 0C BD 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:BD49 CD F0 07 02 	call 	_newline
  101 D1:BD4D F3 -  -  -  	di
  102 D1:BD4E FD 22 0C BD 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:BD53 -  -  -  -  
  104 D1:BD53 E1 -  -  -  	pop 	hl
  105 D1:BD54 D1 -  -  -  	pop 	de
  106 D1:BD55 C1 -  -  -  	pop 	bc
  107 D1:BD56 D9 -  -  -  	exx
  108 D1:BD57 FD E1 -  -  	pop 	iy
  109 D1:BD59 DD E1 -  -  	pop 	ix
  110 D1:BD5B E1 -  -  -  	pop 	hl
  111 D1:BD5C D1 -  -  -  	pop 	de
  112 D1:BD5D C1 -  -  -  	pop 	bc
  113 D1:BD5E F1 -  -  -  	pop 	af
  114 D1:BD5F C9 -  -  -  	ret
  115 D1:BD60 -  -  -  -  
  116 D1:BD60 -  -  -  -  ; ***************************************************************************************
  117 D1:BD60 -  -  -  -  ;
  118 D1:BD60 -  -  -  -  ;									Get time into HL'HL
  119 D1:BD60 -  -  -  -  ;
  120 D1:BD60 -  -  -  -  ; ***************************************************************************************
  121 D1:BD60 -  -  -  -  
  122 D1:BD60 -  -  -  -  SYSGetTimer:
  123 D1:BD60 21 34 12 00 	ld 		hl,$1234
  124 D1:BD64 D9 -  -  -  	exx
  125 D1:BD65 21 78 56 00 	ld 		hl,$5678
  126 D1:BD69 D9 -  -  -  	exx
  127 D1:BD6A C9 -  -  -  	ret
  128 D1:BD6B -  -  -  -  
  129 D1:BD6B -  -  -  -  #endif
  130 D1:BD6B -  -  -  -  
  131 D1:BD6B -  -  -  -  ; ***************************************************************************************
  132 D1:BD6B -  -  -  -  ;
  133 D1:BD6B -  -  -  -  ;									Changes and Updates
  134 D1:BD6B -  -  -  -  ;
  135 D1:BD6B -  -  -  -  ; ***************************************************************************************
  136 D1:BD6B -  -  -  -  ;
  137 D1:BD6B -  -  -  -  ;		Date			Notes
  138 D1:BD6B -  -  -  -  ;		==== 			=====
  139 D1:BD6B -  -  -  -  ;
  140 D1:BD6B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   82 D1:BD6B -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:BD6B -  -  -  -  ; ***************************************************************************************
    2 D1:BD6B -  -  -  -  ; ***************************************************************************************
    3 D1:BD6B -  -  -  -  ;
    4 D1:BD6B -  -  -  -  ;		Name : 		basic.asm
    5 D1:BD6B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BD6B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BD6B -  -  -  -  ;		Reviewed :	No
    8 D1:BD6B -  -  -  -  ;		Purpose :	Main program.
    9 D1:BD6B -  -  -  -  ;
   10 D1:BD6B -  -  -  -  ; ***************************************************************************************
   11 D1:BD6B -  -  -  -  ; ***************************************************************************************
   12 D1:BD6B -  -  -  -  
   13 D1:BD6B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:C000 -  -  -  -  TestInstance:
   15 D1:C000 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:C000 -  -  -  -  ;
    2 D1:C000 -  -  -  -  ;	This code automatically generated.
    3 D1:C000 -  -  -  -  ;
    4 D1:C000 -  -  -  -  TestProgram:
    5 D1:C000 08 14 00 BF 
              0A 8F 40 80 
              09 19 00 BD 
              0C 95 45 A5 
              80 0A 1E 00 
              BF 0A 8F 0A 
              89 41 80 10 
              28 00 BF 00 
              8F 0A 86 42 
              85 43 89 44 
              8A 45 80 07 
              2D 00 B9 4A 
              7C 80 0A 2E 
              00 B2 0B 8F 
              41 B3 45 80 
              0B 2F 00 BF 
              0C 95 0B A5 
              8F 00 80 05 
              30 00 B5 80 
              0D 32 00 AF 
              0A 8E 42 5C 
              50 B0 BB 5E 
              80 15 33 00 
              C1 3F 0D 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              0D 80 15 34 
              00 C1 3F 0D 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              2A 0D 80 15 
              35 00 C1 3F 
              0D 2A 2A 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              2A 2A 0D 80 
              15 36 00 C1 
              3F 0D 2A 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              2A 2A 2A 0D 
              80 15 37 00 
              C1 3F 0D 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              2A 2A 2A 2A 
              0D 80 05 BC 
              02 BA 80 00 	.db	$08,$14,$00,$bf,$0a,$8f,$40,$80,$09,$19,$00,$bd,$0c,$95,$45,$a5,$80,$0a,$1e,$00,$bf,$0a,$8f,$0a,$89,$41,$80,$10,$28,$00,$bf,$00,$8f,$0a,$86,$42,$85,$43,$89,$44,$8a,$45,$80,$07,$2d,$00,$b9,$4a,$7c,$80,$0a,$2e,$00,$b2,$0b,$8f,$41,$b3,$45,$80,$0b,$2f,$00,$bf,$0c,$95,$0b,$a5,$8f,$00,$80,$05,$30,$00,$b5,$80,$0d,$32,$00,$af,$0a,$8e,$42,$5c,$50,$b0,$bb,$5e,$80,$15,$33,$00,$c1,$3f,$0d,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$0d,$80,$15,$34,$00,$c1,$3f,$0d,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$0d,$80,$15,$35,$00,$c1,$3f,$0d,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$0d,$80,$15,$36,$00,$c1,$3f,$0d,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$0d,$80,$15,$37,$00,$c1,$3f,$0d,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$2a,$0d,$80,$05,$bc,$02,$ba,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C0C8 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D0C8 -  -  -  -  EndTestInstance:
   18 D1:D0C8 -  -  -  -  		
   19 D1:D0C8 -  -  -  -  ; ***************************************************************************************
   20 D1:D0C8 -  -  -  -  ;
   21 D1:D0C8 -  -  -  -  ;									Changes and Updates
   22 D1:D0C8 -  -  -  -  ;
   23 D1:D0C8 -  -  -  -  ; ***************************************************************************************
   24 D1:D0C8 -  -  -  -  ;
   25 D1:D0C8 -  -  -  -  ;		Date			Notes
   26 D1:D0C8 -  -  -  -  ;		==== 			=====
   27 D1:D0C8 -  -  -  -  ;
   28 D1:D0C8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   83 D1:D0C8 -  -  -  -  FinalAddress:
