    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;
   19 00:0000 -  -  -  -  XTYPE_INTEGER = $00	 						; Constants for C
   20 00:0000 -  -  -  -  XTYPE_FLOAT = $01
   21 00:0000 -  -  -  -  XTYPE_STRING = $02
   22 00:0000 -  -  -  -  XTYPE_REFERENCE = $80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   25 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   26 00:0000 -  -  -  -  CIsString = 1 								; Bit 1 set if string
   27 00:0000 -  -  -  -  CIsFloat = 0 								; Bit 0 set if float
   28 00:0000 -  -  -  -  
   29 00:0000 -  -  -  -  ; ***************************************************************************************
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ;									Changes and Updates
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
   34 00:0000 -  -  -  -  ;
   35 00:0000 -  -  -  -  ;		Date			Notes
   36 00:0000 -  -  -  -  ;		==== 			=====
   37 00:0000 -  -  -  -  ;
   38 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$9e
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$93
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_PLUS                            	$0088 ; +
   18 00:0000 -  -  -  -  #define KWD_MINUS                           	$0089 ; -
   19 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008a ; >=
   20 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008b ; <=
   21 00:0000 -  -  -  -  #define KWD_GREATER                         	$008c ; >
   22 00:0000 -  -  -  -  #define KWD_LESS                            	$008d ; <
   23 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008e ; =
   24 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$008f ; <>
   25 00:0000 -  -  -  -  #define KWD_AND                             	$0090 ; and
   26 00:0000 -  -  -  -  #define KWD_OR                              	$0091 ; or
   27 00:0000 -  -  -  -  #define KWD_XOR                             	$0092 ; xor
   28 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0093 ; &
   29 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0094 ; (
   30 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0095 ; $
   31 00:0000 -  -  -  -  #define KWD_RND                             	$0096 ; rnd
   32 00:0000 -  -  -  -  #define KWD_LEN                             	$0097 ; len
   33 00:0000 -  -  -  -  #define KWD_ABS                             	$0098 ; abs
   34 00:0000 -  -  -  -  #define KWD_SGN                             	$0099 ; sgn
   35 00:0000 -  -  -  -  #define KWD_INT                             	$009a ; int
   36 00:0000 -  -  -  -  #define KWD_STRDOLLAR                       	$009b ; str$
   37 00:0000 -  -  -  -  #define KWD_ASC                             	$009c ; asc
   38 00:0000 -  -  -  -  #define KWD_PAGE                            	$009d ; page
   39 00:0000 -  -  -  -  #define KWD_RPAREN                          	$009e ; )
   40 00:0000 -  -  -  -  #define KWD_COMMA                           	$009f ; ,
   41 00:0000 -  -  -  -  #define KWD_COLON                           	$00a0 ; :
   42 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a1 ; ;
   43 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a2 ; '
   44 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00a3 ; repeat
   45 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00a4 ; until
   46 00:0000 -  -  -  -  #define KWD_IF                              	$00a5 ; if
   47 00:0000 -  -  -  -  #define KWD_THEN                            	$00a6 ; then
   48 00:0000 -  -  -  -  #define KWD_ELSE                            	$00a7 ; else
   49 00:0000 -  -  -  -  #define KWD_FOR                             	$00a8 ; for
   50 00:0000 -  -  -  -  #define KWD_TO                              	$00a9 ; to
   51 00:0000 -  -  -  -  #define KWD_STEP                            	$00aa ; step
   52 00:0000 -  -  -  -  #define KWD_NEXT                            	$00ab ; next
   53 00:0000 -  -  -  -  #define KWD_DEF                             	$00ac ; def
   54 00:0000 -  -  -  -  #define KWD_PROC                            	$00ad ; proc
   55 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00ae ; endproc
   56 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00af ; local
   57 00:0000 -  -  -  -  #define KWD_DIM                             	$00b0 ; dim
   58 00:0000 -  -  -  -  #define KWD_REM                             	$00b1 ; rem
   59 00:0000 -  -  -  -  #define KWD_LET                             	$00b2 ; let
   60 00:0000 -  -  -  -  #define KWD_VDU                             	$00b3 ; vdu
   61 00:0000 -  -  -  -  #define KWD_PRINT                           	$00b4 ; print
   62 00:0000 -  -  -  -  #define KWD_LOAD                            	$00b5 ; load
   63 00:0000 -  -  -  -  #define KWD_SAVE                            	$00b6 ; save
   64 00:0000 -  -  -  -  #define KWD_LIST                            	$00b7 ; list
   65 00:0000 -  -  -  -  #define KWD_NEW                             	$00b8 ; new
   66 00:0000 -  -  -  -  #define KWD_RUN                             	$00b9 ; run
   67 00:0000 -  -  -  -  #define KWD_READ                            	$00ba ; read
   68 00:0000 -  -  -  -  #define KWD_DATA                            	$00bb ; data
   69 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00bc ; restore
   70 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00bd ; assert
   71 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00be ; clear
   72 00:0000 -  -  -  -  #define KWD_END                             	$00bf ; end
   73 00:0000 -  -  -  -  #define KWD_STOP                            	$00c0 ; stop
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NORBRACKET = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   63 00:0000             	ld a,ERRID_NORBRACKET
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOTREF = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOTREF
   70 00:0000             	ld a,ERRID_NOTREF
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_STOP = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_STOP
   77 00:0000             	ld a,ERRID_STOP
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_SYNTAX = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_SYNTAX
   84 00:0000             	ld a,ERRID_SYNTAX
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_TODO = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_TODO
   91 00:0000             	ld a,ERRID_TODO
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
   98 00:0000             	ld a,ERRID_UNKNOWNVAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 04 B0 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B4 D1 		ld 		de,TestInstance
   45 D1:A889 21 3B C4 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD AD AA D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 70 A9 D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 2A B0 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 10 B0 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 0A 
              AA D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 0A 
              AA D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  
   59 D1:A8CD -  -  -  -  ; ***************************************************************************************
   60 D1:A8CD -  -  -  -  ;
   61 D1:A8CD -  -  -  -  ;										Run variables
   62 D1:A8CD -  -  -  -  ;
   63 D1:A8CD -  -  -  -  ; ***************************************************************************************
   64 D1:A8CD -  -  -  -  
   65 D1:A8CD -  -  -  -  CurrentLineStart: 							; Start of current line.
   66 D1:A8CD 00 00 00 00 		.dw 	0,0
   67 D1:A8D1 -  -  -  -  		
   68 D1:A8D1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  
   71 D1:A8D5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   72 D1:A8D5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   73 D1:A8DB -  -  -  -  
   74 D1:A8DB -  -  -  -  AConvert: 									; used for address conversions.
   75 D1:A8DB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8E1 -  -  -  -  		
   77 D1:A8E1 -  -  -  -  RandomSeed: 								; random number seeds.
   78 D1:A8E1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   79 D1:A8F1 -  -  -  -  
   80 D1:A8F1 -  -  -  -  s; ***************************************************************************************
   81 D1:A8F1 -  -  -  -  ;
   82 D1:A8F1 -  -  -  -  ;										  Buffers
   83 D1:A8F1 -  -  -  -  ;
   84 D1:A8F1 -  -  -  -  ; ***************************************************************************************
   85 D1:A8F1 -  -  -  -  
   86 D1:A8F1 -  -  -  -  ConvertBuffer:
   87 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
   88 D1:A931 -  -  -  -  
   89 D1:A931 -  -  -  -  ; ***************************************************************************************
   90 D1:A931 -  -  -  -  ;
   91 D1:A931 -  -  -  -  ;									Changes and Updates
   92 D1:A931 -  -  -  -  ;
   93 D1:A931 -  -  -  -  ; ***************************************************************************************
   94 D1:A931 -  -  -  -  ;
   95 D1:A931 -  -  -  -  ;		Date			Notes
   96 D1:A931 -  -  -  -  ;		==== 			=====
   97 D1:A931 -  -  -  -  ;
   98 D1:A931 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A931 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A931 -  -  -  -  ; ***************************************************************************************
    2 D1:A931 -  -  -  -  ; ***************************************************************************************
    3 D1:A931 -  -  -  -  ;
    4 D1:A931 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A931 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A931 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A931 -  -  -  -  ;		Reviewed :	No
    8 D1:A931 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A931 -  -  -  -  ;
   10 D1:A931 -  -  -  -  ; ***************************************************************************************
   11 D1:A931 -  -  -  -  ; ***************************************************************************************
   12 D1:A931 -  -  -  -  
   13 D1:A931 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A931 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A931 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A931 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A931 -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A931 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A931 C3 74 AA D1 		jp 		SyntaxError
   20 D1:A935 -  -  -  -  
   21 D1:A935 -  -  -  -  ; ***************************************************************************************
   22 D1:A935 -  -  -  -  ;
   23 D1:A935 -  -  -  -  ;									Changes and Updates
   24 D1:A935 -  -  -  -  ;
   25 D1:A935 -  -  -  -  ; ***************************************************************************************
   26 D1:A935 -  -  -  -  ;
   27 D1:A935 -  -  -  -  ;		Date			Notes
   28 D1:A935 -  -  -  -  ;		==== 			=====
   29 D1:A935 -  -  -  -  ;
   30 D1:A935 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A935 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A935 -  -  -  -  ; ***************************************************************************************
    2 D1:A935 -  -  -  -  ; ***************************************************************************************
    3 D1:A935 -  -  -  -  ;
    4 D1:A935 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A935 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A935 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A935 -  -  -  -  ;		Reviewed :	No
    8 D1:A935 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A935 -  -  -  -  ;
   10 D1:A935 -  -  -  -  ; ***************************************************************************************
   11 D1:A935 -  -  -  -  ; ***************************************************************************************
   12 D1:A935 -  -  -  -  
   13 D1:A935 -  -  -  -  ; ***************************************************************************************
   14 D1:A935 -  -  -  -  ;
   15 D1:A935 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A935 -  -  -  -  ;
   17 D1:A935 -  -  -  -  ; ***************************************************************************************
   18 D1:A935 -  -  -  -  
   19 D1:A935 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A935 C9 -  -  -  		ret
   21 D1:A936 -  -  -  -  
   22 D1:A936 -  -  -  -  ; ***************************************************************************************
   23 D1:A936 -  -  -  -  ;
   24 D1:A936 -  -  -  -  ;									Changes and Updates
   25 D1:A936 -  -  -  -  ;
   26 D1:A936 -  -  -  -  ; ***************************************************************************************
   27 D1:A936 -  -  -  -  ;
   28 D1:A936 -  -  -  -  ;		Date			Notes
   29 D1:A936 -  -  -  -  ;		==== 			=====
   30 D1:A936 -  -  -  -  ;
   31 D1:A936 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 D1:A936 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A936 -  -  -  -  ; ***************************************************************************************
    2 D1:A936 -  -  -  -  ; ***************************************************************************************
    3 D1:A936 -  -  -  -  ;
    4 D1:A936 -  -  -  -  ;		Name : 		end.asm
    5 D1:A936 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A936 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A936 -  -  -  -  ;		Reviewed :	No
    8 D1:A936 -  -  -  -  ;		Purpose :	End command
    9 D1:A936 -  -  -  -  ;
   10 D1:A936 -  -  -  -  ; ***************************************************************************************
   11 D1:A936 -  -  -  -  ; ***************************************************************************************
   12 D1:A936 -  -  -  -  
   13 D1:A936 -  -  -  -  ; ***************************************************************************************
   14 D1:A936 -  -  -  -  ;
   15 D1:A936 -  -  -  -  ;										END command
   16 D1:A936 -  -  -  -  ;
   17 D1:A936 -  -  -  -  ; ***************************************************************************************
   18 D1:A936 -  -  -  -  
   19 D1:A936 -  -  -  -  Command_END: 	;; [end]
   20 D1:A936 3E 00 C3 0A 
              AA D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A93C -  -  -  -  
   22 D1:A93C -  -  -  -  ; ***************************************************************************************
   23 D1:A93C -  -  -  -  ;
   24 D1:A93C -  -  -  -  ;									Changes and Updates
   25 D1:A93C -  -  -  -  ;
   26 D1:A93C -  -  -  -  ; ***************************************************************************************
   27 D1:A93C -  -  -  -  ;
   28 D1:A93C -  -  -  -  ;		Date			Notes
   29 D1:A93C -  -  -  -  ;		==== 			=====
   30 D1:A93C -  -  -  -  ;
   31 D1:A93C -  -  -  -  ; ***************************************************************************************
   32 D1:A93C -  -  -  -  		
Listing for file "_build.asm"
   15 D1:A93C -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A93C -  -  -  -  ; ***************************************************************************************
    2 D1:A93C -  -  -  -  ; ***************************************************************************************
    3 D1:A93C -  -  -  -  ;
    4 D1:A93C -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A93C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A93C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A93C -  -  -  -  ;		Reviewed :	None
    8 D1:A93C -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A93C -  -  -  -  ;
   10 D1:A93C -  -  -  -  ; ***************************************************************************************
   11 D1:A93C -  -  -  -  ; ***************************************************************************************
   12 D1:A93C -  -  -  -  
   13 D1:A93C -  -  -  -  ; ***************************************************************************************
   14 D1:A93C -  -  -  -  ;
   15 D1:A93C -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A93C -  -  -  -  ;
   17 D1:A93C -  -  -  -  ; ***************************************************************************************
   18 D1:A93C -  -  -  -  
   19 D1:A93C -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A93C DD 2A CD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A941 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A945 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A948 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A94A -  -  -  -  		;
   25 D1:A94A ED 7B D1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A94F C3 7E A9 D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A953 -  -  -  -  
   28 D1:A953 -  -  -  -  ; ***************************************************************************************
   29 D1:A953 -  -  -  -  ;
   30 D1:A953 -  -  -  -  ;									Changes and Updates
   31 D1:A953 -  -  -  -  ;
   32 D1:A953 -  -  -  -  ; ***************************************************************************************
   33 D1:A953 -  -  -  -  ;
   34 D1:A953 -  -  -  -  ;		Date			Notes
   35 D1:A953 -  -  -  -  ;		==== 			=====
   36 D1:A953 -  -  -  -  ;
   37 D1:A953 -  -  -  -  ; ***************************************************************************************
   38 D1:A953 -  -  -  -  		
Listing for file "_build.asm"
   16 D1:A953 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:A953 -  -  -  -  ; ***************************************************************************************
    2 D1:A953 -  -  -  -  ; ***************************************************************************************
    3 D1:A953 -  -  -  -  ;
    4 D1:A953 -  -  -  -  ;		Name : 		rem.asm
    5 D1:A953 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A953 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A953 -  -  -  -  ;		Reviewed :	No
    8 D1:A953 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:A953 -  -  -  -  ;
   10 D1:A953 -  -  -  -  ; ***************************************************************************************
   11 D1:A953 -  -  -  -  ; ***************************************************************************************
   12 D1:A953 -  -  -  -  
   13 D1:A953 -  -  -  -  ; ***************************************************************************************
   14 D1:A953 -  -  -  -  ;
   15 D1:A953 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:A953 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:A953 -  -  -  -  ;
   18 D1:A953 -  -  -  -  ; ***************************************************************************************
   19 D1:A953 -  -  -  -  
   20 D1:A953 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:A953 -  -  -  -  Command_REM2: 	;; [']
   22 D1:A953 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:A956 DD 23 -  -  		inc 	ix
   24 D1:A958 FE A0 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:A95A C8 -  -  -  		ret 	z
   26 D1:A95B FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:A95D C8 -  -  -  		ret 	z
   28 D1:A95E FE 3F -  -  		cp 		STRING_MARKER
   29 D1:A960 C2 74 AA D1 		jp 		nz,SyntaxError
   30 D1:A964 -  -  -  -  		;		
   31 D1:A964 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:A968 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:A96B 13 -  -  -  		inc 	de 
   34 D1:A96C 13 -  -  -  		inc 	de
   35 D1:A96D DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:A96F C9 -  -  -  		ret
   37 D1:A970 -  -  -  -  
   38 D1:A970 -  -  -  -  ; ***************************************************************************************
   39 D1:A970 -  -  -  -  ;
   40 D1:A970 -  -  -  -  ;									Changes and Updates
   41 D1:A970 -  -  -  -  ;
   42 D1:A970 -  -  -  -  ; ***************************************************************************************
   43 D1:A970 -  -  -  -  ;
   44 D1:A970 -  -  -  -  ;		Date			Notes
   45 D1:A970 -  -  -  -  ;		==== 			=====
   46 D1:A970 -  -  -  -  ;
   47 D1:A970 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A970 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:A970 -  -  -  -  ; ***************************************************************************************
    2 D1:A970 -  -  -  -  ; ***************************************************************************************
    3 D1:A970 -  -  -  -  ;
    4 D1:A970 -  -  -  -  ;		Name : 		run.asm
    5 D1:A970 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A970 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A970 -  -  -  -  ;		Reviewed :	No
    8 D1:A970 -  -  -  -  ;		Purpose :	Run command
    9 D1:A970 -  -  -  -  ;
   10 D1:A970 -  -  -  -  ; ***************************************************************************************
   11 D1:A970 -  -  -  -  ; ***************************************************************************************
   12 D1:A970 -  -  -  -  
   13 D1:A970 -  -  -  -  ; ***************************************************************************************
   14 D1:A970 -  -  -  -  ;
   15 D1:A970 -  -  -  -  ;										RUN command
   16 D1:A970 -  -  -  -  ;
   17 D1:A970 -  -  -  -  ; ***************************************************************************************
   18 D1:A970 -  -  -  -  
   19 D1:A970 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:A970 CD 7A AA D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:A974 -  -  -  -  
   22 D1:A974 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:A979 ED 73 D1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:A97E -  -  -  -  		;
   25 D1:A97E -  -  -  -  		; 		New line at IX.
   26 D1:A97E -  -  -  -  		;
   27 D1:A97E -  -  -  -  CRNewLine:
   28 D1:A97E DD 22 CD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   29 D1:A983 -  -  -  -  		;
   30 D1:A983 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   31 D1:A986 B7 -  -  -  		or 		a
   32 D1:A987 CA 36 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   33 D1:A98B -  -  -  -  		;
   34 D1:A98B DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   35 D1:A98D DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   36 D1:A98F DD 23 -  -  		inc 	ix
   37 D1:A991 -  -  -  -  		;
   38 D1:A991 -  -  -  -  		; 		New command at IX
   39 D1:A991 -  -  -  -  		;
   40 D1:A991 -  -  -  -  _CRNewCommand:	
   41 D1:A991 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   42 D1:A994 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   43 D1:A995 F2 CC A9 D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   44 D1:A999 -  -  -  -  		;
   45 D1:A999 FE 9E -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   46 D1:A99B 30 06 -  -  		jr  	nc,_CRDoCommand
   47 D1:A99D FE 83 -  -  		cp 		KWC_FIRST_BINARY
   48 D1:A99F D2 C0 A9 D1 		jp 		nc,_CRAlternateLets
   49 D1:A9A3 -  -  -  -  		;
   50 D1:A9A3 -  -  -  -  _CRDoCommand:		
   51 D1:A9A3 E6 7F 21 00 
              00 00 6F 29 
              29 11 F6 AC 
              D1 19 ED 17 
              ED 53 D6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   52 D1:A9B8 DD 23 -  -  		inc 	ix 							; skip over token.
   53 D1:A9BA CD D5 A8 D1 		call 	JumpCode 					; call the routine.
   54 D1:A9BE 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   55 D1:A9C0 -  -  -  -  		;
   56 D1:A9C0 -  -  -  -  		; 		Do CALL (HL)
   57 D1:A9C0 -  -  -  -  		;
   58 D1:A9C0 -  -  -  -  		;
   59 D1:A9C0 -  -  -  -  		;		Check for alternate lets !x ?x which are all binary/unary operators
   60 D1:A9C0 -  -  -  -  		;		
   61 D1:A9C0 -  -  -  -  _CRAlternateLets:		
   62 D1:A9C0 FE 83 -  -  		cp 		KWD_PLING
   63 D1:A9C2 28 0E -  -  		jr 		z,_CRAssignmentLet
   64 D1:A9C4 FE 84 -  -  		cp 		KWD_QMARK
   65 D1:A9C6 28 0A -  -  		jr 		z,_CRAssignmentLet
   66 D1:A9C8 C3 74 AA D1 		jp 		SyntaxError
   67 D1:A9CC -  -  -  -  		;
   68 D1:A9CC -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   69 D1:A9CC -  -  -  -  		;
   70 D1:A9CC -  -  -  -  _CRAssignmentHandler:		
   71 D1:A9CC FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   72 D1:A9CE D2 74 AA D1 		jp 		nc,SyntaxError
   73 D1:A9D2 -  -  -  -  _CRAssignmentLet:		
   74 D1:A9D2 3E 0C C3 0A 
              AA D1 -  -  		ERR_TODO
   75 D1:A9D8 -  -  -  -  		;call	Command_LET
   76 D1:A9D8 C3 91 A9 D1 		jp 		_CRNewCommand
   77 D1:A9DC -  -  -  -  
   78 D1:A9DC -  -  -  -  ; ***************************************************************************************
   79 D1:A9DC -  -  -  -  ;
   80 D1:A9DC -  -  -  -  ;									Changes and Updates
   81 D1:A9DC -  -  -  -  ;
   82 D1:A9DC -  -  -  -  ; ***************************************************************************************
   83 D1:A9DC -  -  -  -  ;
   84 D1:A9DC -  -  -  -  ;		Date			Notes
   85 D1:A9DC -  -  -  -  ;		==== 			=====
   86 D1:A9DC -  -  -  -  ;
   87 D1:A9DC -  -  -  -  ; ***************************************************************************************
   88 D1:A9DC -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A9DC -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:A9DC -  -  -  -  ; ***************************************************************************************
    2 D1:A9DC -  -  -  -  ; ***************************************************************************************
    3 D1:A9DC -  -  -  -  ;
    4 D1:A9DC -  -  -  -  ;		Name : 		stop.asm
    5 D1:A9DC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9DC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9DC -  -  -  -  ;		Reviewed :	No
    8 D1:A9DC -  -  -  -  ;		Purpose :	Stop command
    9 D1:A9DC -  -  -  -  ;
   10 D1:A9DC -  -  -  -  ; ***************************************************************************************
   11 D1:A9DC -  -  -  -  ; ***************************************************************************************
   12 D1:A9DC -  -  -  -  
   13 D1:A9DC -  -  -  -  ; ***************************************************************************************
   14 D1:A9DC -  -  -  -  ;
   15 D1:A9DC -  -  -  -  ;										STOP command
   16 D1:A9DC -  -  -  -  ;
   17 D1:A9DC -  -  -  -  ; ***************************************************************************************
   18 D1:A9DC -  -  -  -  
   19 D1:A9DC -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:A9DC 3E 0A C3 0A 
              AA D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:A9E2 -  -  -  -  
   22 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   23 D1:A9E2 -  -  -  -  ;
   24 D1:A9E2 -  -  -  -  ;									Changes and Updates
   25 D1:A9E2 -  -  -  -  ;
   26 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   27 D1:A9E2 -  -  -  -  ;
   28 D1:A9E2 -  -  -  -  ;		Date			Notes
   29 D1:A9E2 -  -  -  -  ;		==== 			=====
   30 D1:A9E2 -  -  -  -  ;
   31 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   32 D1:A9E2 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:A9E2 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:A9E2 -  -  -  -  ; ***************************************************************************************
    2 D1:A9E2 -  -  -  -  ; ***************************************************************************************
    3 D1:A9E2 -  -  -  -  ;
    4 D1:A9E2 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:A9E2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9E2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9E2 -  -  -  -  ;		Reviewed :	No
    8 D1:A9E2 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:A9E2 -  -  -  -  ;
   10 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   11 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   12 D1:A9E2 -  -  -  -  
   13 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   14 D1:A9E2 -  -  -  -  ;
   15 D1:A9E2 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:A9E2 -  -  -  -  ;
   17 D1:A9E2 -  -  -  -  ; ***************************************************************************************
   18 D1:A9E2 -  -  -  -  
   19 D1:A9E2 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:A9E2             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:A9E2             		inc 	ix
   22 D1:A9E2             		cp 		ch 							; exit if matches
   23 D1:A9E2             		ret 	z
   24 D1:A9E2             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:A9E2             		jp 		ErrorHandler
   26 D1:A9E2             #endmacro
   27 D1:A9E2 -  -  -  -  
   28 D1:A9E2 -  -  -  -  CheckRightBracket:
   29 D1:A9E2 DD 7E 00 DD 
              23 FE 9E C8 
              3E 08 C3 0A 
              AA D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:A9F0 -  -  -  -  
   31 D1:A9F0 -  -  -  -  CheckComma:
   32 D1:A9F0 DD 7E 00 DD 
              23 FE 9F C8 
              3E 07 C3 0A 
              AA D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   33 D1:A9FE -  -  -  -  
   34 D1:A9FE -  -  -  -  ; ***************************************************************************************
   35 D1:A9FE -  -  -  -  ;
   36 D1:A9FE -  -  -  -  ; 							Check A, gives Syntax Error
   37 D1:A9FE -  -  -  -  ;
   38 D1:A9FE -  -  -  -  ; ***************************************************************************************
   39 D1:A9FE -  -  -  -  
   40 D1:A9FE -  -  -  -  CheckNextA:
   41 D1:A9FE DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   42 D1:AA01 DD 23 -  -  		inc 	ix 							; skip character
   43 D1:AA03 C8 -  -  -  		ret 	z 							; yes, okay
   44 D1:AA04 3E 0B C3 0A 
              AA D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   45 D1:AA0A -  -  -  -  		
   46 D1:AA0A -  -  -  -  ; ***************************************************************************************
   47 D1:AA0A -  -  -  -  ;
   48 D1:AA0A -  -  -  -  ;									Changes and Updates
   49 D1:AA0A -  -  -  -  ;
   50 D1:AA0A -  -  -  -  ; ***************************************************************************************
   51 D1:AA0A -  -  -  -  ;
   52 D1:AA0A -  -  -  -  ;		Date			Notes
   53 D1:AA0A -  -  -  -  ;		==== 			=====
   54 D1:AA0A -  -  -  -  ;
   55 D1:AA0A -  -  -  -  ; ***************************************************************************************
   56 D1:AA0A -  -  -  -  		
Listing for file "_build.asm"
   20 D1:AA0A -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AA0A -  -  -  -  ; ***************************************************************************************
    2 D1:AA0A -  -  -  -  ; ***************************************************************************************
    3 D1:AA0A -  -  -  -  ;
    4 D1:AA0A -  -  -  -  ;		Name : 		errors.asm
    5 D1:AA0A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA0A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA0A -  -  -  -  ;		Reviewed :	No
    8 D1:AA0A -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AA0A -  -  -  -  ;
   10 D1:AA0A -  -  -  -  ; ***************************************************************************************
   11 D1:AA0A -  -  -  -  ; ***************************************************************************************
   12 D1:AA0A -  -  -  -  
   13 D1:AA0A -  -  -  -  ; ***************************************************************************************
   14 D1:AA0A -  -  -  -  ;
   15 D1:AA0A -  -  -  -  ;								Error handler, message A 
   16 D1:AA0A -  -  -  -  ;
   17 D1:AA0A -  -  -  -  ; ***************************************************************************************
   18 D1:AA0A -  -  -  -  
   19 D1:AA0A -  -  -  -  ErrorHandler:
   20 D1:AA0A F5 -  -  -  		push 	af 						; save error ID
   21 D1:AA0B -  -  -  -  
   22 D1:AA0B 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AA0F 6F -  -  -  		ld 		l,a
   24 D1:AA10 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AA11 29 -  -  -  		add 	hl,hl 		
   26 D1:AA12 11 F0 AB D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AA16 19 -  -  -  		add 	hl,de
   28 D1:AA17 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AA19 CD CC AA D1 		call 	PrintStringAtHL
   30 D1:AA1D -  -  -  -  		;
   31 D1:AA1D F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AA1E B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AA1F 28 2F -  -  		jr 		z,_EHExit
   34 D1:AA21 -  -  -  -  		;
   35 D1:AA21 DD 2A CD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AA26 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AA29 B7 -  -  -  		or 		a
   38 D1:AA2A 28 24 -  -  		jr 		z,_EHExit
   39 D1:AA2C -  -  -  -  
   40 D1:AA2C 21 58 AA D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AA30 CD CC AA D1 		call 	PrintStringAtHL 
   42 D1:AA34 -  -  -  -  		
   43 D1:AA34 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AA35 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AA39 D9 -  -  -  		exx 
   46 D1:AA3A DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AA3D DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AA40 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AA42 01 F1 A8 D1 		ld 		bc,ConvertBuffer
   50 D1:AA46 CD B8 AF D1 		call 	Int32ToString
   51 D1:AA4A C5 -  -  -  		push 	bc
   52 D1:AA4B E1 -  -  -  		pop 	hl
   53 D1:AA4C CD CC AA D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AA50 -  -  -  -  _EHExit:		
   55 D1:AA50 CD 52 B0 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AA54 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AA58 -  -  -  -  
   58 D1:AA58 -  -  -  -  _EHAtText:
   59 D1:AA58 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AA62 -  -  -  -  
   61 D1:AA62 -  -  -  -  NotImplemented:
   62 D1:AA62 3E 04 C3 0A 
              AA D1 -  -  		ERR_DISABLED
   63 D1:AA68 -  -  -  -  TypeMismatch:
   64 D1:AA68 3E 02 C3 0A 
              AA D1 -  -  		ERR_BADTYPE
   65 D1:AA6E -  -  -  -  BadValue:
   66 D1:AA6E 3E 03 C3 0A 
              AA D1 -  -  		ERR_BADVALUE
   67 D1:AA74 -  -  -  -  SyntaxError:
   68 D1:AA74 3E 0B C3 0A 
              AA D1 -  -  		ERR_SYNTAX
   69 D1:AA7A -  -  -  -  						
   70 D1:AA7A -  -  -  -  ; ***************************************************************************************
   71 D1:AA7A -  -  -  -  ;
   72 D1:AA7A -  -  -  -  ;									Changes and Updates
   73 D1:AA7A -  -  -  -  ;
   74 D1:AA7A -  -  -  -  ; ***************************************************************************************
   75 D1:AA7A -  -  -  -  ;
   76 D1:AA7A -  -  -  -  ;		Date			Notes
   77 D1:AA7A -  -  -  -  ;		==== 			=====
   78 D1:AA7A -  -  -  -  ;
   79 D1:AA7A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AA7A -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:AA7A -  -  -  -  ; ***************************************************************************************
    2 D1:AA7A -  -  -  -  ; ***************************************************************************************
    3 D1:AA7A -  -  -  -  ;
    4 D1:AA7A -  -  -  -  ;		Name : 		clear.asm
    5 D1:AA7A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA7A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA7A -  -  -  -  ;		Reviewed :	No
    8 D1:AA7A -  -  -  -  ;		Purpose :	Clear command.
    9 D1:AA7A -  -  -  -  ;
   10 D1:AA7A -  -  -  -  ; ***************************************************************************************
   11 D1:AA7A -  -  -  -  ; ***************************************************************************************
   12 D1:AA7A -  -  -  -  
   13 D1:AA7A -  -  -  -  ; ***************************************************************************************
   14 D1:AA7A -  -  -  -  ;
   15 D1:AA7A -  -  -  -  ;										CLEAR command
   16 D1:AA7A -  -  -  -  ;
   17 D1:AA7A -  -  -  -  ; ***************************************************************************************
   18 D1:AA7A -  -  -  -  
   19 D1:AA7A -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:AA7A -  -  -  -  		;
   21 D1:AA7A -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:AA7A -  -  -  -  		;
   23 D1:AA7A 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:AA7E -  -  -  -  _CCFindLow:
   25 D1:AA7E 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:AA82 5E -  -  -  		ld 		e,(hl)		
   27 D1:AA83 19 -  -  -  		add 	hl,de
   28 D1:AA84 7B -  -  -  		ld 		a,e
   29 D1:AA85 B7 -  -  -  		or 		a
   30 D1:AA86 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:AA88 23 -  -  -  		inc 	hl 							; one past the last $00, one for luck
   32 D1:AA89 23 -  -  -  		inc 	hl
   33 D1:AA8A 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   34 D1:AA8E -  -  -  -  		;
   35 D1:AA8E -  -  -  -  		; 	 		Reset the language stack
   36 D1:AA8E -  -  -  -  		;
   37 D1:AA8E 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   38 D1:AA92 -  -  -  -  		;
   39 D1:AA92 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   40 D1:AA94 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:AA98 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:AA9C 19 -  -  -  		add 	hl,de
   43 D1:AA9D 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:AA9F 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:AAA3 -  -  -  -  		;
   46 D1:AAA3 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:AAA7 19 -  -  -  		add 	hl,de
   48 D1:AAA8 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:AAAC -  -  -  -  		;
   50 D1:AAAC -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   51 D1:AAAC -  -  -  -  		;
   52 D1:AAAC -  -  -  -  
   53 D1:AAAC -  -  -  -  		;
   54 D1:AAAC -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   55 D1:AAAC -  -  -  -  		;
   56 D1:AAAC -  -  -  -  
   57 D1:AAAC C9 -  -  -  		ret
   58 D1:AAAD -  -  -  -  
   59 D1:AAAD -  -  -  -  ; ***************************************************************************************
   60 D1:AAAD -  -  -  -  ;
   61 D1:AAAD -  -  -  -  ;									Changes and Updates
   62 D1:AAAD -  -  -  -  ;
   63 D1:AAAD -  -  -  -  ; ***************************************************************************************
   64 D1:AAAD -  -  -  -  ;
   65 D1:AAAD -  -  -  -  ;		Date			Notes
   66 D1:AAAD -  -  -  -  ;		==== 			=====
   67 D1:AAAD -  -  -  -  ;
   68 D1:AAAD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AAAD -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:AAAD -  -  -  -  ; ***************************************************************************************
    2 D1:AAAD -  -  -  -  ; ***************************************************************************************
    3 D1:AAAD -  -  -  -  ;
    4 D1:AAAD -  -  -  -  ;		Name : 		instance.asm
    5 D1:AAAD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAAD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAAD -  -  -  -  ;		Reviewed :	No
    8 D1:AAAD -  -  -  -  ;		Purpose :	Instance handling
    9 D1:AAAD -  -  -  -  ;
   10 D1:AAAD -  -  -  -  ; ***************************************************************************************
   11 D1:AAAD -  -  -  -  ; ***************************************************************************************
   12 D1:AAAD -  -  -  -  
   13 D1:AAAD -  -  -  -  ; ***************************************************************************************
   14 D1:AAAD -  -  -  -  ;
   15 D1:AAAD -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:AAAD -  -  -  -  ;
   17 D1:AAAD -  -  -  -  ; ***************************************************************************************
   18 D1:AAAD -  -  -  -  
   19 D1:AAAD -  -  -  -  SetCurrentInstance:
   20 D1:AAAD ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:AAB2 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:AAB6 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:AABB -  -  -  -  
   24 D1:AABB C9 -  -  -  		ret
   25 D1:AABC -  -  -  -  
   26 D1:AABC -  -  -  -  
   27 D1:AABC -  -  -  -  ; ***************************************************************************************
   28 D1:AABC -  -  -  -  ;
   29 D1:AABC -  -  -  -  ;									Changes and Updates
   30 D1:AABC -  -  -  -  ;
   31 D1:AABC -  -  -  -  ; ***************************************************************************************
   32 D1:AABC -  -  -  -  ;
   33 D1:AABC -  -  -  -  ;		Date			Notes
   34 D1:AABC -  -  -  -  ;		==== 			=====
   35 D1:AABC -  -  -  -  ;
   36 D1:AABC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AABC -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:AABC -  -  -  -  ; ***************************************************************************************
    2 D1:AABC -  -  -  -  ; ***************************************************************************************
    3 D1:AABC -  -  -  -  ;
    4 D1:AABC -  -  -  -  ;		Name : 		new.asm
    5 D1:AABC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AABC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AABC -  -  -  -  ;		Reviewed :	No
    8 D1:AABC -  -  -  -  ;		Purpose :	New command.
    9 D1:AABC -  -  -  -  ;
   10 D1:AABC -  -  -  -  ; ***************************************************************************************
   11 D1:AABC -  -  -  -  ; ***************************************************************************************
   12 D1:AABC -  -  -  -  
   13 D1:AABC -  -  -  -  ; ***************************************************************************************
   14 D1:AABC -  -  -  -  ;
   15 D1:AABC -  -  -  -  ;										NEW command
   16 D1:AABC -  -  -  -  ;
   17 D1:AABC -  -  -  -  ; ***************************************************************************************
   18 D1:AABC -  -  -  -  
   19 D1:AABC -  -  -  -  Command_NEW: 	;; [new]
   20 D1:AABC 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:AAC0 36 00 -  -  		ld 		(hl),0
   22 D1:AAC2 CD 7A AA D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:AAC6 3E 00 C3 0A 
              AA D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:AACC -  -  -  -  
   25 D1:AACC -  -  -  -  ; ***************************************************************************************
   26 D1:AACC -  -  -  -  ;
   27 D1:AACC -  -  -  -  ;									Changes and Updates
   28 D1:AACC -  -  -  -  ;
   29 D1:AACC -  -  -  -  ; ***************************************************************************************
   30 D1:AACC -  -  -  -  ;
   31 D1:AACC -  -  -  -  ;		Date			Notes
   32 D1:AACC -  -  -  -  ;		==== 			=====
   33 D1:AACC -  -  -  -  ;
   34 D1:AACC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   24 D1:AACC -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:AACC -  -  -  -  ; ***************************************************************************************
    2 D1:AACC -  -  -  -  ; ***************************************************************************************
    3 D1:AACC -  -  -  -  ;
    4 D1:AACC -  -  -  -  ;		Name : 		utility.asm
    5 D1:AACC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AACC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AACC -  -  -  -  ;		Reviewed :	No
    8 D1:AACC -  -  -  -  ;		Purpose :	Utility routines
    9 D1:AACC -  -  -  -  ;
   10 D1:AACC -  -  -  -  ; ***************************************************************************************
   11 D1:AACC -  -  -  -  ; ***************************************************************************************
   12 D1:AACC -  -  -  -  
   13 D1:AACC -  -  -  -  ; ***************************************************************************************
   14 D1:AACC -  -  -  -  ;
   15 D1:AACC -  -  -  -  ;							Print ASCIIZ string at HL
   16 D1:AACC -  -  -  -  ;
   17 D1:AACC -  -  -  -  ; ***************************************************************************************
   18 D1:AACC -  -  -  -  
   19 D1:AACC -  -  -  -  PrintStringAtHL:
   20 D1:AACC 7E -  -  -  		ld 		a,(hl)
   21 D1:AACD B7 -  -  -  		or 		a
   22 D1:AACE C8 -  -  -  		ret 	z
   23 D1:AACF CD 2A B0 D1 		call 	SYSPrintChar
   24 D1:AAD3 23 -  -  -  		inc 	hl
   25 D1:AAD4 18 F6 -  -  		jr 		PrintStringAtHL
   26 D1:AAD6 -  -  -  -  
   27 D1:AAD6 -  -  -  -  ; ***************************************************************************************
   28 D1:AAD6 -  -  -  -  ;
   29 D1:AAD6 -  -  -  -  ;									Changes and Updates
   30 D1:AAD6 -  -  -  -  ;
   31 D1:AAD6 -  -  -  -  ; ***************************************************************************************
   32 D1:AAD6 -  -  -  -  ;
   33 D1:AAD6 -  -  -  -  ;		Date			Notes
   34 D1:AAD6 -  -  -  -  ;		==== 			=====
   35 D1:AAD6 -  -  -  -  ;
   36 D1:AAD6 -  -  -  -  ; ***************************************************************************************
   37 D1:AAD6 -  -  -  -  		
Listing for file "_build.asm"
   25 D1:AAD6 -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:AAD6 -  -  -  -  ;
    2 D1:AAD6 -  -  -  -  ;	This file is automatically generated.
    3 D1:AAD6 -  -  -  -  ;
    4 D1:AAD6 -  -  -  -  ;
    5 D1:AAD6 -  -  -  -  ;	Keywords for set 0
    6 D1:AAD6 -  -  -  -  ;
    7 D1:AAD6 -  -  -  -  KeywordsSet0:
    8 D1:AAD6 01 20 -  -  	.db	1," "              ; $0080
    9 D1:AAD8 01 20 -  -  	.db	1," "              ; $0081
   10 D1:AADA 01 20 -  -  	.db	1," "              ; $0082
   11 D1:AADC 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:AADE 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:AAE0 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:AAE2 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:AAE4 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:AAE8 01 2B -  -  	.db	1,"+"              ; $0088
   17 D1:AAEA 01 2D -  -  	.db	1,"-"              ; $0089
   18 D1:AAEC 02 3E 3D -  	.db	2,">="             ; $008a
   19 D1:AAEF 02 3C 3D -  	.db	2,"<="             ; $008b
   20 D1:AAF2 01 3E -  -  	.db	1,">"              ; $008c
   21 D1:AAF4 01 3C -  -  	.db	1,"<"              ; $008d
   22 D1:AAF6 01 3D -  -  	.db	1,"="              ; $008e
   23 D1:AAF8 02 3C 3E -  	.db	2,"<>"             ; $008f
   24 D1:AAFB 03 41 4E 44 	.db	3,"AND"            ; $0090
   25 D1:AAFF 02 4F 52 -  	.db	2,"OR"             ; $0091
   26 D1:AB02 03 58 4F 52 	.db	3,"XOR"            ; $0092
   27 D1:AB06 01 26 -  -  	.db	1,"&"              ; $0093
   28 D1:AB08 01 28 -  -  	.db	1,"("              ; $0094
   29 D1:AB0A 01 24 -  -  	.db	1,"$"              ; $0095
   30 D1:AB0C 03 52 4E 44 	.db	3,"RND"            ; $0096
   31 D1:AB10 03 4C 45 4E 	.db	3,"LEN"            ; $0097
   32 D1:AB14 03 41 42 53 	.db	3,"ABS"            ; $0098
   33 D1:AB18 03 53 47 4E 	.db	3,"SGN"            ; $0099
   34 D1:AB1C 03 49 4E 54 	.db	3,"INT"            ; $009a
   35 D1:AB20 04 53 54 52 
              24 -  -  -  	.db	4,"STR$"           ; $009b
   36 D1:AB25 03 41 53 43 	.db	3,"ASC"            ; $009c
   37 D1:AB29 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009d
   38 D1:AB2E 01 29 -  -  	.db	1,")"              ; $009e
   39 D1:AB30 01 2C -  -  	.db	1,","              ; $009f
   40 D1:AB32 01 3A -  -  	.db	1,":"              ; $00a0
   41 D1:AB34 01 3B -  -  	.db	1,";"              ; $00a1
   42 D1:AB36 01 27 -  -  	.db	1,"'"              ; $00a2
   43 D1:AB38 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00a3
   44 D1:AB3F 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00a4
   45 D1:AB45 02 49 46 -  	.db	2,"IF"             ; $00a5
   46 D1:AB48 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00a6
   47 D1:AB4D 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00a7
   48 D1:AB52 03 46 4F 52 	.db	3,"FOR"            ; $00a8
   49 D1:AB56 02 54 4F -  	.db	2,"TO"             ; $00a9
   50 D1:AB59 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00aa
   51 D1:AB5E 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00ab
   52 D1:AB63 03 44 45 46 	.db	3,"DEF"            ; $00ac
   53 D1:AB67 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00ad
   54 D1:AB6C 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00ae
   55 D1:AB74 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00af
   56 D1:AB7A 03 44 49 4D 	.db	3,"DIM"            ; $00b0
   57 D1:AB7E 03 52 45 4D 	.db	3,"REM"            ; $00b1
   58 D1:AB82 03 4C 45 54 	.db	3,"LET"            ; $00b2
   59 D1:AB86 03 56 44 55 	.db	3,"VDU"            ; $00b3
   60 D1:AB8A 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00b4
   61 D1:AB90 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00b5
   62 D1:AB95 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00b6
   63 D1:AB9A 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00b7
   64 D1:AB9F 03 4E 45 57 	.db	3,"NEW"            ; $00b8
   65 D1:ABA3 03 52 55 4E 	.db	3,"RUN"            ; $00b9
   66 D1:ABA7 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00ba
   67 D1:ABAC 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00bb
   68 D1:ABB1 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00bc
   69 D1:ABB9 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00bd
   70 D1:ABC0 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00be
   71 D1:ABC6 03 45 4E 44 	.db	3,"END"            ; $00bf
   72 D1:ABCA 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c0
   73 D1:ABCF 00 -  -  -  	.db	0
   74 D1:ABD0 -  -  -  -  ;
   75 D1:ABD0 -  -  -  -  ;	Keywords for set 1
   76 D1:ABD0 -  -  -  -  ;
   77 D1:ABD0 -  -  -  -  KeywordsSet1:
   78 D1:ABD0 00 -  -  -  	.db	0
   79 D1:ABD1 -  -  -  -  ;
   80 D1:ABD1 -  -  -  -  ;	Keywords for set 2
   81 D1:ABD1 -  -  -  -  ;
   82 D1:ABD1 -  -  -  -  KeywordsSet2:
   83 D1:ABD1 00 -  -  -  	.db	0
Listing for file "_build.asm"
   26 D1:ABD2 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:ABD2 -  -  -  -  ;
    2 D1:ABD2 -  -  -  -  ;	This file is automatically generated.
    3 D1:ABD2 -  -  -  -  ;
    4 D1:ABD2 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 D1:ABE0 -  -  -  -  PrecedenceTable:
    6 D1:ABE0 06 -  -  -  	.db	6	; $0083 !
    7 D1:ABE1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:ABE2 05 -  -  -  	.db	5	; $0085 *
    9 D1:ABE3 05 -  -  -  	.db	5	; $0086 /
   10 D1:ABE4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:ABE5 04 -  -  -  	.db	4	; $0088 +
   12 D1:ABE6 04 -  -  -  	.db	4	; $0089 -
   13 D1:ABE7 03 -  -  -  	.db	3	; $008a >=
   14 D1:ABE8 03 -  -  -  	.db	3	; $008b <=
   15 D1:ABE9 03 -  -  -  	.db	3	; $008c >
   16 D1:ABEA 03 -  -  -  	.db	3	; $008d <
   17 D1:ABEB 03 -  -  -  	.db	3	; $008e =
   18 D1:ABEC 03 -  -  -  	.db	3	; $008f <>
   19 D1:ABED 02 -  -  -  	.db	2	; $0090 and
   20 D1:ABEE 01 -  -  -  	.db	1	; $0091 or
   21 D1:ABEF 01 -  -  -  	.db	1	; $0092 xor
   22 D1:ABF0 -  -  -  -  
Listing for file "_build.asm"
   27 D1:ABF0 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:ABF0 -  -  -  -  ;
    2 D1:ABF0 -  -  -  -  ;	This is automatically generated.
    3 D1:ABF0 -  -  -  -  ;
    4 D1:ABF0 -  -  -  -  ErrorIDTable:
    5 D1:ABF0 28 AC D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:ABF4 2E AC D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:ABF8 3F AC D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:ABFC 4D AC D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:AC00 57 AC D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:AC04 71 AC D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:AC08 82 AC D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:AC0C 90 AC D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:AC10 9E AC D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   14 D1:AC14 B4 AC D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   15 D1:AC18 C2 AC D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   16 D1:AC1C C7 AC D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   17 D1:AC20 D4 AC D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   18 D1:AC24 E5 AC D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   19 D1:AC28 -  -  -  -  
   20 D1:AC28 -  -  -  -  ErrText_warmstart:
   21 D1:AC28 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   22 D1:AC2E -  -  -  -  ErrText_assert:
   23 D1:AC2E 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   24 D1:AC3F -  -  -  -  ErrText_badtype:
   25 D1:AC3F 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   26 D1:AC4D -  -  -  -  ErrText_badvalue:
   27 D1:AC4D 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   28 D1:AC57 -  -  -  -  ErrText_disabled:
   29 D1:AC57 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   30 D1:AC71 -  -  -  -  ErrText_divzero:
   31 D1:AC71 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   32 D1:AC82 -  -  -  -  ErrText_memory:
   33 D1:AC82 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   34 D1:AC90 -  -  -  -  ErrText_nocomma:
   35 D1:AC90 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   36 D1:AC9E -  -  -  -  ErrText_norbracket:
   37 D1:AC9E 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   38 D1:ACB4 -  -  -  -  ErrText_notref:
   39 D1:ACB4 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   40 D1:ACC2 -  -  -  -  ErrText_stop:
   41 D1:ACC2 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   42 D1:ACC7 -  -  -  -  ErrText_syntax:
   43 D1:ACC7 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   44 D1:ACD4 -  -  -  -  ErrText_todo:
   45 D1:ACD4 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   46 D1:ACE5 -  -  -  -  ErrText_unknownvar:
   47 D1:ACE5 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   28 D1:ACF6 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:ACF6 -  -  -  -  ;
    2 D1:ACF6 -  -  -  -  ;	Vectors for set 0
    3 D1:ACF6 -  -  -  -  ;
    4 D1:ACF6 -  -  -  -  VectorsSet0:
    5 D1:ACF6 3C A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:ACFA A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:ACFE A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:AD02 A5 A8 D1 00 	addr(Unimplemented)              ; $0083 !
    9 D1:AD06 A5 A8 D1 00 	addr(Unimplemented)              ; $0084 ?
   10 D1:AD0A A5 A8 D1 00 	addr(Unimplemented)              ; $0085 *
   11 D1:AD0E A5 A8 D1 00 	addr(Unimplemented)              ; $0086 /
   12 D1:AD12 A5 A8 D1 00 	addr(Unimplemented)              ; $0087 mod
   13 D1:AD16 A5 A8 D1 00 	addr(Unimplemented)              ; $0088 +
   14 D1:AD1A A5 A8 D1 00 	addr(Unimplemented)              ; $0089 -
   15 D1:AD1E A5 A8 D1 00 	addr(Unimplemented)              ; $008a >=
   16 D1:AD22 A5 A8 D1 00 	addr(Unimplemented)              ; $008b <=
   17 D1:AD26 A5 A8 D1 00 	addr(Unimplemented)              ; $008c >
   18 D1:AD2A A5 A8 D1 00 	addr(Unimplemented)              ; $008d <
   19 D1:AD2E A5 A8 D1 00 	addr(Unimplemented)              ; $008e =
   20 D1:AD32 A5 A8 D1 00 	addr(Unimplemented)              ; $008f <>
   21 D1:AD36 A5 A8 D1 00 	addr(Unimplemented)              ; $0090 and
   22 D1:AD3A A5 A8 D1 00 	addr(Unimplemented)              ; $0091 or
   23 D1:AD3E A5 A8 D1 00 	addr(Unimplemented)              ; $0092 xor
   24 D1:AD42 A5 A8 D1 00 	addr(Unimplemented)              ; $0093 &
   25 D1:AD46 A5 A8 D1 00 	addr(Unimplemented)              ; $0094 (
   26 D1:AD4A A5 A8 D1 00 	addr(Unimplemented)              ; $0095 $
   27 D1:AD4E A5 A8 D1 00 	addr(Unimplemented)              ; $0096 rnd
   28 D1:AD52 A5 A8 D1 00 	addr(Unimplemented)              ; $0097 len
   29 D1:AD56 A5 A8 D1 00 	addr(Unimplemented)              ; $0098 abs
   30 D1:AD5A A5 A8 D1 00 	addr(Unimplemented)              ; $0099 sgn
   31 D1:AD5E A5 A8 D1 00 	addr(Unimplemented)              ; $009a int
   32 D1:AD62 A5 A8 D1 00 	addr(Unimplemented)              ; $009b str$
   33 D1:AD66 A5 A8 D1 00 	addr(Unimplemented)              ; $009c asc
   34 D1:AD6A A5 A8 D1 00 	addr(Unimplemented)              ; $009d page
   35 D1:AD6E 31 A9 D1 00 	addr(BadCmd_RBracket)            ; $009e )
   36 D1:AD72 31 A9 D1 00 	addr(BadCmd_Comma)               ; $009f ,
   37 D1:AD76 35 A9 D1 00 	addr(Command_Colon)              ; $00a0 :
   38 D1:AD7A 31 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a1 ;
   39 D1:AD7E 53 A9 D1 00 	addr(Command_REM2)               ; $00a2 '
   40 D1:AD82 A5 A8 D1 00 	addr(Unimplemented)              ; $00a3 repeat
   41 D1:AD86 A5 A8 D1 00 	addr(Unimplemented)              ; $00a4 until
   42 D1:AD8A A5 A8 D1 00 	addr(Unimplemented)              ; $00a5 if
   43 D1:AD8E 31 A9 D1 00 	addr(BadCmd_Then)                ; $00a6 then
   44 D1:AD92 A5 A8 D1 00 	addr(Unimplemented)              ; $00a7 else
   45 D1:AD96 A5 A8 D1 00 	addr(Unimplemented)              ; $00a8 for
   46 D1:AD9A 31 A9 D1 00 	addr(BadCmd_To)                  ; $00a9 to
   47 D1:AD9E A5 A8 D1 00 	addr(Unimplemented)              ; $00aa step
   48 D1:ADA2 A5 A8 D1 00 	addr(Unimplemented)              ; $00ab next
   49 D1:ADA6 31 A9 D1 00 	addr(BadCmd_Defproc)             ; $00ac def
   50 D1:ADAA A5 A8 D1 00 	addr(Unimplemented)              ; $00ad proc
   51 D1:ADAE A5 A8 D1 00 	addr(Unimplemented)              ; $00ae endproc
   52 D1:ADB2 A5 A8 D1 00 	addr(Unimplemented)              ; $00af local
   53 D1:ADB6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b0 dim
   54 D1:ADBA 53 A9 D1 00 	addr(Command_REM)                ; $00b1 rem
   55 D1:ADBE A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 let
   56 D1:ADC2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 vdu
   57 D1:ADC6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 print
   58 D1:ADCA A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 load
   59 D1:ADCE A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 save
   60 D1:ADD2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 list
   61 D1:ADD6 BC AA D1 00 	addr(Command_NEW)                ; $00b8 new
   62 D1:ADDA 70 A9 D1 00 	addr(Command_RUN)                ; $00b9 run
   63 D1:ADDE A5 A8 D1 00 	addr(Unimplemented)              ; $00ba read
   64 D1:ADE2 A5 A8 D1 00 	addr(Unimplemented)              ; $00bb data
   65 D1:ADE6 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc restore
   66 D1:ADEA A5 A8 D1 00 	addr(Unimplemented)              ; $00bd assert
   67 D1:ADEE 7A AA D1 00 	addr(Command_CLEAR)              ; $00be clear
   68 D1:ADF2 36 A9 D1 00 	addr(Command_END)                ; $00bf end
   69 D1:ADF6 DC A9 D1 00 	addr(Command_STOP)               ; $00c0 stop
   70 D1:ADFA -  -  -  -  ;
   71 D1:ADFA -  -  -  -  ;	Vectors for set 1
   72 D1:ADFA -  -  -  -  ;
   73 D1:ADFA -  -  -  -  VectorsSet1:
   74 D1:ADFA -  -  -  -  ;
   75 D1:ADFA -  -  -  -  ;	Vectors for set 2
   76 D1:ADFA -  -  -  -  ;
   77 D1:ADFA -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   29 D1:ADFA -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:ADFA -  -  -  -  ; ***************************************************************************************
    2 D1:ADFA -  -  -  -  ; ***************************************************************************************
    3 D1:ADFA -  -  -  -  ;
    4 D1:ADFA -  -  -  -  ;		Name : 		idivide.asm
    5 D1:ADFA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADFA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADFA -  -  -  -  ;		Reviewed :	No
    8 D1:ADFA -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:ADFA -  -  -  -  ;
   10 D1:ADFA -  -  -  -  ; ***************************************************************************************
   11 D1:ADFA -  -  -  -  ; ***************************************************************************************
   12 D1:ADFA -  -  -  -  
   13 D1:ADFA -  -  -  -  ; ***************************************************************************************
   14 D1:ADFA -  -  -  -  ;
   15 D1:ADFA -  -  -  -  ;								Unsigned integer divide
   16 D1:ADFA -  -  -  -  ;
   17 D1:ADFA -  -  -  -  ; ***************************************************************************************
   18 D1:ADFA -  -  -  -  
   19 D1:ADFA -  -  -  -  Int32UDivide:
   20 D1:ADFA 37 -  -  -  		scf
   21 D1:ADFB C3 3F AE D1 		jp 		_I32UnsignedDivide		
   22 D1:ADFF -  -  -  -  
   23 D1:ADFF -  -  -  -  ; ***************************************************************************************
   24 D1:ADFF -  -  -  -  ;
   25 D1:ADFF -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:ADFF -  -  -  -  ;
   27 D1:ADFF -  -  -  -  ; ***************************************************************************************
   28 D1:ADFF -  -  -  -  
   29 D1:ADFF -  -  -  -  Int32SDivide:
   30 D1:ADFF 37 -  -  -  		scf
   31 D1:AE00 18 01 -  -  		jr 		_I32SDivide
   32 D1:AE02 -  -  -  -  Int32Modulus:
   33 D1:AE02 AF -  -  -  		xor 	a
   34 D1:AE03 -  -  -  -  _I32SDivide:
   35 D1:AE03 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:AE04 F5 -  -  -  		push 	af
   37 D1:AE05 08 -  -  -  		ex 		af,af'
   38 D1:AE06 -  -  -  -  
   39 D1:AE06 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:AE07 D9 -  -  -  		exx
   41 D1:AE08 D5 -  -  -  		push 	de
   42 D1:AE09 D9 -  -  -  		exx
   43 D1:AE0A -  -  -  -  
   44 D1:AE0A F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:AE0B AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:AE0C CD 2C AE D1 		call 	_I32CheckHLSignSwap
   47 D1:AE10 CD 2C AE D1 		call 	_I32CheckHLSignSwap
   48 D1:AE14 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:AE15 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:AE16 F5 -  -  -  		push 	af
   51 D1:AE17 CD 3F AE D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:AE1B F1 -  -  -  		pop 	af 							; get function back
   53 D1:AE1C 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:AE1E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:AE1F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:AE21 C4 A1 AF D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:AE25 -  -  -  -  _I32SDExit:
   58 D1:AE25 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:AE26 D1 -  -  -  		pop 	de
   60 D1:AE27 D9 -  -  -  		exx
   61 D1:AE28 D1 -  -  -  		pop 	de
   62 D1:AE29 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:AE2A 08 -  -  -  		ex 		af,af'
   64 D1:AE2B C9 -  -  -  		ret
   65 D1:AE2C -  -  -  -  
   66 D1:AE2C -  -  -  -  
   67 D1:AE2C -  -  -  -  _I32CheckHLSignSwap:
   68 D1:AE2C D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:AE2D CB 7C -  -  		bit 	7,h
   70 D1:AE2F D9 -  -  -  		exx
   71 D1:AE30 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:AE32 -  -  -  -  		;
   73 D1:AE32 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:AE34 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:AE35 CD A1 AF D1 		call 	Int32Negate 				
   76 D1:AE39 F1 -  -  -  		pop 	af
   77 D1:AE3A -  -  -  -  _I32CHSPositive:
   78 D1:AE3A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:AE3B EB -  -  -  		ex 		de,hl
   80 D1:AE3C D9 -  -  -  		exx		
   81 D1:AE3D EB -  -  -  		ex 		de,hl
   82 D1:AE3E C9 -  -  -  		ret
   83 D1:AE3F -  -  -  -  
   84 D1:AE3F -  -  -  -  ; ***************************************************************************************
   85 D1:AE3F -  -  -  -  ;
   86 D1:AE3F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:AE3F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:AE3F -  -  -  -  ;
   89 D1:AE3F -  -  -  -  ; ***************************************************************************************
   90 D1:AE3F -  -  -  -  
   91 D1:AE3F -  -  -  -  _I32UnsignedDivide:
   92 D1:AE3F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:AE40 D5 -  -  -  		push 	de
   94 D1:AE41 D9 -  -  -  		exx
   95 D1:AE42 C5 -  -  -  		push 	bc
   96 D1:AE43 D5 -  -  -  		push 	de 							
   97 D1:AE44 D9 -  -  -  		exx
   98 D1:AE45 -  -  -  -  
   99 D1:AE45 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:AE46 -  -  -  -  
  101 D1:AE46 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:AE47 B3 -  -  -  		or 		e
  103 D1:AE48 D9 -  -  -  		exx
  104 D1:AE49 B2 -  -  -  		or 		d
  105 D1:AE4A B3 -  -  -  		or 		e
  106 D1:AE4B D9 -  -  -  		exx
  107 D1:AE4C CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:AE50 -  -  -  -  
  109 D1:AE50 -  -  -  -  
  110 D1:AE50 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:AE51 4D -  -  -  		ld		c,l
  112 D1:AE52 21 00 00 00 		ld 		hl,$0000
  113 D1:AE56 D9 -  -  -  		exx
  114 D1:AE57 44 -  -  -  		ld 		b,h
  115 D1:AE58 4D -  -  -  		ld		c,l
  116 D1:AE59 21 00 00 00 		ld 		hl,$0000
  117 D1:AE5D D9 -  -  -  		exx
  118 D1:AE5E -  -  -  -  
  119 D1:AE5E 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:AE60 -  -  -  -  _I32DivideLoop:
  121 D1:AE60 F5 -  -  -  		push 	af
  122 D1:AE61 -  -  -  -  
  123 D1:AE61 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:AE63 CB 10 -  -  		rl 		b
  125 D1:AE65 D9 -  -  -  		exx
  126 D1:AE66 CB 11 -  -  		rl 		c
  127 D1:AE68 CB 10 -  -  		rl 		b
  128 D1:AE6A D9 -  -  -  		exx
  129 D1:AE6B CB 15 -  -  		rl 		l
  130 D1:AE6D CB 14 -  -  		rl 		h
  131 D1:AE6F D9 -  -  -  		exx
  132 D1:AE70 CB 15 -  -  		rl 		l
  133 D1:AE72 CB 14 -  -  		rl 		h
  134 D1:AE74 D9 -  -  -  		exx
  135 D1:AE75 -  -  -  -  
  136 D1:AE75 CD 3F AF D1 		call 	Int32Subtract 				; A = A - M
  137 D1:AE79 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:AE7B -  -  -  -  
  139 D1:AE7B 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:AE7C 18 04 -  -  		jr 		_I32Next
  141 D1:AE7E -  -  -  -  
  142 D1:AE7E -  -  -  -  _I32Borrow:
  143 D1:AE7E CD 37 AF D1 		call 	Int32Add 					; A = A + M
  144 D1:AE82 -  -  -  -  _I32Next:
  145 D1:AE82 F1 -  -  -  		pop 	af
  146 D1:AE83 3D -  -  -  		dec 	a
  147 D1:AE84 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:AE86 -  -  -  -  
  149 D1:AE86 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:AE87 -  -  -  -  
  151 D1:AE87 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:AE88 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:AE8A -  -  -  -  
  154 D1:AE8A 60 -  -  -  		ld  	h,b
  155 D1:AE8B 69 -  -  -  		ld 		l,c
  156 D1:AE8C D9 -  -  -  		exx
  157 D1:AE8D 60 -  -  -  		ld  	h,b
  158 D1:AE8E 69 -  -  -  		ld 		l,c
  159 D1:AE8F D9 -  -  -  		exx
  160 D1:AE90 -  -  -  -  _I32Modulus1:		
  161 D1:AE90 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:AE91 D1 -  -  -  		pop 	de
  163 D1:AE92 C1 -  -  -  		pop 	bc
  164 D1:AE93 D9 -  -  -  		exx
  165 D1:AE94 D1 -  -  -  		pop 	de
  166 D1:AE95 C1 -  -  -  		pop 	bc
  167 D1:AE96 C9 -  -  -  		ret
  168 D1:AE97 -  -  -  -  
  169 D1:AE97 -  -  -  -  ; ***************************************************************************************
  170 D1:AE97 -  -  -  -  ;
  171 D1:AE97 -  -  -  -  ;									Changes and Updates
  172 D1:AE97 -  -  -  -  ;
  173 D1:AE97 -  -  -  -  ; ***************************************************************************************
  174 D1:AE97 -  -  -  -  ;
  175 D1:AE97 -  -  -  -  ;		Date			Notes
  176 D1:AE97 -  -  -  -  ;		==== 			=====
  177 D1:AE97 -  -  -  -  ;
  178 D1:AE97 -  -  -  -  ; ***************************************************************************************
  179 D1:AE97 -  -  -  -  		
Listing for file "_build.asm"
   30 D1:AE97 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:AE97 -  -  -  -  ; ***************************************************************************************
    2 D1:AE97 -  -  -  -  ; ***************************************************************************************
    3 D1:AE97 -  -  -  -  ;
    4 D1:AE97 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:AE97 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE97 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE97 -  -  -  -  ;		Reviewed :	No
    8 D1:AE97 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:AE97 -  -  -  -  ;
   10 D1:AE97 -  -  -  -  ; ***************************************************************************************
   11 D1:AE97 -  -  -  -  ; ***************************************************************************************
   12 D1:AE97 -  -  -  -  
   13 D1:AE97 -  -  -  -  ; ***************************************************************************************
   14 D1:AE97 -  -  -  -  ;
   15 D1:AE97 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:AE97 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:AE97 -  -  -  -  ;
   18 D1:AE97 -  -  -  -  ; ***************************************************************************************
   19 D1:AE97 -  -  -  -  
   20 D1:AE97 -  -  -  -  Int32FromString:
   21 D1:AE97 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:AE98 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:AE99 D5 -  -  -  		push 	de
   24 D1:AE9A D9 -  -  -  		exx
   25 D1:AE9B D5 -  -  -  		push 	de
   26 D1:AE9C -  -  -  -  
   27 D1:AE9C 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:AEA0 11 00 00 00 		ld 		de,$0000
   29 D1:AEA4 D9 -  -  -  		exx
   30 D1:AEA5 21 00 00 00 		ld 		hl,$0000
   31 D1:AEA9 11 00 00 00 		ld 		de,$0000
   32 D1:AEAD D9 -  -  -  		exx
   33 D1:AEAE -  -  -  -  
   34 D1:AEAE 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:AEAF CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:AEB1 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:AEB3 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:AEB5 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:AEB6 -  -  -  -  		;
   40 D1:AEB6 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:AEB7 F5 -  -  -  		push 	af
   42 D1:AEB8 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:AEBA 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:AEBB 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:AEBD 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:AEBE 18 01 -  -  		jr 		_I32FSMain
   47 D1:AEC0 -  -  -  -  _I32FSNotSigned:		
   48 D1:AEC0 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:AEC1 -  -  -  -  		;
   50 D1:AEC1 -  -  -  -  		; 		Main conversion loop.
   51 D1:AEC1 -  -  -  -  		; 		
   52 D1:AEC1 -  -  -  -  _I32FSMain:		
   53 D1:AEC1 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:AEC2 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:AEC4 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:AEC6 D6 20 -  -  		sub 	32
   57 D1:AEC8 -  -  -  -  _I32FSNotLower:
   58 D1:AEC8 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:AECA 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:AECC FE 3A -  -  		cp 		'9'+1
   61 D1:AECE 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:AED0 FE 41 -  -  		cp 		'A'
   63 D1:AED2 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:AED4 FE 47 -  -  		cp 		'F'+1
   65 D1:AED6 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:AED8 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:AEDA -  -  -  -  _I32FSOkay:
   68 D1:AEDA D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:AEDC BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:AEDD 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:AEDF 03 -  -  -  		inc 	bc 							; consume character
   72 D1:AEE0 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:AEE1 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:AEE2 CD FE AE D1 		call 	Int32Multiply 				; result *= base
   75 D1:AEE6 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:AEE7 5F -  -  -  		ld 		e,a
   77 D1:AEE8 CD 37 AF D1 		call 	Int32Add 					; and add it.
   78 D1:AEEC D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:AEED 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:AEEF -  -  -  -  
   81 D1:AEEF -  -  -  -  _I32FSExit:
   82 D1:AEEF F1 -  -  -  		pop 	af 							; get sign back
   83 D1:AEF0 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:AEF2 CC A1 AF D1 		call 	z,Int32Negate
   85 D1:AEF6 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:AEF7 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:AEF8 D9 -  -  -  		exx
   88 D1:AEF9 D1 -  -  -  		pop 	de
   89 D1:AEFA D9 -  -  -  		exx
   90 D1:AEFB C1 -  -  -  		pop 	bc
   91 D1:AEFC B7 -  -  -  		or 		a 							; set Z flag if zero.
   92 D1:AEFD C9 -  -  -  		ret				
   93 D1:AEFE -  -  -  -  
   94 D1:AEFE -  -  -  -  ; ***************************************************************************************
   95 D1:AEFE -  -  -  -  ;
   96 D1:AEFE -  -  -  -  ;									Changes and Updates
   97 D1:AEFE -  -  -  -  ;
   98 D1:AEFE -  -  -  -  ; ***************************************************************************************
   99 D1:AEFE -  -  -  -  ;
  100 D1:AEFE -  -  -  -  ;		Date			Notes
  101 D1:AEFE -  -  -  -  ;		==== 			=====
  102 D1:AEFE -  -  -  -  ;
  103 D1:AEFE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AEFE -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:AEFE -  -  -  -  ; ***************************************************************************************
    2 D1:AEFE -  -  -  -  ; ***************************************************************************************
    3 D1:AEFE -  -  -  -  ;
    4 D1:AEFE -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:AEFE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEFE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEFE -  -  -  -  ;		Reviewed :	No
    8 D1:AEFE -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:AEFE -  -  -  -  ;
   10 D1:AEFE -  -  -  -  ; ***************************************************************************************
   11 D1:AEFE -  -  -  -  ; ***************************************************************************************
   12 D1:AEFE -  -  -  -  
   13 D1:AEFE -  -  -  -  Int32Multiply:
   14 D1:AEFE C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:AEFF D5 -  -  -  		push 	de
   16 D1:AF00 44 -  -  -  		ld 		b,h
   17 D1:AF01 4D -  -  -  		ld 		c,l
   18 D1:AF02 21 00 00 00 		ld 		hl,$0000
   19 D1:AF06 -  -  -  -  
   20 D1:AF06 D9 -  -  -  		exx
   21 D1:AF07 C5 -  -  -  		push 	bc
   22 D1:AF08 D5 -  -  -  		push 	de
   23 D1:AF09 44 -  -  -  		ld 		b,h
   24 D1:AF0A 4D -  -  -  		ld 		c,l
   25 D1:AF0B 21 00 00 00 		ld 		hl,$0000		
   26 D1:AF0F D9 -  -  -  		exx
   27 D1:AF10 -  -  -  -  
   28 D1:AF10 -  -  -  -  _I32MultiplyLoop:
   29 D1:AF10 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:AF12 C4 37 AF D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:AF16 -  -  -  -  		;
   32 D1:AF16 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:AF17 CB 38 -  -  		srl 	b
   34 D1:AF19 CB 19 -  -  		rr 		c
   35 D1:AF1B D9 -  -  -  		exx
   36 D1:AF1C CB 18 -  -  		rr 		b
   37 D1:AF1E CB 19 -  -  		rr 		c
   38 D1:AF20 -  -  -  -  		;
   39 D1:AF20 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:AF22 CB 12 -  -  		rl 		d
   41 D1:AF24 D9 -  -  -  		exx
   42 D1:AF25 CB 13 -  -  		rl 		e
   43 D1:AF27 CB 12 -  -  		rl 		d
   44 D1:AF29 -  -  -  -  
   45 D1:AF29 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:AF2A B1 -  -  -  		or 		c
   47 D1:AF2B D9 -  -  -  		exx
   48 D1:AF2C B0 -  -  -  		or 		b
   49 D1:AF2D B1 -  -  -  		or 		c
   50 D1:AF2E 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:AF30 -  -  -  -  
   52 D1:AF30 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:AF31 D1 -  -  -  		pop 	de
   54 D1:AF32 C1 -  -  -  		pop 	bc
   55 D1:AF33 D9 -  -  -  		exx
   56 D1:AF34 D1 -  -  -  		pop 	de
   57 D1:AF35 C1 -  -  -  		pop 	bc
   58 D1:AF36 C9 -  -  -  		ret
   59 D1:AF37 -  -  -  -  
   60 D1:AF37 -  -  -  -  ; ***************************************************************************************
   61 D1:AF37 -  -  -  -  ;
   62 D1:AF37 -  -  -  -  ;									Changes and Updates
   63 D1:AF37 -  -  -  -  ;
   64 D1:AF37 -  -  -  -  ; ***************************************************************************************
   65 D1:AF37 -  -  -  -  ;
   66 D1:AF37 -  -  -  -  ;		Date			Notes
   67 D1:AF37 -  -  -  -  ;		==== 			=====
   68 D1:AF37 -  -  -  -  ;
   69 D1:AF37 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AF37 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:AF37 -  -  -  -  ; ***************************************************************************************
    2 D1:AF37 -  -  -  -  ; ***************************************************************************************
    3 D1:AF37 -  -  -  -  ;
    4 D1:AF37 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:AF37 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF37 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF37 -  -  -  -  ;		Reviewed :	No
    8 D1:AF37 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:AF37 -  -  -  -  ;
   10 D1:AF37 -  -  -  -  ; ***************************************************************************************
   11 D1:AF37 -  -  -  -  ; ***************************************************************************************
   12 D1:AF37 -  -  -  -  
   13 D1:AF37 -  -  -  -  ; ***************************************************************************************
   14 D1:AF37 -  -  -  -  ;
   15 D1:AF37 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:AF37 -  -  -  -  ;
   17 D1:AF37 -  -  -  -  ; ***************************************************************************************
   18 D1:AF37 -  -  -  -  
   19 D1:AF37 -  -  -  -  Int32Add:
   20 D1:AF37 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:AF39 D9 -  -  -  		exx
   22 D1:AF3A 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:AF3D D9 -  -  -  		exx
   24 D1:AF3E C9 -  -  -  		ret
   25 D1:AF3F -  -  -  -  
   26 D1:AF3F -  -  -  -  ; ***************************************************************************************
   27 D1:AF3F -  -  -  -  ;
   28 D1:AF3F -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:AF3F -  -  -  -  ;
   30 D1:AF3F -  -  -  -  ; ***************************************************************************************
   31 D1:AF3F -  -  -  -  
   32 D1:AF3F -  -  -  -  Int32Subtract:
   33 D1:AF3F AF -  -  -  		xor 	a 							; clear carry
   34 D1:AF40 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:AF43 D9 -  -  -  		exx
   36 D1:AF44 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:AF47 D9 -  -  -  		exx
   38 D1:AF48 C9 -  -  -  		ret
   39 D1:AF49 -  -  -  -  
   40 D1:AF49 -  -  -  -  ; ***************************************************************************************
   41 D1:AF49 -  -  -  -  ;
   42 D1:AF49 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:AF49 -  -  -  -  ;
   44 D1:AF49 -  -  -  -  ; ***************************************************************************************
   45 D1:AF49 -  -  -  -  
   46 D1:AF49 -  -  -  -  Int32And:
   47 D1:AF49 D9 -  -  -  		exx
   48 D1:AF4A CD 4F AF D1 		call 	_I32AndHLDE
   49 D1:AF4E D9 -  -  -  		exx
   50 D1:AF4F -  -  -  -  _I32AndHLDE:		
   51 D1:AF4F 7C -  -  -  		ld 		a,h
   52 D1:AF50 A2 -  -  -  		and 	d
   53 D1:AF51 67 -  -  -  		ld 		h,a
   54 D1:AF52 7D -  -  -  		ld 		a,l
   55 D1:AF53 A3 -  -  -  		and 	e
   56 D1:AF54 6F -  -  -  		ld 		l,a
   57 D1:AF55 C9 -  -  -  		ret
   58 D1:AF56 -  -  -  -  
   59 D1:AF56 -  -  -  -  ; ***************************************************************************************
   60 D1:AF56 -  -  -  -  ;
   61 D1:AF56 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:AF56 -  -  -  -  ;
   63 D1:AF56 -  -  -  -  ; ***************************************************************************************
   64 D1:AF56 -  -  -  -  
   65 D1:AF56 -  -  -  -  Int32Or:
   66 D1:AF56 D9 -  -  -  		exx
   67 D1:AF57 CD 5C AF D1 		call 	_I32OrHLDE
   68 D1:AF5B D9 -  -  -  		exx
   69 D1:AF5C -  -  -  -  _I32OrHLDE:		
   70 D1:AF5C 7C -  -  -  		ld 		a,h
   71 D1:AF5D B2 -  -  -  		or 		d
   72 D1:AF5E 67 -  -  -  		ld 		h,a
   73 D1:AF5F 7D -  -  -  		ld 		a,l
   74 D1:AF60 B3 -  -  -  		or 		e
   75 D1:AF61 6F -  -  -  		ld 		l,a
   76 D1:AF62 C9 -  -  -  		ret
   77 D1:AF63 -  -  -  -  
   78 D1:AF63 -  -  -  -  ; ***************************************************************************************
   79 D1:AF63 -  -  -  -  ;
   80 D1:AF63 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:AF63 -  -  -  -  ;
   82 D1:AF63 -  -  -  -  ; ***************************************************************************************
   83 D1:AF63 -  -  -  -  
   84 D1:AF63 -  -  -  -  Int32Xor:
   85 D1:AF63 D9 -  -  -  		exx
   86 D1:AF64 CD 69 AF D1 		call 	_I32XorHLDE
   87 D1:AF68 D9 -  -  -  		exx
   88 D1:AF69 -  -  -  -  _I32XorHLDE:		
   89 D1:AF69 7C -  -  -  		ld 		a,h
   90 D1:AF6A AA -  -  -  		xor 	d
   91 D1:AF6B 67 -  -  -  		ld 		h,a
   92 D1:AF6C 7D -  -  -  		ld 		a,l
   93 D1:AF6D AB -  -  -  		xor 	e
   94 D1:AF6E 6F -  -  -  		ld 		l,a
   95 D1:AF6F C9 -  -  -  		ret
   96 D1:AF70 -  -  -  -  
   97 D1:AF70 -  -  -  -  ; ***************************************************************************************
   98 D1:AF70 -  -  -  -  ;
   99 D1:AF70 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:AF70 -  -  -  -  ;
  101 D1:AF70 -  -  -  -  ; ***************************************************************************************
  102 D1:AF70 -  -  -  -  
  103 D1:AF70 -  -  -  -  Int32Zero:
  104 D1:AF70 D9 -  -  -  		exx
  105 D1:AF71 7D -  -  -  		ld 		a,l
  106 D1:AF72 B4 -  -  -  		or 		h
  107 D1:AF73 D9 -  -  -  		exx
  108 D1:AF74 B5 -  -  -  		or 		l
  109 D1:AF75 B4 -  -  -  		or 		h
  110 D1:AF76 C9 -  -  -  		ret
  111 D1:AF77 -  -  -  -  
  112 D1:AF77 -  -  -  -  ; ***************************************************************************************
  113 D1:AF77 -  -  -  -  ;
  114 D1:AF77 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:AF77 -  -  -  -  ;
  116 D1:AF77 -  -  -  -  ; ***************************************************************************************
  117 D1:AF77 -  -  -  -  
  118 D1:AF77 -  -  -  -  Int32Compare:
  119 D1:AF77 E5 -  -  -  		push 	hl 							; save HL
  120 D1:AF78 AF -  -  -  		xor 	a 							; clear carry
  121 D1:AF79 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:AF7C D9 -  -  -  		exx
  123 D1:AF7D E5 -  -  -  		push 	hl 							; save HL'
  124 D1:AF7E 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:AF81 -  -  -  -  		;
  126 D1:AF81 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:AF82 E2 8A AF D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:AF86 78 -  -  -  		ld 		a,b
  129 D1:AF87 EE 80 -  -  		xor 	$80
  130 D1:AF89 47 -  -  -  		ld 		b,a
  131 D1:AF8A -  -  -  -  _I32CNoOverflow:
  132 D1:AF8A 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:AF8B B5 -  -  -  		or 		l
  134 D1:AF8C D9 -  -  -  		exx 
  135 D1:AF8D B4 -  -  -  		or 		h
  136 D1:AF8E B5 -  -  -  		or 		l
  137 D1:AF8F 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:AF91 -  -  -  -  		;
  139 D1:AF91 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:AF92 CB 78 -  -  		bit 	7,b
  141 D1:AF94 D9 -  -  -  		exx
  142 D1:AF95 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:AF97 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:AF99 3E FF -  -  		ld 		a,$FF
  145 D1:AF9B -  -  -  -  _I32NotPos:
  146 D1:AF9B D9 -  -  -  		exx
  147 D1:AF9C E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:AF9D D9 -  -  -  		exx
  149 D1:AF9E E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:AF9F B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:AFA0 C9 -  -  -  		ret
  152 D1:AFA1 -  -  -  -  
  153 D1:AFA1 -  -  -  -  ; ***************************************************************************************
  154 D1:AFA1 -  -  -  -  ;
  155 D1:AFA1 -  -  -  -  ;										Negate HL'HL
  156 D1:AFA1 -  -  -  -  ;
  157 D1:AFA1 -  -  -  -  ; ***************************************************************************************
  158 D1:AFA1 -  -  -  -  
  159 D1:AFA1 -  -  -  -  Int32Negate:
  160 D1:AFA1 AF -  -  -  		xor 	a
  161 D1:AFA2 CD AD AF D1 		call 	_I32NSubtract
  162 D1:AFA6 D9 -  -  -  		exx
  163 D1:AFA7 CD AD AF D1 		call 	_I32NSubtract
  164 D1:AFAB D9 -  -  -  		exx
  165 D1:AFAC C9 -  -  -  		ret
  166 D1:AFAD -  -  -  -  _I32NSubtract:
  167 D1:AFAD D5 -  -  -  		push 	de
  168 D1:AFAE EB -  -  -  		ex 		de,hl
  169 D1:AFAF 21 00 00 00 		ld 		hl,$0000
  170 D1:AFB3 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:AFB6 D1 -  -  -  		pop 	de
  172 D1:AFB7 C9 -  -  -  		ret
  173 D1:AFB8 -  -  -  -  		
  174 D1:AFB8 -  -  -  -  ; ***************************************************************************************
  175 D1:AFB8 -  -  -  -  ;
  176 D1:AFB8 -  -  -  -  ;									Changes and Updates
  177 D1:AFB8 -  -  -  -  ;
  178 D1:AFB8 -  -  -  -  ; ***************************************************************************************
  179 D1:AFB8 -  -  -  -  ;
  180 D1:AFB8 -  -  -  -  ;		Date			Notes
  181 D1:AFB8 -  -  -  -  ;		==== 			=====
  182 D1:AFB8 -  -  -  -  ;
  183 D1:AFB8 -  -  -  -  ; ***************************************************************************************
  184 D1:AFB8 -  -  -  -  		
Listing for file "_build.asm"
   33 D1:AFB8 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:AFB8 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB8 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB8 -  -  -  -  ;
    4 D1:AFB8 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:AFB8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFB8 -  -  -  -  ;		Reviewed :	No
    8 D1:AFB8 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:AFB8 -  -  -  -  ;
   10 D1:AFB8 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB8 -  -  -  -  ;
   12 D1:AFB8 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:AFB8 -  -  -  -  ;
   14 D1:AFB8 -  -  -  -  ; ***************************************************************************************
   15 D1:AFB8 -  -  -  -  
   16 D1:AFB8 -  -  -  -  Int32ToString:
   17 D1:AFB8 C5 -  -  -  		push 	bc 							; save string start
   18 D1:AFB9 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:AFBA E5 -  -  -  		push 	hl
   20 D1:AFBB 11 00 00 00 		ld	 	de,$0000
   21 D1:AFBF D9 -  -  -  		exx
   22 D1:AFC0 D5 -  -  -  		push 	de
   23 D1:AFC1 E5 -  -  -  		push 	hl
   24 D1:AFC2 11 00 00 00 		ld 		de,$000
   25 D1:AFC6 D9 -  -  -  		exx
   26 D1:AFC7 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:AFC8 -  -  -  -  		;
   28 D1:AFC8 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:AFCA 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:AFCC ED 44 -  -  		neg 								; negate base and put in E
   31 D1:AFCE 5F -  -  -  		ld 		e,a
   32 D1:AFCF -  -  -  -  		;
   33 D1:AFCF D9 -  -  -  		exx 								; is it -ve ?
   34 D1:AFD0 CB 7C -  -  		bit 	7,h
   35 D1:AFD2 D9 -  -  -  		exx
   36 D1:AFD3 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:AFD5 -  -  -  -  		;
   38 D1:AFD5 CD A1 AF D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:AFD9 -  -  -  -  		;
   40 D1:AFD9 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:AFDB 02 -  -  -  		ld 		(bc),a
   42 D1:AFDC 03 -  -  -  		inc 	bc
   43 D1:AFDD -  -  -  -  _I32TSNotNegative:	
   44 D1:AFDD CD EB AF D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:AFE1 -  -  -  -  _I32TSExit:
   46 D1:AFE1 AF -  -  -  		xor 	a  							; write the end of string code
   47 D1:AFE2 02 -  -  -  		ld 		(bc),a 
   48 D1:AFE3 -  -  -  -  
   49 D1:AFE3 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:AFE4 E1 -  -  -  		pop 	hl
   51 D1:AFE5 D1 -  -  -  		pop 	de
   52 D1:AFE6 D9 -  -  -  		exx
   53 D1:AFE7 E1 -  -  -  		pop 	hl
   54 D1:AFE8 D1 -  -  -  		pop 	de
   55 D1:AFE9 C1 -  -  -  		pop 	bc
   56 D1:AFEA C9 -  -  -  		ret
   57 D1:AFEB -  -  -  -  
   58 D1:AFEB -  -  -  -  _I32RecursiveConvert:
   59 D1:AFEB CD FA AD D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:AFEF F5 -  -  -  		push 	af 							; save remainder
   61 D1:AFF0 CD 70 AF D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:AFF4 C4 EB AF D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:AFF8 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:AFF9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:AFFB 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:AFFD C6 07 -  -  		add 	a,7
   67 D1:AFFF -  -  -  -  _I32NotHex:
   68 D1:AFFF C6 30 -  -  		add 	a,48
   69 D1:B001 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B002 03 -  -  -  		inc 	bc
   71 D1:B003 C9 -  -  -  		ret		
   72 D1:B004 -  -  -  -  
   73 D1:B004 -  -  -  -  ; ***************************************************************************************
   74 D1:B004 -  -  -  -  ;
   75 D1:B004 -  -  -  -  ;									Changes and Updates
   76 D1:B004 -  -  -  -  ;
   77 D1:B004 -  -  -  -  ; ***************************************************************************************
   78 D1:B004 -  -  -  -  ;
   79 D1:B004 -  -  -  -  ;		Date			Notes
   80 D1:B004 -  -  -  -  ;		==== 			=====
   81 D1:B004 -  -  -  -  ;
   82 D1:B004 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:B004 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B004 -  -  -  -  ; ***************************************************************************************
    2 D1:B004 -  -  -  -  ; ***************************************************************************************
    3 D1:B004 -  -  -  -  ;
    4 D1:B004 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B004 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B004 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B004 -  -  -  -  ;		Reviewed :	No
    8 D1:B004 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B004 -  -  -  -  ;
   10 D1:B004 -  -  -  -  ; ***************************************************************************************
   11 D1:B004 -  -  -  -  ; ***************************************************************************************
   12 D1:B004 -  -  -  -  
   13 D1:B004 -  -  -  -  #ifdef AQUARIUS
   14 D1:B004             
   15 D1:B004             ; ***************************************************************************************
   16 D1:B004             ;
   17 D1:B004             ;								Initialise system stuff
   18 D1:B004             ;
   19 D1:B004             ; ***************************************************************************************
   20 D1:B004             
   21 D1:B004             SYSInitialise:
   22 D1:B004             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B004             	call 	SYSPrintChar
   24 D1:B004             	ret
   25 D1:B004             
   26 D1:B004             ; ***************************************************************************************
   27 D1:B004             ;
   28 D1:B004             ;								Terminate system stuff
   29 D1:B004             ;
   30 D1:B004             ; ***************************************************************************************
   31 D1:B004             
   32 D1:B004             SYSTerminate:
   33 D1:B004             	jr 		SYSTerminate
   34 D1:B004             
   35 D1:B004             ; ***************************************************************************************
   36 D1:B004             ;
   37 D1:B004             ;								Print A character
   38 D1:B004             ;
   39 D1:B004             ; ***************************************************************************************
   40 D1:B004             
   41 D1:B004             SYSPrintChar:
   42 D1:B004             	push 	af 									; we stack everything including alt registers
   43 D1:B004             	push 	bc
   44 D1:B004             	push 	de
   45 D1:B004             	push 	hl
   46 D1:B004             	push 	ix
   47 D1:B004             	push 	iy
   48 D1:B004             	exx
   49 D1:B004             	push 	bc
   50 D1:B004             	push 	de
   51 D1:B004             	push 	hl
   52 D1:B004             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B004             	pop 	hl
   54 D1:B004             	pop 	de
   55 D1:B004             	pop 	bc
   56 D1:B004             	exx
   57 D1:B004             	pop 	iy
   58 D1:B004             	pop 	ix
   59 D1:B004             	pop 	hl
   60 D1:B004             	pop 	de
   61 D1:B004             	pop 	bc
   62 D1:B004             	pop 	af
   63 D1:B004             	ret		
   64 D1:B004             
   65 D1:B004             ; ***************************************************************************************
   66 D1:B004             ;
   67 D1:B004             ;									Print Newline
   68 D1:B004             ;
   69 D1:B004             ; ***************************************************************************************
   70 D1:B004             
   71 D1:B004             SYSPrintCRLF:
   72 D1:B004             	push 	af
   73 D1:B004             	ld 		a,13
   74 D1:B004             	call 	SYSPrintChar
   75 D1:B004             	ld 		a,10
   76 D1:B004             	call 	SYSPrintChar
   77 D1:B004             	pop 	af
   78 D1:B004             	ret
   79 D1:B004             
   80 D1:B004             #endif
   81 D1:B004 -  -  -  -  
   82 D1:B004 -  -  -  -  ; ***************************************************************************************
   83 D1:B004 -  -  -  -  ;
   84 D1:B004 -  -  -  -  ;									Changes and Updates
   85 D1:B004 -  -  -  -  ;
   86 D1:B004 -  -  -  -  ; ***************************************************************************************
   87 D1:B004 -  -  -  -  ;
   88 D1:B004 -  -  -  -  ;		Date			Notes
   89 D1:B004 -  -  -  -  ;		==== 			=====
   90 D1:B004 -  -  -  -  ;
   91 D1:B004 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:B004 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B004 -  -  -  -  ; ***************************************************************************************
    2 D1:B004 -  -  -  -  ; ***************************************************************************************
    3 D1:B004 -  -  -  -  ;
    4 D1:B004 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B004 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B004 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B004 -  -  -  -  ;		Reviewed :	No
    8 D1:B004 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B004 -  -  -  -  ;
   10 D1:B004 -  -  -  -  ; ***************************************************************************************
   11 D1:B004 -  -  -  -  ; ***************************************************************************************
   12 D1:B004 -  -  -  -  
   13 D1:B004 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B004             
   15 D1:B004             ; ***************************************************************************************
   16 D1:B004             ;
   17 D1:B004             ;								Initialise system stuff
   18 D1:B004             ;
   19 D1:B004             ; ***************************************************************************************
   20 D1:B004             
   21 D1:B004             SYSInitialise:
   22 D1:B004             	ret
   23 D1:B004             
   24 D1:B004             ; ***************************************************************************************
   25 D1:B004             ;
   26 D1:B004             ;								Terminate system stuff
   27 D1:B004             ;
   28 D1:B004             ; ***************************************************************************************
   29 D1:B004             
   30 D1:B004             SYSTerminate:
   31 D1:B004             	ret
   32 D1:B004             
   33 D1:B004             ; ***************************************************************************************
   34 D1:B004             ;
   35 D1:B004             ;								Print A character
   36 D1:B004             ;
   37 D1:B004             ; ***************************************************************************************
   38 D1:B004             
   39 D1:B004             SYSPrintChar:
   40 D1:B004             	ret		
   41 D1:B004             
   42 D1:B004             ; ***************************************************************************************
   43 D1:B004             ;
   44 D1:B004             ;									Print Newline
   45 D1:B004             ;
   46 D1:B004             ; ***************************************************************************************
   47 D1:B004             
   48 D1:B004             SYSPrintCRLF:
   49 D1:B004             	ret
   50 D1:B004             
   51 D1:B004             #endif
   52 D1:B004 -  -  -  -  
   53 D1:B004 -  -  -  -  ; ***************************************************************************************
   54 D1:B004 -  -  -  -  ;
   55 D1:B004 -  -  -  -  ;									Changes and Updates
   56 D1:B004 -  -  -  -  ;
   57 D1:B004 -  -  -  -  ; ***************************************************************************************
   58 D1:B004 -  -  -  -  ;
   59 D1:B004 -  -  -  -  ;		Date			Notes
   60 D1:B004 -  -  -  -  ;		==== 			=====
   61 D1:B004 -  -  -  -  ;
   62 D1:B004 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:B004 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B004 -  -  -  -  ; ***************************************************************************************
    2 D1:B004 -  -  -  -  ; ***************************************************************************************
    3 D1:B004 -  -  -  -  ;
    4 D1:B004 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B004 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B004 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B004 -  -  -  -  ;		Reviewed :	No
    8 D1:B004 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B004 -  -  -  -  ;
   10 D1:B004 -  -  -  -  ; ***************************************************************************************
   11 D1:B004 -  -  -  -  ; ***************************************************************************************
   12 D1:B004 -  -  -  -  
   13 D1:B004 -  -  -  -  #ifdef TI84
   14 D1:B004 -  -  -  -  
   15 D1:B004 -  -  -  -  ; ***************************************************************************************
   16 D1:B004 -  -  -  -  ;
   17 D1:B004 -  -  -  -  ;								Initialise system stuff
   18 D1:B004 -  -  -  -  ;
   19 D1:B004 -  -  -  -  ; ***************************************************************************************
   20 D1:B004 -  -  -  -  
   21 D1:B004 -  -  -  -  SYSInitialise:
   22 D1:B004 F3 -  -  -  	di
   23 D1:B005 ED 73 22 B0 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B00A FD 22 26 B0 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B00F C9 -  -  -  	ret
   26 D1:B010 -  -  -  -  
   27 D1:B010 -  -  -  -  ; ***************************************************************************************
   28 D1:B010 -  -  -  -  ;
   29 D1:B010 -  -  -  -  ;								Terminate system stuff
   30 D1:B010 -  -  -  -  ;
   31 D1:B010 -  -  -  -  ; ***************************************************************************************
   32 D1:B010 -  -  -  -  
   33 D1:B010 -  -  -  -  SYSTerminate:
   34 D1:B010 ED 7B 22 B0 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B015 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B017 FD 2A 26 B0 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B01C FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B020 FB -  -  -  	ei
   39 D1:B021 C9 -  -  -  	ret 										; and exit.
   40 D1:B022 -  -  -  -  
   41 D1:B022 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B022 00 00 00 00 	.dw 	0,0
   43 D1:B026 -  -  -  -  _IYTemp84:
   44 D1:B026 00 00 00 00 	.dw 	0,0		
   45 D1:B02A -  -  -  -  
   46 D1:B02A -  -  -  -  ; ***************************************************************************************
   47 D1:B02A -  -  -  -  ;
   48 D1:B02A -  -  -  -  ;								Print A character
   49 D1:B02A -  -  -  -  ;
   50 D1:B02A -  -  -  -  ; ***************************************************************************************
   51 D1:B02A -  -  -  -  
   52 D1:B02A -  -  -  -  SYSPrintChar:
   53 D1:B02A F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B02B C5 -  -  -  	push 	bc
   55 D1:B02C D5 -  -  -  	push 	de
   56 D1:B02D E5 -  -  -  	push 	hl
   57 D1:B02E DD E5 -  -  	push 	ix
   58 D1:B030 FD E5 -  -  	push 	iy
   59 D1:B032 D9 -  -  -  	exx
   60 D1:B033 C5 -  -  -  	push 	bc
   61 D1:B034 D5 -  -  -  	push 	de
   62 D1:B035 E5 -  -  -  	push 	hl
   63 D1:B036 -  -  -  -  
   64 D1:B036 FD 2A 26 B0 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B03B CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B03F F3 -  -  -  	di
   67 D1:B040 FD 22 26 B0 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B045 -  -  -  -  
   69 D1:B045 E1 -  -  -  	pop 	hl
   70 D1:B046 D1 -  -  -  	pop 	de
   71 D1:B047 C1 -  -  -  	pop 	bc
   72 D1:B048 D9 -  -  -  	exx
   73 D1:B049 FD E1 -  -  	pop 	iy
   74 D1:B04B DD E1 -  -  	pop 	ix
   75 D1:B04D E1 -  -  -  	pop 	hl
   76 D1:B04E D1 -  -  -  	pop 	de
   77 D1:B04F C1 -  -  -  	pop 	bc
   78 D1:B050 F1 -  -  -  	pop 	af
   79 D1:B051 C9 -  -  -  	ret		
   80 D1:B052 -  -  -  -  
   81 D1:B052 -  -  -  -  ; ***************************************************************************************
   82 D1:B052 -  -  -  -  ;
   83 D1:B052 -  -  -  -  ;									Print Newline
   84 D1:B052 -  -  -  -  ;
   85 D1:B052 -  -  -  -  ; ***************************************************************************************
   86 D1:B052 -  -  -  -  
   87 D1:B052 -  -  -  -  SYSPrintCRLF:
   88 D1:B052 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B053 C5 -  -  -  	push 	bc
   90 D1:B054 D5 -  -  -  	push 	de
   91 D1:B055 E5 -  -  -  	push 	hl
   92 D1:B056 DD E5 -  -  	push 	ix
   93 D1:B058 FD E5 -  -  	push 	iy
   94 D1:B05A D9 -  -  -  	exx
   95 D1:B05B C5 -  -  -  	push 	bc
   96 D1:B05C D5 -  -  -  	push 	de
   97 D1:B05D E5 -  -  -  	push 	hl
   98 D1:B05E -  -  -  -  
   99 D1:B05E FD 2A 26 B0 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B063 CD F0 07 02 	call 	_newline
  101 D1:B067 F3 -  -  -  	di
  102 D1:B068 FD 22 26 B0 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B06D -  -  -  -  
  104 D1:B06D E1 -  -  -  	pop 	hl
  105 D1:B06E D1 -  -  -  	pop 	de
  106 D1:B06F C1 -  -  -  	pop 	bc
  107 D1:B070 D9 -  -  -  	exx
  108 D1:B071 FD E1 -  -  	pop 	iy
  109 D1:B073 DD E1 -  -  	pop 	ix
  110 D1:B075 E1 -  -  -  	pop 	hl
  111 D1:B076 D1 -  -  -  	pop 	de
  112 D1:B077 C1 -  -  -  	pop 	bc
  113 D1:B078 F1 -  -  -  	pop 	af
  114 D1:B079 C9 -  -  -  	ret
  115 D1:B07A -  -  -  -  
  116 D1:B07A -  -  -  -  #endif
  117 D1:B07A -  -  -  -  
  118 D1:B07A -  -  -  -  ; ***************************************************************************************
  119 D1:B07A -  -  -  -  ;
  120 D1:B07A -  -  -  -  ;									Changes and Updates
  121 D1:B07A -  -  -  -  ;
  122 D1:B07A -  -  -  -  ; ***************************************************************************************
  123 D1:B07A -  -  -  -  ;
  124 D1:B07A -  -  -  -  ;		Date			Notes
  125 D1:B07A -  -  -  -  ;		==== 			=====
  126 D1:B07A -  -  -  -  ;
  127 D1:B07A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:B07A -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B07A -  -  -  -  ; ***************************************************************************************
    2 D1:B07A -  -  -  -  ; ***************************************************************************************
    3 D1:B07A -  -  -  -  ;
    4 D1:B07A -  -  -  -  ;		Name : 		basic.asm
    5 D1:B07A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B07A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B07A -  -  -  -  ;		Reviewed :	No
    8 D1:B07A -  -  -  -  ;		Purpose :	Main program.
    9 D1:B07A -  -  -  -  ;
   10 D1:B07A -  -  -  -  ; ***************************************************************************************
   11 D1:B07A -  -  -  -  ; ***************************************************************************************
   12 D1:B07A -  -  -  -  
   13 D1:B07A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  		.block 		$400-($ & $3FF)
   14 D1:B400 -  -  -  -  TestInstance:
   15 D1:B400 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B400 -  -  -  -  ;
    2 D1:B400 -  -  -  -  ;	This code automatically generated.
    3 D1:B400 -  -  -  -  ;
    4 D1:B400 -  -  -  -  TestProgram:
    5 D1:B400 21 01 00 B1 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 0E 02 00 
              02 8E 89 42 
              A0 00 8E 56 
              86 47 80 0B 
              03 00 B4 02 
              3F 01 3B 0D 
              00 80 00 -  	.db	$21,$01,$00,$b1,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$0e,$02,$00,$02,$8e,$89,$42,$a0,$00,$8e,$56,$86,$47,$80,$0b,$03,$00,$b4,$02,$3f,$01,$3b,$0d,$00,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:B43B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:C43B -  -  -  -  EndTestInstance:
   18 D1:C43B -  -  -  -  		
   19 D1:C43B -  -  -  -  ; ***************************************************************************************
   20 D1:C43B -  -  -  -  ;
   21 D1:C43B -  -  -  -  ;									Changes and Updates
   22 D1:C43B -  -  -  -  ;
   23 D1:C43B -  -  -  -  ; ***************************************************************************************
   24 D1:C43B -  -  -  -  ;
   25 D1:C43B -  -  -  -  ;		Date			Notes
   26 D1:C43B -  -  -  -  ;		==== 			=====
   27 D1:C43B -  -  -  -  ;
   28 D1:C43B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:C43B -  -  -  -  FinalAddress:
