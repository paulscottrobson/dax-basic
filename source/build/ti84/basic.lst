    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b6 ; local
   64 00:0000 -  -  -  -  #define KWD_DIM                             	$00b7 ; dim
   65 00:0000 -  -  -  -  #define KWD_REM                             	$00b8 ; rem
   66 00:0000 -  -  -  -  #define KWD_LET                             	$00b9 ; let
   67 00:0000 -  -  -  -  #define KWD_VDU                             	$00ba ; vdu
   68 00:0000 -  -  -  -  #define KWD_PRINT                           	$00bb ; print
   69 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bc ; load
   70 00:0000 -  -  -  -  #define KWD_SAVE                            	$00bd ; save
   71 00:0000 -  -  -  -  #define KWD_LIST                            	$00be ; list
   72 00:0000 -  -  -  -  #define KWD_NEW                             	$00bf ; new
   73 00:0000 -  -  -  -  #define KWD_RUN                             	$00c0 ; run
   74 00:0000 -  -  -  -  #define KWD_READ                            	$00c1 ; read
   75 00:0000 -  -  -  -  #define KWD_DATA                            	$00c2 ; data
   76 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c3 ; restore
   77 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c4 ; assert
   78 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c5 ; clear
   79 00:0000 -  -  -  -  #define KWD_END                             	$00c6 ; end
   80 00:0000 -  -  -  -  #define KWD_STOP                            	$00c7 ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 2A B6 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 2F C8 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 46 B0 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 D9 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 44 AA D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 50 B6 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 36 B6 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 01 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 01 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  
   24 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   25 D1:A8B1 -  -  -  -  ;
   26 D1:A8B1 -  -  -  -  ;								Defines the current instance
   27 D1:A8B1 -  -  -  -  ;
   28 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   29 D1:A8B1 -  -  -  -  
   30 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   31 D1:A8B1 00 00 00 00 		.dw 	0,0
   32 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   33 D1:A8B5 00 00 00 00 		.dw 	0,0		
   34 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   35 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   36 D1:A8BD -  -  -  -  
   37 D1:A8BD -  -  -  -  ; ***************************************************************************************
   38 D1:A8BD -  -  -  -  ;
   39 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   40 D1:A8BD -  -  -  -  ;
   41 D1:A8BD -  -  -  -  ; ***************************************************************************************
   42 D1:A8BD -  -  -  -  
   43 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   44 D1:A8BD 00 00 00 00 		.dw 	0,0
   45 D1:A8C1 -  -  -  -  
   46 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   47 D1:A8C1 00 00 00 00 		.dw 	0,0		
   48 D1:A8C5 -  -  -  -  
   49 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   50 D1:A8C5 00 00 00 00 		.dw 	0,0
   51 D1:A8C9 -  -  -  -  
   52 D1:A8C9 -  -  -  -  ;
   53 D1:A8C9 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   54 D1:A8C9 -  -  -  -  ;
   55 D1:A8C9 -  -  -  -  
   56 D1:A8C9 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   57 D1:A8C9 00 00 00 00 		.dw 	0,0
   58 D1:A8CD -  -  -  -  		
   59 D1:A8CD -  -  -  -  TopMemory: 									; first free location after PAGE.
   60 D1:A8CD 00 00 00 00 		.dw 	0,0
   61 D1:A8D1 -  -  -  -  
   62 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   63 D1:A8D1 -  -  -  -  ;
   64 D1:A8D1 -  -  -  -  ;										Run variables
   65 D1:A8D1 -  -  -  -  ;
   66 D1:A8D1 -  -  -  -  ; ***************************************************************************************
   67 D1:A8D1 -  -  -  -  
   68 D1:A8D1 -  -  -  -  CurrentLineStart: 							; Start of current line.
   69 D1:A8D1 00 00 00 00 		.dw 	0,0
   70 D1:A8D5 -  -  -  -  		
   71 D1:A8D5 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   72 D1:A8D5 00 00 00 00 		.dw 	0,0
   73 D1:A8D9 -  -  -  -  
   74 D1:A8D9 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   75 D1:A8D9 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   76 D1:A8DF -  -  -  -  
   77 D1:A8DF -  -  -  -  AConvert: 									; used for address conversions.
   78 D1:A8DF 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   79 D1:A8E5 -  -  -  -  		
   80 D1:A8E5 -  -  -  -  RandomSeed: 								; random number seeds.
   81 D1:A8E5 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   82 D1:A8F5 -  -  -  -  
   83 D1:A8F5 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   84 D1:A8F5 00 00 -  -  		.dw 	0
   85 D1:A8F7 -  -  -  -  
   86 D1:A8F7 -  -  -  -  ; ***************************************************************************************
   87 D1:A8F7 -  -  -  -  ;
   88 D1:A8F7 -  -  -  -  ;										  Buffers
   89 D1:A8F7 -  -  -  -  ;
   90 D1:A8F7 -  -  -  -  ; ***************************************************************************************
   91 D1:A8F7 -  -  -  -  
   92 D1:A8F7 -  -  -  -  _USBuffer: 									; buffer space for STR$()
   93 D1:A8F7 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   94 D1:A907 -  -  -  -  
   95 D1:A907 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
   96 D1:A907 00 00 -  -  		.dw 	0
   97 D1:A909 -  -  -  -  
   98 D1:A909 -  -  -  -  ConvertBuffer: 								; general usage
   99 D1:A909 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  100 D1:A949 -  -  -  -  
  101 D1:A949 -  -  -  -  ; ***************************************************************************************
  102 D1:A949 -  -  -  -  ;
  103 D1:A949 -  -  -  -  ;									Changes and Updates
  104 D1:A949 -  -  -  -  ;
  105 D1:A949 -  -  -  -  ; ***************************************************************************************
  106 D1:A949 -  -  -  -  ;
  107 D1:A949 -  -  -  -  ;		Date			Notes
  108 D1:A949 -  -  -  -  ;		==== 			=====
  109 D1:A949 -  -  -  -  ;
  110 D1:A949 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A949 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A949 -  -  -  -  ; ***************************************************************************************
    2 D1:A949 -  -  -  -  ; ***************************************************************************************
    3 D1:A949 -  -  -  -  ;
    4 D1:A949 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A949 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A949 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A949 -  -  -  -  ;		Reviewed :	No
    8 D1:A949 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A949 -  -  -  -  ;
   10 D1:A949 -  -  -  -  ; ***************************************************************************************
   11 D1:A949 -  -  -  -  ; ***************************************************************************************
   12 D1:A949 -  -  -  -  
   13 D1:A949 -  -  -  -  ; ***************************************************************************************
   14 D1:A949 -  -  -  -  ;
   15 D1:A949 -  -  -  -  ;									ASSERT command
   16 D1:A949 -  -  -  -  ;
   17 D1:A949 -  -  -  -  ; ***************************************************************************************
   18 D1:A949 -  -  -  -  
   19 D1:A949 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A949 CD 34 AD D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A94D 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A953 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A954 3E 01 C3 01 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A95A -  -  -  -  
   25 D1:A95A -  -  -  -  ; ***************************************************************************************
   26 D1:A95A -  -  -  -  ;
   27 D1:A95A -  -  -  -  ;									Changes and Updates
   28 D1:A95A -  -  -  -  ;
   29 D1:A95A -  -  -  -  ; ***************************************************************************************
   30 D1:A95A -  -  -  -  ;
   31 D1:A95A -  -  -  -  ;		Date			Notes
   32 D1:A95A -  -  -  -  ;		==== 			=====
   33 D1:A95A -  -  -  -  ;
   34 D1:A95A -  -  -  -  ; ***************************************************************************************
   35 D1:A95A -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A95A -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A95A -  -  -  -  ; ***************************************************************************************
    2 D1:A95A -  -  -  -  ; ***************************************************************************************
    3 D1:A95A -  -  -  -  ;
    4 D1:A95A -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A95A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95A -  -  -  -  ;		Reviewed :	No
    8 D1:A95A -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A95A -  -  -  -  ;
   10 D1:A95A -  -  -  -  ; ***************************************************************************************
   11 D1:A95A -  -  -  -  ; ***************************************************************************************
   12 D1:A95A -  -  -  -  
   13 D1:A95A -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A95A -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A95A -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A95A -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A95A -  -  -  -  BadCmd_Defproc: 	;; [def]
   18 D1:A95A -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A95A C3 6B AB D1 		jp 		SyntaxError
   20 D1:A95E -  -  -  -  
   21 D1:A95E -  -  -  -  ; ***************************************************************************************
   22 D1:A95E -  -  -  -  ;
   23 D1:A95E -  -  -  -  ;									Changes and Updates
   24 D1:A95E -  -  -  -  ;
   25 D1:A95E -  -  -  -  ; ***************************************************************************************
   26 D1:A95E -  -  -  -  ;
   27 D1:A95E -  -  -  -  ;		Date			Notes
   28 D1:A95E -  -  -  -  ;		==== 			=====
   29 D1:A95E -  -  -  -  ;
   30 D1:A95E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A95E -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A95E -  -  -  -  ; ***************************************************************************************
    2 D1:A95E -  -  -  -  ; ***************************************************************************************
    3 D1:A95E -  -  -  -  ;
    4 D1:A95E -  -  -  -  ;		Name : 		colon.asm
    5 D1:A95E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95E -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A95E -  -  -  -  ;		Reviewed :	No
    8 D1:A95E -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A95E -  -  -  -  ;
   10 D1:A95E -  -  -  -  ; ***************************************************************************************
   11 D1:A95E -  -  -  -  ; ***************************************************************************************
   12 D1:A95E -  -  -  -  
   13 D1:A95E -  -  -  -  ; ***************************************************************************************
   14 D1:A95E -  -  -  -  ;
   15 D1:A95E -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A95E -  -  -  -  ;
   17 D1:A95E -  -  -  -  ; ***************************************************************************************
   18 D1:A95E -  -  -  -  
   19 D1:A95E -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A95E C9 -  -  -  		ret
   21 D1:A95F -  -  -  -  
   22 D1:A95F -  -  -  -  ; ***************************************************************************************
   23 D1:A95F -  -  -  -  ;
   24 D1:A95F -  -  -  -  ;									Changes and Updates
   25 D1:A95F -  -  -  -  ;
   26 D1:A95F -  -  -  -  ; ***************************************************************************************
   27 D1:A95F -  -  -  -  ;
   28 D1:A95F -  -  -  -  ;		Date			Notes
   29 D1:A95F -  -  -  -  ;		==== 			=====
   30 D1:A95F -  -  -  -  ;
   31 D1:A95F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A95F -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A95F -  -  -  -  ; ***************************************************************************************
    2 D1:A95F -  -  -  -  ; ***************************************************************************************
    3 D1:A95F -  -  -  -  ;
    4 D1:A95F -  -  -  -  ;		Name : 		end.asm
    5 D1:A95F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95F -  -  -  -  ;		Reviewed :	No
    8 D1:A95F -  -  -  -  ;		Purpose :	End command
    9 D1:A95F -  -  -  -  ;
   10 D1:A95F -  -  -  -  ; ***************************************************************************************
   11 D1:A95F -  -  -  -  ; ***************************************************************************************
   12 D1:A95F -  -  -  -  
   13 D1:A95F -  -  -  -  ; ***************************************************************************************
   14 D1:A95F -  -  -  -  ;
   15 D1:A95F -  -  -  -  ;										END command
   16 D1:A95F -  -  -  -  ;
   17 D1:A95F -  -  -  -  ; ***************************************************************************************
   18 D1:A95F -  -  -  -  
   19 D1:A95F -  -  -  -  Command_END: 	;; [end]
   20 D1:A95F 3E 00 C3 01 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A965 -  -  -  -  
   22 D1:A965 -  -  -  -  ; ***************************************************************************************
   23 D1:A965 -  -  -  -  ;
   24 D1:A965 -  -  -  -  ;									Changes and Updates
   25 D1:A965 -  -  -  -  ;
   26 D1:A965 -  -  -  -  ; ***************************************************************************************
   27 D1:A965 -  -  -  -  ;
   28 D1:A965 -  -  -  -  ;		Date			Notes
   29 D1:A965 -  -  -  -  ;		==== 			=====
   30 D1:A965 -  -  -  -  ;
   31 D1:A965 -  -  -  -  ; ***************************************************************************************
   32 D1:A965 -  -  -  -  		
Listing for file "_build.asm"
   17 D1:A965 -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A965 -  -  -  -  ; ***************************************************************************************
    2 D1:A965 -  -  -  -  ; ***************************************************************************************
    3 D1:A965 -  -  -  -  ;
    4 D1:A965 -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A965 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A965 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A965 -  -  -  -  ;		Reviewed :	None
    8 D1:A965 -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A965 -  -  -  -  ;
   10 D1:A965 -  -  -  -  ; ***************************************************************************************
   11 D1:A965 -  -  -  -  ; ***************************************************************************************
   12 D1:A965 -  -  -  -  
   13 D1:A965 -  -  -  -  ; ***************************************************************************************
   14 D1:A965 -  -  -  -  ;
   15 D1:A965 -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A965 -  -  -  -  ;
   17 D1:A965 -  -  -  -  ; ***************************************************************************************
   18 D1:A965 -  -  -  -  
   19 D1:A965 -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A965 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A96A 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A96E DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A971 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A973 -  -  -  -  		;
   25 D1:A973 ED 7B D5 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A978 C3 57 AA D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A97C -  -  -  -  
   28 D1:A97C -  -  -  -  ; ***************************************************************************************
   29 D1:A97C -  -  -  -  ;
   30 D1:A97C -  -  -  -  ;									Changes and Updates
   31 D1:A97C -  -  -  -  ;
   32 D1:A97C -  -  -  -  ; ***************************************************************************************
   33 D1:A97C -  -  -  -  ;
   34 D1:A97C -  -  -  -  ;		Date			Notes
   35 D1:A97C -  -  -  -  ;		==== 			=====
   36 D1:A97C -  -  -  -  ;
   37 D1:A97C -  -  -  -  ; ***************************************************************************************
   38 D1:A97C -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A97C -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:A97C -  -  -  -  ; ***************************************************************************************
    2 D1:A97C -  -  -  -  ; ***************************************************************************************
    3 D1:A97C -  -  -  -  ;
    4 D1:A97C -  -  -  -  ;		Name : 		let.asm
    5 D1:A97C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A97C -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A97C -  -  -  -  ;		Reviewed :	No
    8 D1:A97C -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:A97C -  -  -  -  ;
   10 D1:A97C -  -  -  -  ; ***************************************************************************************
   11 D1:A97C -  -  -  -  ; ***************************************************************************************
   12 D1:A97C -  -  -  -  
   13 D1:A97C -  -  -  -  ; ***************************************************************************************
   14 D1:A97C -  -  -  -  ;
   15 D1:A97C -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:A97C -  -  -  -  ;
   17 D1:A97C -  -  -  -  ; ***************************************************************************************
   18 D1:A97C -  -  -  -  
   19 D1:A97C -  -  -  -  Command_LET: 	;; [let]
   20 D1:A97C DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:A97F FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:A981 28 2F -  -  		jr 		z,_CLString
   23 D1:A983 FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:A985 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:A987 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:A989 32 F5 A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:A98D -  -  -  -  _CLNoAuto:
   28 D1:A98D 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:A98F CD B6 AC D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:A993 CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:A995 CA 6B AB D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:A999 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:A99A C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:A99B AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:A99C 32 F5 A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:A9A0 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:A9A2 CD F5 AA D1 		call 	CheckNextA
   38 D1:A9A6 -  -  -  -  
   39 D1:A9A6 CD 2C AD D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:A9AA -  -  -  -  
   41 D1:A9AA D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:A9AB 43 -  -  -  		ld 		b,e 						
   43 D1:A9AC D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:A9AD -  -  -  -  		;
   45 D1:A9AD -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:A9AD -  -  -  -  		;
   47 D1:A9AD CD BA A9 D1 		call 	WriteHLToDE
   48 D1:A9B1 C9 -  -  -  		ret
   49 D1:A9B2 -  -  -  -  		;
   50 D1:A9B2 -  -  -  -  		; 		String assignment code
   51 D1:A9B2 -  -  -  -  		;
   52 D1:A9B2 -  -  -  -  _CLString:
   53 D1:A9B2 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:A9BA -  -  -  -  
   55 D1:A9BA -  -  -  -  ; ***************************************************************************************
   56 D1:A9BA -  -  -  -  ;
   57 D1:A9BA -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:A9BA -  -  -  -  ;
   59 D1:A9BA -  -  -  -  ; ***************************************************************************************
   60 D1:A9BA -  -  -  -  
   61 D1:A9BA -  -  -  -  WriteHLToDE:
   62 D1:A9BA CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:A9BC C2 5F AB D1 		jp 		nz,TypeMismatch
   64 D1:A9C0 -  -  -  -  		;
   65 D1:A9C0 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:A9C0 -  -  -  -  		;		
   67 D1:A9C0 -  -  -  -  _WHDWriteNumber:
   68 D1:A9C0 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:A9C1 D9 -  -  -  		exx
   70 D1:A9C2 EB -  -  -  		ex 		de,hl
   71 D1:A9C3 D9 -  -  -  		exx
   72 D1:A9C4 -  -  -  -  
   73 D1:A9C4 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:A9C5 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:A9C6 72 -  -  -  		ld 		(hl),d
   76 D1:A9C7 23 -  -  -  		inc 	hl
   77 D1:A9C8 E5 -  -  -  		push 	hl
   78 D1:A9C9 D9 -  -  -  		exx
   79 D1:A9CA E1 -  -  -  		pop 	hl
   80 D1:A9CB 73 -  -  -  		ld 		(hl),e
   81 D1:A9CC 23 -  -  -  		inc 	hl
   82 D1:A9CD 72 -  -  -  		ld 		(hl),d
   83 D1:A9CE D9 -  -  -  		exx
   84 D1:A9CF -  -  -  -  
   85 D1:A9CF C9 -  -  -  		ret
   86 D1:A9D0 -  -  -  -  
   87 D1:A9D0 -  -  -  -  ; ***************************************************************************************
   88 D1:A9D0 -  -  -  -  ;
   89 D1:A9D0 -  -  -  -  ;									Changes and Updates
   90 D1:A9D0 -  -  -  -  ;
   91 D1:A9D0 -  -  -  -  ; ***************************************************************************************
   92 D1:A9D0 -  -  -  -  ;
   93 D1:A9D0 -  -  -  -  ;		Date			Notes
   94 D1:A9D0 -  -  -  -  ;		==== 			=====
   95 D1:A9D0 -  -  -  -  ;
   96 D1:A9D0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   19 D1:A9D0 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:A9D0 -  -  -  -  ; ***************************************************************************************
    2 D1:A9D0 -  -  -  -  ; ***************************************************************************************
    3 D1:A9D0 -  -  -  -  ;
    4 D1:A9D0 -  -  -  -  ;		Name : 		print.asm
    5 D1:A9D0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9D0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9D0 -  -  -  -  ;		Reviewed :	No
    8 D1:A9D0 -  -  -  -  ;		Purpose :	Print command
    9 D1:A9D0 -  -  -  -  ;
   10 D1:A9D0 -  -  -  -  ; ***************************************************************************************
   11 D1:A9D0 -  -  -  -  ; ***************************************************************************************
   12 D1:A9D0 -  -  -  -  
   13 D1:A9D0 -  -  -  -  ; ***************************************************************************************
   14 D1:A9D0 -  -  -  -  ;
   15 D1:A9D0 -  -  -  -  ;										PRINT command
   16 D1:A9D0 -  -  -  -  ;
   17 D1:A9D0 -  -  -  -  ; ***************************************************************************************
   18 D1:A9D0 -  -  -  -  
   19 D1:A9D0 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:A9D0 -  -  -  -  		;
   21 D1:A9D0 -  -  -  -  		;		Main loop
   22 D1:A9D0 -  -  -  -  		;
   23 D1:A9D0 -  -  -  -  _CPRLoop:
   24 D1:A9D0 DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:A9D3 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:A9D5 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:A9D7 FE A7 -  -  		cp 		KWD_COLON 	
   28 D1:A9D9 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:A9DB FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:A9DD 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:A9DF FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:A9E1 28 2C -  -  		jr 		z,_CPRTab
   33 D1:A9E3 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:A9E5 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:A9E7 -  -  -  -  		;
   36 D1:A9E7 CD 2C AD D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:A9EB CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:A9ED 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:A9EF -  -  -  -  		;
   40 D1:A9EF 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:A9F1 -  -  -  -  _CPRPrintNumber:
   42 D1:A9F1 F5 -  -  -  		push 	af 							; print leading space
   43 D1:A9F2 3E 20 -  -  		ld 		a,' '
   44 D1:A9F4 CD 50 B6 D1 		call 	SYSPrintChar
   45 D1:A9F8 F1 -  -  -  		pop 	af
   46 D1:A9F9 01 09 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:A9FD C5 -  -  -  		push 	bc
   48 D1:A9FE CD DD B5 D1 		call 	Int32ToString 				; convert to string
   49 D1:AA02 E1 -  -  -  		pop 	hl
   50 D1:AA03 -  -  -  -  		;
   51 D1:AA03 -  -  -  -  		; 		Print text at HL.
   52 D1:AA03 -  -  -  -  		;
   53 D1:AA03 -  -  -  -  _CPRPrintHL:
   54 D1:AA03 CD 65 B0 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AA07 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AA09 -  -  -  -  		;
   57 D1:AA09 -  -  -  -  		; 		New line (')
   58 D1:AA09 -  -  -  -  		;
   59 D1:AA09 -  -  -  -  _CPRNewLine:
   60 D1:AA09 CD 78 B6 D1 		call 	SYSPrintCRLF
   61 D1:AA0D 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:AA0F -  -  -  -  		;
   63 D1:AA0F -  -  -  -  		; 		Tab command (,)
   64 D1:AA0F -  -  -  -  		;
   65 D1:AA0F -  -  -  -  _CPRTab:
   66 D1:AA0F 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:AA11 CD 50 B6 D1 		call 	SYSPrintChar
   68 D1:AA15 -  -  -  -  		;
   69 D1:AA15 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:AA15 -  -  -  -  		;
   71 D1:AA15 -  -  -  -  _CPRCheckNext:
   72 D1:AA15 DD 23 -  -  		inc 	ix 							; consume current
   73 D1:AA17 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:AA1A FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:AA1C C8 -  -  -  		ret 	z
   76 D1:AA1D FE A7 -  -  		cp 		KWD_COLON
   77 D1:AA1F C8 -  -  -  		ret 	z
   78 D1:AA20 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:AA22 -  -  -  -  		;
   80 D1:AA22 -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:AA22 -  -  -  -  		;
   82 D1:AA22 -  -  -  -  _CPRExitNL:
   83 D1:AA22 CD 78 B6 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:AA26 C9 -  -  -  		ret
Listing for file "_build.asm"
   20 D1:AA27 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AA27 -  -  -  -  ; ***************************************************************************************
    2 D1:AA27 -  -  -  -  ; ***************************************************************************************
    3 D1:AA27 -  -  -  -  ;
    4 D1:AA27 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AA27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA27 -  -  -  -  ;		Reviewed :	No
    8 D1:AA27 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AA27 -  -  -  -  ;
   10 D1:AA27 -  -  -  -  ; ***************************************************************************************
   11 D1:AA27 -  -  -  -  ; ***************************************************************************************
   12 D1:AA27 -  -  -  -  
   13 D1:AA27 -  -  -  -  ; ***************************************************************************************
   14 D1:AA27 -  -  -  -  ;
   15 D1:AA27 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AA27 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AA27 -  -  -  -  ;
   18 D1:AA27 -  -  -  -  ; ***************************************************************************************
   19 D1:AA27 -  -  -  -  
   20 D1:AA27 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AA27 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AA27 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AA2A DD 23 -  -  		inc 	ix
   24 D1:AA2C FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AA2E C8 -  -  -  		ret 	z
   26 D1:AA2F FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AA31 C8 -  -  -  		ret 	z
   28 D1:AA32 FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AA34 C2 6B AB D1 		jp 		nz,SyntaxError
   30 D1:AA38 -  -  -  -  		;		
   31 D1:AA38 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AA3C DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AA3F 13 -  -  -  		inc 	de 
   34 D1:AA40 13 -  -  -  		inc 	de
   35 D1:AA41 DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AA43 C9 -  -  -  		ret
   37 D1:AA44 -  -  -  -  
   38 D1:AA44 -  -  -  -  ; ***************************************************************************************
   39 D1:AA44 -  -  -  -  ;
   40 D1:AA44 -  -  -  -  ;									Changes and Updates
   41 D1:AA44 -  -  -  -  ;
   42 D1:AA44 -  -  -  -  ; ***************************************************************************************
   43 D1:AA44 -  -  -  -  ;
   44 D1:AA44 -  -  -  -  ;		Date			Notes
   45 D1:AA44 -  -  -  -  ;		==== 			=====
   46 D1:AA44 -  -  -  -  ;
   47 D1:AA44 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AA44 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AA44 -  -  -  -  ; ***************************************************************************************
    2 D1:AA44 -  -  -  -  ; ***************************************************************************************
    3 D1:AA44 -  -  -  -  ;
    4 D1:AA44 -  -  -  -  ;		Name : 		run.asm
    5 D1:AA44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA44 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA44 -  -  -  -  ;		Reviewed :	No
    8 D1:AA44 -  -  -  -  ;		Purpose :	Run command
    9 D1:AA44 -  -  -  -  ;
   10 D1:AA44 -  -  -  -  ; ***************************************************************************************
   11 D1:AA44 -  -  -  -  ; ***************************************************************************************
   12 D1:AA44 -  -  -  -  
   13 D1:AA44 -  -  -  -  ; ***************************************************************************************
   14 D1:AA44 -  -  -  -  ;
   15 D1:AA44 -  -  -  -  ;										RUN command
   16 D1:AA44 -  -  -  -  ;
   17 D1:AA44 -  -  -  -  ; ***************************************************************************************
   18 D1:AA44 -  -  -  -  
   19 D1:AA44 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AA44 CD 0B B0 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AA48 -  -  -  -  
   22 D1:AA48 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AA4D ED 73 D5 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AA52 AF -  -  -  		xor 	a
   25 D1:AA53 32 F5 A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AA57 -  -  -  -  		;
   27 D1:AA57 -  -  -  -  		; 		New line at IX.
   28 D1:AA57 -  -  -  -  		;
   29 D1:AA57 -  -  -  -  CRNewLine:
   30 D1:AA57 DD 22 D1 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AA5C -  -  -  -  		;
   32 D1:AA5C DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AA5F B7 -  -  -  		or 		a
   34 D1:AA60 CA 5F A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AA64 -  -  -  -  		;
   36 D1:AA64 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AA66 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AA68 DD 23 -  -  		inc 	ix
   39 D1:AA6A -  -  -  -  		;
   40 D1:AA6A -  -  -  -  		; 		New command at IX
   41 D1:AA6A -  -  -  -  		;
   42 D1:AA6A -  -  -  -  _CRNewCommand:	
   43 D1:AA6A DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AA6D B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AA6E F2 A9 AA D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AA72 -  -  -  -  		;
   47 D1:AA72 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AA74 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AA76 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AA78 D2 99 AA D1 		jp 		nc,_CRAlternateLets
   51 D1:AA7C -  -  -  -  		;
   52 D1:AA7C -  -  -  -  _CRDoCommand:		
   53 D1:AA7C E6 7F 21 00 
              00 00 6F 29 
              29 11 FE B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AA91 DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AA93 CD D9 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AA97 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AA99 -  -  -  -  		;
   58 D1:AA99 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AA99 -  -  -  -  		;
   60 D1:AA99 -  -  -  -  		;
   61 D1:AA99 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AA99 -  -  -  -  		;		
   63 D1:AA99 -  -  -  -  _CRAlternateLets:		
   64 D1:AA99 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AA9B 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AA9D FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AA9F 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AAA1 FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AAA3 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AAA5 C3 6B AB D1 		jp 		SyntaxError
   71 D1:AAA9 -  -  -  -  		;
   72 D1:AAA9 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AAA9 -  -  -  -  		;
   74 D1:AAA9 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AAA9 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AAAB D2 6B AB D1 		jp 		nc,SyntaxError
   77 D1:AAAF -  -  -  -  _CRAssignmentLet:		
   78 D1:AAAF CD 7C A9 D1 		call	Command_LET 				; do LET.
   79 D1:AAB3 C3 6A AA D1 		jp 		_CRNewCommand
   80 D1:AAB7 -  -  -  -  
   81 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   82 D1:AAB7 -  -  -  -  ;
   83 D1:AAB7 -  -  -  -  ;									Changes and Updates
   84 D1:AAB7 -  -  -  -  ;
   85 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   86 D1:AAB7 -  -  -  -  ;
   87 D1:AAB7 -  -  -  -  ;		Date			Notes
   88 D1:AAB7 -  -  -  -  ;		==== 			=====
   89 D1:AAB7 -  -  -  -  ;
   90 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   91 D1:AAB7 -  -  -  -  		
Listing for file "_build.asm"
   22 D1:AAB7 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AAB7 -  -  -  -  ; ***************************************************************************************
    2 D1:AAB7 -  -  -  -  ; ***************************************************************************************
    3 D1:AAB7 -  -  -  -  ;
    4 D1:AAB7 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AAB7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAB7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAB7 -  -  -  -  ;		Reviewed :	No
    8 D1:AAB7 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AAB7 -  -  -  -  ;
   10 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   11 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   12 D1:AAB7 -  -  -  -  
   13 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   14 D1:AAB7 -  -  -  -  ;
   15 D1:AAB7 -  -  -  -  ;										STOP command
   16 D1:AAB7 -  -  -  -  ;
   17 D1:AAB7 -  -  -  -  ; ***************************************************************************************
   18 D1:AAB7 -  -  -  -  
   19 D1:AAB7 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AAB7 3E 0C C3 01 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AABD -  -  -  -  
   22 D1:AABD -  -  -  -  ; ***************************************************************************************
   23 D1:AABD -  -  -  -  ;
   24 D1:AABD -  -  -  -  ;									Changes and Updates
   25 D1:AABD -  -  -  -  ;
   26 D1:AABD -  -  -  -  ; ***************************************************************************************
   27 D1:AABD -  -  -  -  ;
   28 D1:AABD -  -  -  -  ;		Date			Notes
   29 D1:AABD -  -  -  -  ;		==== 			=====
   30 D1:AABD -  -  -  -  ;
   31 D1:AABD -  -  -  -  ; ***************************************************************************************
   32 D1:AABD -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AABD -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AABD -  -  -  -  ; ***************************************************************************************
    2 D1:AABD -  -  -  -  ; ***************************************************************************************
    3 D1:AABD -  -  -  -  ;
    4 D1:AABD -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AABD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AABD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AABD -  -  -  -  ;		Reviewed :	No
    8 D1:AABD -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AABD -  -  -  -  ;
   10 D1:AABD -  -  -  -  ; ***************************************************************************************
   11 D1:AABD -  -  -  -  ; ***************************************************************************************
   12 D1:AABD -  -  -  -  
   13 D1:AABD -  -  -  -  ; ***************************************************************************************
   14 D1:AABD -  -  -  -  ;
   15 D1:AABD -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AABD -  -  -  -  ;
   17 D1:AABD -  -  -  -  ; ***************************************************************************************
   18 D1:AABD -  -  -  -  
   19 D1:AABD -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AABD             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AABD             		inc 	ix
   22 D1:AABD             		cp 		ch 							; exit if matches
   23 D1:AABD             		ret 	z
   24 D1:AABD             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AABD             		jp 		ErrorHandler
   26 D1:AABD             #endmacro
   27 D1:AABD -  -  -  -  
   28 D1:AABD -  -  -  -  CheckLeftBracket:
   29 D1:AABD DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 01 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AACB -  -  -  -  
   31 D1:AACB -  -  -  -  CheckRightBracket:
   32 D1:AACB DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 01 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AAD9 -  -  -  -  
   34 D1:AAD9 -  -  -  -  CheckDollar:
   35 D1:AAD9 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 01 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AAE7 -  -  -  -  		
   37 D1:AAE7 -  -  -  -  CheckComma:
   38 D1:AAE7 DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 01 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AAF5 -  -  -  -  
   40 D1:AAF5 -  -  -  -  ; ***************************************************************************************
   41 D1:AAF5 -  -  -  -  ;
   42 D1:AAF5 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AAF5 -  -  -  -  ;
   44 D1:AAF5 -  -  -  -  ; ***************************************************************************************
   45 D1:AAF5 -  -  -  -  
   46 D1:AAF5 -  -  -  -  CheckNextA:
   47 D1:AAF5 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AAF8 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AAFA C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AAFB 3E 0D C3 01 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AB01 -  -  -  -  		
   52 D1:AB01 -  -  -  -  ; ***************************************************************************************
   53 D1:AB01 -  -  -  -  ;
   54 D1:AB01 -  -  -  -  ;									Changes and Updates
   55 D1:AB01 -  -  -  -  ;
   56 D1:AB01 -  -  -  -  ; ***************************************************************************************
   57 D1:AB01 -  -  -  -  ;
   58 D1:AB01 -  -  -  -  ;		Date			Notes
   59 D1:AB01 -  -  -  -  ;		==== 			=====
   60 D1:AB01 -  -  -  -  ;
   61 D1:AB01 -  -  -  -  ; ***************************************************************************************
   62 D1:AB01 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AB01 -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AB01 -  -  -  -  ; ***************************************************************************************
    2 D1:AB01 -  -  -  -  ; ***************************************************************************************
    3 D1:AB01 -  -  -  -  ;
    4 D1:AB01 -  -  -  -  ;		Name : 		errors.asm
    5 D1:AB01 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB01 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB01 -  -  -  -  ;		Reviewed :	No
    8 D1:AB01 -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AB01 -  -  -  -  ;
   10 D1:AB01 -  -  -  -  ; ***************************************************************************************
   11 D1:AB01 -  -  -  -  ; ***************************************************************************************
   12 D1:AB01 -  -  -  -  
   13 D1:AB01 -  -  -  -  ; ***************************************************************************************
   14 D1:AB01 -  -  -  -  ;
   15 D1:AB01 -  -  -  -  ;								Error handler, message A 
   16 D1:AB01 -  -  -  -  ;
   17 D1:AB01 -  -  -  -  ; ***************************************************************************************
   18 D1:AB01 -  -  -  -  
   19 D1:AB01 -  -  -  -  ErrorHandler:
   20 D1:AB01 F5 -  -  -  		push 	af 						; save error ID
   21 D1:AB02 -  -  -  -  
   22 D1:AB02 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AB06 6F -  -  -  		ld 		l,a
   24 D1:AB07 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AB08 29 -  -  -  		add 	hl,hl 		
   26 D1:AB09 11 D1 B1 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AB0D 19 -  -  -  		add 	hl,de
   28 D1:AB0E ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AB10 CD 65 B0 D1 		call 	PrintStringAtHL
   30 D1:AB14 -  -  -  -  		;
   31 D1:AB14 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AB15 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AB16 28 2F -  -  		jr 		z,_EHExit
   34 D1:AB18 -  -  -  -  		;
   35 D1:AB18 DD 2A D1 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AB1D DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AB20 B7 -  -  -  		or 		a
   38 D1:AB21 28 24 -  -  		jr 		z,_EHExit
   39 D1:AB23 -  -  -  -  
   40 D1:AB23 21 4F AB D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AB27 CD 65 B0 D1 		call 	PrintStringAtHL 
   42 D1:AB2B -  -  -  -  		
   43 D1:AB2B D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AB2C 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AB30 D9 -  -  -  		exx 
   46 D1:AB31 DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AB34 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AB37 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AB39 01 09 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AB3D CD DD B5 D1 		call 	Int32ToString
   51 D1:AB41 C5 -  -  -  		push 	bc
   52 D1:AB42 E1 -  -  -  		pop 	hl
   53 D1:AB43 CD 65 B0 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AB47 -  -  -  -  _EHExit:		
   55 D1:AB47 CD 78 B6 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AB4B C3 9B A8 D1 		jp 		WarmStart
   57 D1:AB4F -  -  -  -  
   58 D1:AB4F -  -  -  -  _EHAtText:
   59 D1:AB4F 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AB59 -  -  -  -  
   61 D1:AB59 -  -  -  -  NotImplemented:
   62 D1:AB59 3E 04 C3 01 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AB5F -  -  -  -  TypeMismatch:
   64 D1:AB5F 3E 02 C3 01 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AB65 -  -  -  -  BadValue:
   66 D1:AB65 3E 03 C3 01 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AB6B -  -  -  -  SyntaxError:
   68 D1:AB6B 3E 0D C3 01 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AB71 -  -  -  -  						
   70 D1:AB71 -  -  -  -  ; ***************************************************************************************
   71 D1:AB71 -  -  -  -  ;
   72 D1:AB71 -  -  -  -  ;									Changes and Updates
   73 D1:AB71 -  -  -  -  ;
   74 D1:AB71 -  -  -  -  ; ***************************************************************************************
   75 D1:AB71 -  -  -  -  ;
   76 D1:AB71 -  -  -  -  ;		Date			Notes
   77 D1:AB71 -  -  -  -  ;		==== 			=====
   78 D1:AB71 -  -  -  -  ;
   79 D1:AB71 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   25 D1:AB71 -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AB71 -  -  -  -  ; ***************************************************************************************
    2 D1:AB71 -  -  -  -  ; ***************************************************************************************
    3 D1:AB71 -  -  -  -  ;
    4 D1:AB71 -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AB71 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB71 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB71 -  -  -  -  ;		Reviewed :	No
    8 D1:AB71 -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AB71 -  -  -  -  ;
   10 D1:AB71 -  -  -  -  ; ***************************************************************************************
   11 D1:AB71 -  -  -  -  ; ***************************************************************************************
   12 D1:AB71 -  -  -  -  
   13 D1:AB71 -  -  -  -  ; ***************************************************************************************
   14 D1:AB71 -  -  -  -  ;
   15 D1:AB71 -  -  -  -  ; 									Addition
   16 D1:AB71 -  -  -  -  ;
   17 D1:AB71 -  -  -  -  ; ***************************************************************************************
   18 D1:AB71 -  -  -  -  
   19 D1:AB71 -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AB71 CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 5C 
              B5 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AB7F -  -  -  -  
   22 D1:AB7F -  -  -  -  ; ***************************************************************************************
   23 D1:AB7F -  -  -  -  ;
   24 D1:AB7F -  -  -  -  ; 									Subtraction
   25 D1:AB7F -  -  -  -  ;
   26 D1:AB7F -  -  -  -  ; ***************************************************************************************
   27 D1:AB7F -  -  -  -  
   28 D1:AB7F -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AB7F CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 64 
              B5 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AB8D -  -  -  -  
   31 D1:AB8D -  -  -  -  ; ***************************************************************************************
   32 D1:AB8D -  -  -  -  ;
   33 D1:AB8D -  -  -  -  ; 									  Multiply
   34 D1:AB8D -  -  -  -  ;
   35 D1:AB8D -  -  -  -  ; ***************************************************************************************
   36 D1:AB8D -  -  -  -  
   37 D1:AB8D -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AB8D CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 23 
              B5 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AB9B -  -  -  -  
   40 D1:AB9B -  -  -  -  ; ***************************************************************************************
   41 D1:AB9B -  -  -  -  ;
   42 D1:AB9B -  -  -  -  ; 									  Divide
   43 D1:AB9B -  -  -  -  ;
   44 D1:AB9B -  -  -  -  ; ***************************************************************************************
   45 D1:AB9B -  -  -  -  
   46 D1:AB9B -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AB9B -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AB9B CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 23 
              B4 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:ABA9 -  -  -  -  
   50 D1:ABA9 -  -  -  -  ; ***************************************************************************************
   51 D1:ABA9 -  -  -  -  ;
   52 D1:ABA9 -  -  -  -  ; 									  Modulus
   53 D1:ABA9 -  -  -  -  ;
   54 D1:ABA9 -  -  -  -  ; ***************************************************************************************
   55 D1:ABA9 -  -  -  -  
   56 D1:ABA9 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:ABA9 CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 26 
              B4 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:ABB7 -  -  -  -  
   59 D1:ABB7 -  -  -  -  ; ***************************************************************************************
   60 D1:ABB7 -  -  -  -  ;
   61 D1:ABB7 -  -  -  -  ; 									  Logical
   62 D1:ABB7 -  -  -  -  ;
   63 D1:ABB7 -  -  -  -  ; ***************************************************************************************
   64 D1:ABB7 -  -  -  -  
   65 D1:ABB7 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:ABB7 CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 6E 
              B5 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:ABC5 -  -  -  -  
   68 D1:ABC5 -  -  -  -  ALUOr: 			;; [or]
   69 D1:ABC5 CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 7B 
              B5 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ABD3 -  -  -  -  
   71 D1:ABD3 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ABD3 CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 88 
              B5 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ABE1 -  -  -  -  
   74 D1:ABE1 -  -  -  -  ; ***************************************************************************************
   75 D1:ABE1 -  -  -  -  ;
   76 D1:ABE1 -  -  -  -  ;									Changes and Updates
   77 D1:ABE1 -  -  -  -  ;
   78 D1:ABE1 -  -  -  -  ; ***************************************************************************************
   79 D1:ABE1 -  -  -  -  ;
   80 D1:ABE1 -  -  -  -  ;		Date			Notes
   81 D1:ABE1 -  -  -  -  ;		==== 			=====
   82 D1:ABE1 -  -  -  -  ;
   83 D1:ABE1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:ABE1 -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ABE1 -  -  -  -  ; ***************************************************************************************
    2 D1:ABE1 -  -  -  -  ; ***************************************************************************************
    3 D1:ABE1 -  -  -  -  ;
    4 D1:ABE1 -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ABE1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABE1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABE1 -  -  -  -  ;		Reviewed :	No
    8 D1:ABE1 -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ABE1 -  -  -  -  ;
   10 D1:ABE1 -  -  -  -  ; ***************************************************************************************
   11 D1:ABE1 -  -  -  -  ; ***************************************************************************************
   12 D1:ABE1 -  -  -  -  
   13 D1:ABE1 -  -  -  -  ; ***************************************************************************************
   14 D1:ABE1 -  -  -  -  ;
   15 D1:ABE1 -  -  -  -  ; 									<l> <op> <r>
   16 D1:ABE1 -  -  -  -  ;
   17 D1:ABE1 -  -  -  -  ; ***************************************************************************************
   18 D1:ABE1 -  -  -  -  
   19 D1:ABE1 -  -  -  -  ALULongReference:			;; [!]
   20 D1:ABE1 CD F1 AB D1 		call 	BRGetAddress 				; calculate address
   21 D1:ABE5 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:ABE7 CB F9 -  -  		set 	CIsReference,c
   23 D1:ABE9 C9 -  -  -  		ret
   24 D1:ABEA -  -  -  -  
   25 D1:ABEA -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:ABEA CD E1 AB D1 		call 	ALULongReference
   27 D1:ABEE CB F1 -  -  		set 	CIsByteReference,c
   28 D1:ABF0 C9 -  -  -  		ret
   29 D1:ABF1 -  -  -  -  
   30 D1:ABF1 -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:ABF1 CD 8E AC D1 
              78 B1 C2 5F 
              AB D1 C3 FF 
              AB D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ABFF -  -  -  -  _BRGAMain:		
   33 D1:ABFF CD 5C B5 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AC03 CD 94 AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AC07 C9 -  -  -  		ret
   36 D1:AC08 -  -  -  -  
   37 D1:AC08 -  -  -  -  ; ***************************************************************************************
   38 D1:AC08 -  -  -  -  ;
   39 D1:AC08 -  -  -  -  ;									Changes and Updates
   40 D1:AC08 -  -  -  -  ;
   41 D1:AC08 -  -  -  -  ; ***************************************************************************************
   42 D1:AC08 -  -  -  -  ;
   43 D1:AC08 -  -  -  -  ;		Date			Notes
   44 D1:AC08 -  -  -  -  ;		==== 			=====
   45 D1:AC08 -  -  -  -  ;
   46 D1:AC08 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC08 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AC08 -  -  -  -  ; ***************************************************************************************
    2 D1:AC08 -  -  -  -  ; ***************************************************************************************
    3 D1:AC08 -  -  -  -  ;
    4 D1:AC08 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AC08 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC08 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC08 -  -  -  -  ;		Reviewed :	No
    8 D1:AC08 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AC08 -  -  -  -  ;
   10 D1:AC08 -  -  -  -  ; ***************************************************************************************
   11 D1:AC08 -  -  -  -  ; ***************************************************************************************
   12 D1:AC08 -  -  -  -  
   13 D1:AC08 -  -  -  -  #macro compare_equals(n)
   14 D1:AC08             		call 	CompareBaseCode
   15 D1:AC08             		cp 		n
   16 D1:AC08             		jr 		z,UnaryInt32True
   17 D1:AC08             		jr 		UnaryInt32False
   18 D1:AC08             #endmacro
   19 D1:AC08 -  -  -  -  
   20 D1:AC08 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AC08             		call 	CompareBaseCode
   22 D1:AC08             		cp 		n
   23 D1:AC08             		jr 		nz,UnaryInt32True
   24 D1:AC08             		jr 		UnaryInt32False
   25 D1:AC08             #endmacro
   26 D1:AC08 -  -  -  -  
   27 D1:AC08 -  -  -  -  ; ***************************************************************************************
   28 D1:AC08 -  -  -  -  ;
   29 D1:AC08 -  -  -  -  ; 								Return True/False
   30 D1:AC08 -  -  -  -  ;
   31 D1:AC08 -  -  -  -  ; ***************************************************************************************
   32 D1:AC08 -  -  -  -  
   33 D1:AC08 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AC08 3E FF -  -  		ld 		a,255
   35 D1:AC0A 18 01 -  -  		jr 		_Int32Logical
   36 D1:AC0C -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:AC0C AF -  -  -  		xor 	a
   38 D1:AC0D -  -  -  -  _Int32Logical:
   39 D1:AC0D 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AC0E 67 -  -  -  		ld 		h,a
   41 D1:AC0F D9 -  -  -  		exx
   42 D1:AC10 6F -  -  -  		ld 		l,a
   43 D1:AC11 67 -  -  -  		ld 		h,a
   44 D1:AC12 D9 -  -  -  		exx
   45 D1:AC13 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AC15 C9 -  -  -  		ret
   47 D1:AC16 -  -  -  -  
   48 D1:AC16 -  -  -  -  ; ***************************************************************************************
   49 D1:AC16 -  -  -  -  ;
   50 D1:AC16 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AC16 -  -  -  -  ;
   52 D1:AC16 -  -  -  -  ; ***************************************************************************************
   53 D1:AC16 -  -  -  -  
   54 D1:AC16 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AC16 CD 52 AC D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AC20 -  -  -  -  
   57 D1:AC20 -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AC20 CD 52 AC D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AC2A -  -  -  -  
   60 D1:AC2A -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AC2A CD 52 AC D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AC34 -  -  -  -  
   63 D1:AC34 -  -  -  -  ; ***************************************************************************************
   64 D1:AC34 -  -  -  -  ;
   65 D1:AC34 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AC34 -  -  -  -  ;
   67 D1:AC34 -  -  -  -  ; ***************************************************************************************
   68 D1:AC34 -  -  -  -  
   69 D1:AC34 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AC34 CD 52 AC D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AC3E -  -  -  -  
   72 D1:AC3E -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AC3E CD 52 AC D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AC48 -  -  -  -  
   75 D1:AC48 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AC48 CD 52 AC D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AC52 -  -  -  -  
   78 D1:AC52 -  -  -  -  ; ***************************************************************************************
   79 D1:AC52 -  -  -  -  ;
   80 D1:AC52 -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AC52 -  -  -  -  ;
   82 D1:AC52 -  -  -  -  ; ***************************************************************************************
   83 D1:AC52 -  -  -  -  
   84 D1:AC52 -  -  -  -  CompareBaseCode:
   85 D1:AC52 CD 8E AC D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AC56 -  -  -  -  
   87 D1:AC56 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AC57 A1 -  -  -  		and 	c
   89 D1:AC58 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AC5A C2 6C AC D1 		jp 		nz,StringCompare
   91 D1:AC5E -  -  -  -  
   92 D1:AC5E 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AC5F B1 -  -  -  		or 		c
   94 D1:AC60 CB 47 -  -  		bit 	CIsString,a 
   95 D1:AC62 CA 9C B5 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AC66 -  -  -  -  
   97 D1:AC66 3E 02 C3 01 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AC6C -  -  -  -  ;
   99 D1:AC6C -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AC6C -  -  -  -  ;
  101 D1:AC6C -  -  -  -  StringCompare:
  102 D1:AC6C 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AC6D BE -  -  -  		cp 		(hl)
  104 D1:AC6E 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AC70 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AC72 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AC73 23 -  -  -  		inc 	hl
  108 D1:AC74 FE 20 -  -  		cp 		' '
  109 D1:AC76 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AC78 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AC79 C9 -  -  -  		ret
  112 D1:AC7A -  -  -  -  
  113 D1:AC7A -  -  -  -  _SCLess:
  114 D1:AC7A 3E FF -  -  		ld 		a,$FF
  115 D1:AC7C C9 -  -  -  		ret
  116 D1:AC7D -  -  -  -  _SCGreater:
  117 D1:AC7D 3E 01 -  -  		ld 		a,1
  118 D1:AC7F C9 -  -  -  		ret
  119 D1:AC80 -  -  -  -  
  120 D1:AC80 3E 0E C3 01 
              AB D1 -  -  		ERR_TODO()
  121 D1:AC86 -  -  -  -  
  122 D1:AC86 -  -  -  -  ; ***************************************************************************************
  123 D1:AC86 -  -  -  -  ;
  124 D1:AC86 -  -  -  -  ;									Changes and Updates
  125 D1:AC86 -  -  -  -  ;
  126 D1:AC86 -  -  -  -  ; ***************************************************************************************
  127 D1:AC86 -  -  -  -  ;
  128 D1:AC86 -  -  -  -  ;		Date			Notes
  129 D1:AC86 -  -  -  -  ;		==== 			=====
  130 D1:AC86 -  -  -  -  ;
  131 D1:AC86 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC86 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AC86 -  -  -  -  ; ***************************************************************************************
    2 D1:AC86 -  -  -  -  ; ***************************************************************************************
    3 D1:AC86 -  -  -  -  ;
    4 D1:AC86 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AC86 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC86 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC86 -  -  -  -  ;		Reviewed :	No
    8 D1:AC86 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AC86 -  -  -  -  ;
   10 D1:AC86 -  -  -  -  ; ***************************************************************************************
   11 D1:AC86 -  -  -  -  ; ***************************************************************************************
   12 D1:AC86 -  -  -  -  
   13 D1:AC86 -  -  -  -  ; ***************************************************************************************
   14 D1:AC86 -  -  -  -  ;
   15 D1:AC86 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AC86 -  -  -  -  ;
   17 D1:AC86 -  -  -  -  ; ***************************************************************************************
   18 D1:AC86 -  -  -  -  
   19 D1:AC86 -  -  -  -  SwapHLDE:
   20 D1:AC86 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AC87 D9 -  -  -  			exx
   22 D1:AC88 EB -  -  -  			ex 		de,hl
   23 D1:AC89 D9 -  -  -  			exx
   24 D1:AC8A 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AC8B 41 -  -  -  			ld 		b,c
   26 D1:AC8C 4F -  -  -  			ld 		c,a
   27 D1:AC8D C9 -  -  -  			ret
   28 D1:AC8E -  -  -  -  
   29 D1:AC8E -  -  -  -  ; ***************************************************************************************
   30 D1:AC8E -  -  -  -  ;
   31 D1:AC8E -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AC8E -  -  -  -  ;
   33 D1:AC8E -  -  -  -  ; ***************************************************************************************
   34 D1:AC8E -  -  -  -  
   35 D1:AC8E -  -  -  -  DereferenceBoth:
   36 D1:AC8E CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AC90 C4 67 AD D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AC94 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AC96 C8 -  -  -  			ret 	z
   40 D1:AC97 CD 86 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AC9B CD 67 AD D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AC9F CD 86 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ACA3 C9 -  -  -  			ret
   44 D1:ACA4 -  -  -  -  
   45 D1:ACA4 -  -  -  -  ; ***************************************************************************************
   46 D1:ACA4 -  -  -  -  ;
   47 D1:ACA4 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ACA4 -  -  -  -  ;
   49 D1:ACA4 -  -  -  -  ; ***************************************************************************************
   50 D1:ACA4 -  -  -  -  
   51 D1:ACA4 -  -  -  -  NegateHLHL:	
   52 D1:ACA4 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ACA6 C2 5F AB D1 			jp 		nz,TypeMismatch
   54 D1:ACAA CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ACAC C4 67 AD D1 			call 	nz,Dereference 			; if required.
   56 D1:ACB0 CD C6 B5 D1 			call 	Int32Negate
   57 D1:ACB4 C9 -  -  -  			ret
Listing for file "_build.asm"
   29 D1:ACB5 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ACB5 -  -  -  -  ; ***************************************************************************************
    2 D1:ACB5 -  -  -  -  ; ***************************************************************************************
    3 D1:ACB5 -  -  -  -  ;
    4 D1:ACB5 -  -  -  -  ;		Name : 		expression.asm
    5 D1:ACB5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACB5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACB5 -  -  -  -  ;		Reviewed :	None
    8 D1:ACB5 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ACB5 -  -  -  -  ;
   10 D1:ACB5 -  -  -  -  ; ***************************************************************************************
   11 D1:ACB5 -  -  -  -  ; ***************************************************************************************
   12 D1:ACB5 -  -  -  -  
   13 D1:ACB5 -  -  -  -  ; ***************************************************************************************
   14 D1:ACB5 -  -  -  -  ;
   15 D1:ACB5 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ACB5 -  -  -  -  ;
   17 D1:ACB5 -  -  -  -  ; ***************************************************************************************
   18 D1:ACB5 -  -  -  -  
   19 D1:ACB5 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ACB5 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ACB6 -  -  -  -  EvaluateAtPrecedence:
   22 D1:ACB6 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ACB7 -  -  -  -  		;
   24 D1:ACB7 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ACB7 -  -  -  -  		;
   26 D1:ACB7 CD C3 AD D1 		call 	EvaluateTerm 				; get term
   27 D1:ACBB -  -  -  -  		;
   28 D1:ACBB -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ACBB -  -  -  -  		;
   30 D1:ACBB D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ACBC -  -  -  -  _EAPLoop:
   32 D1:ACBC DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ACBF FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ACC1 D8 -  -  -  		ret 	c
   35 D1:ACC2 FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ACC4 D0 -  -  -  		ret 	nc
   37 D1:ACC5 -  -  -  -  		;
   38 D1:ACC5 -  -  -  -  		; 		Get the precedence.
   39 D1:ACC5 -  -  -  -  		;
   40 D1:ACC5 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ACC6 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ACC8 21 C0 B1 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ACCC B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ACCD 6F -  -  -  		ld 		l,a
   45 D1:ACCE 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ACCF E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ACD0 -  -  -  -  		;
   48 D1:ACD0 -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ACD0 -  -  -  -  		;
   50 D1:ACD0 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ACD1 BB -  -  -  		cp 		e
   52 D1:ACD2 D0 -  -  -  		ret 	nc
   53 D1:ACD3 -  -  -  -  
   54 D1:ACD3 -  -  -  -  		;
   55 D1:ACD3 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ACD3 -  -  -  -  		;
   57 D1:ACD3 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ACD4 -  -  -  -  		;
   59 D1:ACD4 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ACD7 F5 -  -  -  		push 	af
   61 D1:ACD8 -  -  -  -  		;
   62 D1:ACD8 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ACD9 D9 -  -  -  		exx 								; save HL'
   64 D1:ACDA E5 -  -  -  		push 	hl
   65 D1:ACDB D9 -  -  -  		exx 								
   66 D1:ACDC E5 -  -  -  		push 	hl 							; save HL
   67 D1:ACDD -  -  -  -  		;
   68 D1:ACDD DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ACDF -  -  -  -  		;
   70 D1:ACDF -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ACDF -  -  -  -  		;
   72 D1:ACDF 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ACE0 CD B6 AC D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ACE4 -  -  -  -  		;
   75 D1:ACE4 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ACE4 -  -  -  -  		;
   77 D1:ACE4 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ACE5 -  -  -  -  
   79 D1:ACE5 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ACE6 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:ACE7 D9 -  -  -  		exx
   82 D1:ACE8 EB -  -  -  		ex 		de,hl
   83 D1:ACE9 E1 -  -  -  		pop 	hl
   84 D1:ACEA D9 -  -  -  		exx
   85 D1:ACEB C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:ACEC 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:ACED -  -  -  -  		;
   88 D1:ACED -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:ACED -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:ACED -  -  -  -  		;
   91 D1:ACED F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:ACEE -  -  -  -  		;
   93 D1:ACEE -  -  -  -  		; 		Call the binary operator in A.
   94 D1:ACEE -  -  -  -  		;
   95 D1:ACEE D5 -  -  -  		push 	de
   96 D1:ACEF E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:ACF0 E6 7F 21 00 
              00 00 6F 29 
              29 11 FE B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AD05 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AD06 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AD07 CD D9 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AD0B -  -  -  -  		;
  102 D1:AD0B D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AD0C -  -  -  -  		;
  104 D1:AD0C 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AD0E -  -  -  -  
  106 D1:AD0E -  -  -  -  ; ***************************************************************************************
  107 D1:AD0E -  -  -  -  ;
  108 D1:AD0E -  -  -  -  ;									Changes and Updates
  109 D1:AD0E -  -  -  -  ;
  110 D1:AD0E -  -  -  -  ; ***************************************************************************************
  111 D1:AD0E -  -  -  -  ;
  112 D1:AD0E -  -  -  -  ;		Date			Notes
  113 D1:AD0E -  -  -  -  ;		==== 			=====
  114 D1:AD0E -  -  -  -  ;
  115 D1:AD0E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD0E -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AD0E -  -  -  -  ; ***************************************************************************************
    2 D1:AD0E -  -  -  -  ; ***************************************************************************************
    3 D1:AD0E -  -  -  -  ;
    4 D1:AD0E -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AD0E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD0E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD0E -  -  -  -  ;		Reviewed :	No
    8 D1:AD0E -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AD0E -  -  -  -  ;
   10 D1:AD0E -  -  -  -  ; ***************************************************************************************
   11 D1:AD0E -  -  -  -  ; ***************************************************************************************
   12 D1:AD0E -  -  -  -  
   13 D1:AD0E -  -  -  -  ; ***************************************************************************************
   14 D1:AD0E -  -  -  -  ;
   15 D1:AD0E -  -  -  -  ; 								Evaluate an integer term
   16 D1:AD0E -  -  -  -  ;
   17 D1:AD0E -  -  -  -  ; ***************************************************************************************
   18 D1:AD0E -  -  -  -  
   19 D1:AD0E -  -  -  -  EvaluateIntegerTerm:
   20 D1:AD0E CD C3 AD D1 		call 	EvaluateTerm
   21 D1:AD12 CD 67 AD D1 		call 	DeReference
   22 D1:AD16 CB 41 -  -  		bit 	CIsString,c
   23 D1:AD18 C8 -  -  -  		ret 	z
   24 D1:AD19 C3 5F AB D1 		jp 		TypeMismatch
   25 D1:AD1D -  -  -  -  
   26 D1:AD1D -  -  -  -  ; ***************************************************************************************
   27 D1:AD1D -  -  -  -  ;
   28 D1:AD1D -  -  -  -  ; 								Evaluate a string term
   29 D1:AD1D -  -  -  -  ;
   30 D1:AD1D -  -  -  -  ; ***************************************************************************************
   31 D1:AD1D -  -  -  -  
   32 D1:AD1D -  -  -  -  EvaluateStringTerm:
   33 D1:AD1D CD C3 AD D1 		call 	EvaluateTerm
   34 D1:AD21 CD 67 AD D1 		call 	DeReference
   35 D1:AD25 CB 41 -  -  		bit 	CIsString,c
   36 D1:AD27 C0 -  -  -  		ret 	nz
   37 D1:AD28 C3 5F AB D1 		jp 		TypeMismatch
   38 D1:AD2C -  -  -  -  
   39 D1:AD2C -  -  -  -  ; ***************************************************************************************
   40 D1:AD2C -  -  -  -  ;
   41 D1:AD2C -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AD2C -  -  -  -  ;
   43 D1:AD2C -  -  -  -  ; ***************************************************************************************
   44 D1:AD2C -  -  -  -  
   45 D1:AD2C -  -  -  -  EvaluateValue:
   46 D1:AD2C CD B5 AC D1 		call 	EvaluateAtPrecedence0
   47 D1:AD30 C3 67 AD D1 		jp 		Dereference
   48 D1:AD34 -  -  -  -  
   49 D1:AD34 -  -  -  -  ; ***************************************************************************************
   50 D1:AD34 -  -  -  -  ;
   51 D1:AD34 -  -  -  -  ; 									Evaluate a number
   52 D1:AD34 -  -  -  -  ;
   53 D1:AD34 -  -  -  -  ; ***************************************************************************************
   54 D1:AD34 -  -  -  -  
   55 D1:AD34 -  -  -  -  EvaluateInteger:
   56 D1:AD34 CD 2C AD D1 		call 	EvaluateValue
   57 D1:AD38 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AD3A C8 -  -  -  		ret 	z
   59 D1:AD3B C3 5F AB D1 		jp 		TypeMismatch
   60 D1:AD3F -  -  -  -  
   61 D1:AD3F -  -  -  -  ; ***************************************************************************************
   62 D1:AD3F -  -  -  -  ;
   63 D1:AD3F -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AD3F -  -  -  -  ;
   65 D1:AD3F -  -  -  -  ; ***************************************************************************************
   66 D1:AD3F -  -  -  -  
   67 D1:AD3F -  -  -  -  Evaluate8BitInteger:
   68 D1:AD3F CD 34 AD D1 		call 	EvaluateInteger
   69 D1:AD43 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AD44 7C -  -  -  		ld 		a,h
   71 D1:AD45 B5 -  -  -  		or 		l
   72 D1:AD46 D9 -  -  -  		exx 	
   73 D1:AD47 B4 -  -  -  		or 		h
   74 D1:AD48 C2 65 AB D1 		jp 		nz,BadValue
   75 D1:AD4C 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AD4D C9 -  -  -  		ret
   77 D1:AD4E -  -  -  -  		
   78 D1:AD4E -  -  -  -  ; ***************************************************************************************
   79 D1:AD4E -  -  -  -  ;
   80 D1:AD4E -  -  -  -  ; 									Evaluate a string
   81 D1:AD4E -  -  -  -  ;
   82 D1:AD4E -  -  -  -  ; ***************************************************************************************
   83 D1:AD4E -  -  -  -  
   84 D1:AD4E -  -  -  -  EvaluateStringOnly:
   85 D1:AD4E CD 2C AD D1 		call 	EvaluateValue
   86 D1:AD52 CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AD54 CA 5F AB D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AD58 C9 -  -  -  		ret
   89 D1:AD59 -  -  -  -  
   90 D1:AD59 -  -  -  -  ; ***************************************************************************************
   91 D1:AD59 -  -  -  -  ;
   92 D1:AD59 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AD59 -  -  -  -  ;
   94 D1:AD59 -  -  -  -  ; ***************************************************************************************
   95 D1:AD59 -  -  -  -  
   96 D1:AD59 -  -  -  -  Return8BitConstant:
   97 D1:AD59 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AD5D 6F -  -  -  		ld 		l,a
   99 D1:AD5E -  -  -  -  Return16BitConstant:
  100 D1:AD5E D9 -  -  -  		exx 								; clear HL'
  101 D1:AD5F 21 00 00 00 		ld 		hl,0
  102 D1:AD63 D9 -  -  -  		exx
  103 D1:AD64 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AD66 C9 -  -  -  		ret
  105 D1:AD67 -  -  -  -  
  106 D1:AD67 -  -  -  -  ; ***************************************************************************************
  107 D1:AD67 -  -  -  -  ;
  108 D1:AD67 -  -  -  -  ;									Changes and Updates
  109 D1:AD67 -  -  -  -  ;
  110 D1:AD67 -  -  -  -  ; ***************************************************************************************
  111 D1:AD67 -  -  -  -  ;
  112 D1:AD67 -  -  -  -  ;		Date			Notes
  113 D1:AD67 -  -  -  -  ;		==== 			=====
  114 D1:AD67 -  -  -  -  ;
  115 D1:AD67 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD67 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AD67 -  -  -  -  ; ***************************************************************************************
    2 D1:AD67 -  -  -  -  ; ***************************************************************************************
    3 D1:AD67 -  -  -  -  ;
    4 D1:AD67 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AD67 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD67 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AD67 -  -  -  -  ;		Reviewed :	No
    8 D1:AD67 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AD67 -  -  -  -  ;
   10 D1:AD67 -  -  -  -  ; ***************************************************************************************
   11 D1:AD67 -  -  -  -  ; ***************************************************************************************
   12 D1:AD67 -  -  -  -  
   13 D1:AD67 -  -  -  -  ; ***************************************************************************************
   14 D1:AD67 -  -  -  -  ;
   15 D1:AD67 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AD67 -  -  -  -  ;
   17 D1:AD67 -  -  -  -  ; ***************************************************************************************
   18 D1:AD67 -  -  -  -  
   19 D1:AD67 -  -  -  -  Dereference:
   20 D1:AD67 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AD69 C8 -  -  -  		ret 	z
   22 D1:AD6A -  -  -  -  
   23 D1:AD6A CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AD6C -  -  -  -  		
   25 D1:AD6C CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AD6E 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AD70 -  -  -  -  
   28 D1:AD70 CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AD72 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AD74 -  -  -  -  
   31 D1:AD74 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AD75 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AD77 D9 -  -  -  		exx
   34 D1:AD78 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AD79 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AD7A 23 -  -  -  		inc  	hl
   37 D1:AD7B ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AD7D D9 -  -  -  		exx 								; fix back
   39 D1:AD7E C9 -  -  -  		ret
   40 D1:AD7F -  -  -  -  
   41 D1:AD7F -  -  -  -  _DeRefByte:		
   42 D1:AD7F 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AD80 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AD84 6F -  -  -  		ld	 	l,a
   45 D1:AD85 D9 -  -  -  		exx
   46 D1:AD86 21 00 00 00 		ld 		hl,$0000
   47 D1:AD8A D9 -  -  -  		exx
   48 D1:AD8B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AD8D C9 -  -  -  		ret
   50 D1:AD8E -  -  -  -  
   51 D1:AD8E -  -  -  -  _DRInternal:
   52 D1:AD8E 3E 04 C3 01 
              AB D1 -  -  		ERR_DISABLED
   53 D1:AD94 -  -  -  -  
   54 D1:AD94 -  -  -  -  ; ***************************************************************************************
   55 D1:AD94 -  -  -  -  ;
   56 D1:AD94 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AD94 -  -  -  -  ;
   58 D1:AD94 -  -  -  -  ; ***************************************************************************************
   59 D1:AD94 -  -  -  -  
   60 D1:AD94 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AD94 -  -  -  -  		#ifdef EZ80
   62 D1:AD94 22 DF A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AD98 D9 -  -  -  		exx
   64 D1:AD99 22 E1 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AD9D 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:ADA1 D9 -  -  -  		exx
   67 D1:ADA2 2A DF A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ADA6 -  -  -  -  		#endif
   69 D1:ADA6 C9 -  -  -  		ret
   70 D1:ADA7 -  -  -  -  
   71 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   72 D1:ADA7 -  -  -  -  ;
   73 D1:ADA7 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ADA7 -  -  -  -  ;
   75 D1:ADA7 -  -  -  -  ; ***************************************************************************************
   76 D1:ADA7 -  -  -  -  
   77 D1:ADA7 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ADA7 -  -  -  -  		#ifdef EZ80
   79 D1:ADA7 22 DF A8 D1 		ld 		(AConvert),hl
   80 D1:ADAB 21 00 00 00 		ld 		hl,$0000
   81 D1:ADAF 22 E2 A8 D1 		ld 		(AConvert+3),hl
   82 D1:ADB3 D9 -  -  -  		exx
   83 D1:ADB4 2A E1 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:ADB8 D9 -  -  -  		exx
   85 D1:ADB9 AF -  -  -  		xor 	a
   86 D1:ADBA 32 E1 A8 D1 		ld 		(AConvert+2),a
   87 D1:ADBE 2A DF A8 D1 		ld 		hl,(AConvert)
   88 D1:ADC2 -  -  -  -  		#endif
   89 D1:ADC2 C9 -  -  -  		ret
   90 D1:ADC3 -  -  -  -  
   91 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   92 D1:ADC3 -  -  -  -  ;
   93 D1:ADC3 -  -  -  -  ;									Changes and Updates
   94 D1:ADC3 -  -  -  -  ;
   95 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   96 D1:ADC3 -  -  -  -  ;
   97 D1:ADC3 -  -  -  -  ;		Date			Notes
   98 D1:ADC3 -  -  -  -  ;		==== 			=====
   99 D1:ADC3 -  -  -  -  ;
  100 D1:ADC3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:ADC3 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:ADC3 -  -  -  -  ; ***************************************************************************************
    2 D1:ADC3 -  -  -  -  ; ***************************************************************************************
    3 D1:ADC3 -  -  -  -  ;
    4 D1:ADC3 -  -  -  -  ;		Name : 		term.asm
    5 D1:ADC3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADC3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADC3 -  -  -  -  ;		Reviewed :	No
    8 D1:ADC3 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:ADC3 -  -  -  -  ;
   10 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   11 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   12 D1:ADC3 -  -  -  -  
   13 D1:ADC3 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:ADC3             		add_hlhl_16
   15 D1:ADC3             		exx
   16 D1:ADC3             		adc_hlhl_16
   17 D1:ADC3             		exx
   18 D1:ADC3             #endmacro
   19 D1:ADC3 -  -  -  -  
   20 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   21 D1:ADC3 -  -  -  -  ;
   22 D1:ADC3 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:ADC3 -  -  -  -  ;
   24 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   25 D1:ADC3 -  -  -  -  ;
   26 D1:ADC3 -  -  -  -  ; 		Terms can be:
   27 D1:ADC3 -  -  -  -  ;
   28 D1:ADC3 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:ADC3 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:ADC3 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:ADC3 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:ADC3 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:ADC3 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:ADC3 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:ADC3 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:ADC3 -  -  -  -  ; 														reference of some sort.
   37 D1:ADC3 -  -  -  -  ;
   38 D1:ADC3 -  -  -  -  ; ***************************************************************************************
   39 D1:ADC3 -  -  -  -  
   40 D1:ADC3 -  -  -  -  EvaluateTerm:		
   41 D1:ADC3 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:ADC5 D9 -  -  -  		exx
   43 D1:ADC6 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:ADCA D9 -  -  -  		exx
   45 D1:ADCB 21 00 00 00 		ld 		hl,$0000		
   46 D1:ADCF -  -  -  -  		;
   47 D1:ADCF DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:ADD2 FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:ADD4 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:ADD6 DA 8E AE D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:ADDA CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:ADDC C2 32 AE D1 		jp 		nz,_ETFoundKeyword 
   53 D1:ADE0 -  -  -  -  		;
   54 D1:ADE0 -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:ADE0 -  -  -  -  		;
   56 D1:ADE0 -  -  -  -  _ETIntegerConstant:
   57 D1:ADE0 -  -  -  -  		;
   58 D1:ADE0 -  -  -  -  _ETIntegerLoop:		
   59 D1:ADE0 DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:ADE3 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:ADE5 B5 -  -  -  		or 		l 							; or into L
   62 D1:ADE6 6F -  -  -  		ld 		l,a
   63 D1:ADE7 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:ADE9 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:ADEC C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:ADEE FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:ADF0 D8 -  -  -  		ret 	c
   68 D1:ADF1 -  -  -  -  
   69 D1:ADF1 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:ADF8 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:ADFF 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AE06 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AE0D 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AE14 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AE1B -  -  -  -  
   76 D1:AE1B 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AE1D -  -  -  -  		;
   78 D1:AE1D -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AE1D -  -  -  -  		;
   80 D1:AE1D -  -  -  -  _ETStringMarker:		
   81 D1:AE1D DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AE1F DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AE21 DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AE23 E1 -  -  -  		pop 	hl
   85 D1:AE24 11 00 00 00 		ld 		de,$0000
   86 D1:AE28 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AE2B DD 19 -  -  		add 	ix,de
   88 D1:AE2D DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AE2F 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AE31 C9 -  -  -  		ret
   91 D1:AE32 -  -  -  -  		;
   92 D1:AE32 -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AE32 -  -  -  -  		;
   94 D1:AE32 -  -  -  -  _ETFoundKeyword:
   95 D1:AE32 DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AE34 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AE36 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AE38 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AE3A 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AE3C -  -  -  -  		;
  101 D1:AE3C -  -  -  -  		;		Unary group 0
  102 D1:AE3C -  -  -  -  		;
  103 D1:AE3C E6 7F 21 00 
              00 00 6F 29 
              29 11 FE B2 
              D1 19 ED 17 
              ED 53 DA A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AE51 C3 D9 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AE55 -  -  -  -  
  106 D1:AE55 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AE55 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AE57 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AE59 -  -  -  -  		;
  110 D1:AE59 -  -  -  -  		; 		- term
  111 D1:AE59 -  -  -  -  		;
  112 D1:AE59 CD 0E AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AE5D CD A4 AC D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AE61 C9 -  -  -  		ret
  115 D1:AE62 -  -  -  -  		;
  116 D1:AE62 -  -  -  -  		;		! ? indirection check
  117 D1:AE62 -  -  -  -  		;
  118 D1:AE62 -  -  -  -  _ETCheckIndirection:	
  119 D1:AE62 FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AE64 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AE66 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AE68 C2 6B AB D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AE6C -  -  -  -  		;
  124 D1:AE6C -  -  -  -  		; 		! ? indirection
  125 D1:AE6C -  -  -  -  		;
  126 D1:AE6C -  -  -  -  _ETIndirection:
  127 D1:AE6C F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AE6D CD C3 AD D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AE71 CD 67 AD D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AE75 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AE77 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AE79 CD 94 AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AE7D F1 -  -  -  		pop 	af 							; get type back
  134 D1:AE7E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AE80 CB F9 -  -  		set 	CIsReference,c
  136 D1:AE82 FE 83 -  -  		cp 		KWD_PLING
  137 D1:AE84 C8 -  -  -  		ret 	z
  138 D1:AE85 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AE87 C9 -  -  -  		ret
  140 D1:AE88 -  -  -  -  _ETStringIndirect:
  141 D1:AE88 3E 02 C3 01 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AE8E -  -  -  -  		;
  143 D1:AE8E -  -  -  -  		; 		Found an identifier.
  144 D1:AE8E -  -  -  -  		;
  145 D1:AE8E -  -  -  -  _ETVariable:
  146 D1:AE8E CD 70 B0 D1 		call 	FindVariable 				; find the variable.
  147 D1:AE92 D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AE93 3E 0F C3 01 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AE99 -  -  -  -  		
  150 D1:AE99 -  -  -  -  ; ***************************************************************************************
  151 D1:AE99 -  -  -  -  ;
  152 D1:AE99 -  -  -  -  ;									Changes and Updates
  153 D1:AE99 -  -  -  -  ;
  154 D1:AE99 -  -  -  -  ; ***************************************************************************************
  155 D1:AE99 -  -  -  -  ;
  156 D1:AE99 -  -  -  -  ;		Date			Notes
  157 D1:AE99 -  -  -  -  ;		==== 			=====
  158 D1:AE99 -  -  -  -  ;
  159 D1:AE99 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE99 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AE99 -  -  -  -  ; ***************************************************************************************
    2 D1:AE99 -  -  -  -  ; ***************************************************************************************
    3 D1:AE99 -  -  -  -  ;
    4 D1:AE99 -  -  -  -  ;		Name : 		abs.asm
    5 D1:AE99 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE99 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AE99 -  -  -  -  ;		Reviewed :	No
    8 D1:AE99 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AE99 -  -  -  -  ;
   10 D1:AE99 -  -  -  -  ; ***************************************************************************************
   11 D1:AE99 -  -  -  -  ; ***************************************************************************************
   12 D1:AE99 -  -  -  -  
   13 D1:AE99 -  -  -  -  ; ***************************************************************************************
   14 D1:AE99 -  -  -  -  ;
   15 D1:AE99 -  -  -  -  ;								abs( unary function
   16 D1:AE99 -  -  -  -  ;
   17 D1:AE99 -  -  -  -  ; ***************************************************************************************
   18 D1:AE99 -  -  -  -  
   19 D1:AE99 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AE99 CD 0E AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AE9D D9 -  -  -  		exx 								; test MSB
   22 D1:AE9E CB 7C -  -  		bit 	7,h
   23 D1:AEA0 D9 -  -  -  		exx
   24 D1:AEA1 C4 A4 AC D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AEA5 C9 -  -  -  		ret
   26 D1:AEA6 -  -  -  -  
   27 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   28 D1:AEA6 -  -  -  -  ;
   29 D1:AEA6 -  -  -  -  ;									Changes and Updates
   30 D1:AEA6 -  -  -  -  ;
   31 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   32 D1:AEA6 -  -  -  -  ;
   33 D1:AEA6 -  -  -  -  ;		Date			Notes
   34 D1:AEA6 -  -  -  -  ;		==== 			=====
   35 D1:AEA6 -  -  -  -  ;
   36 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   37 D1:AEA6 -  -  -  -  		
Listing for file "_build.asm"
   34 D1:AEA6 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AEA6 -  -  -  -  ; ***************************************************************************************
    2 D1:AEA6 -  -  -  -  ; ***************************************************************************************
    3 D1:AEA6 -  -  -  -  ;
    4 D1:AEA6 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AEA6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEA6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEA6 -  -  -  -  ;		Reviewed :	No
    8 D1:AEA6 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AEA6 -  -  -  -  ;
   10 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   11 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   12 D1:AEA6 -  -  -  -  
   13 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   14 D1:AEA6 -  -  -  -  ;
   15 D1:AEA6 -  -  -  -  ;								Asc unary function
   16 D1:AEA6 -  -  -  -  ;
   17 D1:AEA6 -  -  -  -  ; ***************************************************************************************
   18 D1:AEA6 -  -  -  -  
   19 D1:AEA6 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AEA6 CD 1D AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AEAA 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AEAB C3 59 AD D1 		jp 		Return8BitConstant
   23 D1:AEAF -  -  -  -  
   24 D1:AEAF -  -  -  -  ; ***************************************************************************************
   25 D1:AEAF -  -  -  -  ;
   26 D1:AEAF -  -  -  -  ;									Changes and Updates
   27 D1:AEAF -  -  -  -  ;
   28 D1:AEAF -  -  -  -  ; ***************************************************************************************
   29 D1:AEAF -  -  -  -  ;
   30 D1:AEAF -  -  -  -  ;		Date			Notes
   31 D1:AEAF -  -  -  -  ;		==== 			=====
   32 D1:AEAF -  -  -  -  ;
   33 D1:AEAF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AEAF -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AEAF -  -  -  -  ; ***************************************************************************************
    2 D1:AEAF -  -  -  -  ; ***************************************************************************************
    3 D1:AEAF -  -  -  -  ;
    4 D1:AEAF -  -  -  -  ;		Name : 		chr.asm
    5 D1:AEAF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEAF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEAF -  -  -  -  ;		Reviewed :	No
    8 D1:AEAF -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AEAF -  -  -  -  ;
   10 D1:AEAF -  -  -  -  ; ***************************************************************************************
   11 D1:AEAF -  -  -  -  ; ***************************************************************************************
   12 D1:AEAF -  -  -  -  
   13 D1:AEAF -  -  -  -  ; ***************************************************************************************
   14 D1:AEAF -  -  -  -  ;
   15 D1:AEAF -  -  -  -  ;								Chr$() unary function
   16 D1:AEAF -  -  -  -  ;
   17 D1:AEAF -  -  -  -  ; ***************************************************************************************
   18 D1:AEAF -  -  -  -  
   19 D1:AEAF -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AEAF CD D9 AA D1 		call 	CheckDollar
   21 D1:AEB3 CD 0E AD D1 		call 	EvaluateIntegerTerm
   22 D1:AEB7 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AEB8 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AEBA 21 08 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AEBE 36 0D -  -  		ld 		(hl),13
   26 D1:AEC0 2B -  -  -  		dec 	hl
   27 D1:AEC1 77 -  -  -  		ld 		(hl),a
   28 D1:AEC2 C9 -  -  -  		ret
   29 D1:AEC3 -  -  -  -  
   30 D1:AEC3 -  -  -  -  ; ***************************************************************************************
   31 D1:AEC3 -  -  -  -  ;
   32 D1:AEC3 -  -  -  -  ;									Changes and Updates
   33 D1:AEC3 -  -  -  -  ;
   34 D1:AEC3 -  -  -  -  ; ***************************************************************************************
   35 D1:AEC3 -  -  -  -  ;
   36 D1:AEC3 -  -  -  -  ;		Date			Notes
   37 D1:AEC3 -  -  -  -  ;		==== 			=====
   38 D1:AEC3 -  -  -  -  ;
   39 D1:AEC3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AEC3 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AEC3 -  -  -  -  ; ***************************************************************************************
    2 D1:AEC3 -  -  -  -  ; ***************************************************************************************
    3 D1:AEC3 -  -  -  -  ;
    4 D1:AEC3 -  -  -  -  ;		Name : 		len.asm
    5 D1:AEC3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEC3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEC3 -  -  -  -  ;		Reviewed :	None
    8 D1:AEC3 -  -  -  -  ;		Purpose :	String Length
    9 D1:AEC3 -  -  -  -  ;
   10 D1:AEC3 -  -  -  -  ; ***************************************************************************************
   11 D1:AEC3 -  -  -  -  ; ***************************************************************************************
   12 D1:AEC3 -  -  -  -  
   13 D1:AEC3 -  -  -  -  ; ***************************************************************************************
   14 D1:AEC3 -  -  -  -  ;
   15 D1:AEC3 -  -  -  -  ;								Len unary function
   16 D1:AEC3 -  -  -  -  ;
   17 D1:AEC3 -  -  -  -  ; ***************************************************************************************
   18 D1:AEC3 -  -  -  -  
   19 D1:AEC3 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AEC3 CD 1D AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AEC7 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AEC8 CD 0C AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AECC -  -  -  -  _ULCount:
   24 D1:AECC 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AECD FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AECF D8 -  -  -  		ret 	c
   27 D1:AED0 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AED1 13 -  -  -  		inc 	de
   29 D1:AED2 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AED4 -  -  -  -  
   31 D1:AED4 -  -  -  -  ; ***************************************************************************************
   32 D1:AED4 -  -  -  -  ;
   33 D1:AED4 -  -  -  -  ;									Changes and Updates
   34 D1:AED4 -  -  -  -  ;
   35 D1:AED4 -  -  -  -  ; ***************************************************************************************
   36 D1:AED4 -  -  -  -  ;
   37 D1:AED4 -  -  -  -  ;		Date			Notes
   38 D1:AED4 -  -  -  -  ;		==== 			=====
   39 D1:AED4 -  -  -  -  ;
   40 D1:AED4 -  -  -  -  ; ***************************************************************************************
   41 D1:AED4 -  -  -  -  		
Listing for file "_build.asm"
   37 D1:AED4 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AED4 -  -  -  -  ; ***************************************************************************************
    2 D1:AED4 -  -  -  -  ; ***************************************************************************************
    3 D1:AED4 -  -  -  -  ;
    4 D1:AED4 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AED4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AED4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AED4 -  -  -  -  ;		Reviewed :	No
    8 D1:AED4 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AED4 -  -  -  -  ;
   10 D1:AED4 -  -  -  -  ; ***************************************************************************************
   11 D1:AED4 -  -  -  -  ; ***************************************************************************************
   12 D1:AED4 -  -  -  -  
   13 D1:AED4 -  -  -  -  ; ***************************************************************************************
   14 D1:AED4 -  -  -  -  ;
   15 D1:AED4 -  -  -  -  ;								Str$() unary function
   16 D1:AED4 -  -  -  -  ;
   17 D1:AED4 -  -  -  -  ; ***************************************************************************************
   18 D1:AED4 -  -  -  -  
   19 D1:AED4 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AED4 CD 0E AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AED8 CD 94 AD D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AEDC 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AEDE C9 -  -  -  		ret
   24 D1:AEDF -  -  -  -  
   25 D1:AEDF -  -  -  -  ; ***************************************************************************************
   26 D1:AEDF -  -  -  -  ;
   27 D1:AEDF -  -  -  -  ;									Changes and Updates
   28 D1:AEDF -  -  -  -  ;
   29 D1:AEDF -  -  -  -  ; ***************************************************************************************
   30 D1:AEDF -  -  -  -  ;
   31 D1:AEDF -  -  -  -  ;		Date			Notes
   32 D1:AEDF -  -  -  -  ;		==== 			=====
   33 D1:AEDF -  -  -  -  ;
   34 D1:AEDF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:AEDF -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AEDF -  -  -  -  ; ***************************************************************************************
    2 D1:AEDF -  -  -  -  ; ***************************************************************************************
    3 D1:AEDF -  -  -  -  ;
    4 D1:AEDF -  -  -  -  ;		Name : 		not.asm
    5 D1:AEDF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEDF -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AEDF -  -  -  -  ;		Reviewed :	No
    8 D1:AEDF -  -  -  -  ;		Purpose :	Logical not
    9 D1:AEDF -  -  -  -  ;
   10 D1:AEDF -  -  -  -  ; ***************************************************************************************
   11 D1:AEDF -  -  -  -  ; ***************************************************************************************
   12 D1:AEDF -  -  -  -  
   13 D1:AEDF -  -  -  -  ; ***************************************************************************************
   14 D1:AEDF -  -  -  -  ;
   15 D1:AEDF -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AEDF -  -  -  -  ;
   17 D1:AEDF -  -  -  -  ; ***************************************************************************************
   18 D1:AEDF -  -  -  -  
   19 D1:AEDF -  -  -  -  Unary_Not:		;; [not]
   20 D1:AEDF CD 0E AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AEE3 CD EC AE D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AEE7 CD EC AE D1 		call 	__UNSwap		
   23 D1:AEEB C9 -  -  -  		ret
   24 D1:AEEC -  -  -  -  
   25 D1:AEEC -  -  -  -  __UNSwap:
   26 D1:AEEC 7C -  -  -  		ld 		a,h
   27 D1:AEED 2F -  -  -  		cpl
   28 D1:AEEE 67 -  -  -  		ld 		h,a
   29 D1:AEEF 7D -  -  -  		ld 		a,l
   30 D1:AEF0 2F -  -  -  		cpl 	
   31 D1:AEF1 6F -  -  -  		ld 		l,a
   32 D1:AEF2 D9 -  -  -  		exx
   33 D1:AEF3 C9 -  -  -  		ret
   34 D1:AEF4 -  -  -  -  
   35 D1:AEF4 -  -  -  -  ; ***************************************************************************************
   36 D1:AEF4 -  -  -  -  ;
   37 D1:AEF4 -  -  -  -  ;									Changes and Updates
   38 D1:AEF4 -  -  -  -  ;
   39 D1:AEF4 -  -  -  -  ; ***************************************************************************************
   40 D1:AEF4 -  -  -  -  ;
   41 D1:AEF4 -  -  -  -  ;		Date			Notes
   42 D1:AEF4 -  -  -  -  ;		==== 			=====
   43 D1:AEF4 -  -  -  -  ;
   44 D1:AEF4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AEF4 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AEF4 -  -  -  -  ; ***************************************************************************************
    2 D1:AEF4 -  -  -  -  ; ***************************************************************************************
    3 D1:AEF4 -  -  -  -  ;
    4 D1:AEF4 -  -  -  -  ;		Name : 		page.asm
    5 D1:AEF4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEF4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEF4 -  -  -  -  ;		Reviewed :	No
    8 D1:AEF4 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AEF4 -  -  -  -  ;
   10 D1:AEF4 -  -  -  -  ; ***************************************************************************************
   11 D1:AEF4 -  -  -  -  ; ***************************************************************************************
   12 D1:AEF4 -  -  -  -  
   13 D1:AEF4 -  -  -  -  ; ***************************************************************************************
   14 D1:AEF4 -  -  -  -  ;
   15 D1:AEF4 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AEF4 -  -  -  -  ;
   17 D1:AEF4 -  -  -  -  ; ***************************************************************************************
   18 D1:AEF4 -  -  -  -  
   19 D1:AEF4 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AEF4 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AEF8 D9 -  -  -  			exx
   22 D1:AEF9 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AEFD D9 -  -  -  			exx
   24 D1:AEFE 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF00 C9 -  -  -  			ret
   26 D1:AF01 -  -  -  -  
   27 D1:AF01 -  -  -  -  ; ***************************************************************************************
   28 D1:AF01 -  -  -  -  ;
   29 D1:AF01 -  -  -  -  ;									Changes and Updates
   30 D1:AF01 -  -  -  -  ;
   31 D1:AF01 -  -  -  -  ; ***************************************************************************************
   32 D1:AF01 -  -  -  -  ;
   33 D1:AF01 -  -  -  -  ;		Date			Notes
   34 D1:AF01 -  -  -  -  ;		==== 			=====
   35 D1:AF01 -  -  -  -  ;
   36 D1:AF01 -  -  -  -  ; ***************************************************************************************
   37 D1:AF01 -  -  -  -  			
Listing for file "_build.asm"
   40 D1:AF01 -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AF01 -  -  -  -  ; ***************************************************************************************
    2 D1:AF01 -  -  -  -  ; ***************************************************************************************
    3 D1:AF01 -  -  -  -  ;
    4 D1:AF01 -  -  -  -  ;		Name : 		random.asm
    5 D1:AF01 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF01 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF01 -  -  -  -  ;		Reviewed :	No
    8 D1:AF01 -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AF01 -  -  -  -  ;
   10 D1:AF01 -  -  -  -  ; ***************************************************************************************
   11 D1:AF01 -  -  -  -  ; ***************************************************************************************
   12 D1:AF01 -  -  -  -  
   13 D1:AF01 -  -  -  -  ; ***************************************************************************************
   14 D1:AF01 -  -  -  -  ;
   15 D1:AF01 -  -  -  -  ;								Random unary function
   16 D1:AF01 -  -  -  -  ;
   17 D1:AF01 -  -  -  -  ; ***************************************************************************************
   18 D1:AF01 -  -  -  -  
   19 D1:AF01 -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AF01 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AF09 CD 0E AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AF0D D9 -  -  -  		exx 								; is it -ve
   23 D1:AF0E CB 7C -  -  		bit 	7,h
   24 D1:AF10 D9 -  -  -  		exx
   25 D1:AF11 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AF13 22 E5 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AF17 D9 -  -  -  		exx
   28 D1:AF18 22 E9 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AF1C D9 -  -  -  		exx
   30 D1:AF1D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AF1F C9 -  -  -  		ret
   32 D1:AF20 -  -  -  -  _URDontSeed:		
   33 D1:AF20 -  -  -  -  
   34 D1:AF20 CD 95 B5 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AF24 28 1C -  -  		jr 		z,_URFail
   36 D1:AF26 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AF27 D9 -  -  -  		exx
   38 D1:AF28 E5 -  -  -  		push 	hl
   39 D1:AF29 D9 -  -  -  		exx
   40 D1:AF2A -  -  -  -  		;
   41 D1:AF2A CD 53 AF D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AF2E D9 -  -  -  		exx
   43 D1:AF2F CD 53 AF D1 		call 	URandomHL
   44 D1:AF33 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AF35 D9 -  -  -  		exx
   46 D1:AF36 -  -  -  -  		;
   47 D1:AF36 D9 -  -  -  		exx 								; restore range.
   48 D1:AF37 D1 -  -  -  		pop 	de
   49 D1:AF38 D9 -  -  -  		exx
   50 D1:AF39 D1 -  -  -  		pop 	de
   51 D1:AF3A -  -  -  -  		;
   52 D1:AF3A CD 26 B4 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AF3E 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AF3F 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AF41 C9 -  -  -  		ret
   56 D1:AF42 -  -  -  -  _URFail:
   57 D1:AF42 3E 03 C3 01 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:AF48 -  -  -  -  ; ***************************************************************************************
   59 D1:AF48 -  -  -  -  ;
   60 D1:AF48 -  -  -  -  ; 									Push RNG off zero
   61 D1:AF48 -  -  -  -  ;
   62 D1:AF48 -  -  -  -  ; ***************************************************************************************
   63 D1:AF48 -  -  -  -  
   64 D1:AF48 -  -  -  -  UnaryRandomInitialise:
   65 D1:AF48 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AF4A -  -  -  -  _URILoop:
   67 D1:AF4A C5 -  -  -  		push 	bc
   68 D1:AF4B CD 53 AF D1 		call 	URandomHL
   69 D1:AF4F C1 -  -  -  		pop 	bc
   70 D1:AF50 10 F8 -  -  		djnz 	_URILoop
   71 D1:AF52 C9 -  -  -  		ret
   72 D1:AF53 -  -  -  -  
   73 D1:AF53 -  -  -  -  ; ***************************************************************************************
   74 D1:AF53 -  -  -  -  ;
   75 D1:AF53 -  -  -  -  ;							16 bit random number generator
   76 D1:AF53 -  -  -  -  ;
   77 D1:AF53 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AF53 -  -  -  -  ;		Actual author unspecified.
   79 D1:AF53 -  -  -  -  ;
   80 D1:AF53 -  -  -  -  ; ***************************************************************************************
   81 D1:AF53 -  -  -  -  
   82 D1:AF53 -  -  -  -  URandomHL:
   83 D1:AF53 2A E5 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AF57 ED 5B E9 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AF5C 44 -  -  -  	    ld 		b,h
   86 D1:AF5D 4D -  -  -  	    ld 		c,l
   87 D1:AF5E 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AF63 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AF68 2C -  -  -  	    inc 	l
   90 D1:AF69 09 -  -  -  	    add 	hl,bc
   91 D1:AF6A 22 E5 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:AF6E 2A E9 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:AF72 ED 5A -  -  	    adc 	hl,de
   94 D1:AF74 22 E9 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:AF78 EB -  -  -  	    ex 		de,hl
   96 D1:AF79 2A ED A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:AF7D ED 4B F1 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:AF82 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:AF87 ED 43 F1 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:AF8C 9F -  -  -  	    sbc 	a,a
  101 D1:AF8D E6 C5 -  -  	    and 	%11000101
  102 D1:AF8F AD -  -  -  	    xor 	l
  103 D1:AF90 6F -  -  -  	    ld 		l,a
  104 D1:AF91 22 ED A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:AF95 EB -  -  -  	    ex 		de,hl
  106 D1:AF96 09 -  -  -  	    add 	hl,bc
  107 D1:AF97 C9 -  -  -  	    ret		
  108 D1:AF98 -  -  -  -  
  109 D1:AF98 -  -  -  -  ; ***************************************************************************************
  110 D1:AF98 -  -  -  -  ;
  111 D1:AF98 -  -  -  -  ;									Changes and Updates
  112 D1:AF98 -  -  -  -  ;
  113 D1:AF98 -  -  -  -  ; ***************************************************************************************
  114 D1:AF98 -  -  -  -  ;
  115 D1:AF98 -  -  -  -  ;		Date			Notes
  116 D1:AF98 -  -  -  -  ;		==== 			=====
  117 D1:AF98 -  -  -  -  ;
  118 D1:AF98 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:AF98 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:AF98 -  -  -  -  ; ***************************************************************************************
    2 D1:AF98 -  -  -  -  ; ***************************************************************************************
    3 D1:AF98 -  -  -  -  ;
    4 D1:AF98 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:AF98 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF98 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF98 -  -  -  -  ;		Reviewed :	No
    8 D1:AF98 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:AF98 -  -  -  -  ;
   10 D1:AF98 -  -  -  -  ; ***************************************************************************************
   11 D1:AF98 -  -  -  -  ; ***************************************************************************************
   12 D1:AF98 -  -  -  -  
   13 D1:AF98 -  -  -  -  ; ***************************************************************************************
   14 D1:AF98 -  -  -  -  ;
   15 D1:AF98 -  -  -  -  ;								sgn unary function
   16 D1:AF98 -  -  -  -  ;
   17 D1:AF98 -  -  -  -  ; ***************************************************************************************
   18 D1:AF98 -  -  -  -  
   19 D1:AF98 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:AF98 CD 0E AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:AF9C CD 95 B5 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:AFA0 CA 0C AC D1 		jp 		z,UnaryInt32False
   23 D1:AFA4 D9 -  -  -  		exx
   24 D1:AFA5 CB 7C -  -  		bit 	7,h
   25 D1:AFA7 D9 -  -  -  		exx
   26 D1:AFA8 C2 08 AC D1 		jp 		nz,UnaryInt32True
   27 D1:AFAC 3E 01 -  -  		ld 		a,1
   28 D1:AFAE C3 59 AD D1 		jp 		Return8BitConstant
   29 D1:AFB2 -  -  -  -  
   30 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   31 D1:AFB2 -  -  -  -  ;
   32 D1:AFB2 -  -  -  -  ;									Changes and Updates
   33 D1:AFB2 -  -  -  -  ;
   34 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   35 D1:AFB2 -  -  -  -  ;
   36 D1:AFB2 -  -  -  -  ;		Date			Notes
   37 D1:AFB2 -  -  -  -  ;		==== 			=====
   38 D1:AFB2 -  -  -  -  ;
   39 D1:AFB2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:AFB2 -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:AFB2 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB2 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB2 -  -  -  -  ;
    4 D1:AFB2 -  -  -  -  ;		Name : 		simple.asm
    5 D1:AFB2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFB2 -  -  -  -  ;		Reviewed :	No
    8 D1:AFB2 -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:AFB2 -  -  -  -  ;
   10 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   12 D1:AFB2 -  -  -  -  
   13 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   14 D1:AFB2 -  -  -  -  ;
   15 D1:AFB2 -  -  -  -  ;								( unary function (think about it)
   16 D1:AFB2 -  -  -  -  ;
   17 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   18 D1:AFB2 -  -  -  -  
   19 D1:AFB2 -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:AFB2 CD B5 AC D1 		call 	EvaluateAtPrecedence0
   21 D1:AFB6 C3 CB AA D1 		jp  	CheckRightBracket
   22 D1:AFBA -  -  -  -  
   23 D1:AFBA -  -  -  -  ; ***************************************************************************************
   24 D1:AFBA -  -  -  -  ;
   25 D1:AFBA -  -  -  -  ;									Handle &x
   26 D1:AFBA -  -  -  -  ;
   27 D1:AFBA -  -  -  -  ; ***************************************************************************************
   28 D1:AFBA -  -  -  -  
   29 D1:AFBA -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:AFBA DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:AFBD E6 C0 -  -  		and 		$C0
   32 D1:AFBF FE 40 -  -  		cp 			$40
   33 D1:AFC1 C2 6B AB D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:AFC5 C3 C3 AD D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:AFC9 -  -  -  -  
   36 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   37 D1:AFC9 -  -  -  -  ;
   38 D1:AFC9 -  -  -  -  ;									Changes and Updates
   39 D1:AFC9 -  -  -  -  ;
   40 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   41 D1:AFC9 -  -  -  -  ;
   42 D1:AFC9 -  -  -  -  ;		Date			Notes
   43 D1:AFC9 -  -  -  -  ;		==== 			=====
   44 D1:AFC9 -  -  -  -  ;
   45 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   46 D1:AFC9 -  -  -  -  		
Listing for file "_build.asm"
   43 D1:AFC9 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:AFC9 -  -  -  -  ; ***************************************************************************************
    2 D1:AFC9 -  -  -  -  ; ***************************************************************************************
    3 D1:AFC9 -  -  -  -  ;
    4 D1:AFC9 -  -  -  -  ;		Name : 		str.asm
    5 D1:AFC9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFC9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFC9 -  -  -  -  ;		Reviewed :	No
    8 D1:AFC9 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:AFC9 -  -  -  -  ;
   10 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   11 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   12 D1:AFC9 -  -  -  -  
   13 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   14 D1:AFC9 -  -  -  -  ;
   15 D1:AFC9 -  -  -  -  ;								Str$() unary function
   16 D1:AFC9 -  -  -  -  ;
   17 D1:AFC9 -  -  -  -  ; ***************************************************************************************
   18 D1:AFC9 -  -  -  -  
   19 D1:AFC9 -  -  -  -  Unary_Str:	;; [str]
   20 D1:AFC9 CD D9 AA D1 		call 	CheckDollar
   21 D1:AFCD CD 0E AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:AFD1 01 F7 A8 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:AFD5 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:AFD7 CD DD B5 D1 		call 	Int32ToString 				
   25 D1:AFDB 21 F7 A8 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:AFDF 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:AFE1 C9 -  -  -  		ret
   28 D1:AFE2 -  -  -  -  
   29 D1:AFE2 -  -  -  -  ; ***************************************************************************************
   30 D1:AFE2 -  -  -  -  ;
   31 D1:AFE2 -  -  -  -  ;									Changes and Updates
   32 D1:AFE2 -  -  -  -  ;
   33 D1:AFE2 -  -  -  -  ; ***************************************************************************************
   34 D1:AFE2 -  -  -  -  ;
   35 D1:AFE2 -  -  -  -  ;		Date			Notes
   36 D1:AFE2 -  -  -  -  ;		==== 			=====
   37 D1:AFE2 -  -  -  -  ;
   38 D1:AFE2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:AFE2 -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:AFE2 -  -  -  -  ; ***************************************************************************************
    2 D1:AFE2 -  -  -  -  ; ***************************************************************************************
    3 D1:AFE2 -  -  -  -  ;
    4 D1:AFE2 -  -  -  -  ;		Name : 		time.asm
    5 D1:AFE2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFE2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFE2 -  -  -  -  ;		Reviewed :	No
    8 D1:AFE2 -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:AFE2 -  -  -  -  ;
   10 D1:AFE2 -  -  -  -  ; ***************************************************************************************
   11 D1:AFE2 -  -  -  -  ; ***************************************************************************************
   12 D1:AFE2 -  -  -  -  
   13 D1:AFE2 -  -  -  -  ; ***************************************************************************************
   14 D1:AFE2 -  -  -  -  ;
   15 D1:AFE2 -  -  -  -  ;							Get system time in ms
   16 D1:AFE2 -  -  -  -  ;
   17 D1:AFE2 -  -  -  -  ; ***************************************************************************************
   18 D1:AFE2 -  -  -  -  
   19 D1:AFE2 -  -  -  -  Unary_Time:	;; [time]
   20 D1:AFE2 CD A0 B6 D1 			call 	SYSGetTimer
   21 D1:AFE6 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:AFE8 C9 -  -  -  			ret
   23 D1:AFE9 -  -  -  -  
   24 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   25 D1:AFE9 -  -  -  -  ;
   26 D1:AFE9 -  -  -  -  ;									Changes and Updates
   27 D1:AFE9 -  -  -  -  ;
   28 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   29 D1:AFE9 -  -  -  -  ;
   30 D1:AFE9 -  -  -  -  ;		Date			Notes
   31 D1:AFE9 -  -  -  -  ;		==== 			=====
   32 D1:AFE9 -  -  -  -  ;
   33 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   34 D1:AFE9 -  -  -  -  			
Listing for file "_build.asm"
   45 D1:AFE9 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:AFE9 -  -  -  -  ; ***************************************************************************************
    2 D1:AFE9 -  -  -  -  ; ***************************************************************************************
    3 D1:AFE9 -  -  -  -  ;
    4 D1:AFE9 -  -  -  -  ;		Name : 		top.asm
    5 D1:AFE9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFE9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFE9 -  -  -  -  ;		Reviewed :	No
    8 D1:AFE9 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AFE9 -  -  -  -  ;
   10 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   11 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   12 D1:AFE9 -  -  -  -  
   13 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   14 D1:AFE9 -  -  -  -  ;
   15 D1:AFE9 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AFE9 -  -  -  -  ;
   17 D1:AFE9 -  -  -  -  ; ***************************************************************************************
   18 D1:AFE9 -  -  -  -  
   19 D1:AFE9 -  -  -  -  Unary_Top:	;; [top]
   20 D1:AFE9 2A CD A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:AFED D9 -  -  -  			exx
   22 D1:AFEE 2A CF A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:AFF2 D9 -  -  -  			exx
   24 D1:AFF3 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AFF5 C9 -  -  -  			ret
   26 D1:AFF6 -  -  -  -  
   27 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   28 D1:AFF6 -  -  -  -  ;
   29 D1:AFF6 -  -  -  -  ;									Changes and Updates
   30 D1:AFF6 -  -  -  -  ;
   31 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   32 D1:AFF6 -  -  -  -  ;
   33 D1:AFF6 -  -  -  -  ;		Date			Notes
   34 D1:AFF6 -  -  -  -  ;		==== 			=====
   35 D1:AFF6 -  -  -  -  ;
   36 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   37 D1:AFF6 -  -  -  -  			
Listing for file "_build.asm"
   46 D1:AFF6 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:AFF6 -  -  -  -  ; ***************************************************************************************
    2 D1:AFF6 -  -  -  -  ; ***************************************************************************************
    3 D1:AFF6 -  -  -  -  ;
    4 D1:AFF6 -  -  -  -  ;		Name : 		val.asm
    5 D1:AFF6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFF6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFF6 -  -  -  -  ;		Reviewed :	No
    8 D1:AFF6 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:AFF6 -  -  -  -  ;
   10 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   11 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   12 D1:AFF6 -  -  -  -  
   13 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   14 D1:AFF6 -  -  -  -  ;
   15 D1:AFF6 -  -  -  -  ;								val( unary function
   16 D1:AFF6 -  -  -  -  ;
   17 D1:AFF6 -  -  -  -  ; ***************************************************************************************
   18 D1:AFF6 -  -  -  -  
   19 D1:AFF6 -  -  -  -  Unary_Val:	;; [val]
   20 D1:AFF6 CD 1D AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:AFFA E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:AFFB C1 -  -  -  		pop 	bc
   23 D1:AFFC 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:AFFE CD BB B4 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B002 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B004 C8 -  -  -  		ret		z 							; okay
   27 D1:B005 3E 03 C3 01 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B00B -  -  -  -  
   29 D1:B00B -  -  -  -  ; ***************************************************************************************
   30 D1:B00B -  -  -  -  ;
   31 D1:B00B -  -  -  -  ;									Changes and Updates
   32 D1:B00B -  -  -  -  ;
   33 D1:B00B -  -  -  -  ; ***************************************************************************************
   34 D1:B00B -  -  -  -  ;
   35 D1:B00B -  -  -  -  ;		Date			Notes
   36 D1:B00B -  -  -  -  ;		==== 			=====
   37 D1:B00B -  -  -  -  ;
   38 D1:B00B -  -  -  -  ; ***************************************************************************************
   39 D1:B00B -  -  -  -  		
Listing for file "_build.asm"
   47 D1:B00B -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B00B -  -  -  -  ; ***************************************************************************************
    2 D1:B00B -  -  -  -  ; ***************************************************************************************
    3 D1:B00B -  -  -  -  ;
    4 D1:B00B -  -  -  -  ;		Name : 		clear.asm
    5 D1:B00B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B00B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B00B -  -  -  -  ;		Reviewed :	No
    8 D1:B00B -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B00B -  -  -  -  ;
   10 D1:B00B -  -  -  -  ; ***************************************************************************************
   11 D1:B00B -  -  -  -  ; ***************************************************************************************
   12 D1:B00B -  -  -  -  
   13 D1:B00B -  -  -  -  ; ***************************************************************************************
   14 D1:B00B -  -  -  -  ;
   15 D1:B00B -  -  -  -  ;										CLEAR command
   16 D1:B00B -  -  -  -  ;
   17 D1:B00B -  -  -  -  ; ***************************************************************************************
   18 D1:B00B -  -  -  -  
   19 D1:B00B -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B00B -  -  -  -  		;
   21 D1:B00B -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B00B -  -  -  -  		;
   23 D1:B00B 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B00F -  -  -  -  _CCFindLow:
   25 D1:B00F 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B013 5E -  -  -  		ld 		e,(hl)		
   27 D1:B014 19 -  -  -  		add 	hl,de
   28 D1:B015 7B -  -  -  		ld 		a,e
   29 D1:B016 B7 -  -  -  		or 		a
   30 D1:B017 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B019 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B01A 22 CD A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B01E 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B01F 22 C9 A8 D1 		ld 		(LowAllocMemory),hl
   35 D1:B023 -  -  -  -  		;
   36 D1:B023 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B023 -  -  -  -  		;
   38 D1:B023 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B027 -  -  -  -  		;
   40 D1:B027 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B029 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B02D 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B031 19 -  -  -  		add 	hl,de
   44 D1:B032 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B034 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B038 -  -  -  -  		;
   47 D1:B038 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B03C 19 -  -  -  		add 	hl,de
   49 D1:B03D 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B041 -  -  -  -  		;
   51 D1:B041 -  -  -  -  		; 		TODO:Allocate space for, and erase all hash table pointers, 
   52 D1:B041 -  -  -  -  		;
   53 D1:B041 -  -  -  -  
   54 D1:B041 -  -  -  -  		;
   55 D1:B041 -  -  -  -  		; 		TODO:Seed the RNG incase the seeds were all zero which gives bad results
   56 D1:B041 -  -  -  -  		;
   57 D1:B041 CD 48 AF D1 		call 	UnaryRandomInitialise
   58 D1:B045 -  -  -  -  		;
   59 D1:B045 -  -  -  -  		;		TODO:RESTORE the Data Pointer.
   60 D1:B045 -  -  -  -  		;
   61 D1:B045 C9 -  -  -  		ret
   62 D1:B046 -  -  -  -  
   63 D1:B046 -  -  -  -  ; ***************************************************************************************
   64 D1:B046 -  -  -  -  ;
   65 D1:B046 -  -  -  -  ;									Changes and Updates
   66 D1:B046 -  -  -  -  ;
   67 D1:B046 -  -  -  -  ; ***************************************************************************************
   68 D1:B046 -  -  -  -  ;
   69 D1:B046 -  -  -  -  ;		Date			Notes
   70 D1:B046 -  -  -  -  ;		==== 			=====
   71 D1:B046 -  -  -  -  ;
   72 D1:B046 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   48 D1:B046 -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B046 -  -  -  -  ; ***************************************************************************************
    2 D1:B046 -  -  -  -  ; ***************************************************************************************
    3 D1:B046 -  -  -  -  ;
    4 D1:B046 -  -  -  -  ;		Name : 		instance.asm
    5 D1:B046 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B046 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B046 -  -  -  -  ;		Reviewed :	No
    8 D1:B046 -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B046 -  -  -  -  ;
   10 D1:B046 -  -  -  -  ; ***************************************************************************************
   11 D1:B046 -  -  -  -  ; ***************************************************************************************
   12 D1:B046 -  -  -  -  
   13 D1:B046 -  -  -  -  ; ***************************************************************************************
   14 D1:B046 -  -  -  -  ;
   15 D1:B046 -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B046 -  -  -  -  ;
   17 D1:B046 -  -  -  -  ; ***************************************************************************************
   18 D1:B046 -  -  -  -  
   19 D1:B046 -  -  -  -  SetCurrentInstance:
   20 D1:B046 ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B04B 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B04F ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B054 -  -  -  -  
   24 D1:B054 C9 -  -  -  		ret
   25 D1:B055 -  -  -  -  
   26 D1:B055 -  -  -  -  
   27 D1:B055 -  -  -  -  ; ***************************************************************************************
   28 D1:B055 -  -  -  -  ;
   29 D1:B055 -  -  -  -  ;									Changes and Updates
   30 D1:B055 -  -  -  -  ;
   31 D1:B055 -  -  -  -  ; ***************************************************************************************
   32 D1:B055 -  -  -  -  ;
   33 D1:B055 -  -  -  -  ;		Date			Notes
   34 D1:B055 -  -  -  -  ;		==== 			=====
   35 D1:B055 -  -  -  -  ;
   36 D1:B055 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B055 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B055 -  -  -  -  ; ***************************************************************************************
    2 D1:B055 -  -  -  -  ; ***************************************************************************************
    3 D1:B055 -  -  -  -  ;
    4 D1:B055 -  -  -  -  ;		Name : 		new.asm
    5 D1:B055 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B055 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B055 -  -  -  -  ;		Reviewed :	No
    8 D1:B055 -  -  -  -  ;		Purpose :	New command.
    9 D1:B055 -  -  -  -  ;
   10 D1:B055 -  -  -  -  ; ***************************************************************************************
   11 D1:B055 -  -  -  -  ; ***************************************************************************************
   12 D1:B055 -  -  -  -  
   13 D1:B055 -  -  -  -  ; ***************************************************************************************
   14 D1:B055 -  -  -  -  ;
   15 D1:B055 -  -  -  -  ;										NEW command
   16 D1:B055 -  -  -  -  ;
   17 D1:B055 -  -  -  -  ; ***************************************************************************************
   18 D1:B055 -  -  -  -  
   19 D1:B055 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B055 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B059 36 00 -  -  		ld 		(hl),0
   22 D1:B05B CD 0B B0 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B05F 3E 00 C3 01 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B065 -  -  -  -  
   25 D1:B065 -  -  -  -  ; ***************************************************************************************
   26 D1:B065 -  -  -  -  ;
   27 D1:B065 -  -  -  -  ;									Changes and Updates
   28 D1:B065 -  -  -  -  ;
   29 D1:B065 -  -  -  -  ; ***************************************************************************************
   30 D1:B065 -  -  -  -  ;
   31 D1:B065 -  -  -  -  ;		Date			Notes
   32 D1:B065 -  -  -  -  ;		==== 			=====
   33 D1:B065 -  -  -  -  ;
   34 D1:B065 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B065 -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B065 -  -  -  -  ; ***************************************************************************************
    2 D1:B065 -  -  -  -  ; ***************************************************************************************
    3 D1:B065 -  -  -  -  ;
    4 D1:B065 -  -  -  -  ;		Name : 		utility.asm
    5 D1:B065 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B065 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B065 -  -  -  -  ;		Reviewed :	No
    8 D1:B065 -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B065 -  -  -  -  ;
   10 D1:B065 -  -  -  -  ; ***************************************************************************************
   11 D1:B065 -  -  -  -  ; ***************************************************************************************
   12 D1:B065 -  -  -  -  
   13 D1:B065 -  -  -  -  ; ***************************************************************************************
   14 D1:B065 -  -  -  -  ;
   15 D1:B065 -  -  -  -  ;							Print ASCII string at HL
   16 D1:B065 -  -  -  -  ;
   17 D1:B065 -  -  -  -  ; ***************************************************************************************
   18 D1:B065 -  -  -  -  
   19 D1:B065 -  -  -  -  PrintStringAtHL:
   20 D1:B065 7E -  -  -  		ld 		a,(hl)
   21 D1:B066 FE 20 -  -  		cp 		$20		
   22 D1:B068 D8 -  -  -  		ret 	c
   23 D1:B069 CD 50 B6 D1 		call 	SYSPrintChar
   24 D1:B06D 23 -  -  -  		inc 	hl
   25 D1:B06E 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B070 -  -  -  -  
   27 D1:B070 -  -  -  -  ; ***************************************************************************************
   28 D1:B070 -  -  -  -  ;
   29 D1:B070 -  -  -  -  ;									Changes and Updates
   30 D1:B070 -  -  -  -  ;
   31 D1:B070 -  -  -  -  ; ***************************************************************************************
   32 D1:B070 -  -  -  -  ;
   33 D1:B070 -  -  -  -  ;		Date			Notes
   34 D1:B070 -  -  -  -  ;		==== 			=====
   35 D1:B070 -  -  -  -  ;
   36 D1:B070 -  -  -  -  ; ***************************************************************************************
   37 D1:B070 -  -  -  -  		
Listing for file "_build.asm"
   51 D1:B070 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B070 -  -  -  -  ; ***************************************************************************************
    2 D1:B070 -  -  -  -  ; ***************************************************************************************
    3 D1:B070 -  -  -  -  ;
    4 D1:B070 -  -  -  -  ;		Name : 		find.asm
    5 D1:B070 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B070 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B070 -  -  -  -  ;		Reviewed :	No
    8 D1:B070 -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B070 -  -  -  -  ;
   10 D1:B070 -  -  -  -  ; ***************************************************************************************
   11 D1:B070 -  -  -  -  ; ***************************************************************************************
   12 D1:B070 -  -  -  -  
   13 D1:B070 -  -  -  -  ; ***************************************************************************************
   14 D1:B070 -  -  -  -  ;
   15 D1:B070 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B070 -  -  -  -  ; 		variable information at (IX)
   17 D1:B070 -  -  -  -  ;
   18 D1:B070 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B070 -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B070 -  -  -  -  ;
   21 D1:B070 -  -  -  -  ; ***************************************************************************************
   22 D1:B070 -  -  -  -  
   23 D1:B070 -  -  -  -  FindVariable:
   24 D1:B070 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B073 FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B075 D2 6B AB D1 		jp 		nc,SyntaxError 		
   27 D1:B079 -  -  -  -  
   28 D1:B079 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B07C FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B07E 38 19 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B080 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B082 28 15 -  -  		jr 		z,_FVNotSimple
   33 D1:B084 -  -  -  -  		;
   34 D1:B084 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B084 -  -  -  -  		;
   36 D1:B084 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B088 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B08B 87 -  -  -  		add 	a,a 						; x4
   39 D1:B08C 87 -  -  -  		add 	a,a
   40 D1:B08D B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B08E 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B08F 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B091 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B093 DD 23 -  -  		inc 	ix 							; skip over identifier marker
   45 D1:B095 DD 23 -  -  		inc 	ix
   46 D1:B097 AF -  -  -  		xor 	a 							; clear carry and return
   47 D1:B098 C9 -  -  -  		ret
   48 D1:B099 -  -  -  -  		;
   49 D1:B099 -  -  -  -  		;		Not a standard simple variable.
   50 D1:B099 -  -  -  -  		;
   51 D1:B099 -  -  -  -  _FVNotSimple:
   52 D1:B099 37 -  -  -  		scf
   53 D1:B09A C9 -  -  -  		ret
   54 D1:B09B -  -  -  -  
   55 D1:B09B -  -  -  -  ; ***************************************************************************************
   56 D1:B09B -  -  -  -  ;
   57 D1:B09B -  -  -  -  ;									Changes and Updates
   58 D1:B09B -  -  -  -  ;
   59 D1:B09B -  -  -  -  ; ***************************************************************************************
   60 D1:B09B -  -  -  -  ;
   61 D1:B09B -  -  -  -  ;		Date			Notes
   62 D1:B09B -  -  -  -  ;		==== 			=====
   63 D1:B09B -  -  -  -  ;
   64 D1:B09B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B09B -  -  -  -  #include "generated/kwd_keywords.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_keywords.asm"
    1 D1:B09B -  -  -  -  ;
    2 D1:B09B -  -  -  -  ;	This file is automatically generated.
    3 D1:B09B -  -  -  -  ;
    4 D1:B09B -  -  -  -  ;
    5 D1:B09B -  -  -  -  ;	Keywords for set 0
    6 D1:B09B -  -  -  -  ;
    7 D1:B09B -  -  -  -  KeywordsSet0:
    8 D1:B09B 01 20 -  -  	.db	1," "              ; $0080
    9 D1:B09D 01 20 -  -  	.db	1," "              ; $0081
   10 D1:B09F 01 20 -  -  	.db	1," "              ; $0082
   11 D1:B0A1 01 21 -  -  	.db	1,"!"              ; $0083
   12 D1:B0A3 01 3F -  -  	.db	1,"?"              ; $0084
   13 D1:B0A5 01 2A -  -  	.db	1,"*"              ; $0085
   14 D1:B0A7 01 2F -  -  	.db	1,"/"              ; $0086
   15 D1:B0A9 03 4D 4F 44 	.db	3,"MOD"            ; $0087
   16 D1:B0AD 03 44 49 56 	.db	3,"DIV"            ; $0088
   17 D1:B0B1 01 2B -  -  	.db	1,"+"              ; $0089
   18 D1:B0B3 01 2D -  -  	.db	1,"-"              ; $008a
   19 D1:B0B5 02 3E 3D -  	.db	2,">="             ; $008b
   20 D1:B0B8 02 3C 3D -  	.db	2,"<="             ; $008c
   21 D1:B0BB 01 3E -  -  	.db	1,">"              ; $008d
   22 D1:B0BD 01 3C -  -  	.db	1,"<"              ; $008e
   23 D1:B0BF 01 3D -  -  	.db	1,"="              ; $008f
   24 D1:B0C1 02 3C 3E -  	.db	2,"<>"             ; $0090
   25 D1:B0C4 03 41 4E 44 	.db	3,"AND"            ; $0091
   26 D1:B0C8 02 4F 52 -  	.db	2,"OR"             ; $0092
   27 D1:B0CB 03 45 4F 52 	.db	3,"EOR"            ; $0093
   28 D1:B0CF 01 26 -  -  	.db	1,"&"              ; $0094
   29 D1:B0D1 01 28 -  -  	.db	1,"("              ; $0095
   30 D1:B0D3 01 24 -  -  	.db	1,"$"              ; $0096
   31 D1:B0D5 03 52 4E 44 	.db	3,"RND"            ; $0097
   32 D1:B0D9 03 4C 45 4E 	.db	3,"LEN"            ; $0098
   33 D1:B0DD 03 41 42 53 	.db	3,"ABS"            ; $0099
   34 D1:B0E1 03 53 47 4E 	.db	3,"SGN"            ; $009a
   35 D1:B0E5 03 53 54 52 	.db	3,"STR"            ; $009b
   36 D1:B0E9 03 43 48 52 	.db	3,"CHR"            ; $009c
   37 D1:B0ED 03 41 53 43 	.db	3,"ASC"            ; $009d
   38 D1:B0F1 03 4E 4F 54 	.db	3,"NOT"            ; $009e
   39 D1:B0F5 04 50 41 47 
              45 -  -  -  	.db	4,"PAGE"           ; $009f
   40 D1:B0FA 04 54 49 4D 
              45 -  -  -  	.db	4,"TIME"           ; $00a0
   41 D1:B0FF 03 54 4F 50 	.db	3,"TOP"            ; $00a1
   42 D1:B103 03 56 41 4C 	.db	3,"VAL"            ; $00a2
   43 D1:B107 04 54 52 55 
              45 -  -  -  	.db	4,"TRUE"           ; $00a3
   44 D1:B10C 05 46 41 4C 
              53 45 -  -  	.db	5,"FALSE"          ; $00a4
   45 D1:B112 01 29 -  -  	.db	1,")"              ; $00a5
   46 D1:B114 01 2C -  -  	.db	1,","              ; $00a6
   47 D1:B116 01 3A -  -  	.db	1,":"              ; $00a7
   48 D1:B118 01 3B -  -  	.db	1,";"              ; $00a8
   49 D1:B11A 01 27 -  -  	.db	1,"'"              ; $00a9
   50 D1:B11C 06 52 45 50 
              45 41 54 -  	.db	6,"REPEAT"         ; $00aa
   51 D1:B123 05 55 4E 54 
              49 4C -  -  	.db	5,"UNTIL"          ; $00ab
   52 D1:B129 02 49 46 -  	.db	2,"IF"             ; $00ac
   53 D1:B12C 04 54 48 45 
              4E -  -  -  	.db	4,"THEN"           ; $00ad
   54 D1:B131 04 45 4C 53 
              45 -  -  -  	.db	4,"ELSE"           ; $00ae
   55 D1:B136 03 46 4F 52 	.db	3,"FOR"            ; $00af
   56 D1:B13A 02 54 4F -  	.db	2,"TO"             ; $00b0
   57 D1:B13D 04 53 54 45 
              50 -  -  -  	.db	4,"STEP"           ; $00b1
   58 D1:B142 04 4E 45 58 
              54 -  -  -  	.db	4,"NEXT"           ; $00b2
   59 D1:B147 03 44 45 46 	.db	3,"DEF"            ; $00b3
   60 D1:B14B 04 50 52 4F 
              43 -  -  -  	.db	4,"PROC"           ; $00b4
   61 D1:B150 07 45 4E 44 
              50 52 4F 43 	.db	7,"ENDPROC"        ; $00b5
   62 D1:B158 05 4C 4F 43 
              41 4C -  -  	.db	5,"LOCAL"          ; $00b6
   63 D1:B15E 03 44 49 4D 	.db	3,"DIM"            ; $00b7
   64 D1:B162 03 52 45 4D 	.db	3,"REM"            ; $00b8
   65 D1:B166 03 4C 45 54 	.db	3,"LET"            ; $00b9
   66 D1:B16A 03 56 44 55 	.db	3,"VDU"            ; $00ba
   67 D1:B16E 05 50 52 49 
              4E 54 -  -  	.db	5,"PRINT"          ; $00bb
   68 D1:B174 04 4C 4F 41 
              44 -  -  -  	.db	4,"LOAD"           ; $00bc
   69 D1:B179 04 53 41 56 
              45 -  -  -  	.db	4,"SAVE"           ; $00bd
   70 D1:B17E 04 4C 49 53 
              54 -  -  -  	.db	4,"LIST"           ; $00be
   71 D1:B183 03 4E 45 57 	.db	3,"NEW"            ; $00bf
   72 D1:B187 03 52 55 4E 	.db	3,"RUN"            ; $00c0
   73 D1:B18B 04 52 45 41 
              44 -  -  -  	.db	4,"READ"           ; $00c1
   74 D1:B190 04 44 41 54 
              41 -  -  -  	.db	4,"DATA"           ; $00c2
   75 D1:B195 07 52 45 53 
              54 4F 52 45 	.db	7,"RESTORE"        ; $00c3
   76 D1:B19D 06 41 53 53 
              45 52 54 -  	.db	6,"ASSERT"         ; $00c4
   77 D1:B1A4 05 43 4C 45 
              41 52 -  -  	.db	5,"CLEAR"          ; $00c5
   78 D1:B1AA 03 45 4E 44 	.db	3,"END"            ; $00c6
   79 D1:B1AE 04 53 54 4F 
              50 -  -  -  	.db	4,"STOP"           ; $00c7
   80 D1:B1B3 00 -  -  -  	.db	0
   81 D1:B1B4 -  -  -  -  ;
   82 D1:B1B4 -  -  -  -  ;	Keywords for set 1
   83 D1:B1B4 -  -  -  -  ;
   84 D1:B1B4 -  -  -  -  KeywordsSet1:
   85 D1:B1B4 00 -  -  -  	.db	0
   86 D1:B1B5 -  -  -  -  ;
   87 D1:B1B5 -  -  -  -  ;	Keywords for set 2
   88 D1:B1B5 -  -  -  -  ;
   89 D1:B1B5 -  -  -  -  KeywordsSet2:
   90 D1:B1B5 00 -  -  -  	.db	0
Listing for file "_build.asm"
   53 D1:B1B6 -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B1B6 -  -  -  -  ;
    2 D1:B1B6 -  -  -  -  ;	This file is automatically generated.
    3 D1:B1B6 -  -  -  -  ;
    4 D1:B1B6 00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 D1:B1C0 -  -  -  -  PrecedenceTable:
    6 D1:B1C0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B1C1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B1C2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B1C3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B1C4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B1C5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B1C6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B1C7 04 -  -  -  	.db	4	; $008a -
   14 D1:B1C8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B1C9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B1CA 03 -  -  -  	.db	3	; $008d >
   17 D1:B1CB 03 -  -  -  	.db	3	; $008e <
   18 D1:B1CC 03 -  -  -  	.db	3	; $008f =
   19 D1:B1CD 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B1CE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B1CF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B1D0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B1D1 -  -  -  -  
Listing for file "_build.asm"
   54 D1:B1D1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B1D1 -  -  -  -  ;
    2 D1:B1D1 -  -  -  -  ;	This is automatically generated.
    3 D1:B1D1 -  -  -  -  ;
    4 D1:B1D1 -  -  -  -  ErrorIDTable:
    5 D1:B1D1 11 B2 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B1D5 17 B2 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B1D9 28 B2 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B1DD 36 B2 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B1E1 40 B2 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:B1E5 5A B2 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:B1E9 6B B2 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:B1ED 79 B2 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:B1F1 87 B2 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 D1:B1F5 91 B2 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 D1:B1F9 A6 B2 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 D1:B1FD BC B2 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 D1:B201 CA B2 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 D1:B205 CF B2 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 D1:B209 DC B2 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 D1:B20D ED B2 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 D1:B211 -  -  -  -  
   22 D1:B211 -  -  -  -  ErrText_warmstart:
   23 D1:B211 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 D1:B217 -  -  -  -  ErrText_assert:
   25 D1:B217 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 D1:B228 -  -  -  -  ErrText_badtype:
   27 D1:B228 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 D1:B236 -  -  -  -  ErrText_badvalue:
   29 D1:B236 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 D1:B240 -  -  -  -  ErrText_disabled:
   31 D1:B240 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 D1:B25A -  -  -  -  ErrText_divzero:
   33 D1:B25A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 D1:B26B -  -  -  -  ErrText_memory:
   35 D1:B26B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 D1:B279 -  -  -  -  ErrText_nocomma:
   37 D1:B279 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 D1:B287 -  -  -  -  ErrText_nodollar:
   39 D1:B287 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 D1:B291 -  -  -  -  ErrText_nolbracket:
   41 D1:B291 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 D1:B2A6 -  -  -  -  ErrText_norbracket:
   43 D1:B2A6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 D1:B2BC -  -  -  -  ErrText_notref:
   45 D1:B2BC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 D1:B2CA -  -  -  -  ErrText_stop:
   47 D1:B2CA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 D1:B2CF -  -  -  -  ErrText_syntax:
   49 D1:B2CF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 D1:B2DC -  -  -  -  ErrText_todo:
   51 D1:B2DC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 D1:B2ED -  -  -  -  ErrText_unknownvar:
   53 D1:B2ED 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   55 D1:B2FE -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B2FE -  -  -  -  ;
    2 D1:B2FE -  -  -  -  ;	Vectors for set 0
    3 D1:B2FE -  -  -  -  ;
    4 D1:B2FE -  -  -  -  VectorsSet0:
    5 D1:B2FE 65 A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B302 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B306 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B30A E1 AB D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B30E EA AB D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B312 8D AB D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B316 9B AB D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B31A A9 AB D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B31E 9B AB D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B322 71 AB D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B326 7F AB D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B32A 48 AC D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B32E 3E AC D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B332 2A AC D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B336 20 AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B33A 16 AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B33E 34 AC D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B342 B7 AB D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B346 C5 AB D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B34A D3 AB D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B34E BA AF D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B352 B2 AF D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B356 D4 AE D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B35A 01 AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B35E C3 AE D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B362 99 AE D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B366 98 AF D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B36A C9 AF D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B36E AF AE D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B372 A6 AE D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B376 DF AE D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B37A F4 AE D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B37E E2 AF D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B382 E9 AF D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B386 F6 AF D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B38A 08 AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B38E 0C AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B392 5A A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B396 5A A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B39A 5E A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B39E 5A A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B3A2 27 AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B3A6 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa repeat
   48 D1:B3AA A5 A8 D1 00 	addr(Unimplemented)              ; $00ab until
   49 D1:B3AE A5 A8 D1 00 	addr(Unimplemented)              ; $00ac if
   50 D1:B3B2 5A A9 D1 00 	addr(BadCmd_Then)                ; $00ad then
   51 D1:B3B6 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae else
   52 D1:B3BA A5 A8 D1 00 	addr(Unimplemented)              ; $00af for
   53 D1:B3BE 5A A9 D1 00 	addr(BadCmd_To)                  ; $00b0 to
   54 D1:B3C2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 step
   55 D1:B3C6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 next
   56 D1:B3CA 5A A9 D1 00 	addr(BadCmd_Defproc)             ; $00b3 def
   57 D1:B3CE A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 proc
   58 D1:B3D2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 endproc
   59 D1:B3D6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 local
   60 D1:B3DA A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 dim
   61 D1:B3DE 27 AA D1 00 	addr(Command_REM)                ; $00b8 rem
   62 D1:B3E2 7C A9 D1 00 	addr(Command_LET)                ; $00b9 let
   63 D1:B3E6 A5 A8 D1 00 	addr(Unimplemented)              ; $00ba vdu
   64 D1:B3EA D0 A9 D1 00 	addr(Command_PRINT)              ; $00bb print
   65 D1:B3EE A5 A8 D1 00 	addr(Unimplemented)              ; $00bc load
   66 D1:B3F2 A5 A8 D1 00 	addr(Unimplemented)              ; $00bd save
   67 D1:B3F6 A5 A8 D1 00 	addr(Unimplemented)              ; $00be list
   68 D1:B3FA 55 B0 D1 00 	addr(Command_NEW)                ; $00bf new
   69 D1:B3FE 44 AA D1 00 	addr(Command_RUN)                ; $00c0 run
   70 D1:B402 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 read
   71 D1:B406 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 data
   72 D1:B40A A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 restore
   73 D1:B40E 49 A9 D1 00 	addr(Command_ASSERT)             ; $00c4 assert
   74 D1:B412 0B B0 D1 00 	addr(Command_CLEAR)              ; $00c5 clear
   75 D1:B416 5F A9 D1 00 	addr(Command_END)                ; $00c6 end
   76 D1:B41A B7 AA D1 00 	addr(Command_STOP)               ; $00c7 stop
   77 D1:B41E -  -  -  -  ;
   78 D1:B41E -  -  -  -  ;	Vectors for set 1
   79 D1:B41E -  -  -  -  ;
   80 D1:B41E -  -  -  -  VectorsSet1:
   81 D1:B41E -  -  -  -  ;
   82 D1:B41E -  -  -  -  ;	Vectors for set 2
   83 D1:B41E -  -  -  -  ;
   84 D1:B41E -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   56 D1:B41E -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B41E -  -  -  -  ; ***************************************************************************************
    2 D1:B41E -  -  -  -  ; ***************************************************************************************
    3 D1:B41E -  -  -  -  ;
    4 D1:B41E -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B41E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B41E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B41E -  -  -  -  ;		Reviewed :	No
    8 D1:B41E -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B41E -  -  -  -  ;
   10 D1:B41E -  -  -  -  ; ***************************************************************************************
   11 D1:B41E -  -  -  -  ; ***************************************************************************************
   12 D1:B41E -  -  -  -  
   13 D1:B41E -  -  -  -  ; ***************************************************************************************
   14 D1:B41E -  -  -  -  ;
   15 D1:B41E -  -  -  -  ;								Unsigned integer divide
   16 D1:B41E -  -  -  -  ;
   17 D1:B41E -  -  -  -  ; ***************************************************************************************
   18 D1:B41E -  -  -  -  
   19 D1:B41E -  -  -  -  Int32UDivide:
   20 D1:B41E 37 -  -  -  		scf
   21 D1:B41F C3 63 B4 D1 		jp 		_I32UnsignedDivide		
   22 D1:B423 -  -  -  -  
   23 D1:B423 -  -  -  -  ; ***************************************************************************************
   24 D1:B423 -  -  -  -  ;
   25 D1:B423 -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B423 -  -  -  -  ;
   27 D1:B423 -  -  -  -  ; ***************************************************************************************
   28 D1:B423 -  -  -  -  
   29 D1:B423 -  -  -  -  Int32SDivide:
   30 D1:B423 37 -  -  -  		scf
   31 D1:B424 18 01 -  -  		jr 		_I32SDivide
   32 D1:B426 -  -  -  -  Int32Modulus:
   33 D1:B426 AF -  -  -  		xor 	a
   34 D1:B427 -  -  -  -  _I32SDivide:
   35 D1:B427 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B428 F5 -  -  -  		push 	af
   37 D1:B429 08 -  -  -  		ex 		af,af'
   38 D1:B42A -  -  -  -  
   39 D1:B42A D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B42B D9 -  -  -  		exx
   41 D1:B42C D5 -  -  -  		push 	de
   42 D1:B42D D9 -  -  -  		exx
   43 D1:B42E -  -  -  -  
   44 D1:B42E F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B42F AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B430 CD 50 B4 D1 		call 	_I32CheckHLSignSwap
   47 D1:B434 CD 50 B4 D1 		call 	_I32CheckHLSignSwap
   48 D1:B438 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B439 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B43A F5 -  -  -  		push 	af
   51 D1:B43B CD 63 B4 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B43F F1 -  -  -  		pop 	af 							; get function back
   53 D1:B440 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B442 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B443 CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B445 C4 C6 B5 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B449 -  -  -  -  _I32SDExit:
   58 D1:B449 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B44A D1 -  -  -  		pop 	de
   60 D1:B44B D9 -  -  -  		exx
   61 D1:B44C D1 -  -  -  		pop 	de
   62 D1:B44D F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B44E 08 -  -  -  		ex 		af,af'
   64 D1:B44F C9 -  -  -  		ret
   65 D1:B450 -  -  -  -  
   66 D1:B450 -  -  -  -  
   67 D1:B450 -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B450 D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B451 CB 7C -  -  		bit 	7,h
   70 D1:B453 D9 -  -  -  		exx
   71 D1:B454 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B456 -  -  -  -  		;
   73 D1:B456 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B458 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B459 CD C6 B5 D1 		call 	Int32Negate 				
   76 D1:B45D F1 -  -  -  		pop 	af
   77 D1:B45E -  -  -  -  _I32CHSPositive:
   78 D1:B45E D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B45F EB -  -  -  		ex 		de,hl
   80 D1:B460 D9 -  -  -  		exx		
   81 D1:B461 EB -  -  -  		ex 		de,hl
   82 D1:B462 C9 -  -  -  		ret
   83 D1:B463 -  -  -  -  
   84 D1:B463 -  -  -  -  ; ***************************************************************************************
   85 D1:B463 -  -  -  -  ;
   86 D1:B463 -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B463 -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B463 -  -  -  -  ;
   89 D1:B463 -  -  -  -  ; ***************************************************************************************
   90 D1:B463 -  -  -  -  
   91 D1:B463 -  -  -  -  _I32UnsignedDivide:
   92 D1:B463 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B464 D5 -  -  -  		push 	de
   94 D1:B465 D9 -  -  -  		exx
   95 D1:B466 C5 -  -  -  		push 	bc
   96 D1:B467 D5 -  -  -  		push 	de 							
   97 D1:B468 D9 -  -  -  		exx
   98 D1:B469 -  -  -  -  
   99 D1:B469 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B46A -  -  -  -  
  101 D1:B46A 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B46B B3 -  -  -  		or 		e
  103 D1:B46C D9 -  -  -  		exx
  104 D1:B46D B2 -  -  -  		or 		d
  105 D1:B46E B3 -  -  -  		or 		e
  106 D1:B46F D9 -  -  -  		exx
  107 D1:B470 CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B474 -  -  -  -  
  109 D1:B474 -  -  -  -  
  110 D1:B474 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B475 4D -  -  -  		ld		c,l
  112 D1:B476 21 00 00 00 		ld 		hl,$0000
  113 D1:B47A D9 -  -  -  		exx
  114 D1:B47B 44 -  -  -  		ld 		b,h
  115 D1:B47C 4D -  -  -  		ld		c,l
  116 D1:B47D 21 00 00 00 		ld 		hl,$0000
  117 D1:B481 D9 -  -  -  		exx
  118 D1:B482 -  -  -  -  
  119 D1:B482 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B484 -  -  -  -  _I32DivideLoop:
  121 D1:B484 F5 -  -  -  		push 	af
  122 D1:B485 -  -  -  -  
  123 D1:B485 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B487 CB 10 -  -  		rl 		b
  125 D1:B489 D9 -  -  -  		exx
  126 D1:B48A CB 11 -  -  		rl 		c
  127 D1:B48C CB 10 -  -  		rl 		b
  128 D1:B48E D9 -  -  -  		exx
  129 D1:B48F CB 15 -  -  		rl 		l
  130 D1:B491 CB 14 -  -  		rl 		h
  131 D1:B493 D9 -  -  -  		exx
  132 D1:B494 CB 15 -  -  		rl 		l
  133 D1:B496 CB 14 -  -  		rl 		h
  134 D1:B498 D9 -  -  -  		exx
  135 D1:B499 -  -  -  -  
  136 D1:B499 CD 64 B5 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B49D 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B49F -  -  -  -  
  139 D1:B49F 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B4A0 18 04 -  -  		jr 		_I32Next
  141 D1:B4A2 -  -  -  -  
  142 D1:B4A2 -  -  -  -  _I32Borrow:
  143 D1:B4A2 CD 5C B5 D1 		call 	Int32Add 					; A = A + M
  144 D1:B4A6 -  -  -  -  _I32Next:
  145 D1:B4A6 F1 -  -  -  		pop 	af
  146 D1:B4A7 3D -  -  -  		dec 	a
  147 D1:B4A8 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B4AA -  -  -  -  
  149 D1:B4AA F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B4AB -  -  -  -  
  151 D1:B4AB 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B4AC 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B4AE -  -  -  -  
  154 D1:B4AE 60 -  -  -  		ld  	h,b
  155 D1:B4AF 69 -  -  -  		ld 		l,c
  156 D1:B4B0 D9 -  -  -  		exx
  157 D1:B4B1 60 -  -  -  		ld  	h,b
  158 D1:B4B2 69 -  -  -  		ld 		l,c
  159 D1:B4B3 D9 -  -  -  		exx
  160 D1:B4B4 -  -  -  -  _I32Modulus1:		
  161 D1:B4B4 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B4B5 D1 -  -  -  		pop 	de
  163 D1:B4B6 C1 -  -  -  		pop 	bc
  164 D1:B4B7 D9 -  -  -  		exx
  165 D1:B4B8 D1 -  -  -  		pop 	de
  166 D1:B4B9 C1 -  -  -  		pop 	bc
  167 D1:B4BA C9 -  -  -  		ret
  168 D1:B4BB -  -  -  -  
  169 D1:B4BB -  -  -  -  ; ***************************************************************************************
  170 D1:B4BB -  -  -  -  ;
  171 D1:B4BB -  -  -  -  ;									Changes and Updates
  172 D1:B4BB -  -  -  -  ;
  173 D1:B4BB -  -  -  -  ; ***************************************************************************************
  174 D1:B4BB -  -  -  -  ;
  175 D1:B4BB -  -  -  -  ;		Date			Notes
  176 D1:B4BB -  -  -  -  ;		==== 			=====
  177 D1:B4BB -  -  -  -  ;
  178 D1:B4BB -  -  -  -  ; ***************************************************************************************
  179 D1:B4BB -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B4BB -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B4BB -  -  -  -  ; ***************************************************************************************
    2 D1:B4BB -  -  -  -  ; ***************************************************************************************
    3 D1:B4BB -  -  -  -  ;
    4 D1:B4BB -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B4BB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4BB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B4BB -  -  -  -  ;		Reviewed :	No
    8 D1:B4BB -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B4BB -  -  -  -  ;
   10 D1:B4BB -  -  -  -  ; ***************************************************************************************
   11 D1:B4BB -  -  -  -  ; ***************************************************************************************
   12 D1:B4BB -  -  -  -  
   13 D1:B4BB -  -  -  -  ; ***************************************************************************************
   14 D1:B4BB -  -  -  -  ;
   15 D1:B4BB -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B4BB -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B4BB -  -  -  -  ;
   18 D1:B4BB -  -  -  -  ; ***************************************************************************************
   19 D1:B4BB -  -  -  -  
   20 D1:B4BB -  -  -  -  Int32FromString:
   21 D1:B4BB C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B4BC D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B4BD D5 -  -  -  		push 	de
   24 D1:B4BE D9 -  -  -  		exx
   25 D1:B4BF D5 -  -  -  		push 	de
   26 D1:B4C0 -  -  -  -  
   27 D1:B4C0 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B4C4 11 00 00 00 		ld 		de,$0000
   29 D1:B4C8 D9 -  -  -  		exx
   30 D1:B4C9 21 00 00 00 		ld 		hl,$0000
   31 D1:B4CD 11 00 00 00 		ld 		de,$0000
   32 D1:B4D1 D9 -  -  -  		exx
   33 D1:B4D2 -  -  -  -  
   34 D1:B4D2 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B4D3 CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B4D5 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B4D7 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B4D9 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B4DA -  -  -  -  		;
   40 D1:B4DA 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B4DB F5 -  -  -  		push 	af
   42 D1:B4DC FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B4DE 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B4DF 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B4E1 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B4E2 18 01 -  -  		jr 		_I32FSMain
   47 D1:B4E4 -  -  -  -  _I32FSNotSigned:		
   48 D1:B4E4 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B4E5 -  -  -  -  		;
   50 D1:B4E5 -  -  -  -  		; 		Main conversion loop.
   51 D1:B4E5 -  -  -  -  		; 		
   52 D1:B4E5 -  -  -  -  _I32FSMain:		
   53 D1:B4E5 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B4E6 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B4E8 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B4EA D6 20 -  -  		sub 	32
   57 D1:B4EC -  -  -  -  _I32FSNotLower:
   58 D1:B4EC FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B4EE 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B4F0 FE 3A -  -  		cp 		'9'+1
   61 D1:B4F2 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B4F4 FE 41 -  -  		cp 		'A'
   63 D1:B4F6 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B4F8 FE 47 -  -  		cp 		'F'+1
   65 D1:B4FA 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B4FC D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B4FE -  -  -  -  _I32FSOkay:
   68 D1:B4FE D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B500 BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B501 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B503 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B504 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B505 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B506 CD 23 B5 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B50A F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B50B 5F -  -  -  		ld 		e,a
   77 D1:B50C CD 5C B5 D1 		call 	Int32Add 					; and add it.
   78 D1:B510 D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B511 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B513 -  -  -  -  
   81 D1:B513 -  -  -  -  _I32FSExit:
   82 D1:B513 F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B514 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B516 CC C6 B5 D1 		call 	z,Int32Negate
   85 D1:B51A 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B51B D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B51C D9 -  -  -  		exx
   88 D1:B51D D1 -  -  -  		pop 	de
   89 D1:B51E D9 -  -  -  		exx
   90 D1:B51F C1 -  -  -  		pop 	bc
   91 D1:B520 FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B522 C9 -  -  -  		ret				
   93 D1:B523 -  -  -  -  
   94 D1:B523 -  -  -  -  ; ***************************************************************************************
   95 D1:B523 -  -  -  -  ;
   96 D1:B523 -  -  -  -  ;									Changes and Updates
   97 D1:B523 -  -  -  -  ;
   98 D1:B523 -  -  -  -  ; ***************************************************************************************
   99 D1:B523 -  -  -  -  ;
  100 D1:B523 -  -  -  -  ;		Date			Notes
  101 D1:B523 -  -  -  -  ;		==== 			=====
  102 D1:B523 -  -  -  -  ;
  103 D1:B523 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 D1:B523 -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B523 -  -  -  -  ; ***************************************************************************************
    2 D1:B523 -  -  -  -  ; ***************************************************************************************
    3 D1:B523 -  -  -  -  ;
    4 D1:B523 -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B523 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B523 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B523 -  -  -  -  ;		Reviewed :	No
    8 D1:B523 -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B523 -  -  -  -  ;
   10 D1:B523 -  -  -  -  ; ***************************************************************************************
   11 D1:B523 -  -  -  -  ; ***************************************************************************************
   12 D1:B523 -  -  -  -  
   13 D1:B523 -  -  -  -  Int32Multiply:
   14 D1:B523 C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B524 D5 -  -  -  		push 	de
   16 D1:B525 44 -  -  -  		ld 		b,h
   17 D1:B526 4D -  -  -  		ld 		c,l
   18 D1:B527 21 00 00 00 		ld 		hl,$0000
   19 D1:B52B -  -  -  -  
   20 D1:B52B D9 -  -  -  		exx
   21 D1:B52C C5 -  -  -  		push 	bc
   22 D1:B52D D5 -  -  -  		push 	de
   23 D1:B52E 44 -  -  -  		ld 		b,h
   24 D1:B52F 4D -  -  -  		ld 		c,l
   25 D1:B530 21 00 00 00 		ld 		hl,$0000		
   26 D1:B534 D9 -  -  -  		exx
   27 D1:B535 -  -  -  -  
   28 D1:B535 -  -  -  -  _I32MultiplyLoop:
   29 D1:B535 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B537 C4 5C B5 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B53B -  -  -  -  		;
   32 D1:B53B D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B53C CB 38 -  -  		srl 	b
   34 D1:B53E CB 19 -  -  		rr 		c
   35 D1:B540 D9 -  -  -  		exx
   36 D1:B541 CB 18 -  -  		rr 		b
   37 D1:B543 CB 19 -  -  		rr 		c
   38 D1:B545 -  -  -  -  		;
   39 D1:B545 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B547 CB 12 -  -  		rl 		d
   41 D1:B549 D9 -  -  -  		exx
   42 D1:B54A CB 13 -  -  		rl 		e
   43 D1:B54C CB 12 -  -  		rl 		d
   44 D1:B54E -  -  -  -  
   45 D1:B54E 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B54F B1 -  -  -  		or 		c
   47 D1:B550 D9 -  -  -  		exx
   48 D1:B551 B0 -  -  -  		or 		b
   49 D1:B552 B1 -  -  -  		or 		c
   50 D1:B553 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B555 -  -  -  -  
   52 D1:B555 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B556 D1 -  -  -  		pop 	de
   54 D1:B557 C1 -  -  -  		pop 	bc
   55 D1:B558 D9 -  -  -  		exx
   56 D1:B559 D1 -  -  -  		pop 	de
   57 D1:B55A C1 -  -  -  		pop 	bc
   58 D1:B55B C9 -  -  -  		ret
   59 D1:B55C -  -  -  -  
   60 D1:B55C -  -  -  -  ; ***************************************************************************************
   61 D1:B55C -  -  -  -  ;
   62 D1:B55C -  -  -  -  ;									Changes and Updates
   63 D1:B55C -  -  -  -  ;
   64 D1:B55C -  -  -  -  ; ***************************************************************************************
   65 D1:B55C -  -  -  -  ;
   66 D1:B55C -  -  -  -  ;		Date			Notes
   67 D1:B55C -  -  -  -  ;		==== 			=====
   68 D1:B55C -  -  -  -  ;
   69 D1:B55C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   59 D1:B55C -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B55C -  -  -  -  ; ***************************************************************************************
    2 D1:B55C -  -  -  -  ; ***************************************************************************************
    3 D1:B55C -  -  -  -  ;
    4 D1:B55C -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B55C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B55C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B55C -  -  -  -  ;		Reviewed :	No
    8 D1:B55C -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B55C -  -  -  -  ;
   10 D1:B55C -  -  -  -  ; ***************************************************************************************
   11 D1:B55C -  -  -  -  ; ***************************************************************************************
   12 D1:B55C -  -  -  -  
   13 D1:B55C -  -  -  -  ; ***************************************************************************************
   14 D1:B55C -  -  -  -  ;
   15 D1:B55C -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B55C -  -  -  -  ;
   17 D1:B55C -  -  -  -  ; ***************************************************************************************
   18 D1:B55C -  -  -  -  
   19 D1:B55C -  -  -  -  Int32Add:
   20 D1:B55C 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B55E D9 -  -  -  		exx
   22 D1:B55F 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B562 D9 -  -  -  		exx
   24 D1:B563 C9 -  -  -  		ret
   25 D1:B564 -  -  -  -  
   26 D1:B564 -  -  -  -  ; ***************************************************************************************
   27 D1:B564 -  -  -  -  ;
   28 D1:B564 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B564 -  -  -  -  ;
   30 D1:B564 -  -  -  -  ; ***************************************************************************************
   31 D1:B564 -  -  -  -  
   32 D1:B564 -  -  -  -  Int32Subtract:
   33 D1:B564 AF -  -  -  		xor 	a 							; clear carry
   34 D1:B565 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B568 D9 -  -  -  		exx
   36 D1:B569 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B56C D9 -  -  -  		exx
   38 D1:B56D C9 -  -  -  		ret
   39 D1:B56E -  -  -  -  
   40 D1:B56E -  -  -  -  ; ***************************************************************************************
   41 D1:B56E -  -  -  -  ;
   42 D1:B56E -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B56E -  -  -  -  ;
   44 D1:B56E -  -  -  -  ; ***************************************************************************************
   45 D1:B56E -  -  -  -  
   46 D1:B56E -  -  -  -  Int32And:
   47 D1:B56E D9 -  -  -  		exx
   48 D1:B56F CD 74 B5 D1 		call 	_I32AndHLDE
   49 D1:B573 D9 -  -  -  		exx
   50 D1:B574 -  -  -  -  _I32AndHLDE:		
   51 D1:B574 7C -  -  -  		ld 		a,h
   52 D1:B575 A2 -  -  -  		and 	d
   53 D1:B576 67 -  -  -  		ld 		h,a
   54 D1:B577 7D -  -  -  		ld 		a,l
   55 D1:B578 A3 -  -  -  		and 	e
   56 D1:B579 6F -  -  -  		ld 		l,a
   57 D1:B57A C9 -  -  -  		ret
   58 D1:B57B -  -  -  -  
   59 D1:B57B -  -  -  -  ; ***************************************************************************************
   60 D1:B57B -  -  -  -  ;
   61 D1:B57B -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B57B -  -  -  -  ;
   63 D1:B57B -  -  -  -  ; ***************************************************************************************
   64 D1:B57B -  -  -  -  
   65 D1:B57B -  -  -  -  Int32Or:
   66 D1:B57B D9 -  -  -  		exx
   67 D1:B57C CD 81 B5 D1 		call 	_I32OrHLDE
   68 D1:B580 D9 -  -  -  		exx
   69 D1:B581 -  -  -  -  _I32OrHLDE:		
   70 D1:B581 7C -  -  -  		ld 		a,h
   71 D1:B582 B2 -  -  -  		or 		d
   72 D1:B583 67 -  -  -  		ld 		h,a
   73 D1:B584 7D -  -  -  		ld 		a,l
   74 D1:B585 B3 -  -  -  		or 		e
   75 D1:B586 6F -  -  -  		ld 		l,a
   76 D1:B587 C9 -  -  -  		ret
   77 D1:B588 -  -  -  -  
   78 D1:B588 -  -  -  -  ; ***************************************************************************************
   79 D1:B588 -  -  -  -  ;
   80 D1:B588 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B588 -  -  -  -  ;
   82 D1:B588 -  -  -  -  ; ***************************************************************************************
   83 D1:B588 -  -  -  -  
   84 D1:B588 -  -  -  -  Int32Xor:
   85 D1:B588 D9 -  -  -  		exx
   86 D1:B589 CD 8E B5 D1 		call 	_I32XorHLDE
   87 D1:B58D D9 -  -  -  		exx
   88 D1:B58E -  -  -  -  _I32XorHLDE:		
   89 D1:B58E 7C -  -  -  		ld 		a,h
   90 D1:B58F AA -  -  -  		xor 	d
   91 D1:B590 67 -  -  -  		ld 		h,a
   92 D1:B591 7D -  -  -  		ld 		a,l
   93 D1:B592 AB -  -  -  		xor 	e
   94 D1:B593 6F -  -  -  		ld 		l,a
   95 D1:B594 C9 -  -  -  		ret
   96 D1:B595 -  -  -  -  
   97 D1:B595 -  -  -  -  ; ***************************************************************************************
   98 D1:B595 -  -  -  -  ;
   99 D1:B595 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B595 -  -  -  -  ;
  101 D1:B595 -  -  -  -  ; ***************************************************************************************
  102 D1:B595 -  -  -  -  
  103 D1:B595 -  -  -  -  Int32Zero:
  104 D1:B595 D9 -  -  -  		exx
  105 D1:B596 7D -  -  -  		ld 		a,l
  106 D1:B597 B4 -  -  -  		or 		h
  107 D1:B598 D9 -  -  -  		exx
  108 D1:B599 B5 -  -  -  		or 		l
  109 D1:B59A B4 -  -  -  		or 		h
  110 D1:B59B C9 -  -  -  		ret
  111 D1:B59C -  -  -  -  
  112 D1:B59C -  -  -  -  ; ***************************************************************************************
  113 D1:B59C -  -  -  -  ;
  114 D1:B59C -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B59C -  -  -  -  ;
  116 D1:B59C -  -  -  -  ; ***************************************************************************************
  117 D1:B59C -  -  -  -  
  118 D1:B59C -  -  -  -  Int32Compare:
  119 D1:B59C E5 -  -  -  		push 	hl 							; save HL
  120 D1:B59D AF -  -  -  		xor 	a 							; clear carry
  121 D1:B59E 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B5A1 D9 -  -  -  		exx
  123 D1:B5A2 E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B5A3 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B5A6 -  -  -  -  		;
  126 D1:B5A6 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B5A7 E2 AF B5 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B5AB 78 -  -  -  		ld 		a,b
  129 D1:B5AC EE 80 -  -  		xor 	$80
  130 D1:B5AE 47 -  -  -  		ld 		b,a
  131 D1:B5AF -  -  -  -  _I32CNoOverflow:
  132 D1:B5AF 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B5B0 B5 -  -  -  		or 		l
  134 D1:B5B1 D9 -  -  -  		exx 
  135 D1:B5B2 B4 -  -  -  		or 		h
  136 D1:B5B3 B5 -  -  -  		or 		l
  137 D1:B5B4 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B5B6 -  -  -  -  		;
  139 D1:B5B6 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B5B7 CB 78 -  -  		bit 	7,b
  141 D1:B5B9 D9 -  -  -  		exx
  142 D1:B5BA 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B5BC 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B5BE 3E FF -  -  		ld 		a,$FF
  145 D1:B5C0 -  -  -  -  _I32NotPos:
  146 D1:B5C0 D9 -  -  -  		exx
  147 D1:B5C1 E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B5C2 D9 -  -  -  		exx
  149 D1:B5C3 E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B5C4 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B5C5 C9 -  -  -  		ret
  152 D1:B5C6 -  -  -  -  
  153 D1:B5C6 -  -  -  -  ; ***************************************************************************************
  154 D1:B5C6 -  -  -  -  ;
  155 D1:B5C6 -  -  -  -  ;										Negate HL'HL
  156 D1:B5C6 -  -  -  -  ;
  157 D1:B5C6 -  -  -  -  ; ***************************************************************************************
  158 D1:B5C6 -  -  -  -  
  159 D1:B5C6 -  -  -  -  Int32Negate:
  160 D1:B5C6 AF -  -  -  		xor 	a
  161 D1:B5C7 CD D2 B5 D1 		call 	_I32NSubtract
  162 D1:B5CB D9 -  -  -  		exx
  163 D1:B5CC CD D2 B5 D1 		call 	_I32NSubtract
  164 D1:B5D0 D9 -  -  -  		exx
  165 D1:B5D1 C9 -  -  -  		ret
  166 D1:B5D2 -  -  -  -  _I32NSubtract:
  167 D1:B5D2 D5 -  -  -  		push 	de
  168 D1:B5D3 EB -  -  -  		ex 		de,hl
  169 D1:B5D4 21 00 00 00 		ld 		hl,$0000
  170 D1:B5D8 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B5DB D1 -  -  -  		pop 	de
  172 D1:B5DC C9 -  -  -  		ret
  173 D1:B5DD -  -  -  -  		
  174 D1:B5DD -  -  -  -  ; ***************************************************************************************
  175 D1:B5DD -  -  -  -  ;
  176 D1:B5DD -  -  -  -  ;									Changes and Updates
  177 D1:B5DD -  -  -  -  ;
  178 D1:B5DD -  -  -  -  ; ***************************************************************************************
  179 D1:B5DD -  -  -  -  ;
  180 D1:B5DD -  -  -  -  ;		Date			Notes
  181 D1:B5DD -  -  -  -  ;		==== 			=====
  182 D1:B5DD -  -  -  -  ;
  183 D1:B5DD -  -  -  -  ; ***************************************************************************************
  184 D1:B5DD -  -  -  -  		
Listing for file "_build.asm"
   60 D1:B5DD -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B5DD -  -  -  -  ; ***************************************************************************************
    2 D1:B5DD -  -  -  -  ; ***************************************************************************************
    3 D1:B5DD -  -  -  -  ;
    4 D1:B5DD -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B5DD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B5DD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B5DD -  -  -  -  ;		Reviewed :	No
    8 D1:B5DD -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B5DD -  -  -  -  ;
   10 D1:B5DD -  -  -  -  ; ***************************************************************************************
   11 D1:B5DD -  -  -  -  ;
   12 D1:B5DD -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B5DD -  -  -  -  ;
   14 D1:B5DD -  -  -  -  ; ***************************************************************************************
   15 D1:B5DD -  -  -  -  
   16 D1:B5DD -  -  -  -  Int32ToString:
   17 D1:B5DD C5 -  -  -  		push 	bc 							; save string start
   18 D1:B5DE D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B5DF E5 -  -  -  		push 	hl
   20 D1:B5E0 11 00 00 00 		ld	 	de,$0000
   21 D1:B5E4 D9 -  -  -  		exx
   22 D1:B5E5 D5 -  -  -  		push 	de
   23 D1:B5E6 E5 -  -  -  		push 	hl
   24 D1:B5E7 11 00 00 00 		ld 		de,$000
   25 D1:B5EB D9 -  -  -  		exx
   26 D1:B5EC 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B5ED -  -  -  -  		;
   28 D1:B5ED CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B5EF 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B5F1 ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B5F3 5F -  -  -  		ld 		e,a
   32 D1:B5F4 -  -  -  -  		;
   33 D1:B5F4 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B5F5 CB 7C -  -  		bit 	7,h
   35 D1:B5F7 D9 -  -  -  		exx
   36 D1:B5F8 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B5FA -  -  -  -  		;
   38 D1:B5FA CD C6 B5 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B5FE -  -  -  -  		;
   40 D1:B5FE 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B600 02 -  -  -  		ld 		(bc),a
   42 D1:B601 03 -  -  -  		inc 	bc
   43 D1:B602 -  -  -  -  _I32TSNotNegative:	
   44 D1:B602 CD 11 B6 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B606 -  -  -  -  _I32TSExit:
   46 D1:B606 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B608 02 -  -  -  		ld 		(bc),a 
   48 D1:B609 -  -  -  -  
   49 D1:B609 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B60A E1 -  -  -  		pop 	hl
   51 D1:B60B D1 -  -  -  		pop 	de
   52 D1:B60C D9 -  -  -  		exx
   53 D1:B60D E1 -  -  -  		pop 	hl
   54 D1:B60E D1 -  -  -  		pop 	de
   55 D1:B60F C1 -  -  -  		pop 	bc
   56 D1:B610 C9 -  -  -  		ret
   57 D1:B611 -  -  -  -  
   58 D1:B611 -  -  -  -  _I32RecursiveConvert:
   59 D1:B611 CD 1E B4 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B615 F5 -  -  -  		push 	af 							; save remainder
   61 D1:B616 CD 95 B5 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B61A C4 11 B6 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B61E F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B61F FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B621 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B623 C6 07 -  -  		add 	a,7
   67 D1:B625 -  -  -  -  _I32NotHex:
   68 D1:B625 C6 30 -  -  		add 	a,48
   69 D1:B627 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B628 03 -  -  -  		inc 	bc
   71 D1:B629 C9 -  -  -  		ret		
   72 D1:B62A -  -  -  -  
   73 D1:B62A -  -  -  -  ; ***************************************************************************************
   74 D1:B62A -  -  -  -  ;
   75 D1:B62A -  -  -  -  ;									Changes and Updates
   76 D1:B62A -  -  -  -  ;
   77 D1:B62A -  -  -  -  ; ***************************************************************************************
   78 D1:B62A -  -  -  -  ;
   79 D1:B62A -  -  -  -  ;		Date			Notes
   80 D1:B62A -  -  -  -  ;		==== 			=====
   81 D1:B62A -  -  -  -  ;
   82 D1:B62A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B62A -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B62A -  -  -  -  ; ***************************************************************************************
    2 D1:B62A -  -  -  -  ; ***************************************************************************************
    3 D1:B62A -  -  -  -  ;
    4 D1:B62A -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B62A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B62A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B62A -  -  -  -  ;		Reviewed :	No
    8 D1:B62A -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B62A -  -  -  -  ;
   10 D1:B62A -  -  -  -  ; ***************************************************************************************
   11 D1:B62A -  -  -  -  ; ***************************************************************************************
   12 D1:B62A -  -  -  -  
   13 D1:B62A -  -  -  -  #ifdef AQUARIUS
   14 D1:B62A             
   15 D1:B62A             ; ***************************************************************************************
   16 D1:B62A             ;
   17 D1:B62A             ;								Initialise system stuff
   18 D1:B62A             ;
   19 D1:B62A             ; ***************************************************************************************
   20 D1:B62A             
   21 D1:B62A             SYSInitialise:
   22 D1:B62A             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B62A             	call 	SYSPrintChar
   24 D1:B62A             	ret
   25 D1:B62A             
   26 D1:B62A             ; ***************************************************************************************
   27 D1:B62A             ;
   28 D1:B62A             ;								Terminate system stuff
   29 D1:B62A             ;
   30 D1:B62A             ; ***************************************************************************************
   31 D1:B62A             
   32 D1:B62A             SYSTerminate:
   33 D1:B62A             	jr 		SYSTerminate
   34 D1:B62A             
   35 D1:B62A             ; ***************************************************************************************
   36 D1:B62A             ;
   37 D1:B62A             ;								Print A character
   38 D1:B62A             ;
   39 D1:B62A             ; ***************************************************************************************
   40 D1:B62A             
   41 D1:B62A             SYSPrintChar:
   42 D1:B62A             	push 	af 									; we stack everything including alt registers
   43 D1:B62A             	push 	bc
   44 D1:B62A             	push 	de
   45 D1:B62A             	push 	hl
   46 D1:B62A             	push 	ix
   47 D1:B62A             	push 	iy
   48 D1:B62A             	exx
   49 D1:B62A             	push 	bc
   50 D1:B62A             	push 	de
   51 D1:B62A             	push 	hl
   52 D1:B62A             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B62A             	pop 	hl
   54 D1:B62A             	pop 	de
   55 D1:B62A             	pop 	bc
   56 D1:B62A             	exx
   57 D1:B62A             	pop 	iy
   58 D1:B62A             	pop 	ix
   59 D1:B62A             	pop 	hl
   60 D1:B62A             	pop 	de
   61 D1:B62A             	pop 	bc
   62 D1:B62A             	pop 	af
   63 D1:B62A             	ret		
   64 D1:B62A             
   65 D1:B62A             ; ***************************************************************************************
   66 D1:B62A             ;
   67 D1:B62A             ;									Print Newline
   68 D1:B62A             ;
   69 D1:B62A             ; ***************************************************************************************
   70 D1:B62A             
   71 D1:B62A             SYSPrintCRLF:
   72 D1:B62A             	push 	af
   73 D1:B62A             	ld 		a,13
   74 D1:B62A             	call 	SYSPrintChar
   75 D1:B62A             	ld 		a,10
   76 D1:B62A             	call 	SYSPrintChar
   77 D1:B62A             	pop 	af
   78 D1:B62A             	ret
   79 D1:B62A             
   80 D1:B62A             ; ***************************************************************************************
   81 D1:B62A             ;
   82 D1:B62A             ;									Get time into HL'HL
   83 D1:B62A             ;
   84 D1:B62A             ; ***************************************************************************************
   85 D1:B62A             
   86 D1:B62A             SYSGetTimer:
   87 D1:B62A              	in 		a,($00)
   88 D1:B62A              	ld 		l,a
   89 D1:B62A              	in 		a,($01)
   90 D1:B62A              	ld 		h,a
   91 D1:B62A              	exx
   92 D1:B62A              	in 		a,($02)
   93 D1:B62A              	ld 		l,a
   94 D1:B62A              	in 		a,($03)
   95 D1:B62A              	ld 		h,a
   96 D1:B62A              	exx
   97 D1:B62A             	ret 	
   98 D1:B62A             	
   99 D1:B62A             #endif
  100 D1:B62A -  -  -  -  
  101 D1:B62A -  -  -  -  ; ***************************************************************************************
  102 D1:B62A -  -  -  -  ;
  103 D1:B62A -  -  -  -  ;									Changes and Updates
  104 D1:B62A -  -  -  -  ;
  105 D1:B62A -  -  -  -  ; ***************************************************************************************
  106 D1:B62A -  -  -  -  ;
  107 D1:B62A -  -  -  -  ;		Date			Notes
  108 D1:B62A -  -  -  -  ;		==== 			=====
  109 D1:B62A -  -  -  -  ;
  110 D1:B62A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B62A -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B62A -  -  -  -  ; ***************************************************************************************
    2 D1:B62A -  -  -  -  ; ***************************************************************************************
    3 D1:B62A -  -  -  -  ;
    4 D1:B62A -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B62A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B62A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B62A -  -  -  -  ;		Reviewed :	No
    8 D1:B62A -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B62A -  -  -  -  ;
   10 D1:B62A -  -  -  -  ; ***************************************************************************************
   11 D1:B62A -  -  -  -  ; ***************************************************************************************
   12 D1:B62A -  -  -  -  
   13 D1:B62A -  -  -  -  #ifdef CLEANEZ80
   14 D1:B62A             
   15 D1:B62A             ; ***************************************************************************************
   16 D1:B62A             ;
   17 D1:B62A             ;								Initialise system stuff
   18 D1:B62A             ;
   19 D1:B62A             ; ***************************************************************************************
   20 D1:B62A             
   21 D1:B62A             SYSInitialise:
   22 D1:B62A             	ret
   23 D1:B62A             
   24 D1:B62A             ; ***************************************************************************************
   25 D1:B62A             ;
   26 D1:B62A             ;								Terminate system stuff
   27 D1:B62A             ;
   28 D1:B62A             ; ***************************************************************************************
   29 D1:B62A             
   30 D1:B62A             SYSTerminate:
   31 D1:B62A             	ret
   32 D1:B62A             
   33 D1:B62A             ; ***************************************************************************************
   34 D1:B62A             ;
   35 D1:B62A             ;								Print A character
   36 D1:B62A             ;
   37 D1:B62A             ; ***************************************************************************************
   38 D1:B62A             
   39 D1:B62A             SYSPrintChar:
   40 D1:B62A             	ret		
   41 D1:B62A             
   42 D1:B62A             ; ***************************************************************************************
   43 D1:B62A             ;
   44 D1:B62A             ;									Print Newline
   45 D1:B62A             ;
   46 D1:B62A             ; ***************************************************************************************
   47 D1:B62A             
   48 D1:B62A             SYSPrintCRLF:
   49 D1:B62A             	ret
   50 D1:B62A             
   51 D1:B62A             ; ***************************************************************************************
   52 D1:B62A             ;
   53 D1:B62A             ;									Get time into HL'HL
   54 D1:B62A             ;
   55 D1:B62A             ; ***************************************************************************************
   56 D1:B62A             
   57 D1:B62A             SYSGetTimer:
   58 D1:B62A             	ret
   59 D1:B62A             
   60 D1:B62A             #endif
   61 D1:B62A -  -  -  -  
   62 D1:B62A -  -  -  -  ; ***************************************************************************************
   63 D1:B62A -  -  -  -  ;
   64 D1:B62A -  -  -  -  ;									Changes and Updates
   65 D1:B62A -  -  -  -  ;
   66 D1:B62A -  -  -  -  ; ***************************************************************************************
   67 D1:B62A -  -  -  -  ;
   68 D1:B62A -  -  -  -  ;		Date			Notes
   69 D1:B62A -  -  -  -  ;		==== 			=====
   70 D1:B62A -  -  -  -  ;
   71 D1:B62A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B62A -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B62A -  -  -  -  ; ***************************************************************************************
    2 D1:B62A -  -  -  -  ; ***************************************************************************************
    3 D1:B62A -  -  -  -  ;
    4 D1:B62A -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B62A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B62A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B62A -  -  -  -  ;		Reviewed :	No
    8 D1:B62A -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B62A -  -  -  -  ;
   10 D1:B62A -  -  -  -  ; ***************************************************************************************
   11 D1:B62A -  -  -  -  ; ***************************************************************************************
   12 D1:B62A -  -  -  -  
   13 D1:B62A -  -  -  -  #ifdef TI84
   14 D1:B62A -  -  -  -  
   15 D1:B62A -  -  -  -  ; ***************************************************************************************
   16 D1:B62A -  -  -  -  ;
   17 D1:B62A -  -  -  -  ;								Initialise system stuff
   18 D1:B62A -  -  -  -  ;
   19 D1:B62A -  -  -  -  ; ***************************************************************************************
   20 D1:B62A -  -  -  -  
   21 D1:B62A -  -  -  -  SYSInitialise:
   22 D1:B62A F3 -  -  -  	di
   23 D1:B62B ED 73 48 B6 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B630 FD 22 4C B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B635 C9 -  -  -  	ret
   26 D1:B636 -  -  -  -  
   27 D1:B636 -  -  -  -  ; ***************************************************************************************
   28 D1:B636 -  -  -  -  ;
   29 D1:B636 -  -  -  -  ;								Terminate system stuff
   30 D1:B636 -  -  -  -  ;
   31 D1:B636 -  -  -  -  ; ***************************************************************************************
   32 D1:B636 -  -  -  -  
   33 D1:B636 -  -  -  -  SYSTerminate:
   34 D1:B636 ED 7B 48 B6 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B63B FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B63D FD 2A 4C B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B642 FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B646 FB -  -  -  	ei
   39 D1:B647 C9 -  -  -  	ret 										; and exit.
   40 D1:B648 -  -  -  -  
   41 D1:B648 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B648 00 00 00 00 	.dw 	0,0
   43 D1:B64C -  -  -  -  _IYTemp84:
   44 D1:B64C 00 00 00 00 	.dw 	0,0		
   45 D1:B650 -  -  -  -  
   46 D1:B650 -  -  -  -  ; ***************************************************************************************
   47 D1:B650 -  -  -  -  ;
   48 D1:B650 -  -  -  -  ;								Print A character
   49 D1:B650 -  -  -  -  ;
   50 D1:B650 -  -  -  -  ; ***************************************************************************************
   51 D1:B650 -  -  -  -  
   52 D1:B650 -  -  -  -  SYSPrintChar:
   53 D1:B650 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B651 C5 -  -  -  	push 	bc
   55 D1:B652 D5 -  -  -  	push 	de
   56 D1:B653 E5 -  -  -  	push 	hl
   57 D1:B654 DD E5 -  -  	push 	ix
   58 D1:B656 FD E5 -  -  	push 	iy
   59 D1:B658 D9 -  -  -  	exx
   60 D1:B659 C5 -  -  -  	push 	bc
   61 D1:B65A D5 -  -  -  	push 	de
   62 D1:B65B E5 -  -  -  	push 	hl
   63 D1:B65C -  -  -  -  
   64 D1:B65C FD 2A 4C B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B661 CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B665 F3 -  -  -  	di
   67 D1:B666 FD 22 4C B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B66B -  -  -  -  
   69 D1:B66B E1 -  -  -  	pop 	hl
   70 D1:B66C D1 -  -  -  	pop 	de
   71 D1:B66D C1 -  -  -  	pop 	bc
   72 D1:B66E D9 -  -  -  	exx
   73 D1:B66F FD E1 -  -  	pop 	iy
   74 D1:B671 DD E1 -  -  	pop 	ix
   75 D1:B673 E1 -  -  -  	pop 	hl
   76 D1:B674 D1 -  -  -  	pop 	de
   77 D1:B675 C1 -  -  -  	pop 	bc
   78 D1:B676 F1 -  -  -  	pop 	af
   79 D1:B677 C9 -  -  -  	ret		
   80 D1:B678 -  -  -  -  
   81 D1:B678 -  -  -  -  ; ***************************************************************************************
   82 D1:B678 -  -  -  -  ;
   83 D1:B678 -  -  -  -  ;									Print Newline
   84 D1:B678 -  -  -  -  ;
   85 D1:B678 -  -  -  -  ; ***************************************************************************************
   86 D1:B678 -  -  -  -  
   87 D1:B678 -  -  -  -  SYSPrintCRLF:
   88 D1:B678 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B679 C5 -  -  -  	push 	bc
   90 D1:B67A D5 -  -  -  	push 	de
   91 D1:B67B E5 -  -  -  	push 	hl
   92 D1:B67C DD E5 -  -  	push 	ix
   93 D1:B67E FD E5 -  -  	push 	iy
   94 D1:B680 D9 -  -  -  	exx
   95 D1:B681 C5 -  -  -  	push 	bc
   96 D1:B682 D5 -  -  -  	push 	de
   97 D1:B683 E5 -  -  -  	push 	hl
   98 D1:B684 -  -  -  -  
   99 D1:B684 FD 2A 4C B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B689 CD F0 07 02 	call 	_newline
  101 D1:B68D F3 -  -  -  	di
  102 D1:B68E FD 22 4C B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B693 -  -  -  -  
  104 D1:B693 E1 -  -  -  	pop 	hl
  105 D1:B694 D1 -  -  -  	pop 	de
  106 D1:B695 C1 -  -  -  	pop 	bc
  107 D1:B696 D9 -  -  -  	exx
  108 D1:B697 FD E1 -  -  	pop 	iy
  109 D1:B699 DD E1 -  -  	pop 	ix
  110 D1:B69B E1 -  -  -  	pop 	hl
  111 D1:B69C D1 -  -  -  	pop 	de
  112 D1:B69D C1 -  -  -  	pop 	bc
  113 D1:B69E F1 -  -  -  	pop 	af
  114 D1:B69F C9 -  -  -  	ret
  115 D1:B6A0 -  -  -  -  
  116 D1:B6A0 -  -  -  -  ; ***************************************************************************************
  117 D1:B6A0 -  -  -  -  ;
  118 D1:B6A0 -  -  -  -  ;									Get time into HL'HL
  119 D1:B6A0 -  -  -  -  ;
  120 D1:B6A0 -  -  -  -  ; ***************************************************************************************
  121 D1:B6A0 -  -  -  -  
  122 D1:B6A0 -  -  -  -  SYSGetTimer:
  123 D1:B6A0 21 34 12 00 	ld 		hl,$1234
  124 D1:B6A4 D9 -  -  -  	exx
  125 D1:B6A5 21 78 56 00 	ld 		hl,$5678
  126 D1:B6A9 D9 -  -  -  	exx
  127 D1:B6AA C9 -  -  -  	ret
  128 D1:B6AB -  -  -  -  
  129 D1:B6AB -  -  -  -  #endif
  130 D1:B6AB -  -  -  -  
  131 D1:B6AB -  -  -  -  ; ***************************************************************************************
  132 D1:B6AB -  -  -  -  ;
  133 D1:B6AB -  -  -  -  ;									Changes and Updates
  134 D1:B6AB -  -  -  -  ;
  135 D1:B6AB -  -  -  -  ; ***************************************************************************************
  136 D1:B6AB -  -  -  -  ;
  137 D1:B6AB -  -  -  -  ;		Date			Notes
  138 D1:B6AB -  -  -  -  ;		==== 			=====
  139 D1:B6AB -  -  -  -  ;
  140 D1:B6AB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   64 D1:B6AB -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B6AB -  -  -  -  ; ***************************************************************************************
    2 D1:B6AB -  -  -  -  ; ***************************************************************************************
    3 D1:B6AB -  -  -  -  ;
    4 D1:B6AB -  -  -  -  ;		Name : 		basic.asm
    5 D1:B6AB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6AB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6AB -  -  -  -  ;		Reviewed :	No
    8 D1:B6AB -  -  -  -  ;		Purpose :	Main program.
    9 D1:B6AB -  -  -  -  ;
   10 D1:B6AB -  -  -  -  ; ***************************************************************************************
   11 D1:B6AB -  -  -  -  ; ***************************************************************************************
   12 D1:B6AB -  -  -  -  
   13 D1:B6AB 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 21 01 00 B8 
              3F 19 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 0D 
              80 07 02 00 
              02 8F 4C 80 
              06 03 00 BB 
              02 80 00 -  	.db	$21,$01,$00,$b8,$3f,$19,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$0d,$80,$07,$02,$00,$02,$8f,$4c,$80,$06,$03,$00,$bb,$02,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:B82F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:C82F -  -  -  -  EndTestInstance:
   18 D1:C82F -  -  -  -  		
   19 D1:C82F -  -  -  -  ; ***************************************************************************************
   20 D1:C82F -  -  -  -  ;
   21 D1:C82F -  -  -  -  ;									Changes and Updates
   22 D1:C82F -  -  -  -  ;
   23 D1:C82F -  -  -  -  ; ***************************************************************************************
   24 D1:C82F -  -  -  -  ;
   25 D1:C82F -  -  -  -  ;		Date			Notes
   26 D1:C82F -  -  -  -  ;		==== 			=====
   27 D1:C82F -  -  -  -  ;
   28 D1:C82F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:C82F -  -  -  -  FinalAddress:
