    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00aa ; repeat
   52 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ab ; until
   53 00:0000 -  -  -  -  #define KWD_IF                              	$00ac ; if
   54 00:0000 -  -  -  -  #define KWD_THEN                            	$00ad ; then
   55 00:0000 -  -  -  -  #define KWD_ELSE                            	$00ae ; else
   56 00:0000 -  -  -  -  #define KWD_FOR                             	$00af ; for
   57 00:0000 -  -  -  -  #define KWD_TO                              	$00b0 ; to
   58 00:0000 -  -  -  -  #define KWD_STEP                            	$00b1 ; step
   59 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b2 ; next
   60 00:0000 -  -  -  -  #define KWD_DEF                             	$00b3 ; def
   61 00:0000 -  -  -  -  #define KWD_PROC                            	$00b4 ; proc
   62 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b5 ; endproc
   63 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b6 ; gosub
   64 00:0000 -  -  -  -  #define KWD_RETURN                          	$00b7 ; return
   65 00:0000 -  -  -  -  #define KWD_GOTO                            	$00b8 ; goto
   66 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00b9 ; local
   67 00:0000 -  -  -  -  #define KWD_DIM                             	$00ba ; dim
   68 00:0000 -  -  -  -  #define KWD_REM                             	$00bb ; rem
   69 00:0000 -  -  -  -  #define KWD_LET                             	$00bc ; let
   70 00:0000 -  -  -  -  #define KWD_VDU                             	$00bd ; vdu
   71 00:0000 -  -  -  -  #define KWD_PRINT                           	$00be ; print
   72 00:0000 -  -  -  -  #define KWD_LOAD                            	$00bf ; load
   73 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c0 ; save
   74 00:0000 -  -  -  -  #define KWD_LIST                            	$00c1 ; list
   75 00:0000 -  -  -  -  #define KWD_NEW                             	$00c2 ; new
   76 00:0000 -  -  -  -  #define KWD_RUN                             	$00c3 ; run
   77 00:0000 -  -  -  -  #define KWD_READ                            	$00c4 ; read
   78 00:0000 -  -  -  -  #define KWD_DATA                            	$00c5 ; data
   79 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c6 ; restore
   80 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00c7 ; assert
   81 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00c8 ; clear
   82 00:0000 -  -  -  -  #define KWD_END                             	$00c9 ; end
   83 00:0000 -  -  -  -  #define KWD_STOP                            	$00ca ; stop
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DISABLED = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DISABLED
   35 00:0000             	ld a,ERRID_DISABLED
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DIVZERO = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DIVZERO
   42 00:0000             	ld a,ERRID_DIVZERO
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_MEMORY = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_MEMORY
   49 00:0000             	ld a,ERRID_MEMORY
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_NOCOMMA = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   56 00:0000             	ld a,ERRID_NOCOMMA
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_NODOLLAR = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   63 00:0000             	ld a,ERRID_NODOLLAR
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_NOLBRACKET = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
   70 00:0000             	ld a,ERRID_NOLBRACKET
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_NORBRACKET = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_NORBRACKET
   77 00:0000             	ld a,ERRID_NORBRACKET
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NOTREF = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NOTREF
   84 00:0000             	ld a,ERRID_NOTREF
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_STOP = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_STOP
   91 00:0000             	ld a,ERRID_STOP
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_SYNTAX = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_SYNTAX
   98 00:0000             	ld a,ERRID_SYNTAX
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_TODO = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_TODO
  105 00:0000             	ld a,ERRID_TODO
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  112 00:0000             	ld a,ERRID_UNKNOWNVAR
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		sp,$BFFF
   40 D1:A881             #endif
   41 D1:A881             
   42 D1:A881             #endif
   43 D1:A881 CD 56 B6 D1 		call 	SYSInitialise
   44 D1:A885 11 00 B8 D1 		ld 		de,TestInstance
   45 D1:A889 21 DE D4 D1 		ld 		hl,EndTestInstance
   46 D1:A88D CD 8F B0 D1 		call 	SetCurrentInstance
   47 D1:A891 -  -  -  -  
   48 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   49 D1:A893 32 E1 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   50 D1:A897 -  -  -  -  		
   51 D1:A897 C3 5E AA D1 		jp 		Command_RUN
   52 D1:A89B -  -  -  -  
   53 D1:A89B -  -  -  -  WarmStart:		
   54 D1:A89B 3E 2A -  -  		ld 		a,'*'
   55 D1:A89D CD 7C B6 D1 		call 	SYSPrintChar
   56 D1:A8A1 CD 62 B6 D1 		call 	SYSTerminate
   57 D1:A8A5 -  -  -  -  
   58 D1:A8A5 -  -  -  -  Unimplemented:
   59 D1:A8A5 3E 04 C3 1B 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   60 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   61 D1:A8AB 3E 05 C3 1B 
              AB D1 -  -  		ERR_DIVZERO
   62 D1:A8B1 -  -  -  -  
   63 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   64 D1:A8B1 -  -  -  -  ;
   65 D1:A8B1 -  -  -  -  ;									Changes and Updates
   66 D1:A8B1 -  -  -  -  ;
   67 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   68 D1:A8B1 -  -  -  -  ;
   69 D1:A8B1 -  -  -  -  ;		Date			Notes
   70 D1:A8B1 -  -  -  -  ;		==== 			=====
   71 D1:A8B1 -  -  -  -  ;
   72 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  CurrentLineStart: 							; Start of current line.
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  		
   78 D1:A8DD -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  
   81 D1:A8E1 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   82 D1:A8E1 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   83 D1:A8E7 -  -  -  -  
   84 D1:A8E7 -  -  -  -  AConvert: 									; used for address conversions.
   85 D1:A8E7 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8ED -  -  -  -  		
   87 D1:A8ED -  -  -  -  RandomSeed: 								; random number seeds.
   88 D1:A8ED 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   89 D1:A8FD -  -  -  -  
   90 D1:A8FD -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   91 D1:A8FD 00 00 -  -  		.dw 	0
   92 D1:A8FF -  -  -  -  
   93 D1:A8FF -  -  -  -  ; ***************************************************************************************
   94 D1:A8FF -  -  -  -  ;
   95 D1:A8FF -  -  -  -  ;									Variable Information
   96 D1:A8FF -  -  -  -  ;
   97 D1:A8FF -  -  -  -  ; ***************************************************************************************
   98 D1:A8FF -  -  -  -  
   99 D1:A8FF -  -  -  -  VarNameStart: 								; first byte of name
  100 D1:A8FF 00 00 00 00 		.dw 	0,0
  101 D1:A903 -  -  -  -  VarHash: 									; name hash value
  102 D1:A903 00 00 -  -  		.dw 	0		
  103 D1:A905 -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  104 D1:A905 00 00 00 00 		.dw 	0,0
  105 D1:A909 -  -  -  -  		
  106 D1:A909 -  -  -  -  ; ***************************************************************************************
  107 D1:A909 -  -  -  -  ;
  108 D1:A909 -  -  -  -  ;										  Buffers
  109 D1:A909 -  -  -  -  ;
  110 D1:A909 -  -  -  -  ; ***************************************************************************************
  111 D1:A909 -  -  -  -  
  112 D1:A909 -  -  -  -  _USBuffer: 									; buffer space for STR$()
  113 D1:A909 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  114 D1:A919 -  -  -  -  
  115 D1:A919 -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  116 D1:A919 00 00 -  -  		.dw 	0
  117 D1:A91B -  -  -  -  
  118 D1:A91B -  -  -  -  ConvertBuffer: 								; general usage
  119 D1:A91B 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  120 D1:A95B -  -  -  -  
  121 D1:A95B -  -  -  -  ; ***************************************************************************************
  122 D1:A95B -  -  -  -  ;
  123 D1:A95B -  -  -  -  ;									Changes and Updates
  124 D1:A95B -  -  -  -  ;
  125 D1:A95B -  -  -  -  ; ***************************************************************************************
  126 D1:A95B -  -  -  -  ;
  127 D1:A95B -  -  -  -  ;		Date			Notes
  128 D1:A95B -  -  -  -  ;		==== 			=====
  129 D1:A95B -  -  -  -  ;
  130 D1:A95B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A95B -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A95B -  -  -  -  ; ***************************************************************************************
    2 D1:A95B -  -  -  -  ; ***************************************************************************************
    3 D1:A95B -  -  -  -  ;
    4 D1:A95B -  -  -  -  ;		Name : 		assert.asm
    5 D1:A95B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A95B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A95B -  -  -  -  ;		Reviewed :	No
    8 D1:A95B -  -  -  -  ;		Purpose :	Assert command
    9 D1:A95B -  -  -  -  ;
   10 D1:A95B -  -  -  -  ; ***************************************************************************************
   11 D1:A95B -  -  -  -  ; ***************************************************************************************
   12 D1:A95B -  -  -  -  
   13 D1:A95B -  -  -  -  ; ***************************************************************************************
   14 D1:A95B -  -  -  -  ;
   15 D1:A95B -  -  -  -  ;									ASSERT command
   16 D1:A95B -  -  -  -  ;
   17 D1:A95B -  -  -  -  ; ***************************************************************************************
   18 D1:A95B -  -  -  -  
   19 D1:A95B -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A95B CD 4E AD D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A95F 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A965 C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A966 3E 01 C3 1B 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A96C -  -  -  -  
   25 D1:A96C -  -  -  -  ; ***************************************************************************************
   26 D1:A96C -  -  -  -  ;
   27 D1:A96C -  -  -  -  ;									Changes and Updates
   28 D1:A96C -  -  -  -  ;
   29 D1:A96C -  -  -  -  ; ***************************************************************************************
   30 D1:A96C -  -  -  -  ;
   31 D1:A96C -  -  -  -  ;		Date			Notes
   32 D1:A96C -  -  -  -  ;		==== 			=====
   33 D1:A96C -  -  -  -  ;
   34 D1:A96C -  -  -  -  ; ***************************************************************************************
   35 D1:A96C -  -  -  -  		
Listing for file "_build.asm"
   14 D1:A96C -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A96C -  -  -  -  ; ***************************************************************************************
    2 D1:A96C -  -  -  -  ; ***************************************************************************************
    3 D1:A96C -  -  -  -  ;
    4 D1:A96C -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A96C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A96C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A96C -  -  -  -  ;		Reviewed :	No
    8 D1:A96C -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A96C -  -  -  -  ;
   10 D1:A96C -  -  -  -  ; ***************************************************************************************
   11 D1:A96C -  -  -  -  ; ***************************************************************************************
   12 D1:A96C -  -  -  -  
   13 D1:A96C -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A96C -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A96C -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A96C -  -  -  -  BadCmd_SemiColon: 	;; [;]
   17 D1:A96C -  -  -  -  BadCmd_To: 			;; [to]
   18 D1:A96C C3 85 AB D1 		jp 		SyntaxError
   19 D1:A970 -  -  -  -  
   20 D1:A970 -  -  -  -  ; ***************************************************************************************
   21 D1:A970 -  -  -  -  ;
   22 D1:A970 -  -  -  -  ;									Changes and Updates
   23 D1:A970 -  -  -  -  ;
   24 D1:A970 -  -  -  -  ; ***************************************************************************************
   25 D1:A970 -  -  -  -  ;
   26 D1:A970 -  -  -  -  ;		Date			Notes
   27 D1:A970 -  -  -  -  ;		==== 			=====
   28 D1:A970 -  -  -  -  ;
   29 D1:A970 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   15 D1:A970 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A970 -  -  -  -  ; ***************************************************************************************
    2 D1:A970 -  -  -  -  ; ***************************************************************************************
    3 D1:A970 -  -  -  -  ;
    4 D1:A970 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A970 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A970 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A970 -  -  -  -  ;		Reviewed :	No
    8 D1:A970 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A970 -  -  -  -  ;
   10 D1:A970 -  -  -  -  ; ***************************************************************************************
   11 D1:A970 -  -  -  -  ; ***************************************************************************************
   12 D1:A970 -  -  -  -  
   13 D1:A970 -  -  -  -  ; ***************************************************************************************
   14 D1:A970 -  -  -  -  ;
   15 D1:A970 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A970 -  -  -  -  ;
   17 D1:A970 -  -  -  -  ; ***************************************************************************************
   18 D1:A970 -  -  -  -  
   19 D1:A970 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A970 C9 -  -  -  		ret
   21 D1:A971 -  -  -  -  
   22 D1:A971 -  -  -  -  ; ***************************************************************************************
   23 D1:A971 -  -  -  -  ;
   24 D1:A971 -  -  -  -  ;									Changes and Updates
   25 D1:A971 -  -  -  -  ;
   26 D1:A971 -  -  -  -  ; ***************************************************************************************
   27 D1:A971 -  -  -  -  ;
   28 D1:A971 -  -  -  -  ;		Date			Notes
   29 D1:A971 -  -  -  -  ;		==== 			=====
   30 D1:A971 -  -  -  -  ;
   31 D1:A971 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A971 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A971 -  -  -  -  ; ***************************************************************************************
    2 D1:A971 -  -  -  -  ; ***************************************************************************************
    3 D1:A971 -  -  -  -  ;
    4 D1:A971 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A971 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A971 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A971 -  -  -  -  ;		Reviewed :	No
    8 D1:A971 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A971 -  -  -  -  ;
   10 D1:A971 -  -  -  -  ; ***************************************************************************************
   11 D1:A971 -  -  -  -  ; ***************************************************************************************
   12 D1:A971 -  -  -  -  
   13 D1:A971 -  -  -  -  ; ***************************************************************************************
   14 D1:A971 -  -  -  -  ;
   15 D1:A971 -  -  -  -  ;		DIM command
   16 D1:A971 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   17 D1:A971 -  -  -  -  ;			DIM n x 			Reserves x+1 bytes of memory and sets DIM equal to it
   18 D1:A971 -  -  -  -  ;								(can be comma chained)
   19 D1:A971 -  -  -  -  ;			DIM n -ve, not 1 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   20 D1:A971 -  -  -  -  ;
   21 D1:A971 -  -  -  -  ; ***************************************************************************************
   22 D1:A971 -  -  -  -  
   23 D1:A971 -  -  -  -  Command_DIM: 	;; [dim]
   24 D1:A971 F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   25 D1:A979 -  -  -  -  
   26 D1:A979 -  -  -  -  ; ***************************************************************************************
   27 D1:A979 -  -  -  -  ;
   28 D1:A979 -  -  -  -  ;									Changes and Updates
   29 D1:A979 -  -  -  -  ;
   30 D1:A979 -  -  -  -  ; ***************************************************************************************
   31 D1:A979 -  -  -  -  ;
   32 D1:A979 -  -  -  -  ;		Date			Notes
   33 D1:A979 -  -  -  -  ;		==== 			=====
   34 D1:A979 -  -  -  -  ;
   35 D1:A979 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A979 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:A979 -  -  -  -  ; ***************************************************************************************
    2 D1:A979 -  -  -  -  ; ***************************************************************************************
    3 D1:A979 -  -  -  -  ;
    4 D1:A979 -  -  -  -  ;		Name : 		end.asm
    5 D1:A979 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A979 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A979 -  -  -  -  ;		Reviewed :	No
    8 D1:A979 -  -  -  -  ;		Purpose :	End command
    9 D1:A979 -  -  -  -  ;
   10 D1:A979 -  -  -  -  ; ***************************************************************************************
   11 D1:A979 -  -  -  -  ; ***************************************************************************************
   12 D1:A979 -  -  -  -  
   13 D1:A979 -  -  -  -  ; ***************************************************************************************
   14 D1:A979 -  -  -  -  ;
   15 D1:A979 -  -  -  -  ;										END command
   16 D1:A979 -  -  -  -  ;
   17 D1:A979 -  -  -  -  ; ***************************************************************************************
   18 D1:A979 -  -  -  -  
   19 D1:A979 -  -  -  -  Command_END: 	;; [end]
   20 D1:A979 3E 00 C3 1B 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:A97F -  -  -  -  
   22 D1:A97F -  -  -  -  ; ***************************************************************************************
   23 D1:A97F -  -  -  -  ;
   24 D1:A97F -  -  -  -  ;									Changes and Updates
   25 D1:A97F -  -  -  -  ;
   26 D1:A97F -  -  -  -  ; ***************************************************************************************
   27 D1:A97F -  -  -  -  ;
   28 D1:A97F -  -  -  -  ;		Date			Notes
   29 D1:A97F -  -  -  -  ;		==== 			=====
   30 D1:A97F -  -  -  -  ;
   31 D1:A97F -  -  -  -  ; ***************************************************************************************
   32 D1:A97F -  -  -  -  		
Listing for file "_build.asm"
   18 D1:A97F -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:A97F -  -  -  -  ; ***************************************************************************************
    2 D1:A97F -  -  -  -  ; ***************************************************************************************
    3 D1:A97F -  -  -  -  ;
    4 D1:A97F -  -  -  -  ;		Name : 		endofline.asm
    5 D1:A97F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A97F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A97F -  -  -  -  ;		Reviewed :	None
    8 D1:A97F -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:A97F -  -  -  -  ;
   10 D1:A97F -  -  -  -  ; ***************************************************************************************
   11 D1:A97F -  -  -  -  ; ***************************************************************************************
   12 D1:A97F -  -  -  -  
   13 D1:A97F -  -  -  -  ; ***************************************************************************************
   14 D1:A97F -  -  -  -  ;
   15 D1:A97F -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:A97F -  -  -  -  ;
   17 D1:A97F -  -  -  -  ; ***************************************************************************************
   18 D1:A97F -  -  -  -  
   19 D1:A97F -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:A97F DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:A984 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:A988 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:A98B DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:A98D -  -  -  -  		;
   25 D1:A98D ED 7B DD A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:A992 C3 71 AA D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:A996 -  -  -  -  
   28 D1:A996 -  -  -  -  ; ***************************************************************************************
   29 D1:A996 -  -  -  -  ;
   30 D1:A996 -  -  -  -  ;									Changes and Updates
   31 D1:A996 -  -  -  -  ;
   32 D1:A996 -  -  -  -  ; ***************************************************************************************
   33 D1:A996 -  -  -  -  ;
   34 D1:A996 -  -  -  -  ;		Date			Notes
   35 D1:A996 -  -  -  -  ;		==== 			=====
   36 D1:A996 -  -  -  -  ;
   37 D1:A996 -  -  -  -  ; ***************************************************************************************
   38 D1:A996 -  -  -  -  		
Listing for file "_build.asm"
   19 D1:A996 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:A996 -  -  -  -  ; ***************************************************************************************
    2 D1:A996 -  -  -  -  ; ***************************************************************************************
    3 D1:A996 -  -  -  -  ;
    4 D1:A996 -  -  -  -  ;		Name : 		let.asm
    5 D1:A996 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A996 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A996 -  -  -  -  ;		Reviewed :	No
    8 D1:A996 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:A996 -  -  -  -  ;
   10 D1:A996 -  -  -  -  ; ***************************************************************************************
   11 D1:A996 -  -  -  -  ; ***************************************************************************************
   12 D1:A996 -  -  -  -  
   13 D1:A996 -  -  -  -  ; ***************************************************************************************
   14 D1:A996 -  -  -  -  ;
   15 D1:A996 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:A996 -  -  -  -  ;
   17 D1:A996 -  -  -  -  ; ***************************************************************************************
   18 D1:A996 -  -  -  -  
   19 D1:A996 -  -  -  -  Command_LET: 	;; [let]
   20 D1:A996 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:A999 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:A99B 28 2F -  -  		jr 		z,_CLString
   23 D1:A99D FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:A99F 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:A9A1 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:A9A3 32 FD A8 D1 		ld 		(AllowAutoCreate),a
   27 D1:A9A7 -  -  -  -  _CLNoAuto:
   28 D1:A9A7 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:A9A9 CD D0 AC D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:A9AD CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:A9AF CA 85 AB D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:A9B3 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:A9B4 C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:A9B5 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:A9B6 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:A9BA 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:A9BC CD 0F AB D1 		call 	CheckNextA
   38 D1:A9C0 -  -  -  -  
   39 D1:A9C0 CD 46 AD D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:A9C4 -  -  -  -  
   41 D1:A9C4 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:A9C5 43 -  -  -  		ld 		b,e 						
   43 D1:A9C6 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:A9C7 -  -  -  -  		;
   45 D1:A9C7 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:A9C7 -  -  -  -  		;
   47 D1:A9C7 CD D4 A9 D1 		call 	WriteHLToDE
   48 D1:A9CB C9 -  -  -  		ret
   49 D1:A9CC -  -  -  -  		;
   50 D1:A9CC -  -  -  -  		; 		String assignment code.
   51 D1:A9CC -  -  -  -  		;
   52 D1:A9CC -  -  -  -  _CLString:
   53 D1:A9CC F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
   54 D1:A9D4 -  -  -  -  
   55 D1:A9D4 -  -  -  -  ; ***************************************************************************************
   56 D1:A9D4 -  -  -  -  ;
   57 D1:A9D4 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   58 D1:A9D4 -  -  -  -  ;
   59 D1:A9D4 -  -  -  -  ; ***************************************************************************************
   60 D1:A9D4 -  -  -  -  
   61 D1:A9D4 -  -  -  -  WriteHLToDE:
   62 D1:A9D4 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   63 D1:A9D6 C2 79 AB D1 		jp 		nz,TypeMismatch
   64 D1:A9DA -  -  -  -  		;
   65 D1:A9DA -  -  -  -  		;		Do the actual write of HL'HL to UDE
   66 D1:A9DA -  -  -  -  		;		
   67 D1:A9DA -  -  -  -  _WHDWriteNumber:
   68 D1:A9DA EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   69 D1:A9DB D9 -  -  -  		exx
   70 D1:A9DC EB -  -  -  		ex 		de,hl
   71 D1:A9DD D9 -  -  -  		exx
   72 D1:A9DE -  -  -  -  
   73 D1:A9DE 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   74 D1:A9DF 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   75 D1:A9E0 72 -  -  -  		ld 		(hl),d
   76 D1:A9E1 23 -  -  -  		inc 	hl
   77 D1:A9E2 E5 -  -  -  		push 	hl
   78 D1:A9E3 D9 -  -  -  		exx
   79 D1:A9E4 E1 -  -  -  		pop 	hl
   80 D1:A9E5 73 -  -  -  		ld 		(hl),e
   81 D1:A9E6 23 -  -  -  		inc 	hl
   82 D1:A9E7 72 -  -  -  		ld 		(hl),d
   83 D1:A9E8 D9 -  -  -  		exx
   84 D1:A9E9 -  -  -  -  
   85 D1:A9E9 C9 -  -  -  		ret
   86 D1:A9EA -  -  -  -  
   87 D1:A9EA -  -  -  -  ; ***************************************************************************************
   88 D1:A9EA -  -  -  -  ;
   89 D1:A9EA -  -  -  -  ;									Changes and Updates
   90 D1:A9EA -  -  -  -  ;
   91 D1:A9EA -  -  -  -  ; ***************************************************************************************
   92 D1:A9EA -  -  -  -  ;
   93 D1:A9EA -  -  -  -  ;		Date			Notes
   94 D1:A9EA -  -  -  -  ;		==== 			=====
   95 D1:A9EA -  -  -  -  ;
   96 D1:A9EA -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   20 D1:A9EA -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:A9EA -  -  -  -  ; ***************************************************************************************
    2 D1:A9EA -  -  -  -  ; ***************************************************************************************
    3 D1:A9EA -  -  -  -  ;
    4 D1:A9EA -  -  -  -  ;		Name : 		print.asm
    5 D1:A9EA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A9EA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A9EA -  -  -  -  ;		Reviewed :	No
    8 D1:A9EA -  -  -  -  ;		Purpose :	Print command
    9 D1:A9EA -  -  -  -  ;
   10 D1:A9EA -  -  -  -  ; ***************************************************************************************
   11 D1:A9EA -  -  -  -  ; ***************************************************************************************
   12 D1:A9EA -  -  -  -  
   13 D1:A9EA -  -  -  -  ; ***************************************************************************************
   14 D1:A9EA -  -  -  -  ;
   15 D1:A9EA -  -  -  -  ;										PRINT command
   16 D1:A9EA -  -  -  -  ;
   17 D1:A9EA -  -  -  -  ; ***************************************************************************************
   18 D1:A9EA -  -  -  -  
   19 D1:A9EA -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:A9EA -  -  -  -  		;
   21 D1:A9EA -  -  -  -  		;		Main loop
   22 D1:A9EA -  -  -  -  		;
   23 D1:A9EA -  -  -  -  _CPRLoop:
   24 D1:A9EA DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   25 D1:A9ED FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   26 D1:A9EF 28 4B -  -  		jr 		z,_CPRExitNL
   27 D1:A9F1 FE A7 -  -  		cp 		KWD_COLON 	
   28 D1:A9F3 28 47 -  -  		jr 		z,_CPRExitNL
   29 D1:A9F5 FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   30 D1:A9F7 28 36 -  -  		jr 		z,_CPRCheckNext
   31 D1:A9F9 FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   32 D1:A9FB 28 2C -  -  		jr 		z,_CPRTab
   33 D1:A9FD FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   34 D1:A9FF 28 22 -  -  		jr 		z,_CPRNewLine
   35 D1:AA01 -  -  -  -  		;
   36 D1:AA01 CD 46 AD D1 		call 	EvaluateValue 				; so it must be an expression.		
   37 D1:AA05 CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   38 D1:AA07 20 14 -  -  		jr 		nz,_CPRPrintHL
   39 D1:AA09 -  -  -  -  		;
   40 D1:AA09 3E F6 -  -  		ld 		a,-10 						; signed decimal.
   41 D1:AA0B -  -  -  -  _CPRPrintNumber:
   42 D1:AA0B F5 -  -  -  		push 	af 							; print leading space
   43 D1:AA0C 3E 20 -  -  		ld 		a,' '
   44 D1:AA0E CD 7C B6 D1 		call 	SYSPrintChar
   45 D1:AA12 F1 -  -  -  		pop 	af
   46 D1:AA13 01 1B A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AA17 C5 -  -  -  		push 	bc
   48 D1:AA18 CD 09 B6 D1 		call 	Int32ToString 				; convert to string
   49 D1:AA1C E1 -  -  -  		pop 	hl
   50 D1:AA1D -  -  -  -  		;
   51 D1:AA1D -  -  -  -  		; 		Print text at HL.
   52 D1:AA1D -  -  -  -  		;
   53 D1:AA1D -  -  -  -  _CPRPrintHL:
   54 D1:AA1D CD AE B0 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AA21 18 C7 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AA23 -  -  -  -  		;
   57 D1:AA23 -  -  -  -  		; 		New line (')
   58 D1:AA23 -  -  -  -  		;
   59 D1:AA23 -  -  -  -  _CPRNewLine:
   60 D1:AA23 CD A4 B6 D1 		call 	SYSPrintCRLF
   61 D1:AA27 18 06 -  -  		jr 		_CPRCheckNext
   62 D1:AA29 -  -  -  -  		;
   63 D1:AA29 -  -  -  -  		; 		Tab command (,)
   64 D1:AA29 -  -  -  -  		;
   65 D1:AA29 -  -  -  -  _CPRTab:
   66 D1:AA29 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   67 D1:AA2B CD 7C B6 D1 		call 	SYSPrintChar
   68 D1:AA2F -  -  -  -  		;
   69 D1:AA2F -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   70 D1:AA2F -  -  -  -  		;
   71 D1:AA2F -  -  -  -  _CPRCheckNext:
   72 D1:AA2F DD 23 -  -  		inc 	ix 							; consume current
   73 D1:AA31 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   74 D1:AA34 FE 80 -  -  		cp 		KWC_EOL_MARKER
   75 D1:AA36 C8 -  -  -  		ret 	z
   76 D1:AA37 FE A7 -  -  		cp 		KWD_COLON
   77 D1:AA39 C8 -  -  -  		ret 	z
   78 D1:AA3A 18 AE -  -  		jr 		_CPRLoop 					; otherwise loop round
   79 D1:AA3C -  -  -  -  		;
   80 D1:AA3C -  -  -  -  		;		Found EOL or : not after ; ,
   81 D1:AA3C -  -  -  -  		;
   82 D1:AA3C -  -  -  -  _CPRExitNL:
   83 D1:AA3C CD A4 B6 D1 		call 	SYSPrintCRLF 				; do CR/LF
   84 D1:AA40 C9 -  -  -  		ret
Listing for file "_build.asm"
   21 D1:AA41 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AA41 -  -  -  -  ; ***************************************************************************************
    2 D1:AA41 -  -  -  -  ; ***************************************************************************************
    3 D1:AA41 -  -  -  -  ;
    4 D1:AA41 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AA41 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA41 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA41 -  -  -  -  ;		Reviewed :	No
    8 D1:AA41 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AA41 -  -  -  -  ;
   10 D1:AA41 -  -  -  -  ; ***************************************************************************************
   11 D1:AA41 -  -  -  -  ; ***************************************************************************************
   12 D1:AA41 -  -  -  -  
   13 D1:AA41 -  -  -  -  ; ***************************************************************************************
   14 D1:AA41 -  -  -  -  ;
   15 D1:AA41 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AA41 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AA41 -  -  -  -  ;
   18 D1:AA41 -  -  -  -  ; ***************************************************************************************
   19 D1:AA41 -  -  -  -  
   20 D1:AA41 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AA41 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AA41 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AA44 DD 23 -  -  		inc 	ix
   24 D1:AA46 FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   25 D1:AA48 C8 -  -  -  		ret 	z
   26 D1:AA49 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   27 D1:AA4B C8 -  -  -  		ret 	z
   28 D1:AA4C FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AA4E C2 85 AB D1 		jp 		nz,SyntaxError
   30 D1:AA52 -  -  -  -  		;		
   31 D1:AA52 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AA56 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AA59 13 -  -  -  		inc 	de 
   34 D1:AA5A 13 -  -  -  		inc 	de
   35 D1:AA5B DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AA5D C9 -  -  -  		ret
   37 D1:AA5E -  -  -  -  
   38 D1:AA5E -  -  -  -  ; ***************************************************************************************
   39 D1:AA5E -  -  -  -  ;
   40 D1:AA5E -  -  -  -  ;									Changes and Updates
   41 D1:AA5E -  -  -  -  ;
   42 D1:AA5E -  -  -  -  ; ***************************************************************************************
   43 D1:AA5E -  -  -  -  ;
   44 D1:AA5E -  -  -  -  ;		Date			Notes
   45 D1:AA5E -  -  -  -  ;		==== 			=====
   46 D1:AA5E -  -  -  -  ;
   47 D1:AA5E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   22 D1:AA5E -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AA5E -  -  -  -  ; ***************************************************************************************
    2 D1:AA5E -  -  -  -  ; ***************************************************************************************
    3 D1:AA5E -  -  -  -  ;
    4 D1:AA5E -  -  -  -  ;		Name : 		run.asm
    5 D1:AA5E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA5E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA5E -  -  -  -  ;		Reviewed :	No
    8 D1:AA5E -  -  -  -  ;		Purpose :	Run command
    9 D1:AA5E -  -  -  -  ;
   10 D1:AA5E -  -  -  -  ; ***************************************************************************************
   11 D1:AA5E -  -  -  -  ; ***************************************************************************************
   12 D1:AA5E -  -  -  -  
   13 D1:AA5E -  -  -  -  ; ***************************************************************************************
   14 D1:AA5E -  -  -  -  ;
   15 D1:AA5E -  -  -  -  ;										RUN command
   16 D1:AA5E -  -  -  -  ;
   17 D1:AA5E -  -  -  -  ; ***************************************************************************************
   18 D1:AA5E -  -  -  -  
   19 D1:AA5E -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AA5E CD 40 B0 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AA62 -  -  -  -  
   22 D1:AA62 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AA67 ED 73 DD A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AA6C AF -  -  -  		xor 	a
   25 D1:AA6D 32 FD A8 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AA71 -  -  -  -  		;
   27 D1:AA71 -  -  -  -  		; 		New line at IX.
   28 D1:AA71 -  -  -  -  		;
   29 D1:AA71 -  -  -  -  CRNewLine:
   30 D1:AA71 DD 22 D9 A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AA76 -  -  -  -  		;
   32 D1:AA76 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AA79 B7 -  -  -  		or 		a
   34 D1:AA7A CA 79 A9 D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AA7E -  -  -  -  		;
   36 D1:AA7E DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AA80 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AA82 DD 23 -  -  		inc 	ix
   39 D1:AA84 -  -  -  -  		;
   40 D1:AA84 -  -  -  -  		; 		New command at IX
   41 D1:AA84 -  -  -  -  		;
   42 D1:AA84 -  -  -  -  _CRNewCommand:	
   43 D1:AA84 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AA87 B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AA88 F2 C3 AA D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AA8C -  -  -  -  		;
   47 D1:AA8C FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AA8E 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AA90 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AA92 D2 B3 AA D1 		jp 		nc,_CRAlternateLets
   51 D1:AA96 -  -  -  -  		;
   52 D1:AA96 -  -  -  -  _CRDoCommand:		
   53 D1:AA96 E6 7F 21 00 
              00 00 6F 29 
              29 11 1E B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AAAB DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AAAD CD E1 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AAB1 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AAB3 -  -  -  -  		;
   58 D1:AAB3 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AAB3 -  -  -  -  		;
   60 D1:AAB3 -  -  -  -  		;
   61 D1:AAB3 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AAB3 -  -  -  -  		;		
   63 D1:AAB3 -  -  -  -  _CRAlternateLets:		
   64 D1:AAB3 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AAB5 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AAB7 FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AAB9 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AABB FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AABD 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AABF C3 85 AB D1 		jp 		SyntaxError
   71 D1:AAC3 -  -  -  -  		;
   72 D1:AAC3 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AAC3 -  -  -  -  		;
   74 D1:AAC3 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AAC3 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AAC5 D2 85 AB D1 		jp 		nc,SyntaxError
   77 D1:AAC9 -  -  -  -  _CRAssignmentLet:		
   78 D1:AAC9 CD 96 A9 D1 		call	Command_LET 				; do LET.
   79 D1:AACD C3 84 AA D1 		jp 		_CRNewCommand
   80 D1:AAD1 -  -  -  -  
   81 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   82 D1:AAD1 -  -  -  -  ;
   83 D1:AAD1 -  -  -  -  ;									Changes and Updates
   84 D1:AAD1 -  -  -  -  ;
   85 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   86 D1:AAD1 -  -  -  -  ;
   87 D1:AAD1 -  -  -  -  ;		Date			Notes
   88 D1:AAD1 -  -  -  -  ;		==== 			=====
   89 D1:AAD1 -  -  -  -  ;
   90 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   91 D1:AAD1 -  -  -  -  		
Listing for file "_build.asm"
   23 D1:AAD1 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:AAD1 -  -  -  -  ; ***************************************************************************************
    2 D1:AAD1 -  -  -  -  ; ***************************************************************************************
    3 D1:AAD1 -  -  -  -  ;
    4 D1:AAD1 -  -  -  -  ;		Name : 		stop.asm
    5 D1:AAD1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAD1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAD1 -  -  -  -  ;		Reviewed :	No
    8 D1:AAD1 -  -  -  -  ;		Purpose :	Stop command
    9 D1:AAD1 -  -  -  -  ;
   10 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   11 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   12 D1:AAD1 -  -  -  -  
   13 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   14 D1:AAD1 -  -  -  -  ;
   15 D1:AAD1 -  -  -  -  ;										STOP command
   16 D1:AAD1 -  -  -  -  ;
   17 D1:AAD1 -  -  -  -  ; ***************************************************************************************
   18 D1:AAD1 -  -  -  -  
   19 D1:AAD1 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:AAD1 3E 0C C3 1B 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:AAD7 -  -  -  -  
   22 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   23 D1:AAD7 -  -  -  -  ;
   24 D1:AAD7 -  -  -  -  ;									Changes and Updates
   25 D1:AAD7 -  -  -  -  ;
   26 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   27 D1:AAD7 -  -  -  -  ;
   28 D1:AAD7 -  -  -  -  ;		Date			Notes
   29 D1:AAD7 -  -  -  -  ;		==== 			=====
   30 D1:AAD7 -  -  -  -  ;
   31 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   32 D1:AAD7 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:AAD7 -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:AAD7 -  -  -  -  ; ***************************************************************************************
    2 D1:AAD7 -  -  -  -  ; ***************************************************************************************
    3 D1:AAD7 -  -  -  -  ;
    4 D1:AAD7 -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:AAD7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAD7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAD7 -  -  -  -  ;		Reviewed :	No
    8 D1:AAD7 -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:AAD7 -  -  -  -  ;
   10 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   11 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   12 D1:AAD7 -  -  -  -  
   13 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   14 D1:AAD7 -  -  -  -  ;
   15 D1:AAD7 -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:AAD7 -  -  -  -  ;
   17 D1:AAD7 -  -  -  -  ; ***************************************************************************************
   18 D1:AAD7 -  -  -  -  
   19 D1:AAD7 -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:AAD7             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:AAD7             		inc 	ix
   22 D1:AAD7             		cp 		ch 							; exit if matches
   23 D1:AAD7             		ret 	z
   24 D1:AAD7             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:AAD7             		jp 		ErrorHandler
   26 D1:AAD7             #endmacro
   27 D1:AAD7 -  -  -  -  
   28 D1:AAD7 -  -  -  -  CheckLeftBracket:
   29 D1:AAD7 DD 7E 00 DD 
              23 FE 95 C8 
              3E 09 C3 1B 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:AAE5 -  -  -  -  
   31 D1:AAE5 -  -  -  -  CheckRightBracket:
   32 D1:AAE5 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0A C3 1B 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:AAF3 -  -  -  -  
   34 D1:AAF3 -  -  -  -  CheckDollar:
   35 D1:AAF3 DD 7E 00 DD 
              23 FE 96 C8 
              3E 08 C3 1B 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:AB01 -  -  -  -  		
   37 D1:AB01 -  -  -  -  CheckComma:
   38 D1:AB01 DD 7E 00 DD 
              23 FE A6 C8 
              3E 07 C3 1B 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:AB0F -  -  -  -  
   40 D1:AB0F -  -  -  -  ; ***************************************************************************************
   41 D1:AB0F -  -  -  -  ;
   42 D1:AB0F -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:AB0F -  -  -  -  ;
   44 D1:AB0F -  -  -  -  ; ***************************************************************************************
   45 D1:AB0F -  -  -  -  
   46 D1:AB0F -  -  -  -  CheckNextA:
   47 D1:AB0F DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:AB12 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:AB14 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:AB15 3E 0D C3 1B 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:AB1B -  -  -  -  		
   52 D1:AB1B -  -  -  -  ; ***************************************************************************************
   53 D1:AB1B -  -  -  -  ;
   54 D1:AB1B -  -  -  -  ;									Changes and Updates
   55 D1:AB1B -  -  -  -  ;
   56 D1:AB1B -  -  -  -  ; ***************************************************************************************
   57 D1:AB1B -  -  -  -  ;
   58 D1:AB1B -  -  -  -  ;		Date			Notes
   59 D1:AB1B -  -  -  -  ;		==== 			=====
   60 D1:AB1B -  -  -  -  ;
   61 D1:AB1B -  -  -  -  ; ***************************************************************************************
   62 D1:AB1B -  -  -  -  		
Listing for file "_build.asm"
   25 D1:AB1B -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:AB1B -  -  -  -  ; ***************************************************************************************
    2 D1:AB1B -  -  -  -  ; ***************************************************************************************
    3 D1:AB1B -  -  -  -  ;
    4 D1:AB1B -  -  -  -  ;		Name : 		errors.asm
    5 D1:AB1B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB1B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB1B -  -  -  -  ;		Reviewed :	No
    8 D1:AB1B -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:AB1B -  -  -  -  ;
   10 D1:AB1B -  -  -  -  ; ***************************************************************************************
   11 D1:AB1B -  -  -  -  ; ***************************************************************************************
   12 D1:AB1B -  -  -  -  
   13 D1:AB1B -  -  -  -  ; ***************************************************************************************
   14 D1:AB1B -  -  -  -  ;
   15 D1:AB1B -  -  -  -  ;								Error handler, message A 
   16 D1:AB1B -  -  -  -  ;
   17 D1:AB1B -  -  -  -  ; ***************************************************************************************
   18 D1:AB1B -  -  -  -  
   19 D1:AB1B -  -  -  -  ErrorHandler:
   20 D1:AB1B F5 -  -  -  		push 	af 						; save error ID
   21 D1:AB1C -  -  -  -  
   22 D1:AB1C 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:AB20 6F -  -  -  		ld 		l,a
   24 D1:AB21 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:AB22 29 -  -  -  		add 	hl,hl 		
   26 D1:AB23 11 F1 B1 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:AB27 19 -  -  -  		add 	hl,de
   28 D1:AB28 ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:AB2A CD AE B0 D1 		call 	PrintStringAtHL
   30 D1:AB2E -  -  -  -  		;
   31 D1:AB2E F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AB2F B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AB30 28 2F -  -  		jr 		z,_EHExit
   34 D1:AB32 -  -  -  -  		;
   35 D1:AB32 DD 2A D9 A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AB37 DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AB3A B7 -  -  -  		or 		a
   38 D1:AB3B 28 24 -  -  		jr 		z,_EHExit
   39 D1:AB3D -  -  -  -  
   40 D1:AB3D 21 69 AB D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AB41 CD AE B0 D1 		call 	PrintStringAtHL 
   42 D1:AB45 -  -  -  -  		
   43 D1:AB45 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AB46 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AB4A D9 -  -  -  		exx 
   46 D1:AB4B DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AB4E DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AB51 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AB53 01 1B A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AB57 CD 09 B6 D1 		call 	Int32ToString
   51 D1:AB5B C5 -  -  -  		push 	bc
   52 D1:AB5C E1 -  -  -  		pop 	hl
   53 D1:AB5D CD AE B0 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AB61 -  -  -  -  _EHExit:		
   55 D1:AB61 CD A4 B6 D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AB65 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AB69 -  -  -  -  
   58 D1:AB69 -  -  -  -  _EHAtText:
   59 D1:AB69 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AB73 -  -  -  -  
   61 D1:AB73 -  -  -  -  NotImplemented:
   62 D1:AB73 3E 04 C3 1B 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AB79 -  -  -  -  TypeMismatch:
   64 D1:AB79 3E 02 C3 1B 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AB7F -  -  -  -  BadValue:
   66 D1:AB7F 3E 03 C3 1B 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AB85 -  -  -  -  SyntaxError:
   68 D1:AB85 3E 0D C3 1B 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AB8B -  -  -  -  						
   70 D1:AB8B -  -  -  -  ; ***************************************************************************************
   71 D1:AB8B -  -  -  -  ;
   72 D1:AB8B -  -  -  -  ;									Changes and Updates
   73 D1:AB8B -  -  -  -  ;
   74 D1:AB8B -  -  -  -  ; ***************************************************************************************
   75 D1:AB8B -  -  -  -  ;
   76 D1:AB8B -  -  -  -  ;		Date			Notes
   77 D1:AB8B -  -  -  -  ;		==== 			=====
   78 D1:AB8B -  -  -  -  ;
   79 D1:AB8B -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   26 D1:AB8B -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AB8B -  -  -  -  ; ***************************************************************************************
    2 D1:AB8B -  -  -  -  ; ***************************************************************************************
    3 D1:AB8B -  -  -  -  ;
    4 D1:AB8B -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AB8B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB8B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB8B -  -  -  -  ;		Reviewed :	No
    8 D1:AB8B -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AB8B -  -  -  -  ;
   10 D1:AB8B -  -  -  -  ; ***************************************************************************************
   11 D1:AB8B -  -  -  -  ; ***************************************************************************************
   12 D1:AB8B -  -  -  -  
   13 D1:AB8B -  -  -  -  ; ***************************************************************************************
   14 D1:AB8B -  -  -  -  ;
   15 D1:AB8B -  -  -  -  ; 									Addition
   16 D1:AB8B -  -  -  -  ;
   17 D1:AB8B -  -  -  -  ; ***************************************************************************************
   18 D1:AB8B -  -  -  -  
   19 D1:AB8B -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AB8B CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 88 
              B5 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AB99 -  -  -  -  
   22 D1:AB99 -  -  -  -  ; ***************************************************************************************
   23 D1:AB99 -  -  -  -  ;
   24 D1:AB99 -  -  -  -  ; 									Subtraction
   25 D1:AB99 -  -  -  -  ;
   26 D1:AB99 -  -  -  -  ; ***************************************************************************************
   27 D1:AB99 -  -  -  -  
   28 D1:AB99 -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AB99 CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 90 
              B5 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:ABA7 -  -  -  -  
   31 D1:ABA7 -  -  -  -  ; ***************************************************************************************
   32 D1:ABA7 -  -  -  -  ;
   33 D1:ABA7 -  -  -  -  ; 									  Multiply
   34 D1:ABA7 -  -  -  -  ;
   35 D1:ABA7 -  -  -  -  ; ***************************************************************************************
   36 D1:ABA7 -  -  -  -  
   37 D1:ABA7 -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:ABA7 CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 4F 
              B5 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:ABB5 -  -  -  -  
   40 D1:ABB5 -  -  -  -  ; ***************************************************************************************
   41 D1:ABB5 -  -  -  -  ;
   42 D1:ABB5 -  -  -  -  ; 									  Divide
   43 D1:ABB5 -  -  -  -  ;
   44 D1:ABB5 -  -  -  -  ; ***************************************************************************************
   45 D1:ABB5 -  -  -  -  
   46 D1:ABB5 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:ABB5 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:ABB5 CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 4F 
              B4 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:ABC3 -  -  -  -  
   50 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   51 D1:ABC3 -  -  -  -  ;
   52 D1:ABC3 -  -  -  -  ; 									  Modulus
   53 D1:ABC3 -  -  -  -  ;
   54 D1:ABC3 -  -  -  -  ; ***************************************************************************************
   55 D1:ABC3 -  -  -  -  
   56 D1:ABC3 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:ABC3 CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 52 
              B4 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:ABD1 -  -  -  -  
   59 D1:ABD1 -  -  -  -  ; ***************************************************************************************
   60 D1:ABD1 -  -  -  -  ;
   61 D1:ABD1 -  -  -  -  ; 									  Logical
   62 D1:ABD1 -  -  -  -  ;
   63 D1:ABD1 -  -  -  -  ; ***************************************************************************************
   64 D1:ABD1 -  -  -  -  
   65 D1:ABD1 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:ABD1 CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 9A 
              B5 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:ABDF -  -  -  -  
   68 D1:ABDF -  -  -  -  ALUOr: 			;; [or]
   69 D1:ABDF CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 A7 
              B5 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ABED -  -  -  -  
   71 D1:ABED -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ABED CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 B4 
              B5 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ABFB -  -  -  -  
   74 D1:ABFB -  -  -  -  ; ***************************************************************************************
   75 D1:ABFB -  -  -  -  ;
   76 D1:ABFB -  -  -  -  ;									Changes and Updates
   77 D1:ABFB -  -  -  -  ;
   78 D1:ABFB -  -  -  -  ; ***************************************************************************************
   79 D1:ABFB -  -  -  -  ;
   80 D1:ABFB -  -  -  -  ;		Date			Notes
   81 D1:ABFB -  -  -  -  ;		==== 			=====
   82 D1:ABFB -  -  -  -  ;
   83 D1:ABFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:ABFB -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ABFB -  -  -  -  ; ***************************************************************************************
    2 D1:ABFB -  -  -  -  ; ***************************************************************************************
    3 D1:ABFB -  -  -  -  ;
    4 D1:ABFB -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ABFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABFB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABFB -  -  -  -  ;		Reviewed :	No
    8 D1:ABFB -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ABFB -  -  -  -  ;
   10 D1:ABFB -  -  -  -  ; ***************************************************************************************
   11 D1:ABFB -  -  -  -  ; ***************************************************************************************
   12 D1:ABFB -  -  -  -  
   13 D1:ABFB -  -  -  -  ; ***************************************************************************************
   14 D1:ABFB -  -  -  -  ;
   15 D1:ABFB -  -  -  -  ; 									<l> <op> <r>
   16 D1:ABFB -  -  -  -  ;
   17 D1:ABFB -  -  -  -  ; ***************************************************************************************
   18 D1:ABFB -  -  -  -  
   19 D1:ABFB -  -  -  -  ALULongReference:			;; [!]
   20 D1:ABFB CD 0B AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:ABFF 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:AC01 CB F9 -  -  		set 	CIsReference,c
   23 D1:AC03 C9 -  -  -  		ret
   24 D1:AC04 -  -  -  -  
   25 D1:AC04 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:AC04 CD FB AB D1 		call 	ALULongReference
   27 D1:AC08 CB F1 -  -  		set 	CIsByteReference,c
   28 D1:AC0A C9 -  -  -  		ret
   29 D1:AC0B -  -  -  -  
   30 D1:AC0B -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:AC0B CD A8 AC D1 
              78 B1 C2 79 
              AB D1 C3 19 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:AC19 -  -  -  -  _BRGAMain:		
   33 D1:AC19 CD 88 B5 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:AC1D CD AE AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:AC21 C9 -  -  -  		ret
   36 D1:AC22 -  -  -  -  
   37 D1:AC22 -  -  -  -  ; ***************************************************************************************
   38 D1:AC22 -  -  -  -  ;
   39 D1:AC22 -  -  -  -  ;									Changes and Updates
   40 D1:AC22 -  -  -  -  ;
   41 D1:AC22 -  -  -  -  ; ***************************************************************************************
   42 D1:AC22 -  -  -  -  ;
   43 D1:AC22 -  -  -  -  ;		Date			Notes
   44 D1:AC22 -  -  -  -  ;		==== 			=====
   45 D1:AC22 -  -  -  -  ;
   46 D1:AC22 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:AC22 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:AC22 -  -  -  -  ; ***************************************************************************************
    2 D1:AC22 -  -  -  -  ; ***************************************************************************************
    3 D1:AC22 -  -  -  -  ;
    4 D1:AC22 -  -  -  -  ;		Name : 		compare.asm
    5 D1:AC22 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC22 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC22 -  -  -  -  ;		Reviewed :	No
    8 D1:AC22 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:AC22 -  -  -  -  ;
   10 D1:AC22 -  -  -  -  ; ***************************************************************************************
   11 D1:AC22 -  -  -  -  ; ***************************************************************************************
   12 D1:AC22 -  -  -  -  
   13 D1:AC22 -  -  -  -  #macro compare_equals(n)
   14 D1:AC22             		call 	CompareBaseCode
   15 D1:AC22             		cp 		n
   16 D1:AC22             		jr 		z,UnaryInt32True
   17 D1:AC22             		jr 		UnaryInt32False
   18 D1:AC22             #endmacro
   19 D1:AC22 -  -  -  -  
   20 D1:AC22 -  -  -  -  #macro compare_not_equals(n)
   21 D1:AC22             		call 	CompareBaseCode
   22 D1:AC22             		cp 		n
   23 D1:AC22             		jr 		nz,UnaryInt32True
   24 D1:AC22             		jr 		UnaryInt32False
   25 D1:AC22             #endmacro
   26 D1:AC22 -  -  -  -  
   27 D1:AC22 -  -  -  -  ; ***************************************************************************************
   28 D1:AC22 -  -  -  -  ;
   29 D1:AC22 -  -  -  -  ; 								Return True/False
   30 D1:AC22 -  -  -  -  ;
   31 D1:AC22 -  -  -  -  ; ***************************************************************************************
   32 D1:AC22 -  -  -  -  
   33 D1:AC22 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:AC22 3E FF -  -  		ld 		a,255
   35 D1:AC24 18 01 -  -  		jr 		_Int32Logical
   36 D1:AC26 -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:AC26 AF -  -  -  		xor 	a
   38 D1:AC27 -  -  -  -  _Int32Logical:
   39 D1:AC27 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:AC28 67 -  -  -  		ld 		h,a
   41 D1:AC29 D9 -  -  -  		exx
   42 D1:AC2A 6F -  -  -  		ld 		l,a
   43 D1:AC2B 67 -  -  -  		ld 		h,a
   44 D1:AC2C D9 -  -  -  		exx
   45 D1:AC2D 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AC2F C9 -  -  -  		ret
   47 D1:AC30 -  -  -  -  
   48 D1:AC30 -  -  -  -  ; ***************************************************************************************
   49 D1:AC30 -  -  -  -  ;
   50 D1:AC30 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AC30 -  -  -  -  ;
   52 D1:AC30 -  -  -  -  ; ***************************************************************************************
   53 D1:AC30 -  -  -  -  
   54 D1:AC30 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AC30 CD 6C AC D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AC3A -  -  -  -  
   57 D1:AC3A -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AC3A CD 6C AC D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AC44 -  -  -  -  
   60 D1:AC44 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AC44 CD 6C AC D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AC4E -  -  -  -  
   63 D1:AC4E -  -  -  -  ; ***************************************************************************************
   64 D1:AC4E -  -  -  -  ;
   65 D1:AC4E -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AC4E -  -  -  -  ;
   67 D1:AC4E -  -  -  -  ; ***************************************************************************************
   68 D1:AC4E -  -  -  -  
   69 D1:AC4E -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AC4E CD 6C AC D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AC58 -  -  -  -  
   72 D1:AC58 -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AC58 CD 6C AC D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AC62 -  -  -  -  
   75 D1:AC62 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AC62 CD 6C AC D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AC6C -  -  -  -  
   78 D1:AC6C -  -  -  -  ; ***************************************************************************************
   79 D1:AC6C -  -  -  -  ;
   80 D1:AC6C -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AC6C -  -  -  -  ;
   82 D1:AC6C -  -  -  -  ; ***************************************************************************************
   83 D1:AC6C -  -  -  -  
   84 D1:AC6C -  -  -  -  CompareBaseCode:
   85 D1:AC6C CD A8 AC D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AC70 -  -  -  -  
   87 D1:AC70 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AC71 A1 -  -  -  		and 	c
   89 D1:AC72 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AC74 C2 86 AC D1 		jp 		nz,StringCompare
   91 D1:AC78 -  -  -  -  
   92 D1:AC78 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AC79 B1 -  -  -  		or 		c
   94 D1:AC7A CB 47 -  -  		bit 	CIsString,a 
   95 D1:AC7C CA C8 B5 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AC80 -  -  -  -  
   97 D1:AC80 3E 02 C3 1B 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AC86 -  -  -  -  ;
   99 D1:AC86 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AC86 -  -  -  -  ;
  101 D1:AC86 -  -  -  -  StringCompare:
  102 D1:AC86 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AC87 BE -  -  -  		cp 		(hl)
  104 D1:AC88 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AC8A 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AC8C 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AC8D 23 -  -  -  		inc 	hl
  108 D1:AC8E FE 20 -  -  		cp 		' '
  109 D1:AC90 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AC92 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AC93 C9 -  -  -  		ret
  112 D1:AC94 -  -  -  -  
  113 D1:AC94 -  -  -  -  _SCLess:
  114 D1:AC94 3E FF -  -  		ld 		a,$FF
  115 D1:AC96 C9 -  -  -  		ret
  116 D1:AC97 -  -  -  -  _SCGreater:
  117 D1:AC97 3E 01 -  -  		ld 		a,1
  118 D1:AC99 C9 -  -  -  		ret
  119 D1:AC9A -  -  -  -  
  120 D1:AC9A 3E 0E C3 1B 
              AB D1 -  -  		ERR_TODO()
  121 D1:ACA0 -  -  -  -  
  122 D1:ACA0 -  -  -  -  ; ***************************************************************************************
  123 D1:ACA0 -  -  -  -  ;
  124 D1:ACA0 -  -  -  -  ;									Changes and Updates
  125 D1:ACA0 -  -  -  -  ;
  126 D1:ACA0 -  -  -  -  ; ***************************************************************************************
  127 D1:ACA0 -  -  -  -  ;
  128 D1:ACA0 -  -  -  -  ;		Date			Notes
  129 D1:ACA0 -  -  -  -  ;		==== 			=====
  130 D1:ACA0 -  -  -  -  ;
  131 D1:ACA0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:ACA0 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:ACA0 -  -  -  -  ; ***************************************************************************************
    2 D1:ACA0 -  -  -  -  ; ***************************************************************************************
    3 D1:ACA0 -  -  -  -  ;
    4 D1:ACA0 -  -  -  -  ;		Name : 		utility.asm
    5 D1:ACA0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACA0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACA0 -  -  -  -  ;		Reviewed :	No
    8 D1:ACA0 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:ACA0 -  -  -  -  ;
   10 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   11 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   12 D1:ACA0 -  -  -  -  
   13 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   14 D1:ACA0 -  -  -  -  ;
   15 D1:ACA0 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:ACA0 -  -  -  -  ;
   17 D1:ACA0 -  -  -  -  ; ***************************************************************************************
   18 D1:ACA0 -  -  -  -  
   19 D1:ACA0 -  -  -  -  SwapHLDE:
   20 D1:ACA0 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:ACA1 D9 -  -  -  			exx
   22 D1:ACA2 EB -  -  -  			ex 		de,hl
   23 D1:ACA3 D9 -  -  -  			exx
   24 D1:ACA4 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:ACA5 41 -  -  -  			ld 		b,c
   26 D1:ACA6 4F -  -  -  			ld 		c,a
   27 D1:ACA7 C9 -  -  -  			ret
   28 D1:ACA8 -  -  -  -  
   29 D1:ACA8 -  -  -  -  ; ***************************************************************************************
   30 D1:ACA8 -  -  -  -  ;
   31 D1:ACA8 -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:ACA8 -  -  -  -  ;
   33 D1:ACA8 -  -  -  -  ; ***************************************************************************************
   34 D1:ACA8 -  -  -  -  
   35 D1:ACA8 -  -  -  -  DereferenceBoth:
   36 D1:ACA8 CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:ACAA C4 81 AD D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:ACAE CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:ACB0 C8 -  -  -  			ret 	z
   40 D1:ACB1 CD A0 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:ACB5 CD 81 AD D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:ACB9 CD A0 AC D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:ACBD C9 -  -  -  			ret
   44 D1:ACBE -  -  -  -  
   45 D1:ACBE -  -  -  -  ; ***************************************************************************************
   46 D1:ACBE -  -  -  -  ;
   47 D1:ACBE -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:ACBE -  -  -  -  ;
   49 D1:ACBE -  -  -  -  ; ***************************************************************************************
   50 D1:ACBE -  -  -  -  
   51 D1:ACBE -  -  -  -  NegateHLHL:	
   52 D1:ACBE CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:ACC0 C2 79 AB D1 			jp 		nz,TypeMismatch
   54 D1:ACC4 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:ACC6 C4 81 AD D1 			call 	nz,Dereference 			; if required.
   56 D1:ACCA CD F2 B5 D1 			call 	Int32Negate
   57 D1:ACCE C9 -  -  -  			ret
Listing for file "_build.asm"
   30 D1:ACCF -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ACCF -  -  -  -  ; ***************************************************************************************
    2 D1:ACCF -  -  -  -  ; ***************************************************************************************
    3 D1:ACCF -  -  -  -  ;
    4 D1:ACCF -  -  -  -  ;		Name : 		expression.asm
    5 D1:ACCF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACCF -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACCF -  -  -  -  ;		Reviewed :	None
    8 D1:ACCF -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ACCF -  -  -  -  ;
   10 D1:ACCF -  -  -  -  ; ***************************************************************************************
   11 D1:ACCF -  -  -  -  ; ***************************************************************************************
   12 D1:ACCF -  -  -  -  
   13 D1:ACCF -  -  -  -  ; ***************************************************************************************
   14 D1:ACCF -  -  -  -  ;
   15 D1:ACCF -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ACCF -  -  -  -  ;
   17 D1:ACCF -  -  -  -  ; ***************************************************************************************
   18 D1:ACCF -  -  -  -  
   19 D1:ACCF -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ACCF AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ACD0 -  -  -  -  EvaluateAtPrecedence:
   22 D1:ACD0 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ACD1 -  -  -  -  		;
   24 D1:ACD1 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ACD1 -  -  -  -  		;
   26 D1:ACD1 CD DD AD D1 		call 	EvaluateTerm 				; get term
   27 D1:ACD5 -  -  -  -  		;
   28 D1:ACD5 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ACD5 -  -  -  -  		;
   30 D1:ACD5 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ACD6 -  -  -  -  _EAPLoop:
   32 D1:ACD6 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ACD9 FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ACDB D8 -  -  -  		ret 	c
   35 D1:ACDC FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ACDE D0 -  -  -  		ret 	nc
   37 D1:ACDF -  -  -  -  		;
   38 D1:ACDF -  -  -  -  		; 		Get the precedence.
   39 D1:ACDF -  -  -  -  		;
   40 D1:ACDF E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ACE0 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ACE2 21 E0 B1 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ACE6 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ACE7 6F -  -  -  		ld 		l,a
   45 D1:ACE8 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ACE9 E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ACEA -  -  -  -  		;
   48 D1:ACEA -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ACEA -  -  -  -  		;
   50 D1:ACEA 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ACEB BB -  -  -  		cp 		e
   52 D1:ACEC D0 -  -  -  		ret 	nc
   53 D1:ACED -  -  -  -  
   54 D1:ACED -  -  -  -  		;
   55 D1:ACED -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ACED -  -  -  -  		;
   57 D1:ACED D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ACEE -  -  -  -  		;
   59 D1:ACEE DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ACF1 F5 -  -  -  		push 	af
   61 D1:ACF2 -  -  -  -  		;
   62 D1:ACF2 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ACF3 D9 -  -  -  		exx 								; save HL'
   64 D1:ACF4 E5 -  -  -  		push 	hl
   65 D1:ACF5 D9 -  -  -  		exx 								
   66 D1:ACF6 E5 -  -  -  		push 	hl 							; save HL
   67 D1:ACF7 -  -  -  -  		;
   68 D1:ACF7 DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ACF9 -  -  -  -  		;
   70 D1:ACF9 -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ACF9 -  -  -  -  		;
   72 D1:ACF9 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ACFA CD D0 AC D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ACFE -  -  -  -  		;
   75 D1:ACFE -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ACFE -  -  -  -  		;
   77 D1:ACFE 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ACFF -  -  -  -  
   79 D1:ACFF EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:AD00 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:AD01 D9 -  -  -  		exx
   82 D1:AD02 EB -  -  -  		ex 		de,hl
   83 D1:AD03 E1 -  -  -  		pop 	hl
   84 D1:AD04 D9 -  -  -  		exx
   85 D1:AD05 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:AD06 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:AD07 -  -  -  -  		;
   88 D1:AD07 -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:AD07 -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:AD07 -  -  -  -  		;
   91 D1:AD07 F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:AD08 -  -  -  -  		;
   93 D1:AD08 -  -  -  -  		; 		Call the binary operator in A.
   94 D1:AD08 -  -  -  -  		;
   95 D1:AD08 D5 -  -  -  		push 	de
   96 D1:AD09 E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:AD0A E6 7F 21 00 
              00 00 6F 29 
              29 11 1E B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:AD1F E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:AD20 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:AD21 CD E1 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:AD25 -  -  -  -  		;
  102 D1:AD25 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:AD26 -  -  -  -  		;
  104 D1:AD26 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:AD28 -  -  -  -  
  106 D1:AD28 -  -  -  -  ; ***************************************************************************************
  107 D1:AD28 -  -  -  -  ;
  108 D1:AD28 -  -  -  -  ;									Changes and Updates
  109 D1:AD28 -  -  -  -  ;
  110 D1:AD28 -  -  -  -  ; ***************************************************************************************
  111 D1:AD28 -  -  -  -  ;
  112 D1:AD28 -  -  -  -  ;		Date			Notes
  113 D1:AD28 -  -  -  -  ;		==== 			=====
  114 D1:AD28 -  -  -  -  ;
  115 D1:AD28 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   31 D1:AD28 -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:AD28 -  -  -  -  ; ***************************************************************************************
    2 D1:AD28 -  -  -  -  ; ***************************************************************************************
    3 D1:AD28 -  -  -  -  ;
    4 D1:AD28 -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:AD28 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD28 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD28 -  -  -  -  ;		Reviewed :	No
    8 D1:AD28 -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:AD28 -  -  -  -  ;
   10 D1:AD28 -  -  -  -  ; ***************************************************************************************
   11 D1:AD28 -  -  -  -  ; ***************************************************************************************
   12 D1:AD28 -  -  -  -  
   13 D1:AD28 -  -  -  -  ; ***************************************************************************************
   14 D1:AD28 -  -  -  -  ;
   15 D1:AD28 -  -  -  -  ; 								Evaluate an integer term
   16 D1:AD28 -  -  -  -  ;
   17 D1:AD28 -  -  -  -  ; ***************************************************************************************
   18 D1:AD28 -  -  -  -  
   19 D1:AD28 -  -  -  -  EvaluateIntegerTerm:
   20 D1:AD28 CD DD AD D1 		call 	EvaluateTerm
   21 D1:AD2C CD 81 AD D1 		call 	DeReference
   22 D1:AD30 CB 41 -  -  		bit 	CIsString,c
   23 D1:AD32 C8 -  -  -  		ret 	z
   24 D1:AD33 C3 79 AB D1 		jp 		TypeMismatch
   25 D1:AD37 -  -  -  -  
   26 D1:AD37 -  -  -  -  ; ***************************************************************************************
   27 D1:AD37 -  -  -  -  ;
   28 D1:AD37 -  -  -  -  ; 								Evaluate a string term
   29 D1:AD37 -  -  -  -  ;
   30 D1:AD37 -  -  -  -  ; ***************************************************************************************
   31 D1:AD37 -  -  -  -  
   32 D1:AD37 -  -  -  -  EvaluateStringTerm:
   33 D1:AD37 CD DD AD D1 		call 	EvaluateTerm
   34 D1:AD3B CD 81 AD D1 		call 	DeReference
   35 D1:AD3F CB 41 -  -  		bit 	CIsString,c
   36 D1:AD41 C0 -  -  -  		ret 	nz
   37 D1:AD42 C3 79 AB D1 		jp 		TypeMismatch
   38 D1:AD46 -  -  -  -  
   39 D1:AD46 -  -  -  -  ; ***************************************************************************************
   40 D1:AD46 -  -  -  -  ;
   41 D1:AD46 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AD46 -  -  -  -  ;
   43 D1:AD46 -  -  -  -  ; ***************************************************************************************
   44 D1:AD46 -  -  -  -  
   45 D1:AD46 -  -  -  -  EvaluateValue:
   46 D1:AD46 CD CF AC D1 		call 	EvaluateAtPrecedence0
   47 D1:AD4A C3 81 AD D1 		jp 		Dereference
   48 D1:AD4E -  -  -  -  
   49 D1:AD4E -  -  -  -  ; ***************************************************************************************
   50 D1:AD4E -  -  -  -  ;
   51 D1:AD4E -  -  -  -  ; 									Evaluate a number
   52 D1:AD4E -  -  -  -  ;
   53 D1:AD4E -  -  -  -  ; ***************************************************************************************
   54 D1:AD4E -  -  -  -  
   55 D1:AD4E -  -  -  -  EvaluateInteger:
   56 D1:AD4E CD 46 AD D1 		call 	EvaluateValue
   57 D1:AD52 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AD54 C8 -  -  -  		ret 	z
   59 D1:AD55 C3 79 AB D1 		jp 		TypeMismatch
   60 D1:AD59 -  -  -  -  
   61 D1:AD59 -  -  -  -  ; ***************************************************************************************
   62 D1:AD59 -  -  -  -  ;
   63 D1:AD59 -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AD59 -  -  -  -  ;
   65 D1:AD59 -  -  -  -  ; ***************************************************************************************
   66 D1:AD59 -  -  -  -  
   67 D1:AD59 -  -  -  -  Evaluate8BitInteger:
   68 D1:AD59 CD 4E AD D1 		call 	EvaluateInteger
   69 D1:AD5D D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AD5E 7C -  -  -  		ld 		a,h
   71 D1:AD5F B5 -  -  -  		or 		l
   72 D1:AD60 D9 -  -  -  		exx 	
   73 D1:AD61 B4 -  -  -  		or 		h
   74 D1:AD62 C2 7F AB D1 		jp 		nz,BadValue
   75 D1:AD66 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AD67 C9 -  -  -  		ret
   77 D1:AD68 -  -  -  -  		
   78 D1:AD68 -  -  -  -  ; ***************************************************************************************
   79 D1:AD68 -  -  -  -  ;
   80 D1:AD68 -  -  -  -  ; 									Evaluate a string
   81 D1:AD68 -  -  -  -  ;
   82 D1:AD68 -  -  -  -  ; ***************************************************************************************
   83 D1:AD68 -  -  -  -  
   84 D1:AD68 -  -  -  -  EvaluateStringOnly:
   85 D1:AD68 CD 46 AD D1 		call 	EvaluateValue
   86 D1:AD6C CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AD6E CA 79 AB D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AD72 C9 -  -  -  		ret
   89 D1:AD73 -  -  -  -  
   90 D1:AD73 -  -  -  -  ; ***************************************************************************************
   91 D1:AD73 -  -  -  -  ;
   92 D1:AD73 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AD73 -  -  -  -  ;
   94 D1:AD73 -  -  -  -  ; ***************************************************************************************
   95 D1:AD73 -  -  -  -  
   96 D1:AD73 -  -  -  -  Return8BitConstant:
   97 D1:AD73 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AD77 6F -  -  -  		ld 		l,a
   99 D1:AD78 -  -  -  -  Return16BitConstant:
  100 D1:AD78 D9 -  -  -  		exx 								; clear HL'
  101 D1:AD79 21 00 00 00 		ld 		hl,0
  102 D1:AD7D D9 -  -  -  		exx
  103 D1:AD7E 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AD80 C9 -  -  -  		ret
  105 D1:AD81 -  -  -  -  
  106 D1:AD81 -  -  -  -  ; ***************************************************************************************
  107 D1:AD81 -  -  -  -  ;
  108 D1:AD81 -  -  -  -  ;									Changes and Updates
  109 D1:AD81 -  -  -  -  ;
  110 D1:AD81 -  -  -  -  ; ***************************************************************************************
  111 D1:AD81 -  -  -  -  ;
  112 D1:AD81 -  -  -  -  ;		Date			Notes
  113 D1:AD81 -  -  -  -  ;		==== 			=====
  114 D1:AD81 -  -  -  -  ;
  115 D1:AD81 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:AD81 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AD81 -  -  -  -  ; ***************************************************************************************
    2 D1:AD81 -  -  -  -  ; ***************************************************************************************
    3 D1:AD81 -  -  -  -  ;
    4 D1:AD81 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AD81 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD81 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AD81 -  -  -  -  ;		Reviewed :	No
    8 D1:AD81 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AD81 -  -  -  -  ;
   10 D1:AD81 -  -  -  -  ; ***************************************************************************************
   11 D1:AD81 -  -  -  -  ; ***************************************************************************************
   12 D1:AD81 -  -  -  -  
   13 D1:AD81 -  -  -  -  ; ***************************************************************************************
   14 D1:AD81 -  -  -  -  ;
   15 D1:AD81 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AD81 -  -  -  -  ;
   17 D1:AD81 -  -  -  -  ; ***************************************************************************************
   18 D1:AD81 -  -  -  -  
   19 D1:AD81 -  -  -  -  Dereference:
   20 D1:AD81 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AD83 C8 -  -  -  		ret 	z
   22 D1:AD84 -  -  -  -  
   23 D1:AD84 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AD86 -  -  -  -  		
   25 D1:AD86 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AD88 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AD8A -  -  -  -  
   28 D1:AD8A CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AD8C 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AD8E -  -  -  -  
   31 D1:AD8E E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AD8F ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AD91 D9 -  -  -  		exx
   34 D1:AD92 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AD93 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AD94 23 -  -  -  		inc  	hl
   37 D1:AD95 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AD97 D9 -  -  -  		exx 								; fix back
   39 D1:AD98 C9 -  -  -  		ret
   40 D1:AD99 -  -  -  -  
   41 D1:AD99 -  -  -  -  _DeRefByte:		
   42 D1:AD99 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AD9A 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AD9E 6F -  -  -  		ld	 	l,a
   45 D1:AD9F D9 -  -  -  		exx
   46 D1:ADA0 21 00 00 00 		ld 		hl,$0000
   47 D1:ADA4 D9 -  -  -  		exx
   48 D1:ADA5 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:ADA7 C9 -  -  -  		ret
   50 D1:ADA8 -  -  -  -  
   51 D1:ADA8 -  -  -  -  _DRInternal:
   52 D1:ADA8 3E 04 C3 1B 
              AB D1 -  -  		ERR_DISABLED
   53 D1:ADAE -  -  -  -  
   54 D1:ADAE -  -  -  -  ; ***************************************************************************************
   55 D1:ADAE -  -  -  -  ;
   56 D1:ADAE -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:ADAE -  -  -  -  ;
   58 D1:ADAE -  -  -  -  ; ***************************************************************************************
   59 D1:ADAE -  -  -  -  
   60 D1:ADAE -  -  -  -  DRConvertHLHLToAddress:
   61 D1:ADAE -  -  -  -  		#ifdef EZ80
   62 D1:ADAE 22 E7 A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:ADB2 D9 -  -  -  		exx
   64 D1:ADB3 22 E9 A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:ADB7 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:ADBB D9 -  -  -  		exx
   67 D1:ADBC 2A E7 A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:ADC0 -  -  -  -  		#endif
   69 D1:ADC0 C9 -  -  -  		ret
   70 D1:ADC1 -  -  -  -  
   71 D1:ADC1 -  -  -  -  ; ***************************************************************************************
   72 D1:ADC1 -  -  -  -  ;
   73 D1:ADC1 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:ADC1 -  -  -  -  ;
   75 D1:ADC1 -  -  -  -  ; ***************************************************************************************
   76 D1:ADC1 -  -  -  -  
   77 D1:ADC1 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:ADC1 -  -  -  -  		#ifdef EZ80
   79 D1:ADC1 22 E7 A8 D1 		ld 		(AConvert),hl
   80 D1:ADC5 21 00 00 00 		ld 		hl,$0000
   81 D1:ADC9 22 EA A8 D1 		ld 		(AConvert+3),hl
   82 D1:ADCD D9 -  -  -  		exx
   83 D1:ADCE 2A E9 A8 D1 		ld 		hl,(AConvert+2)
   84 D1:ADD2 D9 -  -  -  		exx
   85 D1:ADD3 AF -  -  -  		xor 	a
   86 D1:ADD4 32 E9 A8 D1 		ld 		(AConvert+2),a
   87 D1:ADD8 2A E7 A8 D1 		ld 		hl,(AConvert)
   88 D1:ADDC -  -  -  -  		#endif
   89 D1:ADDC C9 -  -  -  		ret
   90 D1:ADDD -  -  -  -  
   91 D1:ADDD -  -  -  -  ; ***************************************************************************************
   92 D1:ADDD -  -  -  -  ;
   93 D1:ADDD -  -  -  -  ;									Changes and Updates
   94 D1:ADDD -  -  -  -  ;
   95 D1:ADDD -  -  -  -  ; ***************************************************************************************
   96 D1:ADDD -  -  -  -  ;
   97 D1:ADDD -  -  -  -  ;		Date			Notes
   98 D1:ADDD -  -  -  -  ;		==== 			=====
   99 D1:ADDD -  -  -  -  ;
  100 D1:ADDD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:ADDD -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:ADDD -  -  -  -  ; ***************************************************************************************
    2 D1:ADDD -  -  -  -  ; ***************************************************************************************
    3 D1:ADDD -  -  -  -  ;
    4 D1:ADDD -  -  -  -  ;		Name : 		term.asm
    5 D1:ADDD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADDD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADDD -  -  -  -  ;		Reviewed :	No
    8 D1:ADDD -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:ADDD -  -  -  -  ;
   10 D1:ADDD -  -  -  -  ; ***************************************************************************************
   11 D1:ADDD -  -  -  -  ; ***************************************************************************************
   12 D1:ADDD -  -  -  -  
   13 D1:ADDD -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:ADDD             		add_hlhl_16
   15 D1:ADDD             		exx
   16 D1:ADDD             		adc_hlhl_16
   17 D1:ADDD             		exx
   18 D1:ADDD             #endmacro
   19 D1:ADDD -  -  -  -  
   20 D1:ADDD -  -  -  -  ; ***************************************************************************************
   21 D1:ADDD -  -  -  -  ;
   22 D1:ADDD -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:ADDD -  -  -  -  ;
   24 D1:ADDD -  -  -  -  ; ***************************************************************************************
   25 D1:ADDD -  -  -  -  ;
   26 D1:ADDD -  -  -  -  ; 		Terms can be:
   27 D1:ADDD -  -  -  -  ;
   28 D1:ADDD -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:ADDD -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:ADDD -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:ADDD -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:ADDD -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:ADDD -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:ADDD -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:ADDD -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:ADDD -  -  -  -  ; 														reference of some sort.
   37 D1:ADDD -  -  -  -  ;
   38 D1:ADDD -  -  -  -  ; ***************************************************************************************
   39 D1:ADDD -  -  -  -  
   40 D1:ADDD -  -  -  -  EvaluateTerm:		
   41 D1:ADDD 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:ADDF D9 -  -  -  		exx
   43 D1:ADE0 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:ADE4 D9 -  -  -  		exx
   45 D1:ADE5 21 00 00 00 		ld 		hl,$0000		
   46 D1:ADE9 -  -  -  -  		;
   47 D1:ADE9 DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:ADEC FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:ADEE 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:ADF0 DA A8 AE D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:ADF4 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:ADF6 C2 4C AE D1 		jp 		nz,_ETFoundKeyword 
   53 D1:ADFA -  -  -  -  		;
   54 D1:ADFA -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:ADFA -  -  -  -  		;
   56 D1:ADFA -  -  -  -  _ETIntegerConstant:
   57 D1:ADFA -  -  -  -  		;
   58 D1:ADFA -  -  -  -  _ETIntegerLoop:		
   59 D1:ADFA DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:ADFD E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:ADFF B5 -  -  -  		or 		l 							; or into L
   62 D1:AE00 6F -  -  -  		ld 		l,a
   63 D1:AE01 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AE03 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AE06 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AE08 FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AE0A D8 -  -  -  		ret 	c
   68 D1:AE0B -  -  -  -  
   69 D1:AE0B 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AE12 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AE19 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AE20 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AE27 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AE2E 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AE35 -  -  -  -  
   76 D1:AE35 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AE37 -  -  -  -  		;
   78 D1:AE37 -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AE37 -  -  -  -  		;
   80 D1:AE37 -  -  -  -  _ETStringMarker:		
   81 D1:AE37 DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AE39 DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AE3B DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AE3D E1 -  -  -  		pop 	hl
   85 D1:AE3E 11 00 00 00 		ld 		de,$0000
   86 D1:AE42 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AE45 DD 19 -  -  		add 	ix,de
   88 D1:AE47 DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AE49 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AE4B C9 -  -  -  		ret
   91 D1:AE4C -  -  -  -  		;
   92 D1:AE4C -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AE4C -  -  -  -  		;
   94 D1:AE4C -  -  -  -  _ETFoundKeyword:
   95 D1:AE4C DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AE4E FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AE50 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AE52 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AE54 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AE56 -  -  -  -  		;
  101 D1:AE56 -  -  -  -  		;		Unary group 0
  102 D1:AE56 -  -  -  -  		;
  103 D1:AE56 E6 7F 21 00 
              00 00 6F 29 
              29 11 1E B3 
              D1 19 ED 17 
              ED 53 E2 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AE6B C3 E1 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AE6F -  -  -  -  
  106 D1:AE6F -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AE6F FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AE71 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AE73 -  -  -  -  		;
  110 D1:AE73 -  -  -  -  		; 		- term
  111 D1:AE73 -  -  -  -  		;
  112 D1:AE73 CD 28 AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AE77 CD BE AC D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AE7B C9 -  -  -  		ret
  115 D1:AE7C -  -  -  -  		;
  116 D1:AE7C -  -  -  -  		;		! ? indirection check
  117 D1:AE7C -  -  -  -  		;
  118 D1:AE7C -  -  -  -  _ETCheckIndirection:	
  119 D1:AE7C FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AE7E 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AE80 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AE82 C2 85 AB D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AE86 -  -  -  -  		;
  124 D1:AE86 -  -  -  -  		; 		! ? indirection
  125 D1:AE86 -  -  -  -  		;
  126 D1:AE86 -  -  -  -  _ETIndirection:
  127 D1:AE86 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AE87 CD DD AD D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AE8B CD 81 AD D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AE8F CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AE91 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AE93 CD AE AD D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AE97 F1 -  -  -  		pop 	af 							; get type back
  134 D1:AE98 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AE9A CB F9 -  -  		set 	CIsReference,c
  136 D1:AE9C FE 83 -  -  		cp 		KWD_PLING
  137 D1:AE9E C8 -  -  -  		ret 	z
  138 D1:AE9F CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AEA1 C9 -  -  -  		ret
  140 D1:AEA2 -  -  -  -  _ETStringIndirect:
  141 D1:AEA2 3E 02 C3 1B 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AEA8 -  -  -  -  		;
  143 D1:AEA8 -  -  -  -  		; 		Found an identifier.
  144 D1:AEA8 -  -  -  -  		;
  145 D1:AEA8 -  -  -  -  _ETVariable:
  146 D1:AEA8 CD FC B0 D1 		call 	FindVariable 				; find the variable.
  147 D1:AEAC D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AEAD 3E 0F C3 1B 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AEB3 -  -  -  -  		
  150 D1:AEB3 -  -  -  -  ; ***************************************************************************************
  151 D1:AEB3 -  -  -  -  ;
  152 D1:AEB3 -  -  -  -  ;									Changes and Updates
  153 D1:AEB3 -  -  -  -  ;
  154 D1:AEB3 -  -  -  -  ; ***************************************************************************************
  155 D1:AEB3 -  -  -  -  ;
  156 D1:AEB3 -  -  -  -  ;		Date			Notes
  157 D1:AEB3 -  -  -  -  ;		==== 			=====
  158 D1:AEB3 -  -  -  -  ;
  159 D1:AEB3 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AEB3 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AEB3 -  -  -  -  ; ***************************************************************************************
    2 D1:AEB3 -  -  -  -  ; ***************************************************************************************
    3 D1:AEB3 -  -  -  -  ;
    4 D1:AEB3 -  -  -  -  ;		Name : 		abs.asm
    5 D1:AEB3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEB3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEB3 -  -  -  -  ;		Reviewed :	No
    8 D1:AEB3 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AEB3 -  -  -  -  ;
   10 D1:AEB3 -  -  -  -  ; ***************************************************************************************
   11 D1:AEB3 -  -  -  -  ; ***************************************************************************************
   12 D1:AEB3 -  -  -  -  
   13 D1:AEB3 -  -  -  -  ; ***************************************************************************************
   14 D1:AEB3 -  -  -  -  ;
   15 D1:AEB3 -  -  -  -  ;								abs( unary function
   16 D1:AEB3 -  -  -  -  ;
   17 D1:AEB3 -  -  -  -  ; ***************************************************************************************
   18 D1:AEB3 -  -  -  -  
   19 D1:AEB3 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AEB3 CD 28 AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AEB7 D9 -  -  -  		exx 								; test MSB
   22 D1:AEB8 CB 7C -  -  		bit 	7,h
   23 D1:AEBA D9 -  -  -  		exx
   24 D1:AEBB C4 BE AC D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AEBF C9 -  -  -  		ret
   26 D1:AEC0 -  -  -  -  
   27 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   28 D1:AEC0 -  -  -  -  ;
   29 D1:AEC0 -  -  -  -  ;									Changes and Updates
   30 D1:AEC0 -  -  -  -  ;
   31 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   32 D1:AEC0 -  -  -  -  ;
   33 D1:AEC0 -  -  -  -  ;		Date			Notes
   34 D1:AEC0 -  -  -  -  ;		==== 			=====
   35 D1:AEC0 -  -  -  -  ;
   36 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   37 D1:AEC0 -  -  -  -  		
Listing for file "_build.asm"
   35 D1:AEC0 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AEC0 -  -  -  -  ; ***************************************************************************************
    2 D1:AEC0 -  -  -  -  ; ***************************************************************************************
    3 D1:AEC0 -  -  -  -  ;
    4 D1:AEC0 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AEC0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEC0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEC0 -  -  -  -  ;		Reviewed :	No
    8 D1:AEC0 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AEC0 -  -  -  -  ;
   10 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   11 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   12 D1:AEC0 -  -  -  -  
   13 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   14 D1:AEC0 -  -  -  -  ;
   15 D1:AEC0 -  -  -  -  ;								Asc unary function
   16 D1:AEC0 -  -  -  -  ;
   17 D1:AEC0 -  -  -  -  ; ***************************************************************************************
   18 D1:AEC0 -  -  -  -  
   19 D1:AEC0 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AEC0 CD 37 AD D1 		call	EvaluateStringTerm			; Get string
   21 D1:AEC4 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AEC5 C3 73 AD D1 		jp 		Return8BitConstant
   23 D1:AEC9 -  -  -  -  
   24 D1:AEC9 -  -  -  -  ; ***************************************************************************************
   25 D1:AEC9 -  -  -  -  ;
   26 D1:AEC9 -  -  -  -  ;									Changes and Updates
   27 D1:AEC9 -  -  -  -  ;
   28 D1:AEC9 -  -  -  -  ; ***************************************************************************************
   29 D1:AEC9 -  -  -  -  ;
   30 D1:AEC9 -  -  -  -  ;		Date			Notes
   31 D1:AEC9 -  -  -  -  ;		==== 			=====
   32 D1:AEC9 -  -  -  -  ;
   33 D1:AEC9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   36 D1:AEC9 -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AEC9 -  -  -  -  ; ***************************************************************************************
    2 D1:AEC9 -  -  -  -  ; ***************************************************************************************
    3 D1:AEC9 -  -  -  -  ;
    4 D1:AEC9 -  -  -  -  ;		Name : 		chr.asm
    5 D1:AEC9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEC9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEC9 -  -  -  -  ;		Reviewed :	No
    8 D1:AEC9 -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AEC9 -  -  -  -  ;
   10 D1:AEC9 -  -  -  -  ; ***************************************************************************************
   11 D1:AEC9 -  -  -  -  ; ***************************************************************************************
   12 D1:AEC9 -  -  -  -  
   13 D1:AEC9 -  -  -  -  ; ***************************************************************************************
   14 D1:AEC9 -  -  -  -  ;
   15 D1:AEC9 -  -  -  -  ;								Chr$() unary function
   16 D1:AEC9 -  -  -  -  ;
   17 D1:AEC9 -  -  -  -  ; ***************************************************************************************
   18 D1:AEC9 -  -  -  -  
   19 D1:AEC9 -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AEC9 CD F3 AA D1 		call 	CheckDollar
   21 D1:AECD CD 28 AD D1 		call 	EvaluateIntegerTerm
   22 D1:AED1 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AED2 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AED4 21 1A A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AED8 36 0D -  -  		ld 		(hl),13
   26 D1:AEDA 2B -  -  -  		dec 	hl
   27 D1:AEDB 77 -  -  -  		ld 		(hl),a
   28 D1:AEDC C9 -  -  -  		ret
   29 D1:AEDD -  -  -  -  
   30 D1:AEDD -  -  -  -  ; ***************************************************************************************
   31 D1:AEDD -  -  -  -  ;
   32 D1:AEDD -  -  -  -  ;									Changes and Updates
   33 D1:AEDD -  -  -  -  ;
   34 D1:AEDD -  -  -  -  ; ***************************************************************************************
   35 D1:AEDD -  -  -  -  ;
   36 D1:AEDD -  -  -  -  ;		Date			Notes
   37 D1:AEDD -  -  -  -  ;		==== 			=====
   38 D1:AEDD -  -  -  -  ;
   39 D1:AEDD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AEDD -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AEDD -  -  -  -  ; ***************************************************************************************
    2 D1:AEDD -  -  -  -  ; ***************************************************************************************
    3 D1:AEDD -  -  -  -  ;
    4 D1:AEDD -  -  -  -  ;		Name : 		len.asm
    5 D1:AEDD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEDD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEDD -  -  -  -  ;		Reviewed :	None
    8 D1:AEDD -  -  -  -  ;		Purpose :	String Length
    9 D1:AEDD -  -  -  -  ;
   10 D1:AEDD -  -  -  -  ; ***************************************************************************************
   11 D1:AEDD -  -  -  -  ; ***************************************************************************************
   12 D1:AEDD -  -  -  -  
   13 D1:AEDD -  -  -  -  ; ***************************************************************************************
   14 D1:AEDD -  -  -  -  ;
   15 D1:AEDD -  -  -  -  ;								Len unary function
   16 D1:AEDD -  -  -  -  ;
   17 D1:AEDD -  -  -  -  ; ***************************************************************************************
   18 D1:AEDD -  -  -  -  
   19 D1:AEDD -  -  -  -  Unary_Len:	;; [len]
   20 D1:AEDD CD 37 AD D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AEE1 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AEE2 CD 26 AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AEE6 -  -  -  -  _ULCount:
   24 D1:AEE6 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AEE7 FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AEE9 D8 -  -  -  		ret 	c
   27 D1:AEEA 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AEEB 13 -  -  -  		inc 	de
   29 D1:AEEC 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AEEE -  -  -  -  
   31 D1:AEEE -  -  -  -  ; ***************************************************************************************
   32 D1:AEEE -  -  -  -  ;
   33 D1:AEEE -  -  -  -  ;									Changes and Updates
   34 D1:AEEE -  -  -  -  ;
   35 D1:AEEE -  -  -  -  ; ***************************************************************************************
   36 D1:AEEE -  -  -  -  ;
   37 D1:AEEE -  -  -  -  ;		Date			Notes
   38 D1:AEEE -  -  -  -  ;		==== 			=====
   39 D1:AEEE -  -  -  -  ;
   40 D1:AEEE -  -  -  -  ; ***************************************************************************************
   41 D1:AEEE -  -  -  -  		
Listing for file "_build.asm"
   38 D1:AEEE -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AEEE -  -  -  -  ; ***************************************************************************************
    2 D1:AEEE -  -  -  -  ; ***************************************************************************************
    3 D1:AEEE -  -  -  -  ;
    4 D1:AEEE -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AEEE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEEE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEEE -  -  -  -  ;		Reviewed :	No
    8 D1:AEEE -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AEEE -  -  -  -  ;
   10 D1:AEEE -  -  -  -  ; ***************************************************************************************
   11 D1:AEEE -  -  -  -  ; ***************************************************************************************
   12 D1:AEEE -  -  -  -  
   13 D1:AEEE -  -  -  -  ; ***************************************************************************************
   14 D1:AEEE -  -  -  -  ;
   15 D1:AEEE -  -  -  -  ;								Str$() unary function
   16 D1:AEEE -  -  -  -  ;
   17 D1:AEEE -  -  -  -  ; ***************************************************************************************
   18 D1:AEEE -  -  -  -  
   19 D1:AEEE -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AEEE CD 28 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AEF2 CD AE AD D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AEF6 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AEF8 C9 -  -  -  		ret
   24 D1:AEF9 -  -  -  -  
   25 D1:AEF9 -  -  -  -  ; ***************************************************************************************
   26 D1:AEF9 -  -  -  -  ;
   27 D1:AEF9 -  -  -  -  ;									Changes and Updates
   28 D1:AEF9 -  -  -  -  ;
   29 D1:AEF9 -  -  -  -  ; ***************************************************************************************
   30 D1:AEF9 -  -  -  -  ;
   31 D1:AEF9 -  -  -  -  ;		Date			Notes
   32 D1:AEF9 -  -  -  -  ;		==== 			=====
   33 D1:AEF9 -  -  -  -  ;
   34 D1:AEF9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   39 D1:AEF9 -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AEF9 -  -  -  -  ; ***************************************************************************************
    2 D1:AEF9 -  -  -  -  ; ***************************************************************************************
    3 D1:AEF9 -  -  -  -  ;
    4 D1:AEF9 -  -  -  -  ;		Name : 		not.asm
    5 D1:AEF9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEF9 -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AEF9 -  -  -  -  ;		Reviewed :	No
    8 D1:AEF9 -  -  -  -  ;		Purpose :	Logical not
    9 D1:AEF9 -  -  -  -  ;
   10 D1:AEF9 -  -  -  -  ; ***************************************************************************************
   11 D1:AEF9 -  -  -  -  ; ***************************************************************************************
   12 D1:AEF9 -  -  -  -  
   13 D1:AEF9 -  -  -  -  ; ***************************************************************************************
   14 D1:AEF9 -  -  -  -  ;
   15 D1:AEF9 -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AEF9 -  -  -  -  ;
   17 D1:AEF9 -  -  -  -  ; ***************************************************************************************
   18 D1:AEF9 -  -  -  -  
   19 D1:AEF9 -  -  -  -  Unary_Not:		;; [not]
   20 D1:AEF9 CD 28 AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AEFD CD 06 AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AF01 CD 06 AF D1 		call 	__UNSwap		
   23 D1:AF05 C9 -  -  -  		ret
   24 D1:AF06 -  -  -  -  
   25 D1:AF06 -  -  -  -  __UNSwap:
   26 D1:AF06 7C -  -  -  		ld 		a,h
   27 D1:AF07 2F -  -  -  		cpl
   28 D1:AF08 67 -  -  -  		ld 		h,a
   29 D1:AF09 7D -  -  -  		ld 		a,l
   30 D1:AF0A 2F -  -  -  		cpl 	
   31 D1:AF0B 6F -  -  -  		ld 		l,a
   32 D1:AF0C D9 -  -  -  		exx
   33 D1:AF0D C9 -  -  -  		ret
   34 D1:AF0E -  -  -  -  
   35 D1:AF0E -  -  -  -  ; ***************************************************************************************
   36 D1:AF0E -  -  -  -  ;
   37 D1:AF0E -  -  -  -  ;									Changes and Updates
   38 D1:AF0E -  -  -  -  ;
   39 D1:AF0E -  -  -  -  ; ***************************************************************************************
   40 D1:AF0E -  -  -  -  ;
   41 D1:AF0E -  -  -  -  ;		Date			Notes
   42 D1:AF0E -  -  -  -  ;		==== 			=====
   43 D1:AF0E -  -  -  -  ;
   44 D1:AF0E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AF0E -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AF0E -  -  -  -  ; ***************************************************************************************
    2 D1:AF0E -  -  -  -  ; ***************************************************************************************
    3 D1:AF0E -  -  -  -  ;
    4 D1:AF0E -  -  -  -  ;		Name : 		page.asm
    5 D1:AF0E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF0E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF0E -  -  -  -  ;		Reviewed :	No
    8 D1:AF0E -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AF0E -  -  -  -  ;
   10 D1:AF0E -  -  -  -  ; ***************************************************************************************
   11 D1:AF0E -  -  -  -  ; ***************************************************************************************
   12 D1:AF0E -  -  -  -  
   13 D1:AF0E -  -  -  -  ; ***************************************************************************************
   14 D1:AF0E -  -  -  -  ;
   15 D1:AF0E -  -  -  -  ;							page unary function (no bracket)
   16 D1:AF0E -  -  -  -  ;
   17 D1:AF0E -  -  -  -  ; ***************************************************************************************
   18 D1:AF0E -  -  -  -  
   19 D1:AF0E -  -  -  -  Unary_Page:	;; [page]
   20 D1:AF0E 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AF12 D9 -  -  -  			exx
   22 D1:AF13 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AF17 D9 -  -  -  			exx
   24 D1:AF18 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AF1A C9 -  -  -  			ret
   26 D1:AF1B -  -  -  -  
   27 D1:AF1B -  -  -  -  ; ***************************************************************************************
   28 D1:AF1B -  -  -  -  ;
   29 D1:AF1B -  -  -  -  ;									Changes and Updates
   30 D1:AF1B -  -  -  -  ;
   31 D1:AF1B -  -  -  -  ; ***************************************************************************************
   32 D1:AF1B -  -  -  -  ;
   33 D1:AF1B -  -  -  -  ;		Date			Notes
   34 D1:AF1B -  -  -  -  ;		==== 			=====
   35 D1:AF1B -  -  -  -  ;
   36 D1:AF1B -  -  -  -  ; ***************************************************************************************
   37 D1:AF1B -  -  -  -  			
Listing for file "_build.asm"
   41 D1:AF1B -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AF1B -  -  -  -  ; ***************************************************************************************
    2 D1:AF1B -  -  -  -  ; ***************************************************************************************
    3 D1:AF1B -  -  -  -  ;
    4 D1:AF1B -  -  -  -  ;		Name : 		random.asm
    5 D1:AF1B -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF1B -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF1B -  -  -  -  ;		Reviewed :	No
    8 D1:AF1B -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AF1B -  -  -  -  ;
   10 D1:AF1B -  -  -  -  ; ***************************************************************************************
   11 D1:AF1B -  -  -  -  ; ***************************************************************************************
   12 D1:AF1B -  -  -  -  
   13 D1:AF1B -  -  -  -  ; ***************************************************************************************
   14 D1:AF1B -  -  -  -  ;
   15 D1:AF1B -  -  -  -  ;								Random unary function
   16 D1:AF1B -  -  -  -  ;
   17 D1:AF1B -  -  -  -  ; ***************************************************************************************
   18 D1:AF1B -  -  -  -  
   19 D1:AF1B -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AF1B F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AF23 CD 28 AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AF27 D9 -  -  -  		exx 								; is it -ve
   23 D1:AF28 CB 7C -  -  		bit 	7,h
   24 D1:AF2A D9 -  -  -  		exx
   25 D1:AF2B 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:AF2D 22 ED A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:AF31 D9 -  -  -  		exx
   28 D1:AF32 22 F1 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:AF36 D9 -  -  -  		exx
   30 D1:AF37 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:AF39 C9 -  -  -  		ret
   32 D1:AF3A -  -  -  -  _URDontSeed:		
   33 D1:AF3A -  -  -  -  
   34 D1:AF3A CD C1 B5 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:AF3E 28 1C -  -  		jr 		z,_URFail
   36 D1:AF40 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:AF41 D9 -  -  -  		exx
   38 D1:AF42 E5 -  -  -  		push 	hl
   39 D1:AF43 D9 -  -  -  		exx
   40 D1:AF44 -  -  -  -  		;
   41 D1:AF44 CD 6D AF D1 		call 	URandomHL 					; get random HL'HL
   42 D1:AF48 D9 -  -  -  		exx
   43 D1:AF49 CD 6D AF D1 		call 	URandomHL
   44 D1:AF4D CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:AF4F D9 -  -  -  		exx
   46 D1:AF50 -  -  -  -  		;
   47 D1:AF50 D9 -  -  -  		exx 								; restore range.
   48 D1:AF51 D1 -  -  -  		pop 	de
   49 D1:AF52 D9 -  -  -  		exx
   50 D1:AF53 D1 -  -  -  		pop 	de
   51 D1:AF54 -  -  -  -  		;
   52 D1:AF54 CD 52 B4 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:AF58 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:AF59 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:AF5B C9 -  -  -  		ret
   56 D1:AF5C -  -  -  -  _URFail:
   57 D1:AF5C 3E 03 C3 1B 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:AF62 -  -  -  -  ; ***************************************************************************************
   59 D1:AF62 -  -  -  -  ;
   60 D1:AF62 -  -  -  -  ; 									Push RNG off zero
   61 D1:AF62 -  -  -  -  ;
   62 D1:AF62 -  -  -  -  ; ***************************************************************************************
   63 D1:AF62 -  -  -  -  
   64 D1:AF62 -  -  -  -  UnaryRandomInitialise:
   65 D1:AF62 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:AF64 -  -  -  -  _URILoop:
   67 D1:AF64 C5 -  -  -  		push 	bc
   68 D1:AF65 CD 6D AF D1 		call 	URandomHL
   69 D1:AF69 C1 -  -  -  		pop 	bc
   70 D1:AF6A 10 F8 -  -  		djnz 	_URILoop
   71 D1:AF6C C9 -  -  -  		ret
   72 D1:AF6D -  -  -  -  
   73 D1:AF6D -  -  -  -  ; ***************************************************************************************
   74 D1:AF6D -  -  -  -  ;
   75 D1:AF6D -  -  -  -  ;							16 bit random number generator
   76 D1:AF6D -  -  -  -  ;
   77 D1:AF6D -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:AF6D -  -  -  -  ;		Actual author unspecified.
   79 D1:AF6D -  -  -  -  ;
   80 D1:AF6D -  -  -  -  ; ***************************************************************************************
   81 D1:AF6D -  -  -  -  
   82 D1:AF6D -  -  -  -  URandomHL:
   83 D1:AF6D 2A ED A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:AF71 ED 5B F1 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:AF76 44 -  -  -  	    ld 		b,h
   86 D1:AF77 4D -  -  -  	    ld 		c,l
   87 D1:AF78 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:AF7D 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:AF82 2C -  -  -  	    inc 	l
   90 D1:AF83 09 -  -  -  	    add 	hl,bc
   91 D1:AF84 22 ED A8 D1 	    ld 		(RandomSeed),hl
   92 D1:AF88 2A F1 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:AF8C ED 5A -  -  	    adc 	hl,de
   94 D1:AF8E 22 F1 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:AF92 EB -  -  -  	    ex 		de,hl
   96 D1:AF93 2A F5 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:AF97 ED 4B F9 A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:AF9C 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:AFA1 ED 43 F9 A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:AFA6 9F -  -  -  	    sbc 	a,a
  101 D1:AFA7 E6 C5 -  -  	    and 	%11000101
  102 D1:AFA9 AD -  -  -  	    xor 	l
  103 D1:AFAA 6F -  -  -  	    ld 		l,a
  104 D1:AFAB 22 F5 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:AFAF EB -  -  -  	    ex 		de,hl
  106 D1:AFB0 09 -  -  -  	    add 	hl,bc
  107 D1:AFB1 C9 -  -  -  	    ret		
  108 D1:AFB2 -  -  -  -  
  109 D1:AFB2 -  -  -  -  ; ***************************************************************************************
  110 D1:AFB2 -  -  -  -  ;
  111 D1:AFB2 -  -  -  -  ;									Changes and Updates
  112 D1:AFB2 -  -  -  -  ;
  113 D1:AFB2 -  -  -  -  ; ***************************************************************************************
  114 D1:AFB2 -  -  -  -  ;
  115 D1:AFB2 -  -  -  -  ;		Date			Notes
  116 D1:AFB2 -  -  -  -  ;		==== 			=====
  117 D1:AFB2 -  -  -  -  ;
  118 D1:AFB2 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   42 D1:AFB2 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:AFB2 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB2 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB2 -  -  -  -  ;
    4 D1:AFB2 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:AFB2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFB2 -  -  -  -  ;		Reviewed :	No
    8 D1:AFB2 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:AFB2 -  -  -  -  ;
   10 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   12 D1:AFB2 -  -  -  -  
   13 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   14 D1:AFB2 -  -  -  -  ;
   15 D1:AFB2 -  -  -  -  ;								sgn unary function
   16 D1:AFB2 -  -  -  -  ;
   17 D1:AFB2 -  -  -  -  ; ***************************************************************************************
   18 D1:AFB2 -  -  -  -  
   19 D1:AFB2 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:AFB2 CD 28 AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:AFB6 CD C1 B5 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:AFBA CA 26 AC D1 		jp 		z,UnaryInt32False
   23 D1:AFBE D9 -  -  -  		exx
   24 D1:AFBF CB 7C -  -  		bit 	7,h
   25 D1:AFC1 D9 -  -  -  		exx
   26 D1:AFC2 C2 22 AC D1 		jp 		nz,UnaryInt32True
   27 D1:AFC6 3E 01 -  -  		ld 		a,1
   28 D1:AFC8 C3 73 AD D1 		jp 		Return8BitConstant
   29 D1:AFCC -  -  -  -  
   30 D1:AFCC -  -  -  -  ; ***************************************************************************************
   31 D1:AFCC -  -  -  -  ;
   32 D1:AFCC -  -  -  -  ;									Changes and Updates
   33 D1:AFCC -  -  -  -  ;
   34 D1:AFCC -  -  -  -  ; ***************************************************************************************
   35 D1:AFCC -  -  -  -  ;
   36 D1:AFCC -  -  -  -  ;		Date			Notes
   37 D1:AFCC -  -  -  -  ;		==== 			=====
   38 D1:AFCC -  -  -  -  ;
   39 D1:AFCC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:AFCC -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:AFCC -  -  -  -  ; ***************************************************************************************
    2 D1:AFCC -  -  -  -  ; ***************************************************************************************
    3 D1:AFCC -  -  -  -  ;
    4 D1:AFCC -  -  -  -  ;		Name : 		simple.asm
    5 D1:AFCC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFCC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFCC -  -  -  -  ;		Reviewed :	No
    8 D1:AFCC -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:AFCC -  -  -  -  ;
   10 D1:AFCC -  -  -  -  ; ***************************************************************************************
   11 D1:AFCC -  -  -  -  ; ***************************************************************************************
   12 D1:AFCC -  -  -  -  
   13 D1:AFCC -  -  -  -  ; ***************************************************************************************
   14 D1:AFCC -  -  -  -  ;
   15 D1:AFCC -  -  -  -  ;								( unary function (think about it)
   16 D1:AFCC -  -  -  -  ;
   17 D1:AFCC -  -  -  -  ; ***************************************************************************************
   18 D1:AFCC -  -  -  -  
   19 D1:AFCC -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:AFCC CD CF AC D1 		call 	EvaluateAtPrecedence0
   21 D1:AFD0 C3 E5 AA D1 		jp  	CheckRightBracket
   22 D1:AFD4 -  -  -  -  
   23 D1:AFD4 -  -  -  -  ; ***************************************************************************************
   24 D1:AFD4 -  -  -  -  ;
   25 D1:AFD4 -  -  -  -  ;									Handle &x
   26 D1:AFD4 -  -  -  -  ;
   27 D1:AFD4 -  -  -  -  ; ***************************************************************************************
   28 D1:AFD4 -  -  -  -  
   29 D1:AFD4 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:AFD4 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:AFD7 E6 C0 -  -  		and 		$C0
   32 D1:AFD9 FE 40 -  -  		cp 			$40
   33 D1:AFDB C2 85 AB D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:AFDF C3 DD AD D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:AFE3 -  -  -  -  
   36 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   37 D1:AFE3 -  -  -  -  ;
   38 D1:AFE3 -  -  -  -  ;									Changes and Updates
   39 D1:AFE3 -  -  -  -  ;
   40 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   41 D1:AFE3 -  -  -  -  ;
   42 D1:AFE3 -  -  -  -  ;		Date			Notes
   43 D1:AFE3 -  -  -  -  ;		==== 			=====
   44 D1:AFE3 -  -  -  -  ;
   45 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   46 D1:AFE3 -  -  -  -  		
Listing for file "_build.asm"
   44 D1:AFE3 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:AFE3 -  -  -  -  ; ***************************************************************************************
    2 D1:AFE3 -  -  -  -  ; ***************************************************************************************
    3 D1:AFE3 -  -  -  -  ;
    4 D1:AFE3 -  -  -  -  ;		Name : 		str.asm
    5 D1:AFE3 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFE3 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFE3 -  -  -  -  ;		Reviewed :	No
    8 D1:AFE3 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:AFE3 -  -  -  -  ;
   10 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   11 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   12 D1:AFE3 -  -  -  -  
   13 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   14 D1:AFE3 -  -  -  -  ;
   15 D1:AFE3 -  -  -  -  ;								Str$() unary function
   16 D1:AFE3 -  -  -  -  ;
   17 D1:AFE3 -  -  -  -  ; ***************************************************************************************
   18 D1:AFE3 -  -  -  -  
   19 D1:AFE3 -  -  -  -  Unary_Str:	;; [str]
   20 D1:AFE3 CD F3 AA D1 		call 	CheckDollar
   21 D1:AFE7 CD 28 AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   22 D1:AFEB 01 09 A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   23 D1:AFEF 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   24 D1:AFF1 CD 09 B6 D1 		call 	Int32ToString 				
   25 D1:AFF5 21 09 A9 D1 		ld 		hl,_USBuffer 				; string address.
   26 D1:AFF9 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   27 D1:AFFB C9 -  -  -  		ret
   28 D1:AFFC -  -  -  -  
   29 D1:AFFC -  -  -  -  ; ***************************************************************************************
   30 D1:AFFC -  -  -  -  ;
   31 D1:AFFC -  -  -  -  ;									Changes and Updates
   32 D1:AFFC -  -  -  -  ;
   33 D1:AFFC -  -  -  -  ; ***************************************************************************************
   34 D1:AFFC -  -  -  -  ;
   35 D1:AFFC -  -  -  -  ;		Date			Notes
   36 D1:AFFC -  -  -  -  ;		==== 			=====
   37 D1:AFFC -  -  -  -  ;
   38 D1:AFFC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   45 D1:AFFC -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:AFFC -  -  -  -  ; ***************************************************************************************
    2 D1:AFFC -  -  -  -  ; ***************************************************************************************
    3 D1:AFFC -  -  -  -  ;
    4 D1:AFFC -  -  -  -  ;		Name : 		time.asm
    5 D1:AFFC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFFC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFFC -  -  -  -  ;		Reviewed :	No
    8 D1:AFFC -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:AFFC -  -  -  -  ;
   10 D1:AFFC -  -  -  -  ; ***************************************************************************************
   11 D1:AFFC -  -  -  -  ; ***************************************************************************************
   12 D1:AFFC -  -  -  -  
   13 D1:AFFC -  -  -  -  ; ***************************************************************************************
   14 D1:AFFC -  -  -  -  ;
   15 D1:AFFC -  -  -  -  ;							Get system time in ms
   16 D1:AFFC -  -  -  -  ;
   17 D1:AFFC -  -  -  -  ; ***************************************************************************************
   18 D1:AFFC -  -  -  -  
   19 D1:AFFC -  -  -  -  Unary_Time:	;; [time]
   20 D1:AFFC CD CC B6 D1 			call 	SYSGetTimer
   21 D1:B000 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B002 C9 -  -  -  			ret
   23 D1:B003 -  -  -  -  
   24 D1:B003 -  -  -  -  ; ***************************************************************************************
   25 D1:B003 -  -  -  -  ;
   26 D1:B003 -  -  -  -  ;									Changes and Updates
   27 D1:B003 -  -  -  -  ;
   28 D1:B003 -  -  -  -  ; ***************************************************************************************
   29 D1:B003 -  -  -  -  ;
   30 D1:B003 -  -  -  -  ;		Date			Notes
   31 D1:B003 -  -  -  -  ;		==== 			=====
   32 D1:B003 -  -  -  -  ;
   33 D1:B003 -  -  -  -  ; ***************************************************************************************
   34 D1:B003 -  -  -  -  			
Listing for file "_build.asm"
   46 D1:B003 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B003 -  -  -  -  ; ***************************************************************************************
    2 D1:B003 -  -  -  -  ; ***************************************************************************************
    3 D1:B003 -  -  -  -  ;
    4 D1:B003 -  -  -  -  ;		Name : 		top.asm
    5 D1:B003 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B003 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B003 -  -  -  -  ;		Reviewed :	No
    8 D1:B003 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B003 -  -  -  -  ;
   10 D1:B003 -  -  -  -  ; ***************************************************************************************
   11 D1:B003 -  -  -  -  ; ***************************************************************************************
   12 D1:B003 -  -  -  -  
   13 D1:B003 -  -  -  -  ; ***************************************************************************************
   14 D1:B003 -  -  -  -  ;
   15 D1:B003 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B003 -  -  -  -  ;
   17 D1:B003 -  -  -  -  ; ***************************************************************************************
   18 D1:B003 -  -  -  -  
   19 D1:B003 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B003 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B007 D9 -  -  -  			exx
   22 D1:B008 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B00C D9 -  -  -  			exx
   24 D1:B00D 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B00F C9 -  -  -  			ret
   26 D1:B010 -  -  -  -  
   27 D1:B010 -  -  -  -  ; ***************************************************************************************
   28 D1:B010 -  -  -  -  ;
   29 D1:B010 -  -  -  -  ;									Changes and Updates
   30 D1:B010 -  -  -  -  ;
   31 D1:B010 -  -  -  -  ; ***************************************************************************************
   32 D1:B010 -  -  -  -  ;
   33 D1:B010 -  -  -  -  ;		Date			Notes
   34 D1:B010 -  -  -  -  ;		==== 			=====
   35 D1:B010 -  -  -  -  ;
   36 D1:B010 -  -  -  -  ; ***************************************************************************************
   37 D1:B010 -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B010 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B010 -  -  -  -  ; ***************************************************************************************
    2 D1:B010 -  -  -  -  ; ***************************************************************************************
    3 D1:B010 -  -  -  -  ;
    4 D1:B010 -  -  -  -  ;		Name : 		val.asm
    5 D1:B010 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B010 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B010 -  -  -  -  ;		Reviewed :	No
    8 D1:B010 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B010 -  -  -  -  ;
   10 D1:B010 -  -  -  -  ; ***************************************************************************************
   11 D1:B010 -  -  -  -  ; ***************************************************************************************
   12 D1:B010 -  -  -  -  
   13 D1:B010 -  -  -  -  ; ***************************************************************************************
   14 D1:B010 -  -  -  -  ;
   15 D1:B010 -  -  -  -  ;								val( unary function
   16 D1:B010 -  -  -  -  ;
   17 D1:B010 -  -  -  -  ; ***************************************************************************************
   18 D1:B010 -  -  -  -  
   19 D1:B010 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B010 CD 37 AD D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B014 E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B015 C1 -  -  -  		pop 	bc
   23 D1:B016 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B018 CD E7 B4 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B01C 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B01E C8 -  -  -  		ret		z 							; okay
   27 D1:B01F 3E 03 C3 1B 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B025 -  -  -  -  
   29 D1:B025 -  -  -  -  ; ***************************************************************************************
   30 D1:B025 -  -  -  -  ;
   31 D1:B025 -  -  -  -  ;									Changes and Updates
   32 D1:B025 -  -  -  -  ;
   33 D1:B025 -  -  -  -  ; ***************************************************************************************
   34 D1:B025 -  -  -  -  ;
   35 D1:B025 -  -  -  -  ;		Date			Notes
   36 D1:B025 -  -  -  -  ;		==== 			=====
   37 D1:B025 -  -  -  -  ;
   38 D1:B025 -  -  -  -  ; ***************************************************************************************
   39 D1:B025 -  -  -  -  		
Listing for file "_build.asm"
   48 D1:B025 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B025 -  -  -  -  ; ***************************************************************************************
    2 D1:B025 -  -  -  -  ; ***************************************************************************************
    3 D1:B025 -  -  -  -  ;
    4 D1:B025 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B025 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B025 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B025 -  -  -  -  ;		Reviewed :	No
    8 D1:B025 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B025 -  -  -  -  ;
   10 D1:B025 -  -  -  -  ; ***************************************************************************************
   11 D1:B025 -  -  -  -  ; ***************************************************************************************
   12 D1:B025 -  -  -  -  
   13 D1:B025 -  -  -  -  ; ***************************************************************************************
   14 D1:B025 -  -  -  -  ;
   15 D1:B025 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B025 -  -  -  -  ;
   17 D1:B025 -  -  -  -  ; ***************************************************************************************
   18 D1:B025 -  -  -  -  
   19 D1:B025 -  -  -  -  AllocateBytes:
   20 D1:B025 ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   21 D1:B02A D5 -  -  -  		push 	de 							; save on stack
   22 D1:B02B 19 -  -  -  		add 	hl,de 						; HL is the new highest
   23 D1:B02C 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   24 D1:B030 EB -  -  -  		ex 		de,hl 						; put in DE
   25 D1:B031 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   26 D1:B035 AF -  -  -  		xor 	a
   27 D1:B036 ED 52 -  -  		sbc 	hl,de
   28 D1:B038 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   29 D1:B039 D0 -  -  -  		ret 	nc 							; return if high >= low
   30 D1:B03A 3E 06 C3 1B 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   31 D1:B040 -  -  -  -  
   32 D1:B040 -  -  -  -  ; ***************************************************************************************
   33 D1:B040 -  -  -  -  ;
   34 D1:B040 -  -  -  -  ;									Changes and Updates
   35 D1:B040 -  -  -  -  ;
   36 D1:B040 -  -  -  -  ; ***************************************************************************************
   37 D1:B040 -  -  -  -  ;
   38 D1:B040 -  -  -  -  ;		Date			Notes
   39 D1:B040 -  -  -  -  ;		==== 			=====
   40 D1:B040 -  -  -  -  ;
   41 D1:B040 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   49 D1:B040 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B040 -  -  -  -  ; ***************************************************************************************
    2 D1:B040 -  -  -  -  ; ***************************************************************************************
    3 D1:B040 -  -  -  -  ;
    4 D1:B040 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B040 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B040 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B040 -  -  -  -  ;		Reviewed :	No
    8 D1:B040 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B040 -  -  -  -  ;
   10 D1:B040 -  -  -  -  ; ***************************************************************************************
   11 D1:B040 -  -  -  -  ; ***************************************************************************************
   12 D1:B040 -  -  -  -  
   13 D1:B040 -  -  -  -  ; ***************************************************************************************
   14 D1:B040 -  -  -  -  ;
   15 D1:B040 -  -  -  -  ;										CLEAR command
   16 D1:B040 -  -  -  -  ;
   17 D1:B040 -  -  -  -  ; ***************************************************************************************
   18 D1:B040 -  -  -  -  
   19 D1:B040 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B040 -  -  -  -  		;
   21 D1:B040 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B040 -  -  -  -  		;
   23 D1:B040 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B044 -  -  -  -  _CCFindLow:
   25 D1:B044 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B048 5E -  -  -  		ld 		e,(hl)		
   27 D1:B049 19 -  -  -  		add 	hl,de
   28 D1:B04A 7B -  -  -  		ld 		a,e
   29 D1:B04B B7 -  -  -  		or 		a
   30 D1:B04C 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B04E 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B04F 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B053 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B054 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B058 -  -  -  -  		;
   36 D1:B058 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B058 -  -  -  -  		;
   38 D1:B058 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B05C -  -  -  -  		;
   40 D1:B05C 36 FF -  -  		ld 		(hl),$FF 					; top of stack marker.
   41 D1:B05E 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   42 D1:B062 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   43 D1:B066 19 -  -  -  		add 	hl,de
   44 D1:B067 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   45 D1:B069 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   46 D1:B06D -  -  -  -  		;
   47 D1:B06D 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   48 D1:B071 19 -  -  -  		add 	hl,de
   49 D1:B072 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   50 D1:B076 -  -  -  -  		;
   51 D1:B076 -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   52 D1:B076 -  -  -  -  		;
   53 D1:B076 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   54 D1:B07A -  -  -  -  _CCFClearHT:
   55 D1:B07A 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   56 D1:B07B 36 00 -  -  		ld 		(hl),0
   57 D1:B07D 1B -  -  -  		dec 	de
   58 D1:B07E 7A -  -  -  		ld 		a,d
   59 D1:B07F B3 -  -  -  		or 		e
   60 D1:B080 20 F8 -  -  		jr 		nz,_CCFClearHT
   61 D1:B082 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   62 D1:B086 -  -  -  -  		;
   63 D1:B086 -  -  -  -  		; 		Save highest byte that can be allocate
   64 D1:B086 -  -  -  -  		;
   65 D1:B086 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   66 D1:B08A -  -  -  -  		;
   67 D1:B08A -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   68 D1:B08A -  -  -  -  		;
   69 D1:B08A CD 62 AF D1 		call 	UnaryRandomInitialise
   70 D1:B08E C9 -  -  -  		ret
   71 D1:B08F -  -  -  -  
   72 D1:B08F -  -  -  -  ; ***************************************************************************************
   73 D1:B08F -  -  -  -  ;
   74 D1:B08F -  -  -  -  ;									Changes and Updates
   75 D1:B08F -  -  -  -  ;
   76 D1:B08F -  -  -  -  ; ***************************************************************************************
   77 D1:B08F -  -  -  -  ;
   78 D1:B08F -  -  -  -  ;		Date			Notes
   79 D1:B08F -  -  -  -  ;		==== 			=====
   80 D1:B08F -  -  -  -  ;
   81 D1:B08F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B08F -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B08F -  -  -  -  ; ***************************************************************************************
    2 D1:B08F -  -  -  -  ; ***************************************************************************************
    3 D1:B08F -  -  -  -  ;
    4 D1:B08F -  -  -  -  ;		Name : 		instance.asm
    5 D1:B08F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B08F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B08F -  -  -  -  ;		Reviewed :	No
    8 D1:B08F -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B08F -  -  -  -  ;
   10 D1:B08F -  -  -  -  ; ***************************************************************************************
   11 D1:B08F -  -  -  -  ; ***************************************************************************************
   12 D1:B08F -  -  -  -  
   13 D1:B08F -  -  -  -  ; ***************************************************************************************
   14 D1:B08F -  -  -  -  ;
   15 D1:B08F -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B08F -  -  -  -  ;
   17 D1:B08F -  -  -  -  ; ***************************************************************************************
   18 D1:B08F -  -  -  -  
   19 D1:B08F -  -  -  -  SetCurrentInstance:
   20 D1:B08F ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B094 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B098 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B09D -  -  -  -  
   24 D1:B09D C9 -  -  -  		ret
   25 D1:B09E -  -  -  -  
   26 D1:B09E -  -  -  -  
   27 D1:B09E -  -  -  -  ; ***************************************************************************************
   28 D1:B09E -  -  -  -  ;
   29 D1:B09E -  -  -  -  ;									Changes and Updates
   30 D1:B09E -  -  -  -  ;
   31 D1:B09E -  -  -  -  ; ***************************************************************************************
   32 D1:B09E -  -  -  -  ;
   33 D1:B09E -  -  -  -  ;		Date			Notes
   34 D1:B09E -  -  -  -  ;		==== 			=====
   35 D1:B09E -  -  -  -  ;
   36 D1:B09E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B09E -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B09E -  -  -  -  ; ***************************************************************************************
    2 D1:B09E -  -  -  -  ; ***************************************************************************************
    3 D1:B09E -  -  -  -  ;
    4 D1:B09E -  -  -  -  ;		Name : 		new.asm
    5 D1:B09E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B09E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B09E -  -  -  -  ;		Reviewed :	No
    8 D1:B09E -  -  -  -  ;		Purpose :	New command.
    9 D1:B09E -  -  -  -  ;
   10 D1:B09E -  -  -  -  ; ***************************************************************************************
   11 D1:B09E -  -  -  -  ; ***************************************************************************************
   12 D1:B09E -  -  -  -  
   13 D1:B09E -  -  -  -  ; ***************************************************************************************
   14 D1:B09E -  -  -  -  ;
   15 D1:B09E -  -  -  -  ;										NEW command
   16 D1:B09E -  -  -  -  ;
   17 D1:B09E -  -  -  -  ; ***************************************************************************************
   18 D1:B09E -  -  -  -  
   19 D1:B09E -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B09E 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B0A2 36 00 -  -  		ld 		(hl),0
   22 D1:B0A4 CD 40 B0 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B0A8 3E 00 C3 1B 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B0AE -  -  -  -  
   25 D1:B0AE -  -  -  -  ; ***************************************************************************************
   26 D1:B0AE -  -  -  -  ;
   27 D1:B0AE -  -  -  -  ;									Changes and Updates
   28 D1:B0AE -  -  -  -  ;
   29 D1:B0AE -  -  -  -  ; ***************************************************************************************
   30 D1:B0AE -  -  -  -  ;
   31 D1:B0AE -  -  -  -  ;		Date			Notes
   32 D1:B0AE -  -  -  -  ;		==== 			=====
   33 D1:B0AE -  -  -  -  ;
   34 D1:B0AE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B0AE -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B0AE -  -  -  -  ; ***************************************************************************************
    2 D1:B0AE -  -  -  -  ; ***************************************************************************************
    3 D1:B0AE -  -  -  -  ;
    4 D1:B0AE -  -  -  -  ;		Name : 		utility.asm
    5 D1:B0AE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0AE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0AE -  -  -  -  ;		Reviewed :	No
    8 D1:B0AE -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B0AE -  -  -  -  ;
   10 D1:B0AE -  -  -  -  ; ***************************************************************************************
   11 D1:B0AE -  -  -  -  ; ***************************************************************************************
   12 D1:B0AE -  -  -  -  
   13 D1:B0AE -  -  -  -  ; ***************************************************************************************
   14 D1:B0AE -  -  -  -  ;
   15 D1:B0AE -  -  -  -  ;							Print ASCII string at HL
   16 D1:B0AE -  -  -  -  ;
   17 D1:B0AE -  -  -  -  ; ***************************************************************************************
   18 D1:B0AE -  -  -  -  
   19 D1:B0AE -  -  -  -  PrintStringAtHL:
   20 D1:B0AE 7E -  -  -  		ld 		a,(hl)
   21 D1:B0AF FE 20 -  -  		cp 		$20		
   22 D1:B0B1 D8 -  -  -  		ret 	c
   23 D1:B0B2 CD 7C B6 D1 		call 	SYSPrintChar
   24 D1:B0B6 23 -  -  -  		inc 	hl
   25 D1:B0B7 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B0B9 -  -  -  -  
   27 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   28 D1:B0B9 -  -  -  -  ;
   29 D1:B0B9 -  -  -  -  ;									Changes and Updates
   30 D1:B0B9 -  -  -  -  ;
   31 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   32 D1:B0B9 -  -  -  -  ;
   33 D1:B0B9 -  -  -  -  ;		Date			Notes
   34 D1:B0B9 -  -  -  -  ;		==== 			=====
   35 D1:B0B9 -  -  -  -  ;
   36 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   37 D1:B0B9 -  -  -  -  		
Listing for file "_build.asm"
   53 D1:B0B9 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B0B9 -  -  -  -  ; ***************************************************************************************
    2 D1:B0B9 -  -  -  -  ; ***************************************************************************************
    3 D1:B0B9 -  -  -  -  ;
    4 D1:B0B9 -  -  -  -  ;		Name : 		create.asm
    5 D1:B0B9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0B9 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B0B9 -  -  -  -  ;		Reviewed :	No
    8 D1:B0B9 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B0B9 -  -  -  -  ;
   10 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   11 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   12 D1:B0B9 -  -  -  -  
   13 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   14 D1:B0B9 -  -  -  -  ;
   15 D1:B0B9 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B0B9 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B0B9 -  -  -  -  ;
   18 D1:B0B9 -  -  -  -  ; ***************************************************************************************
   19 D1:B0B9 -  -  -  -  
   20 D1:B0B9 -  -  -  -  VariableCreate:		
   21 D1:B0B9 -  -  -  -  		;
   22 D1:B0B9 -  -  -  -  		;		Work out bytes to allocate (HL+10) and allocate it
   23 D1:B0B9 -  -  -  -  		;
   24 D1:B0B9 11 09 00 00 		ld 		de,9 						; add 10 for the first collection of bytes.
   25 D1:B0BD 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B0BE E5 -  -  -  		push 	hl 							; save count.
   27 D1:B0BF CD 25 B0 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B0C3 C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B0C4 -  -  -  -  		;
   30 D1:B0C4 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B0C4 -  -  -  -  		;
   32 D1:B0C4 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B0C5 -  -  -  -  _VCClear:
   34 D1:B0C5 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B0C7 23 -  -  -  		inc 	hl
   36 D1:B0C8 0B -  -  -  		dec 	bc
   37 D1:B0C9 78 -  -  -  		ld		a,b
   38 D1:B0CA B1 -  -  -  		or 		c
   39 D1:B0CB 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B0CD E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B0CE -  -  -  -  		;
   42 D1:B0CE -  -  -  -  		;		Now start to create the data.
   43 D1:B0CE -  -  -  -  		;
   44 D1:B0CE E5 -  -  -  		push 	hl 							; save start
   45 D1:B0CF -  -  -  -  		;
   46 D1:B0CF -  -  -  -  		;		Write hash to +0
   47 D1:B0CF -  -  -  -  		;
   48 D1:B0CF 3A 03 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B0D3 77 -  -  -  		ld 		(hl),a
   50 D1:B0D4 23 -  -  -  		inc 	hl
   51 D1:B0D5 -  -  -  -  		;
   52 D1:B0D5 -  -  -  -  		;		Write list head to +1
   53 D1:B0D5 -  -  -  -  		;
   54 D1:B0D5 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B0D6 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B0DA ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B0DC EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B0DD E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B0DE ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B0E4 -  -  -  -  		;
   61 D1:B0E4 -  -  -  -  		;		Write variable name to +5
   62 D1:B0E4 -  -  -  -  		;
   63 D1:B0E4 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B0E9 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B0EF -  -  -  -  		;
   66 D1:B0EF D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B0F0 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B0F4 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B0FA -  -  -  -  		;
   70 D1:B0FA EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B0FB C9 -  -  -  		ret
   72 D1:B0FC -  -  -  -  
   73 D1:B0FC -  -  -  -  ; ***************************************************************************************
   74 D1:B0FC -  -  -  -  ;
   75 D1:B0FC -  -  -  -  ;									Changes and Updates
   76 D1:B0FC -  -  -  -  ;
   77 D1:B0FC -  -  -  -  ; ***************************************************************************************
   78 D1:B0FC -  -  -  -  ;
   79 D1:B0FC -  -  -  -  ;		Date			Notes
   80 D1:B0FC -  -  -  -  ;		==== 			=====
   81 D1:B0FC -  -  -  -  ;
   82 D1:B0FC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B0FC -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B0FC -  -  -  -  ; ***************************************************************************************
    2 D1:B0FC -  -  -  -  ; ***************************************************************************************
    3 D1:B0FC -  -  -  -  ;
    4 D1:B0FC -  -  -  -  ;		Name : 		find.asm
    5 D1:B0FC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0FC -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0FC -  -  -  -  ;		Reviewed :	No
    8 D1:B0FC -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B0FC -  -  -  -  ;
   10 D1:B0FC -  -  -  -  ; ***************************************************************************************
   11 D1:B0FC -  -  -  -  ; ***************************************************************************************
   12 D1:B0FC -  -  -  -  
   13 D1:B0FC -  -  -  -  ; ***************************************************************************************
   14 D1:B0FC -  -  -  -  ;
   15 D1:B0FC -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B0FC -  -  -  -  ; 		variable information at (IX)
   17 D1:B0FC -  -  -  -  ;
   18 D1:B0FC -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B0FC -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B0FC -  -  -  -  ;
   21 D1:B0FC -  -  -  -  ; ***************************************************************************************
   22 D1:B0FC -  -  -  -  
   23 D1:B0FC -  -  -  -  FindVariable:
   24 D1:B0FC DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B0FF FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B101 D2 85 AB D1 		jp 		nc,SyntaxError 		
   27 D1:B105 -  -  -  -  
   28 D1:B105 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B108 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B10A 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B10C FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B10E 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B110 -  -  -  -  		;
   34 D1:B110 -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B110 -  -  -  -  		;
   36 D1:B110 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B114 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B117 87 -  -  -  		add 	a,a 						; x4
   39 D1:B118 87 -  -  -  		add 	a,a
   40 D1:B119 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B11A 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B11B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B11D CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B11F DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B121 AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B122 C9 -  -  -  		ret
   47 D1:B123 -  -  -  -  		;
   48 D1:B123 -  -  -  -  		;		Not a standard simple variable.
   49 D1:B123 -  -  -  -  		;
   50 D1:B123 -  -  -  -  _FVNotSimple:
   51 D1:B123 CD 57 B1 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B127 CD 93 B1 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B12B 38 0B -  -  		jr 		c,_FVNotFound  				
   54 D1:B12D -  -  -  -  		;
   55 D1:B12D -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B12D -  -  -  -  		;
   57 D1:B12D -  -  -  -  _FVExitReference:		
   58 D1:B12D 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B131 19 -  -  -  		add 	hl,de 
   60 D1:B132 -  -  -  -  		;
   61 D1:B132 -  -  -  -  		; 		TODO: Array check code.
   62 D1:B132 -  -  -  -  		;
   63 D1:B132 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   64 D1:B134 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   65 D1:B136 AF -  -  -  		xor 	a 							; clear carry and return
   66 D1:B137 C9 -  -  -  		ret
   67 D1:B138 -  -  -  -  		;
   68 D1:B138 -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   69 D1:B138 -  -  -  -  		;
   70 D1:B138 -  -  -  -  _FVNotFound:		
   71 D1:B138 3A FD A8 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   72 D1:B13C B7 -  -  -  		or 		a
   73 D1:B13D 28 11 -  -  		jr 		z,_FVFail
   74 D1:B13F DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   75 D1:B142 FE 95 -  -  		cp 		KWD_LPAREN 		
   76 D1:B144 28 0A -  -  		jr 		z,_FVFail
   77 D1:B146 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   78 D1:B14A CD B9 B0 D1 		call 	VariableCreate 				; create a new variable.
   79 D1:B14E 18 DD -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   80 D1:B150 -  -  -  -  
   81 D1:B150 -  -  -  -  _FVFail:
   82 D1:B150 DD 2A FF A8 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   83 D1:B155 37 -  -  -  		scf
   84 D1:B156 C9 -  -  -  		ret
   85 D1:B157 -  -  -  -  
   86 D1:B157 -  -  -  -  ; ***************************************************************************************
   87 D1:B157 -  -  -  -  ;
   88 D1:B157 -  -  -  -  ;									Changes and Updates
   89 D1:B157 -  -  -  -  ;
   90 D1:B157 -  -  -  -  ; ***************************************************************************************
   91 D1:B157 -  -  -  -  ;
   92 D1:B157 -  -  -  -  ;		Date			Notes
   93 D1:B157 -  -  -  -  ;		==== 			=====
   94 D1:B157 -  -  -  -  ;
   95 D1:B157 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B157 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B157 -  -  -  -  ; ***************************************************************************************
    2 D1:B157 -  -  -  -  ; ***************************************************************************************
    3 D1:B157 -  -  -  -  ;
    4 D1:B157 -  -  -  -  ;		Name : 		info.asm
    5 D1:B157 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B157 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B157 -  -  -  -  ;		Reviewed :	No
    8 D1:B157 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B157 -  -  -  -  ;
   10 D1:B157 -  -  -  -  ; ***************************************************************************************
   11 D1:B157 -  -  -  -  ; ***************************************************************************************
   12 D1:B157 -  -  -  -  
   13 D1:B157 -  -  -  -  ; ***************************************************************************************
   14 D1:B157 -  -  -  -  ;
   15 D1:B157 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B157 -  -  -  -  ; 		after the identifier.
   17 D1:B157 -  -  -  -  ;
   18 D1:B157 -  -  -  -  ; ***************************************************************************************
   19 D1:B157 -  -  -  -  
   20 D1:B157 -  -  -  -  VariableInformation:
   21 D1:B157 DD 22 FF A8 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B15C -  -  -  -  		;
   23 D1:B15C -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B15C -  -  -  -  		;
   25 D1:B15C 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B15E -  -  -  -  _VICalculateHash:
   27 D1:B15E DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B161 FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B163 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B165 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B166 07 -  -  -  		rlca
   32 D1:B167 07 -  -  -  		rlca
   33 D1:B168 80 -  -  -  		add 	a,b
   34 D1:B169 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B16A DD 23 -  -  		inc 	ix 							; next character
   36 D1:B16C 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B16E -  -  -  -  		;
   38 D1:B16E -  -  -  -  _VIHashDone:
   39 D1:B16E 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B16F -  -  -  -  		;
   41 D1:B16F -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B16F -  -  -  -  		;
   43 D1:B16F 32 03 A9 D1 		ld 		(VarHash),a
   44 D1:B173 -  -  -  -  		;
   45 D1:B173 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B173 -  -  -  -  		;		
   47 D1:B173 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B175 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B179 6F -  -  -  		ld 		l,a
   50 D1:B17A 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B17B 29 -  -  -  		add 	hl,hl
   52 D1:B17C -  -  -  -  		;
   53 D1:B17C ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B181 19 -  -  -  		add 	hl,de
   55 D1:B182 -  -  -  -  		;
   56 D1:B182 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B185 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B187 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B189 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B18D 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B18E -  -  -  -  _VINotArray:
   62 D1:B18E 22 05 A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B192 C9 -  -  -  		ret
   64 D1:B193 -  -  -  -  
   65 D1:B193 -  -  -  -  ; ***************************************************************************************
   66 D1:B193 -  -  -  -  ;
   67 D1:B193 -  -  -  -  ;									Changes and Updates
   68 D1:B193 -  -  -  -  ;
   69 D1:B193 -  -  -  -  ; ***************************************************************************************
   70 D1:B193 -  -  -  -  ;
   71 D1:B193 -  -  -  -  ;		Date			Notes
   72 D1:B193 -  -  -  -  ;		==== 			=====
   73 D1:B193 -  -  -  -  ;
   74 D1:B193 -  -  -  -  ; ***************************************************************************************
   75 D1:B193 -  -  -  -  
Listing for file "_build.asm"
   56 D1:B193 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B193 -  -  -  -  ; ***************************************************************************************
    2 D1:B193 -  -  -  -  ; ***************************************************************************************
    3 D1:B193 -  -  -  -  ;
    4 D1:B193 -  -  -  -  ;		Name : 		search.asm
    5 D1:B193 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B193 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B193 -  -  -  -  ;		Reviewed :	No
    8 D1:B193 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B193 -  -  -  -  ;
   10 D1:B193 -  -  -  -  ; ***************************************************************************************
   11 D1:B193 -  -  -  -  ; ***************************************************************************************
   12 D1:B193 -  -  -  -  
   13 D1:B193 -  -  -  -  ; ***************************************************************************************
   14 D1:B193 -  -  -  -  ;
   15 D1:B193 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B193 -  -  -  -  ;		CS if failed.
   17 D1:B193 -  -  -  -  ;
   18 D1:B193 -  -  -  -  ; ***************************************************************************************
   19 D1:B193 -  -  -  -  
   20 D1:B193 -  -  -  -  VariableSearchList:
   21 D1:B193 2A 05 A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B197 -  -  -  -  		;
   23 D1:B197 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B197 -  -  -  -  		;		the address of the hash record
   25 D1:B197 -  -  -  -  		;
   26 D1:B197 -  -  -  -  _VSLLoop:
   27 D1:B197 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B199 -  -  -  -  		;
   29 D1:B199 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B19A AF -  -  -  		xor 	a
   31 D1:B19B ED 6A -  -  		adc 	hl,hl
   32 D1:B19D E1 -  -  -  		pop 	hl
   33 D1:B19E 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B1A0 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B1A1 C8 -  -  -  		ret 	z
   36 D1:B1A2 -  -  -  -  _VSLRecord:
   37 D1:B1A2 -  -  -  -  		;
   38 D1:B1A2 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B1A2 -  -  -  -  		;
   40 D1:B1A2 3A 03 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B1A6 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B1A7 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B1A8 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B1AA -  -  -  -  		;
   45 D1:B1AA -  -  -  -  		;		Now check the name
   46 D1:B1AA -  -  -  -  		;
   47 D1:B1AA E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B1AB 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B1AC 23 -  -  -  		inc 	hl
   50 D1:B1AD 23 -  -  -  		inc 	hl
   51 D1:B1AE 23 -  -  -  		inc 	hl
   52 D1:B1AF ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B1B1 ED 5B FF A8 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B1B6 -  -  -  -  		;
   55 D1:B1B6 -  -  -  -  		;		Check individual characters
   56 D1:B1B6 -  -  -  -  		;
   57 D1:B1B6 -  -  -  -  _VSLCharacter:
   58 D1:B1B6 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B1B7 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B1B9 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B1BB BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B1BC 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B1BD 13 -  -  -  		inc 	de
   64 D1:B1BE 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B1C0 -  -  -  -  		;
   66 D1:B1C0 -  -  -  -  _VSLFailed:
   67 D1:B1C0 E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B1C1 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B1C3 -  -  -  -  		;
   70 D1:B1C3 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B1C3 -  -  -  -  		;		
   72 D1:B1C3 -  -  -  -  _VSLEndIdentifier:
   73 D1:B1C3 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B1C4 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B1C6 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B1C8 -  -  -  -  		;
   77 D1:B1C8 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B1C9 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B1CA AF -  -  -  		xor 	a 							; clear carry
   80 D1:B1CB C9 -  -  -  		ret
   81 D1:B1CC -  -  -  -  
   82 D1:B1CC -  -  -  -  ; ***************************************************************************************
   83 D1:B1CC -  -  -  -  ;
   84 D1:B1CC -  -  -  -  ;									Changes and Updates
   85 D1:B1CC -  -  -  -  ;
   86 D1:B1CC -  -  -  -  ; ***************************************************************************************
   87 D1:B1CC -  -  -  -  ;
   88 D1:B1CC -  -  -  -  ;		Date			Notes
   89 D1:B1CC -  -  -  -  ;		==== 			=====
   90 D1:B1CC -  -  -  -  ;
   91 D1:B1CC -  -  -  -  ; ***************************************************************************************
   92 D1:B1CC -  -  -  -  		
Listing for file "_build.asm"
   57 D1:B1CC -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B1CC -  -  -  -  ;
    2 D1:B1CC -  -  -  -  ;	This file is automatically generated.
    3 D1:B1CC -  -  -  -  ;
    4 D1:B1CC 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 	.block	$20-($ & $1F)
    5 D1:B1E0 -  -  -  -  PrecedenceTable:
    6 D1:B1E0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B1E1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B1E2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B1E3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B1E4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B1E5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B1E6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B1E7 04 -  -  -  	.db	4	; $008a -
   14 D1:B1E8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B1E9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B1EA 03 -  -  -  	.db	3	; $008d >
   17 D1:B1EB 03 -  -  -  	.db	3	; $008e <
   18 D1:B1EC 03 -  -  -  	.db	3	; $008f =
   19 D1:B1ED 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B1EE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B1EF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B1F0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B1F1 -  -  -  -  
Listing for file "_build.asm"
   58 D1:B1F1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B1F1 -  -  -  -  ;
    2 D1:B1F1 -  -  -  -  ;	This is automatically generated.
    3 D1:B1F1 -  -  -  -  ;
    4 D1:B1F1 -  -  -  -  ErrorIDTable:
    5 D1:B1F1 31 B2 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B1F5 37 B2 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B1F9 48 B2 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B1FD 56 B2 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B201 60 B2 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   10 D1:B205 7A B2 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   11 D1:B209 8B B2 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   12 D1:B20D 99 B2 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   13 D1:B211 A7 B2 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   14 D1:B215 B1 B2 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   15 D1:B219 C6 B2 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   16 D1:B21D DC B2 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   17 D1:B221 EA B2 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   18 D1:B225 EF B2 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   19 D1:B229 FC B2 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   20 D1:B22D 0D B3 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   21 D1:B231 -  -  -  -  
   22 D1:B231 -  -  -  -  ErrText_warmstart:
   23 D1:B231 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   24 D1:B237 -  -  -  -  ErrText_assert:
   25 D1:B237 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   26 D1:B248 -  -  -  -  ErrText_badtype:
   27 D1:B248 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   28 D1:B256 -  -  -  -  ErrText_badvalue:
   29 D1:B256 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   30 D1:B260 -  -  -  -  ErrText_disabled:
   31 D1:B260 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   32 D1:B27A -  -  -  -  ErrText_divzero:
   33 D1:B27A 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   34 D1:B28B -  -  -  -  ErrText_memory:
   35 D1:B28B 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   36 D1:B299 -  -  -  -  ErrText_nocomma:
   37 D1:B299 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   38 D1:B2A7 -  -  -  -  ErrText_nodollar:
   39 D1:B2A7 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   40 D1:B2B1 -  -  -  -  ErrText_nolbracket:
   41 D1:B2B1 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   42 D1:B2C6 -  -  -  -  ErrText_norbracket:
   43 D1:B2C6 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   44 D1:B2DC -  -  -  -  ErrText_notref:
   45 D1:B2DC 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   46 D1:B2EA -  -  -  -  ErrText_stop:
   47 D1:B2EA 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   48 D1:B2EF -  -  -  -  ErrText_syntax:
   49 D1:B2EF 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   50 D1:B2FC -  -  -  -  ErrText_todo:
   51 D1:B2FC 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   52 D1:B30D -  -  -  -  ErrText_unknownvar:
   53 D1:B30D 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   59 D1:B31E -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B31E -  -  -  -  ;
    2 D1:B31E -  -  -  -  ;	Vectors for set 0
    3 D1:B31E -  -  -  -  ;
    4 D1:B31E -  -  -  -  VectorsSet0:
    5 D1:B31E 7F A9 D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B322 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B326 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B32A FB AB D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B32E 04 AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B332 A7 AB D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B336 B5 AB D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B33A C3 AB D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B33E B5 AB D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B342 8B AB D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B346 99 AB D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B34A 62 AC D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B34E 58 AC D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B352 44 AC D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B356 3A AC D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B35A 30 AC D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B35E 4E AC D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B362 D1 AB D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B366 DF AB D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B36A ED AB D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B36E D4 AF D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B372 CC AF D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B376 EE AE D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B37A 1B AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B37E DD AE D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B382 B3 AE D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B386 B2 AF D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B38A E3 AF D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B38E C9 AE D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B392 C0 AE D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B396 F9 AE D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B39A 0E AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B39E FC AF D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B3A2 03 B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B3A6 10 B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B3AA 22 AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B3AE 26 AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B3B2 6C A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B3B6 6C A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B3BA 70 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B3BE 6C A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B3C2 41 AA D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B3C6 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa repeat
   48 D1:B3CA A5 A8 D1 00 	addr(Unimplemented)              ; $00ab until
   49 D1:B3CE A5 A8 D1 00 	addr(Unimplemented)              ; $00ac if
   50 D1:B3D2 6C A9 D1 00 	addr(BadCmd_Then)                ; $00ad then
   51 D1:B3D6 A5 A8 D1 00 	addr(Unimplemented)              ; $00ae else
   52 D1:B3DA A5 A8 D1 00 	addr(Unimplemented)              ; $00af for
   53 D1:B3DE 6C A9 D1 00 	addr(BadCmd_To)                  ; $00b0 to
   54 D1:B3E2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 step
   55 D1:B3E6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b2 next
   56 D1:B3EA A5 A8 D1 00 	addr(Unimplemented)              ; $00b3 def
   57 D1:B3EE A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 proc
   58 D1:B3F2 A5 A8 D1 00 	addr(Unimplemented)              ; $00b5 endproc
   59 D1:B3F6 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 gosub
   60 D1:B3FA A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 return
   61 D1:B3FE A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 goto
   62 D1:B402 A5 A8 D1 00 	addr(Unimplemented)              ; $00b9 local
   63 D1:B406 71 A9 D1 00 	addr(Command_DIM)                ; $00ba dim
   64 D1:B40A 41 AA D1 00 	addr(Command_REM)                ; $00bb rem
   65 D1:B40E 96 A9 D1 00 	addr(Command_LET)                ; $00bc let
   66 D1:B412 A5 A8 D1 00 	addr(Unimplemented)              ; $00bd vdu
   67 D1:B416 EA A9 D1 00 	addr(Command_PRINT)              ; $00be print
   68 D1:B41A A5 A8 D1 00 	addr(Unimplemented)              ; $00bf load
   69 D1:B41E A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 save
   70 D1:B422 A5 A8 D1 00 	addr(Unimplemented)              ; $00c1 list
   71 D1:B426 9E B0 D1 00 	addr(Command_NEW)                ; $00c2 new
   72 D1:B42A 5E AA D1 00 	addr(Command_RUN)                ; $00c3 run
   73 D1:B42E A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 read
   74 D1:B432 A5 A8 D1 00 	addr(Unimplemented)              ; $00c5 data
   75 D1:B436 A5 A8 D1 00 	addr(Unimplemented)              ; $00c6 restore
   76 D1:B43A 5B A9 D1 00 	addr(Command_ASSERT)             ; $00c7 assert
   77 D1:B43E 40 B0 D1 00 	addr(Command_CLEAR)              ; $00c8 clear
   78 D1:B442 79 A9 D1 00 	addr(Command_END)                ; $00c9 end
   79 D1:B446 D1 AA D1 00 	addr(Command_STOP)               ; $00ca stop
   80 D1:B44A -  -  -  -  ;
   81 D1:B44A -  -  -  -  ;	Vectors for set 1
   82 D1:B44A -  -  -  -  ;
   83 D1:B44A -  -  -  -  VectorsSet1:
   84 D1:B44A -  -  -  -  ;
   85 D1:B44A -  -  -  -  ;	Vectors for set 2
   86 D1:B44A -  -  -  -  ;
   87 D1:B44A -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   60 D1:B44A -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B44A -  -  -  -  ; ***************************************************************************************
    2 D1:B44A -  -  -  -  ; ***************************************************************************************
    3 D1:B44A -  -  -  -  ;
    4 D1:B44A -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B44A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B44A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B44A -  -  -  -  ;		Reviewed :	No
    8 D1:B44A -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B44A -  -  -  -  ;
   10 D1:B44A -  -  -  -  ; ***************************************************************************************
   11 D1:B44A -  -  -  -  ; ***************************************************************************************
   12 D1:B44A -  -  -  -  
   13 D1:B44A -  -  -  -  ; ***************************************************************************************
   14 D1:B44A -  -  -  -  ;
   15 D1:B44A -  -  -  -  ;								Unsigned integer divide
   16 D1:B44A -  -  -  -  ;
   17 D1:B44A -  -  -  -  ; ***************************************************************************************
   18 D1:B44A -  -  -  -  
   19 D1:B44A -  -  -  -  Int32UDivide:
   20 D1:B44A 37 -  -  -  		scf
   21 D1:B44B C3 8F B4 D1 		jp 		_I32UnsignedDivide		
   22 D1:B44F -  -  -  -  
   23 D1:B44F -  -  -  -  ; ***************************************************************************************
   24 D1:B44F -  -  -  -  ;
   25 D1:B44F -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B44F -  -  -  -  ;
   27 D1:B44F -  -  -  -  ; ***************************************************************************************
   28 D1:B44F -  -  -  -  
   29 D1:B44F -  -  -  -  Int32SDivide:
   30 D1:B44F 37 -  -  -  		scf
   31 D1:B450 18 01 -  -  		jr 		_I32SDivide
   32 D1:B452 -  -  -  -  Int32Modulus:
   33 D1:B452 AF -  -  -  		xor 	a
   34 D1:B453 -  -  -  -  _I32SDivide:
   35 D1:B453 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B454 F5 -  -  -  		push 	af
   37 D1:B455 08 -  -  -  		ex 		af,af'
   38 D1:B456 -  -  -  -  
   39 D1:B456 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B457 D9 -  -  -  		exx
   41 D1:B458 D5 -  -  -  		push 	de
   42 D1:B459 D9 -  -  -  		exx
   43 D1:B45A -  -  -  -  
   44 D1:B45A F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B45B AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B45C CD 7C B4 D1 		call 	_I32CheckHLSignSwap
   47 D1:B460 CD 7C B4 D1 		call 	_I32CheckHLSignSwap
   48 D1:B464 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B465 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B466 F5 -  -  -  		push 	af
   51 D1:B467 CD 8F B4 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B46B F1 -  -  -  		pop 	af 							; get function back
   53 D1:B46C 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B46E 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B46F CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B471 C4 F2 B5 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B475 -  -  -  -  _I32SDExit:
   58 D1:B475 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B476 D1 -  -  -  		pop 	de
   60 D1:B477 D9 -  -  -  		exx
   61 D1:B478 D1 -  -  -  		pop 	de
   62 D1:B479 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B47A 08 -  -  -  		ex 		af,af'
   64 D1:B47B C9 -  -  -  		ret
   65 D1:B47C -  -  -  -  
   66 D1:B47C -  -  -  -  
   67 D1:B47C -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B47C D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B47D CB 7C -  -  		bit 	7,h
   70 D1:B47F D9 -  -  -  		exx
   71 D1:B480 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B482 -  -  -  -  		;
   73 D1:B482 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B484 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B485 CD F2 B5 D1 		call 	Int32Negate 				
   76 D1:B489 F1 -  -  -  		pop 	af
   77 D1:B48A -  -  -  -  _I32CHSPositive:
   78 D1:B48A D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B48B EB -  -  -  		ex 		de,hl
   80 D1:B48C D9 -  -  -  		exx		
   81 D1:B48D EB -  -  -  		ex 		de,hl
   82 D1:B48E C9 -  -  -  		ret
   83 D1:B48F -  -  -  -  
   84 D1:B48F -  -  -  -  ; ***************************************************************************************
   85 D1:B48F -  -  -  -  ;
   86 D1:B48F -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B48F -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B48F -  -  -  -  ;
   89 D1:B48F -  -  -  -  ; ***************************************************************************************
   90 D1:B48F -  -  -  -  
   91 D1:B48F -  -  -  -  _I32UnsignedDivide:
   92 D1:B48F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B490 D5 -  -  -  		push 	de
   94 D1:B491 D9 -  -  -  		exx
   95 D1:B492 C5 -  -  -  		push 	bc
   96 D1:B493 D5 -  -  -  		push 	de 							
   97 D1:B494 D9 -  -  -  		exx
   98 D1:B495 -  -  -  -  
   99 D1:B495 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B496 -  -  -  -  
  101 D1:B496 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B497 B3 -  -  -  		or 		e
  103 D1:B498 D9 -  -  -  		exx
  104 D1:B499 B2 -  -  -  		or 		d
  105 D1:B49A B3 -  -  -  		or 		e
  106 D1:B49B D9 -  -  -  		exx
  107 D1:B49C CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B4A0 -  -  -  -  
  109 D1:B4A0 -  -  -  -  
  110 D1:B4A0 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B4A1 4D -  -  -  		ld		c,l
  112 D1:B4A2 21 00 00 00 		ld 		hl,$0000
  113 D1:B4A6 D9 -  -  -  		exx
  114 D1:B4A7 44 -  -  -  		ld 		b,h
  115 D1:B4A8 4D -  -  -  		ld		c,l
  116 D1:B4A9 21 00 00 00 		ld 		hl,$0000
  117 D1:B4AD D9 -  -  -  		exx
  118 D1:B4AE -  -  -  -  
  119 D1:B4AE 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B4B0 -  -  -  -  _I32DivideLoop:
  121 D1:B4B0 F5 -  -  -  		push 	af
  122 D1:B4B1 -  -  -  -  
  123 D1:B4B1 CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B4B3 CB 10 -  -  		rl 		b
  125 D1:B4B5 D9 -  -  -  		exx
  126 D1:B4B6 CB 11 -  -  		rl 		c
  127 D1:B4B8 CB 10 -  -  		rl 		b
  128 D1:B4BA D9 -  -  -  		exx
  129 D1:B4BB CB 15 -  -  		rl 		l
  130 D1:B4BD CB 14 -  -  		rl 		h
  131 D1:B4BF D9 -  -  -  		exx
  132 D1:B4C0 CB 15 -  -  		rl 		l
  133 D1:B4C2 CB 14 -  -  		rl 		h
  134 D1:B4C4 D9 -  -  -  		exx
  135 D1:B4C5 -  -  -  -  
  136 D1:B4C5 CD 90 B5 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B4C9 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B4CB -  -  -  -  
  139 D1:B4CB 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B4CC 18 04 -  -  		jr 		_I32Next
  141 D1:B4CE -  -  -  -  
  142 D1:B4CE -  -  -  -  _I32Borrow:
  143 D1:B4CE CD 88 B5 D1 		call 	Int32Add 					; A = A + M
  144 D1:B4D2 -  -  -  -  _I32Next:
  145 D1:B4D2 F1 -  -  -  		pop 	af
  146 D1:B4D3 3D -  -  -  		dec 	a
  147 D1:B4D4 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B4D6 -  -  -  -  
  149 D1:B4D6 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B4D7 -  -  -  -  
  151 D1:B4D7 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B4D8 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B4DA -  -  -  -  
  154 D1:B4DA 60 -  -  -  		ld  	h,b
  155 D1:B4DB 69 -  -  -  		ld 		l,c
  156 D1:B4DC D9 -  -  -  		exx
  157 D1:B4DD 60 -  -  -  		ld  	h,b
  158 D1:B4DE 69 -  -  -  		ld 		l,c
  159 D1:B4DF D9 -  -  -  		exx
  160 D1:B4E0 -  -  -  -  _I32Modulus1:		
  161 D1:B4E0 D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B4E1 D1 -  -  -  		pop 	de
  163 D1:B4E2 C1 -  -  -  		pop 	bc
  164 D1:B4E3 D9 -  -  -  		exx
  165 D1:B4E4 D1 -  -  -  		pop 	de
  166 D1:B4E5 C1 -  -  -  		pop 	bc
  167 D1:B4E6 C9 -  -  -  		ret
  168 D1:B4E7 -  -  -  -  
  169 D1:B4E7 -  -  -  -  ; ***************************************************************************************
  170 D1:B4E7 -  -  -  -  ;
  171 D1:B4E7 -  -  -  -  ;									Changes and Updates
  172 D1:B4E7 -  -  -  -  ;
  173 D1:B4E7 -  -  -  -  ; ***************************************************************************************
  174 D1:B4E7 -  -  -  -  ;
  175 D1:B4E7 -  -  -  -  ;		Date			Notes
  176 D1:B4E7 -  -  -  -  ;		==== 			=====
  177 D1:B4E7 -  -  -  -  ;
  178 D1:B4E7 -  -  -  -  ; ***************************************************************************************
  179 D1:B4E7 -  -  -  -  		
Listing for file "_build.asm"
   61 D1:B4E7 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B4E7 -  -  -  -  ; ***************************************************************************************
    2 D1:B4E7 -  -  -  -  ; ***************************************************************************************
    3 D1:B4E7 -  -  -  -  ;
    4 D1:B4E7 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B4E7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B4E7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B4E7 -  -  -  -  ;		Reviewed :	No
    8 D1:B4E7 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B4E7 -  -  -  -  ;
   10 D1:B4E7 -  -  -  -  ; ***************************************************************************************
   11 D1:B4E7 -  -  -  -  ; ***************************************************************************************
   12 D1:B4E7 -  -  -  -  
   13 D1:B4E7 -  -  -  -  ; ***************************************************************************************
   14 D1:B4E7 -  -  -  -  ;
   15 D1:B4E7 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B4E7 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B4E7 -  -  -  -  ;
   18 D1:B4E7 -  -  -  -  ; ***************************************************************************************
   19 D1:B4E7 -  -  -  -  
   20 D1:B4E7 -  -  -  -  Int32FromString:
   21 D1:B4E7 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B4E8 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B4E9 D5 -  -  -  		push 	de
   24 D1:B4EA D9 -  -  -  		exx
   25 D1:B4EB D5 -  -  -  		push 	de
   26 D1:B4EC -  -  -  -  
   27 D1:B4EC 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B4F0 11 00 00 00 		ld 		de,$0000
   29 D1:B4F4 D9 -  -  -  		exx
   30 D1:B4F5 21 00 00 00 		ld 		hl,$0000
   31 D1:B4F9 11 00 00 00 		ld 		de,$0000
   32 D1:B4FD D9 -  -  -  		exx
   33 D1:B4FE -  -  -  -  
   34 D1:B4FE 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B4FF CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B501 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B503 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B505 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B506 -  -  -  -  		;
   40 D1:B506 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B507 F5 -  -  -  		push 	af
   42 D1:B508 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B50A 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B50B 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B50D 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B50E 18 01 -  -  		jr 		_I32FSMain
   47 D1:B510 -  -  -  -  _I32FSNotSigned:		
   48 D1:B510 E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B511 -  -  -  -  		;
   50 D1:B511 -  -  -  -  		; 		Main conversion loop.
   51 D1:B511 -  -  -  -  		; 		
   52 D1:B511 -  -  -  -  _I32FSMain:		
   53 D1:B511 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B512 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B514 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B516 D6 20 -  -  		sub 	32
   57 D1:B518 -  -  -  -  _I32FSNotLower:
   58 D1:B518 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B51A 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B51C FE 3A -  -  		cp 		'9'+1
   61 D1:B51E 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B520 FE 41 -  -  		cp 		'A'
   63 D1:B522 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B524 FE 47 -  -  		cp 		'F'+1
   65 D1:B526 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B528 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B52A -  -  -  -  _I32FSOkay:
   68 D1:B52A D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B52C BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B52D 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B52F 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B530 D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B531 F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B532 CD 4F B5 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B536 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B537 5F -  -  -  		ld 		e,a
   77 D1:B538 CD 88 B5 D1 		call 	Int32Add 					; and add it.
   78 D1:B53C D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B53D 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B53F -  -  -  -  
   81 D1:B53F -  -  -  -  _I32FSExit:
   82 D1:B53F F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B540 FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B542 CC F2 B5 D1 		call 	z,Int32Negate
   85 D1:B546 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B547 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B548 D9 -  -  -  		exx
   88 D1:B549 D1 -  -  -  		pop 	de
   89 D1:B54A D9 -  -  -  		exx
   90 D1:B54B C1 -  -  -  		pop 	bc
   91 D1:B54C FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B54E C9 -  -  -  		ret				
   93 D1:B54F -  -  -  -  
   94 D1:B54F -  -  -  -  ; ***************************************************************************************
   95 D1:B54F -  -  -  -  ;
   96 D1:B54F -  -  -  -  ;									Changes and Updates
   97 D1:B54F -  -  -  -  ;
   98 D1:B54F -  -  -  -  ; ***************************************************************************************
   99 D1:B54F -  -  -  -  ;
  100 D1:B54F -  -  -  -  ;		Date			Notes
  101 D1:B54F -  -  -  -  ;		==== 			=====
  102 D1:B54F -  -  -  -  ;
  103 D1:B54F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   62 D1:B54F -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B54F -  -  -  -  ; ***************************************************************************************
    2 D1:B54F -  -  -  -  ; ***************************************************************************************
    3 D1:B54F -  -  -  -  ;
    4 D1:B54F -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B54F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B54F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B54F -  -  -  -  ;		Reviewed :	No
    8 D1:B54F -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B54F -  -  -  -  ;
   10 D1:B54F -  -  -  -  ; ***************************************************************************************
   11 D1:B54F -  -  -  -  ; ***************************************************************************************
   12 D1:B54F -  -  -  -  
   13 D1:B54F -  -  -  -  Int32Multiply:
   14 D1:B54F C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B550 D5 -  -  -  		push 	de
   16 D1:B551 44 -  -  -  		ld 		b,h
   17 D1:B552 4D -  -  -  		ld 		c,l
   18 D1:B553 21 00 00 00 		ld 		hl,$0000
   19 D1:B557 -  -  -  -  
   20 D1:B557 D9 -  -  -  		exx
   21 D1:B558 C5 -  -  -  		push 	bc
   22 D1:B559 D5 -  -  -  		push 	de
   23 D1:B55A 44 -  -  -  		ld 		b,h
   24 D1:B55B 4D -  -  -  		ld 		c,l
   25 D1:B55C 21 00 00 00 		ld 		hl,$0000		
   26 D1:B560 D9 -  -  -  		exx
   27 D1:B561 -  -  -  -  
   28 D1:B561 -  -  -  -  _I32MultiplyLoop:
   29 D1:B561 CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B563 C4 88 B5 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B567 -  -  -  -  		;
   32 D1:B567 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B568 CB 38 -  -  		srl 	b
   34 D1:B56A CB 19 -  -  		rr 		c
   35 D1:B56C D9 -  -  -  		exx
   36 D1:B56D CB 18 -  -  		rr 		b
   37 D1:B56F CB 19 -  -  		rr 		c
   38 D1:B571 -  -  -  -  		;
   39 D1:B571 CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B573 CB 12 -  -  		rl 		d
   41 D1:B575 D9 -  -  -  		exx
   42 D1:B576 CB 13 -  -  		rl 		e
   43 D1:B578 CB 12 -  -  		rl 		d
   44 D1:B57A -  -  -  -  
   45 D1:B57A 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B57B B1 -  -  -  		or 		c
   47 D1:B57C D9 -  -  -  		exx
   48 D1:B57D B0 -  -  -  		or 		b
   49 D1:B57E B1 -  -  -  		or 		c
   50 D1:B57F 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B581 -  -  -  -  
   52 D1:B581 D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B582 D1 -  -  -  		pop 	de
   54 D1:B583 C1 -  -  -  		pop 	bc
   55 D1:B584 D9 -  -  -  		exx
   56 D1:B585 D1 -  -  -  		pop 	de
   57 D1:B586 C1 -  -  -  		pop 	bc
   58 D1:B587 C9 -  -  -  		ret
   59 D1:B588 -  -  -  -  
   60 D1:B588 -  -  -  -  ; ***************************************************************************************
   61 D1:B588 -  -  -  -  ;
   62 D1:B588 -  -  -  -  ;									Changes and Updates
   63 D1:B588 -  -  -  -  ;
   64 D1:B588 -  -  -  -  ; ***************************************************************************************
   65 D1:B588 -  -  -  -  ;
   66 D1:B588 -  -  -  -  ;		Date			Notes
   67 D1:B588 -  -  -  -  ;		==== 			=====
   68 D1:B588 -  -  -  -  ;
   69 D1:B588 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   63 D1:B588 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B588 -  -  -  -  ; ***************************************************************************************
    2 D1:B588 -  -  -  -  ; ***************************************************************************************
    3 D1:B588 -  -  -  -  ;
    4 D1:B588 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B588 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B588 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B588 -  -  -  -  ;		Reviewed :	No
    8 D1:B588 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B588 -  -  -  -  ;
   10 D1:B588 -  -  -  -  ; ***************************************************************************************
   11 D1:B588 -  -  -  -  ; ***************************************************************************************
   12 D1:B588 -  -  -  -  
   13 D1:B588 -  -  -  -  ; ***************************************************************************************
   14 D1:B588 -  -  -  -  ;
   15 D1:B588 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B588 -  -  -  -  ;
   17 D1:B588 -  -  -  -  ; ***************************************************************************************
   18 D1:B588 -  -  -  -  
   19 D1:B588 -  -  -  -  Int32Add:
   20 D1:B588 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B58A D9 -  -  -  		exx
   22 D1:B58B 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B58E D9 -  -  -  		exx
   24 D1:B58F C9 -  -  -  		ret
   25 D1:B590 -  -  -  -  
   26 D1:B590 -  -  -  -  ; ***************************************************************************************
   27 D1:B590 -  -  -  -  ;
   28 D1:B590 -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B590 -  -  -  -  ;
   30 D1:B590 -  -  -  -  ; ***************************************************************************************
   31 D1:B590 -  -  -  -  
   32 D1:B590 -  -  -  -  Int32Subtract:
   33 D1:B590 AF -  -  -  		xor 	a 							; clear carry
   34 D1:B591 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B594 D9 -  -  -  		exx
   36 D1:B595 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B598 D9 -  -  -  		exx
   38 D1:B599 C9 -  -  -  		ret
   39 D1:B59A -  -  -  -  
   40 D1:B59A -  -  -  -  ; ***************************************************************************************
   41 D1:B59A -  -  -  -  ;
   42 D1:B59A -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B59A -  -  -  -  ;
   44 D1:B59A -  -  -  -  ; ***************************************************************************************
   45 D1:B59A -  -  -  -  
   46 D1:B59A -  -  -  -  Int32And:
   47 D1:B59A D9 -  -  -  		exx
   48 D1:B59B CD A0 B5 D1 		call 	_I32AndHLDE
   49 D1:B59F D9 -  -  -  		exx
   50 D1:B5A0 -  -  -  -  _I32AndHLDE:		
   51 D1:B5A0 7C -  -  -  		ld 		a,h
   52 D1:B5A1 A2 -  -  -  		and 	d
   53 D1:B5A2 67 -  -  -  		ld 		h,a
   54 D1:B5A3 7D -  -  -  		ld 		a,l
   55 D1:B5A4 A3 -  -  -  		and 	e
   56 D1:B5A5 6F -  -  -  		ld 		l,a
   57 D1:B5A6 C9 -  -  -  		ret
   58 D1:B5A7 -  -  -  -  
   59 D1:B5A7 -  -  -  -  ; ***************************************************************************************
   60 D1:B5A7 -  -  -  -  ;
   61 D1:B5A7 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B5A7 -  -  -  -  ;
   63 D1:B5A7 -  -  -  -  ; ***************************************************************************************
   64 D1:B5A7 -  -  -  -  
   65 D1:B5A7 -  -  -  -  Int32Or:
   66 D1:B5A7 D9 -  -  -  		exx
   67 D1:B5A8 CD AD B5 D1 		call 	_I32OrHLDE
   68 D1:B5AC D9 -  -  -  		exx
   69 D1:B5AD -  -  -  -  _I32OrHLDE:		
   70 D1:B5AD 7C -  -  -  		ld 		a,h
   71 D1:B5AE B2 -  -  -  		or 		d
   72 D1:B5AF 67 -  -  -  		ld 		h,a
   73 D1:B5B0 7D -  -  -  		ld 		a,l
   74 D1:B5B1 B3 -  -  -  		or 		e
   75 D1:B5B2 6F -  -  -  		ld 		l,a
   76 D1:B5B3 C9 -  -  -  		ret
   77 D1:B5B4 -  -  -  -  
   78 D1:B5B4 -  -  -  -  ; ***************************************************************************************
   79 D1:B5B4 -  -  -  -  ;
   80 D1:B5B4 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B5B4 -  -  -  -  ;
   82 D1:B5B4 -  -  -  -  ; ***************************************************************************************
   83 D1:B5B4 -  -  -  -  
   84 D1:B5B4 -  -  -  -  Int32Xor:
   85 D1:B5B4 D9 -  -  -  		exx
   86 D1:B5B5 CD BA B5 D1 		call 	_I32XorHLDE
   87 D1:B5B9 D9 -  -  -  		exx
   88 D1:B5BA -  -  -  -  _I32XorHLDE:		
   89 D1:B5BA 7C -  -  -  		ld 		a,h
   90 D1:B5BB AA -  -  -  		xor 	d
   91 D1:B5BC 67 -  -  -  		ld 		h,a
   92 D1:B5BD 7D -  -  -  		ld 		a,l
   93 D1:B5BE AB -  -  -  		xor 	e
   94 D1:B5BF 6F -  -  -  		ld 		l,a
   95 D1:B5C0 C9 -  -  -  		ret
   96 D1:B5C1 -  -  -  -  
   97 D1:B5C1 -  -  -  -  ; ***************************************************************************************
   98 D1:B5C1 -  -  -  -  ;
   99 D1:B5C1 -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B5C1 -  -  -  -  ;
  101 D1:B5C1 -  -  -  -  ; ***************************************************************************************
  102 D1:B5C1 -  -  -  -  
  103 D1:B5C1 -  -  -  -  Int32Zero:
  104 D1:B5C1 D9 -  -  -  		exx
  105 D1:B5C2 7D -  -  -  		ld 		a,l
  106 D1:B5C3 B4 -  -  -  		or 		h
  107 D1:B5C4 D9 -  -  -  		exx
  108 D1:B5C5 B5 -  -  -  		or 		l
  109 D1:B5C6 B4 -  -  -  		or 		h
  110 D1:B5C7 C9 -  -  -  		ret
  111 D1:B5C8 -  -  -  -  
  112 D1:B5C8 -  -  -  -  ; ***************************************************************************************
  113 D1:B5C8 -  -  -  -  ;
  114 D1:B5C8 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B5C8 -  -  -  -  ;
  116 D1:B5C8 -  -  -  -  ; ***************************************************************************************
  117 D1:B5C8 -  -  -  -  
  118 D1:B5C8 -  -  -  -  Int32Compare:
  119 D1:B5C8 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B5C9 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B5CA 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B5CD D9 -  -  -  		exx
  123 D1:B5CE E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B5CF 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B5D2 -  -  -  -  		;
  126 D1:B5D2 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B5D3 E2 DB B5 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B5D7 78 -  -  -  		ld 		a,b
  129 D1:B5D8 EE 80 -  -  		xor 	$80
  130 D1:B5DA 47 -  -  -  		ld 		b,a
  131 D1:B5DB -  -  -  -  _I32CNoOverflow:
  132 D1:B5DB 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B5DC B5 -  -  -  		or 		l
  134 D1:B5DD D9 -  -  -  		exx 
  135 D1:B5DE B4 -  -  -  		or 		h
  136 D1:B5DF B5 -  -  -  		or 		l
  137 D1:B5E0 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B5E2 -  -  -  -  		;
  139 D1:B5E2 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B5E3 CB 78 -  -  		bit 	7,b
  141 D1:B5E5 D9 -  -  -  		exx
  142 D1:B5E6 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B5E8 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B5EA 3E FF -  -  		ld 		a,$FF
  145 D1:B5EC -  -  -  -  _I32NotPos:
  146 D1:B5EC D9 -  -  -  		exx
  147 D1:B5ED E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B5EE D9 -  -  -  		exx
  149 D1:B5EF E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B5F0 B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B5F1 C9 -  -  -  		ret
  152 D1:B5F2 -  -  -  -  
  153 D1:B5F2 -  -  -  -  ; ***************************************************************************************
  154 D1:B5F2 -  -  -  -  ;
  155 D1:B5F2 -  -  -  -  ;										Negate HL'HL
  156 D1:B5F2 -  -  -  -  ;
  157 D1:B5F2 -  -  -  -  ; ***************************************************************************************
  158 D1:B5F2 -  -  -  -  
  159 D1:B5F2 -  -  -  -  Int32Negate:
  160 D1:B5F2 AF -  -  -  		xor 	a
  161 D1:B5F3 CD FE B5 D1 		call 	_I32NSubtract
  162 D1:B5F7 D9 -  -  -  		exx
  163 D1:B5F8 CD FE B5 D1 		call 	_I32NSubtract
  164 D1:B5FC D9 -  -  -  		exx
  165 D1:B5FD C9 -  -  -  		ret
  166 D1:B5FE -  -  -  -  _I32NSubtract:
  167 D1:B5FE D5 -  -  -  		push 	de
  168 D1:B5FF EB -  -  -  		ex 		de,hl
  169 D1:B600 21 00 00 00 		ld 		hl,$0000
  170 D1:B604 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B607 D1 -  -  -  		pop 	de
  172 D1:B608 C9 -  -  -  		ret
  173 D1:B609 -  -  -  -  		
  174 D1:B609 -  -  -  -  ; ***************************************************************************************
  175 D1:B609 -  -  -  -  ;
  176 D1:B609 -  -  -  -  ;									Changes and Updates
  177 D1:B609 -  -  -  -  ;
  178 D1:B609 -  -  -  -  ; ***************************************************************************************
  179 D1:B609 -  -  -  -  ;
  180 D1:B609 -  -  -  -  ;		Date			Notes
  181 D1:B609 -  -  -  -  ;		==== 			=====
  182 D1:B609 -  -  -  -  ;
  183 D1:B609 -  -  -  -  ; ***************************************************************************************
  184 D1:B609 -  -  -  -  		
Listing for file "_build.asm"
   64 D1:B609 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B609 -  -  -  -  ; ***************************************************************************************
    2 D1:B609 -  -  -  -  ; ***************************************************************************************
    3 D1:B609 -  -  -  -  ;
    4 D1:B609 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B609 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B609 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B609 -  -  -  -  ;		Reviewed :	No
    8 D1:B609 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B609 -  -  -  -  ;
   10 D1:B609 -  -  -  -  ; ***************************************************************************************
   11 D1:B609 -  -  -  -  ;
   12 D1:B609 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B609 -  -  -  -  ;
   14 D1:B609 -  -  -  -  ; ***************************************************************************************
   15 D1:B609 -  -  -  -  
   16 D1:B609 -  -  -  -  Int32ToString:
   17 D1:B609 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B60A D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B60B E5 -  -  -  		push 	hl
   20 D1:B60C 11 00 00 00 		ld	 	de,$0000
   21 D1:B610 D9 -  -  -  		exx
   22 D1:B611 D5 -  -  -  		push 	de
   23 D1:B612 E5 -  -  -  		push 	hl
   24 D1:B613 11 00 00 00 		ld 		de,$000
   25 D1:B617 D9 -  -  -  		exx
   26 D1:B618 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B619 -  -  -  -  		;
   28 D1:B619 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B61B 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B61D ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B61F 5F -  -  -  		ld 		e,a
   32 D1:B620 -  -  -  -  		;
   33 D1:B620 D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B621 CB 7C -  -  		bit 	7,h
   35 D1:B623 D9 -  -  -  		exx
   36 D1:B624 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B626 -  -  -  -  		;
   38 D1:B626 CD F2 B5 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B62A -  -  -  -  		;
   40 D1:B62A 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B62C 02 -  -  -  		ld 		(bc),a
   42 D1:B62D 03 -  -  -  		inc 	bc
   43 D1:B62E -  -  -  -  _I32TSNotNegative:	
   44 D1:B62E CD 3D B6 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B632 -  -  -  -  _I32TSExit:
   46 D1:B632 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B634 02 -  -  -  		ld 		(bc),a 
   48 D1:B635 -  -  -  -  
   49 D1:B635 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B636 E1 -  -  -  		pop 	hl
   51 D1:B637 D1 -  -  -  		pop 	de
   52 D1:B638 D9 -  -  -  		exx
   53 D1:B639 E1 -  -  -  		pop 	hl
   54 D1:B63A D1 -  -  -  		pop 	de
   55 D1:B63B C1 -  -  -  		pop 	bc
   56 D1:B63C C9 -  -  -  		ret
   57 D1:B63D -  -  -  -  
   58 D1:B63D -  -  -  -  _I32RecursiveConvert:
   59 D1:B63D CD 4A B4 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B641 F5 -  -  -  		push 	af 							; save remainder
   61 D1:B642 CD C1 B5 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B646 C4 3D B6 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B64A F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B64B FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B64D 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B64F C6 07 -  -  		add 	a,7
   67 D1:B651 -  -  -  -  _I32NotHex:
   68 D1:B651 C6 30 -  -  		add 	a,48
   69 D1:B653 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B654 03 -  -  -  		inc 	bc
   71 D1:B655 C9 -  -  -  		ret		
   72 D1:B656 -  -  -  -  
   73 D1:B656 -  -  -  -  ; ***************************************************************************************
   74 D1:B656 -  -  -  -  ;
   75 D1:B656 -  -  -  -  ;									Changes and Updates
   76 D1:B656 -  -  -  -  ;
   77 D1:B656 -  -  -  -  ; ***************************************************************************************
   78 D1:B656 -  -  -  -  ;
   79 D1:B656 -  -  -  -  ;		Date			Notes
   80 D1:B656 -  -  -  -  ;		==== 			=====
   81 D1:B656 -  -  -  -  ;
   82 D1:B656 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   65 D1:B656 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B656 -  -  -  -  ; ***************************************************************************************
    2 D1:B656 -  -  -  -  ; ***************************************************************************************
    3 D1:B656 -  -  -  -  ;
    4 D1:B656 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B656 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B656 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B656 -  -  -  -  ;		Reviewed :	No
    8 D1:B656 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B656 -  -  -  -  ;
   10 D1:B656 -  -  -  -  ; ***************************************************************************************
   11 D1:B656 -  -  -  -  ; ***************************************************************************************
   12 D1:B656 -  -  -  -  
   13 D1:B656 -  -  -  -  #ifdef AQUARIUS
   14 D1:B656             
   15 D1:B656             ; ***************************************************************************************
   16 D1:B656             ;
   17 D1:B656             ;								Initialise system stuff
   18 D1:B656             ;
   19 D1:B656             ; ***************************************************************************************
   20 D1:B656             
   21 D1:B656             SYSInitialise:
   22 D1:B656             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B656             	call 	SYSPrintChar
   24 D1:B656             	ret
   25 D1:B656             
   26 D1:B656             ; ***************************************************************************************
   27 D1:B656             ;
   28 D1:B656             ;								Terminate system stuff
   29 D1:B656             ;
   30 D1:B656             ; ***************************************************************************************
   31 D1:B656             
   32 D1:B656             SYSTerminate:
   33 D1:B656             	jr 		SYSTerminate
   34 D1:B656             
   35 D1:B656             ; ***************************************************************************************
   36 D1:B656             ;
   37 D1:B656             ;								Print A character
   38 D1:B656             ;
   39 D1:B656             ; ***************************************************************************************
   40 D1:B656             
   41 D1:B656             SYSPrintChar:
   42 D1:B656             	push 	af 									; we stack everything including alt registers
   43 D1:B656             	push 	bc
   44 D1:B656             	push 	de
   45 D1:B656             	push 	hl
   46 D1:B656             	push 	ix
   47 D1:B656             	push 	iy
   48 D1:B656             	exx
   49 D1:B656             	push 	bc
   50 D1:B656             	push 	de
   51 D1:B656             	push 	hl
   52 D1:B656             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B656             	pop 	hl
   54 D1:B656             	pop 	de
   55 D1:B656             	pop 	bc
   56 D1:B656             	exx
   57 D1:B656             	pop 	iy
   58 D1:B656             	pop 	ix
   59 D1:B656             	pop 	hl
   60 D1:B656             	pop 	de
   61 D1:B656             	pop 	bc
   62 D1:B656             	pop 	af
   63 D1:B656             	ret		
   64 D1:B656             
   65 D1:B656             ; ***************************************************************************************
   66 D1:B656             ;
   67 D1:B656             ;									Print Newline
   68 D1:B656             ;
   69 D1:B656             ; ***************************************************************************************
   70 D1:B656             
   71 D1:B656             SYSPrintCRLF:
   72 D1:B656             	push 	af
   73 D1:B656             	ld 		a,13
   74 D1:B656             	call 	SYSPrintChar
   75 D1:B656             	ld 		a,10
   76 D1:B656             	call 	SYSPrintChar
   77 D1:B656             	pop 	af
   78 D1:B656             	ret
   79 D1:B656             
   80 D1:B656             ; ***************************************************************************************
   81 D1:B656             ;
   82 D1:B656             ;									Get time into HL'HL
   83 D1:B656             ;
   84 D1:B656             ; ***************************************************************************************
   85 D1:B656             
   86 D1:B656             SYSGetTimer:
   87 D1:B656              	in 		a,($00)
   88 D1:B656              	ld 		l,a
   89 D1:B656              	in 		a,($01)
   90 D1:B656              	ld 		h,a
   91 D1:B656              	exx
   92 D1:B656              	in 		a,($02)
   93 D1:B656              	ld 		l,a
   94 D1:B656              	in 		a,($03)
   95 D1:B656              	ld 		h,a
   96 D1:B656              	exx
   97 D1:B656             	ret 	
   98 D1:B656             	
   99 D1:B656             #endif
  100 D1:B656 -  -  -  -  
  101 D1:B656 -  -  -  -  ; ***************************************************************************************
  102 D1:B656 -  -  -  -  ;
  103 D1:B656 -  -  -  -  ;									Changes and Updates
  104 D1:B656 -  -  -  -  ;
  105 D1:B656 -  -  -  -  ; ***************************************************************************************
  106 D1:B656 -  -  -  -  ;
  107 D1:B656 -  -  -  -  ;		Date			Notes
  108 D1:B656 -  -  -  -  ;		==== 			=====
  109 D1:B656 -  -  -  -  ;
  110 D1:B656 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   66 D1:B656 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B656 -  -  -  -  ; ***************************************************************************************
    2 D1:B656 -  -  -  -  ; ***************************************************************************************
    3 D1:B656 -  -  -  -  ;
    4 D1:B656 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B656 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B656 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B656 -  -  -  -  ;		Reviewed :	No
    8 D1:B656 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B656 -  -  -  -  ;
   10 D1:B656 -  -  -  -  ; ***************************************************************************************
   11 D1:B656 -  -  -  -  ; ***************************************************************************************
   12 D1:B656 -  -  -  -  
   13 D1:B656 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B656             
   15 D1:B656             ; ***************************************************************************************
   16 D1:B656             ;
   17 D1:B656             ;								Initialise system stuff
   18 D1:B656             ;
   19 D1:B656             ; ***************************************************************************************
   20 D1:B656             
   21 D1:B656             SYSInitialise:
   22 D1:B656             	ret
   23 D1:B656             
   24 D1:B656             ; ***************************************************************************************
   25 D1:B656             ;
   26 D1:B656             ;								Terminate system stuff
   27 D1:B656             ;
   28 D1:B656             ; ***************************************************************************************
   29 D1:B656             
   30 D1:B656             SYSTerminate:
   31 D1:B656             	ret
   32 D1:B656             
   33 D1:B656             ; ***************************************************************************************
   34 D1:B656             ;
   35 D1:B656             ;								Print A character
   36 D1:B656             ;
   37 D1:B656             ; ***************************************************************************************
   38 D1:B656             
   39 D1:B656             SYSPrintChar:
   40 D1:B656             	ret		
   41 D1:B656             
   42 D1:B656             ; ***************************************************************************************
   43 D1:B656             ;
   44 D1:B656             ;									Print Newline
   45 D1:B656             ;
   46 D1:B656             ; ***************************************************************************************
   47 D1:B656             
   48 D1:B656             SYSPrintCRLF:
   49 D1:B656             	ret
   50 D1:B656             
   51 D1:B656             ; ***************************************************************************************
   52 D1:B656             ;
   53 D1:B656             ;									Get time into HL'HL
   54 D1:B656             ;
   55 D1:B656             ; ***************************************************************************************
   56 D1:B656             
   57 D1:B656             SYSGetTimer:
   58 D1:B656             	ret
   59 D1:B656             
   60 D1:B656             #endif
   61 D1:B656 -  -  -  -  
   62 D1:B656 -  -  -  -  ; ***************************************************************************************
   63 D1:B656 -  -  -  -  ;
   64 D1:B656 -  -  -  -  ;									Changes and Updates
   65 D1:B656 -  -  -  -  ;
   66 D1:B656 -  -  -  -  ; ***************************************************************************************
   67 D1:B656 -  -  -  -  ;
   68 D1:B656 -  -  -  -  ;		Date			Notes
   69 D1:B656 -  -  -  -  ;		==== 			=====
   70 D1:B656 -  -  -  -  ;
   71 D1:B656 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   67 D1:B656 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B656 -  -  -  -  ; ***************************************************************************************
    2 D1:B656 -  -  -  -  ; ***************************************************************************************
    3 D1:B656 -  -  -  -  ;
    4 D1:B656 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B656 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B656 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B656 -  -  -  -  ;		Reviewed :	No
    8 D1:B656 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B656 -  -  -  -  ;
   10 D1:B656 -  -  -  -  ; ***************************************************************************************
   11 D1:B656 -  -  -  -  ; ***************************************************************************************
   12 D1:B656 -  -  -  -  
   13 D1:B656 -  -  -  -  #ifdef TI84
   14 D1:B656 -  -  -  -  
   15 D1:B656 -  -  -  -  ; ***************************************************************************************
   16 D1:B656 -  -  -  -  ;
   17 D1:B656 -  -  -  -  ;								Initialise system stuff
   18 D1:B656 -  -  -  -  ;
   19 D1:B656 -  -  -  -  ; ***************************************************************************************
   20 D1:B656 -  -  -  -  
   21 D1:B656 -  -  -  -  SYSInitialise:
   22 D1:B656 F3 -  -  -  	di
   23 D1:B657 ED 73 74 B6 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B65C FD 22 78 B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B661 C9 -  -  -  	ret
   26 D1:B662 -  -  -  -  
   27 D1:B662 -  -  -  -  ; ***************************************************************************************
   28 D1:B662 -  -  -  -  ;
   29 D1:B662 -  -  -  -  ;								Terminate system stuff
   30 D1:B662 -  -  -  -  ;
   31 D1:B662 -  -  -  -  ; ***************************************************************************************
   32 D1:B662 -  -  -  -  
   33 D1:B662 -  -  -  -  SYSTerminate:
   34 D1:B662 ED 7B 74 B6 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B667 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B669 FD 2A 78 B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B66E FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B672 FB -  -  -  	ei
   39 D1:B673 C9 -  -  -  	ret 										; and exit.
   40 D1:B674 -  -  -  -  
   41 D1:B674 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B674 00 00 00 00 	.dw 	0,0
   43 D1:B678 -  -  -  -  _IYTemp84:
   44 D1:B678 00 00 00 00 	.dw 	0,0		
   45 D1:B67C -  -  -  -  
   46 D1:B67C -  -  -  -  ; ***************************************************************************************
   47 D1:B67C -  -  -  -  ;
   48 D1:B67C -  -  -  -  ;								Print A character
   49 D1:B67C -  -  -  -  ;
   50 D1:B67C -  -  -  -  ; ***************************************************************************************
   51 D1:B67C -  -  -  -  
   52 D1:B67C -  -  -  -  SYSPrintChar:
   53 D1:B67C F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B67D C5 -  -  -  	push 	bc
   55 D1:B67E D5 -  -  -  	push 	de
   56 D1:B67F E5 -  -  -  	push 	hl
   57 D1:B680 DD E5 -  -  	push 	ix
   58 D1:B682 FD E5 -  -  	push 	iy
   59 D1:B684 D9 -  -  -  	exx
   60 D1:B685 C5 -  -  -  	push 	bc
   61 D1:B686 D5 -  -  -  	push 	de
   62 D1:B687 E5 -  -  -  	push 	hl
   63 D1:B688 -  -  -  -  
   64 D1:B688 FD 2A 78 B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:B68D CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:B691 F3 -  -  -  	di
   67 D1:B692 FD 22 78 B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:B697 -  -  -  -  
   69 D1:B697 E1 -  -  -  	pop 	hl
   70 D1:B698 D1 -  -  -  	pop 	de
   71 D1:B699 C1 -  -  -  	pop 	bc
   72 D1:B69A D9 -  -  -  	exx
   73 D1:B69B FD E1 -  -  	pop 	iy
   74 D1:B69D DD E1 -  -  	pop 	ix
   75 D1:B69F E1 -  -  -  	pop 	hl
   76 D1:B6A0 D1 -  -  -  	pop 	de
   77 D1:B6A1 C1 -  -  -  	pop 	bc
   78 D1:B6A2 F1 -  -  -  	pop 	af
   79 D1:B6A3 C9 -  -  -  	ret		
   80 D1:B6A4 -  -  -  -  
   81 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   82 D1:B6A4 -  -  -  -  ;
   83 D1:B6A4 -  -  -  -  ;									Print Newline
   84 D1:B6A4 -  -  -  -  ;
   85 D1:B6A4 -  -  -  -  ; ***************************************************************************************
   86 D1:B6A4 -  -  -  -  
   87 D1:B6A4 -  -  -  -  SYSPrintCRLF:
   88 D1:B6A4 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:B6A5 C5 -  -  -  	push 	bc
   90 D1:B6A6 D5 -  -  -  	push 	de
   91 D1:B6A7 E5 -  -  -  	push 	hl
   92 D1:B6A8 DD E5 -  -  	push 	ix
   93 D1:B6AA FD E5 -  -  	push 	iy
   94 D1:B6AC D9 -  -  -  	exx
   95 D1:B6AD C5 -  -  -  	push 	bc
   96 D1:B6AE D5 -  -  -  	push 	de
   97 D1:B6AF E5 -  -  -  	push 	hl
   98 D1:B6B0 -  -  -  -  
   99 D1:B6B0 FD 2A 78 B6 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:B6B5 CD F0 07 02 	call 	_newline
  101 D1:B6B9 F3 -  -  -  	di
  102 D1:B6BA FD 22 78 B6 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:B6BF -  -  -  -  
  104 D1:B6BF E1 -  -  -  	pop 	hl
  105 D1:B6C0 D1 -  -  -  	pop 	de
  106 D1:B6C1 C1 -  -  -  	pop 	bc
  107 D1:B6C2 D9 -  -  -  	exx
  108 D1:B6C3 FD E1 -  -  	pop 	iy
  109 D1:B6C5 DD E1 -  -  	pop 	ix
  110 D1:B6C7 E1 -  -  -  	pop 	hl
  111 D1:B6C8 D1 -  -  -  	pop 	de
  112 D1:B6C9 C1 -  -  -  	pop 	bc
  113 D1:B6CA F1 -  -  -  	pop 	af
  114 D1:B6CB C9 -  -  -  	ret
  115 D1:B6CC -  -  -  -  
  116 D1:B6CC -  -  -  -  ; ***************************************************************************************
  117 D1:B6CC -  -  -  -  ;
  118 D1:B6CC -  -  -  -  ;									Get time into HL'HL
  119 D1:B6CC -  -  -  -  ;
  120 D1:B6CC -  -  -  -  ; ***************************************************************************************
  121 D1:B6CC -  -  -  -  
  122 D1:B6CC -  -  -  -  SYSGetTimer:
  123 D1:B6CC 21 34 12 00 	ld 		hl,$1234
  124 D1:B6D0 D9 -  -  -  	exx
  125 D1:B6D1 21 78 56 00 	ld 		hl,$5678
  126 D1:B6D5 D9 -  -  -  	exx
  127 D1:B6D6 C9 -  -  -  	ret
  128 D1:B6D7 -  -  -  -  
  129 D1:B6D7 -  -  -  -  #endif
  130 D1:B6D7 -  -  -  -  
  131 D1:B6D7 -  -  -  -  ; ***************************************************************************************
  132 D1:B6D7 -  -  -  -  ;
  133 D1:B6D7 -  -  -  -  ;									Changes and Updates
  134 D1:B6D7 -  -  -  -  ;
  135 D1:B6D7 -  -  -  -  ; ***************************************************************************************
  136 D1:B6D7 -  -  -  -  ;
  137 D1:B6D7 -  -  -  -  ;		Date			Notes
  138 D1:B6D7 -  -  -  -  ;		==== 			=====
  139 D1:B6D7 -  -  -  -  ;
  140 D1:B6D7 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B6D7 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:B6D7 -  -  -  -  ; ***************************************************************************************
    2 D1:B6D7 -  -  -  -  ; ***************************************************************************************
    3 D1:B6D7 -  -  -  -  ;
    4 D1:B6D7 -  -  -  -  ;		Name : 		basic.asm
    5 D1:B6D7 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B6D7 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B6D7 -  -  -  -  ;		Reviewed :	No
    8 D1:B6D7 -  -  -  -  ;		Purpose :	Main program.
    9 D1:B6D7 -  -  -  -  ;
   10 D1:B6D7 -  -  -  -  ; ***************************************************************************************
   11 D1:B6D7 -  -  -  -  ; ***************************************************************************************
   12 D1:B6D7 -  -  -  -  
   13 D1:B6D7 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 -  -  -  		.block 		$400-($ & $3FF)
   14 D1:B800 -  -  -  -  TestInstance:
   15 D1:B800 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:B800 -  -  -  -  ;
    2 D1:B800 -  -  -  -  ;	This code automatically generated.
    3 D1:B800 -  -  -  -  ;
    4 D1:B800 -  -  -  -  TestProgram:
    5 D1:B800 22 01 00 BB 
              3F 1A 41 42 
              43 44 45 46 
              47 48 49 4A 
              4B 4C 4D 4E 
              4F 50 51 52 
              53 54 55 56 
              57 58 59 5A 
              0D 80 14 02 
              00 BB 3F 0C 
              53 65 65 64 
              20 3D 20 37 
              32 33 34 35 
              0D 80 0F 03 
              00 03 0F 14 
              0C 0B 06 8F 
              8A 58 59 53 
              80 0A 04 00 
              12 1A 8F 47 
              65 5A 80 0D 
              05 00 01 00 
              01 05 20 8F 
              50 4B 78 80 
              0C 06 00 17 
              00 09 8F 8A 
              42 5C 73 80 
              0A 07 00 02 
              8F 8A 51 5E 
              43 80 0D 08 
              00 08 01 15 
              0D 05 8F 4F 
              4B 44 80 09 
              09 00 17 8F 
              46 4E 49 80 
              0B 0A 00 11 
              01 1A 8F 56 
              66 7D 80 0D 
              0B 00 09 14 
              1E 13 8F 8A 
              41 60 6B 80 
              0E 0C 00 12 
              24 10 20 03 
              1E 8F 55 62 
              7C 80 0C 0D 
              00 0C 20 02 
              06 8F 4E 64 
              6F 80 0E 0E 
              00 19 04 25 
              0B 09 8F 8A 
              4B 46 6A 80 
              0B 0F 00 03 
              1E 8F 8A 42 
              72 5E 80 09 
              10 00 05 8F 
              52 7F 47 80 
              0D 11 00 17 
              24 0A 0A 8F 
              8A 4B 4C 67 
              80 0A 12 00 
              04 8F 8A 51 
              56 46 80 0E 
              13 00 0E 0B 
              1C 17 1C 8F 
              8A 46 6D 4D 
              80 08 14 00 
              0C 8F 52 53 
              80 0D 15 00 
              11 0C 11 0F 
              01 8F 4A 5B 
              62 80 0A 16 
              00 01 8F 8A 
              56 48 7E 80 
              0B 17 00 18 
              0C 05 8F 54 
              54 44 80 09 
              18 00 0B 8F 
              46 5C 66 80 
              0A 19 00 10 
              8F 8A 51 47 
              49 80 0A 1A 
              00 16 8F 8A 
              45 6F 68 80 
              0A 1B 00 0F 
              8F 8A 50 6C 
              4B 80 0B 1C 
              00 19 21 21 
              8F 4D 54 75 
              80 09 1D 00 
              07 8F 4B 49 
              61 80 0E 1E 
              00 0A 22 1C 
              1B 17 0C 8F 
              4A 6A 6E 80 
              0B 1F 00 07 
              0E 16 8F 44 
              41 47 80 0B 
              20 00 0A 11 
              01 8F 8A 71 
              52 80 0E 21 
              00 08 09 00 
              18 1B 0D 8F 
              44 5E 67 80 
              09 22 00 11 
              8F 58 44 6C 
              80 0A 23 00 
              07 1A 8F 4F 
              6A 50 80 0C 
              24 00 05 01 
              13 8F 8A 57 
              53 7D 80 0D 
              25 00 05 0D 
              06 21 20 8F 
              41 45 4C 80 
              0A 26 00 18 
              8F 8A 44 53 
              4C 80 0D 27 
              00 02 25 0B 
              0A 8F 8A 41 
              54 51 80 0C 
              28 00 19 0A 
              24 12 8F 47 
              52 75 80 0D 
              29 00 05 1F 
              0C 24 22 8F 
              55 69 73 80 
              09 2A 00 00 
              8F 53 4A 5F 
              80 0C 2B 00 
              0C 20 02 06 
              8F 45 6C 7C 
              80 09 2C 00 
              01 8F 56 6C 
              46 80 09 2D 
              00 00 8F 43 
              71 60 80 0C 
              2E 00 02 25 
              0B 0A 8F 57 
              5B 60 80 0C 
              2F 00 05 01 
              13 8F 8A 56 
              73 6F 80 0B 
              30 00 07 1A 
              8F 8A 53 5B 
              72 80 0A 31 
              00 02 8F 8A 
              56 4B 66 80 
              0F 32 00 08 
              09 00 18 1B 
              0D 8F 8A 41 
              40 57 80 0E 
              33 00 05 1F 
              0C 24 22 8F 
              8A 47 41 62 
              80 09 34 00 
              10 8F 57 73 
              69 80 0B 35 
              00 05 01 13 
              8F 4C 69 72 
              80 0D 36 00 
              17 24 0A 0A 
              8F 8A 4A 76 
              59 80 0A 37 
              00 17 8F 8A 
              53 50 5B 80 
              09 38 00 16 
              8F 43 6D 5F 
              80 0A 39 00 
              00 8F 8A 56 
              48 7C 80 0D 
              3A 00 11 0C 
              11 0F 01 8F 
              47 77 68 80 
              0C 3B 00 0A 
              11 01 8F 8A 
              57 66 7A 80 
              09 3C 00 04 
              8F 54 41 4A 
              80 0D 3D 00 
              0E 0B 1C 17 
              1C 8F 41 69 
              75 80 09 3E 
              00 05 8F 54 
              7C 7B 80 0A 
              3F 00 07 1A 
              8F 4F 5F 73 
              80 09 40 00 
              07 1A 8F 56 
              7C 80 0A 41 
              00 00 8F 8A 
              51 6C 51 80 
              0D 42 00 05 
              0D 06 21 20 
              8F 43 6A 4D 
              80 0F 43 00 
              0A 22 1C 1B 
              17 0C 8F 8A 
              4C 65 47 80 
              0C 44 00 02 
              25 0B 0A 8F 
              51 71 71 80 
              0A 45 00 0B 
              8F 8A 4E 63 
              51 80 09 46 
              00 11 8F 45 
              56 77 80 0B 
              47 00 17 24 
              0A 0A 8F 59 
              54 80 09 48 
              00 04 8F 54 
              6C 51 80 0C 
              49 00 18 0C 
              05 8F 8A 45 
              7F 5E 80 0D 
              4A 00 09 14 
              1E 13 8F 8A 
              54 7A 4E 80 
              0C 4B 00 17 
              00 09 8F 8A 
              41 5F 70 80 
              0A 4C 00 0B 
              8F 8A 57 42 
              4C 80 0A 4D 
              00 11 8F 8A 
              4C 70 69 80 
              0A 4E 00 17 
              8F 8A 46 71 
              7C 80 0E 4F 
              00 11 0C 11 
              0F 01 8F 8A 
              51 55 58 80 
              0D 50 00 08 
              01 15 0D 05 
              8F 50 55 4B 
              80 0E 51 00 
              08 09 00 18 
              1B 0D 8F 51 
              4B 57 80 0A 
              52 00 11 8F 
              8A 4F 7B 6D 
              80 0A 53 00 
              07 8F 8A 4B 
              56 67 80 09 
              54 00 05 8F 
              8A 7C 51 80 
              0B 55 00 17 
              00 09 8F 42 
              56 45 80 09 
              56 00 07 8F 
              54 4F 5E 80 
              0D 57 00 02 
              25 0B 0A 8F 
              8A 42 4B 47 
              80 0D 58 00 
              11 0C 11 0F 
              01 8F 44 53 
              6E 80 0C 59 
              00 05 01 13 
              8F 8A 53 4B 
              78 80 0D 5A 
              00 11 0C 11 
              0F 01 8F 4F 
              41 60 80 0B 
              5B 00 12 1A 
              8F 8A 4F 6E 
              63 80 0A 5C 
              00 18 8F 8A 
              55 55 7B 80 
              0A 5D 00 16 
              8F 8A 45 5A 
              56 80 0A 5E 
              00 0B 8F 8A 
              4D 6B 63 80 
              0C 5F 00 11 
              01 1A 8F 8A 
              53 78 43 80 
              0B 60 00 11 
              01 1A 8F 47 
              6E 5B 80 0C 
              61 00 19 0A 
              24 12 8F 46 
              48 72 80 0A 
              62 00 16 8F 
              8A 51 6B 63 
              80 0D 63 00 
              05 0D 06 21 
              20 8F 49 45 
              62 80 0E 64 
              00 12 24 10 
              20 03 1E 8F 
              4B 59 7D 80 
              0B 65 00 18 
              0C 05 8F 51 
              4F 41 80 0D 
              66 00 19 0A 
              24 12 8F 8A 
              45 7F 4A 80 
              0A 67 00 01 
              8F 8A 42 53 
              71 80 0E 68 
              00 08 09 00 
              18 1B 0D 8F 
              48 5A 70 80 
              0C 69 00 09 
              14 1E 13 8F 
              41 43 5D 80 
              0A 6A 00 11 
              8F 8A 4D 6A 
              4C 80 09 6B 
              00 00 8F 52 
              60 6C 80 0A 
              6C 00 02 8F 
              8A 43 78 63 
              80 0D 6D 00 
              17 24 0A 0A 
              8F 8A 45 7A 
              79 80 0E 6E 
              00 08 01 15 
              0D 05 8F 8A 
              56 59 5B 80 
              0D 6F 00 17 
              24 0A 0A 8F 
              8A 56 61 49 
              80 0B 70 00 
              18 0C 05 8F 
              4C 70 40 80 
              0F 71 00 0A 
              22 1C 1B 17 
              0C 8F 8A 4A 
              67 55 80 0A 
              72 00 12 1A 
              8F 42 7B 69 
              80 0A 73 00 
              02 8F 8A 49 
              44 4B 80 0D 
              74 00 19 04 
              25 0B 09 8F 
              47 4A 61 80 
              0B 75 00 12 
              1A 8F 8A 4F 
              58 6B 80 09 
              76 00 16 8F 
              8A 51 5D 80 
              0B 77 00 12 
              1A 8F 8A 44 
              57 4D 80 0B 
              78 00 0A 11 
              01 8F 4D 70 
              58 80 09 79 
              00 0B 8F 50 
              63 5B 80 0D 
              7A 00 08 01 
              15 0D 05 8F 
              4F 57 79 80 
              09 7B 00 12 
              1A 8F 4B 71 
              80 0F 7C 00 
              03 0F 14 0C 
              0B 06 8F 8A 
              48 79 54 80 
              09 7D 00 01 
              8F 4A 45 45 
              80 0D 7E 00 
              0E 0B 1C 17 
              1C 8F 55 65 
              64 80 0C 7F 
              00 07 0E 16 
              8F 8A 4B 7D 
              63 80 0A 80 
              00 07 1A 8F 
              4A 68 46 80 
              09 81 00 05 
              8F 49 7F 79 
              80 0B 82 00 
              17 00 09 8F 
              42 79 53 80 
              0D 83 00 17 
              24 0A 0A 8F 
              8A 56 78 52 
              80 09 84 00 
              00 8F 47 74 
              48 80 0B 85 
              00 12 1A 8F 
              8A 48 6A 6C 
              80 0A 86 00 
              02 8F 8A 52 
              41 51 80 0B 
              87 00 0A 11 
              01 8F 53 5F 
              5E 80 0F 88 
              00 08 09 00 
              18 1B 0D 8F 
              8A 50 5E 58 
              80 0D 89 00 
              19 0A 24 12 
              8F 8A 44 65 
              5D 80 0A 8A 
              00 16 8F 8A 
              52 44 55 80 
              09 8B 00 0C 
              8F 47 7D 54 
              80 0E 8C 00 
              19 04 25 0B 
              09 8F 8A 4D 
              59 40 80 0A 
              8D 00 05 8F 
              8A 48 52 72 
              80 0A 8E 00 
              0C 8F 8A 48 
              5B 4D 80 0E 
              8F 00 0A 22 
              1C 1B 17 0C 
              8F 57 5B 60 
              80 0B 90 00 
              11 01 1A 8F 
              8A 70 4F 80 
              0C 91 00 02 
              25 0B 0A 8F 
              4A 5B 47 80 
              0C 92 00 07 
              0E 16 8F 8A 
              46 77 52 80 
              0D 93 00 08 
              01 15 0D 05 
              8F 47 5E 6B 
              80 0C 94 00 
              19 0A 24 12 
              8F 52 56 7F 
              80 09 95 00 
              11 8F 52 7D 
              57 80 09 96 
              00 10 8F 4C 
              60 72 80 0C 
              97 00 17 00 
              09 8F 8A 42 
              42 71 80 0E 
              98 00 19 04 
              25 0B 09 8F 
              8A 43 5E 4B 
              80 0B 99 00 
              17 00 09 8F 
              51 5B 56 80 
              0C 9A 00 19 
              21 21 8F 8A 
              54 74 72 80 
              0B 9B 00 11 
              01 1A 8F 4B 
              6A 73 80 0D 
              9C 00 08 01 
              15 0D 05 8F 
              53 42 5C 80 
              0C 9D 00 08 
              01 15 0D 05 
              8F 4E 4E 80 
              0E 9E 00 05 
              1F 0C 24 22 
              8F 8A 58 46 
              4E 80 0C 9F 
              00 05 01 13 
              8F 8A 49 46 
              7C 80 0B A0 
              00 0A 11 01 
              8F 8A 68 6A 
              80 0B A1 00 
              03 1E 8F 8A 
              41 61 42 80 
              09 A2 00 10 
              8F 55 46 47 
              80 0E A3 00 
              11 0C 11 0F 
              01 8F 8A 4A 
              78 7E 80 0B 
              A4 00 03 1E 
              8F 8A 55 4A 
              70 80 09 A5 
              00 17 8F 44 
              4B 69 80 0E 
              A6 00 01 00 
              01 05 20 8F 
              8A 44 42 4F 
              80 09 A7 00 
              01 8F 57 7A 
              56 80 0A A8 
              00 0C 8F 8A 
              44 75 77 80 
              0C A9 00 17 
              00 09 8F 8A 
              42 4B 42 80 
              0E AA 00 12 
              24 10 20 03 
              1E 8F 42 60 
              5A 80 0E AB 
              00 05 1F 0C 
              24 22 8F 8A 
              56 76 7C 80 
              0B AC 00 11 
              01 1A 8F 4D 
              61 4D 80 0F 
              AD 00 08 09 
              00 18 1B 0D 
              8F 8A 4A 7D 
              4E 80 09 AE 
              00 04 8F 4A 
              49 4D 80 0C 
              AF 00 19 21 
              21 8F 8A 50 
              51 61 80 09 
              B0 00 11 8F 
              51 6B 7F 80 
              0B B1 00 03 
              1E 8F 8A 54 
              67 7C 80 0C 
              B2 00 19 0A 
              24 12 8F 4E 
              42 45 80 0D 
              B3 00 12 24 
              10 20 03 1E 
              8F 7F 6C 80 
              0A B4 00 16 
              8F 8A 4A 47 
              66 80 0D B5 
              00 05 1F 0C 
              24 22 8F 48 
              6B 62 80 09 
              B6 00 16 8F 
              45 61 5B 80 
              0B B7 00 0A 
              11 01 8F 54 
              62 77 80 0F 
              B8 00 08 09 
              00 18 1B 0D 
              8F 8A 41 42 
              4F 80 09 B9 
              00 18 8F 47 
              7B 6F 80 09 
              BA 00 04 8F 
              53 5B 6C 80 
              0C BB 00 11 
              01 1A 8F 8A 
              4F 67 75 80 
              09 BC 00 17 
              8F 49 5A 52 
              80 0A BD 00 
              11 8F 8A 4B 
              53 57 80 0F 
              BE 00 03 0F 
              14 0C 0B 06 
              8F 8A 53 79 
              44 80 0E BF 
              00 08 09 00 
              18 1B 0D 8F 
              42 6E 64 80 
              0A C0 00 16 
              8F 8A 4D 7A 
              50 80 0F C1 
              00 08 09 00 
              18 1B 0D 8F 
              8A 54 78 47 
              80 0C C2 00 
              01 00 01 05 
              20 8F 4B 51 
              80 09 C3 00 
              00 8F 42 46 
              54 80 09 C4 
              00 0C 8F 42 
              7E 46 80 0A 
              C5 00 0F 8F 
              8A 4F 6A 4E 
              80 0C C6 00 
              07 0E 16 8F 
              8A 48 7E 58 
              80 0C C7 00 
              09 14 1E 13 
              8F 49 53 57 
              80 0C C8 00 
              09 14 1E 13 
              8F 4A 68 6E 
              80 0F C9 00 
              08 09 00 18 
              1B 0D 8F 8A 
              43 43 7C 80 
              09 CA 00 17 
              8F 50 45 6E 
              80 09 CB 00 
              0F 8F 46 79 
              78 80 09 CC 
              00 01 8F 57 
              68 4A 80 0A 
              CD 00 16 8F 
              8A 42 66 64 
              80 0A CE 00 
              05 8F 8A 52 
              60 64 80 0C 
              CF 00 17 00 
              09 8F 8A 4F 
              50 76 80 0B 
              D0 00 07 0E 
              16 8F 4D 4A 
              47 80 0E D1 
              00 08 09 00 
              18 1B 0D 8F 
              42 66 62 80 
              09 D2 00 0F 
              8F 43 51 7F 
              80 0E D3 00 
              0E 0B 1C 17 
              1C 8F 8A 56 
              47 78 80 09 
              D4 00 18 8F 
              45 68 4E 80 
              09 D5 00 05 
              8F 46 7B 65 
              80 0D D6 00 
              0C 20 02 06 
              8F 8A 4F 42 
              5A 80 0C D7 
              00 17 00 09 
              8F 8A 46 78 
              4E 80 0C D8 
              00 18 0C 05 
              8F 8A 42 73 
              5E 80 09 D9 
              00 04 8F 8A 
              60 68 80 0A 
              DA 00 05 8F 
              8A 54 56 4D 
              80 0D DB 00 
              08 01 15 0D 
              05 8F 55 59 
              5E 80 0A DC 
              00 0C 8F 8A 
              4F 6C 4D 80 
              0E DD 00 08 
              09 00 18 1B 
              0D 8F 57 64 
              4A 80 0B DE 
              00 19 21 21 
              8F 8A 66 4B 
              80 09 DF 00 
              01 8F 53 59 
              72 80 0C E0 
              00 17 24 0A 
              0A 8F 50 52 
              5C 80 0A E1 
              00 0F 8F 8A 
              55 66 69 80 
              09 E2 00 04 
              8F 56 5D 54 
              80 0D E3 00 
              08 01 15 0D 
              05 8F 4E 74 
              62 80 0F E4 
              00 08 09 00 
              18 1B 0D 8F 
              8A 4E 52 7A 
              80 0B E5 00 
              07 0E 16 8F 
              53 4A 4A 80 
              0D E6 00 0E 
              0B 1C 17 1C 
              8F 8A 4B 46 
              80 0A E7 00 
              18 8F 8A 57 
              4F 60 80 0F 
              E8 00 08 09 
              00 18 1B 0D 
              8F 8A 42 76 
              74 80 0C E9 
              00 18 0C 05 
              8F 8A 4C 67 
              7C 80 0E EA 
              00 03 0F 14 
              0C 0B 06 8F 
              56 6F 6B 80 
              09 EB 00 07 
              8F 54 6C 5A 
              80 0A EC 00 
              04 8F 8A 52 
              44 68 80 09 
              ED 00 04 8F 
              58 59 67 80 
              0D EE 00 0C 
              20 02 06 8F 
              8A 54 4C 4D 
              80 0E EF 00 
              05 0D 06 21 
              20 8F 8A 46 
              6D 50 80 0A 
              F0 00 16 8F 
              8A 52 5E 5A 
              80 0A F1 00 
              18 8F 8A 4D 
              44 44 80 09 
              F2 00 07 8F 
              43 5F 4E 80 
              0F F3 00 C7 
              03 0F 14 0C 
              0B 06 8F 56 
              6F 6B 80 0C 
              F4 00 C7 12 
              1A 8F 8A 48 
              6A 6C 80 0D 
              F5 00 C7 01 
              00 01 05 20 
              8F 4B 51 80 
              0D F6 00 C7 
              17 00 09 8F 
              8A 46 78 4E 
              80 0B F7 00 
              C7 02 8F 8A 
              52 41 51 80 
              0E F8 00 C7 
              08 01 15 0D 
              05 8F 4E 74 
              62 80 0A F9 
              00 C7 17 8F 
              50 45 6E 80 
              0D FA 00 C7 
              11 01 1A 8F 
              8A 4F 67 75 
              80 0D FB 00 
              C7 09 14 1E 
              13 8F 4A 68 
              6E 80 0E FC 
              00 C7 12 24 
              10 20 03 1E 
              8F 7F 6C 80 
              0E FD 00 C7 
              0C 20 02 06 
              8F 8A 54 4C 
              4D 80 0F FE 
              00 C7 19 04 
              25 0B 09 8F 
              8A 43 5E 4B 
              80 0C FF 00 
              C7 03 1E 8F 
              8A 54 67 7C 
              80 0B 00 01 
              C7 05 8F 8A 
              54 56 4D 80 
              0D 01 01 C7 
              17 24 0A 0A 
              8F 50 52 5C 
              80 0A 02 01 
              C7 04 8F 58 
              59 67 80 0E 
              03 01 C7 0E 
              0B 1C 17 1C 
              8F 8A 4B 46 
              80 0B 04 01 
              C7 0C 8F 8A 
              4F 6C 4D 80 
              0F 05 01 C7 
              11 0C 11 0F 
              01 8F 8A 4A 
              78 7E 80 0A 
              06 01 C7 01 
              8F 53 59 72 
              80 0D 07 01 
              C7 18 0C 05 
              8F 8A 4C 67 
              7C 80 0A 08 
              01 C7 0B 8F 
              50 63 5B 80 
              0A 09 01 C7 
              10 8F 55 46 
              47 80 0B 0A 
              01 C7 16 8F 
              8A 52 5E 5A 
              80 0B 0B 01 
              C7 0F 8F 8A 
              55 66 69 80 
              0C 0C 01 C7 
              19 21 21 8F 
              8A 66 4B 80 
              0A 0D 01 C7 
              07 8F 43 5F 
              4E 80 0F 0E 
              01 C7 0A 22 
              1C 1B 17 0C 
              8F 57 5B 60 
              80 0C 0F 01 
              C7 07 0E 16 
              8F 53 4A 4A 
              80 0C 10 01 
              C7 0A 11 01 
              8F 54 62 77 
              80 10 11 01 
              C7 08 09 00 
              18 1B 0D 8F 
              8A 42 76 74 
              80 0B 12 01 
              C7 11 8F 8A 
              4B 53 57 80 
              0B 13 01 C7 
              07 1A 8F 4A 
              68 46 80 0D 
              14 01 C7 05 
              01 13 8F 8A 
              49 46 7C 80 
              0F 15 01 C7 
              05 0D 06 21 
              20 8F 8A 46 
              6D 50 80 0B 
              16 01 C7 18 
              8F 8A 4D 44 
              44 80 0D 17 
              01 C7 02 25 
              0B 0A 8F 4A 
              5B 47 80 0D 
              18 01 C7 19 
              0A 24 12 8F 
              4E 42 45 80 
              0E 19 01 C7 
              05 1F 0C 24 
              22 8F 48 6B 
              62 80 0A 1A 
              01 C7 00 8F 
              42 46 54 80 
              15 1B 01 BE 
              3F 0D 4F 6B 
              20 53 65 65 
              64 20 37 32 
              33 34 35 0D 
              80 00 -  -  	.db	$22,$01,$00,$bb,$3f,$1a,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$0d,$80,$14,$02,$00,$bb,$3f,$0c,$53,$65,$65,$64,$20,$3d,$20,$37,$32,$33,$34,$35,$0d,$80,$0f,$03,$00,$03,$0f,$14,$0c,$0b,$06,$8f,$8a,$58,$59,$53,$80,$0a,$04,$00,$12,$1a,$8f,$47,$65,$5a,$80,$0d,$05,$00,$01,$00,$01,$05,$20,$8f,$50,$4b,$78,$80,$0c,$06,$00,$17,$00,$09,$8f,$8a,$42,$5c,$73,$80,$0a,$07,$00,$02,$8f,$8a,$51,$5e,$43,$80,$0d,$08,$00,$08,$01,$15,$0d,$05,$8f,$4f,$4b,$44,$80,$09,$09,$00,$17,$8f,$46,$4e,$49,$80,$0b,$0a,$00,$11,$01,$1a,$8f,$56,$66,$7d,$80,$0d,$0b,$00,$09,$14,$1e,$13,$8f,$8a,$41,$60,$6b,$80,$0e,$0c,$00,$12,$24,$10,$20,$03,$1e,$8f,$55,$62,$7c,$80,$0c,$0d,$00,$0c,$20,$02,$06,$8f,$4e,$64,$6f,$80,$0e,$0e,$00,$19,$04,$25,$0b,$09,$8f,$8a,$4b,$46,$6a,$80,$0b,$0f,$00,$03,$1e,$8f,$8a,$42,$72,$5e,$80,$09,$10,$00,$05,$8f,$52,$7f,$47,$80,$0d,$11,$00,$17,$24,$0a,$0a,$8f,$8a,$4b,$4c,$67,$80,$0a,$12,$00,$04,$8f,$8a,$51,$56,$46,$80,$0e,$13,$00,$0e,$0b,$1c,$17,$1c,$8f,$8a,$46,$6d,$4d,$80,$08,$14,$00,$0c,$8f,$52,$53,$80,$0d,$15,$00,$11,$0c,$11,$0f,$01,$8f,$4a,$5b,$62,$80,$0a,$16,$00,$01,$8f,$8a,$56,$48,$7e,$80,$0b,$17,$00,$18,$0c,$05,$8f,$54,$54,$44,$80,$09,$18,$00,$0b,$8f,$46,$5c,$66,$80,$0a,$19,$00,$10,$8f,$8a,$51,$47,$49,$80,$0a,$1a,$00,$16,$8f,$8a,$45,$6f,$68,$80,$0a,$1b,$00,$0f,$8f,$8a,$50,$6c,$4b,$80,$0b,$1c,$00,$19,$21,$21,$8f,$4d,$54,$75,$80,$09,$1d,$00,$07,$8f,$4b,$49,$61,$80,$0e,$1e,$00,$0a,$22,$1c,$1b,$17,$0c,$8f,$4a,$6a,$6e,$80,$0b,$1f,$00,$07,$0e,$16,$8f,$44,$41,$47,$80,$0b,$20,$00,$0a,$11,$01,$8f,$8a,$71,$52,$80,$0e,$21,$00,$08,$09,$00,$18,$1b,$0d,$8f,$44,$5e,$67,$80,$09,$22,$00,$11,$8f,$58,$44,$6c,$80,$0a,$23,$00,$07,$1a,$8f,$4f,$6a,$50,$80,$0c,$24,$00,$05,$01,$13,$8f,$8a,$57,$53,$7d,$80,$0d,$25,$00,$05,$0d,$06,$21,$20,$8f,$41,$45,$4c,$80,$0a,$26,$00,$18,$8f,$8a,$44,$53,$4c,$80,$0d,$27,$00,$02,$25,$0b,$0a,$8f,$8a,$41,$54,$51,$80,$0c,$28,$00,$19,$0a,$24,$12,$8f,$47,$52,$75,$80,$0d,$29,$00,$05,$1f,$0c,$24,$22,$8f,$55,$69,$73,$80,$09,$2a,$00,$00,$8f,$53,$4a,$5f,$80,$0c,$2b,$00,$0c,$20,$02,$06,$8f,$45,$6c,$7c,$80,$09,$2c,$00,$01,$8f,$56,$6c,$46,$80,$09,$2d,$00,$00,$8f,$43,$71,$60,$80,$0c,$2e,$00,$02,$25,$0b,$0a,$8f,$57,$5b,$60,$80,$0c,$2f,$00,$05,$01,$13,$8f,$8a,$56,$73,$6f,$80,$0b,$30,$00,$07,$1a,$8f,$8a,$53,$5b,$72,$80,$0a,$31,$00,$02,$8f,$8a,$56,$4b,$66,$80,$0f,$32,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$41,$40,$57,$80,$0e,$33,$00,$05,$1f,$0c,$24,$22,$8f,$8a,$47,$41,$62,$80,$09,$34,$00,$10,$8f,$57,$73,$69,$80,$0b,$35,$00,$05,$01,$13,$8f,$4c,$69,$72,$80,$0d,$36,$00,$17,$24,$0a,$0a,$8f,$8a,$4a,$76,$59,$80,$0a,$37,$00,$17,$8f,$8a,$53,$50,$5b,$80,$09,$38,$00,$16,$8f,$43,$6d,$5f,$80,$0a,$39,$00,$00,$8f,$8a,$56,$48,$7c,$80,$0d,$3a,$00,$11,$0c,$11,$0f,$01,$8f,$47,$77,$68,$80,$0c,$3b,$00,$0a,$11,$01,$8f,$8a,$57,$66,$7a,$80,$09,$3c,$00,$04,$8f,$54,$41,$4a,$80,$0d,$3d,$00,$0e,$0b,$1c,$17,$1c,$8f,$41,$69,$75,$80,$09,$3e,$00,$05,$8f,$54,$7c,$7b,$80,$0a,$3f,$00,$07,$1a,$8f,$4f,$5f,$73,$80,$09,$40,$00,$07,$1a,$8f,$56,$7c,$80,$0a,$41,$00,$00,$8f,$8a,$51,$6c,$51,$80,$0d,$42,$00,$05,$0d,$06,$21,$20,$8f,$43,$6a,$4d,$80,$0f,$43,$00,$0a,$22,$1c,$1b,$17,$0c,$8f,$8a,$4c,$65,$47,$80,$0c,$44,$00,$02,$25,$0b,$0a,$8f,$51,$71,$71,$80,$0a,$45,$00,$0b,$8f,$8a,$4e,$63,$51,$80,$09,$46,$00,$11,$8f,$45,$56,$77,$80,$0b,$47,$00,$17,$24,$0a,$0a,$8f,$59,$54,$80,$09,$48,$00,$04,$8f,$54,$6c,$51,$80,$0c,$49,$00,$18,$0c,$05,$8f,$8a,$45,$7f,$5e,$80,$0d,$4a,$00,$09,$14,$1e,$13,$8f,$8a,$54,$7a,$4e,$80,$0c,$4b,$00,$17,$00,$09,$8f,$8a,$41,$5f,$70,$80,$0a,$4c,$00,$0b,$8f,$8a,$57,$42,$4c,$80,$0a,$4d,$00,$11,$8f,$8a,$4c,$70,$69,$80,$0a,$4e,$00,$17,$8f,$8a,$46,$71,$7c,$80,$0e,$4f,$00,$11,$0c,$11,$0f,$01,$8f,$8a,$51,$55,$58,$80,$0d,$50,$00,$08,$01,$15,$0d,$05,$8f,$50,$55,$4b,$80,$0e,$51,$00,$08,$09,$00,$18,$1b,$0d,$8f,$51,$4b,$57,$80,$0a,$52,$00,$11,$8f,$8a,$4f,$7b,$6d,$80,$0a,$53,$00,$07,$8f,$8a,$4b,$56,$67,$80,$09,$54,$00,$05,$8f,$8a,$7c,$51,$80,$0b,$55,$00,$17,$00,$09,$8f,$42,$56,$45,$80,$09,$56,$00,$07,$8f,$54,$4f,$5e,$80,$0d,$57,$00,$02,$25,$0b,$0a,$8f,$8a,$42,$4b,$47,$80,$0d,$58,$00,$11,$0c,$11,$0f,$01,$8f,$44,$53,$6e,$80,$0c,$59,$00,$05,$01,$13,$8f,$8a,$53,$4b,$78,$80,$0d,$5a,$00,$11,$0c,$11,$0f,$01,$8f,$4f,$41,$60,$80,$0b,$5b,$00,$12,$1a,$8f,$8a,$4f,$6e,$63,$80,$0a,$5c,$00,$18,$8f,$8a,$55,$55,$7b,$80,$0a,$5d,$00,$16,$8f,$8a,$45,$5a,$56,$80,$0a,$5e,$00,$0b,$8f,$8a,$4d,$6b,$63,$80,$0c,$5f,$00,$11,$01,$1a,$8f,$8a,$53,$78,$43,$80,$0b,$60,$00,$11,$01,$1a,$8f,$47,$6e,$5b,$80,$0c,$61,$00,$19,$0a,$24,$12,$8f,$46,$48,$72,$80,$0a,$62,$00,$16,$8f,$8a,$51,$6b,$63,$80,$0d,$63,$00,$05,$0d,$06,$21,$20,$8f,$49,$45,$62,$80,$0e,$64,$00,$12,$24,$10,$20,$03,$1e,$8f,$4b,$59,$7d,$80,$0b,$65,$00,$18,$0c,$05,$8f,$51,$4f,$41,$80,$0d,$66,$00,$19,$0a,$24,$12,$8f,$8a,$45,$7f,$4a,$80,$0a,$67,$00,$01,$8f,$8a,$42,$53,$71,$80,$0e,$68,$00,$08,$09,$00,$18,$1b,$0d,$8f,$48,$5a,$70,$80,$0c,$69,$00,$09,$14,$1e,$13,$8f,$41,$43,$5d,$80,$0a,$6a,$00,$11,$8f,$8a,$4d,$6a,$4c,$80,$09,$6b,$00,$00,$8f,$52,$60,$6c,$80,$0a,$6c,$00,$02,$8f,$8a,$43,$78,$63,$80,$0d,$6d,$00,$17,$24,$0a,$0a,$8f,$8a,$45,$7a,$79,$80,$0e,$6e,$00,$08,$01,$15,$0d,$05,$8f,$8a,$56,$59,$5b,$80,$0d,$6f,$00,$17,$24,$0a,$0a,$8f,$8a,$56,$61,$49,$80,$0b,$70,$00,$18,$0c,$05,$8f,$4c,$70,$40,$80,$0f,$71,$00,$0a,$22,$1c,$1b,$17,$0c,$8f,$8a,$4a,$67,$55,$80,$0a,$72,$00,$12,$1a,$8f,$42,$7b,$69,$80,$0a,$73,$00,$02,$8f,$8a,$49,$44,$4b,$80,$0d,$74,$00,$19,$04,$25,$0b,$09,$8f,$47,$4a,$61,$80,$0b,$75,$00,$12,$1a,$8f,$8a,$4f,$58,$6b,$80,$09,$76,$00,$16,$8f,$8a,$51,$5d,$80,$0b,$77,$00,$12,$1a,$8f,$8a,$44,$57,$4d,$80,$0b,$78,$00,$0a,$11,$01,$8f,$4d,$70,$58,$80,$09,$79,$00,$0b,$8f,$50,$63,$5b,$80,$0d,$7a,$00,$08,$01,$15,$0d,$05,$8f,$4f,$57,$79,$80,$09,$7b,$00,$12,$1a,$8f,$4b,$71,$80,$0f,$7c,$00,$03,$0f,$14,$0c,$0b,$06,$8f,$8a,$48,$79,$54,$80,$09,$7d,$00,$01,$8f,$4a,$45,$45,$80,$0d,$7e,$00,$0e,$0b,$1c,$17,$1c,$8f,$55,$65,$64,$80,$0c,$7f,$00,$07,$0e,$16,$8f,$8a,$4b,$7d,$63,$80,$0a,$80,$00,$07,$1a,$8f,$4a,$68,$46,$80,$09,$81,$00,$05,$8f,$49,$7f,$79,$80,$0b,$82,$00,$17,$00,$09,$8f,$42,$79,$53,$80,$0d,$83,$00,$17,$24,$0a,$0a,$8f,$8a,$56,$78,$52,$80,$09,$84,$00,$00,$8f,$47,$74,$48,$80,$0b,$85,$00,$12,$1a,$8f,$8a,$48,$6a,$6c,$80,$0a,$86,$00,$02,$8f,$8a,$52,$41,$51,$80,$0b,$87,$00,$0a,$11,$01,$8f,$53,$5f,$5e,$80,$0f,$88,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$50,$5e,$58,$80,$0d,$89,$00,$19,$0a,$24,$12,$8f,$8a,$44,$65,$5d,$80,$0a,$8a,$00,$16,$8f,$8a,$52,$44,$55,$80,$09,$8b,$00,$0c,$8f,$47,$7d,$54,$80,$0e,$8c,$00,$19,$04,$25,$0b,$09,$8f,$8a,$4d,$59,$40,$80,$0a,$8d,$00,$05,$8f,$8a,$48,$52,$72,$80,$0a,$8e,$00,$0c,$8f,$8a,$48,$5b,$4d,$80,$0e,$8f,$00,$0a,$22,$1c,$1b,$17,$0c,$8f,$57,$5b,$60,$80,$0b,$90,$00,$11,$01,$1a,$8f,$8a,$70,$4f,$80,$0c,$91,$00,$02,$25,$0b,$0a,$8f,$4a,$5b,$47,$80,$0c,$92,$00,$07,$0e,$16,$8f,$8a,$46,$77,$52,$80,$0d,$93,$00,$08,$01,$15,$0d,$05,$8f,$47,$5e,$6b,$80,$0c,$94,$00,$19,$0a,$24,$12,$8f,$52,$56,$7f,$80,$09,$95,$00,$11,$8f,$52,$7d,$57,$80,$09,$96,$00,$10,$8f,$4c,$60,$72,$80,$0c,$97,$00,$17,$00,$09,$8f,$8a,$42,$42,$71,$80,$0e,$98,$00,$19,$04,$25,$0b,$09,$8f,$8a,$43,$5e,$4b,$80,$0b,$99,$00,$17,$00,$09,$8f,$51,$5b,$56,$80,$0c,$9a,$00,$19,$21,$21,$8f,$8a,$54,$74,$72,$80,$0b,$9b,$00,$11,$01,$1a,$8f,$4b,$6a,$73,$80,$0d,$9c,$00,$08,$01,$15,$0d,$05,$8f,$53,$42,$5c,$80,$0c,$9d,$00,$08,$01,$15,$0d,$05,$8f,$4e,$4e,$80,$0e,$9e,$00,$05,$1f,$0c,$24,$22,$8f,$8a,$58,$46,$4e,$80,$0c,$9f,$00,$05,$01,$13,$8f,$8a,$49,$46,$7c,$80,$0b,$a0,$00,$0a,$11,$01,$8f,$8a,$68,$6a,$80,$0b,$a1,$00,$03,$1e,$8f,$8a,$41,$61,$42,$80,$09,$a2,$00,$10,$8f,$55,$46,$47,$80,$0e,$a3,$00,$11,$0c,$11,$0f,$01,$8f,$8a,$4a,$78,$7e,$80,$0b,$a4,$00,$03,$1e,$8f,$8a,$55,$4a,$70,$80,$09,$a5,$00,$17,$8f,$44,$4b,$69,$80,$0e,$a6,$00,$01,$00,$01,$05,$20,$8f,$8a,$44,$42,$4f,$80,$09,$a7,$00,$01,$8f,$57,$7a,$56,$80,$0a,$a8,$00,$0c,$8f,$8a,$44,$75,$77,$80,$0c,$a9,$00,$17,$00,$09,$8f,$8a,$42,$4b,$42,$80,$0e,$aa,$00,$12,$24,$10,$20,$03,$1e,$8f,$42,$60,$5a,$80,$0e,$ab,$00,$05,$1f,$0c,$24,$22,$8f,$8a,$56,$76,$7c,$80,$0b,$ac,$00,$11,$01,$1a,$8f,$4d,$61,$4d,$80,$0f,$ad,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$4a,$7d,$4e,$80,$09,$ae,$00,$04,$8f,$4a,$49,$4d,$80,$0c,$af,$00,$19,$21,$21,$8f,$8a,$50,$51,$61,$80,$09,$b0,$00,$11,$8f,$51,$6b,$7f,$80,$0b,$b1,$00,$03,$1e,$8f,$8a,$54,$67,$7c,$80,$0c,$b2,$00,$19,$0a,$24,$12,$8f,$4e,$42,$45,$80,$0d,$b3,$00,$12,$24,$10,$20,$03,$1e,$8f,$7f,$6c,$80,$0a,$b4,$00,$16,$8f,$8a,$4a,$47,$66,$80,$0d,$b5,$00,$05,$1f,$0c,$24,$22,$8f,$48,$6b,$62,$80,$09,$b6,$00,$16,$8f,$45,$61,$5b,$80,$0b,$b7,$00,$0a,$11,$01,$8f,$54,$62,$77,$80,$0f,$b8,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$41,$42,$4f,$80,$09,$b9,$00,$18,$8f,$47,$7b,$6f,$80,$09,$ba,$00,$04,$8f,$53,$5b,$6c,$80,$0c,$bb,$00,$11,$01,$1a,$8f,$8a,$4f,$67,$75,$80,$09,$bc,$00,$17,$8f,$49,$5a,$52,$80,$0a,$bd,$00,$11,$8f,$8a,$4b,$53,$57,$80,$0f,$be,$00,$03,$0f,$14,$0c,$0b,$06,$8f,$8a,$53,$79,$44,$80,$0e,$bf,$00,$08,$09,$00,$18,$1b,$0d,$8f,$42,$6e,$64,$80,$0a,$c0,$00,$16,$8f,$8a,$4d,$7a,$50,$80,$0f,$c1,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$54,$78,$47,$80,$0c,$c2,$00,$01,$00,$01,$05,$20,$8f,$4b,$51,$80,$09,$c3,$00,$00,$8f,$42,$46,$54,$80,$09,$c4,$00,$0c,$8f,$42,$7e,$46,$80,$0a,$c5,$00,$0f,$8f,$8a,$4f,$6a,$4e,$80,$0c,$c6,$00,$07,$0e,$16,$8f,$8a,$48,$7e,$58,$80,$0c,$c7,$00,$09,$14,$1e,$13,$8f,$49,$53,$57,$80,$0c,$c8,$00,$09,$14,$1e,$13,$8f,$4a,$68,$6e,$80,$0f,$c9,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$43,$43,$7c,$80,$09,$ca,$00,$17,$8f,$50,$45,$6e,$80,$09,$cb,$00,$0f,$8f,$46,$79,$78,$80,$09,$cc,$00,$01,$8f,$57,$68,$4a,$80,$0a,$cd,$00,$16,$8f,$8a,$42,$66,$64,$80,$0a,$ce,$00,$05,$8f,$8a,$52,$60,$64,$80,$0c,$cf,$00,$17,$00,$09,$8f,$8a,$4f,$50,$76,$80,$0b,$d0,$00,$07,$0e,$16,$8f,$4d,$4a,$47,$80,$0e,$d1,$00,$08,$09,$00,$18,$1b,$0d,$8f,$42,$66,$62,$80,$09,$d2,$00,$0f,$8f,$43,$51,$7f,$80,$0e,$d3,$00,$0e,$0b,$1c,$17,$1c,$8f,$8a,$56,$47,$78,$80,$09,$d4,$00,$18,$8f,$45,$68,$4e,$80,$09,$d5,$00,$05,$8f,$46,$7b,$65,$80,$0d,$d6,$00,$0c,$20,$02,$06,$8f,$8a,$4f,$42,$5a,$80,$0c,$d7,$00,$17,$00,$09,$8f,$8a,$46,$78,$4e,$80,$0c,$d8,$00,$18,$0c,$05,$8f,$8a,$42,$73,$5e,$80,$09,$d9,$00,$04,$8f,$8a,$60,$68,$80,$0a,$da,$00,$05,$8f,$8a,$54,$56,$4d,$80,$0d,$db,$00,$08,$01,$15,$0d,$05,$8f,$55,$59,$5e,$80,$0a,$dc,$00,$0c,$8f,$8a,$4f,$6c,$4d,$80,$0e,$dd,$00,$08,$09,$00,$18,$1b,$0d,$8f,$57,$64,$4a,$80,$0b,$de,$00,$19,$21,$21,$8f,$8a,$66,$4b,$80,$09,$df,$00,$01,$8f,$53,$59,$72,$80,$0c,$e0,$00,$17,$24,$0a,$0a,$8f,$50,$52,$5c,$80,$0a,$e1,$00,$0f,$8f,$8a,$55,$66,$69,$80,$09,$e2,$00,$04,$8f,$56,$5d,$54,$80,$0d,$e3,$00,$08,$01,$15,$0d,$05,$8f,$4e,$74,$62,$80,$0f,$e4,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$4e,$52,$7a,$80,$0b,$e5,$00,$07,$0e,$16,$8f,$53,$4a,$4a,$80,$0d,$e6,$00,$0e,$0b,$1c,$17,$1c,$8f,$8a,$4b,$46,$80,$0a,$e7,$00,$18,$8f,$8a,$57,$4f,$60,$80,$0f,$e8,$00,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$42,$76,$74,$80,$0c,$e9,$00,$18,$0c,$05,$8f,$8a,$4c,$67,$7c,$80,$0e,$ea,$00,$03,$0f,$14,$0c,$0b,$06,$8f,$56,$6f,$6b,$80,$09,$eb,$00,$07,$8f,$54,$6c,$5a,$80,$0a,$ec,$00,$04,$8f,$8a,$52,$44,$68,$80,$09,$ed,$00,$04,$8f,$58,$59,$67,$80,$0d,$ee,$00,$0c,$20,$02,$06,$8f,$8a,$54,$4c,$4d,$80,$0e,$ef,$00,$05,$0d,$06,$21,$20,$8f,$8a,$46,$6d,$50,$80,$0a,$f0,$00,$16,$8f,$8a,$52,$5e,$5a,$80,$0a,$f1,$00,$18,$8f,$8a,$4d,$44,$44,$80,$09,$f2,$00,$07,$8f,$43,$5f,$4e,$80,$0f,$f3,$00,$c7,$03,$0f,$14,$0c,$0b,$06,$8f,$56,$6f,$6b,$80,$0c,$f4,$00,$c7,$12,$1a,$8f,$8a,$48,$6a,$6c,$80,$0d,$f5,$00,$c7,$01,$00,$01,$05,$20,$8f,$4b,$51,$80,$0d,$f6,$00,$c7,$17,$00,$09,$8f,$8a,$46,$78,$4e,$80,$0b,$f7,$00,$c7,$02,$8f,$8a,$52,$41,$51,$80,$0e,$f8,$00,$c7,$08,$01,$15,$0d,$05,$8f,$4e,$74,$62,$80,$0a,$f9,$00,$c7,$17,$8f,$50,$45,$6e,$80,$0d,$fa,$00,$c7,$11,$01,$1a,$8f,$8a,$4f,$67,$75,$80,$0d,$fb,$00,$c7,$09,$14,$1e,$13,$8f,$4a,$68,$6e,$80,$0e,$fc,$00,$c7,$12,$24,$10,$20,$03,$1e,$8f,$7f,$6c,$80,$0e,$fd,$00,$c7,$0c,$20,$02,$06,$8f,$8a,$54,$4c,$4d,$80,$0f,$fe,$00,$c7,$19,$04,$25,$0b,$09,$8f,$8a,$43,$5e,$4b,$80,$0c,$ff,$00,$c7,$03,$1e,$8f,$8a,$54,$67,$7c,$80,$0b,$00,$01,$c7,$05,$8f,$8a,$54,$56,$4d,$80,$0d,$01,$01,$c7,$17,$24,$0a,$0a,$8f,$50,$52,$5c,$80,$0a,$02,$01,$c7,$04,$8f,$58,$59,$67,$80,$0e,$03,$01,$c7,$0e,$0b,$1c,$17,$1c,$8f,$8a,$4b,$46,$80,$0b,$04,$01,$c7,$0c,$8f,$8a,$4f,$6c,$4d,$80,$0f,$05,$01,$c7,$11,$0c,$11,$0f,$01,$8f,$8a,$4a,$78,$7e,$80,$0a,$06,$01,$c7,$01,$8f,$53,$59,$72,$80,$0d,$07,$01,$c7,$18,$0c,$05,$8f,$8a,$4c,$67,$7c,$80,$0a,$08,$01,$c7,$0b,$8f,$50,$63,$5b,$80,$0a,$09,$01,$c7,$10,$8f,$55,$46,$47,$80,$0b,$0a,$01,$c7,$16,$8f,$8a,$52,$5e,$5a,$80,$0b,$0b,$01,$c7,$0f,$8f,$8a,$55,$66,$69,$80,$0c,$0c,$01,$c7,$19,$21,$21,$8f,$8a,$66,$4b,$80,$0a,$0d,$01,$c7,$07,$8f,$43,$5f,$4e,$80,$0f,$0e,$01,$c7,$0a,$22,$1c,$1b,$17,$0c,$8f,$57,$5b,$60,$80,$0c,$0f,$01,$c7,$07,$0e,$16,$8f,$53,$4a,$4a,$80,$0c,$10,$01,$c7,$0a,$11,$01,$8f,$54,$62,$77,$80,$10,$11,$01,$c7,$08,$09,$00,$18,$1b,$0d,$8f,$8a,$42,$76,$74,$80,$0b,$12,$01,$c7,$11,$8f,$8a,$4b,$53,$57,$80,$0b,$13,$01,$c7,$07,$1a,$8f,$4a,$68,$46,$80,$0d,$14,$01,$c7,$05,$01,$13,$8f,$8a,$49,$46,$7c,$80,$0f,$15,$01,$c7,$05,$0d,$06,$21,$20,$8f,$8a,$46,$6d,$50,$80,$0b,$16,$01,$c7,$18,$8f,$8a,$4d,$44,$44,$80,$0d,$17,$01,$c7,$02,$25,$0b,$0a,$8f,$4a,$5b,$47,$80,$0d,$18,$01,$c7,$19,$0a,$24,$12,$8f,$4e,$42,$45,$80,$0e,$19,$01,$c7,$05,$1f,$0c,$24,$22,$8f,$48,$6b,$62,$80,$0a,$1a,$01,$c7,$00,$8f,$42,$46,$54,$80,$15,$1b,$01,$be,$3f,$0d,$4f,$6b,$20,$53,$65,$65,$64,$20,$37,$32,$33,$34,$35,$0d,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:C4DE 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:D4DE -  -  -  -  EndTestInstance:
   18 D1:D4DE -  -  -  -  		
   19 D1:D4DE -  -  -  -  ; ***************************************************************************************
   20 D1:D4DE -  -  -  -  ;
   21 D1:D4DE -  -  -  -  ;									Changes and Updates
   22 D1:D4DE -  -  -  -  ;
   23 D1:D4DE -  -  -  -  ; ***************************************************************************************
   24 D1:D4DE -  -  -  -  ;
   25 D1:D4DE -  -  -  -  ;		Date			Notes
   26 D1:D4DE -  -  -  -  ;		==== 			=====
   27 D1:D4DE -  -  -  -  ;
   28 D1:D4DE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:D4DE -  -  -  -  FinalAddress:
