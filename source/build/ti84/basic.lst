    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	Generated by makeinclude.py script
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #include "core/expression/binary/dispatch.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/dispatch.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatch.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Dispatchers
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;						 Handle dispatch to integer only
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro IntegerDispatch(iHandler)
   20 00:0000             		call 	DereferenceBoth 				; Dereference B:DE'DE and C:HL'HL
   21 00:0000             		ld 		a,b 							; Or the flags together
   22 00:0000             		or 		c
   23 00:0000             		jp 		nz,TypeMismatch 				; must both be integers
   24 00:0000             		jp 		iHandler 						; do the integer code.
   25 00:0000             #endmacro
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  ; ***************************************************************************************
   28 00:0000 -  -  -  -  ;
   29 00:0000 -  -  -  -  ;									Changes and Updates
   30 00:0000 -  -  -  -  ;
   31 00:0000 -  -  -  -  ; ***************************************************************************************
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ;		Date			Notes
   34 00:0000 -  -  -  -  ;		==== 			=====
   35 00:0000 -  -  -  -  ;
   36 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    5 00:0000 -  -  -  -  #include "core/includes/constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/constants.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		constants.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Constants
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  IDENTIFIER_END = $26 						; 00 .. 25 is an identifier
   14 00:0000 -  -  -  -  STRING_MARKER = $3F 						; marker for string.
   15 00:0000 -  -  -  -  ;
   16 00:0000 -  -  -  -  ;		Normally, type information is in C
   17 00:0000 -  -  -  -  ;				  if reference or string, then address is in (U)HL
   18 00:0000 -  -  -  -  ;				  if integer, then data (32 bit) is in HL'HL
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  CIsReference = 7 							; Bit 7 set if reference
   22 00:0000 -  -  -  -  CIsByteReference = 6 						; Bit 6 set if byte reference
   23 00:0000 -  -  -  -  CIsString = 0 								; Bit 0 set if data is string
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  XTYPE_INTEGER = 0 							; Integer, value in HL'HL
   26 00:0000 -  -  -  -  XTYPE_STRING = 1 							; String, address in UHL
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;									Changes and Updates
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  ;
   34 00:0000 -  -  -  -  ;		Date			Notes
   35 00:0000 -  -  -  -  ;		==== 			=====
   36 00:0000 -  -  -  -  ;
   37 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    6 00:0000 -  -  -  -  #include "core/includes/dispatcher.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/dispatcher.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		dispatcher.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Vector dispatcher
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;				Dispatchers - takes a vector table (2 bytes Z80,4 bytes EZ80)
   16 00:0000 -  -  -  -  ; 				reads the call address into DE/UDE. Breaks AHL.
   17 00:0000 -  -  -  -  ;
   18 00:0000 -  -  -  -  ; ***************************************************************************************
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #ifdef EZ80
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #macro 	dispatch(vtable)
   23 00:0000             		and 	$7F 						; clear bit 7.
   24 00:0000             		ld 		hl,$0000 					; put index into HL.
   25 00:0000             		ld 		l,a  						
   26 00:0000             		add 	hl,hl 						; x 2 
   27 00:0000             		add 	hl,hl
   28 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   29 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   30 00:0000             		ld 		de,(hl) 					; read target address into DE
   31 00:0000             		ld 		(JumpCode+1),de 			; and set up the jump vector
   32 00:0000             #endmacro
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #else
   35 00:0000             
   36 00:0000             #macro 	dispatch(vtable)
   37 00:0000             		and 	$7F 						; clear bit 7.
   38 00:0000             		ld 		hl,$0000 					; put index into HL.
   39 00:0000             		ld 		l,a  						
   40 00:0000             		add 	hl,hl 						; x 2 
   41 00:0000             		ld 		de,vtable 					; DE now points to the vector table
   42 00:0000             		add 	hl,de 						; HL now points to the vector entry.
   43 00:0000             		ld 		e,(hl) 						; read target address into DE
   44 00:0000             		inc 	hl
   45 00:0000             		ld 		d,(hl)
   46 00:0000             		ld 		(JumpCode+1),de
   47 00:0000             #endmacro
   48 00:0000             
   49 00:0000             #endif
   50 00:0000 -  -  -  -  
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  ;
   53 00:0000 -  -  -  -  ;									Changes and Updates
   54 00:0000 -  -  -  -  ;
   55 00:0000 -  -  -  -  ; ***************************************************************************************
   56 00:0000 -  -  -  -  ;
   57 00:0000 -  -  -  -  ;		Date			Notes
   58 00:0000 -  -  -  -  ;		==== 			=====
   59 00:0000 -  -  -  -  ;
   60 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    7 00:0000 -  -  -  -  #include "core/includes/macros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/includes/macros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		macros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;								Set Z flag if HL'HL zero
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #macro checkzero
   20 00:0000             		ld 		a,h
   21 00:0000             		or 		l
   22 00:0000             		exx
   23 00:0000             		or 		h
   24 00:0000             		or 		l
   25 00:0000             		exx
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;								Indirect load of HL to HL, DE to HL
   31 00:0000 -  -  -  -  ;
   32 00:0000 -  -  -  -  ; ***************************************************************************************
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #ifdef EZ80
   35 00:0000 -  -  -  -  #macro ld_ind_hl
   36 00:0000             	ld 		hl,(hl)
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  #else
   39 00:0000             #macro ld_ind_hl
   40 00:0000             	ld 		a,(hl)
   41 00:0000             	inc 	hl
   42 00:0000             	ld 		h,(hl)
   43 00:0000             	ld 		l,a
   44 00:0000             #endmacro
   45 00:0000             #endif
   46 00:0000 -  -  -  -  
   47 00:0000 -  -  -  -  ; ***************************************************************************************
   48 00:0000 -  -  -  -  ;
   49 00:0000 -  -  -  -  ; 				Indirect store of DE to HL  and increment HL by four.
   50 00:0000 -  -  -  -  ;
   51 00:0000 -  -  -  -  ; ***************************************************************************************
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  #ifdef EZ80
   54 00:0000 -  -  -  -  #macro st_de_hl_ind_incr
   55 00:0000             	ld 		(hl),de
   56 00:0000             	inc 	hl
   57 00:0000             	inc 	hl
   58 00:0000             	inc 	hl
   59 00:0000             	inc 	hl
   60 00:0000             #endmacro
   61 00:0000 -  -  -  -  #else
   62 00:0000             #macro st_de_hl_ind_incr
   63 00:0000             	ld 		(hl),e
   64 00:0000             	inc 	hl
   65 00:0000             	ld 		(hl),d
   66 00:0000             	inc 	hl
   67 00:0000             	inc 	hl
   68 00:0000             	inc 	hl
   69 00:0000             #endmacro
   70 00:0000             #endif
   71 00:0000 -  -  -  -  
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;									Break Aquarius or TI84/EZ80
   75 00:0000 -  -  -  -  ;
   76 00:0000 -  -  -  -  ; ***************************************************************************************
   77 00:0000 -  -  -  -  	
   78 00:0000 -  -  -  -  #ifdef EZ80
   79 00:0000 -  -  -  -  #macro debug 
   80 00:0000             	push 	af
   81 00:0000             	ld 		a,2
   82 00:0000             	ld 		($FFFFFF),a
   83 00:0000             	pop 	af
   84 00:0000             #endmacro
   85 00:0000 -  -  -  -  #else
   86 00:0000             #macro debug 
   87 00:0000             	halt
   88 00:0000             #endmacro
   89 00:0000             #endif
   90 00:0000 -  -  -  -  
   91 00:0000 -  -  -  -  ; ***************************************************************************************
   92 00:0000 -  -  -  -  ;
   93 00:0000 -  -  -  -  ;								Output address as 16/32 bit depending
   94 00:0000 -  -  -  -  ;									  (used in vector tables)
   95 00:0000 -  -  -  -  ;
   96 00:0000 -  -  -  -  ; ***************************************************************************************
   97 00:0000 -  -  -  -  
   98 00:0000 -  -  -  -  #ifdef EZ80
   99 00:0000 -  -  -  -  #macro addr(a)
  100 00:0000             	.dw 	(a) & $FFFF,(a) >> 16
  101 00:0000             #endmacro
  102 00:0000 -  -  -  -  #else
  103 00:0000             #macro addr(a)
  104 00:0000             	.dw 	(a)
  105 00:0000             #endmacro
  106 00:0000             #endif
  107 00:0000 -  -  -  -  
  108 00:0000 -  -  -  -  ; ***************************************************************************************
  109 00:0000 -  -  -  -  ;
  110 00:0000 -  -  -  -  ;									16 bit arithmetic
  111 00:0000 -  -  -  -  ;
  112 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
  113 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
  114 00:0000 -  -  -  -  ;
  115 00:0000 -  -  -  -  ; ***************************************************************************************
  116 00:0000 -  -  -  -  
  117 00:0000 -  -  -  -  #ifdef EZ80
  118 00:0000 -  -  -  -  
  119 00:0000 -  -  -  -  #macro add_hlde_16
  120 00:0000             	add.s 	hl,de
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  #macro adc_hlde_16
  124 00:0000             	adc.s 	hl,de
  125 00:0000             #endmacro
  126 00:0000 -  -  -  -  
  127 00:0000 -  -  -  -  #macro add_hlhl_16
  128 00:0000             	add.s 	hl,hl
  129 00:0000             #endmacro
  130 00:0000 -  -  -  -  
  131 00:0000 -  -  -  -  #macro adc_hlhl_16
  132 00:0000             	adc.s 	hl,hl
  133 00:0000             #endmacro
  134 00:0000 -  -  -  -  
  135 00:0000 -  -  -  -  #macro sbc_hlde_16
  136 00:0000             	sbc.s 	hl,de
  137 00:0000             #endmacro
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #else 									
  140 00:0000             
  141 00:0000             #macro add_hlde_16
  142 00:0000             	add 	hl,de
  143 00:0000             #endmacro
  144 00:0000             
  145 00:0000             #macro adc_hlde_16
  146 00:0000             	adc 	hl,de
  147 00:0000             #endmacro
  148 00:0000             
  149 00:0000             #macro add_hlhl_16
  150 00:0000             	add 	hl,hl
  151 00:0000             #endmacro
  152 00:0000             
  153 00:0000             #macro adc_hlhl_16
  154 00:0000             	adc 	hl,hl
  155 00:0000             #endmacro
  156 00:0000             
  157 00:0000             #macro sbc_hlde_16
  158 00:0000             	sbc 	hl,de
  159 00:0000             #endmacro
  160 00:0000             
  161 00:0000             #endif
  162 00:0000 -  -  -  -  
  163 00:0000 -  -  -  -  ; ***************************************************************************************
  164 00:0000 -  -  -  -  ;
  165 00:0000 -  -  -  -  ;									Changes and Updates
  166 00:0000 -  -  -  -  ;
  167 00:0000 -  -  -  -  ; ***************************************************************************************
  168 00:0000 -  -  -  -  ;
  169 00:0000 -  -  -  -  ;		Date			Notes
  170 00:0000 -  -  -  -  ;		==== 			=====
  171 00:0000 -  -  -  -  ;
  172 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    8 00:0000 -  -  -  -  #include "core/structures/stack.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		stack.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		6th June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Stack constants.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  
   12 00:0000 -  -  -  -  STM_GOSUB = $13					 			; Gosub : Element 1, six bytes
   13 00:0000 -  -  -  -  											; return position (5) marker (1)
   14 00:0000 -  -  -  -  
   15 00:0000 -  -  -  -  STM_REPEAT = $23				 			; Repeat : Element 2, six bytes
   16 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  STM_FOR = $39 								; For : Element 3, 18 bytes
   19 00:0000 -  -  -  -  											; loop position  (5) marker (1)
   20 00:0000 -  -  -  -  											; 6..9 address of index variable
   21 00:0000 -  -  -  -  											; 10..13 limit of index variable
   22 00:0000 -  -  -  -  											; 14..17 step of index variable
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  ; ***************************************************************************************
   25 00:0000 -  -  -  -  ;
   26 00:0000 -  -  -  -  ;									Changes and Updates
   27 00:0000 -  -  -  -  ;
   28 00:0000 -  -  -  -  ; ***************************************************************************************
   29 00:0000 -  -  -  -  ;
   30 00:0000 -  -  -  -  ;		Date			Notes
   31 00:0000 -  -  -  -  ;		==== 			=====
   32 00:0000 -  -  -  -  ;
   33 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
    9 00:0000 -  -  -  -  #include "generated/kwd_constants.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_constants.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This file is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  #define KWC_EOL_MARKER                      	$80
    5 00:0000 -  -  -  -  #define KWC_FIRST_BINARY                    	$83
    6 00:0000 -  -  -  -  #define KWC_FIRST_NORMAL                    	$a5
    7 00:0000 -  -  -  -  #define KWC_FIRST_UNARY                     	$94
    8 00:0000 -  -  -  -  #define KWC_SHIFT_1                         	$81
    9 00:0000 -  -  -  -  #define KWC_SHIFT_2                         	$82
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  #define KWD_PLING                           	$0083 ; !
   12 00:0000 -  -  -  -  #define KWD_PRECEDENCE_INDIRECT (6)
   13 00:0000 -  -  -  -  #define KWD_QMARK                           	$0084 ; ?
   14 00:0000 -  -  -  -  #define KWD_ASTERISK                        	$0085 ; *
   15 00:0000 -  -  -  -  #define KWD_SLASH                           	$0086 ; /
   16 00:0000 -  -  -  -  #define KWD_MOD                             	$0087 ; mod
   17 00:0000 -  -  -  -  #define KWD_DIV                             	$0088 ; div
   18 00:0000 -  -  -  -  #define KWD_PLUS                            	$0089 ; +
   19 00:0000 -  -  -  -  #define KWD_MINUS                           	$008a ; -
   20 00:0000 -  -  -  -  #define KWD_GREATEREQUALS                   	$008b ; >=
   21 00:0000 -  -  -  -  #define KWD_LESSEQUALS                      	$008c ; <=
   22 00:0000 -  -  -  -  #define KWD_GREATER                         	$008d ; >
   23 00:0000 -  -  -  -  #define KWD_LESS                            	$008e ; <
   24 00:0000 -  -  -  -  #define KWD_EQUALS                          	$008f ; =
   25 00:0000 -  -  -  -  #define KWD_LESSGREATER                     	$0090 ; <>
   26 00:0000 -  -  -  -  #define KWD_AND                             	$0091 ; and
   27 00:0000 -  -  -  -  #define KWD_OR                              	$0092 ; or
   28 00:0000 -  -  -  -  #define KWD_EOR                             	$0093 ; eor
   29 00:0000 -  -  -  -  #define KWD_AMPERSAND                       	$0094 ; &
   30 00:0000 -  -  -  -  #define KWD_LPAREN                          	$0095 ; (
   31 00:0000 -  -  -  -  #define KWD_DOLLAR                          	$0096 ; $
   32 00:0000 -  -  -  -  #define KWD_RND                             	$0097 ; rnd
   33 00:0000 -  -  -  -  #define KWD_LEN                             	$0098 ; len
   34 00:0000 -  -  -  -  #define KWD_ABS                             	$0099 ; abs
   35 00:0000 -  -  -  -  #define KWD_SGN                             	$009a ; sgn
   36 00:0000 -  -  -  -  #define KWD_STR                             	$009b ; str
   37 00:0000 -  -  -  -  #define KWD_CHR                             	$009c ; chr
   38 00:0000 -  -  -  -  #define KWD_ASC                             	$009d ; asc
   39 00:0000 -  -  -  -  #define KWD_NOT                             	$009e ; not
   40 00:0000 -  -  -  -  #define KWD_PAGE                            	$009f ; page
   41 00:0000 -  -  -  -  #define KWD_TIME                            	$00a0 ; time
   42 00:0000 -  -  -  -  #define KWD_TOP                             	$00a1 ; top
   43 00:0000 -  -  -  -  #define KWD_VAL                             	$00a2 ; val
   44 00:0000 -  -  -  -  #define KWD_TRUE                            	$00a3 ; true
   45 00:0000 -  -  -  -  #define KWD_FALSE                           	$00a4 ; false
   46 00:0000 -  -  -  -  #define KWD_RPAREN                          	$00a5 ; )
   47 00:0000 -  -  -  -  #define KWD_COMMA                           	$00a6 ; ,
   48 00:0000 -  -  -  -  #define KWD_COLON                           	$00a7 ; :
   49 00:0000 -  -  -  -  #define KWD_SEMICOLON                       	$00a8 ; ;
   50 00:0000 -  -  -  -  #define KWD_SQUOTE                          	$00a9 ; '
   51 00:0000 -  -  -  -  #define KWD_LSQPAREN                        	$00aa ; [
   52 00:0000 -  -  -  -  #define KWD_RSQPAREN                        	$00ab ; ]
   53 00:0000 -  -  -  -  #define KWD_TILDE                           	$00ac ; ~
   54 00:0000 -  -  -  -  #define KWD_REPEAT                          	$00ad ; repeat
   55 00:0000 -  -  -  -  #define KWD_UNTIL                           	$00ae ; until
   56 00:0000 -  -  -  -  #define KWD_IF                              	$00af ; if
   57 00:0000 -  -  -  -  #define KWD_THEN                            	$00b0 ; then
   58 00:0000 -  -  -  -  #define KWD_ELSE                            	$00b1 ; else
   59 00:0000 -  -  -  -  #define KWD_FOR                             	$00b2 ; for
   60 00:0000 -  -  -  -  #define KWD_TO                              	$00b3 ; to
   61 00:0000 -  -  -  -  #define KWD_STEP                            	$00b4 ; step
   62 00:0000 -  -  -  -  #define KWD_NEXT                            	$00b5 ; next
   63 00:0000 -  -  -  -  #define KWD_DEF                             	$00b6 ; def
   64 00:0000 -  -  -  -  #define KWD_PROC                            	$00b7 ; proc
   65 00:0000 -  -  -  -  #define KWD_ENDPROC                         	$00b8 ; endproc
   66 00:0000 -  -  -  -  #define KWD_GOSUB                           	$00b9 ; gosub
   67 00:0000 -  -  -  -  #define KWD_RETURN                          	$00ba ; return
   68 00:0000 -  -  -  -  #define KWD_GOTO                            	$00bb ; goto
   69 00:0000 -  -  -  -  #define KWD_LOCAL                           	$00bc ; local
   70 00:0000 -  -  -  -  #define KWD_DIM                             	$00bd ; dim
   71 00:0000 -  -  -  -  #define KWD_REM                             	$00be ; rem
   72 00:0000 -  -  -  -  #define KWD_LET                             	$00bf ; let
   73 00:0000 -  -  -  -  #define KWD_VDU                             	$00c0 ; vdu
   74 00:0000 -  -  -  -  #define KWD_PRINT                           	$00c1 ; print
   75 00:0000 -  -  -  -  #define KWD_LOAD                            	$00c2 ; load
   76 00:0000 -  -  -  -  #define KWD_SAVE                            	$00c3 ; save
   77 00:0000 -  -  -  -  #define KWD_LIST                            	$00c4 ; list
   78 00:0000 -  -  -  -  #define KWD_NEW                             	$00c5 ; new
   79 00:0000 -  -  -  -  #define KWD_RUN                             	$00c6 ; run
   80 00:0000 -  -  -  -  #define KWD_READ                            	$00c7 ; read
   81 00:0000 -  -  -  -  #define KWD_DATA                            	$00c8 ; data
   82 00:0000 -  -  -  -  #define KWD_RESTORE                         	$00c9 ; restore
   83 00:0000 -  -  -  -  #define KWD_ASSERT                          	$00ca ; assert
   84 00:0000 -  -  -  -  #define KWD_CLEAR                           	$00cb ; clear
   85 00:0000 -  -  -  -  #define KWD_END                             	$00cc ; end
   86 00:0000 -  -  -  -  #define KWD_STOP                            	$00cd ; stop
Listing for file "_build.asm"
   10 00:0000 -  -  -  -  #include "generated/messageid.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messageid.inc"
    1 00:0000 -  -  -  -  ;
    2 00:0000 -  -  -  -  ;	This is automatically generated.
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ERRID_WARMSTART = 0
    5 00:0000 -  -  -  -  
    6 00:0000 -  -  -  -  #macro ERR_WARMSTART
    7 00:0000             	ld a,ERRID_WARMSTART
    8 00:0000             	jp ErrorHandler
    9 00:0000             #endmacro
   10 00:0000 -  -  -  -  
   11 00:0000 -  -  -  -  ERRID_ASSERT = 1
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  #macro ERR_ASSERT
   14 00:0000             	ld a,ERRID_ASSERT
   15 00:0000             	jp ErrorHandler
   16 00:0000             #endmacro
   17 00:0000 -  -  -  -  
   18 00:0000 -  -  -  -  ERRID_BADTYPE = 2
   19 00:0000 -  -  -  -  
   20 00:0000 -  -  -  -  #macro ERR_BADTYPE
   21 00:0000             	ld a,ERRID_BADTYPE
   22 00:0000             	jp ErrorHandler
   23 00:0000             #endmacro
   24 00:0000 -  -  -  -  
   25 00:0000 -  -  -  -  ERRID_BADVALUE = 3
   26 00:0000 -  -  -  -  
   27 00:0000 -  -  -  -  #macro ERR_BADVALUE
   28 00:0000             	ld a,ERRID_BADVALUE
   29 00:0000             	jp ErrorHandler
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  ERRID_DIM = 4
   33 00:0000 -  -  -  -  
   34 00:0000 -  -  -  -  #macro ERR_DIM
   35 00:0000             	ld a,ERRID_DIM
   36 00:0000             	jp ErrorHandler
   37 00:0000             #endmacro
   38 00:0000 -  -  -  -  
   39 00:0000 -  -  -  -  ERRID_DISABLED = 5
   40 00:0000 -  -  -  -  
   41 00:0000 -  -  -  -  #macro ERR_DISABLED
   42 00:0000             	ld a,ERRID_DISABLED
   43 00:0000             	jp ErrorHandler
   44 00:0000             #endmacro
   45 00:0000 -  -  -  -  
   46 00:0000 -  -  -  -  ERRID_DIVZERO = 6
   47 00:0000 -  -  -  -  
   48 00:0000 -  -  -  -  #macro ERR_DIVZERO
   49 00:0000             	ld a,ERRID_DIVZERO
   50 00:0000             	jp ErrorHandler
   51 00:0000             #endmacro
   52 00:0000 -  -  -  -  
   53 00:0000 -  -  -  -  ERRID_GOSUB = 7
   54 00:0000 -  -  -  -  
   55 00:0000 -  -  -  -  #macro ERR_GOSUB
   56 00:0000             	ld a,ERRID_GOSUB
   57 00:0000             	jp ErrorHandler
   58 00:0000             #endmacro
   59 00:0000 -  -  -  -  
   60 00:0000 -  -  -  -  ERRID_INDEX = 8
   61 00:0000 -  -  -  -  
   62 00:0000 -  -  -  -  #macro ERR_INDEX
   63 00:0000             	ld a,ERRID_INDEX
   64 00:0000             	jp ErrorHandler
   65 00:0000             #endmacro
   66 00:0000 -  -  -  -  
   67 00:0000 -  -  -  -  ERRID_LINENO = 9
   68 00:0000 -  -  -  -  
   69 00:0000 -  -  -  -  #macro ERR_LINENO
   70 00:0000             	ld a,ERRID_LINENO
   71 00:0000             	jp ErrorHandler
   72 00:0000             #endmacro
   73 00:0000 -  -  -  -  
   74 00:0000 -  -  -  -  ERRID_MEMORY = 10
   75 00:0000 -  -  -  -  
   76 00:0000 -  -  -  -  #macro ERR_MEMORY
   77 00:0000             	ld a,ERRID_MEMORY
   78 00:0000             	jp ErrorHandler
   79 00:0000             #endmacro
   80 00:0000 -  -  -  -  
   81 00:0000 -  -  -  -  ERRID_NEXT = 11
   82 00:0000 -  -  -  -  
   83 00:0000 -  -  -  -  #macro ERR_NEXT
   84 00:0000             	ld a,ERRID_NEXT
   85 00:0000             	jp ErrorHandler
   86 00:0000             #endmacro
   87 00:0000 -  -  -  -  
   88 00:0000 -  -  -  -  ERRID_NOCOMMA = 12
   89 00:0000 -  -  -  -  
   90 00:0000 -  -  -  -  #macro ERR_NOCOMMA
   91 00:0000             	ld a,ERRID_NOCOMMA
   92 00:0000             	jp ErrorHandler
   93 00:0000             #endmacro
   94 00:0000 -  -  -  -  
   95 00:0000 -  -  -  -  ERRID_NODOLLAR = 13
   96 00:0000 -  -  -  -  
   97 00:0000 -  -  -  -  #macro ERR_NODOLLAR
   98 00:0000             	ld a,ERRID_NODOLLAR
   99 00:0000             	jp ErrorHandler
  100 00:0000             #endmacro
  101 00:0000 -  -  -  -  
  102 00:0000 -  -  -  -  ERRID_NOLBRACKET = 14
  103 00:0000 -  -  -  -  
  104 00:0000 -  -  -  -  #macro ERR_NOLBRACKET
  105 00:0000             	ld a,ERRID_NOLBRACKET
  106 00:0000             	jp ErrorHandler
  107 00:0000             #endmacro
  108 00:0000 -  -  -  -  
  109 00:0000 -  -  -  -  ERRID_NORBRACKET = 15
  110 00:0000 -  -  -  -  
  111 00:0000 -  -  -  -  #macro ERR_NORBRACKET
  112 00:0000             	ld a,ERRID_NORBRACKET
  113 00:0000             	jp ErrorHandler
  114 00:0000             #endmacro
  115 00:0000 -  -  -  -  
  116 00:0000 -  -  -  -  ERRID_NOTREF = 16
  117 00:0000 -  -  -  -  
  118 00:0000 -  -  -  -  #macro ERR_NOTREF
  119 00:0000             	ld a,ERRID_NOTREF
  120 00:0000             	jp ErrorHandler
  121 00:0000             #endmacro
  122 00:0000 -  -  -  -  
  123 00:0000 -  -  -  -  ERRID_REPEAT = 17
  124 00:0000 -  -  -  -  
  125 00:0000 -  -  -  -  #macro ERR_REPEAT
  126 00:0000             	ld a,ERRID_REPEAT
  127 00:0000             	jp ErrorHandler
  128 00:0000             #endmacro
  129 00:0000 -  -  -  -  
  130 00:0000 -  -  -  -  ERRID_STACK = 18
  131 00:0000 -  -  -  -  
  132 00:0000 -  -  -  -  #macro ERR_STACK
  133 00:0000             	ld a,ERRID_STACK
  134 00:0000             	jp ErrorHandler
  135 00:0000             #endmacro
  136 00:0000 -  -  -  -  
  137 00:0000 -  -  -  -  ERRID_STOP = 19
  138 00:0000 -  -  -  -  
  139 00:0000 -  -  -  -  #macro ERR_STOP
  140 00:0000             	ld a,ERRID_STOP
  141 00:0000             	jp ErrorHandler
  142 00:0000             #endmacro
  143 00:0000 -  -  -  -  
  144 00:0000 -  -  -  -  ERRID_SYNTAX = 20
  145 00:0000 -  -  -  -  
  146 00:0000 -  -  -  -  #macro ERR_SYNTAX
  147 00:0000             	ld a,ERRID_SYNTAX
  148 00:0000             	jp ErrorHandler
  149 00:0000             #endmacro
  150 00:0000 -  -  -  -  
  151 00:0000 -  -  -  -  ERRID_TODO = 21
  152 00:0000 -  -  -  -  
  153 00:0000 -  -  -  -  #macro ERR_TODO
  154 00:0000             	ld a,ERRID_TODO
  155 00:0000             	jp ErrorHandler
  156 00:0000             #endmacro
  157 00:0000 -  -  -  -  
  158 00:0000 -  -  -  -  ERRID_UNKNOWNVAR = 22
  159 00:0000 -  -  -  -  
  160 00:0000 -  -  -  -  #macro ERR_UNKNOWNVAR
  161 00:0000             	ld a,ERRID_UNKNOWNVAR
  162 00:0000             	jp ErrorHandler
  163 00:0000             #endmacro
  164 00:0000 -  -  -  -  
Listing for file "_build.asm"
   11 00:0000 -  -  -  -  #include "int32/zmacros.inc"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/zmacros.inc"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		zmacros.inc
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Standard macros. All are prefixed with zm_
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ;									16 bit arithmetic
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ;						HL/DE and HL/BC operations that are always 16 bit.
   18 00:0000 -  -  -  -  ;								used to shift the HLHL values etc.
   19 00:0000 -  -  -  -  ;
   20 00:0000 -  -  -  -  ; ***************************************************************************************
   21 00:0000 -  -  -  -  
   22 00:0000 -  -  -  -  #ifdef EZ80
   23 00:0000 -  -  -  -  
   24 00:0000 -  -  -  -  #macro zm_add_hlde_16
   25 00:0000             	add.s 	hl,de
   26 00:0000             #endmacro
   27 00:0000 -  -  -  -  
   28 00:0000 -  -  -  -  #macro zm_adc_hlde_16
   29 00:0000             	adc.s 	hl,de
   30 00:0000             #endmacro
   31 00:0000 -  -  -  -  
   32 00:0000 -  -  -  -  #macro zm_add_hlhl_16
   33 00:0000             	add.s 	hl,hl
   34 00:0000             #endmacro
   35 00:0000 -  -  -  -  
   36 00:0000 -  -  -  -  #macro zm_adc_hlhl_16
   37 00:0000             	adc.s 	hl,hl
   38 00:0000             #endmacro
   39 00:0000 -  -  -  -  
   40 00:0000 -  -  -  -  #macro zm_sbc_hlde_16
   41 00:0000             	sbc.s 	hl,de
   42 00:0000             #endmacro
   43 00:0000 -  -  -  -  
   44 00:0000 -  -  -  -  #else 									
   45 00:0000             
   46 00:0000             #macro zm_add_hlde_16
   47 00:0000             	add 	hl,de
   48 00:0000             #endmacro
   49 00:0000             
   50 00:0000             #macro zm_adc_hlde_16
   51 00:0000             	adc 	hl,de
   52 00:0000             #endmacro
   53 00:0000             
   54 00:0000             #macro zm_add_hlhl_16
   55 00:0000             	add 	hl,hl
   56 00:0000             #endmacro
   57 00:0000             
   58 00:0000             #macro zm_adc_hlhl_16
   59 00:0000             	adc 	hl,hl
   60 00:0000             #endmacro
   61 00:0000             
   62 00:0000             #macro zm_sbc_hlde_16
   63 00:0000             	sbc 	hl,de
   64 00:0000             #endmacro
   65 00:0000             
   66 00:0000             #endif
   67 00:0000 -  -  -  -  
   68 00:0000 -  -  -  -  ; ***************************************************************************************
   69 00:0000 -  -  -  -  ;
   70 00:0000 -  -  -  -  ;									Changes and Updates
   71 00:0000 -  -  -  -  ;
   72 00:0000 -  -  -  -  ; ***************************************************************************************
   73 00:0000 -  -  -  -  ;
   74 00:0000 -  -  -  -  ;		Date			Notes
   75 00:0000 -  -  -  -  ;		==== 			=====
   76 00:0000 -  -  -  -  ;
   77 00:0000 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   12 00:0000 -  -  -  -  #include "core/00main.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
    1 00:0000 -  -  -  -  ; ***************************************************************************************
    2 00:0000 -  -  -  -  ; ***************************************************************************************
    3 00:0000 -  -  -  -  ;
    4 00:0000 -  -  -  -  ;		Name : 		00main.asm
    5 00:0000 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 00:0000 -  -  -  -  ;		Date : 		3rd June 2022
    7 00:0000 -  -  -  -  ;		Reviewed :	No
    8 00:0000 -  -  -  -  ;		Purpose :	Main program.
    9 00:0000 -  -  -  -  ;
   10 00:0000 -  -  -  -  ; ***************************************************************************************
   11 00:0000 -  -  -  -  ; ***************************************************************************************
   12 00:0000 -  -  -  -  
   13 00:0000 -  -  -  -  ; ***************************************************************************************
   14 00:0000 -  -  -  -  ;
   15 00:0000 -  -  -  -  ; 								Handle eZ80, both TI84 and default
   16 00:0000 -  -  -  -  ;
   17 00:0000 -  -  -  -  ; ***************************************************************************************
   18 00:0000 -  -  -  -  
   19 00:0000 -  -  -  -  #ifdef EZ80
   20 00:0000 -  -  -  -  
   21 00:0000 -  -  -  -  .assume ADL=1
   22 00:0000 -  -  -  -  
   23 00:0000 -  -  -  -  #ifdef TI84 	
   24 00:0000 -  -  -  -  #include "otherfiles/ti84pce.inc"		; Standard header for TI84-CE
Listing for file "/home/paulr/Projects/dax-basic/source/otherfiles/ti84pce.inc"
    1 00:0000 -  -  -  -  ;TI-84 Plus CE Include File
    2 00:0000 -  -  -  -  
    3 00:0000 -  -  -  -  ;Various Parts Contributed by
    4 00:0000 -  -  -  -  ;- BrandonW
    5 00:0000 -  -  -  -  ;- calc84
    6 00:0000 -  -  -  -  ;- MateoConLechuga
    7 00:0000 -  -  -  -  ;- Runer112
    8 00:0000 -  -  -  -  ;- tr1p1ea
    9 00:0000 -  -  -  -  ;- Kerm Martian
   10 00:0000 -  -  -  -  ;- Texas Instruments (ti83plus.inc)
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   25 00:0000 -  -  -  -  		.org 	userMem-2
   26 D1:A87F EF 7B -  -  		.db 	tExtTok,tAsm84CeCmp	
   27 D1:A881 -  -  -  -  #endif
   28 D1:A881 -  -  -  -  
   29 D1:A881 -  -  -  -  ; ***************************************************************************************
   30 D1:A881 -  -  -  -  ;
   31 D1:A881 -  -  -  -  ; 								Handle Z80 for Aquarius binary
   32 D1:A881 -  -  -  -  ;
   33 D1:A881 -  -  -  -  ; ***************************************************************************************
   34 D1:A881 -  -  -  -  
   35 D1:A881 -  -  -  -  #else 
   36 D1:A881             
   37 D1:A881             #ifdef AQUARIUS
   38 D1:A881             .org 	$4000
   39 D1:A881             		ld 		hl,StandardIntegers 		; allows dumpvars to find this.
   40 D1:A881             		ld 		sp,$BFFF
   41 D1:A881             #endif
   42 D1:A881             
   43 D1:A881             #endif
   44 D1:A881 CD D4 B9 D1 		call 	SYSInitialise
   45 D1:A885 11 00 BC D1 		ld 		de,TestInstance
   46 D1:A889 21 1A CC D1 		ld 		hl,EndTestInstance
   47 D1:A88D CD 7A B1 D1 		call 	SetCurrentInstance
   48 D1:A891 -  -  -  -  
   49 D1:A891 3E C3 -  -  		ld 		a,$C3 				; the code for JP
   50 D1:A893 32 E5 A8 D1 		ld 		(JumpCode),a 		; so we can do a CALL indirect.
   51 D1:A897 -  -  -  -  		
   52 D1:A897 C3 31 AB D1 		jp 		Command_RUN
   53 D1:A89B -  -  -  -  
   54 D1:A89B -  -  -  -  WarmStart:		
   55 D1:A89B 3E 2A -  -  		ld 		a,'*'
   56 D1:A89D CD FA B9 D1 		call 	SYSPrintChar
   57 D1:A8A1 CD E0 B9 D1 		call 	SYSTerminate
   58 D1:A8A5 -  -  -  -  
   59 D1:A8A5 -  -  -  -  Unimplemented:
   60 D1:A8A5 3E 05 C3 EE 
              AB D1 -  -  		ERR_DISABLED
Listing for file "/home/paulr/Projects/dax-basic/source/core/00main.asm"
   61 D1:A8AB -  -  -  -  Int32DivZeroHandler:
   62 D1:A8AB 3E 06 C3 EE 
              AB D1 -  -  		ERR_DIVZERO
   63 D1:A8B1 -  -  -  -  
   64 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   65 D1:A8B1 -  -  -  -  ;
   66 D1:A8B1 -  -  -  -  ;									Changes and Updates
   67 D1:A8B1 -  -  -  -  ;
   68 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   69 D1:A8B1 -  -  -  -  ;
   70 D1:A8B1 -  -  -  -  ;		Date			Notes
   71 D1:A8B1 -  -  -  -  ;		==== 			=====
   72 D1:A8B1 -  -  -  -  ;
   73 D1:A8B1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   13 D1:A8B1 -  -  -  -  #include "core/01data.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/01data.asm"
    1 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    2 D1:A8B1 -  -  -  -  ; ***************************************************************************************
    3 D1:A8B1 -  -  -  -  ;
    4 D1:A8B1 -  -  -  -  ;		Name : 		01data.asm
    5 D1:A8B1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A8B1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A8B1 -  -  -  -  ;		Reviewed :	No
    8 D1:A8B1 -  -  -  -  ;		Purpose :	Data space
    9 D1:A8B1 -  -  -  -  ;
   10 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   11 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   12 D1:A8B1 -  -  -  -  
   13 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   14 D1:A8B1 -  -  -  -  ;
   15 D1:A8B1 -  -  -  -  ;				Data area. Allow 3 bytes minimum for anything where you 
   16 D1:A8B1 -  -  -  -  ;				LD (xxx),rr etc.
   17 D1:A8B1 -  -  -  -  ;
   18 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   19 D1:A8B1 -  -  -  -  
   20 D1:A8B1 -  -  -  -  LanguageStackSize = 2048 					; bytes allocated to language stack.
   21 D1:A8B1 -  -  -  -  
   22 D1:A8B1 -  -  -  -  HashTableSize = 16 							; 16 pointers for each of 6 types
   23 D1:A8B1 -  -  -  -  											; must be power of 2. 
   24 D1:A8B1 -  -  -  -  
   25 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   26 D1:A8B1 -  -  -  -  ;
   27 D1:A8B1 -  -  -  -  ;								Defines the current instance
   28 D1:A8B1 -  -  -  -  ;
   29 D1:A8B1 -  -  -  -  ; ***************************************************************************************
   30 D1:A8B1 -  -  -  -  
   31 D1:A8B1 -  -  -  -  LowMemory:									; Lowest byte for current instance.
   32 D1:A8B1 00 00 00 00 		.dw 	0,0
   33 D1:A8B5 -  -  -  -  HighMemory: 								; Highest byte for current instance
   34 D1:A8B5 00 00 00 00 		.dw 	0,0		
   35 D1:A8B9 -  -  -  -  CodeAddress: 								; Program code (e.g. first line) is here
   36 D1:A8B9 00 00 00 00 		.dw 	0,0 							
   37 D1:A8BD -  -  -  -  
   38 D1:A8BD -  -  -  -  ; ***************************************************************************************
   39 D1:A8BD -  -  -  -  ;
   40 D1:A8BD -  -  -  -  ;								Allocatable memory, working down.
   41 D1:A8BD -  -  -  -  ;
   42 D1:A8BD -  -  -  -  ; ***************************************************************************************
   43 D1:A8BD -  -  -  -  
   44 D1:A8BD -  -  -  -  LanguageStack: 								; Language Stack, down from here.
   45 D1:A8BD 00 00 00 00 		.dw 	0,0
   46 D1:A8C1 -  -  -  -  
   47 D1:A8C1 -  -  -  -  LanguageStackEnd: 							; as far as the language stack goes.
   48 D1:A8C1 00 00 00 00 		.dw 	0,0		
   49 D1:A8C5 -  -  -  -  
   50 D1:A8C5 -  -  -  -  StandardIntegers: 							; address of standard A-Z variables. On a 128 byte page.
   51 D1:A8C5 00 00 00 00 		.dw 	0,0
   52 D1:A8C9 -  -  -  -  
   53 D1:A8C9 -  -  -  -  HashTableBase: 								; base of hash tables.
   54 D1:A8C9 00 00 00 00 		.dw 	0,0
   55 D1:A8CD -  -  -  -  
   56 D1:A8CD -  -  -  -  HighAllocMemory: 							; first byte of non allocatable memory.
   57 D1:A8CD 00 00 00 00 		.dw 	0,0		
   58 D1:A8D1 -  -  -  -  
   59 D1:A8D1 -  -  -  -  ;
   60 D1:A8D1 -  -  -  -  ;		The empty space is in here. Arrays, Variables and Memory allocated from the bottom up.
   61 D1:A8D1 -  -  -  -  ;
   62 D1:A8D1 -  -  -  -  
   63 D1:A8D1 -  -  -  -  LowAllocMemory: 							; lowest free memory byte.
   64 D1:A8D1 00 00 00 00 		.dw 	0,0
   65 D1:A8D5 -  -  -  -  		
   66 D1:A8D5 -  -  -  -  TopMemory: 									; first free location after PAGE.
   67 D1:A8D5 00 00 00 00 		.dw 	0,0
   68 D1:A8D9 -  -  -  -  
   69 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   70 D1:A8D9 -  -  -  -  ;
   71 D1:A8D9 -  -  -  -  ;										Run variables
   72 D1:A8D9 -  -  -  -  ;
   73 D1:A8D9 -  -  -  -  ; ***************************************************************************************
   74 D1:A8D9 -  -  -  -  
   75 D1:A8D9 -  -  -  -  BasicSP:									; BASIC stack pointer
   76 D1:A8D9 00 00 00 00 		.dw 	0,0
   77 D1:A8DD -  -  -  -  
   78 D1:A8DD -  -  -  -  CurrentLineStart: 							; Start of current line.
   79 D1:A8DD 00 00 00 00 		.dw 	0,0
   80 D1:A8E1 -  -  -  -  		
   81 D1:A8E1 -  -  -  -  RunStackPtr: 								; Stack pointer at Command_RUN
   82 D1:A8E1 00 00 00 00 		.dw 	0,0
   83 D1:A8E5 -  -  -  -  
   84 D1:A8E5 -  -  -  -  JumpCode: 									; Code copied here for JP $xxxxxx
   85 D1:A8E5 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   86 D1:A8EB -  -  -  -  
   87 D1:A8EB -  -  -  -  AConvert: 									; used for address conversions.
   88 D1:A8EB 00 00 00 00 
              00 00 -  -  		.dw 	0,0,0
   89 D1:A8F1 -  -  -  -  		
   90 D1:A8F1 -  -  -  -  RandomSeed: 								; random number seeds.
   91 D1:A8F1 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
   92 D1:A901 -  -  -  -  
   93 D1:A901 -  -  -  -  AllowAutoCreate: 							; autocreate permission flag.
   94 D1:A901 00 00 -  -  		.dw 	0
   95 D1:A903 -  -  -  -  
   96 D1:A903 -  -  -  -  PrintBase: 									; current base for PRINT
   97 D1:A903 00 00 -  -  		.dw 	0 
   98 D1:A905 -  -  -  -  
   99 D1:A905 -  -  -  -  ; ***************************************************************************************
  100 D1:A905 -  -  -  -  ;
  101 D1:A905 -  -  -  -  ;									Variable Information
  102 D1:A905 -  -  -  -  ;
  103 D1:A905 -  -  -  -  ; ***************************************************************************************
  104 D1:A905 -  -  -  -  
  105 D1:A905 -  -  -  -  VarNameStart: 								; first byte of name
  106 D1:A905 00 00 00 00 		.dw 	0,0
  107 D1:A909 -  -  -  -  VarHash: 									; name hash value
  108 D1:A909 00 00 -  -  		.dw 	0		
  109 D1:A90B -  -  -  -  VarHashListPtr: 							; address of the hash list to use.
  110 D1:A90B 00 00 00 00 		.dw 	0,0
  111 D1:A90F -  -  -  -  		
  112 D1:A90F -  -  -  -  ; ***************************************************************************************
  113 D1:A90F -  -  -  -  ;
  114 D1:A90F -  -  -  -  ;										  Buffers
  115 D1:A90F -  -  -  -  ;
  116 D1:A90F -  -  -  -  ; ***************************************************************************************
  117 D1:A90F -  -  -  -  
  118 D1:A90F -  -  -  -  _USBuffer: 									; buffer space for STR$()
  119 D1:A90F 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	16
  120 D1:A91F -  -  -  -  
  121 D1:A91F -  -  -  -  _UCBuffer: 									; buffer space for CHR$()
  122 D1:A91F 00 00 -  -  		.dw 	0
  123 D1:A921 -  -  -  -  
  124 D1:A921 -  -  -  -  ConvertBuffer: 								; general usage
  125 D1:A921 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 	64
  126 D1:A961 -  -  -  -  
  127 D1:A961 -  -  -  -  ; ***************************************************************************************
  128 D1:A961 -  -  -  -  ;
  129 D1:A961 -  -  -  -  ;									Changes and Updates
  130 D1:A961 -  -  -  -  ;
  131 D1:A961 -  -  -  -  ; ***************************************************************************************
  132 D1:A961 -  -  -  -  ;
  133 D1:A961 -  -  -  -  ;		Date			Notes
  134 D1:A961 -  -  -  -  ;		==== 			=====
  135 D1:A961 -  -  -  -  ;
  136 D1:A961 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   14 D1:A961 -  -  -  -  #include "core/commands/assert.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
    1 D1:A961 -  -  -  -  ; ***************************************************************************************
    2 D1:A961 -  -  -  -  ; ***************************************************************************************
    3 D1:A961 -  -  -  -  ;
    4 D1:A961 -  -  -  -  ;		Name : 		assert.asm
    5 D1:A961 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A961 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A961 -  -  -  -  ;		Reviewed :	No
    8 D1:A961 -  -  -  -  ;		Purpose :	Assert command
    9 D1:A961 -  -  -  -  ;
   10 D1:A961 -  -  -  -  ; ***************************************************************************************
   11 D1:A961 -  -  -  -  ; ***************************************************************************************
   12 D1:A961 -  -  -  -  
   13 D1:A961 -  -  -  -  ; ***************************************************************************************
   14 D1:A961 -  -  -  -  ;
   15 D1:A961 -  -  -  -  ;									ASSERT command
   16 D1:A961 -  -  -  -  ;
   17 D1:A961 -  -  -  -  ; ***************************************************************************************
   18 D1:A961 -  -  -  -  
   19 D1:A961 -  -  -  -  Command_ASSERT: 	;; [assert]
   20 D1:A961 CD 21 AE D1 		call 	EvaluateInteger 			; get an integer expression.
   21 D1:A965 7C B5 D9 B4 
              B5 D9 -  -  		checkzero 							; set Z flag if HL'HL zero
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/assert.asm"
   22 D1:A96B C0 -  -  -  		ret 	nz 							; okay if it is not
   23 D1:A96C 3E 01 C3 EE 
              AB D1 -  -  		ERR_ASSERT
   24 D1:A972 -  -  -  -  
   25 D1:A972 -  -  -  -  ; ***************************************************************************************
   26 D1:A972 -  -  -  -  ;
   27 D1:A972 -  -  -  -  ;									Changes and Updates
   28 D1:A972 -  -  -  -  ;
   29 D1:A972 -  -  -  -  ; ***************************************************************************************
   30 D1:A972 -  -  -  -  ;
   31 D1:A972 -  -  -  -  ;		Date			Notes
   32 D1:A972 -  -  -  -  ;		==== 			=====
   33 D1:A972 -  -  -  -  ;
   34 D1:A972 -  -  -  -  ; ***************************************************************************************
   35 D1:A972 -  -  -  -  		
Listing for file "_build.asm"
   15 D1:A972 -  -  -  -  #include "core/commands/badcommands.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/badcommands.asm"
    1 D1:A972 -  -  -  -  ; ***************************************************************************************
    2 D1:A972 -  -  -  -  ; ***************************************************************************************
    3 D1:A972 -  -  -  -  ;
    4 D1:A972 -  -  -  -  ;		Name : 		badcommands.asm
    5 D1:A972 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A972 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:A972 -  -  -  -  ;		Reviewed :	No
    8 D1:A972 -  -  -  -  ;		Purpose :	Commands that aren't allowed to be run, e.g. cause SN Error.
    9 D1:A972 -  -  -  -  ;
   10 D1:A972 -  -  -  -  ; ***************************************************************************************
   11 D1:A972 -  -  -  -  ; ***************************************************************************************
   12 D1:A972 -  -  -  -  
   13 D1:A972 -  -  -  -  BadCmd_Then: 		;; [then]
   14 D1:A972 -  -  -  -  BadCmd_RBracket: 	;; [)]
   15 D1:A972 -  -  -  -  BadCmd_Comma: 		;; [,]
   16 D1:A972 -  -  -  -  BadCmd_Comma: 		;; [~]
   17 D1:A972 -  -  -  -  BadCmd_SemiColon: 	;; [;]
   18 D1:A972 -  -  -  -  BadCmd_To: 			;; [to]
   19 D1:A972 C3 58 AC D1 		jp 		SyntaxError
   20 D1:A976 -  -  -  -  
   21 D1:A976 -  -  -  -  ; ***************************************************************************************
   22 D1:A976 -  -  -  -  ;
   23 D1:A976 -  -  -  -  ;									Changes and Updates
   24 D1:A976 -  -  -  -  ;
   25 D1:A976 -  -  -  -  ; ***************************************************************************************
   26 D1:A976 -  -  -  -  ;
   27 D1:A976 -  -  -  -  ;		Date			Notes
   28 D1:A976 -  -  -  -  ;		==== 			=====
   29 D1:A976 -  -  -  -  ;
   30 D1:A976 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   16 D1:A976 -  -  -  -  #include "core/commands/colon.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/colon.asm"
    1 D1:A976 -  -  -  -  ; ***************************************************************************************
    2 D1:A976 -  -  -  -  ; ***************************************************************************************
    3 D1:A976 -  -  -  -  ;
    4 D1:A976 -  -  -  -  ;		Name : 		colon.asm
    5 D1:A976 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A976 -  -  -  -  ;		Date : 		3rd May 2022
    7 D1:A976 -  -  -  -  ;		Reviewed :	No
    8 D1:A976 -  -  -  -  ;		Purpose :	Colon command (just ignored)
    9 D1:A976 -  -  -  -  ;
   10 D1:A976 -  -  -  -  ; ***************************************************************************************
   11 D1:A976 -  -  -  -  ; ***************************************************************************************
   12 D1:A976 -  -  -  -  
   13 D1:A976 -  -  -  -  ; ***************************************************************************************
   14 D1:A976 -  -  -  -  ;
   15 D1:A976 -  -  -  -  ;								Colon command, this is ignored.
   16 D1:A976 -  -  -  -  ;
   17 D1:A976 -  -  -  -  ; ***************************************************************************************
   18 D1:A976 -  -  -  -  
   19 D1:A976 -  -  -  -  Command_Colon: 	;; [:]
   20 D1:A976 C9 -  -  -  		ret
   21 D1:A977 -  -  -  -  
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  ;
   24 D1:A977 -  -  -  -  ;									Changes and Updates
   25 D1:A977 -  -  -  -  ;
   26 D1:A977 -  -  -  -  ; ***************************************************************************************
   27 D1:A977 -  -  -  -  ;
   28 D1:A977 -  -  -  -  ;		Date			Notes
   29 D1:A977 -  -  -  -  ;		==== 			=====
   30 D1:A977 -  -  -  -  ;
   31 D1:A977 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   17 D1:A977 -  -  -  -  #include "core/commands/dim.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
    1 D1:A977 -  -  -  -  ; ***************************************************************************************
    2 D1:A977 -  -  -  -  ; ***************************************************************************************
    3 D1:A977 -  -  -  -  ;
    4 D1:A977 -  -  -  -  ;		Name : 		dim.asm
    5 D1:A977 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:A977 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:A977 -  -  -  -  ;		Reviewed :	No
    8 D1:A977 -  -  -  -  ;		Purpose :	Dim command
    9 D1:A977 -  -  -  -  ;
   10 D1:A977 -  -  -  -  ; ***************************************************************************************
   11 D1:A977 -  -  -  -  ; ***************************************************************************************
   12 D1:A977 -  -  -  -  
   13 D1:A977 -  -  -  -  ; ***************************************************************************************
   14 D1:A977 -  -  -  -  ;
   15 D1:A977 -  -  -  -  ;		DIM command (note syntax change for memory allocation)
   16 D1:A977 -  -  -  -  ;	
   17 D1:A977 -  -  -  -  ;			DIM n(x) 			Creates variable n with x+1 elements 0..x
   18 D1:A977 -  -  -  -  ;			DIM n[x] 			Reserves x+1 bytes of memory and sets DIM equal to it
   19 D1:A977 -  -  -  -  ;								(can be comma chained)
   20 D1:A977 -  -  -  -  ;			DIM n[-ve, not -1] 	DIM_Error (Dim -1 allocates 0 bytes so gives lowmemalloc)
   21 D1:A977 -  -  -  -  ;
   22 D1:A977 -  -  -  -  ; ***************************************************************************************
   23 D1:A977 -  -  -  -  
   24 D1:A977 -  -  -  -  Command_DIM: 	;; [dim]
   25 D1:A977 -  -  -  -  		;
   26 D1:A977 -  -  -  -  		; 		Skip the DIM identifier - we treat the two differently so
   27 D1:A977 -  -  -  -  		; 		we cannot just get a l-value here.
   28 D1:A977 -  -  -  -  		;
   29 D1:A977 DD E5 -  -  		push	ix 							; copy start of identifier to DE
   30 D1:A979 D1 -  -  -  		pop 	de
   31 D1:A97A -  -  -  -  		;
   32 D1:A97A DD 7E 00 -  		ld 		a,(ix+0) 					; check identifier
   33 D1:A97D FE 26 -  -  		cp 		IDENTIFIER_END 				
   34 D1:A97F D2 58 AC D1 		jp 		nc,SyntaxError 				; no identifier here
   35 D1:A983 -  -  -  -  _DISkip:
   36 D1:A983 DD 23 -  -  		inc 	ix 							; skip over identifier
   37 D1:A985 DD 7E 00 -  		ld 		a,(ix+0)
   38 D1:A988 FE 26 -  -  		cp 		IDENTIFIER_END
   39 D1:A98A 38 F7 -  -  		jr 		c,_DISkip 					
   40 D1:A98C -  -  -  -  		;
   41 D1:A98C DD 7E 00 -  		ld 		a,(ix+0) 					; see if followed by a (
   42 D1:A98F FE 95 -  -  		cp 		KWD_LPAREN
   43 D1:A991 F5 -  -  -  		push 	af 							; call whichever function depending.
   44 D1:A992 CC F3 A9 D1 		call 	z,DimensionArray 			; DE points to identifier.
   45 D1:A996 F1 -  -  -  		pop 	af
   46 D1:A997 C4 AB A9 D1 		call 	nz,DimensionAllocate
   47 D1:A99B -  -  -  -  		;
   48 D1:A99B DD 7E 00 -  		ld 		a,(ix+0) 					; comma follows ?
   49 D1:A99E FE A6 -  -  		cp 		KWD_COMMA
   50 D1:A9A0 C0 -  -  -  		ret 	nz
   51 D1:A9A1 DD 23 -  -  		inc 	ix							; if so, skip comma and go round
   52 D1:A9A3 18 D2 -  -  		jr 		Command_DIM
   53 D1:A9A5 -  -  -  -  
   54 D1:A9A5 -  -  -  -  _CDError:
   55 D1:A9A5 3E 04 C3 EE 
              AB D1 -  -  		ERR_DIM		
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/dim.asm"
   56 D1:A9AB -  -  -  -  
   57 D1:A9AB -  -  -  -  ; ***************************************************************************************
   58 D1:A9AB -  -  -  -  ;
   59 D1:A9AB -  -  -  -  ;			Allocate memory to variable. Error if outside range -1 .. $FFFF
   60 D1:A9AB -  -  -  -  ;			Allocates one extra byte so DIM x1 68 actually allocates 69 bytes :)
   61 D1:A9AB -  -  -  -  ;
   62 D1:A9AB -  -  -  -  ; ***************************************************************************************
   63 D1:A9AB -  -  -  -  
   64 D1:A9AB -  -  -  -  DimensionAllocate:
   65 D1:A9AB D5 -  -  -  		push 	de 							; save start on stack
   66 D1:A9AC DD E3 -  -  		ex 		(sp),ix 					; IX to TOS, start -> IX
   67 D1:A9AE 3E 01 -  -  		ld 		a,1 						; allow creation of the variable if required
   68 D1:A9B0 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   69 D1:A9B4 CD A8 B3 D1 		call 	FindVariable 				; find/create the variable appropriately.
   70 D1:A9B8 CB 79 -  -  		bit 	CIsReference,c 				; check reference, and integer
   71 D1:A9BA 28 E9 -  -  		jr 		z,_CDError
   72 D1:A9BC CB 41 -  -  		bit 	CIsString,c
   73 D1:A9BE 20 E5 -  -  		jr 		nz,_CDError
   74 D1:A9C0 DD E1 -  -  		pop 	ix 							; get address of constant back into IX
   75 D1:A9C2 E5 -  -  -  		push 	hl 							; save address of variable reference on stack.
   76 D1:A9C3 3E AA -  -  		ld  	a,KWD_LSQPAREN
   77 D1:A9C5 CD E2 AB D1 		call 	CheckNextA 					; check for [
   78 D1:A9C9 CD 21 AE D1 		call 	EvaluateInteger 			; get the number of bytes to allocate into HL
   79 D1:A9CD 3E AB -  -  		ld  	a,KWD_RSQPAREN
   80 D1:A9CF CD E2 AB D1 		call 	CheckNextA 					; check for ]
   81 D1:A9D3 23 -  -  -  		inc 	hl 							; increment HL,HL'
   82 D1:A9D4 7C -  -  -  		ld 		a,h
   83 D1:A9D5 B5 -  -  -  		or 		l
   84 D1:A9D6 20 03 -  -  		jr 		nz,_DANoCarry
   85 D1:A9D8 D9 -  -  -  		exx
   86 D1:A9D9 23 -  -  -  		inc 	hl
   87 D1:A9DA D9 -  -  -  		exx
   88 D1:A9DB -  -  -  -  _DANoCarry:
   89 D1:A9DB D9 -  -  -  		exx 								; check if HL' is zero
   90 D1:A9DC 7C -  -  -  		ld 		a,h
   91 D1:A9DD B5 -  -  -  		or 		l
   92 D1:A9DE D9 -  -  -  		exx
   93 D1:A9DF 20 C4 -  -  		jr 		nz,_CDError
   94 D1:A9E1 CD 07 B1 D1 		call 	AllocateBytes 				; allocate that much memory.
   95 D1:A9E5 EB -  -  -  		ex 		de,hl 						; put address into UDE
   96 D1:A9E6 E1 -  -  -  		pop 	hl 							; this is where it goes.
   97 D1:A9E7 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
   98 D1:A9ED AF -  -  -  		xor 	a 							; autocreate off
   99 D1:A9EE 32 01 A9 D1 		ld 		(AllowAutoCreate),a
  100 D1:A9F2 C9 -  -  -  		ret
  101 D1:A9F3 -  -  -  -  
  102 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  103 D1:A9F3 -  -  -  -  ;
  104 D1:A9F3 -  -  -  -  ;		Dimension array variable. Must not already exist, followed by one dimension
  105 D1:A9F3 -  -  -  -  ; 		which is the upper index, so n+1 memory locations.
  106 D1:A9F3 -  -  -  -  ;
  107 D1:A9F3 -  -  -  -  ; ***************************************************************************************
  108 D1:A9F3 -  -  -  -  
  109 D1:A9F3 -  -  -  -  DimensionArray:
  110 D1:A9F3 D5 -  -  -  		push 	de 							; save start on stack.
  111 D1:A9F4 -  -  -  -  		;
  112 D1:A9F4 CD 21 AE D1 		call 	EvaluateInteger 			; get dimensions of array, max 1k.
  113 D1:A9F8 7C -  -  -  		ld 		a,h 						; max out at $03FF
  114 D1:A9F9 E6 FC -  -  		and 	$FC
  115 D1:A9FB D9 -  -  -  		exx
  116 D1:A9FC B4 -  -  -  		or 		h
  117 D1:A9FD B5 -  -  -  		or 		l
  118 D1:A9FE D9 -  -  -  		exx
  119 D1:A9FF 20 A4 -  -  		jr 		nz,_CDError
  120 D1:AA01 -  -  -  -  		;
  121 D1:AA01 DD E3 -  -  		ex 		(sp),ix 					; end position on stack, start in IX.
  122 D1:AA03 E5 -  -  -  		push 	hl 							; save dimension size on stack.		
  123 D1:AA04 -  -  -  -  		;
  124 D1:AA04 CD 35 B4 D1 		call 	VariableInformation 		; get information about this array
  125 D1:AA08 CD 71 B4 D1 		call 	VariableSearchList 			; look to see if already present.
  126 D1:AA0C 30 97 -  -  		jr 		nc,_CDError 				; found, then error, can't redimension
  127 D1:AA0E -  -  -  -  		;
  128 D1:AA0E E1 -  -  -  		pop 	hl 							; get dimension size back
  129 D1:AA0F E5 -  -  -  		push 	hl
  130 D1:AA10 23 -  -  -  		inc 	hl 							; add one for zeroth array element
  131 D1:AA11 23 -  -  -  		inc 	hl 							; add one for size word.
  132 D1:AA12 29 -  -  -  		add 	hl,hl 						; x 4 = memory required
  133 D1:AA13 29 -  -  -  		add 	hl,hl
  134 D1:AA14 CD 65 B3 D1 		call 	VariableCreate 				; create the array, completely blank.
  135 D1:AA18 -  -  -  -  		;
  136 D1:AA18 D1 -  -  -  		pop 	de 							; get last index into DE
  137 D1:AA19 01 09 00 00 		ld 		bc,9 						; point HL to array offset 9 which is the array size
  138 D1:AA1D 09 -  -  -  		add 	hl,bc
  139 D1:AA1E ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4
  140 D1:AA24 DD E1 -  -  		pop 	ix 							; restore end position
  141 D1:AA26 C9 -  -  -  		ret		
  142 D1:AA27 -  -  -  -  
  143 D1:AA27 -  -  -  -  
  144 D1:AA27 -  -  -  -  ; ***************************************************************************************
  145 D1:AA27 -  -  -  -  ;
  146 D1:AA27 -  -  -  -  ;									Changes and Updates
  147 D1:AA27 -  -  -  -  ;
  148 D1:AA27 -  -  -  -  ; ***************************************************************************************
  149 D1:AA27 -  -  -  -  ;
  150 D1:AA27 -  -  -  -  ;		Date			Notes
  151 D1:AA27 -  -  -  -  ;		==== 			=====
  152 D1:AA27 -  -  -  -  ;
  153 D1:AA27 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   18 D1:AA27 -  -  -  -  #include "core/commands/end.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
    1 D1:AA27 -  -  -  -  ; ***************************************************************************************
    2 D1:AA27 -  -  -  -  ; ***************************************************************************************
    3 D1:AA27 -  -  -  -  ;
    4 D1:AA27 -  -  -  -  ;		Name : 		end.asm
    5 D1:AA27 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA27 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA27 -  -  -  -  ;		Reviewed :	No
    8 D1:AA27 -  -  -  -  ;		Purpose :	End command
    9 D1:AA27 -  -  -  -  ;
   10 D1:AA27 -  -  -  -  ; ***************************************************************************************
   11 D1:AA27 -  -  -  -  ; ***************************************************************************************
   12 D1:AA27 -  -  -  -  
   13 D1:AA27 -  -  -  -  ; ***************************************************************************************
   14 D1:AA27 -  -  -  -  ;
   15 D1:AA27 -  -  -  -  ;										END command
   16 D1:AA27 -  -  -  -  ;
   17 D1:AA27 -  -  -  -  ; ***************************************************************************************
   18 D1:AA27 -  -  -  -  
   19 D1:AA27 -  -  -  -  Command_END: 	;; [end]
   20 D1:AA27 3E 00 C3 EE 
              AB D1 -  -  		ERR_WARMSTART
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/end.asm"
   21 D1:AA2D -  -  -  -  
   22 D1:AA2D -  -  -  -  ; ***************************************************************************************
   23 D1:AA2D -  -  -  -  ;
   24 D1:AA2D -  -  -  -  ;									Changes and Updates
   25 D1:AA2D -  -  -  -  ;
   26 D1:AA2D -  -  -  -  ; ***************************************************************************************
   27 D1:AA2D -  -  -  -  ;
   28 D1:AA2D -  -  -  -  ;		Date			Notes
   29 D1:AA2D -  -  -  -  ;		==== 			=====
   30 D1:AA2D -  -  -  -  ;
   31 D1:AA2D -  -  -  -  ; ***************************************************************************************
   32 D1:AA2D -  -  -  -  		
Listing for file "_build.asm"
   19 D1:AA2D -  -  -  -  #include "core/commands/endofline.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/endofline.asm"
    1 D1:AA2D -  -  -  -  ; ***************************************************************************************
    2 D1:AA2D -  -  -  -  ; ***************************************************************************************
    3 D1:AA2D -  -  -  -  ;
    4 D1:AA2D -  -  -  -  ;		Name : 		endofline.asm
    5 D1:AA2D -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA2D -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AA2D -  -  -  -  ;		Reviewed :	None
    8 D1:AA2D -  -  -  -  ;		Purpose :	Handle end of line.
    9 D1:AA2D -  -  -  -  ;
   10 D1:AA2D -  -  -  -  ; ***************************************************************************************
   11 D1:AA2D -  -  -  -  ; ***************************************************************************************
   12 D1:AA2D -  -  -  -  
   13 D1:AA2D -  -  -  -  ; ***************************************************************************************
   14 D1:AA2D -  -  -  -  ;
   15 D1:AA2D -  -  -  -  ;						Handle reaching the EOL Marker $80
   16 D1:AA2D -  -  -  -  ;
   17 D1:AA2D -  -  -  -  ; ***************************************************************************************
   18 D1:AA2D -  -  -  -  
   19 D1:AA2D -  -  -  -  EOLHandler: 	;; [[[eol]]]
   20 D1:AA2D DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 		; current line.
   21 D1:AA32 11 00 00 00 		ld  	de,$0000 					; get offset into DE (24 bit)
   22 D1:AA36 DD 5E 00 -  		ld 		e,(ix+0)
   23 D1:AA39 DD 19 -  -  		add 	ix,de 						; point DE to next line.
   24 D1:AA3B -  -  -  -  		;
   25 D1:AA3B ED 7B E1 A8 
              D1 -  -  -  		ld 		sp,(RunStackPtr) 			; restore SP as we're crashing out.
   26 D1:AA40 C3 44 AB D1 		jp 		CRNewLine 					; and start running a new line.
   27 D1:AA44 -  -  -  -  
   28 D1:AA44 -  -  -  -  ; ***************************************************************************************
   29 D1:AA44 -  -  -  -  ;
   30 D1:AA44 -  -  -  -  ;									Changes and Updates
   31 D1:AA44 -  -  -  -  ;
   32 D1:AA44 -  -  -  -  ; ***************************************************************************************
   33 D1:AA44 -  -  -  -  ;
   34 D1:AA44 -  -  -  -  ;		Date			Notes
   35 D1:AA44 -  -  -  -  ;		==== 			=====
   36 D1:AA44 -  -  -  -  ;
   37 D1:AA44 -  -  -  -  ; ***************************************************************************************
   38 D1:AA44 -  -  -  -  		
Listing for file "_build.asm"
   20 D1:AA44 -  -  -  -  #include "core/commands/let.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/let.asm"
    1 D1:AA44 -  -  -  -  ; ***************************************************************************************
    2 D1:AA44 -  -  -  -  ; ***************************************************************************************
    3 D1:AA44 -  -  -  -  ;
    4 D1:AA44 -  -  -  -  ;		Name : 		let.asm
    5 D1:AA44 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AA44 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:AA44 -  -  -  -  ;		Reviewed :	No
    8 D1:AA44 -  -  -  -  ;		Purpose :	Assignment statement
    9 D1:AA44 -  -  -  -  ;
   10 D1:AA44 -  -  -  -  ; ***************************************************************************************
   11 D1:AA44 -  -  -  -  ; ***************************************************************************************
   12 D1:AA44 -  -  -  -  
   13 D1:AA44 -  -  -  -  ; ***************************************************************************************
   14 D1:AA44 -  -  -  -  ;
   15 D1:AA44 -  -  -  -  ;					LET, IX points to value *after* the LET
   16 D1:AA44 -  -  -  -  ;
   17 D1:AA44 -  -  -  -  ; ***************************************************************************************
   18 D1:AA44 -  -  -  -  
   19 D1:AA44 -  -  -  -  Command_LET: 	;; [let]
   20 D1:AA44 DD 7E 00 -  		ld 		a,(ix+0) 					; if first character an identifier we can autocreate it.
   21 D1:AA47 FE 96 -  -  		cp 		KWD_DOLLAR 					; is it $term = something ?
   22 D1:AA49 28 2F -  -  		jr 		z,_CLString
   23 D1:AA4B FE 26 -  -  		cp 		IDENTIFIER_END 				; is it an identifier.
   24 D1:AA4D 30 06 -  -  		jr 		nc,_CLNoAuto
   25 D1:AA4F 3E FF -  -  		ld 		a,$FF 						; set the autocreate flag.
   26 D1:AA51 32 01 A9 D1 		ld 		(AllowAutoCreate),a
   27 D1:AA55 -  -  -  -  _CLNoAuto:
   28 D1:AA55 3E 05 -  -  		ld 		a,KWD_PRECEDENCE_INDIRECT-1 ; only at over this level.
   29 D1:AA57 CD A3 AD D1 		call 	EvaluateAtPrecedence  		; so we get x!4 = 2.
   30 D1:AA5B CB 79 -  -  		bit 	CIsReference,c 				; must be a reference.
   31 D1:AA5D CA 58 AC D1 		jp 		z,SyntaxError 				; otherwise we have problems.
   32 D1:AA61 E5 -  -  -  		push 	hl 							; save address on stack
   33 D1:AA62 C5 -  -  -  		push 	bc 							; save type on stack
   34 D1:AA63 AF -  -  -  		xor 	a 							; clear autocreate flag.
   35 D1:AA64 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		
   36 D1:AA68 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   37 D1:AA6A CD E2 AB D1 		call 	CheckNextA
   38 D1:AA6E -  -  -  -  
   39 D1:AA6E CD 19 AE D1 		call 	EvaluateValue 				; evaluate the RHS. Value is in C:HL'HL
   40 D1:AA72 -  -  -  -  
   41 D1:AA72 D1 -  -  -  		pop 	de 							; get the type of left back (in E)
   42 D1:AA73 43 -  -  -  		ld 		b,e 						
   43 D1:AA74 D1 -  -  -  		pop 	de 							; get address of left back into DE
   44 D1:AA75 -  -  -  -  		;
   45 D1:AA75 -  -  -  -  		;		At this point. B:UDE is the target reference and C:HL'HL the value.
   46 D1:AA75 -  -  -  -  		;
   47 D1:AA75 CD 93 AA D1 		call 	WriteHLToDE
   48 D1:AA79 C9 -  -  -  		ret
   49 D1:AA7A -  -  -  -  		;
   50 D1:AA7A -  -  -  -  		; 		String assignment code.
   51 D1:AA7A -  -  -  -  		;
   52 D1:AA7A -  -  -  -  _CLString:
   53 D1:AA7A CD 0A AE D1 		call 	EvaluateStringTerm  		; so we get $(x+4) = 2 etc.
   54 D1:AA7E E5 -  -  -  		push 	hl 							; save target expression
   55 D1:AA7F 3E 8F -  -  		ld 		a,KWD_EQUALS 				; check = follows
   56 D1:AA81 CD E2 AB D1 		call 	CheckNextA
   57 D1:AA85 CD 3B AE D1 		call 	EvaluateString 				; get the thing to copy
   58 D1:AA89 D1 -  -  -  		pop 	de 							; target in DE.
   59 D1:AA8A -  -  -  -  _CLCopy:
   60 D1:AA8A 7E -  -  -  		ld 		a,(hl) 						; copy (HL) to (DE)	
   61 D1:AA8B 12 -  -  -  		ld 		(de),a
   62 D1:AA8C 23 -  -  -  		inc 	hl
   63 D1:AA8D 13 -  -  -  		inc 	de
   64 D1:AA8E FE 20 -  -  		cp 		$20 						; until control character
   65 D1:AA90 30 F8 -  -  		jr 		nc,_CLCopy
   66 D1:AA92 C9 -  -  -  		ret
   67 D1:AA93 -  -  -  -  
   68 D1:AA93 -  -  -  -  ; ***************************************************************************************
   69 D1:AA93 -  -  -  -  ;
   70 D1:AA93 -  -  -  -  ;				Write the value in C:HL'HL to the reference B:UDE
   71 D1:AA93 -  -  -  -  ;
   72 D1:AA93 -  -  -  -  ; ***************************************************************************************
   73 D1:AA93 -  -  -  -  
   74 D1:AA93 -  -  -  -  WriteHLToDE:
   75 D1:AA93 CB 41 -  -  		bit 	CIsString,c 				; type mismatch if RHS is a string
   76 D1:AA95 C2 4C AC D1 		jp 		nz,TypeMismatch
   77 D1:AA99 -  -  -  -  		;
   78 D1:AA99 -  -  -  -  		;		Do the actual write of HL'HL to UDE
   79 D1:AA99 -  -  -  -  		;		
   80 D1:AA99 -  -  -  -  _WHDWriteNumber:
   81 D1:AA99 EB -  -  -  		ex 		de,hl 						; the value is in DE'DE, the target in UHL now.
   82 D1:AA9A D9 -  -  -  		exx
   83 D1:AA9B EB -  -  -  		ex 		de,hl
   84 D1:AA9C D9 -  -  -  		exx
   85 D1:AA9D -  -  -  -  
   86 D1:AA9D 73 -  -  -  		ld 		(hl),e 						; Z80 version of write DE'DE to (HL)
   87 D1:AA9E 23 -  -  -  		inc 	hl  						; not really worth optimising for EZ80
   88 D1:AA9F 72 -  -  -  		ld 		(hl),d
   89 D1:AAA0 23 -  -  -  		inc 	hl
   90 D1:AAA1 E5 -  -  -  		push 	hl
   91 D1:AAA2 D9 -  -  -  		exx
   92 D1:AAA3 E1 -  -  -  		pop 	hl
   93 D1:AAA4 73 -  -  -  		ld 		(hl),e
   94 D1:AAA5 23 -  -  -  		inc 	hl
   95 D1:AAA6 72 -  -  -  		ld 		(hl),d
   96 D1:AAA7 D9 -  -  -  		exx
   97 D1:AAA8 -  -  -  -  
   98 D1:AAA8 C9 -  -  -  		ret
   99 D1:AAA9 -  -  -  -  
  100 D1:AAA9 -  -  -  -  ; ***************************************************************************************
  101 D1:AAA9 -  -  -  -  ;
  102 D1:AAA9 -  -  -  -  ;									Changes and Updates
  103 D1:AAA9 -  -  -  -  ;
  104 D1:AAA9 -  -  -  -  ; ***************************************************************************************
  105 D1:AAA9 -  -  -  -  ;
  106 D1:AAA9 -  -  -  -  ;		Date			Notes
  107 D1:AAA9 -  -  -  -  ;		==== 			=====
  108 D1:AAA9 -  -  -  -  ;
  109 D1:AAA9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   21 D1:AAA9 -  -  -  -  #include "core/commands/print.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/print.asm"
    1 D1:AAA9 -  -  -  -  ; ***************************************************************************************
    2 D1:AAA9 -  -  -  -  ; ***************************************************************************************
    3 D1:AAA9 -  -  -  -  ;
    4 D1:AAA9 -  -  -  -  ;		Name : 		print.asm
    5 D1:AAA9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AAA9 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AAA9 -  -  -  -  ;		Reviewed :	No
    8 D1:AAA9 -  -  -  -  ;		Purpose :	Print command
    9 D1:AAA9 -  -  -  -  ;
   10 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   11 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   12 D1:AAA9 -  -  -  -  
   13 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   14 D1:AAA9 -  -  -  -  ;
   15 D1:AAA9 -  -  -  -  ;										PRINT command
   16 D1:AAA9 -  -  -  -  ;
   17 D1:AAA9 -  -  -  -  ; ***************************************************************************************
   18 D1:AAA9 -  -  -  -  
   19 D1:AAA9 -  -  -  -  Command_PRINT: 	;; [print]
   20 D1:AAA9 3E F6 -  -  		ld 		a,-10 						; default base.
   21 D1:AAAB 32 03 A9 D1 		ld 		(PrintBase),a
   22 D1:AAAF -  -  -  -  		;
   23 D1:AAAF -  -  -  -  		;		Main loop
   24 D1:AAAF -  -  -  -  		;
   25 D1:AAAF -  -  -  -  _CPRLoop:
   26 D1:AAAF DD 7E 00 -  		ld 		a,(ix+0) 					; examine next character
   27 D1:AAB2 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; EOL or :, do new line and exit
   28 D1:AAB4 28 59 -  -  		jr 		z,_CPRExitNL
   29 D1:AAB6 FE A7 -  -  		cp 		KWD_COLON 	
   30 D1:AAB8 28 55 -  -  		jr 		z,_CPRExitNL
   31 D1:AABA FE A8 -  -  		cp 		KWD_SEMICOLON 				; if semicolon, check it's not an ending semicolon
   32 D1:AABC 28 3E -  -  		jr 		z,_CPRCheckNext10
   33 D1:AABE FE A6 -  -  		cp 		KWD_COMMA 					; if comma, print tab
   34 D1:AAC0 28 34 -  -  		jr 		z,_CPRTab
   35 D1:AAC2 FE A9 -  -  		cp 		KWD_SQUOTE 					; is it a single quote, if so print new line.
   36 D1:AAC4 28 2A -  -  		jr 		z,_CPRNewLine
   37 D1:AAC6 FE AC -  -  		cp 		KWD_TILDE 					; tilde, switch to hex mode
   38 D1:AAC8 28 1C -  -  		jr 		z,_CPRHexMode
   39 D1:AACA -  -  -  -  		;
   40 D1:AACA CD 19 AE D1 		call 	EvaluateValue 				; so it must be an expression.		
   41 D1:AACE CB 41 -  -  		bit 	CIsString,c 				; if string, then print it.
   42 D1:AAD0 20 0E -  -  		jr 		nz,_CPRPrintHL
   43 D1:AAD2 -  -  -  -  		;
   44 D1:AAD2 3A 03 A9 D1 		ld 		a,(PrintBase)				; current print mode.
   45 D1:AAD6 -  -  -  -  _CPRPrintNumber:
   46 D1:AAD6 01 21 A9 D1 		ld  	bc,ConvertBuffer
   47 D1:AADA C5 -  -  -  		push 	bc
   48 D1:AADB CD 87 B9 D1 		call 	Int32ToString 				; convert to string
   49 D1:AADF E1 -  -  -  		pop 	hl
   50 D1:AAE0 -  -  -  -  		;
   51 D1:AAE0 -  -  -  -  		; 		Print text at HL.
   52 D1:AAE0 -  -  -  -  		;
   53 D1:AAE0 -  -  -  -  _CPRPrintHL:
   54 D1:AAE0 CD 5A B3 D1 		call 	PrintStringAtHL 			; print string out
   55 D1:AAE4 18 C9 -  -  		jr 		_CPRLoop 					; and loop back.		
   56 D1:AAE6 -  -  -  -  		;
   57 D1:AAE6 -  -  -  -  		;		Hex mode (~)
   58 D1:AAE6 -  -  -  -  		;
   59 D1:AAE6 -  -  -  -  _CPRHexMode:		
   60 D1:AAE6 3E 10 -  -  		ld 		a,16
   61 D1:AAE8 32 03 A9 D1 		ld 		(PrintBase),a
   62 D1:AAEC DD 23 -  -  		inc 	ix
   63 D1:AAEE 18 BF -  -  		jr 		_CPRLoop
   64 D1:AAF0 -  -  -  -  		;
   65 D1:AAF0 -  -  -  -  		; 		New line (')
   66 D1:AAF0 -  -  -  -  		;
   67 D1:AAF0 -  -  -  -  _CPRNewLine:
   68 D1:AAF0 CD 22 BA D1 		call 	SYSPrintCRLF
   69 D1:AAF4 18 0C -  -  		jr 		_CPRCheckNext
   70 D1:AAF6 -  -  -  -  		;
   71 D1:AAF6 -  -  -  -  		; 		Tab command (,)
   72 D1:AAF6 -  -  -  -  		;
   73 D1:AAF6 -  -  -  -  _CPRTab:
   74 D1:AAF6 3E 09 -  -  		ld 		a,9  						; print CHR$(9), tab
   75 D1:AAF8 CD FA B9 D1 		call 	SYSPrintChar
   76 D1:AAFC -  -  -  -  		;
   77 D1:AAFC -  -  -  -  		;		Set to base 10 then check next character
   78 D1:AAFC -  -  -  -  		;
   79 D1:AAFC -  -  -  -  _CPRCheckNext10:		
   80 D1:AAFC 3E F6 -  -  		ld 		a,-10
   81 D1:AAFE 32 03 A9 D1 		ld 		(PrintBase),a
   82 D1:AB02 -  -  -  -  		;
   83 D1:AB02 -  -  -  -  		; 		Check if next character (; and , can end line w/o CR)
   84 D1:AB02 -  -  -  -  		;		
   85 D1:AB02 -  -  -  -  _CPRCheckNext:
   86 D1:AB02 DD 23 -  -  		inc 	ix 							; consume current
   87 D1:AB04 DD 7E 00 -  		ld 		a,(ix+0) 					; return without CR if next is EOL or :
   88 D1:AB07 FE 80 -  -  		cp 		KWC_EOL_MARKER
   89 D1:AB09 C8 -  -  -  		ret 	z
   90 D1:AB0A FE A7 -  -  		cp 		KWD_COLON
   91 D1:AB0C C8 -  -  -  		ret 	z
   92 D1:AB0D 18 A0 -  -  		jr 		_CPRLoop 					; otherwise loop round
   93 D1:AB0F -  -  -  -  		;
   94 D1:AB0F -  -  -  -  		;		Found EOL or : not after ; ,
   95 D1:AB0F -  -  -  -  		;
   96 D1:AB0F -  -  -  -  _CPRExitNL:
   97 D1:AB0F CD 22 BA D1 		call 	SYSPrintCRLF 				; do CR/LF
   98 D1:AB13 C9 -  -  -  		ret
Listing for file "_build.asm"
   22 D1:AB14 -  -  -  -  #include "core/commands/rem.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/rem.asm"
    1 D1:AB14 -  -  -  -  ; ***************************************************************************************
    2 D1:AB14 -  -  -  -  ; ***************************************************************************************
    3 D1:AB14 -  -  -  -  ;
    4 D1:AB14 -  -  -  -  ;		Name : 		rem.asm
    5 D1:AB14 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB14 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB14 -  -  -  -  ;		Reviewed :	No
    8 D1:AB14 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:AB14 -  -  -  -  ;
   10 D1:AB14 -  -  -  -  ; ***************************************************************************************
   11 D1:AB14 -  -  -  -  ; ***************************************************************************************
   12 D1:AB14 -  -  -  -  
   13 D1:AB14 -  -  -  -  ; ***************************************************************************************
   14 D1:AB14 -  -  -  -  ;
   15 D1:AB14 -  -  -  -  ;							Comment command, can be ' or REM
   16 D1:AB14 -  -  -  -  ;				Note for semantic consistency the comment is in a string.
   17 D1:AB14 -  -  -  -  ;
   18 D1:AB14 -  -  -  -  ; ***************************************************************************************
   19 D1:AB14 -  -  -  -  
   20 D1:AB14 -  -  -  -  Command_REM: 	;; [rem]
   21 D1:AB14 -  -  -  -  Command_REM2: 	;; [']
   22 D1:AB14 DD 7E 00 -  		ld 		a,(ix+0) 					; check : EOL or a string follows
   23 D1:AB17 FE 80 -  -  		cp 		KWC_EOL_MARKER 				; exit if end of line.
   24 D1:AB19 C8 -  -  -  		ret 	z
   25 D1:AB1A DD 23 -  -  		inc 	ix
   26 D1:AB1C FE A7 -  -  		cp 		KWD_COLON 					; exit if colon, e.g. end of command
   27 D1:AB1E C8 -  -  -  		ret 	z
   28 D1:AB1F FE 3F -  -  		cp 		STRING_MARKER
   29 D1:AB21 C2 58 AC D1 		jp 		nz,SyntaxError
   30 D1:AB25 -  -  -  -  		;		
   31 D1:AB25 11 00 00 00 		ld 		de,$0000 					; length + 2 into DE (length, and NULL)
   32 D1:AB29 DD 5E 00 -  		ld 		e,(ix+0)
   33 D1:AB2C 13 -  -  -  		inc 	de 
   34 D1:AB2D 13 -  -  -  		inc 	de
   35 D1:AB2E DD 19 -  -  		add 	ix,de 						; skip string
   36 D1:AB30 C9 -  -  -  		ret
   37 D1:AB31 -  -  -  -  
   38 D1:AB31 -  -  -  -  ; ***************************************************************************************
   39 D1:AB31 -  -  -  -  ;
   40 D1:AB31 -  -  -  -  ;									Changes and Updates
   41 D1:AB31 -  -  -  -  ;
   42 D1:AB31 -  -  -  -  ; ***************************************************************************************
   43 D1:AB31 -  -  -  -  ;
   44 D1:AB31 -  -  -  -  ;		Date			Notes
   45 D1:AB31 -  -  -  -  ;		==== 			=====
   46 D1:AB31 -  -  -  -  ;
   47 D1:AB31 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   23 D1:AB31 -  -  -  -  #include "core/commands/run.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
    1 D1:AB31 -  -  -  -  ; ***************************************************************************************
    2 D1:AB31 -  -  -  -  ; ***************************************************************************************
    3 D1:AB31 -  -  -  -  ;
    4 D1:AB31 -  -  -  -  ;		Name : 		run.asm
    5 D1:AB31 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AB31 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AB31 -  -  -  -  ;		Reviewed :	No
    8 D1:AB31 -  -  -  -  ;		Purpose :	Run command
    9 D1:AB31 -  -  -  -  ;
   10 D1:AB31 -  -  -  -  ; ***************************************************************************************
   11 D1:AB31 -  -  -  -  ; ***************************************************************************************
   12 D1:AB31 -  -  -  -  
   13 D1:AB31 -  -  -  -  ; ***************************************************************************************
   14 D1:AB31 -  -  -  -  ;
   15 D1:AB31 -  -  -  -  ;										RUN command
   16 D1:AB31 -  -  -  -  ;
   17 D1:AB31 -  -  -  -  ; ***************************************************************************************
   18 D1:AB31 -  -  -  -  
   19 D1:AB31 -  -  -  -  Command_RUN: 	;; [run]
   20 D1:AB31 CD 29 B1 D1 		call 	Command_CLEAR 				; clear all variables, stack
   21 D1:AB35 -  -  -  -  
   22 D1:AB35 DD 2A B9 A8 
              D1 -  -  -  		ld 		ix,(CodeAddress) 			; start from this line, e.g. the first line.
   23 D1:AB3A ED 73 E1 A8 
              D1 -  -  -  		ld 		(RunStackPtr),sp 			; save Z80 SP
   24 D1:AB3F AF -  -  -  		xor 	a
   25 D1:AB40 32 01 A9 D1 		ld 		(AllowAutoCreate),a 		; clear the flag allowing auto-create of simple variables.
   26 D1:AB44 -  -  -  -  		;
   27 D1:AB44 -  -  -  -  		; 		New line at IX.
   28 D1:AB44 -  -  -  -  		;
   29 D1:AB44 -  -  -  -  CRNewLine:
   30 D1:AB44 DD 22 DD A8 
              D1 -  -  -  		ld 		(CurrentLineStart),ix 		; mark the current line.
   31 D1:AB49 -  -  -  -  		;
   32 D1:AB49 DD 7E 00 -  		ld 		a,(ix+0) 					; look at the offset, if zero end of program.
   33 D1:AB4C B7 -  -  -  		or 		a
   34 D1:AB4D CA 27 AA D1 		jp 		z,Command_END 				; if so, do an END, warm start
   35 D1:AB51 -  -  -  -  		;
   36 D1:AB51 DD 23 -  -  		inc 	ix 							; point to first token, skip length, line#
   37 D1:AB53 DD 23 -  -  		inc 	ix  						; (line nos are just for sorting and backwards compatibility)
   38 D1:AB55 DD 23 -  -  		inc 	ix
   39 D1:AB57 -  -  -  -  		;
   40 D1:AB57 -  -  -  -  		; 		New command at IX
   41 D1:AB57 -  -  -  -  		;
   42 D1:AB57 -  -  -  -  _CRNewCommand:	
   43 D1:AB57 DD 7E 00 -  		ld 		a,(ix+0)					; get token
   44 D1:AB5A B7 -  -  -  		or 		a 							; set flags, checking if 80-FF, e.g. a keyword
   45 D1:AB5B F2 96 AB D1 		jp 		p,_CRAssignmentHandler 		; if 00-7F can only be a LET default (A=42)
   46 D1:AB5F -  -  -  -  		;
   47 D1:AB5F FE A5 -  -  		cp 		KWC_FIRST_NORMAL 			; not a binary/unary operator.
   48 D1:AB61 30 06 -  -  		jr  	nc,_CRDoCommand
   49 D1:AB63 FE 83 -  -  		cp 		KWC_FIRST_BINARY
   50 D1:AB65 D2 86 AB D1 		jp 		nc,_CRAlternateLets
   51 D1:AB69 -  -  -  -  		;
   52 D1:AB69 -  -  -  -  _CRDoCommand:		
   53 D1:AB69 E6 7F 21 00 
              00 00 6F 29 
              29 11 90 B6 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0)   			; Set up JumpCode
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/run.asm"
   54 D1:AB7E DD 23 -  -  		inc 	ix 							; skip over token.
   55 D1:AB80 CD E5 A8 D1 		call 	JumpCode 					; call the routine.
   56 D1:AB84 18 D1 -  -  		jr 		_CRNewCommand 				; and loop back.
   57 D1:AB86 -  -  -  -  		;
   58 D1:AB86 -  -  -  -  		; 		Do CALL (HL)
   59 D1:AB86 -  -  -  -  		;
   60 D1:AB86 -  -  -  -  		;
   61 D1:AB86 -  -  -  -  		;		Check for alternate lets $x !x ?x which are all binary and/or unary operators
   62 D1:AB86 -  -  -  -  		;		
   63 D1:AB86 -  -  -  -  _CRAlternateLets:		
   64 D1:AB86 FE 83 -  -  		cp 		KWD_PLING
   65 D1:AB88 28 12 -  -  		jr 		z,_CRAssignmentLet
   66 D1:AB8A FE 84 -  -  		cp 		KWD_QMARK
   67 D1:AB8C 28 0E -  -  		jr 		z,_CRAssignmentLet
   68 D1:AB8E FE 96 -  -  		cp 		KWD_DOLLAR
   69 D1:AB90 28 0A -  -  		jr 		z,_CRAssignmentLet
   70 D1:AB92 C3 58 AC D1 		jp 		SyntaxError
   71 D1:AB96 -  -  -  -  		;
   72 D1:AB96 -  -  -  -  		; 		Come here if 00-7F tokens, e.g. must be an identifier or syntax error.
   73 D1:AB96 -  -  -  -  		;
   74 D1:AB96 -  -  -  -  _CRAssignmentHandler:		
   75 D1:AB96 FE 26 -  -  		cp 		IDENTIFIER_END 				; check what follows is an identifier.
   76 D1:AB98 D2 58 AC D1 		jp 		nc,SyntaxError
   77 D1:AB9C -  -  -  -  _CRAssignmentLet:		
   78 D1:AB9C CD 44 AA D1 		call	Command_LET 				; do LET.
   79 D1:ABA0 C3 57 AB D1 		jp 		_CRNewCommand
   80 D1:ABA4 -  -  -  -  
   81 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   82 D1:ABA4 -  -  -  -  ;
   83 D1:ABA4 -  -  -  -  ;									Changes and Updates
   84 D1:ABA4 -  -  -  -  ;
   85 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   86 D1:ABA4 -  -  -  -  ;
   87 D1:ABA4 -  -  -  -  ;		Date			Notes
   88 D1:ABA4 -  -  -  -  ;		==== 			=====
   89 D1:ABA4 -  -  -  -  ;
   90 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   91 D1:ABA4 -  -  -  -  		
Listing for file "_build.asm"
   24 D1:ABA4 -  -  -  -  #include "core/commands/stop.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
    1 D1:ABA4 -  -  -  -  ; ***************************************************************************************
    2 D1:ABA4 -  -  -  -  ; ***************************************************************************************
    3 D1:ABA4 -  -  -  -  ;
    4 D1:ABA4 -  -  -  -  ;		Name : 		stop.asm
    5 D1:ABA4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABA4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABA4 -  -  -  -  ;		Reviewed :	No
    8 D1:ABA4 -  -  -  -  ;		Purpose :	Stop command
    9 D1:ABA4 -  -  -  -  ;
   10 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   11 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   12 D1:ABA4 -  -  -  -  
   13 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   14 D1:ABA4 -  -  -  -  ;
   15 D1:ABA4 -  -  -  -  ;										STOP command
   16 D1:ABA4 -  -  -  -  ;
   17 D1:ABA4 -  -  -  -  ; ***************************************************************************************
   18 D1:ABA4 -  -  -  -  
   19 D1:ABA4 -  -  -  -  Command_STOP: 	;; [stop]
   20 D1:ABA4 3E 13 C3 EE 
              AB D1 -  -  		ERR_STOP
Listing for file "/home/paulr/Projects/dax-basic/source/core/commands/stop.asm"
   21 D1:ABAA -  -  -  -  
   22 D1:ABAA -  -  -  -  ; ***************************************************************************************
   23 D1:ABAA -  -  -  -  ;
   24 D1:ABAA -  -  -  -  ;									Changes and Updates
   25 D1:ABAA -  -  -  -  ;
   26 D1:ABAA -  -  -  -  ; ***************************************************************************************
   27 D1:ABAA -  -  -  -  ;
   28 D1:ABAA -  -  -  -  ;		Date			Notes
   29 D1:ABAA -  -  -  -  ;		==== 			=====
   30 D1:ABAA -  -  -  -  ;
   31 D1:ABAA -  -  -  -  ; ***************************************************************************************
   32 D1:ABAA -  -  -  -  		
Listing for file "_build.asm"
   25 D1:ABAA -  -  -  -  #include "core/errors/charcheck.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
    1 D1:ABAA -  -  -  -  ; ***************************************************************************************
    2 D1:ABAA -  -  -  -  ; ***************************************************************************************
    3 D1:ABAA -  -  -  -  ;
    4 D1:ABAA -  -  -  -  ;		Name : 		charcheck.asm
    5 D1:ABAA -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABAA -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABAA -  -  -  -  ;		Reviewed :	No
    8 D1:ABAA -  -  -  -  ;		Purpose :	Check next character type functions.
    9 D1:ABAA -  -  -  -  ;
   10 D1:ABAA -  -  -  -  ; ***************************************************************************************
   11 D1:ABAA -  -  -  -  ; ***************************************************************************************
   12 D1:ABAA -  -  -  -  
   13 D1:ABAA -  -  -  -  ; ***************************************************************************************
   14 D1:ABAA -  -  -  -  ;
   15 D1:ABAA -  -  -  -  ; 		Common Macro, can create for any token. Use for common ones like ) and ,
   16 D1:ABAA -  -  -  -  ;
   17 D1:ABAA -  -  -  -  ; ***************************************************************************************
   18 D1:ABAA -  -  -  -  
   19 D1:ABAA -  -  -  -  #macro 	checknext(ch,errorid)
   20 D1:ABAA             		ld 		a,(ix+0) 					; get next character and skip it
   21 D1:ABAA             		inc 	ix
   22 D1:ABAA             		cp 		ch 							; exit if matches
   23 D1:ABAA             		ret 	z
   24 D1:ABAA             		ld  	a,errorid					; otherwise error (nesting macros doesn't work)
   25 D1:ABAA             		jp 		ErrorHandler
   26 D1:ABAA             #endmacro
   27 D1:ABAA -  -  -  -  
   28 D1:ABAA -  -  -  -  CheckLeftBracket:
   29 D1:ABAA DD 7E 00 DD 
              23 FE 95 C8 
              3E 0E C3 EE 
              AB D1 -  -  		checknext(KWD_LPAREN,ERRID_NOLBRACKET)
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/charcheck.asm"
   30 D1:ABB8 -  -  -  -  
   31 D1:ABB8 -  -  -  -  CheckRightBracket:
   32 D1:ABB8 DD 7E 00 DD 
              23 FE A5 C8 
              3E 0F C3 EE 
              AB D1 -  -  		checknext(KWD_RPAREN,ERRID_NORBRACKET)
   33 D1:ABC6 -  -  -  -  
   34 D1:ABC6 -  -  -  -  CheckDollar:
   35 D1:ABC6 DD 7E 00 DD 
              23 FE 96 C8 
              3E 0D C3 EE 
              AB D1 -  -  		checkNext(KWD_DOLLAR,ERRID_NODOLLAR)
   36 D1:ABD4 -  -  -  -  		
   37 D1:ABD4 -  -  -  -  CheckComma:
   38 D1:ABD4 DD 7E 00 DD 
              23 FE A6 C8 
              3E 0C C3 EE 
              AB D1 -  -  		checknext(KWD_COMMA,ERRID_NOCOMMA)		
   39 D1:ABE2 -  -  -  -  
   40 D1:ABE2 -  -  -  -  ; ***************************************************************************************
   41 D1:ABE2 -  -  -  -  ;
   42 D1:ABE2 -  -  -  -  ; 							Check A, gives Syntax Error
   43 D1:ABE2 -  -  -  -  ;
   44 D1:ABE2 -  -  -  -  ; ***************************************************************************************
   45 D1:ABE2 -  -  -  -  
   46 D1:ABE2 -  -  -  -  CheckNextA:
   47 D1:ABE2 DD BE 00 -  		cp 		a,(ix+0) 					; match ?
   48 D1:ABE5 DD 23 -  -  		inc 	ix 							; skip character
   49 D1:ABE7 C8 -  -  -  		ret 	z 							; yes, okay
   50 D1:ABE8 3E 14 C3 EE 
              AB D1 -  -  		ERR_SYNTAX 							; no, syntax error.
   51 D1:ABEE -  -  -  -  		
   52 D1:ABEE -  -  -  -  ; ***************************************************************************************
   53 D1:ABEE -  -  -  -  ;
   54 D1:ABEE -  -  -  -  ;									Changes and Updates
   55 D1:ABEE -  -  -  -  ;
   56 D1:ABEE -  -  -  -  ; ***************************************************************************************
   57 D1:ABEE -  -  -  -  ;
   58 D1:ABEE -  -  -  -  ;		Date			Notes
   59 D1:ABEE -  -  -  -  ;		==== 			=====
   60 D1:ABEE -  -  -  -  ;
   61 D1:ABEE -  -  -  -  ; ***************************************************************************************
   62 D1:ABEE -  -  -  -  		
Listing for file "_build.asm"
   26 D1:ABEE -  -  -  -  #include "core/errors/errors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
    1 D1:ABEE -  -  -  -  ; ***************************************************************************************
    2 D1:ABEE -  -  -  -  ; ***************************************************************************************
    3 D1:ABEE -  -  -  -  ;
    4 D1:ABEE -  -  -  -  ;		Name : 		errors.asm
    5 D1:ABEE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ABEE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ABEE -  -  -  -  ;		Reviewed :	No
    8 D1:ABEE -  -  -  -  ;		Purpose :	ErrorHandler
    9 D1:ABEE -  -  -  -  ;
   10 D1:ABEE -  -  -  -  ; ***************************************************************************************
   11 D1:ABEE -  -  -  -  ; ***************************************************************************************
   12 D1:ABEE -  -  -  -  
   13 D1:ABEE -  -  -  -  ; ***************************************************************************************
   14 D1:ABEE -  -  -  -  ;
   15 D1:ABEE -  -  -  -  ;								Error handler, message A 
   16 D1:ABEE -  -  -  -  ;
   17 D1:ABEE -  -  -  -  ; ***************************************************************************************
   18 D1:ABEE -  -  -  -  
   19 D1:ABEE -  -  -  -  ErrorHandler:
   20 D1:ABEE F5 -  -  -  		push 	af 						; save error ID
   21 D1:ABEF -  -  -  -  
   22 D1:ABEF 21 00 00 00 		ld 		hl,0  					; put message# in HL,24 bit compatible
   23 D1:ABF3 6F -  -  -  		ld 		l,a
   24 D1:ABF4 29 -  -  -  		add 	hl,hl 					; x 4
   25 D1:ABF5 29 -  -  -  		add 	hl,hl 		
   26 D1:ABF6 11 D1 B4 D1 		ld 		de,ErrorIDTable 		; point HL to address, in generated table.
   27 D1:ABFA 19 -  -  -  		add 	hl,de
   28 D1:ABFB ED 27 -  -  		ld_ind_hl 						; load hl,(hl) to get address in HL.
Listing for file "/home/paulr/Projects/dax-basic/source/core/errors/errors.asm"
   29 D1:ABFD CD 5A B3 D1 		call 	PrintStringAtHL
   30 D1:AC01 -  -  -  -  		;
   31 D1:AC01 F1 -  -  -  		pop 	af 						; restore error ID
   32 D1:AC02 B7 -  -  -  		or 		a 						; no line # if error #zero (warmstart)
   33 D1:AC03 28 2F -  -  		jr 		z,_EHExit
   34 D1:AC05 -  -  -  -  		;
   35 D1:AC05 DD 2A DD A8 
              D1 -  -  -  		ld 		ix,(CurrentLineStart) 	; get line
   36 D1:AC0A DD 7E 00 -  		ld 		a,(ix+0) 				; check offset zero, if so , off the end.
   37 D1:AC0D B7 -  -  -  		or 		a
   38 D1:AC0E 28 24 -  -  		jr 		z,_EHExit
   39 D1:AC10 -  -  -  -  
   40 D1:AC10 21 3C AC D1 		ld 		hl,_EHAtText 			; print "at line"
   41 D1:AC14 CD 5A B3 D1 		call 	PrintStringAtHL 
   42 D1:AC18 -  -  -  -  		
   43 D1:AC18 D9 -  -  -  		exx								; HL'HL = line number
   44 D1:AC19 21 00 00 00 		ld 		hl,$0000 		
   45 D1:AC1D D9 -  -  -  		exx 
   46 D1:AC1E DD 6E 01 -  		ld 		l,(ix+1)
   47 D1:AC21 DD 66 02 -  		ld 		h,(ix+2)
   48 D1:AC24 3E 0A -  -  		ld 		a,10 					; convert in base 10
   49 D1:AC26 01 21 A9 D1 		ld 		bc,ConvertBuffer
   50 D1:AC2A CD 87 B9 D1 		call 	Int32ToString
   51 D1:AC2E C5 -  -  -  		push 	bc
   52 D1:AC2F E1 -  -  -  		pop 	hl
   53 D1:AC30 CD 5A B3 D1 		call 	PrintStringAtHL			; print error line number.
   54 D1:AC34 -  -  -  -  _EHExit:		
   55 D1:AC34 CD 22 BA D1 		call 	SYSPrintCRLF 			; print carriage return
   56 D1:AC38 C3 9B A8 D1 		jp 		WarmStart
   57 D1:AC3C -  -  -  -  
   58 D1:AC3C -  -  -  -  _EHAtText:
   59 D1:AC3C 20 61 74 20 
              6C 69 6E 65 
              20 00 -  -  		.db 	" at line ",0
   60 D1:AC46 -  -  -  -  
   61 D1:AC46 -  -  -  -  NotImplemented:
   62 D1:AC46 3E 05 C3 EE 
              AB D1 -  -  		ERR_DISABLED
   63 D1:AC4C -  -  -  -  TypeMismatch:
   64 D1:AC4C 3E 02 C3 EE 
              AB D1 -  -  		ERR_BADTYPE
   65 D1:AC52 -  -  -  -  BadValue:
   66 D1:AC52 3E 03 C3 EE 
              AB D1 -  -  		ERR_BADVALUE
   67 D1:AC58 -  -  -  -  SyntaxError:
   68 D1:AC58 3E 14 C3 EE 
              AB D1 -  -  		ERR_SYNTAX
   69 D1:AC5E -  -  -  -  						
   70 D1:AC5E -  -  -  -  ; ***************************************************************************************
   71 D1:AC5E -  -  -  -  ;
   72 D1:AC5E -  -  -  -  ;									Changes and Updates
   73 D1:AC5E -  -  -  -  ;
   74 D1:AC5E -  -  -  -  ; ***************************************************************************************
   75 D1:AC5E -  -  -  -  ;
   76 D1:AC5E -  -  -  -  ;		Date			Notes
   77 D1:AC5E -  -  -  -  ;		==== 			=====
   78 D1:AC5E -  -  -  -  ;
   79 D1:AC5E -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   27 D1:AC5E -  -  -  -  #include "core/expression/binary/basicmath.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
    1 D1:AC5E -  -  -  -  ; ***************************************************************************************
    2 D1:AC5E -  -  -  -  ; ***************************************************************************************
    3 D1:AC5E -  -  -  -  ;
    4 D1:AC5E -  -  -  -  ;		Name : 		basicmath.asm
    5 D1:AC5E -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AC5E -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AC5E -  -  -  -  ;		Reviewed :	No
    8 D1:AC5E -  -  -  -  ;		Purpose :	Basic mathematics handlers
    9 D1:AC5E -  -  -  -  ;
   10 D1:AC5E -  -  -  -  ; ***************************************************************************************
   11 D1:AC5E -  -  -  -  ; ***************************************************************************************
   12 D1:AC5E -  -  -  -  
   13 D1:AC5E -  -  -  -  ; ***************************************************************************************
   14 D1:AC5E -  -  -  -  ;
   15 D1:AC5E -  -  -  -  ; 									Addition
   16 D1:AC5E -  -  -  -  ;
   17 D1:AC5E -  -  -  -  ; ***************************************************************************************
   18 D1:AC5E -  -  -  -  
   19 D1:AC5E -  -  -  -  ALUAdd: 		;; [+]
   20 D1:AC5E CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 06 
              B9 D1 -  -  		IntegerDispatch(Int32Add)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/basicmath.asm"
   21 D1:AC6C -  -  -  -  
   22 D1:AC6C -  -  -  -  ; ***************************************************************************************
   23 D1:AC6C -  -  -  -  ;
   24 D1:AC6C -  -  -  -  ; 									Subtraction
   25 D1:AC6C -  -  -  -  ;
   26 D1:AC6C -  -  -  -  ; ***************************************************************************************
   27 D1:AC6C -  -  -  -  
   28 D1:AC6C -  -  -  -  ALUSubtract: 	;; [-]
   29 D1:AC6C CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 0E 
              B9 D1 -  -  		IntegerDispatch(Int32Subtract)
   30 D1:AC7A -  -  -  -  
   31 D1:AC7A -  -  -  -  ; ***************************************************************************************
   32 D1:AC7A -  -  -  -  ;
   33 D1:AC7A -  -  -  -  ; 									  Multiply
   34 D1:AC7A -  -  -  -  ;
   35 D1:AC7A -  -  -  -  ; ***************************************************************************************
   36 D1:AC7A -  -  -  -  
   37 D1:AC7A -  -  -  -  ALUMultiply: 	;; [*]
   38 D1:AC7A CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 CD 
              B8 D1 -  -  		IntegerDispatch(Int32Multiply)
   39 D1:AC88 -  -  -  -  
   40 D1:AC88 -  -  -  -  ; ***************************************************************************************
   41 D1:AC88 -  -  -  -  ;
   42 D1:AC88 -  -  -  -  ; 									  Divide
   43 D1:AC88 -  -  -  -  ;
   44 D1:AC88 -  -  -  -  ; ***************************************************************************************
   45 D1:AC88 -  -  -  -  
   46 D1:AC88 -  -  -  -  ALUDivide: 	;; [/]
   47 D1:AC88 -  -  -  -  ALUDivide2:	;; [div]
   48 D1:AC88 CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 CD 
              B7 D1 -  -  		IntegerDispatch(Int32SDivide)
   49 D1:AC96 -  -  -  -  
   50 D1:AC96 -  -  -  -  ; ***************************************************************************************
   51 D1:AC96 -  -  -  -  ;
   52 D1:AC96 -  -  -  -  ; 									  Modulus
   53 D1:AC96 -  -  -  -  ;
   54 D1:AC96 -  -  -  -  ; ***************************************************************************************
   55 D1:AC96 -  -  -  -  
   56 D1:AC96 -  -  -  -  ALUModulus: 	;; [mod]
   57 D1:AC96 CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 D0 
              B7 D1 -  -  		IntegerDispatch(Int32Modulus)
   58 D1:ACA4 -  -  -  -  
   59 D1:ACA4 -  -  -  -  ; ***************************************************************************************
   60 D1:ACA4 -  -  -  -  ;
   61 D1:ACA4 -  -  -  -  ; 									  Logical
   62 D1:ACA4 -  -  -  -  ;
   63 D1:ACA4 -  -  -  -  ; ***************************************************************************************
   64 D1:ACA4 -  -  -  -  
   65 D1:ACA4 -  -  -  -  ALUAnd: 		;; [and]
   66 D1:ACA4 CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 18 
              B9 D1 -  -  		IntegerDispatch(Int32And)
   67 D1:ACB2 -  -  -  -  
   68 D1:ACB2 -  -  -  -  ALUOr: 			;; [or]
   69 D1:ACB2 CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 25 
              B9 D1 -  -  		IntegerDispatch(Int32Or)
   70 D1:ACC0 -  -  -  -  
   71 D1:ACC0 -  -  -  -  ALUXor: 		;; [eor]
   72 D1:ACC0 CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 32 
              B9 D1 -  -  		IntegerDispatch(Int32Xor)
   73 D1:ACCE -  -  -  -  
   74 D1:ACCE -  -  -  -  ; ***************************************************************************************
   75 D1:ACCE -  -  -  -  ;
   76 D1:ACCE -  -  -  -  ;									Changes and Updates
   77 D1:ACCE -  -  -  -  ;
   78 D1:ACCE -  -  -  -  ; ***************************************************************************************
   79 D1:ACCE -  -  -  -  ;
   80 D1:ACCE -  -  -  -  ;		Date			Notes
   81 D1:ACCE -  -  -  -  ;		==== 			=====
   82 D1:ACCE -  -  -  -  ;
   83 D1:ACCE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   28 D1:ACCE -  -  -  -  #include "core/expression/binary/binrefs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
    1 D1:ACCE -  -  -  -  ; ***************************************************************************************
    2 D1:ACCE -  -  -  -  ; ***************************************************************************************
    3 D1:ACCE -  -  -  -  ;
    4 D1:ACCE -  -  -  -  ;		Name : 		binrefs.asm
    5 D1:ACCE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACCE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACCE -  -  -  -  ;		Reviewed :	No
    8 D1:ACCE -  -  -  -  ;		Purpose :	Binary reference operators ! ?
    9 D1:ACCE -  -  -  -  ;
   10 D1:ACCE -  -  -  -  ; ***************************************************************************************
   11 D1:ACCE -  -  -  -  ; ***************************************************************************************
   12 D1:ACCE -  -  -  -  
   13 D1:ACCE -  -  -  -  ; ***************************************************************************************
   14 D1:ACCE -  -  -  -  ;
   15 D1:ACCE -  -  -  -  ; 									<l> <op> <r>
   16 D1:ACCE -  -  -  -  ;
   17 D1:ACCE -  -  -  -  ; ***************************************************************************************
   18 D1:ACCE -  -  -  -  
   19 D1:ACCE -  -  -  -  ALULongReference:			;; [!]
   20 D1:ACCE CD DE AC D1 		call 	BRGetAddress 				; calculate address
   21 D1:ACD2 0E 00 -  -  		ld  	c,XTYPE_INTEGER
   22 D1:ACD4 CB F9 -  -  		set 	CIsReference,c
   23 D1:ACD6 C9 -  -  -  		ret
   24 D1:ACD7 -  -  -  -  
   25 D1:ACD7 -  -  -  -  ALUByteReference: 			;; [?]
   26 D1:ACD7 CD CE AC D1 		call 	ALULongReference
   27 D1:ACDB CB F1 -  -  		set 	CIsByteReference,c
   28 D1:ACDD C9 -  -  -  		ret
   29 D1:ACDE -  -  -  -  
   30 D1:ACDE -  -  -  -  BRGetAddress: 								; so we add the left and right values and return a reference.
   31 D1:ACDE CD 7B AD D1 
              78 B1 C2 4C 
              AC D1 C3 EC 
              AC D1 -  -  		IntegerDispatch(_BRGAMain)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/binrefs.asm"
   32 D1:ACEC -  -  -  -  _BRGAMain:		
   33 D1:ACEC CD 06 B9 D1 		call 	Int32Add 					; address in HL'HL
   34 D1:ACF0 CD 81 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
   35 D1:ACF4 C9 -  -  -  		ret
   36 D1:ACF5 -  -  -  -  
   37 D1:ACF5 -  -  -  -  ; ***************************************************************************************
   38 D1:ACF5 -  -  -  -  ;
   39 D1:ACF5 -  -  -  -  ;									Changes and Updates
   40 D1:ACF5 -  -  -  -  ;
   41 D1:ACF5 -  -  -  -  ; ***************************************************************************************
   42 D1:ACF5 -  -  -  -  ;
   43 D1:ACF5 -  -  -  -  ;		Date			Notes
   44 D1:ACF5 -  -  -  -  ;		==== 			=====
   45 D1:ACF5 -  -  -  -  ;
   46 D1:ACF5 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   29 D1:ACF5 -  -  -  -  #include "core/expression/binary/compare.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
    1 D1:ACF5 -  -  -  -  ; ***************************************************************************************
    2 D1:ACF5 -  -  -  -  ; ***************************************************************************************
    3 D1:ACF5 -  -  -  -  ;
    4 D1:ACF5 -  -  -  -  ;		Name : 		compare.asm
    5 D1:ACF5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ACF5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ACF5 -  -  -  -  ;		Reviewed :	No
    8 D1:ACF5 -  -  -  -  ;		Purpose :	Comparison code
    9 D1:ACF5 -  -  -  -  ;
   10 D1:ACF5 -  -  -  -  ; ***************************************************************************************
   11 D1:ACF5 -  -  -  -  ; ***************************************************************************************
   12 D1:ACF5 -  -  -  -  
   13 D1:ACF5 -  -  -  -  #macro compare_equals(n)
   14 D1:ACF5             		call 	CompareBaseCode
   15 D1:ACF5             		cp 		n
   16 D1:ACF5             		jr 		z,UnaryInt32True
   17 D1:ACF5             		jr 		UnaryInt32False
   18 D1:ACF5             #endmacro
   19 D1:ACF5 -  -  -  -  
   20 D1:ACF5 -  -  -  -  #macro compare_not_equals(n)
   21 D1:ACF5             		call 	CompareBaseCode
   22 D1:ACF5             		cp 		n
   23 D1:ACF5             		jr 		nz,UnaryInt32True
   24 D1:ACF5             		jr 		UnaryInt32False
   25 D1:ACF5             #endmacro
   26 D1:ACF5 -  -  -  -  
   27 D1:ACF5 -  -  -  -  ; ***************************************************************************************
   28 D1:ACF5 -  -  -  -  ;
   29 D1:ACF5 -  -  -  -  ; 								Return True/False
   30 D1:ACF5 -  -  -  -  ;
   31 D1:ACF5 -  -  -  -  ; ***************************************************************************************
   32 D1:ACF5 -  -  -  -  
   33 D1:ACF5 -  -  -  -  UnaryInt32True:	;; [true]
   34 D1:ACF5 3E FF -  -  		ld 		a,255
   35 D1:ACF7 18 01 -  -  		jr 		_Int32Logical
   36 D1:ACF9 -  -  -  -  UnaryInt32False: ;; [false]
   37 D1:ACF9 AF -  -  -  		xor 	a
   38 D1:ACFA -  -  -  -  _Int32Logical:
   39 D1:ACFA 6F -  -  -  		ld 		l,a 						; copy A to H L H' L'
   40 D1:ACFB 67 -  -  -  		ld 		h,a
   41 D1:ACFC D9 -  -  -  		exx
   42 D1:ACFD 6F -  -  -  		ld 		l,a
   43 D1:ACFE 67 -  -  -  		ld 		h,a
   44 D1:ACFF D9 -  -  -  		exx
   45 D1:AD00 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer
   46 D1:AD02 C9 -  -  -  		ret
   47 D1:AD03 -  -  -  -  
   48 D1:AD03 -  -  -  -  ; ***************************************************************************************
   49 D1:AD03 -  -  -  -  ;
   50 D1:AD03 -  -  -  -  ; 										> = < (compare == value)
   51 D1:AD03 -  -  -  -  ;
   52 D1:AD03 -  -  -  -  ; ***************************************************************************************
   53 D1:AD03 -  -  -  -  
   54 D1:AD03 -  -  -  -  ALUCompareEqual: 			;; [=]
   55 D1:AD03 CD 3F AD D1 
              FE 00 28 EA 
              18 EC -  -  		compare_equals(0)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/compare.asm"
   56 D1:AD0D -  -  -  -  
   57 D1:AD0D -  -  -  -  ALUCompareLess: 			;; [<]
   58 D1:AD0D CD 3F AD D1 
              FE FF 28 E0 
              18 E2 -  -  		compare_equals($FF)
   59 D1:AD17 -  -  -  -  
   60 D1:AD17 -  -  -  -  ALUCompareGreater: 			;; [>]
   61 D1:AD17 CD 3F AD D1 
              FE 01 28 D6 
              18 D8 -  -  		compare_equals(1)
   62 D1:AD21 -  -  -  -  
   63 D1:AD21 -  -  -  -  ; ***************************************************************************************
   64 D1:AD21 -  -  -  -  ;
   65 D1:AD21 -  -  -  -  ; 										> = < (compare <> value)
   66 D1:AD21 -  -  -  -  ;
   67 D1:AD21 -  -  -  -  ; ***************************************************************************************
   68 D1:AD21 -  -  -  -  
   69 D1:AD21 -  -  -  -  ALUCompareNotEqual: 		;; [<>]
   70 D1:AD21 CD 3F AD D1 
              FE 00 20 CC 
              18 CE -  -  		compare_not_equals(0)
   71 D1:AD2B -  -  -  -  
   72 D1:AD2B -  -  -  -  ALUCompareLessEqual: 		;; [<=]
   73 D1:AD2B CD 3F AD D1 
              FE 01 20 C2 
              18 C4 -  -  		compare_not_equals(1)
   74 D1:AD35 -  -  -  -  
   75 D1:AD35 -  -  -  -  ALUCompareGreaterEqual: 	;; [>=]
   76 D1:AD35 CD 3F AD D1 
              FE FF 20 B8 
              18 BA -  -  		compare_not_equals($FF)
   77 D1:AD3F -  -  -  -  
   78 D1:AD3F -  -  -  -  ; ***************************************************************************************
   79 D1:AD3F -  -  -  -  ;
   80 D1:AD3F -  -  -  -  ; 							Compare two values, return $FF,0,1
   81 D1:AD3F -  -  -  -  ;
   82 D1:AD3F -  -  -  -  ; ***************************************************************************************
   83 D1:AD3F -  -  -  -  
   84 D1:AD3F -  -  -  -  CompareBaseCode:
   85 D1:AD3F CD 7B AD D1 		call 	DereferenceBoth 			; dereference both L & R
   86 D1:AD43 -  -  -  -  
   87 D1:AD43 78 -  -  -  		ld 		a,b 						; check if both string.
   88 D1:AD44 A1 -  -  -  		and 	c
   89 D1:AD45 CB 47 -  -  		bit 	CIsString,a 
   90 D1:AD47 C2 59 AD D1 		jp 		nz,StringCompare
   91 D1:AD4B -  -  -  -  
   92 D1:AD4B 78 -  -  -  		ld 		a,b 						; check if either is string
   93 D1:AD4C B1 -  -  -  		or 		c
   94 D1:AD4D CB 47 -  -  		bit 	CIsString,a 
   95 D1:AD4F CA 46 B9 D1 		jp 		z,Int32Compare 				; if not do as integer
   96 D1:AD53 -  -  -  -  
   97 D1:AD53 3E 02 C3 EE 
              AB D1 -  -  		ERR_BADTYPE 						; trying to do int<str>comparison
   98 D1:AD59 -  -  -  -  ;
   99 D1:AD59 -  -  -  -  ;		Compare (HL) - (DE), String comparison.
  100 D1:AD59 -  -  -  -  ;
  101 D1:AD59 -  -  -  -  StringCompare:
  102 D1:AD59 1A -  -  -  		ld 		a,(de) 						; note compares are backwards
  103 D1:AD5A BE -  -  -  		cp 		(hl)
  104 D1:AD5B 38 0D -  -  		jr 		c,_SCGreater 				; so < returns +1
  105 D1:AD5D 20 08 -  -  		jr 		nz,_SCLess
  106 D1:AD5F 13 -  -  -  		inc 	de 							; keep going, <$20 match.
  107 D1:AD60 23 -  -  -  		inc 	hl
  108 D1:AD61 FE 20 -  -  		cp 		' '
  109 D1:AD63 30 F4 -  -  		jr 		nc,StringCompare
  110 D1:AD65 AF -  -  -  		xor 	a 							; return 0.
  111 D1:AD66 C9 -  -  -  		ret
  112 D1:AD67 -  -  -  -  
  113 D1:AD67 -  -  -  -  _SCLess:
  114 D1:AD67 3E FF -  -  		ld 		a,$FF
  115 D1:AD69 C9 -  -  -  		ret
  116 D1:AD6A -  -  -  -  _SCGreater:
  117 D1:AD6A 3E 01 -  -  		ld 		a,1
  118 D1:AD6C C9 -  -  -  		ret
  119 D1:AD6D -  -  -  -  
  120 D1:AD6D 3E 15 C3 EE 
              AB D1 -  -  		ERR_TODO()
  121 D1:AD73 -  -  -  -  
  122 D1:AD73 -  -  -  -  ; ***************************************************************************************
  123 D1:AD73 -  -  -  -  ;
  124 D1:AD73 -  -  -  -  ;									Changes and Updates
  125 D1:AD73 -  -  -  -  ;
  126 D1:AD73 -  -  -  -  ; ***************************************************************************************
  127 D1:AD73 -  -  -  -  ;
  128 D1:AD73 -  -  -  -  ;		Date			Notes
  129 D1:AD73 -  -  -  -  ;		==== 			=====
  130 D1:AD73 -  -  -  -  ;
  131 D1:AD73 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   30 D1:AD73 -  -  -  -  #include "core/expression/binary/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/binary/utility.asm"
    1 D1:AD73 -  -  -  -  ; ***************************************************************************************
    2 D1:AD73 -  -  -  -  ; ***************************************************************************************
    3 D1:AD73 -  -  -  -  ;
    4 D1:AD73 -  -  -  -  ;		Name : 		utility.asm
    5 D1:AD73 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AD73 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AD73 -  -  -  -  ;		Reviewed :	No
    8 D1:AD73 -  -  -  -  ;		Purpose :	Basic mathematics utilities
    9 D1:AD73 -  -  -  -  ;
   10 D1:AD73 -  -  -  -  ; ***************************************************************************************
   11 D1:AD73 -  -  -  -  ; ***************************************************************************************
   12 D1:AD73 -  -  -  -  
   13 D1:AD73 -  -  -  -  ; ***************************************************************************************
   14 D1:AD73 -  -  -  -  ;
   15 D1:AD73 -  -  -  -  ;							   Swap B:DE'DE and C:HL'HL
   16 D1:AD73 -  -  -  -  ;
   17 D1:AD73 -  -  -  -  ; ***************************************************************************************
   18 D1:AD73 -  -  -  -  
   19 D1:AD73 -  -  -  -  SwapHLDE:
   20 D1:AD73 EB -  -  -  			ex 		de,hl 					; swap DE'DE and HL'HL
   21 D1:AD74 D9 -  -  -  			exx
   22 D1:AD75 EB -  -  -  			ex 		de,hl
   23 D1:AD76 D9 -  -  -  			exx
   24 D1:AD77 78 -  -  -  			ld 		a,b 					; swap B & C
   25 D1:AD78 41 -  -  -  			ld 		b,c
   26 D1:AD79 4F -  -  -  			ld 		c,a
   27 D1:AD7A C9 -  -  -  			ret
   28 D1:AD7B -  -  -  -  
   29 D1:AD7B -  -  -  -  ; ***************************************************************************************
   30 D1:AD7B -  -  -  -  ;
   31 D1:AD7B -  -  -  -  ;						Dereference B:DE'DE and C:HL'HL
   32 D1:AD7B -  -  -  -  ;
   33 D1:AD7B -  -  -  -  ; ***************************************************************************************
   34 D1:AD7B -  -  -  -  
   35 D1:AD7B -  -  -  -  DereferenceBoth:
   36 D1:AD7B CB 79 -  -  			bit 	CIsReference,c 			; does C:HL'HL need dereferencing ?
   37 D1:AD7D C4 54 AE D1 			call 	nz,Dereference 			; Deref C:HL'HL
   38 D1:AD81 CB 78 -  -  			bit 	CIsReference,b 			; does DE'DE need dereferencing ?		
   39 D1:AD83 C8 -  -  -  			ret 	z
   40 D1:AD84 CD 73 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   41 D1:AD88 CD 54 AE D1 			call 	Dereference 			; dereference what was B:DE'DE
   42 D1:AD8C CD 73 AD D1 			call 	SwapHLDE 				; swap HL and DE over.
   43 D1:AD90 C9 -  -  -  			ret
   44 D1:AD91 -  -  -  -  
   45 D1:AD91 -  -  -  -  ; ***************************************************************************************
   46 D1:AD91 -  -  -  -  ;
   47 D1:AD91 -  -  -  -  ;							Type Check C:HL'HL and negate it
   48 D1:AD91 -  -  -  -  ;
   49 D1:AD91 -  -  -  -  ; ***************************************************************************************
   50 D1:AD91 -  -  -  -  
   51 D1:AD91 -  -  -  -  NegateHLHL:	
   52 D1:AD91 CB 41 -  -  			bit 	CIsString,c 			; is it a string ?
   53 D1:AD93 C2 4C AC D1 			jp 		nz,TypeMismatch
   54 D1:AD97 CB 79 -  -  			bit 	CIsReference,c 			; reference -> number.
   55 D1:AD99 C4 54 AE D1 			call 	nz,Dereference 			; if required.
   56 D1:AD9D CD 70 B9 D1 			call 	Int32Negate
   57 D1:ADA1 C9 -  -  -  			ret
Listing for file "_build.asm"
   31 D1:ADA2 -  -  -  -  #include "core/expression/expression.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
    1 D1:ADA2 -  -  -  -  ; ***************************************************************************************
    2 D1:ADA2 -  -  -  -  ; ***************************************************************************************
    3 D1:ADA2 -  -  -  -  ;
    4 D1:ADA2 -  -  -  -  ;		Name : 		expression.asm
    5 D1:ADA2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADA2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADA2 -  -  -  -  ;		Reviewed :	None
    8 D1:ADA2 -  -  -  -  ;		Purpose :	Expression evaluation (see evaluate.py)
    9 D1:ADA2 -  -  -  -  ;
   10 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   11 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   12 D1:ADA2 -  -  -  -  
   13 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   14 D1:ADA2 -  -  -  -  ;
   15 D1:ADA2 -  -  -  -  ; 						Evaluate expression at IX, precedence level A/0
   16 D1:ADA2 -  -  -  -  ;
   17 D1:ADA2 -  -  -  -  ; ***************************************************************************************
   18 D1:ADA2 -  -  -  -  
   19 D1:ADA2 -  -  -  -  EvaluateAtPrecedence0:
   20 D1:ADA2 AF -  -  -  		xor 	a 							; base level of precedence and fall through.
   21 D1:ADA3 -  -  -  -  EvaluateAtPrecedence:
   22 D1:ADA3 F5 -  -  -  		push 	af  						; save precedence on stack	
   23 D1:ADA4 -  -  -  -  		;
   24 D1:ADA4 -  -  -  -  		; 		Get a term into C:HL'HL
   25 D1:ADA4 -  -  -  -  		;
   26 D1:ADA4 CD B0 AE D1 		call 	EvaluateTerm 				; get term
   27 D1:ADA8 -  -  -  -  		;
   28 D1:ADA8 -  -  -  -  		; 		Check if can calculate at this level. Check if a binary operator follows.
   29 D1:ADA8 -  -  -  -  		;
   30 D1:ADA8 D1 -  -  -  		pop 	de 							; precedence level is now in D.
   31 D1:ADA9 -  -  -  -  _EAPLoop:
   32 D1:ADA9 DD 7E 00 -  		ld 		a,(ix+0) 					; get next token
   33 D1:ADAC FE 83 -  -  		cp 		KWC_FIRST_BINARY	 		; check it is a binary operator and exit otherwise.
   34 D1:ADAE D8 -  -  -  		ret 	c
   35 D1:ADAF FE 94 -  -  		cp 		KWC_FIRST_UNARY
   36 D1:ADB1 D0 -  -  -  		ret 	nc
   37 D1:ADB2 -  -  -  -  		;
   38 D1:ADB2 -  -  -  -  		; 		Get the precedence.
   39 D1:ADB2 -  -  -  -  		;
   40 D1:ADB2 E5 -  -  -  		push 	hl 							; want to use HL
   41 D1:ADB3 D6 83 -  -  		sub 	KWC_FIRST_BINARY 			; now indexed from zero
   42 D1:ADB5 21 C0 B4 D1 		ld 		hl,PrecedenceTable 			; make HL point to the table
   43 D1:ADB9 B5 -  -  -  		or 		l 							; table is aligned so this works using .block
   44 D1:ADBA 6F -  -  -  		ld 		l,a
   45 D1:ADBB 5E -  -  -  		ld 		e,(hl)  					; get the precedence
   46 D1:ADBC E1 -  -  -  		pop 	hl 							; restore HL
   47 D1:ADBD -  -  -  -  		;
   48 D1:ADBD -  -  -  -  		;		Continue only if prec-level (in D) < operator-precedence (in E)
   49 D1:ADBD -  -  -  -  		;
   50 D1:ADBD 7A -  -  -  		ld 		a,d 						; so exit otherwise.
   51 D1:ADBE BB -  -  -  		cp 		e
   52 D1:ADBF D0 -  -  -  		ret 	nc
   53 D1:ADC0 -  -  -  -  
   54 D1:ADC0 -  -  -  -  		;
   55 D1:ADC0 -  -  -  -  		; 		Push C:HL'HL, Precedence information and operator on the stack.
   56 D1:ADC0 -  -  -  -  		;
   57 D1:ADC0 D5 -  -  -  		push 	de 							; save precedence information.
   58 D1:ADC1 -  -  -  -  		;
   59 D1:ADC1 DD 7E 00 -  		ld 		a,(ix+0) 					; save binary operator
   60 D1:ADC4 F5 -  -  -  		push 	af
   61 D1:ADC5 -  -  -  -  		;
   62 D1:ADC5 C5 -  -  -  		push 	bc 							; save BC (type is in C)
   63 D1:ADC6 D9 -  -  -  		exx 								; save HL'
   64 D1:ADC7 E5 -  -  -  		push 	hl
   65 D1:ADC8 D9 -  -  -  		exx 								
   66 D1:ADC9 E5 -  -  -  		push 	hl 							; save HL
   67 D1:ADCA -  -  -  -  		;
   68 D1:ADCA DD 23 -  -  		inc 	ix 							; skip over binary operator.
   69 D1:ADCC -  -  -  -  		;
   70 D1:ADCC -  -  -  -  		; 		Evaluate the RHS which after this is in HL'HL info in B, left is on the stack.
   71 D1:ADCC -  -  -  -  		;
   72 D1:ADCC 7B -  -  -  		ld 		a,e 						; evaluate at the operator precedence level.
   73 D1:ADCD CD A3 AD D1 		call 	EvaluateAtPrecedence 		; this goes into R
   74 D1:ADD1 -  -  -  -  		;
   75 D1:ADD1 -  -  -  -  		; 		Restore C:HL'HL off the stack, copying C'HL:HL => B'DE:DE
   76 D1:ADD1 -  -  -  -  		;
   77 D1:ADD1 79 -  -  -  		ld 		a,c 						; put the second part into A.
   78 D1:ADD2 -  -  -  -  
   79 D1:ADD2 EB -  -  -  		ex 		de,hl 						; pop L back off the stack into HL'HL
   80 D1:ADD3 E1 -  -  -  		pop 	hl 							; swapping HL into DE
   81 D1:ADD4 D9 -  -  -  		exx
   82 D1:ADD5 EB -  -  -  		ex 		de,hl
   83 D1:ADD6 E1 -  -  -  		pop 	hl
   84 D1:ADD7 D9 -  -  -  		exx
   85 D1:ADD8 C1 -  -  -  		pop  	bc 							; get the type into C
   86 D1:ADD9 47 -  -  -  		ld 		b,a 						; B now contains DE'DE type.
   87 D1:ADDA -  -  -  -  		;
   88 D1:ADDA -  -  -  -  		; 		At this point, the left hand side is in C (type) HL'HL and the right hand side
   89 D1:ADDA -  -  -  -  		; 		is in B (type) DE'DE
   90 D1:ADDA -  -  -  -  		;
   91 D1:ADDA F1 -  -  -  		pop 	af 							; get operator in A
   92 D1:ADDB -  -  -  -  		;
   93 D1:ADDB -  -  -  -  		; 		Call the binary operator in A.
   94 D1:ADDB -  -  -  -  		;
   95 D1:ADDB D5 -  -  -  		push 	de
   96 D1:ADDC E5 -  -  -  		push 	hl 							; save DE/HL
   97 D1:ADDD E6 7F 21 00 
              00 00 6F 29 
              29 11 90 B6 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; routine address in DE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/expression.asm"
   98 D1:ADF2 E1 -  -  -  		pop 	hl 							; make HL'HL good, restore HL
   99 D1:ADF3 D1 -  -  -  		pop 	de 							; restore DE
  100 D1:ADF4 CD E5 A8 D1 		call 	JumpCode 					; call the routine set up in dispatch.
  101 D1:ADF8 -  -  -  -  		;
  102 D1:ADF8 D1 -  -  -  		pop 	de 							; restore precedence into DE
  103 D1:ADF9 -  -  -  -  		;
  104 D1:ADF9 18 AE -  -  		jr 		_EAPLoop 					; and go round
  105 D1:ADFB -  -  -  -  
  106 D1:ADFB -  -  -  -  ; ***************************************************************************************
  107 D1:ADFB -  -  -  -  ;
  108 D1:ADFB -  -  -  -  ;									Changes and Updates
  109 D1:ADFB -  -  -  -  ;
  110 D1:ADFB -  -  -  -  ; ***************************************************************************************
  111 D1:ADFB -  -  -  -  ;
  112 D1:ADFB -  -  -  -  ;		Date			Notes
  113 D1:ADFB -  -  -  -  ;		==== 			=====
  114 D1:ADFB -  -  -  -  ;
  115 D1:ADFB -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   32 D1:ADFB -  -  -  -  #include "core/expression/exprhelper.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/exprhelper.asm"
    1 D1:ADFB -  -  -  -  ; ***************************************************************************************
    2 D1:ADFB -  -  -  -  ; ***************************************************************************************
    3 D1:ADFB -  -  -  -  ;
    4 D1:ADFB -  -  -  -  ;		Name : 		exprhelper.asm
    5 D1:ADFB -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:ADFB -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:ADFB -  -  -  -  ;		Reviewed :	No
    8 D1:ADFB -  -  -  -  ;		Purpose :	Expression support functions
    9 D1:ADFB -  -  -  -  ;
   10 D1:ADFB -  -  -  -  ; ***************************************************************************************
   11 D1:ADFB -  -  -  -  ; ***************************************************************************************
   12 D1:ADFB -  -  -  -  
   13 D1:ADFB -  -  -  -  ; ***************************************************************************************
   14 D1:ADFB -  -  -  -  ;
   15 D1:ADFB -  -  -  -  ; 								Evaluate an integer term
   16 D1:ADFB -  -  -  -  ;
   17 D1:ADFB -  -  -  -  ; ***************************************************************************************
   18 D1:ADFB -  -  -  -  
   19 D1:ADFB -  -  -  -  EvaluateIntegerTerm:
   20 D1:ADFB CD B0 AE D1 		call 	EvaluateTerm
   21 D1:ADFF CD 54 AE D1 		call 	DeReference
   22 D1:AE03 CB 41 -  -  		bit 	CIsString,c
   23 D1:AE05 C8 -  -  -  		ret 	z
   24 D1:AE06 C3 4C AC D1 		jp 		TypeMismatch
   25 D1:AE0A -  -  -  -  
   26 D1:AE0A -  -  -  -  ; ***************************************************************************************
   27 D1:AE0A -  -  -  -  ;
   28 D1:AE0A -  -  -  -  ; 								Evaluate a string term
   29 D1:AE0A -  -  -  -  ;
   30 D1:AE0A -  -  -  -  ; ***************************************************************************************
   31 D1:AE0A -  -  -  -  
   32 D1:AE0A -  -  -  -  EvaluateStringTerm:
   33 D1:AE0A CD B0 AE D1 		call 	EvaluateTerm
   34 D1:AE0E CD 54 AE D1 		call 	DeReference
   35 D1:AE12 CB 41 -  -  		bit 	CIsString,c
   36 D1:AE14 C0 -  -  -  		ret 	nz
   37 D1:AE15 C3 4C AC D1 		jp 		TypeMismatch
   38 D1:AE19 -  -  -  -  
   39 D1:AE19 -  -  -  -  ; ***************************************************************************************
   40 D1:AE19 -  -  -  -  ;
   41 D1:AE19 -  -  -  -  ; 						Evaluate and dereference an expression
   42 D1:AE19 -  -  -  -  ;
   43 D1:AE19 -  -  -  -  ; ***************************************************************************************
   44 D1:AE19 -  -  -  -  
   45 D1:AE19 -  -  -  -  EvaluateValue:
   46 D1:AE19 CD A2 AD D1 		call 	EvaluateAtPrecedence0
   47 D1:AE1D C3 54 AE D1 		jp 		Dereference
   48 D1:AE21 -  -  -  -  
   49 D1:AE21 -  -  -  -  ; ***************************************************************************************
   50 D1:AE21 -  -  -  -  ;
   51 D1:AE21 -  -  -  -  ; 									Evaluate a number
   52 D1:AE21 -  -  -  -  ;
   53 D1:AE21 -  -  -  -  ; ***************************************************************************************
   54 D1:AE21 -  -  -  -  
   55 D1:AE21 -  -  -  -  EvaluateInteger:
   56 D1:AE21 CD 19 AE D1 		call 	EvaluateValue
   57 D1:AE25 CB 41 -  -  		bit 	CIsString,c 				; check string bit is clear
   58 D1:AE27 C8 -  -  -  		ret 	z
   59 D1:AE28 C3 4C AC D1 		jp 		TypeMismatch
   60 D1:AE2C -  -  -  -  
   61 D1:AE2C -  -  -  -  ; ***************************************************************************************
   62 D1:AE2C -  -  -  -  ;
   63 D1:AE2C -  -  -  -  ; 									Evaluate an 8 bit integer
   64 D1:AE2C -  -  -  -  ;
   65 D1:AE2C -  -  -  -  ; ***************************************************************************************
   66 D1:AE2C -  -  -  -  
   67 D1:AE2C -  -  -  -  Evaluate8BitInteger:
   68 D1:AE2C CD 21 AE D1 		call 	EvaluateInteger
   69 D1:AE30 D9 -  -  -  		exx  								; check if upper 3 bytes zero
   70 D1:AE31 7C -  -  -  		ld 		a,h
   71 D1:AE32 B5 -  -  -  		or 		l
   72 D1:AE33 D9 -  -  -  		exx 	
   73 D1:AE34 B4 -  -  -  		or 		h
   74 D1:AE35 C2 52 AC D1 		jp 		nz,BadValue
   75 D1:AE39 7D -  -  -  		ld 		a,l 						; return integer in A
   76 D1:AE3A C9 -  -  -  		ret
   77 D1:AE3B -  -  -  -  		
   78 D1:AE3B -  -  -  -  ; ***************************************************************************************
   79 D1:AE3B -  -  -  -  ;
   80 D1:AE3B -  -  -  -  ; 									Evaluate a string
   81 D1:AE3B -  -  -  -  ;
   82 D1:AE3B -  -  -  -  ; ***************************************************************************************
   83 D1:AE3B -  -  -  -  
   84 D1:AE3B -  -  -  -  EvaluateString:
   85 D1:AE3B CD 19 AE D1 		call 	EvaluateValue
   86 D1:AE3F CB 41 -  -  		bit 	CIsString,c 				; check string bit.
   87 D1:AE41 CA 4C AC D1 		jp 		z,TypeMismatch 				; clear, type mismatch.
   88 D1:AE45 C9 -  -  -  		ret
   89 D1:AE46 -  -  -  -  
   90 D1:AE46 -  -  -  -  ; ***************************************************************************************
   91 D1:AE46 -  -  -  -  ;
   92 D1:AE46 -  -  -  -  ; 								Return 8/16 bit constant
   93 D1:AE46 -  -  -  -  ;
   94 D1:AE46 -  -  -  -  ; ***************************************************************************************
   95 D1:AE46 -  -  -  -  
   96 D1:AE46 -  -  -  -  Return8BitConstant:
   97 D1:AE46 21 00 00 00 		ld 		hl,$0000 					; put A into HL
   98 D1:AE4A 6F -  -  -  		ld 		l,a
   99 D1:AE4B -  -  -  -  Return16BitConstant:
  100 D1:AE4B D9 -  -  -  		exx 								; clear HL'
  101 D1:AE4C 21 00 00 00 		ld 		hl,0
  102 D1:AE50 D9 -  -  -  		exx
  103 D1:AE51 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return integer value.
  104 D1:AE53 C9 -  -  -  		ret
  105 D1:AE54 -  -  -  -  
  106 D1:AE54 -  -  -  -  ; ***************************************************************************************
  107 D1:AE54 -  -  -  -  ;
  108 D1:AE54 -  -  -  -  ;									Changes and Updates
  109 D1:AE54 -  -  -  -  ;
  110 D1:AE54 -  -  -  -  ; ***************************************************************************************
  111 D1:AE54 -  -  -  -  ;
  112 D1:AE54 -  -  -  -  ;		Date			Notes
  113 D1:AE54 -  -  -  -  ;		==== 			=====
  114 D1:AE54 -  -  -  -  ;
  115 D1:AE54 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   33 D1:AE54 -  -  -  -  #include "core/expression/reference.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
    1 D1:AE54 -  -  -  -  ; ***************************************************************************************
    2 D1:AE54 -  -  -  -  ; ***************************************************************************************
    3 D1:AE54 -  -  -  -  ;
    4 D1:AE54 -  -  -  -  ;		Name : 		reference.asm
    5 D1:AE54 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AE54 -  -  -  -  ;		Date : 		1st May 2022
    7 D1:AE54 -  -  -  -  ;		Reviewed :	No
    8 D1:AE54 -  -  -  -  ;		Purpose :	Reference/Dereference functions.
    9 D1:AE54 -  -  -  -  ;
   10 D1:AE54 -  -  -  -  ; ***************************************************************************************
   11 D1:AE54 -  -  -  -  ; ***************************************************************************************
   12 D1:AE54 -  -  -  -  
   13 D1:AE54 -  -  -  -  ; ***************************************************************************************
   14 D1:AE54 -  -  -  -  ;
   15 D1:AE54 -  -  -  -  ; 									Dereference HL'HL C
   16 D1:AE54 -  -  -  -  ;
   17 D1:AE54 -  -  -  -  ; ***************************************************************************************
   18 D1:AE54 -  -  -  -  
   19 D1:AE54 -  -  -  -  Dereference:
   20 D1:AE54 CB 79 -  -  		bit 	CIsReference,c 				; exit if not reference
   21 D1:AE56 C8 -  -  -  		ret 	z
   22 D1:AE57 -  -  -  -  
   23 D1:AE57 CB B9 -  -  		res 	CIsReference,c 				; clear reference bit.
   24 D1:AE59 -  -  -  -  		
   25 D1:AE59 CB 41 -  -  		bit 	CIsString,c 				; dereferencing string, shouldn't be possible.
   26 D1:AE5B 20 1E -  -  		jr 		nz,_DRInternal
   27 D1:AE5D -  -  -  -  
   28 D1:AE5D CB 71 -  -  		bit 	CIsByteReference,c 			; is it a byte reference ?
   29 D1:AE5F 20 0B -  -  		jr 		nz,_DeRefByte 
   30 D1:AE61 -  -  -  -  
   31 D1:AE61 E5 -  -  -  		push 	hl 							; save address on stack.
   32 D1:AE62 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/reference.asm"
   33 D1:AE64 D9 -  -  -  		exx
   34 D1:AE65 E1 -  -  -  		pop 	hl 							; get address into HL'
   35 D1:AE66 23 -  -  -  		inc 	hl 							; point 2 bytes forward
   36 D1:AE67 23 -  -  -  		inc  	hl
   37 D1:AE68 ED 27 -  -  		ld_ind_hl 							; read HL'HL from HL+2
   38 D1:AE6A D9 -  -  -  		exx 								; fix back
   39 D1:AE6B C9 -  -  -  		ret
   40 D1:AE6C -  -  -  -  
   41 D1:AE6C -  -  -  -  _DeRefByte:		
   42 D1:AE6C 7E -  -  -  		ld	 	a,(hl) 						; read byte
   43 D1:AE6D 21 00 00 00 		ld 		hl,$0000 					; and zero everything else.
   44 D1:AE71 6F -  -  -  		ld	 	l,a
   45 D1:AE72 D9 -  -  -  		exx
   46 D1:AE73 21 00 00 00 		ld 		hl,$0000
   47 D1:AE77 D9 -  -  -  		exx
   48 D1:AE78 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; return as integer.
   49 D1:AE7A C9 -  -  -  		ret
   50 D1:AE7B -  -  -  -  
   51 D1:AE7B -  -  -  -  _DRInternal:
   52 D1:AE7B 3E 05 C3 EE 
              AB D1 -  -  		ERR_DISABLED
   53 D1:AE81 -  -  -  -  
   54 D1:AE81 -  -  -  -  ; ***************************************************************************************
   55 D1:AE81 -  -  -  -  ;
   56 D1:AE81 -  -  -  -  ; 							Convert HL'HL to address in UHL
   57 D1:AE81 -  -  -  -  ;
   58 D1:AE81 -  -  -  -  ; ***************************************************************************************
   59 D1:AE81 -  -  -  -  
   60 D1:AE81 -  -  -  -  DRConvertHLHLToAddress:
   61 D1:AE81 -  -  -  -  		#ifdef EZ80
   62 D1:AE81 22 EB A8 D1 		ld 		(AConvert),hl 				; two lower bytes at offset +0
   63 D1:AE85 D9 -  -  -  		exx
   64 D1:AE86 22 ED A8 D1 		ld 		(AConvert+2),hl 			; two upper bytes at offset +2
   65 D1:AE8A 21 00 00 00 		ld 		hl,$0000 					; zero HL'
   66 D1:AE8E D9 -  -  -  		exx
   67 D1:AE8F 2A EB A8 D1 		ld 		hl,(AConvert) 				; load UHL
   68 D1:AE93 -  -  -  -  		#endif
   69 D1:AE93 C9 -  -  -  		ret
   70 D1:AE94 -  -  -  -  
   71 D1:AE94 -  -  -  -  ; ***************************************************************************************
   72 D1:AE94 -  -  -  -  ;
   73 D1:AE94 -  -  -  -  ; 							Convert address in UHL to HL'HL 
   74 D1:AE94 -  -  -  -  ;
   75 D1:AE94 -  -  -  -  ; ***************************************************************************************
   76 D1:AE94 -  -  -  -  
   77 D1:AE94 -  -  -  -  DRConvertAddressToHLHL:
   78 D1:AE94 -  -  -  -  		#ifdef EZ80
   79 D1:AE94 22 EB A8 D1 		ld 		(AConvert),hl
   80 D1:AE98 21 00 00 00 		ld 		hl,$0000
   81 D1:AE9C 22 EE A8 D1 		ld 		(AConvert+3),hl
   82 D1:AEA0 D9 -  -  -  		exx
   83 D1:AEA1 2A ED A8 D1 		ld 		hl,(AConvert+2)
   84 D1:AEA5 D9 -  -  -  		exx
   85 D1:AEA6 AF -  -  -  		xor 	a
   86 D1:AEA7 32 ED A8 D1 		ld 		(AConvert+2),a
   87 D1:AEAB 2A EB A8 D1 		ld 		hl,(AConvert)
   88 D1:AEAF -  -  -  -  		#endif
   89 D1:AEAF C9 -  -  -  		ret
   90 D1:AEB0 -  -  -  -  
   91 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   92 D1:AEB0 -  -  -  -  ;
   93 D1:AEB0 -  -  -  -  ;									Changes and Updates
   94 D1:AEB0 -  -  -  -  ;
   95 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   96 D1:AEB0 -  -  -  -  ;
   97 D1:AEB0 -  -  -  -  ;		Date			Notes
   98 D1:AEB0 -  -  -  -  ;		==== 			=====
   99 D1:AEB0 -  -  -  -  ;
  100 D1:AEB0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   34 D1:AEB0 -  -  -  -  #include "core/expression/term.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
    1 D1:AEB0 -  -  -  -  ; ***************************************************************************************
    2 D1:AEB0 -  -  -  -  ; ***************************************************************************************
    3 D1:AEB0 -  -  -  -  ;
    4 D1:AEB0 -  -  -  -  ;		Name : 		term.asm
    5 D1:AEB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AEB0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AEB0 -  -  -  -  ;		Reviewed :	No
    8 D1:AEB0 -  -  -  -  ;		Purpose :	Get a term into HL'HLC.
    9 D1:AEB0 -  -  -  -  ;
   10 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   11 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   12 D1:AEB0 -  -  -  -  
   13 D1:AEB0 -  -  -  -  #macro double_hlhl 							; doubles HL'HL
   14 D1:AEB0             		add_hlhl_16
   15 D1:AEB0             		exx
   16 D1:AEB0             		adc_hlhl_16
   17 D1:AEB0             		exx
   18 D1:AEB0             #endmacro
   19 D1:AEB0 -  -  -  -  
   20 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   21 D1:AEB0 -  -  -  -  ;
   22 D1:AEB0 -  -  -  -  ; 								Evaluate a term into HL'HL C
   23 D1:AEB0 -  -  -  -  ;
   24 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   25 D1:AEB0 -  -  -  -  ;
   26 D1:AEB0 -  -  -  -  ; 		Terms can be:
   27 D1:AEB0 -  -  -  -  ;
   28 D1:AEB0 -  -  -  -  ;			<integer> 			42 						not negative
   29 D1:AEB0 -  -  -  -  ;			&<hex-integer 		&2A 					unary function, but done by hand.
   30 D1:AEB0 -  -  -  -  ; 			"<text>"			"Hello, world!"			ASCIIZ string.
   31 D1:AEB0 -  -  -  -  ; 			? ! - <term> 		!42 ?a -7 				special cases - unary functions which have
   32 D1:AEB0 -  -  -  -  ; 														binary equivalents so are handled differently
   33 D1:AEB0 -  -  -  -  ; 			<unary> 			len("Hello")			unary functions. Note that ( itself is a 
   34 D1:AEB0 -  -  -  -  ;														unary function, returning the value in parenthesis.
   35 D1:AEB0 -  -  -  -  ; 			identifier 			age 					No functions, so this will be a variable
   36 D1:AEB0 -  -  -  -  ; 														reference of some sort.
   37 D1:AEB0 -  -  -  -  ;
   38 D1:AEB0 -  -  -  -  ; ***************************************************************************************
   39 D1:AEB0 -  -  -  -  
   40 D1:AEB0 -  -  -  -  EvaluateTerm:		
   41 D1:AEB0 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; set type to integer.
   42 D1:AEB2 D9 -  -  -  		exx
   43 D1:AEB3 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL
   44 D1:AEB7 D9 -  -  -  		exx
   45 D1:AEB8 21 00 00 00 		ld 		hl,$0000		
   46 D1:AEBC -  -  -  -  		;
   47 D1:AEBC DD 7E 00 -  		ld 		a,(ix+0) 					; get first character.
   48 D1:AEBF FE 3F -  -  		cp 		STRING_MARKER 				; is it the string marker ($3F)
   49 D1:AEC1 28 47 -  -  		jr 		z,_ETStringMarker 			; if so, do the string code.
   50 D1:AEC3 DA 7B AF D1 		jp 		c,_ETVariable 				; if so it is (at present) a variable $00-$2F
   51 D1:AEC7 CB 7F -  -  		bit 	7,a 						; is it a token $80-$FF
   52 D1:AEC9 C2 1F AF D1 		jp 		nz,_ETFoundKeyword 
   53 D1:AECD -  -  -  -  		;
   54 D1:AECD -  -  -  -  		; 		Remaining option is $40-$7F, which is an integer constant.
   55 D1:AECD -  -  -  -  		;
   56 D1:AECD -  -  -  -  _ETIntegerConstant:
   57 D1:AECD -  -  -  -  		;
   58 D1:AECD -  -  -  -  _ETIntegerLoop:		
   59 D1:AECD DD 7E 00 -  		ld 		a,(ix+0)
   60 D1:AED0 E6 3F -  -  		and 	$3F 						; get the actual digit part, 6 bits
   61 D1:AED2 B5 -  -  -  		or 		l 							; or into L
   62 D1:AED3 6F -  -  -  		ld 		l,a
   63 D1:AED4 DD 23 -  -  		inc 	ix 							; look at next character.
   64 D1:AED6 DD 7E 00 -  		ld 		a,(ix+0) 					; get next character
   65 D1:AED9 C6 80 -  -  		add 	a,$80 						; this will map $40-$7F to $C0-$FF
   66 D1:AEDB FE C0 -  -  		cp 		$C0 						; so if < $C0 wasn't $40-$7F
   67 D1:AEDD D8 -  -  -  		ret 	c
   68 D1:AEDE -  -  -  -  
   69 D1:AEDE 52 29 -  -  		double_hlhl 						; multiply HL'HL by 64. Bit wasteful but quickest.
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   70 D1:AEE5 52 29 -  -  		double_hlhl  						; (could have special code for first time)
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   71 D1:AEEC 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   72 D1:AEF3 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   73 D1:AEFA 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   74 D1:AF01 52 29 -  -  		double_hlhl
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"

              D9 52 ED 6A 
              D9 Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/term.asm"
   75 D1:AF08 -  -  -  -  
   76 D1:AF08 18 C3 -  -  		jr 		_ETIntegerLoop 				; and get the next part of the integer if there is one.
   77 D1:AF0A -  -  -  -  		;
   78 D1:AF0A -  -  -  -  		; 		Found the $3F string marker.
   79 D1:AF0A -  -  -  -  		;
   80 D1:AF0A -  -  -  -  _ETStringMarker:		
   81 D1:AF0A DD 23 -  -  		inc 	ix 							; skip string marker
   82 D1:AF0C DD 23 -  -  		inc 	ix 							; skip length, IX now points to ASCIIZ string.
   83 D1:AF0E DD E5 -  -  		push 	ix 							; put address in UHL
   84 D1:AF10 E1 -  -  -  		pop 	hl
   85 D1:AF11 11 00 00 00 		ld 		de,$0000
   86 D1:AF15 DD 5E FF -  		ld 		e,(ix-1) 					; get length to add into DE.
   87 D1:AF18 DD 19 -  -  		add 	ix,de
   88 D1:AF1A DD 23 -  -  		inc 	ix 							; and skip the zero terminating byte.
   89 D1:AF1C 0E 01 -  -  		ld 		c,XTYPE_STRING 				; mark it as a string object, address in UHL
   90 D1:AF1E C9 -  -  -  		ret
   91 D1:AF1F -  -  -  -  		;
   92 D1:AF1F -  -  -  -  		; 		Found a keyword $80-$FF, check for unary function, then check for & and then the dual use operators.
   93 D1:AF1F -  -  -  -  		;
   94 D1:AF1F -  -  -  -  _ETFoundKeyword:
   95 D1:AF1F DD 23 -  -  		inc 	ix 							; skip token, which is in A.
   96 D1:AF21 FE 94 -  -  		cp 		KWC_FIRST_UNARY 			; check if level 0 unary function
   97 D1:AF23 38 1D -  -  		jr 		c,_ETNotUnaryFunction0
   98 D1:AF25 FE A5 -  -  		cp 		KWC_FIRST_NORMAL 
   99 D1:AF27 30 19 -  -  		jr 		nc,_ETNotUnaryFunction0
  100 D1:AF29 -  -  -  -  		;
  101 D1:AF29 -  -  -  -  		;		Unary group 0
  102 D1:AF29 -  -  -  -  		;
  103 D1:AF29 E6 7F 21 00 
              00 00 6F 29 
              29 11 90 B6 
              D1 19 ED 17 
              ED 53 E6 A8 
              D1 -  -  -  		dispatch(VectorsSet0) 				; set up call address
  104 D1:AF3E C3 E5 A8 D1 		jp 		JumpCode 					; and go there.
  105 D1:AF42 -  -  -  -  
  106 D1:AF42 -  -  -  -  _ETNotUnaryFunction0:	
  107 D1:AF42 FE 8A -  -  		cp 		KWD_MINUS 					; is it -term ?
  108 D1:AF44 20 09 -  -  		jr 		nz,_ETCheckIndirection
  109 D1:AF46 -  -  -  -  		;
  110 D1:AF46 -  -  -  -  		; 		- term
  111 D1:AF46 -  -  -  -  		;
  112 D1:AF46 CD FB AD D1 		call 	EvaluateIntegerTerm 		; evaluate term
  113 D1:AF4A CD 91 AD D1 		call 	NegateHLHL 					; negate HLHL type defpendent.
  114 D1:AF4E C9 -  -  -  		ret
  115 D1:AF4F -  -  -  -  		;
  116 D1:AF4F -  -  -  -  		;		! ? indirection check
  117 D1:AF4F -  -  -  -  		;
  118 D1:AF4F -  -  -  -  _ETCheckIndirection:	
  119 D1:AF4F FE 84 -  -  		cp 		KWD_QMARK 					; check if ? !
  120 D1:AF51 28 06 -  -  		jr 		z,_ETIndirection
  121 D1:AF53 FE 83 -  -  		cp 		KWD_PLING
  122 D1:AF55 C2 58 AC D1 		jp 		nz,SyntaxError 				; give up otherwise.
  123 D1:AF59 -  -  -  -  		;
  124 D1:AF59 -  -  -  -  		; 		! ? indirection
  125 D1:AF59 -  -  -  -  		;
  126 D1:AF59 -  -  -  -  _ETIndirection:
  127 D1:AF59 F5 -  -  -  		push 	af 							; check type of indirection.
  128 D1:AF5A CD B0 AE D1 		call 	EvaluateTerm 				; get reference value to HL'HL
  129 D1:AF5E CD 54 AE D1 		call 	Dereference 				; dereference it so it's a value.
  130 D1:AF62 CB 41 -  -  		bit 	CIsString,c 				; check it is an integer.
  131 D1:AF64 20 0F -  -  		jr 		nz,_ETStringIndirect
  132 D1:AF66 CD 81 AE D1 		call 	DRConvertHLHLtoAddress 		; make it a real physical address in UHL.
  133 D1:AF6A F1 -  -  -  		pop 	af 							; get type back
  134 D1:AF6B 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; integer ?
  135 D1:AF6D CB F9 -  -  		set 	CIsReference,c
  136 D1:AF6F FE 83 -  -  		cp 		KWD_PLING
  137 D1:AF71 C8 -  -  -  		ret 	z
  138 D1:AF72 CB F1 -  -  		set 	CIsByteReference,c 			; otherwise it's a byte reference
  139 D1:AF74 C9 -  -  -  		ret
  140 D1:AF75 -  -  -  -  _ETStringIndirect:
  141 D1:AF75 3E 02 C3 EE 
              AB D1 -  -  		ERR_BADTYPE 						; tried to do !?<string>		
  142 D1:AF7B -  -  -  -  		;
  143 D1:AF7B -  -  -  -  		; 		Found an identifier.
  144 D1:AF7B -  -  -  -  		;
  145 D1:AF7B -  -  -  -  _ETVariable:
  146 D1:AF7B CD A8 B3 D1 		call 	FindVariable 				; find the variable.
  147 D1:AF7F D0 -  -  -  		ret 	nc 							; return if found.
  148 D1:AF80 3E 16 C3 EE 
              AB D1 -  -  		ERR_UNKNOWNVAR 						; unknown variable
  149 D1:AF86 -  -  -  -  		
  150 D1:AF86 -  -  -  -  ; ***************************************************************************************
  151 D1:AF86 -  -  -  -  ;
  152 D1:AF86 -  -  -  -  ;									Changes and Updates
  153 D1:AF86 -  -  -  -  ;
  154 D1:AF86 -  -  -  -  ; ***************************************************************************************
  155 D1:AF86 -  -  -  -  ;
  156 D1:AF86 -  -  -  -  ;		Date			Notes
  157 D1:AF86 -  -  -  -  ;		==== 			=====
  158 D1:AF86 -  -  -  -  ;
  159 D1:AF86 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   35 D1:AF86 -  -  -  -  #include "core/expression/unary/abs.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/abs.asm"
    1 D1:AF86 -  -  -  -  ; ***************************************************************************************
    2 D1:AF86 -  -  -  -  ; ***************************************************************************************
    3 D1:AF86 -  -  -  -  ;
    4 D1:AF86 -  -  -  -  ;		Name : 		abs.asm
    5 D1:AF86 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF86 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF86 -  -  -  -  ;		Reviewed :	No
    8 D1:AF86 -  -  -  -  ;		Purpose :	Absolute value 
    9 D1:AF86 -  -  -  -  ;
   10 D1:AF86 -  -  -  -  ; ***************************************************************************************
   11 D1:AF86 -  -  -  -  ; ***************************************************************************************
   12 D1:AF86 -  -  -  -  
   13 D1:AF86 -  -  -  -  ; ***************************************************************************************
   14 D1:AF86 -  -  -  -  ;
   15 D1:AF86 -  -  -  -  ;								abs( unary function
   16 D1:AF86 -  -  -  -  ;
   17 D1:AF86 -  -  -  -  ; ***************************************************************************************
   18 D1:AF86 -  -  -  -  
   19 D1:AF86 -  -  -  -  Unary_Abs:	;; [abs]	
   20 D1:AF86 CD FB AD D1 		call	EvaluateIntegerTerm 		; get int term
   21 D1:AF8A D9 -  -  -  		exx 								; test MSB
   22 D1:AF8B CB 7C -  -  		bit 	7,h
   23 D1:AF8D D9 -  -  -  		exx
   24 D1:AF8E C4 91 AD D1 		call 	nz,NegateHLHL 				; negate HLHL if -ve
   25 D1:AF92 C9 -  -  -  		ret
   26 D1:AF93 -  -  -  -  
   27 D1:AF93 -  -  -  -  ; ***************************************************************************************
   28 D1:AF93 -  -  -  -  ;
   29 D1:AF93 -  -  -  -  ;									Changes and Updates
   30 D1:AF93 -  -  -  -  ;
   31 D1:AF93 -  -  -  -  ; ***************************************************************************************
   32 D1:AF93 -  -  -  -  ;
   33 D1:AF93 -  -  -  -  ;		Date			Notes
   34 D1:AF93 -  -  -  -  ;		==== 			=====
   35 D1:AF93 -  -  -  -  ;
   36 D1:AF93 -  -  -  -  ; ***************************************************************************************
   37 D1:AF93 -  -  -  -  		
Listing for file "_build.asm"
   36 D1:AF93 -  -  -  -  #include "core/expression/unary/asc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/asc.asm"
    1 D1:AF93 -  -  -  -  ; ***************************************************************************************
    2 D1:AF93 -  -  -  -  ; ***************************************************************************************
    3 D1:AF93 -  -  -  -  ;
    4 D1:AF93 -  -  -  -  ;		Name : 		asc.asm
    5 D1:AF93 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF93 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF93 -  -  -  -  ;		Reviewed :	No
    8 D1:AF93 -  -  -  -  ;		Purpose :	ASCII of first character or $0D if empty string.
    9 D1:AF93 -  -  -  -  ;
   10 D1:AF93 -  -  -  -  ; ***************************************************************************************
   11 D1:AF93 -  -  -  -  ; ***************************************************************************************
   12 D1:AF93 -  -  -  -  
   13 D1:AF93 -  -  -  -  ; ***************************************************************************************
   14 D1:AF93 -  -  -  -  ;
   15 D1:AF93 -  -  -  -  ;								Asc unary function
   16 D1:AF93 -  -  -  -  ;
   17 D1:AF93 -  -  -  -  ; ***************************************************************************************
   18 D1:AF93 -  -  -  -  
   19 D1:AF93 -  -  -  -  Unary_Asc:	;; [asc]
   20 D1:AF93 CD 0A AE D1 		call	EvaluateStringTerm			; Get string
   21 D1:AF97 7E -  -  -  		ld 		a,(hl)						; read first character, 0 if empty string.
   22 D1:AF98 C3 46 AE D1 		jp 		Return8BitConstant
   23 D1:AF9C -  -  -  -  
   24 D1:AF9C -  -  -  -  ; ***************************************************************************************
   25 D1:AF9C -  -  -  -  ;
   26 D1:AF9C -  -  -  -  ;									Changes and Updates
   27 D1:AF9C -  -  -  -  ;
   28 D1:AF9C -  -  -  -  ; ***************************************************************************************
   29 D1:AF9C -  -  -  -  ;
   30 D1:AF9C -  -  -  -  ;		Date			Notes
   31 D1:AF9C -  -  -  -  ;		==== 			=====
   32 D1:AF9C -  -  -  -  ;
   33 D1:AF9C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   37 D1:AF9C -  -  -  -  #include "core/expression/unary/chr.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/chr.asm"
    1 D1:AF9C -  -  -  -  ; ***************************************************************************************
    2 D1:AF9C -  -  -  -  ; ***************************************************************************************
    3 D1:AF9C -  -  -  -  ;
    4 D1:AF9C -  -  -  -  ;		Name : 		chr.asm
    5 D1:AF9C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AF9C -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AF9C -  -  -  -  ;		Reviewed :	No
    8 D1:AF9C -  -  -  -  ;		Purpose :	chr$() implementation ; char code -> string
    9 D1:AF9C -  -  -  -  ;
   10 D1:AF9C -  -  -  -  ; ***************************************************************************************
   11 D1:AF9C -  -  -  -  ; ***************************************************************************************
   12 D1:AF9C -  -  -  -  
   13 D1:AF9C -  -  -  -  ; ***************************************************************************************
   14 D1:AF9C -  -  -  -  ;
   15 D1:AF9C -  -  -  -  ;								Chr$() unary function
   16 D1:AF9C -  -  -  -  ;
   17 D1:AF9C -  -  -  -  ; ***************************************************************************************
   18 D1:AF9C -  -  -  -  
   19 D1:AF9C -  -  -  -  Unary_Chr:	;; [chr]
   20 D1:AF9C CD C6 AB D1 		call 	CheckDollar
   21 D1:AFA0 CD FB AD D1 		call 	EvaluateIntegerTerm
   22 D1:AFA4 7D -  -  -  		ld 		a,l 						; get character
   23 D1:AFA5 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   24 D1:AFA7 21 20 A9 D1 		ld 		hl,_UCBuffer+1 				; write EOS out
   25 D1:AFAB 36 0D -  -  		ld 		(hl),13
   26 D1:AFAD 2B -  -  -  		dec 	hl
   27 D1:AFAE 77 -  -  -  		ld 		(hl),a
   28 D1:AFAF C9 -  -  -  		ret
   29 D1:AFB0 -  -  -  -  
   30 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   31 D1:AFB0 -  -  -  -  ;
   32 D1:AFB0 -  -  -  -  ;									Changes and Updates
   33 D1:AFB0 -  -  -  -  ;
   34 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   35 D1:AFB0 -  -  -  -  ;
   36 D1:AFB0 -  -  -  -  ;		Date			Notes
   37 D1:AFB0 -  -  -  -  ;		==== 			=====
   38 D1:AFB0 -  -  -  -  ;
   39 D1:AFB0 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   38 D1:AFB0 -  -  -  -  #include "core/expression/unary/len.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/len.asm"
    1 D1:AFB0 -  -  -  -  ; ***************************************************************************************
    2 D1:AFB0 -  -  -  -  ; ***************************************************************************************
    3 D1:AFB0 -  -  -  -  ;
    4 D1:AFB0 -  -  -  -  ;		Name : 		len.asm
    5 D1:AFB0 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFB0 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFB0 -  -  -  -  ;		Reviewed :	None
    8 D1:AFB0 -  -  -  -  ;		Purpose :	String Length
    9 D1:AFB0 -  -  -  -  ;
   10 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   11 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   12 D1:AFB0 -  -  -  -  
   13 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   14 D1:AFB0 -  -  -  -  ;
   15 D1:AFB0 -  -  -  -  ;								Len unary function
   16 D1:AFB0 -  -  -  -  ;
   17 D1:AFB0 -  -  -  -  ; ***************************************************************************************
   18 D1:AFB0 -  -  -  -  
   19 D1:AFB0 -  -  -  -  Unary_Len:	;; [len]
   20 D1:AFB0 CD 0A AE D1 		call	EvaluateStringTerm			; Get string address into UHL
   21 D1:AFB4 EB -  -  -  		ex 		de,hl 						; put in DE
   22 D1:AFB5 CD F9 AC D1 		call 	UnaryInt32False 			; zero HL'HL
   23 D1:AFB9 -  -  -  -  _ULCount:
   24 D1:AFB9 1A -  -  -  		ld 		a,(de) 						; next char
   25 D1:AFBA FE 20 -  -  		cp 		$20 						; if < space return.
   26 D1:AFBC D8 -  -  -  		ret 	c
   27 D1:AFBD 23 -  -  -  		inc 	hl 							; bump count and pointer
   28 D1:AFBE 13 -  -  -  		inc 	de
   29 D1:AFBF 18 F8 -  -  		jr 		_ULCount 					; go round again.
   30 D1:AFC1 -  -  -  -  
   31 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   32 D1:AFC1 -  -  -  -  ;
   33 D1:AFC1 -  -  -  -  ;									Changes and Updates
   34 D1:AFC1 -  -  -  -  ;
   35 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   36 D1:AFC1 -  -  -  -  ;
   37 D1:AFC1 -  -  -  -  ;		Date			Notes
   38 D1:AFC1 -  -  -  -  ;		==== 			=====
   39 D1:AFC1 -  -  -  -  ;
   40 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   41 D1:AFC1 -  -  -  -  		
Listing for file "_build.asm"
   39 D1:AFC1 -  -  -  -  #include "core/expression/unary/makestring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/makestring.asm"
    1 D1:AFC1 -  -  -  -  ; ***************************************************************************************
    2 D1:AFC1 -  -  -  -  ; ***************************************************************************************
    3 D1:AFC1 -  -  -  -  ;
    4 D1:AFC1 -  -  -  -  ;		Name : 		makestring.asm
    5 D1:AFC1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFC1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFC1 -  -  -  -  ;		Reviewed :	No
    8 D1:AFC1 -  -  -  -  ;		Purpose :	Make string from constant address
    9 D1:AFC1 -  -  -  -  ;
   10 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   11 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   12 D1:AFC1 -  -  -  -  
   13 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   14 D1:AFC1 -  -  -  -  ;
   15 D1:AFC1 -  -  -  -  ;								Str$() unary function
   16 D1:AFC1 -  -  -  -  ;
   17 D1:AFC1 -  -  -  -  ; ***************************************************************************************
   18 D1:AFC1 -  -  -  -  
   19 D1:AFC1 -  -  -  -  Unary_MkStr:	;; [$]
   20 D1:AFC1 CD FB AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   21 D1:AFC5 CD 81 AE D1 		call 	DRConvertHLHLToAddress 		; make to an actual address in (U)HL
   22 D1:AFC9 0E 01 -  -  		ld 		c,XTYPE_STRING 				; return as string
   23 D1:AFCB C9 -  -  -  		ret
   24 D1:AFCC -  -  -  -  
   25 D1:AFCC -  -  -  -  ; ***************************************************************************************
   26 D1:AFCC -  -  -  -  ;
   27 D1:AFCC -  -  -  -  ;									Changes and Updates
   28 D1:AFCC -  -  -  -  ;
   29 D1:AFCC -  -  -  -  ; ***************************************************************************************
   30 D1:AFCC -  -  -  -  ;
   31 D1:AFCC -  -  -  -  ;		Date			Notes
   32 D1:AFCC -  -  -  -  ;		==== 			=====
   33 D1:AFCC -  -  -  -  ;
   34 D1:AFCC -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   40 D1:AFCC -  -  -  -  #include "core/expression/unary/not.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/not.asm"
    1 D1:AFCC -  -  -  -  ; ***************************************************************************************
    2 D1:AFCC -  -  -  -  ; ***************************************************************************************
    3 D1:AFCC -  -  -  -  ;
    4 D1:AFCC -  -  -  -  ;		Name : 		not.asm
    5 D1:AFCC -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFCC -  -  -  -  ;		Date : 		5th June 2023
    7 D1:AFCC -  -  -  -  ;		Reviewed :	No
    8 D1:AFCC -  -  -  -  ;		Purpose :	Logical not
    9 D1:AFCC -  -  -  -  ;
   10 D1:AFCC -  -  -  -  ; ***************************************************************************************
   11 D1:AFCC -  -  -  -  ; ***************************************************************************************
   12 D1:AFCC -  -  -  -  
   13 D1:AFCC -  -  -  -  ; ***************************************************************************************
   14 D1:AFCC -  -  -  -  ;
   15 D1:AFCC -  -  -  -  ;							not(x) e.g. one's complement
   16 D1:AFCC -  -  -  -  ;
   17 D1:AFCC -  -  -  -  ; ***************************************************************************************
   18 D1:AFCC -  -  -  -  
   19 D1:AFCC -  -  -  -  Unary_Not:		;; [not]
   20 D1:AFCC CD FB AD D1 		call 	EvaluateIntegerTerm 		; only an integer
   21 D1:AFD0 CD D9 AF D1 		call 	__UNSwap 					; not and swap twice.
   22 D1:AFD4 CD D9 AF D1 		call 	__UNSwap		
   23 D1:AFD8 C9 -  -  -  		ret
   24 D1:AFD9 -  -  -  -  
   25 D1:AFD9 -  -  -  -  __UNSwap:
   26 D1:AFD9 7C -  -  -  		ld 		a,h
   27 D1:AFDA 2F -  -  -  		cpl
   28 D1:AFDB 67 -  -  -  		ld 		h,a
   29 D1:AFDC 7D -  -  -  		ld 		a,l
   30 D1:AFDD 2F -  -  -  		cpl 	
   31 D1:AFDE 6F -  -  -  		ld 		l,a
   32 D1:AFDF D9 -  -  -  		exx
   33 D1:AFE0 C9 -  -  -  		ret
   34 D1:AFE1 -  -  -  -  
   35 D1:AFE1 -  -  -  -  ; ***************************************************************************************
   36 D1:AFE1 -  -  -  -  ;
   37 D1:AFE1 -  -  -  -  ;									Changes and Updates
   38 D1:AFE1 -  -  -  -  ;
   39 D1:AFE1 -  -  -  -  ; ***************************************************************************************
   40 D1:AFE1 -  -  -  -  ;
   41 D1:AFE1 -  -  -  -  ;		Date			Notes
   42 D1:AFE1 -  -  -  -  ;		==== 			=====
   43 D1:AFE1 -  -  -  -  ;
   44 D1:AFE1 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   41 D1:AFE1 -  -  -  -  #include "core/expression/unary/page.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/page.asm"
    1 D1:AFE1 -  -  -  -  ; ***************************************************************************************
    2 D1:AFE1 -  -  -  -  ; ***************************************************************************************
    3 D1:AFE1 -  -  -  -  ;
    4 D1:AFE1 -  -  -  -  ;		Name : 		page.asm
    5 D1:AFE1 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFE1 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFE1 -  -  -  -  ;		Reviewed :	No
    8 D1:AFE1 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:AFE1 -  -  -  -  ;
   10 D1:AFE1 -  -  -  -  ; ***************************************************************************************
   11 D1:AFE1 -  -  -  -  ; ***************************************************************************************
   12 D1:AFE1 -  -  -  -  
   13 D1:AFE1 -  -  -  -  ; ***************************************************************************************
   14 D1:AFE1 -  -  -  -  ;
   15 D1:AFE1 -  -  -  -  ;							page unary function (no bracket)
   16 D1:AFE1 -  -  -  -  ;
   17 D1:AFE1 -  -  -  -  ; ***************************************************************************************
   18 D1:AFE1 -  -  -  -  
   19 D1:AFE1 -  -  -  -  Unary_Page:	;; [page]
   20 D1:AFE1 2A B9 A8 D1 			ld 		hl,(CodeAddress) 		; get address of code
   21 D1:AFE5 D9 -  -  -  			exx
   22 D1:AFE6 2A BB A8 D1 			ld 		hl,(CodeAddress+2)
   23 D1:AFEA D9 -  -  -  			exx
   24 D1:AFEB 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:AFED C9 -  -  -  			ret
   26 D1:AFEE -  -  -  -  
   27 D1:AFEE -  -  -  -  ; ***************************************************************************************
   28 D1:AFEE -  -  -  -  ;
   29 D1:AFEE -  -  -  -  ;									Changes and Updates
   30 D1:AFEE -  -  -  -  ;
   31 D1:AFEE -  -  -  -  ; ***************************************************************************************
   32 D1:AFEE -  -  -  -  ;
   33 D1:AFEE -  -  -  -  ;		Date			Notes
   34 D1:AFEE -  -  -  -  ;		==== 			=====
   35 D1:AFEE -  -  -  -  ;
   36 D1:AFEE -  -  -  -  ; ***************************************************************************************
   37 D1:AFEE -  -  -  -  			
Listing for file "_build.asm"
   42 D1:AFEE -  -  -  -  #include "core/expression/unary/rnd.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
    1 D1:AFEE -  -  -  -  ; ***************************************************************************************
    2 D1:AFEE -  -  -  -  ; ***************************************************************************************
    3 D1:AFEE -  -  -  -  ;
    4 D1:AFEE -  -  -  -  ;		Name : 		random.asm
    5 D1:AFEE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:AFEE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:AFEE -  -  -  -  ;		Reviewed :	No
    8 D1:AFEE -  -  -  -  ;		Purpose :	Returns random 32 bit integer 
    9 D1:AFEE -  -  -  -  ;
   10 D1:AFEE -  -  -  -  ; ***************************************************************************************
   11 D1:AFEE -  -  -  -  ; ***************************************************************************************
   12 D1:AFEE -  -  -  -  
   13 D1:AFEE -  -  -  -  ; ***************************************************************************************
   14 D1:AFEE -  -  -  -  ;
   15 D1:AFEE -  -  -  -  ;								Random unary function
   16 D1:AFEE -  -  -  -  ;
   17 D1:AFEE -  -  -  -  ; ***************************************************************************************
   18 D1:AFEE -  -  -  -  
   19 D1:AFEE -  -  -  -  Unary_Random:	;; [rnd]
   20 D1:AFEE F5 3E 02 32 
              FF FF FF F1 		debug
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/rnd.asm"
   21 D1:AFF6 CD FB AD D1 		call 	EvaluateIntegerTerm 		; get the seed/range value.
   22 D1:AFFA D9 -  -  -  		exx 								; is it -ve
   23 D1:AFFB CB 7C -  -  		bit 	7,h
   24 D1:AFFD D9 -  -  -  		exx
   25 D1:AFFE 28 0D -  -  		jr 		z,_URDontSeed 				; if so.
   26 D1:B000 22 F1 A8 D1 		ld 		(RandomSeed),hl 			; update random seed with HL'HL
   27 D1:B004 D9 -  -  -  		exx
   28 D1:B005 22 F5 A8 D1 		ld 		(RandomSeed+4),hl
   29 D1:B009 D9 -  -  -  		exx
   30 D1:B00A 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; and return new seed.
   31 D1:B00C C9 -  -  -  		ret
   32 D1:B00D -  -  -  -  _URDontSeed:		
   33 D1:B00D -  -  -  -  
   34 D1:B00D CD 3F B9 D1 		call	Int32Zero 					; RND(0) doesn't work, no floats.
   35 D1:B011 28 1C -  -  		jr 		z,_URFail
   36 D1:B013 E5 -  -  -  		push 	hl 							; save range on stack.
   37 D1:B014 D9 -  -  -  		exx
   38 D1:B015 E5 -  -  -  		push 	hl
   39 D1:B016 D9 -  -  -  		exx
   40 D1:B017 -  -  -  -  		;
   41 D1:B017 CD 40 B0 D1 		call 	URandomHL 					; get random HL'HL
   42 D1:B01B D9 -  -  -  		exx
   43 D1:B01C CD 40 B0 D1 		call 	URandomHL
   44 D1:B020 CB BC -  -  		res 	7,h 						; force it to be +ve
   45 D1:B022 D9 -  -  -  		exx
   46 D1:B023 -  -  -  -  		;
   47 D1:B023 D9 -  -  -  		exx 								; restore range.
   48 D1:B024 D1 -  -  -  		pop 	de
   49 D1:B025 D9 -  -  -  		exx
   50 D1:B026 D1 -  -  -  		pop 	de
   51 D1:B027 -  -  -  -  		;
   52 D1:B027 CD D0 B7 D1 		call 	Int32Modulus 				; now in range 0->n-1 so bump it.
   53 D1:B02B 23 -  -  -  		inc 	hl 							; won't bother with MSB for this
   54 D1:B02C 0E 00 -  -  		ld		c,XTYPE_INTEGER
   55 D1:B02E C9 -  -  -  		ret
   56 D1:B02F -  -  -  -  _URFail:
   57 D1:B02F 3E 03 C3 EE 
              AB D1 -  -  		ERR_BADVALUE
   58 D1:B035 -  -  -  -  ; ***************************************************************************************
   59 D1:B035 -  -  -  -  ;
   60 D1:B035 -  -  -  -  ; 									Push RNG off zero
   61 D1:B035 -  -  -  -  ;
   62 D1:B035 -  -  -  -  ; ***************************************************************************************
   63 D1:B035 -  -  -  -  
   64 D1:B035 -  -  -  -  UnaryRandomInitialise:
   65 D1:B035 06 10 -  -  		ld 		b,16 						; call it 16 times, so it's away from zero.
   66 D1:B037 -  -  -  -  _URILoop:
   67 D1:B037 C5 -  -  -  		push 	bc
   68 D1:B038 CD 40 B0 D1 		call 	URandomHL
   69 D1:B03C C1 -  -  -  		pop 	bc
   70 D1:B03D 10 F8 -  -  		djnz 	_URILoop
   71 D1:B03F C9 -  -  -  		ret
   72 D1:B040 -  -  -  -  
   73 D1:B040 -  -  -  -  ; ***************************************************************************************
   74 D1:B040 -  -  -  -  ;
   75 D1:B040 -  -  -  -  ;							16 bit random number generator
   76 D1:B040 -  -  -  -  ;
   77 D1:B040 -  -  -  -  ;		from https://wikiti.brandonw.net/index.php?title=Z80_Routines:Math:Random
   78 D1:B040 -  -  -  -  ;		Actual author unspecified.
   79 D1:B040 -  -  -  -  ;
   80 D1:B040 -  -  -  -  ; ***************************************************************************************
   81 D1:B040 -  -  -  -  
   82 D1:B040 -  -  -  -  URandomHL:
   83 D1:B040 2A F1 A8 D1 	    ld 		hl,(RandomSeed)
   84 D1:B044 ED 5B F5 A8 
              D1 -  -  -  	    ld 		de,(RandomSeed+4)
   85 D1:B049 44 -  -  -  	    ld 		b,h
   86 D1:B04A 4D -  -  -  	    ld 		c,l
   87 D1:B04B 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   88 D1:B050 29 CB 13 CB 
              12 -  -  -  	    add 	hl,hl \ rl e \ rl d
   89 D1:B055 2C -  -  -  	    inc 	l
   90 D1:B056 09 -  -  -  	    add 	hl,bc
   91 D1:B057 22 F1 A8 D1 	    ld 		(RandomSeed),hl
   92 D1:B05B 2A F5 A8 D1 	    ld 		hl,(RandomSeed+4)
   93 D1:B05F ED 5A -  -  	    adc 	hl,de
   94 D1:B061 22 F5 A8 D1 	    ld 		(RandomSeed+4),hl
   95 D1:B065 EB -  -  -  	    ex 		de,hl
   96 D1:B066 2A F9 A8 D1 	    ld 		hl,(RandomSeed+8)
   97 D1:B06A ED 4B FD A8 
              D1 -  -  -  	    ld 		bc,(RandomSeed+12)
   98 D1:B06F 29 CB 11 CB 
              10 -  -  -  	    add 	hl,hl \ rl c \ rl b
   99 D1:B074 ED 43 FD A8 
              D1 -  -  -  	    ld 		(RandomSeed+12),bc
  100 D1:B079 9F -  -  -  	    sbc 	a,a
  101 D1:B07A E6 C5 -  -  	    and 	%11000101
  102 D1:B07C AD -  -  -  	    xor 	l
  103 D1:B07D 6F -  -  -  	    ld 		l,a
  104 D1:B07E 22 F9 A8 D1 	    ld 		(RandomSeed+8),hl
  105 D1:B082 EB -  -  -  	    ex 		de,hl
  106 D1:B083 09 -  -  -  	    add 	hl,bc
  107 D1:B084 C9 -  -  -  	    ret		
  108 D1:B085 -  -  -  -  
  109 D1:B085 -  -  -  -  ; ***************************************************************************************
  110 D1:B085 -  -  -  -  ;
  111 D1:B085 -  -  -  -  ;									Changes and Updates
  112 D1:B085 -  -  -  -  ;
  113 D1:B085 -  -  -  -  ; ***************************************************************************************
  114 D1:B085 -  -  -  -  ;
  115 D1:B085 -  -  -  -  ;		Date			Notes
  116 D1:B085 -  -  -  -  ;		==== 			=====
  117 D1:B085 -  -  -  -  ;
  118 D1:B085 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   43 D1:B085 -  -  -  -  #include "core/expression/unary/sgn.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/sgn.asm"
    1 D1:B085 -  -  -  -  ; ***************************************************************************************
    2 D1:B085 -  -  -  -  ; ***************************************************************************************
    3 D1:B085 -  -  -  -  ;
    4 D1:B085 -  -  -  -  ;		Name : 		sgn.asm
    5 D1:B085 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B085 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B085 -  -  -  -  ;		Reviewed :	No
    8 D1:B085 -  -  -  -  ;		Purpose :	Sign of Integer
    9 D1:B085 -  -  -  -  ;
   10 D1:B085 -  -  -  -  ; ***************************************************************************************
   11 D1:B085 -  -  -  -  ; ***************************************************************************************
   12 D1:B085 -  -  -  -  
   13 D1:B085 -  -  -  -  ; ***************************************************************************************
   14 D1:B085 -  -  -  -  ;
   15 D1:B085 -  -  -  -  ;								sgn unary function
   16 D1:B085 -  -  -  -  ;
   17 D1:B085 -  -  -  -  ; ***************************************************************************************
   18 D1:B085 -  -  -  -  
   19 D1:B085 -  -  -  -  Unary_Sgn:	;; [sgn]
   20 D1:B085 CD FB AD D1 		call	EvaluateIntegerTerm 		; get value
   21 D1:B089 CD 3F B9 D1 		call 	Int32Zero 					; integer sgn() code
   22 D1:B08D CA F9 AC D1 		jp 		z,UnaryInt32False
   23 D1:B091 D9 -  -  -  		exx
   24 D1:B092 CB 7C -  -  		bit 	7,h
   25 D1:B094 D9 -  -  -  		exx
   26 D1:B095 C2 F5 AC D1 		jp 		nz,UnaryInt32True
   27 D1:B099 3E 01 -  -  		ld 		a,1
   28 D1:B09B C3 46 AE D1 		jp 		Return8BitConstant
   29 D1:B09F -  -  -  -  
   30 D1:B09F -  -  -  -  ; ***************************************************************************************
   31 D1:B09F -  -  -  -  ;
   32 D1:B09F -  -  -  -  ;									Changes and Updates
   33 D1:B09F -  -  -  -  ;
   34 D1:B09F -  -  -  -  ; ***************************************************************************************
   35 D1:B09F -  -  -  -  ;
   36 D1:B09F -  -  -  -  ;		Date			Notes
   37 D1:B09F -  -  -  -  ;		==== 			=====
   38 D1:B09F -  -  -  -  ;
   39 D1:B09F -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   44 D1:B09F -  -  -  -  #include "core/expression/unary/simple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/simple.asm"
    1 D1:B09F -  -  -  -  ; ***************************************************************************************
    2 D1:B09F -  -  -  -  ; ***************************************************************************************
    3 D1:B09F -  -  -  -  ;
    4 D1:B09F -  -  -  -  ;		Name : 		simple.asm
    5 D1:B09F -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B09F -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B09F -  -  -  -  ;		Reviewed :	No
    8 D1:B09F -  -  -  -  ;		Purpose :	Brackets, @ and & unary functions
    9 D1:B09F -  -  -  -  ;
   10 D1:B09F -  -  -  -  ; ***************************************************************************************
   11 D1:B09F -  -  -  -  ; ***************************************************************************************
   12 D1:B09F -  -  -  -  
   13 D1:B09F -  -  -  -  ; ***************************************************************************************
   14 D1:B09F -  -  -  -  ;
   15 D1:B09F -  -  -  -  ;								( unary function (think about it)
   16 D1:B09F -  -  -  -  ;
   17 D1:B09F -  -  -  -  ; ***************************************************************************************
   18 D1:B09F -  -  -  -  
   19 D1:B09F -  -  -  -  Unary_Brackets:	;; [(]
   20 D1:B09F CD A2 AD D1 		call 	EvaluateAtPrecedence0
   21 D1:B0A3 C3 B8 AB D1 		jp  	CheckRightBracket
   22 D1:B0A7 -  -  -  -  
   23 D1:B0A7 -  -  -  -  ; ***************************************************************************************
   24 D1:B0A7 -  -  -  -  ;
   25 D1:B0A7 -  -  -  -  ;									Handle &x
   26 D1:B0A7 -  -  -  -  ;
   27 D1:B0A7 -  -  -  -  ; ***************************************************************************************
   28 D1:B0A7 -  -  -  -  
   29 D1:B0A7 -  -  -  -  Unary_Ampersand: 	;; [&]
   30 D1:B0A7 DD 7E 00 -  		ld 			a,(ix+0) 				; check followed by a number
   31 D1:B0AA E6 C0 -  -  		and 		$C0
   32 D1:B0AC FE 40 -  -  		cp 			$40
   33 D1:B0AE C2 58 AC D1 		jp 			nz,SyntaxError 			; no then error
   34 D1:B0B2 C3 B0 AE D1 		jp 			EvaluateTerm 			; yes, reenter Term code.
   35 D1:B0B6 -  -  -  -  
   36 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   37 D1:B0B6 -  -  -  -  ;
   38 D1:B0B6 -  -  -  -  ;									Changes and Updates
   39 D1:B0B6 -  -  -  -  ;
   40 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   41 D1:B0B6 -  -  -  -  ;
   42 D1:B0B6 -  -  -  -  ;		Date			Notes
   43 D1:B0B6 -  -  -  -  ;		==== 			=====
   44 D1:B0B6 -  -  -  -  ;
   45 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   46 D1:B0B6 -  -  -  -  		
Listing for file "_build.asm"
   45 D1:B0B6 -  -  -  -  #include "core/expression/unary/str.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/str.asm"
    1 D1:B0B6 -  -  -  -  ; ***************************************************************************************
    2 D1:B0B6 -  -  -  -  ; ***************************************************************************************
    3 D1:B0B6 -  -  -  -  ;
    4 D1:B0B6 -  -  -  -  ;		Name : 		str.asm
    5 D1:B0B6 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0B6 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0B6 -  -  -  -  ;		Reviewed :	No
    8 D1:B0B6 -  -  -  -  ;		Purpose :	str$() implementation ; int -> string
    9 D1:B0B6 -  -  -  -  ;
   10 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   11 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   12 D1:B0B6 -  -  -  -  
   13 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   14 D1:B0B6 -  -  -  -  ;
   15 D1:B0B6 -  -  -  -  ;								Str$() unary function
   16 D1:B0B6 -  -  -  -  ;
   17 D1:B0B6 -  -  -  -  ; ***************************************************************************************
   18 D1:B0B6 -  -  -  -  
   19 D1:B0B6 -  -  -  -  Unary_Str:	;; [str]
   20 D1:B0B6 CD C6 AB D1 		call 	CheckDollar
   21 D1:B0BA DD 7E 00 -  		ld 		a,(ix+0) 					; push next character ^ KWD_TILDE on stack.
   22 D1:B0BD EE AC -  -  		xor		KWD_TILDE
   23 D1:B0BF F5 -  -  -  		push 	af
   24 D1:B0C0 20 02 -  -  		jr 		nz,_USNotHex 				; if it was a tilde, ski it.
   25 D1:B0C2 DD 23 -  -  		inc 	ix
   26 D1:B0C4 -  -  -  -  _USNotHex:		
   27 D1:B0C4 CD FB AD D1 		call 	EvaluateIntegerTerm 		; get an integer
   28 D1:B0C8 01 0F A9 D1 		ld 		bc,_USBuffer 				; point to buffer.
   29 D1:B0CC F1 -  -  -  		pop 	af 							; get tilde flag back (Z set)
   30 D1:B0CD 3E F6 -  -  		ld 		a,-10 						; convert signed base 10 int32
   31 D1:B0CF 20 02 -  -  		jr 		nz,_USNotHex2
   32 D1:B0D1 3E 10 -  -  		ld 		a,16
   33 D1:B0D3 -  -  -  -  _USNotHex2:		
   34 D1:B0D3 CD 87 B9 D1 		call 	Int32ToString 				
   35 D1:B0D7 21 0F A9 D1 		ld 		hl,_USBuffer 				; string address.
   36 D1:B0DB 0E 01 -  -  		ld 		c,XTYPE_STRING				; return string at physical address HL
   37 D1:B0DD C9 -  -  -  		ret
   38 D1:B0DE -  -  -  -  
   39 D1:B0DE -  -  -  -  ; ***************************************************************************************
   40 D1:B0DE -  -  -  -  ;
   41 D1:B0DE -  -  -  -  ;									Changes and Updates
   42 D1:B0DE -  -  -  -  ;
   43 D1:B0DE -  -  -  -  ; ***************************************************************************************
   44 D1:B0DE -  -  -  -  ;
   45 D1:B0DE -  -  -  -  ;		Date			Notes
   46 D1:B0DE -  -  -  -  ;		==== 			=====
   47 D1:B0DE -  -  -  -  ;
   48 D1:B0DE -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   46 D1:B0DE -  -  -  -  #include "core/expression/unary/time.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/time.asm"
    1 D1:B0DE -  -  -  -  ; ***************************************************************************************
    2 D1:B0DE -  -  -  -  ; ***************************************************************************************
    3 D1:B0DE -  -  -  -  ;
    4 D1:B0DE -  -  -  -  ;		Name : 		time.asm
    5 D1:B0DE -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0DE -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0DE -  -  -  -  ;		Reviewed :	No
    8 D1:B0DE -  -  -  -  ;		Purpose :	Get time in ms.
    9 D1:B0DE -  -  -  -  ;
   10 D1:B0DE -  -  -  -  ; ***************************************************************************************
   11 D1:B0DE -  -  -  -  ; ***************************************************************************************
   12 D1:B0DE -  -  -  -  
   13 D1:B0DE -  -  -  -  ; ***************************************************************************************
   14 D1:B0DE -  -  -  -  ;
   15 D1:B0DE -  -  -  -  ;							Get system time in ms
   16 D1:B0DE -  -  -  -  ;
   17 D1:B0DE -  -  -  -  ; ***************************************************************************************
   18 D1:B0DE -  -  -  -  
   19 D1:B0DE -  -  -  -  Unary_Time:	;; [time]
   20 D1:B0DE CD 4A BA D1 			call 	SYSGetTimer
   21 D1:B0E2 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   22 D1:B0E4 C9 -  -  -  			ret
   23 D1:B0E5 -  -  -  -  
   24 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   25 D1:B0E5 -  -  -  -  ;
   26 D1:B0E5 -  -  -  -  ;									Changes and Updates
   27 D1:B0E5 -  -  -  -  ;
   28 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   29 D1:B0E5 -  -  -  -  ;
   30 D1:B0E5 -  -  -  -  ;		Date			Notes
   31 D1:B0E5 -  -  -  -  ;		==== 			=====
   32 D1:B0E5 -  -  -  -  ;
   33 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   34 D1:B0E5 -  -  -  -  			
Listing for file "_build.asm"
   47 D1:B0E5 -  -  -  -  #include "core/expression/unary/top.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/top.asm"
    1 D1:B0E5 -  -  -  -  ; ***************************************************************************************
    2 D1:B0E5 -  -  -  -  ; ***************************************************************************************
    3 D1:B0E5 -  -  -  -  ;
    4 D1:B0E5 -  -  -  -  ;		Name : 		top.asm
    5 D1:B0E5 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0E5 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0E5 -  -  -  -  ;		Reviewed :	No
    8 D1:B0E5 -  -  -  -  ;		Purpose :	Various constants.
    9 D1:B0E5 -  -  -  -  ;
   10 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   11 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   12 D1:B0E5 -  -  -  -  
   13 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   14 D1:B0E5 -  -  -  -  ;
   15 D1:B0E5 -  -  -  -  ;							page unary function (no bracket)
   16 D1:B0E5 -  -  -  -  ;
   17 D1:B0E5 -  -  -  -  ; ***************************************************************************************
   18 D1:B0E5 -  -  -  -  
   19 D1:B0E5 -  -  -  -  Unary_Top:	;; [top]
   20 D1:B0E5 2A D5 A8 D1 			ld 		hl,(TopMemory) 			; get address of code
   21 D1:B0E9 D9 -  -  -  			exx
   22 D1:B0EA 2A D7 A8 D1 			ld 		hl,(TopMemory+2)
   23 D1:B0EE D9 -  -  -  			exx
   24 D1:B0EF 0E 00 -  -  			ld 		c,XTYPE_INTEGER 		; this makes it an integer.
   25 D1:B0F1 C9 -  -  -  			ret
   26 D1:B0F2 -  -  -  -  
   27 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   28 D1:B0F2 -  -  -  -  ;
   29 D1:B0F2 -  -  -  -  ;									Changes and Updates
   30 D1:B0F2 -  -  -  -  ;
   31 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   32 D1:B0F2 -  -  -  -  ;
   33 D1:B0F2 -  -  -  -  ;		Date			Notes
   34 D1:B0F2 -  -  -  -  ;		==== 			=====
   35 D1:B0F2 -  -  -  -  ;
   36 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   37 D1:B0F2 -  -  -  -  			
Listing for file "_build.asm"
   48 D1:B0F2 -  -  -  -  #include "core/expression/unary/val.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
    1 D1:B0F2 -  -  -  -  ; ***************************************************************************************
    2 D1:B0F2 -  -  -  -  ; ***************************************************************************************
    3 D1:B0F2 -  -  -  -  ;
    4 D1:B0F2 -  -  -  -  ;		Name : 		val.asm
    5 D1:B0F2 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B0F2 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B0F2 -  -  -  -  ;		Reviewed :	No
    8 D1:B0F2 -  -  -  -  ;		Purpose :	String->Integer conversion.
    9 D1:B0F2 -  -  -  -  ;
   10 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   11 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   12 D1:B0F2 -  -  -  -  
   13 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   14 D1:B0F2 -  -  -  -  ;
   15 D1:B0F2 -  -  -  -  ;								val( unary function
   16 D1:B0F2 -  -  -  -  ;
   17 D1:B0F2 -  -  -  -  ; ***************************************************************************************
   18 D1:B0F2 -  -  -  -  
   19 D1:B0F2 -  -  -  -  Unary_Val:	;; [val]
   20 D1:B0F2 CD 0A AE D1 		call 	EvaluateStringTerm 			; get the string into UHL
   21 D1:B0F6 E5 -  -  -  		push 	hl 							; copy to BC
   22 D1:B0F7 C1 -  -  -  		pop 	bc
   23 D1:B0F8 3E F6 -  -  		ld 		a,-10 						; base 10, signed.
   24 D1:B0FA CD 65 B8 D1 		call 	Int32FromString 			; get the integer part.
   25 D1:B0FE 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer 
   26 D1:B100 C8 -  -  -  		ret		z 							; okay
   27 D1:B101 3E 03 C3 EE 
              AB D1 -  -  		ERR_BADVALUE
Listing for file "/home/paulr/Projects/dax-basic/source/core/expression/unary/val.asm"
   28 D1:B107 -  -  -  -  
   29 D1:B107 -  -  -  -  ; ***************************************************************************************
   30 D1:B107 -  -  -  -  ;
   31 D1:B107 -  -  -  -  ;									Changes and Updates
   32 D1:B107 -  -  -  -  ;
   33 D1:B107 -  -  -  -  ; ***************************************************************************************
   34 D1:B107 -  -  -  -  ;
   35 D1:B107 -  -  -  -  ;		Date			Notes
   36 D1:B107 -  -  -  -  ;		==== 			=====
   37 D1:B107 -  -  -  -  ;
   38 D1:B107 -  -  -  -  ; ***************************************************************************************
   39 D1:B107 -  -  -  -  		
Listing for file "_build.asm"
   49 D1:B107 -  -  -  -  #include "core/setup/allocate.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
    1 D1:B107 -  -  -  -  ; ***************************************************************************************
    2 D1:B107 -  -  -  -  ; ***************************************************************************************
    3 D1:B107 -  -  -  -  ;
    4 D1:B107 -  -  -  -  ;		Name : 		allocate.asm
    5 D1:B107 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B107 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B107 -  -  -  -  ;		Reviewed :	No
    8 D1:B107 -  -  -  -  ;		Purpose :	Allocate memory
    9 D1:B107 -  -  -  -  ;
   10 D1:B107 -  -  -  -  ; ***************************************************************************************
   11 D1:B107 -  -  -  -  ; ***************************************************************************************
   12 D1:B107 -  -  -  -  
   13 D1:B107 -  -  -  -  ; ***************************************************************************************
   14 D1:B107 -  -  -  -  ;
   15 D1:B107 -  -  -  -  ;						Allocate UHL bytes of memory, return in UHL
   16 D1:B107 -  -  -  -  ;
   17 D1:B107 -  -  -  -  ; ***************************************************************************************
   18 D1:B107 -  -  -  -  
   19 D1:B107 -  -  -  -  AllocateBytes:
   20 D1:B107 EB -  -  -  		ex 		de,hl 						; make HL 16 bit
   21 D1:B108 21 00 00 00 		ld 		hl,$000000
   22 D1:B10C 62 -  -  -  		ld 		h,d
   23 D1:B10D 6B -  -  -  		ld 		l,e
   24 D1:B10E -  -  -  -  		;
   25 D1:B10E ED 5B D1 A8 
              D1 -  -  -  		ld 		de,(LowAllocMemory) 		; lowest free byte
   26 D1:B113 D5 -  -  -  		push 	de 							; save on stack
   27 D1:B114 19 -  -  -  		add 	hl,de 						; HL is the new highest
   28 D1:B115 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; update it
   29 D1:B119 -  -  -  -  		;
   30 D1:B119 EB -  -  -  		ex 		de,hl 						; put in DE
   31 D1:B11A 2A CD A8 D1 		ld 		hl,(HighAllocMemory) 		; calculate high-low
   32 D1:B11E AF -  -  -  		xor 	a
   33 D1:B11F ED 52 -  -  		sbc 	hl,de
   34 D1:B121 E1 -  -  -  		pop 	hl 							; get lowest free byte back into HL
   35 D1:B122 D0 -  -  -  		ret 	nc 							; return if high >= low
   36 D1:B123 3E 0A C3 EE 
              AB D1 -  -  		ERR_MEMORY 							; memory error.
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/allocate.asm"
   37 D1:B129 -  -  -  -  
   38 D1:B129 -  -  -  -  ; ***************************************************************************************
   39 D1:B129 -  -  -  -  ;
   40 D1:B129 -  -  -  -  ;									Changes and Updates
   41 D1:B129 -  -  -  -  ;
   42 D1:B129 -  -  -  -  ; ***************************************************************************************
   43 D1:B129 -  -  -  -  ;
   44 D1:B129 -  -  -  -  ;		Date			Notes
   45 D1:B129 -  -  -  -  ;		==== 			=====
   46 D1:B129 -  -  -  -  ;
   47 D1:B129 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   50 D1:B129 -  -  -  -  #include "core/setup/clear.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/clear.asm"
    1 D1:B129 -  -  -  -  ; ***************************************************************************************
    2 D1:B129 -  -  -  -  ; ***************************************************************************************
    3 D1:B129 -  -  -  -  ;
    4 D1:B129 -  -  -  -  ;		Name : 		clear.asm
    5 D1:B129 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B129 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B129 -  -  -  -  ;		Reviewed :	No
    8 D1:B129 -  -  -  -  ;		Purpose :	Clear command.
    9 D1:B129 -  -  -  -  ;
   10 D1:B129 -  -  -  -  ; ***************************************************************************************
   11 D1:B129 -  -  -  -  ; ***************************************************************************************
   12 D1:B129 -  -  -  -  
   13 D1:B129 -  -  -  -  ; ***************************************************************************************
   14 D1:B129 -  -  -  -  ;
   15 D1:B129 -  -  -  -  ;										CLEAR command
   16 D1:B129 -  -  -  -  ;
   17 D1:B129 -  -  -  -  ; ***************************************************************************************
   18 D1:B129 -  -  -  -  
   19 D1:B129 -  -  -  -  Command_CLEAR: 	;; [clear]
   20 D1:B129 -  -  -  -  		;
   21 D1:B129 -  -  -  -  		;			Reset the low free memory pointer (e.g. just above the program space.)
   22 D1:B129 -  -  -  -  		;
   23 D1:B129 2A B1 A8 D1 		ld 		hl,(LowMemory) 				; base memory
   24 D1:B12D -  -  -  -  _CCFindLow:
   25 D1:B12D 11 00 00 00 		ld 		de,0 						; keep adding [hl] till [hl] was zero.
   26 D1:B131 5E -  -  -  		ld 		e,(hl)		
   27 D1:B132 19 -  -  -  		add 	hl,de
   28 D1:B133 7B -  -  -  		ld 		a,e
   29 D1:B134 B7 -  -  -  		or 		a
   30 D1:B135 20 F6 -  -  		jr 		nz,_CCFindLow
   31 D1:B137 23 -  -  -  		inc 	hl 							; one past the last $00
   32 D1:B138 22 D5 A8 D1 		ld 		(TopMemory),hl 				; save TOP
   33 D1:B13C 23 -  -  -  		inc 	hl 							; one for luck
   34 D1:B13D 22 D1 A8 D1 		ld 		(LowAllocMemory),hl 		; lowest byte allocated, this pointer moves up.
   35 D1:B141 -  -  -  -  		;
   36 D1:B141 -  -  -  -  		; 	 		Reset the language stack
   37 D1:B141 -  -  -  -  		;
   38 D1:B141 2A B5 A8 D1 		ld 		hl,(HighMemory) 			; this is high memory, also top of stack
   39 D1:B145 -  -  -  -  		;
   40 D1:B145 22 BD A8 D1 		ld 		(LanguageStack),hl 			; going down from here		
   41 D1:B149 11 00 F8 FF 		ld 		de,-LanguageStackSize 		; allocate space for language stack.
   42 D1:B14D 19 -  -  -  		add 	hl,de
   43 D1:B14E 2E 00 -  -  		ld 		l,$00 						; put on page boundary.
   44 D1:B150 22 C1 A8 D1 		ld 		(LanguageStackEnd),hl 		; where it runs out.
   45 D1:B154 -  -  -  -  		;
   46 D1:B154 11 80 FF FF 		ld 		de,-128 					; allow 128 bytes for the 26 x 4 integer variables.
   47 D1:B158 19 -  -  -  		add 	hl,de
   48 D1:B159 22 C5 A8 D1 		ld 		(StandardIntegers),hl
   49 D1:B15D -  -  -  -  		;
   50 D1:B15D -  -  -  -  		; 		Allocate space for, and erase all hash table pointers, 
   51 D1:B15D -  -  -  -  		;
   52 D1:B15D 11 80 00 00 		ld 		de,HashTableSize*4*2 		; bytes required for integer/array hash tables
   53 D1:B161 -  -  -  -  _CCFClearHT:
   54 D1:B161 2B -  -  -  		dec 	hl 							; clear DE bytes going backwards.
   55 D1:B162 36 00 -  -  		ld 		(hl),0
   56 D1:B164 1B -  -  -  		dec 	de
   57 D1:B165 7A -  -  -  		ld 		a,d
   58 D1:B166 B3 -  -  -  		or 		e
   59 D1:B167 20 F8 -  -  		jr 		nz,_CCFClearHT
   60 D1:B169 22 C9 A8 D1 		ld 		(HashTableBase),hl 			; save table base
   61 D1:B16D -  -  -  -  		;
   62 D1:B16D -  -  -  -  		; 		Save highest byte that can be allocate
   63 D1:B16D -  -  -  -  		;
   64 D1:B16D 22 CD A8 D1 		ld 		(HighAllocMemory),hl 		; set high memory
   65 D1:B171 -  -  -  -  		;
   66 D1:B171 -  -  -  -  		; 		Seed the RNG incase the seeds were all zero which gives bad results
   67 D1:B171 -  -  -  -  		;
   68 D1:B171 CD 35 B0 D1 		call 	UnaryRandomInitialise
   69 D1:B175 -  -  -  -  		;
   70 D1:B175 -  -  -  -  		;		Erase the stack
   71 D1:B175 -  -  -  -  		;
   72 D1:B175 CD D9 B2 D1 		call 	StackReset 					; reset the basic stack to empty
   73 D1:B179 C9 -  -  -  		ret
   74 D1:B17A -  -  -  -  
   75 D1:B17A -  -  -  -  ; ***************************************************************************************
   76 D1:B17A -  -  -  -  ;
   77 D1:B17A -  -  -  -  ;									Changes and Updates
   78 D1:B17A -  -  -  -  ;
   79 D1:B17A -  -  -  -  ; ***************************************************************************************
   80 D1:B17A -  -  -  -  ;
   81 D1:B17A -  -  -  -  ;		Date			Notes
   82 D1:B17A -  -  -  -  ;		==== 			=====
   83 D1:B17A -  -  -  -  ;
   84 D1:B17A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   51 D1:B17A -  -  -  -  #include "core/setup/instance.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/instance.asm"
    1 D1:B17A -  -  -  -  ; ***************************************************************************************
    2 D1:B17A -  -  -  -  ; ***************************************************************************************
    3 D1:B17A -  -  -  -  ;
    4 D1:B17A -  -  -  -  ;		Name : 		instance.asm
    5 D1:B17A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B17A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B17A -  -  -  -  ;		Reviewed :	No
    8 D1:B17A -  -  -  -  ;		Purpose :	Instance handling
    9 D1:B17A -  -  -  -  ;
   10 D1:B17A -  -  -  -  ; ***************************************************************************************
   11 D1:B17A -  -  -  -  ; ***************************************************************************************
   12 D1:B17A -  -  -  -  
   13 D1:B17A -  -  -  -  ; ***************************************************************************************
   14 D1:B17A -  -  -  -  ;
   15 D1:B17A -  -  -  -  ;				Switch to instance beginning at DE and ending at HL
   16 D1:B17A -  -  -  -  ;
   17 D1:B17A -  -  -  -  ; ***************************************************************************************
   18 D1:B17A -  -  -  -  
   19 D1:B17A -  -  -  -  SetCurrentInstance:
   20 D1:B17A ED 53 B1 A8 
              D1 -  -  -  		ld 		(LowMemory),de 				; set low and high memory
   21 D1:B17F 22 B5 A8 D1 		ld 		(HighMemory),hl 
   22 D1:B183 ED 53 B9 A8 
              D1 -  -  -  		ld 		(CodeAddress),de 			; program code is at the start.
   23 D1:B188 -  -  -  -  
   24 D1:B188 C9 -  -  -  		ret
   25 D1:B189 -  -  -  -  
   26 D1:B189 -  -  -  -  
   27 D1:B189 -  -  -  -  ; ***************************************************************************************
   28 D1:B189 -  -  -  -  ;
   29 D1:B189 -  -  -  -  ;									Changes and Updates
   30 D1:B189 -  -  -  -  ;
   31 D1:B189 -  -  -  -  ; ***************************************************************************************
   32 D1:B189 -  -  -  -  ;
   33 D1:B189 -  -  -  -  ;		Date			Notes
   34 D1:B189 -  -  -  -  ;		==== 			=====
   35 D1:B189 -  -  -  -  ;
   36 D1:B189 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   52 D1:B189 -  -  -  -  #include "core/setup/new.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
    1 D1:B189 -  -  -  -  ; ***************************************************************************************
    2 D1:B189 -  -  -  -  ; ***************************************************************************************
    3 D1:B189 -  -  -  -  ;
    4 D1:B189 -  -  -  -  ;		Name : 		new.asm
    5 D1:B189 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B189 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B189 -  -  -  -  ;		Reviewed :	No
    8 D1:B189 -  -  -  -  ;		Purpose :	New command.
    9 D1:B189 -  -  -  -  ;
   10 D1:B189 -  -  -  -  ; ***************************************************************************************
   11 D1:B189 -  -  -  -  ; ***************************************************************************************
   12 D1:B189 -  -  -  -  
   13 D1:B189 -  -  -  -  ; ***************************************************************************************
   14 D1:B189 -  -  -  -  ;
   15 D1:B189 -  -  -  -  ;										NEW command
   16 D1:B189 -  -  -  -  ;
   17 D1:B189 -  -  -  -  ; ***************************************************************************************
   18 D1:B189 -  -  -  -  
   19 D1:B189 -  -  -  -  Command_NEW: 	;; [new]
   20 D1:B189 2A B9 A8 D1 		ld 		hl,(CodeAddress) 			; write $00 at start of code erasing program
   21 D1:B18D 36 00 -  -  		ld 		(hl),0
   22 D1:B18F CD 29 B1 D1 		call 	Command_CLEAR 				; clear all variables
   23 D1:B193 3E 00 C3 EE 
              AB D1 -  -  		ERR_WARMSTART 						; warm start.		
Listing for file "/home/paulr/Projects/dax-basic/source/core/setup/new.asm"
   24 D1:B199 -  -  -  -  
   25 D1:B199 -  -  -  -  ; ***************************************************************************************
   26 D1:B199 -  -  -  -  ;
   27 D1:B199 -  -  -  -  ;									Changes and Updates
   28 D1:B199 -  -  -  -  ;
   29 D1:B199 -  -  -  -  ; ***************************************************************************************
   30 D1:B199 -  -  -  -  ;
   31 D1:B199 -  -  -  -  ;		Date			Notes
   32 D1:B199 -  -  -  -  ;		==== 			=====
   33 D1:B199 -  -  -  -  ;
   34 D1:B199 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   53 D1:B199 -  -  -  -  #include "core/structures/for.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
    1 D1:B199 -  -  -  -  ; ***************************************************************************************
    2 D1:B199 -  -  -  -  ; ***************************************************************************************
    3 D1:B199 -  -  -  -  ;
    4 D1:B199 -  -  -  -  ;		Name : 		for.asm
    5 D1:B199 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B199 -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B199 -  -  -  -  ;		Reviewed :	No
    8 D1:B199 -  -  -  -  ;		Purpose :	For/Next command
    9 D1:B199 -  -  -  -  ;
   10 D1:B199 -  -  -  -  ; ***************************************************************************************
   11 D1:B199 -  -  -  -  
   12 D1:B199 -  -  -  -  ; ***************************************************************************************
   13 D1:B199 -  -  -  -  ;
   14 D1:B199 -  -  -  -  ;									For Command
   15 D1:B199 -  -  -  -  ;
   16 D1:B199 -  -  -  -  ; ***************************************************************************************
   17 D1:B199 -  -  -  -  
   18 D1:B199 -  -  -  -  Command_FOR: ;; [for]
   19 D1:B199 3E 39 -  -  			ld		a,STM_FOR 				; open the FOR frame
   20 D1:B19B CD E5 B2 D1 			call 	StackOpenFrame
   21 D1:B19F -  -  -  -  			;
   22 D1:B19F -  -  -  -  			;		Variable Reference to increment
   23 D1:B19F -  -  -  -  			;
   24 D1:B19F DD E5 -  -  			push	ix 						; save start position
   25 D1:B1A1 3E FF -  -  			ld 		a,255 					; FOR can create
   26 D1:B1A3 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   27 D1:B1A7 CD B0 AE D1 			call 	EvaluateTerm 			; get term
   28 D1:B1AB AF -  -  -  			xor 	a 						; autocreate off.
   29 D1:B1AC 32 01 A9 D1 			ld 		(AllowAutoCreate),a
   30 D1:B1B0 DD E1 -  -  			pop 	ix 						; get start position
   31 D1:B1B2 E5 -  -  -  			push 	hl 						; save reference address.
   32 D1:B1B3 -  -  -  -  			;
   33 D1:B1B3 CB 41 -  -  			bit 	CIsString,c 			; check it is a string reference.
   34 D1:B1B5 C2 58 AC D1 			jp 		nz,SyntaxError
   35 D1:B1B9 EB -  -  -  			ex 		de,hl 					; put reference in DE.
   36 D1:B1BA -  -  -  -  			;
   37 D1:B1BA 2A D9 A8 D1 			ld 		hl,(BasicSP)			; point to Basic+6, where the reference goes.
   38 D1:B1BE 01 06 00 00 			ld 		bc,6
   39 D1:B1C2 09 -  -  -  			add 	hl,bc 
   40 D1:B1C3 ED 1F 23 23 
              23 23 -  -  			st_de_hl_ind_incr 				; write and bump reference.
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/for.asm"
   41 D1:B1C9 -  -  -  -  			;
   42 D1:B1C9 -  -  -  -  			;		var = value
   43 D1:B1C9 -  -  -  -  			;
   44 D1:B1C9 CD 44 AA D1 			call 	Command_LET 			; so we do I = 1 or whatever.
   45 D1:B1CD -  -  -  -  			; 		
   46 D1:B1CD -  -  -  -  			; 		TO
   47 D1:B1CD -  -  -  -  			;
   48 D1:B1CD 3E B3 -  -  			ld 		a,KWD_TO 				; TO token
   49 D1:B1CF CD E2 AB D1 			call 	CheckNextA
   50 D1:B1D3 -  -  -  -  			;
   51 D1:B1D3 -  -  -  -  			;		value
   52 D1:B1D3 -  -  -  -  			;
   53 D1:B1D3 CD 21 AE D1 			call 	EvaluateInteger  		; write the TO value to offset 10.
   54 D1:B1D7 3E 0A -  -  			ld 		a,10
   55 D1:B1D9 CD 14 B2 D1 			call 	CFWriteHLHLToA 
   56 D1:B1DD -  -  -  -  			;
   57 D1:B1DD -  -  -  -  			;		Check STEP ?
   58 D1:B1DD -  -  -  -  			;
   59 D1:B1DD 21 01 00 00 			ld 		hl,1 					; default STEP is 1.
   60 D1:B1E1 D9 -  -  -  			exx
   61 D1:B1E2 21 00 00 00 			ld 		hl,0
   62 D1:B1E6 D9 -  -  -  			exx			
   63 D1:B1E7 DD 7E 00 -  			ld 		a,(ix+0) 				; STEP provided ?
   64 D1:B1EA FE B4 -  -  			cp 		KWD_STEP 				
   65 D1:B1EC 20 06 -  -  			jr 		nz,_CFDefaultStep
   66 D1:B1EE -  -  -  -  			;
   67 D1:B1EE DD 23 -  -  			inc 	ix 						; get step
   68 D1:B1F0 CD 21 AE D1 			call 	EvaluateInteger
   69 D1:B1F4 -  -  -  -  _CFDefaultStep:			
   70 D1:B1F4 3E 0E -  -  			ld 		a,14 					; write to STEP slot.
   71 D1:B1F6 CD 14 B2 D1 			call 	CFWriteHLHLToA 
   72 D1:B1FA CD 23 B3 D1 			call 	StackSavePosition 		; save loop address
   73 D1:B1FE C9 -  -  -  			ret
   74 D1:B1FF -  -  -  -  
   75 D1:B1FF -  -  -  -  ; ***************************************************************************************
   76 D1:B1FF -  -  -  -  ;
   77 D1:B1FF -  -  -  -  ;								Read BasicStack+A to HL'HL
   78 D1:B1FF -  -  -  -  ;
   79 D1:B1FF -  -  -  -  ; ***************************************************************************************
   80 D1:B1FF -  -  -  -  
   81 D1:B1FF -  -  -  -  CFReadAToHLHL:
   82 D1:B1FF 01 00 00 00 			ld 		bc,0 					; BC = 00|A
   83 D1:B203 4F -  -  -  			ld 		c,a
   84 D1:B204 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
   85 D1:B208 09 -  -  -  			add 	hl,bc
   86 D1:B209 -  -  -  -  
   87 D1:B209 E5 -  -  -  			push 	hl
   88 D1:B20A ED 27 -  -  			ld_ind_hl 						; get low word
   89 D1:B20C D9 -  -  -  			exx
   90 D1:B20D -  -  -  -  
   91 D1:B20D E1 -  -  -  			pop 	hl 						; get high word
   92 D1:B20E 23 -  -  -  			inc 	hl
   93 D1:B20F 23 -  -  -  			inc 	hl
   94 D1:B210 ED 27 -  -  			ld_ind_hl
   95 D1:B212 D9 -  -  -  			exx
   96 D1:B213 -  -  -  -  
   97 D1:B213 C9 -  -  -  			ret
   98 D1:B214 -  -  -  -  			
   99 D1:B214 -  -  -  -  ; ***************************************************************************************
  100 D1:B214 -  -  -  -  ;
  101 D1:B214 -  -  -  -  ;								Write HL'HL to BasicStack+A
  102 D1:B214 -  -  -  -  ;
  103 D1:B214 -  -  -  -  ; ***************************************************************************************
  104 D1:B214 -  -  -  -  
  105 D1:B214 -  -  -  -  CFWriteHLHLToA:
  106 D1:B214 EB -  -  -  			ex 		de,hl 					; copy HL'HL to DE
  107 D1:B215 D9 -  -  -  			exx
  108 D1:B216 EB -  -  -  			ex 		de,hl
  109 D1:B217 D9 -  -  -  			exx
  110 D1:B218 -  -  -  -  
  111 D1:B218 01 00 00 00 			ld 		bc,0 					; BC = 00|A
  112 D1:B21C 4F -  -  -  			ld 		c,a
  113 D1:B21D 2A D9 A8 D1 			ld 		hl,(BasicSP) 			; add stack base
  114 D1:B221 09 -  -  -  			add 	hl,bc
  115 D1:B222 -  -  -  -  
  116 D1:B222 73 -  -  -  			ld 		(hl),e 					; write low word
  117 D1:B223 23 -  -  -  			inc 	hl
  118 D1:B224 72 -  -  -  			ld 		(hl),d
  119 D1:B225 23 -  -  -  			inc 	hl
  120 D1:B226 -  -  -  -  
  121 D1:B226 E5 -  -  -  			push 	hl 						; write high word
  122 D1:B227 D9 -  -  -  			exx
  123 D1:B228 E1 -  -  -  			pop 	hl
  124 D1:B229 73 -  -  -  			ld 		(hl),e
  125 D1:B22A 23 -  -  -  			inc 	hl
  126 D1:B22B 72 -  -  -  			ld 		(hl),d
  127 D1:B22C D9 -  -  -  			exx
  128 D1:B22D C9 -  -  -  			ret			
  129 D1:B22E -  -  -  -  
  130 D1:B22E -  -  -  -  ; ***************************************************************************************
  131 D1:B22E -  -  -  -  ;
  132 D1:B22E -  -  -  -  ;									Next Command
  133 D1:B22E -  -  -  -  ;		  (only supports version w/o index variable, something I never liked)
  134 D1:B22E -  -  -  -  ;
  135 D1:B22E -  -  -  -  ; ***************************************************************************************
  136 D1:B22E -  -  -  -  
  137 D1:B22E -  -  -  -  Command_Next:	;; [next]
  138 D1:B22E F5 3E 02 32 
              FF FF FF F1 			debug
  139 D1:B236 3E 39 -  -  			ld		a,STM_FOR 				; check in a FOR Loop.
  140 D1:B238 CD 1D B3 D1 			call 	StackCheckFrame
  141 D1:B23C -  -  -  -  
  142 D1:B23C -  -  -  -  ; ***************************************************************************************
  143 D1:B23C -  -  -  -  ;
  144 D1:B23C -  -  -  -  ;									Changes and Updates
  145 D1:B23C -  -  -  -  ;
  146 D1:B23C -  -  -  -  ; ***************************************************************************************
  147 D1:B23C -  -  -  -  ;
  148 D1:B23C -  -  -  -  ;		Date			Notes
  149 D1:B23C -  -  -  -  ;		==== 			=====
  150 D1:B23C -  -  -  -  ;
  151 D1:B23C -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   54 D1:B23C -  -  -  -  #include "core/structures/gosub.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
    1 D1:B23C -  -  -  -  ; ***************************************************************************************
    2 D1:B23C -  -  -  -  ; ***************************************************************************************
    3 D1:B23C -  -  -  -  ;
    4 D1:B23C -  -  -  -  ;		Name : 		gosub.asm
    5 D1:B23C -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B23C -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B23C -  -  -  -  ;		Reviewed :	No
    8 D1:B23C -  -  -  -  ;		Purpose :	Gosub/Return command
    9 D1:B23C -  -  -  -  ;
   10 D1:B23C -  -  -  -  ; ***************************************************************************************
   11 D1:B23C -  -  -  -  
   12 D1:B23C -  -  -  -  ; ***************************************************************************************
   13 D1:B23C -  -  -  -  ;
   14 D1:B23C -  -  -  -  ;									Gosub Command
   15 D1:B23C -  -  -  -  ;
   16 D1:B23C -  -  -  -  ; ***************************************************************************************
   17 D1:B23C -  -  -  -  
   18 D1:B23C -  -  -  -  Command_GOSUB: ;; [gosub]
   19 D1:B23C 3E 13 -  -  			ld		a,STM_GOSUB
   20 D1:B23E CD E5 B2 D1 			call 	StackOpenFrame
   21 D1:B242 CD 71 B2 D1 			call 	GoGetLineNumber
   22 D1:B246 E5 -  -  -  			push 	hl
   23 D1:B247 CD 23 B3 D1 			call 	StackSavePosition
   24 D1:B24B E1 -  -  -  			pop 	hl
   25 D1:B24C CD 7E B2 D1 			call	TransferToLineHL
   26 D1:B250 C9 -  -  -  			ret
   27 D1:B251 -  -  -  -  
   28 D1:B251 -  -  -  -  ; ***************************************************************************************
   29 D1:B251 -  -  -  -  ;
   30 D1:B251 -  -  -  -  ;									Return command
   31 D1:B251 -  -  -  -  ;
   32 D1:B251 -  -  -  -  ; ***************************************************************************************
   33 D1:B251 -  -  -  -  
   34 D1:B251 -  -  -  -  Command_Return: ;; [return]
   35 D1:B251 3E 13 -  -  			ld		a,STM_GOSUB
   36 D1:B253 CD 1D B3 D1 			call 	StackCheckFrame
   37 D1:B257 20 09 -  -  			jr 		nz,_ReturnError
   38 D1:B259 CD 3E B3 D1 			call 	StackLoadPosition
   39 D1:B25D CD 0A B3 D1 			call 	StackCloseFrame
   40 D1:B261 C9 -  -  -  			ret
   41 D1:B262 -  -  -  -  _ReturnError:
   42 D1:B262 3E 07 C3 EE 
              AB D1 -  -  			ERR_GOSUB
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/gosub.asm"
   43 D1:B268 -  -  -  -  
   44 D1:B268 -  -  -  -  ; ***************************************************************************************
   45 D1:B268 -  -  -  -  ;
   46 D1:B268 -  -  -  -  ;									Changes and Updates
   47 D1:B268 -  -  -  -  ;
   48 D1:B268 -  -  -  -  ; ***************************************************************************************
   49 D1:B268 -  -  -  -  ;
   50 D1:B268 -  -  -  -  ;		Date			Notes
   51 D1:B268 -  -  -  -  ;		==== 			=====
   52 D1:B268 -  -  -  -  ;
   53 D1:B268 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   55 D1:B268 -  -  -  -  #include "core/structures/goto.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
    1 D1:B268 -  -  -  -  ; ***************************************************************************************
    2 D1:B268 -  -  -  -  ; ***************************************************************************************
    3 D1:B268 -  -  -  -  ;
    4 D1:B268 -  -  -  -  ;		Name : 		goto.asm
    5 D1:B268 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B268 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B268 -  -  -  -  ;		Reviewed :	No
    8 D1:B268 -  -  -  -  ;		Purpose :	Goto command
    9 D1:B268 -  -  -  -  ;
   10 D1:B268 -  -  -  -  ; ***************************************************************************************
   11 D1:B268 -  -  -  -  
   12 D1:B268 -  -  -  -  ; ***************************************************************************************
   13 D1:B268 -  -  -  -  ;
   14 D1:B268 -  -  -  -  ;									Goto Command
   15 D1:B268 -  -  -  -  ;
   16 D1:B268 -  -  -  -  ; ***************************************************************************************
   17 D1:B268 -  -  -  -  
   18 D1:B268 -  -  -  -  Command_GOTO: ;; [goto]
   19 D1:B268 CD 71 B2 D1 			call 	GoGetLineNumber
   20 D1:B26C CD 7E B2 D1 			call	TransferToLineHL
   21 D1:B270 C9 -  -  -  			ret
   22 D1:B271 -  -  -  -  
   23 D1:B271 -  -  -  -  ; ***************************************************************************************
   24 D1:B271 -  -  -  -  ;
   25 D1:B271 -  -  -  -  ;							Get and validate a line number in HL
   26 D1:B271 -  -  -  -  ;
   27 D1:B271 -  -  -  -  ; ***************************************************************************************
   28 D1:B271 -  -  -  -  
   29 D1:B271 -  -  -  -  GoGetLineNumber:
   30 D1:B271 CD 21 AE D1 			call 	EvaluateInteger
   31 D1:B275 D9 -  -  -  			exx
   32 D1:B276 7C -  -  -  			ld 		a,h
   33 D1:B277 B5 -  -  -  			or 		l
   34 D1:B278 D9 -  -  -  			exx
   35 D1:B279 C8 -  -  -  			ret 	z
   36 D1:B27A C3 52 AC D1 			jp 		BadValue
   37 D1:B27E -  -  -  -  
   38 D1:B27E -  -  -  -  ; ***************************************************************************************
   39 D1:B27E -  -  -  -  ;
   40 D1:B27E -  -  -  -  ;							Transfer to Line Number HL
   41 D1:B27E -  -  -  -  ;
   42 D1:B27E -  -  -  -  ; ***************************************************************************************
   43 D1:B27E -  -  -  -  
   44 D1:B27E -  -  -  -  TransferToLineHL:
   45 D1:B27E EB -  -  -  			ex 		de,hl 					; put line number in DE
   46 D1:B27F 01 00 00 00 			ld 		bc,$000000 				; clear BC (for bumping)
   47 D1:B283 DD 2A B9 A8 
              D1 -  -  -  			ld 		ix,(CodeAddress)
   48 D1:B288 -  -  -  -  _TLSearch:	
   49 D1:B288 DD 09 -  -  			add 	ix,bc 					; follow offset, initially 0
   50 D1:B28A DD 7E 00 -  			ld 		a,(ix+0) 				; get link
   51 D1:B28D B7 -  -  -  			or 		a 						; if zero
   52 D1:B28E 28 19 -  -  			jr 		z,_TLNotFound 			; not found
   53 D1:B290 4F -  -  -  			ld  	c,a 					; BC is the offset.
   54 D1:B291 -  -  -  -  
   55 D1:B291 7B -  -  -  			ld 		a,e						; compare line address
   56 D1:B292 DD BE 01 -  			cp 		(ix+1)
   57 D1:B295 20 F1 -  -  			jr 		nz,_TLSearch
   58 D1:B297 7A -  -  -  			ld 		a,d
   59 D1:B298 DD BE 02 -  			cp 		(ix+2)
   60 D1:B29B 20 EB -  -  			jr 		nz,_TLSearch
   61 D1:B29D -  -  -  -  			;
   62 D1:B29D DD 22 DD A8 
              D1 -  -  -  			ld 		(CurrentLineStart),ix 	; set line start
   63 D1:B2A2 DD 23 -  -  			inc 	ix 						; skip over offset / line#
   64 D1:B2A4 DD 23 -  -  			inc 	ix
   65 D1:B2A6 DD 23 -  -  			inc 	ix
   66 D1:B2A8 -  -  -  -  
   67 D1:B2A8 C9 -  -  -  			ret
   68 D1:B2A9 -  -  -  -  
   69 D1:B2A9 -  -  -  -  _TLNotFound:
   70 D1:B2A9 3E 09 C3 EE 
              AB D1 -  -  			ERR_LINENO
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/goto.asm"
   71 D1:B2AF -  -  -  -  
   72 D1:B2AF -  -  -  -  ; ***************************************************************************************
   73 D1:B2AF -  -  -  -  ;
   74 D1:B2AF -  -  -  -  ;									Changes and Updates
   75 D1:B2AF -  -  -  -  ;
   76 D1:B2AF -  -  -  -  ; ***************************************************************************************
   77 D1:B2AF -  -  -  -  ;
   78 D1:B2AF -  -  -  -  ;		Date			Notes
   79 D1:B2AF -  -  -  -  ;		==== 			=====
   80 D1:B2AF -  -  -  -  ;
   81 D1:B2AF -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   56 D1:B2AF -  -  -  -  #include "core/structures/repeat.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
    1 D1:B2AF -  -  -  -  ; ***************************************************************************************
    2 D1:B2AF -  -  -  -  ; ***************************************************************************************
    3 D1:B2AF -  -  -  -  ;
    4 D1:B2AF -  -  -  -  ;		Name : 		repeat.asm
    5 D1:B2AF -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2AF -  -  -  -  ;		Date : 		7th June 2022
    7 D1:B2AF -  -  -  -  ;		Reviewed :	No
    8 D1:B2AF -  -  -  -  ;		Purpose :	Repeat/Until command
    9 D1:B2AF -  -  -  -  ;
   10 D1:B2AF -  -  -  -  ; ***************************************************************************************
   11 D1:B2AF -  -  -  -  
   12 D1:B2AF -  -  -  -  ; ***************************************************************************************
   13 D1:B2AF -  -  -  -  ;
   14 D1:B2AF -  -  -  -  ;									Repeat Command
   15 D1:B2AF -  -  -  -  ;
   16 D1:B2AF -  -  -  -  ; ***************************************************************************************
   17 D1:B2AF -  -  -  -  
   18 D1:B2AF -  -  -  -  Command_REPEAT: ;; [repeat]
   19 D1:B2AF 3E 23 -  -  			ld		a,STM_REPEAT
   20 D1:B2B1 CD E5 B2 D1 			call 	StackOpenFrame
   21 D1:B2B5 CD 23 B3 D1 			call 	StackSavePosition
   22 D1:B2B9 C9 -  -  -  			ret
   23 D1:B2BA -  -  -  -  
   24 D1:B2BA -  -  -  -  ; ***************************************************************************************
   25 D1:B2BA -  -  -  -  ;
   26 D1:B2BA -  -  -  -  ;									Until command
   27 D1:B2BA -  -  -  -  ;
   28 D1:B2BA -  -  -  -  ; ***************************************************************************************
   29 D1:B2BA -  -  -  -  
   30 D1:B2BA -  -  -  -  Command_Until: ;; [until]
   31 D1:B2BA 3E 23 -  -  			ld		a,STM_REPEAT
   32 D1:B2BC CD 1D B3 D1 			call 	StackCheckFrame
   33 D1:B2C0 20 11 -  -  			jr 		nz,_UntilError
   34 D1:B2C2 CD 21 AE D1 			call	EvaluateInteger 		; until what
   35 D1:B2C6 CD 3F B9 D1 			call 	Int32Zero 				; check zero
   36 D1:B2CA CA 3E B3 D1 			jp 		z,StackLoadPosition 	; if zero loop back
   37 D1:B2CE CD 0A B3 D1 			call 	StackCloseFrame 		; otherwise end frame.
   38 D1:B2D2 C9 -  -  -  			ret
   39 D1:B2D3 -  -  -  -  _UntilError:
   40 D1:B2D3 3E 11 C3 EE 
              AB D1 -  -  			ERR_REPEAT
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/repeat.asm"
   41 D1:B2D9 -  -  -  -  
   42 D1:B2D9 -  -  -  -  ; ***************************************************************************************
   43 D1:B2D9 -  -  -  -  ;
   44 D1:B2D9 -  -  -  -  ;									Changes and Updates
   45 D1:B2D9 -  -  -  -  ;
   46 D1:B2D9 -  -  -  -  ; ***************************************************************************************
   47 D1:B2D9 -  -  -  -  ;
   48 D1:B2D9 -  -  -  -  ;		Date			Notes
   49 D1:B2D9 -  -  -  -  ;		==== 			=====
   50 D1:B2D9 -  -  -  -  ;
   51 D1:B2D9 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   57 D1:B2D9 -  -  -  -  #include "core/structures/stack.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
    1 D1:B2D9 -  -  -  -  ; ***************************************************************************************
    2 D1:B2D9 -  -  -  -  ; ***************************************************************************************
    3 D1:B2D9 -  -  -  -  ;
    4 D1:B2D9 -  -  -  -  ;		Name : 		stack.asm
    5 D1:B2D9 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B2D9 -  -  -  -  ;		Date : 		6th June 2022
    7 D1:B2D9 -  -  -  -  ;		Reviewed :	No
    8 D1:B2D9 -  -  -  -  ;		Purpose :	Rem / ' command
    9 D1:B2D9 -  -  -  -  ;
   10 D1:B2D9 -  -  -  -  ; ***************************************************************************************
   11 D1:B2D9 -  -  -  -  ; ***************************************************************************************
   12 D1:B2D9 -  -  -  -  ;
   13 D1:B2D9 -  -  -  -  ;		The BASIC stack works downwards. Each entry has a first byte, offset 0
   14 D1:B2D9 -  -  -  -  ;		The low bytes (0..3) doubled is the size of the stack entry in bytes 
   15 D1:B2D9 -  -  -  -  ;		The high byte (4..7) identifies what the stack entry is (e.g. GOSUB, LOCAL)
   16 D1:B2D9 -  -  -  -  ;
   17 D1:B2D9 -  -  -  -  ;		If a location in program is saved on the stack, it is at offset 1..4 (start of
   18 D1:B2D9 -  -  -  -  ;		line) and offset 5 (offset in line)
   19 D1:B2D9 -  -  -  -  ;
   20 D1:B2D9 -  -  -  -  ; ***************************************************************************************
   21 D1:B2D9 -  -  -  -  ;
   22 D1:B2D9 -  -  -  -  ;								Clear the stack
   23 D1:B2D9 -  -  -  -  ;
   24 D1:B2D9 -  -  -  -  ; ***************************************************************************************
   25 D1:B2D9 -  -  -  -  
   26 D1:B2D9 -  -  -  -  StackReset:
   27 D1:B2D9 2A BD A8 D1 		ld 		hl,(LanguageStack) 			; top of language stack
   28 D1:B2DD 2B -  -  -  		dec 	hl 							; down to make space for end.
   29 D1:B2DE 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write out current position
   30 D1:B2E2 36 F0 -  -  		ld 		(hl),$F0 					; Dummy top, as stack size cannot be 0.
   31 D1:B2E4 C9 -  -  -  		ret
   32 D1:B2E5 -  -  -  -  
   33 D1:B2E5 -  -  -  -  ; ***************************************************************************************
   34 D1:B2E5 -  -  -  -  ;
   35 D1:B2E5 -  -  -  -  ;								Open a stack frame type A
   36 D1:B2E5 -  -  -  -  ;
   37 D1:B2E5 -  -  -  -  ; ***************************************************************************************
   38 D1:B2E5 -  -  -  -  
   39 D1:B2E5 -  -  -  -  StackOpenFrame:
   40 D1:B2E5 F5 -  -  -  		push 	af 							; save frame type
   41 D1:B2E6 E6 0F -  -  		and 	$0F 						; get size of frame
   42 D1:B2E8 87 -  -  -  		add 	a,a 						; double it
   43 D1:B2E9 11 00 00 00 		ld 		de,$0000 					; put in UDE
   44 D1:B2ED 5F -  -  -  		ld 		e,a
   45 D1:B2EE 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; get stack pointer
   46 D1:B2F2 AF -  -  -  		xor 	a
   47 D1:B2F3 ED 52 -  -  		sbc 	hl,de 						; subtract frame size and update
   48 D1:B2F5 22 D9 A8 D1 		ld 		(BasicSP),hl
   49 D1:B2F9 F1 -  -  -  		pop 	af 							; copy out frame type
   50 D1:B2FA 77 -  -  -  		ld 		(hl),a
   51 D1:B2FB ED 5B C1 A8 
              D1 -  -  -  		ld 		de,(LanguageStackEnd) 		; subtract stack end (e.g. lowest value)
   52 D1:B300 AF -  -  -  		xor 	a
   53 D1:B301 ED 52 -  -  		sbc 	hl,de
   54 D1:B303 D0 -  -  -  		ret 	nc 							; ok if >= lowest value
   55 D1:B304 3E 12 C3 EE 
              AB D1 -  -  		ERR_STACK
Listing for file "/home/paulr/Projects/dax-basic/source/core/structures/stack.asm"
   56 D1:B30A -  -  -  -  
   57 D1:B30A -  -  -  -  ; ***************************************************************************************
   58 D1:B30A -  -  -  -  ;
   59 D1:B30A -  -  -  -  ;								Close Stack Frame
   60 D1:B30A -  -  -  -  ;
   61 D1:B30A -  -  -  -  ; ***************************************************************************************
   62 D1:B30A -  -  -  -  
   63 D1:B30A -  -  -  -  StackCloseFrame:
   64 D1:B30A 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   65 D1:B30E 7E -  -  -  		ld 		a,(hl) 						; get stack marker
   66 D1:B30F E6 0F -  -  		and 	$0F 						; put into UDE
   67 D1:B311 87 -  -  -  		add 	a,a 						; double it
   68 D1:B312 11 00 00 00 		ld 		de,$000000
   69 D1:B316 5F -  -  -  		ld 		e,a
   70 D1:B317 19 -  -  -  		add 	hl,de 						; close it
   71 D1:B318 22 D9 A8 D1 		ld 		(BasicSP),hl 				; write it back
   72 D1:B31C C9 -  -  -  		ret
   73 D1:B31D -  -  -  -  
   74 D1:B31D -  -  -  -  ; ***************************************************************************************
   75 D1:B31D -  -  -  -  ;
   76 D1:B31D -  -  -  -  ;								Check Stack Frame against A, Z if okay
   77 D1:B31D -  -  -  -  ;
   78 D1:B31D -  -  -  -  ; ***************************************************************************************
   79 D1:B31D -  -  -  -  
   80 D1:B31D -  -  -  -  StackCheckFrame:
   81 D1:B31D 2A D9 A8 D1 		ld 		hl,(BasicSP)				; get stack frame
   82 D1:B321 BE -  -  -  		cp 		(hl) 						; get stack marker
   83 D1:B322 C9 -  -  -  		ret
   84 D1:B323 -  -  -  -  
   85 D1:B323 -  -  -  -  ; ***************************************************************************************
   86 D1:B323 -  -  -  -  ;
   87 D1:B323 -  -  -  -  ;								Save position on stack
   88 D1:B323 -  -  -  -  ;
   89 D1:B323 -  -  -  -  ; ***************************************************************************************
   90 D1:B323 -  -  -  -  
   91 D1:B323 -  -  -  -  StackSavePosition:
   92 D1:B323 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
   93 D1:B327 23 -  -  -  		inc 	hl
   94 D1:B328 ED 5B DD A8 
              D1 -  -  -  		ld 		de,(CurrentLineStart) 		; work out current start line
   95 D1:B32D ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write out that start line, increment by 4
   96 D1:B333 -  -  -  -  		;
   97 D1:B333 E5 -  -  -  		push 	hl 							; save HL, e.g. offset 5
   98 D1:B334 DD E5 -  -  		push 	ix 							; HL = current position
   99 D1:B336 E1 -  -  -  		pop 	hl
  100 D1:B337 AF -  -  -  		xor 	a 							; calculate offset
  101 D1:B338 ED 52 -  -  		sbc 	hl,de
  102 D1:B33A 7D -  -  -  		ld 		a,l 						; into A
  103 D1:B33B E1 -  -  -  		pop 	hl 							; restore offset 5 and save position
  104 D1:B33C 77 -  -  -  		ld 		(hl),a
  105 D1:B33D C9 -  -  -  		ret
  106 D1:B33E -  -  -  -  
  107 D1:B33E -  -  -  -  ; ***************************************************************************************
  108 D1:B33E -  -  -  -  ;
  109 D1:B33E -  -  -  -  ;								Load position off stack
  110 D1:B33E -  -  -  -  ;
  111 D1:B33E -  -  -  -  ; ***************************************************************************************
  112 D1:B33E -  -  -  -  
  113 D1:B33E -  -  -  -  StackLoadPosition:
  114 D1:B33E 2A D9 A8 D1 		ld 		hl,(BasicSP) 				; goes after marker at stack + 1
  115 D1:B342 23 -  -  -  		inc 	hl
  116 D1:B343 E5 -  -  -  		push 	hl 							; save on stack
  117 D1:B344 ED 27 -  -  		ld_ind_hl 							; get start of line
  118 D1:B346 22 DD A8 D1 		ld 		(CurrentLineStart),hl 		; write it back
  119 D1:B34A D1 -  -  -  		pop 	de 							; get +1 off stack, advance to +5
  120 D1:B34B 13 -  -  -  		inc 	de
  121 D1:B34C 13 -  -  -  		inc 	de
  122 D1:B34D 13 -  -  -  		inc 	de
  123 D1:B34E 13 -  -  -  		inc 	de
  124 D1:B34F 1A -  -  -  		ld 		a,(de) 						; offset into UDE
  125 D1:B350 11 00 00 00 		ld 		de,$000000
  126 D1:B354 5F -  -  -  		ld 		e,a
  127 D1:B355 19 -  -  -  		add 	hl,de 						; add to start => position
  128 D1:B356 E5 -  -  -  		push 	hl 							; copy to IX and continue
  129 D1:B357 DD E1 -  -  		pop 	ix
  130 D1:B359 C9 -  -  -  		ret
  131 D1:B35A -  -  -  -  
  132 D1:B35A -  -  -  -  ; ***************************************************************************************
  133 D1:B35A -  -  -  -  ;
  134 D1:B35A -  -  -  -  ;									Changes and Updates
  135 D1:B35A -  -  -  -  ;
  136 D1:B35A -  -  -  -  ; ***************************************************************************************
  137 D1:B35A -  -  -  -  ;
  138 D1:B35A -  -  -  -  ;		Date			Notes
  139 D1:B35A -  -  -  -  ;		==== 			=====
  140 D1:B35A -  -  -  -  ;
  141 D1:B35A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   58 D1:B35A -  -  -  -  #include "core/utility/utility.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/utility/utility.asm"
    1 D1:B35A -  -  -  -  ; ***************************************************************************************
    2 D1:B35A -  -  -  -  ; ***************************************************************************************
    3 D1:B35A -  -  -  -  ;
    4 D1:B35A -  -  -  -  ;		Name : 		utility.asm
    5 D1:B35A -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B35A -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B35A -  -  -  -  ;		Reviewed :	No
    8 D1:B35A -  -  -  -  ;		Purpose :	Utility routines
    9 D1:B35A -  -  -  -  ;
   10 D1:B35A -  -  -  -  ; ***************************************************************************************
   11 D1:B35A -  -  -  -  ; ***************************************************************************************
   12 D1:B35A -  -  -  -  
   13 D1:B35A -  -  -  -  ; ***************************************************************************************
   14 D1:B35A -  -  -  -  ;
   15 D1:B35A -  -  -  -  ;							Print ASCII string at HL
   16 D1:B35A -  -  -  -  ;
   17 D1:B35A -  -  -  -  ; ***************************************************************************************
   18 D1:B35A -  -  -  -  
   19 D1:B35A -  -  -  -  PrintStringAtHL:
   20 D1:B35A 7E -  -  -  		ld 		a,(hl)
   21 D1:B35B FE 20 -  -  		cp 		$20		
   22 D1:B35D D8 -  -  -  		ret 	c
   23 D1:B35E CD FA B9 D1 		call 	SYSPrintChar
   24 D1:B362 23 -  -  -  		inc 	hl
   25 D1:B363 18 F5 -  -  		jr 		PrintStringAtHL
   26 D1:B365 -  -  -  -  
   27 D1:B365 -  -  -  -  ; ***************************************************************************************
   28 D1:B365 -  -  -  -  ;
   29 D1:B365 -  -  -  -  ;									Changes and Updates
   30 D1:B365 -  -  -  -  ;
   31 D1:B365 -  -  -  -  ; ***************************************************************************************
   32 D1:B365 -  -  -  -  ;
   33 D1:B365 -  -  -  -  ;		Date			Notes
   34 D1:B365 -  -  -  -  ;		==== 			=====
   35 D1:B365 -  -  -  -  ;
   36 D1:B365 -  -  -  -  ; ***************************************************************************************
   37 D1:B365 -  -  -  -  		
Listing for file "_build.asm"
   59 D1:B365 -  -  -  -  #include "core/variables/create.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
    1 D1:B365 -  -  -  -  ; ***************************************************************************************
    2 D1:B365 -  -  -  -  ; ***************************************************************************************
    3 D1:B365 -  -  -  -  ;
    4 D1:B365 -  -  -  -  ;		Name : 		create.asm
    5 D1:B365 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B365 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B365 -  -  -  -  ;		Reviewed :	No
    8 D1:B365 -  -  -  -  ;		Purpose :	Create a variable.
    9 D1:B365 -  -  -  -  ;
   10 D1:B365 -  -  -  -  ; ***************************************************************************************
   11 D1:B365 -  -  -  -  ; ***************************************************************************************
   12 D1:B365 -  -  -  -  
   13 D1:B365 -  -  -  -  ; ***************************************************************************************
   14 D1:B365 -  -  -  -  ;
   15 D1:B365 -  -  -  -  ;		Create a variable as set up by VariableInformation. On entry HL contains the
   16 D1:B365 -  -  -  -  ;		data size (e.g. the data for integer, and size+data for array) past offset 9.
   17 D1:B365 -  -  -  -  ;
   18 D1:B365 -  -  -  -  ; ***************************************************************************************
   19 D1:B365 -  -  -  -  
   20 D1:B365 -  -  -  -  VariableCreate:		
   21 D1:B365 -  -  -  -  		;
   22 D1:B365 -  -  -  -  		;		Work out bytes to allocate (HL+9) and allocate it
   23 D1:B365 -  -  -  -  		;
   24 D1:B365 11 09 00 00 		ld 		de,9 						; add 9 for the first collection of bytes.
   25 D1:B369 19 -  -  -  		add 	hl,de 						; actual # of bytes required.
   26 D1:B36A E5 -  -  -  		push 	hl 							; save count.
   27 D1:B36B CD 07 B1 D1 		call 	AllocateBytes 				; claim that many bytes
   28 D1:B36F C1 -  -  -  		pop 	bc 							; restore count to BC
   29 D1:B370 -  -  -  -  		;
   30 D1:B370 -  -  -  -  		; 		Erase data - bytes to erase is in BC, data at HL.
   31 D1:B370 -  -  -  -  		;
   32 D1:B370 E5 -  -  -  		push	hl 							; save start address on stack
   33 D1:B371 -  -  -  -  _VCClear:
   34 D1:B371 36 00 -  -  		ld 		(hl),$00 					; erase the allocated memory.
   35 D1:B373 23 -  -  -  		inc 	hl
   36 D1:B374 0B -  -  -  		dec 	bc
   37 D1:B375 78 -  -  -  		ld		a,b
   38 D1:B376 B1 -  -  -  		or 		c
   39 D1:B377 20 F8 -  -  		jr 		nz,_VCClear
   40 D1:B379 E1 -  -  -  		pop 	hl							; restore start address
   41 D1:B37A -  -  -  -  		;
   42 D1:B37A -  -  -  -  		;		Now start to create the data.
   43 D1:B37A -  -  -  -  		;
   44 D1:B37A E5 -  -  -  		push 	hl 							; save start
   45 D1:B37B -  -  -  -  		;
   46 D1:B37B -  -  -  -  		;		Write hash to +0
   47 D1:B37B -  -  -  -  		;
   48 D1:B37B 3A 09 A9 D1 		ld 		a,(VarHash) 				; write Hash to +0
   49 D1:B37F 77 -  -  -  		ld 		(hl),a
   50 D1:B380 23 -  -  -  		inc 	hl
   51 D1:B381 -  -  -  -  		;
   52 D1:B381 -  -  -  -  		;		Write list head to +1
   53 D1:B381 -  -  -  -  		;
   54 D1:B381 E5 -  -  -  		push 	hl 							; save write position
   55 D1:B382 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   56 D1:B386 ED 27 -  -  		ld_ind_hl 							; get the list head
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/create.asm"
   57 D1:B388 EB -  -  -  		ex 		de,hl 						; put in list head in DE
   58 D1:B389 E1 -  -  -  		pop 	hl 		 					; restore write position
   59 D1:B38A ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   60 D1:B390 -  -  -  -  		;
   61 D1:B390 -  -  -  -  		;		Write variable name to +5
   62 D1:B390 -  -  -  -  		;
   63 D1:B390 ED 5B 05 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; push start of variable name
   64 D1:B395 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and increment by 4.
   65 D1:B39B -  -  -  -  		;
   66 D1:B39B D1 -  -  -  		pop 	de 							; get the start address back
   67 D1:B39C 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; get the address of the list head
   68 D1:B3A0 ED 1F 23 23 
              23 23 -  -  		st_de_hl_ind_incr 					; write DE at HL and patch into list head.
   69 D1:B3A6 -  -  -  -  		;
   70 D1:B3A6 EB -  -  -  		ex 		de,hl 						; start address into HL
   71 D1:B3A7 C9 -  -  -  		ret
   72 D1:B3A8 -  -  -  -  
   73 D1:B3A8 -  -  -  -  ; ***************************************************************************************
   74 D1:B3A8 -  -  -  -  ;
   75 D1:B3A8 -  -  -  -  ;									Changes and Updates
   76 D1:B3A8 -  -  -  -  ;
   77 D1:B3A8 -  -  -  -  ; ***************************************************************************************
   78 D1:B3A8 -  -  -  -  ;
   79 D1:B3A8 -  -  -  -  ;		Date			Notes
   80 D1:B3A8 -  -  -  -  ;		==== 			=====
   81 D1:B3A8 -  -  -  -  ;
   82 D1:B3A8 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   60 D1:B3A8 -  -  -  -  #include "core/variables/find.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
    1 D1:B3A8 -  -  -  -  ; ***************************************************************************************
    2 D1:B3A8 -  -  -  -  ; ***************************************************************************************
    3 D1:B3A8 -  -  -  -  ;
    4 D1:B3A8 -  -  -  -  ;		Name : 		find.asm
    5 D1:B3A8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B3A8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B3A8 -  -  -  -  ;		Reviewed :	No
    8 D1:B3A8 -  -  -  -  ;		Purpose :	Find a variable.
    9 D1:B3A8 -  -  -  -  ;
   10 D1:B3A8 -  -  -  -  ; ***************************************************************************************
   11 D1:B3A8 -  -  -  -  ; ***************************************************************************************
   12 D1:B3A8 -  -  -  -  
   13 D1:B3A8 -  -  -  -  ; ***************************************************************************************
   14 D1:B3A8 -  -  -  -  ;
   15 D1:B3A8 -  -  -  -  ;		Find variable. If found, return address in (U)HL, type in C and carry clear.
   16 D1:B3A8 -  -  -  -  ; 		variable information at (IX)
   17 D1:B3A8 -  -  -  -  ;
   18 D1:B3A8 -  -  -  -  ;		If not found, create the variable and return as above, otherwise return CS.
   19 D1:B3A8 -  -  -  -  ;		Don't autocreate arrays.
   20 D1:B3A8 -  -  -  -  ;
   21 D1:B3A8 -  -  -  -  ; ***************************************************************************************
   22 D1:B3A8 -  -  -  -  
   23 D1:B3A8 -  -  -  -  FindVariable:
   24 D1:B3A8 DD 7E 00 -  		ld 		a,(ix+0)					; get first character
   25 D1:B3AB FE 26 -  -  		cp 		IDENTIFIER_END 				; check it is an identifier reference.
   26 D1:B3AD D2 58 AC D1 		jp 		nc,SyntaxError 		
   27 D1:B3B1 -  -  -  -  
   28 D1:B3B1 DD 7E 01 -  		ld 		a,(ix+1) 					; look at next character, if that is an
   29 D1:B3B4 FE 26 -  -  		cp 		IDENTIFIER_END 				; integer_type then this is a single letter
   30 D1:B3B6 38 17 -  -  		jr 		c,_FVNotSimple 				; integer.
   31 D1:B3B8 FE 95 -  -  		cp 		KWD_LPAREN 					; could also be a(
   32 D1:B3BA 28 13 -  -  		jr 		z,_FVNotSimple
   33 D1:B3BC -  -  -  -  		;
   34 D1:B3BC -  -  -  -  		; 		Code for A-Z fixed integers.
   35 D1:B3BC -  -  -  -  		;
   36 D1:B3BC 2A C5 A8 D1 		ld 		hl,(StandardIntegers) 		; point UHL to standard ints on 128 byte boundary
   37 D1:B3C0 DD 7E 00 -  		ld 		a,(ix+0) 					; get the identifier ID
   38 D1:B3C3 87 -  -  -  		add 	a,a 						; x4
   39 D1:B3C4 87 -  -  -  		add 	a,a
   40 D1:B3C5 B5 -  -  -  		or 		l 							; Or into address as on 128 byte boundary
   41 D1:B3C6 6F -  -  -  		ld 		l,a 						; UHL now points to the variable.
   42 D1:B3C7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   43 D1:B3C9 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   44 D1:B3CB DD 23 -  -  		inc 	ix 							; skip over identifier 
   45 D1:B3CD AF -  -  -  		xor 	a 							; clear carry and return
   46 D1:B3CE C9 -  -  -  		ret
   47 D1:B3CF -  -  -  -  		;
   48 D1:B3CF -  -  -  -  		;		Not a standard simple variable.
   49 D1:B3CF -  -  -  -  		;
   50 D1:B3CF -  -  -  -  _FVNotSimple:
   51 D1:B3CF CD 35 B4 D1 		call 	VariableInformation 		; get information about the variable.
   52 D1:B3D3 CD 71 B4 D1 		call 	VariableSearchList 			; search the linked list
   53 D1:B3D7 38 14 -  -  		jr 		c,_FVNotFound  				
   54 D1:B3D9 -  -  -  -  		;
   55 D1:B3D9 -  -  -  -  		;		Found variable. Address of record is in HL.
   56 D1:B3D9 -  -  -  -  		;
   57 D1:B3D9 -  -  -  -  _FVExitReference:		
   58 D1:B3D9 11 09 00 00 		ld 		de,9 						; point to the actual data.
   59 D1:B3DD 19 -  -  -  		add 	hl,de 
   60 D1:B3DE -  -  -  -  		;
   61 D1:B3DE -  -  -  -  		; 		Check for arrays. IX points to token after identifier, HL to the array size.
   62 D1:B3DE -  -  -  -  		;
   63 D1:B3DE DD 7E 00 -  		ld 		a,(ix+0) 					; check next token
   64 D1:B3E1 FE 95 -  -  		cp 		KWD_LPAREN 					; if (
   65 D1:B3E3 CC 0C B4 D1 		call 	z,ArrayLookup 				; array access required.
   66 D1:B3E7 0E 00 -  -  		ld 		c,XTYPE_INTEGER 			; it's an integer
   67 D1:B3E9 CB F9 -  -  		set 	CIsReference,c 				; it's an integer reference in UHL.
   68 D1:B3EB AF -  -  -  		xor 	a 							; clear carry and return
   69 D1:B3EC C9 -  -  -  		ret
   70 D1:B3ED -  -  -  -  		;
   71 D1:B3ED -  -  -  -  		; 		Variable is not found, can we autocreate it ?
   72 D1:B3ED -  -  -  -  		;
   73 D1:B3ED -  -  -  -  _FVNotFound:		
   74 D1:B3ED 3A 01 A9 D1 		ld 		a,(AllowAutoCreate) 		; is auto create on ?
   75 D1:B3F1 B7 -  -  -  		or 		a
   76 D1:B3F2 28 11 -  -  		jr 		z,_FVFail
   77 D1:B3F4 DD 7E 00 -  		ld 		a,(ix+0) 					; not allowed for arrays.
   78 D1:B3F7 FE 95 -  -  		cp 		KWD_LPAREN 		
   79 D1:B3F9 28 0A -  -  		jr 		z,_FVFail
   80 D1:B3FB 21 04 00 00 		ld 		hl,4 						; bytes to allocate for data.
   81 D1:B3FF CD 65 B3 D1 		call 	VariableCreate 				; create a new variable.
   82 D1:B403 18 D4 -  -  		jr 		_FVExitReference 			; and exit with HL+9 as a reference
   83 D1:B405 -  -  -  -  
   84 D1:B405 -  -  -  -  _FVFail:
   85 D1:B405 DD 2A 05 A9 
              D1 -  -  -  		ld 		ix,(VarNameStart) 			; restore IX to start of variable name.
   86 D1:B40A 37 -  -  -  		scf
   87 D1:B40B C9 -  -  -  		ret
   88 D1:B40C -  -  -  -  
   89 D1:B40C -  -  -  -  ; ***************************************************************************************
   90 D1:B40C -  -  -  -  ;
   91 D1:B40C -  -  -  -  ;									 Array lookup
   92 D1:B40C -  -  -  -  ;
   93 D1:B40C -  -  -  -  ; ***************************************************************************************
   94 D1:B40C -  -  -  -  
   95 D1:B40C -  -  -  -  ArrayLookup:
   96 D1:B40C E5 -  -  -  		push 	hl 							; save the array address on the stack.
   97 D1:B40D CD FB AD D1 		call 	EvaluateIntegerTerm 		; evaluate the array index.
   98 D1:B411 D9 -  -  -  		exx 								; check index in 0000-FFFF
   99 D1:B412 7C -  -  -  		ld 		a,h
  100 D1:B413 B5 -  -  -  		or 		l
  101 D1:B414 D9 -  -  -  		exx
  102 D1:B415 20 18 -  -  		jr 		nz,_ALBadValue  			; if so, it's a bad value
  103 D1:B417 11 00 00 00 		ld 		de,$00 						; put HL into DE clearing UDE
  104 D1:B41B 54 -  -  -  		ld 		d,h
  105 D1:B41C 5D -  -  -  		ld 		e,l
  106 D1:B41D E1 -  -  -  		pop 	hl 							; get the array base back
  107 D1:B41E E5 -  -  -  		push 	hl
  108 D1:B41F ED 27 -  -  		ld_ind_hl 							; read the array index maximum
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/find.asm"
  109 D1:B421 AF -  -  -  		xor  	a							; subtract maximum from index
  110 D1:B422 ED 52 -  -  		sbc 	hl,de
  111 D1:B424 DA 2F B4 D1 		jp 		c,_ALBadValue 				; if max < index then error
  112 D1:B428 EB -  -  -  		ex 		de,hl 						; index back into HL
  113 D1:B429 23 -  -  -  		inc 	hl 							; add 1, to skip over index count
  114 D1:B42A 29 -  -  -  		add 	hl,hl 						; x 4
  115 D1:B42B 29 -  -  -  		add 	hl,hl
  116 D1:B42C D1 -  -  -  		pop 	de 							; get array base back
  117 D1:B42D 19 -  -  -  		add 	hl,de 						; add offset to it
  118 D1:B42E C9 -  -  -  		ret
  119 D1:B42F -  -  -  -  
  120 D1:B42F -  -  -  -  _ALBadValue:
  121 D1:B42F 3E 08 C3 EE 
              AB D1 -  -  		ERR_INDEX
  122 D1:B435 -  -  -  -  		
  123 D1:B435 -  -  -  -  ; ***************************************************************************************
  124 D1:B435 -  -  -  -  ;
  125 D1:B435 -  -  -  -  ;									Changes and Updates
  126 D1:B435 -  -  -  -  ;
  127 D1:B435 -  -  -  -  ; ***************************************************************************************
  128 D1:B435 -  -  -  -  ;
  129 D1:B435 -  -  -  -  ;		Date			Notes
  130 D1:B435 -  -  -  -  ;		==== 			=====
  131 D1:B435 -  -  -  -  ;
  132 D1:B435 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   61 D1:B435 -  -  -  -  #include "core/variables/info.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/info.asm"
    1 D1:B435 -  -  -  -  ; ***************************************************************************************
    2 D1:B435 -  -  -  -  ; ***************************************************************************************
    3 D1:B435 -  -  -  -  ;
    4 D1:B435 -  -  -  -  ;		Name : 		info.asm
    5 D1:B435 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B435 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B435 -  -  -  -  ;		Reviewed :	No
    8 D1:B435 -  -  -  -  ;		Purpose :	Get information about variable at IX
    9 D1:B435 -  -  -  -  ;
   10 D1:B435 -  -  -  -  ; ***************************************************************************************
   11 D1:B435 -  -  -  -  ; ***************************************************************************************
   12 D1:B435 -  -  -  -  
   13 D1:B435 -  -  -  -  ; ***************************************************************************************
   14 D1:B435 -  -  -  -  ;
   15 D1:B435 -  -  -  -  ;		Get information about variable at IX. On exit IX points to the next character
   16 D1:B435 -  -  -  -  ; 		after the identifier.
   17 D1:B435 -  -  -  -  ;
   18 D1:B435 -  -  -  -  ; ***************************************************************************************
   19 D1:B435 -  -  -  -  
   20 D1:B435 -  -  -  -  VariableInformation:
   21 D1:B435 DD 22 05 A9 
              D1 -  -  -  		ld 		(VarNameStart),ix 			; save start.
   22 D1:B43A -  -  -  -  		;
   23 D1:B43A -  -  -  -  		; 		Calculate hash, find end.
   24 D1:B43A -  -  -  -  		;
   25 D1:B43A 06 00 -  -  		ld 		b,0 						; build the hash in B.
   26 D1:B43C -  -  -  -  _VICalculateHash:
   27 D1:B43C DD 7E 00 -  		ld 		a,(ix+0) 					; look at character
   28 D1:B43F FE 26 -  -  		cp 		IDENTIFIER_END 				; not an identifier character.
   29 D1:B441 30 09 -  -  		jr 		nc,_VIHashDone 				; if so, reached the end.
   30 D1:B443 80 -  -  -  		add 	a,b 						; add to hash
   31 D1:B444 07 -  -  -  		rlca
   32 D1:B445 07 -  -  -  		rlca
   33 D1:B446 80 -  -  -  		add 	a,b
   34 D1:B447 47 -  -  -  		ld 		b,a 						; update hash
   35 D1:B448 DD 23 -  -  		inc 	ix 							; next character
   36 D1:B44A 18 F0 -  -  		jr 		_VICalculateHash				
   37 D1:B44C -  -  -  -  		;
   38 D1:B44C -  -  -  -  _VIHashDone:
   39 D1:B44C 78 -  -  -  		ld 		a,b 						; write hash byte out
   40 D1:B44D -  -  -  -  		;
   41 D1:B44D -  -  -  -  		; xor 	a 							; hack to overload a list, put them all one one :)
   42 D1:B44D -  -  -  -  		;
   43 D1:B44D 32 09 A9 D1 		ld 		(VarHash),a
   44 D1:B451 -  -  -  -  		;
   45 D1:B451 -  -  -  -  		; 		Calculate the hash table address pointer.
   46 D1:B451 -  -  -  -  		;		
   47 D1:B451 E6 0F -  -  		and 	HashTableSize-1 			; put into range 0..HashTableSize-1
   48 D1:B453 21 00 00 00 		ld 		hl,$0000 					; put in HL
   49 D1:B457 6F -  -  -  		ld 		l,a
   50 D1:B458 29 -  -  -  		add 	hl,hl 						; x 4
   51 D1:B459 29 -  -  -  		add 	hl,hl
   52 D1:B45A -  -  -  -  		;
   53 D1:B45A ED 5B C9 A8 
              D1 -  -  -  		ld 		de,(HashTableBase) 			; add to hash table base.
   54 D1:B45F 19 -  -  -  		add 	hl,de
   55 D1:B460 -  -  -  -  		;
   56 D1:B460 DD 7E 00 -  		ld 		a,(ix+0) 					; followed by a ( ?
   57 D1:B463 FE 95 -  -  		cp 		KWD_LPAREN 					; if so
   58 D1:B465 20 05 -  -  		jr 		nz,_VINotArray 				; it's an array.
   59 D1:B467 11 40 00 00 		ld 		de,HashTableSize * 4 		; so advance to the second block which is
   60 D1:B46B 19 -  -  -  		add 	hl,de 						; for hash tables
   61 D1:B46C -  -  -  -  _VINotArray:
   62 D1:B46C 22 0B A9 D1 		ld 		(VarHashListPtr),hl 		; this is the address of the first link in the list (or NULL)
   63 D1:B470 C9 -  -  -  		ret
   64 D1:B471 -  -  -  -  
   65 D1:B471 -  -  -  -  ; ***************************************************************************************
   66 D1:B471 -  -  -  -  ;
   67 D1:B471 -  -  -  -  ;									Changes and Updates
   68 D1:B471 -  -  -  -  ;
   69 D1:B471 -  -  -  -  ; ***************************************************************************************
   70 D1:B471 -  -  -  -  ;
   71 D1:B471 -  -  -  -  ;		Date			Notes
   72 D1:B471 -  -  -  -  ;		==== 			=====
   73 D1:B471 -  -  -  -  ;
   74 D1:B471 -  -  -  -  ; ***************************************************************************************
   75 D1:B471 -  -  -  -  
Listing for file "_build.asm"
   62 D1:B471 -  -  -  -  #include "core/variables/search.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
    1 D1:B471 -  -  -  -  ; ***************************************************************************************
    2 D1:B471 -  -  -  -  ; ***************************************************************************************
    3 D1:B471 -  -  -  -  ;
    4 D1:B471 -  -  -  -  ;		Name : 		search.asm
    5 D1:B471 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B471 -  -  -  -  ;		Date : 		4th June 2022
    7 D1:B471 -  -  -  -  ;		Reviewed :	No
    8 D1:B471 -  -  -  -  ;		Purpose :	Search for a variable in the selected linked list.
    9 D1:B471 -  -  -  -  ;
   10 D1:B471 -  -  -  -  ; ***************************************************************************************
   11 D1:B471 -  -  -  -  ; ***************************************************************************************
   12 D1:B471 -  -  -  -  
   13 D1:B471 -  -  -  -  ; ***************************************************************************************
   14 D1:B471 -  -  -  -  ;
   15 D1:B471 -  -  -  -  ;		Search for variable as set up by VariableInfo. Returns CC/UHL=Record success
   16 D1:B471 -  -  -  -  ;		CS if failed.
   17 D1:B471 -  -  -  -  ;
   18 D1:B471 -  -  -  -  ; ***************************************************************************************
   19 D1:B471 -  -  -  -  
   20 D1:B471 -  -  -  -  VariableSearchList:
   21 D1:B471 2A 0B A9 D1 		ld 		hl,(VarHashListPtr)			; first link.
   22 D1:B475 -  -  -  -  		;
   23 D1:B475 -  -  -  -  		;		Follow pointer to next record, check if zero. First time round it is
   24 D1:B475 -  -  -  -  		;		the address of the hash record
   25 D1:B475 -  -  -  -  		;
   26 D1:B475 -  -  -  -  _VSLLoop:
   27 D1:B475 ED 27 -  -  		ld_ind_hl 							; follow link
Listing for file "/home/paulr/Projects/dax-basic/source/core/variables/search.asm"
   28 D1:B477 -  -  -  -  		;
   29 D1:B477 E5 -  -  -  		push 	hl 							; 24 bit check if zero ; requires NC and Z
   30 D1:B478 AF -  -  -  		xor 	a
   31 D1:B479 ED 6A -  -  		adc 	hl,hl
   32 D1:B47B E1 -  -  -  		pop 	hl
   33 D1:B47C 38 02 -  -  		jr 		c,_VSLRecord				; shifted out
   34 D1:B47E 37 -  -  -  		scf 								; otherwise return carry if zero.
   35 D1:B47F C8 -  -  -  		ret 	z
   36 D1:B480 -  -  -  -  _VSLRecord:
   37 D1:B480 -  -  -  -  		;
   38 D1:B480 -  -  -  -  		;		Check if they actually match. First do the hash.
   39 D1:B480 -  -  -  -  		;
   40 D1:B480 3A 09 A9 D1 		ld 		a,(VarHash) 				; get the hash value of the variable
   41 D1:B484 BE -  -  -  		cp 		(hl) 						; check against HL
   42 D1:B485 23 -  -  -  		inc 	hl 							; points to link back
   43 D1:B486 20 ED -  -  		jr 		nz,_VSLLoop
   44 D1:B488 -  -  -  -  		;
   45 D1:B488 -  -  -  -  		;		Now check the name
   46 D1:B488 -  -  -  -  		;
   47 D1:B488 E5 -  -  -  		push 	hl 							; save next link on stack (e.g. record offset 1)
   48 D1:B489 23 -  -  -  		inc 	hl 							; advance to the name address
   49 D1:B48A 23 -  -  -  		inc 	hl
   50 D1:B48B 23 -  -  -  		inc 	hl
   51 D1:B48C 23 -  -  -  		inc 	hl
   52 D1:B48D ED 27 -  -  		ld_ind_hl 							; HL now points to the record in program space.
   53 D1:B48F ED 5B 05 A9 
              D1 -  -  -  		ld 		de,(VarNameStart)			; and DE to the start of the name.
   54 D1:B494 -  -  -  -  		;
   55 D1:B494 -  -  -  -  		;		Check individual characters
   56 D1:B494 -  -  -  -  		;
   57 D1:B494 -  -  -  -  _VSLCharacter:
   58 D1:B494 1A -  -  -  		ld 		a,(de) 						; get next character
   59 D1:B495 FE 26 -  -  		cp 		IDENTIFIER_END 				; if end character check if both are.		
   60 D1:B497 30 08 -  -  		jr 		nc,_VSLEndIdentifier
   61 D1:B499 BE -  -  -  		cp 		(hl) 						; compare them
   62 D1:B49A 23 -  -  -  		inc 	hl 							; bump both character pointers
   63 D1:B49B 13 -  -  -  		inc 	de
   64 D1:B49C 28 F6 -  -  		jr 		z,_VSLCharacter 			; go back if match. If not
   65 D1:B49E -  -  -  -  		;
   66 D1:B49E -  -  -  -  _VSLFailed:
   67 D1:B49E E1 -  -  -  		pop 	hl 							; pop the +1 link
   68 D1:B49F 18 D4 -  -  		jr 		_VSLLoop 					; and loop round.
   69 D1:B4A1 -  -  -  -  		;
   70 D1:B4A1 -  -  -  -  		;		Found IDENTIFIER END at DE
   71 D1:B4A1 -  -  -  -  		;		
   72 D1:B4A1 -  -  -  -  _VSLEndIdentifier:
   73 D1:B4A1 7E -  -  -  		ld 		a,(hl) 						; want non identifier character at HL too
   74 D1:B4A2 FE 26 -  -  		cp 		IDENTIFIER_END
   75 D1:B4A4 38 F8 -  -  		jr 		c,_VSLFailed 				; it's still an identifier, no match.
   76 D1:B4A6 -  -  -  -  		;
   77 D1:B4A6 E1 -  -  -  		pop 	hl 							; get the +1 link
   78 D1:B4A7 2B -  -  -  		dec 	hl 							; now start of record
   79 D1:B4A8 AF -  -  -  		xor 	a 							; clear carry
   80 D1:B4A9 C9 -  -  -  		ret
   81 D1:B4AA -  -  -  -  
   82 D1:B4AA -  -  -  -  ; ***************************************************************************************
   83 D1:B4AA -  -  -  -  ;
   84 D1:B4AA -  -  -  -  ;									Changes and Updates
   85 D1:B4AA -  -  -  -  ;
   86 D1:B4AA -  -  -  -  ; ***************************************************************************************
   87 D1:B4AA -  -  -  -  ;
   88 D1:B4AA -  -  -  -  ;		Date			Notes
   89 D1:B4AA -  -  -  -  ;		==== 			=====
   90 D1:B4AA -  -  -  -  ;
   91 D1:B4AA -  -  -  -  ; ***************************************************************************************
   92 D1:B4AA -  -  -  -  		
Listing for file "_build.asm"
   63 D1:B4AA -  -  -  -  #include "generated/kwd_misc.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/kwd_misc.asm"
    1 D1:B4AA -  -  -  -  ;
    2 D1:B4AA -  -  -  -  ;	This file is automatically generated.
    3 D1:B4AA -  -  -  -  ;
    4 D1:B4AA 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 -  -  	.block	$20-($ & $1F)
    5 D1:B4C0 -  -  -  -  PrecedenceTable:
    6 D1:B4C0 06 -  -  -  	.db	6	; $0083 !
    7 D1:B4C1 06 -  -  -  	.db	6	; $0084 ?
    8 D1:B4C2 05 -  -  -  	.db	5	; $0085 *
    9 D1:B4C3 05 -  -  -  	.db	5	; $0086 /
   10 D1:B4C4 05 -  -  -  	.db	5	; $0087 mod
   11 D1:B4C5 05 -  -  -  	.db	5	; $0088 div
   12 D1:B4C6 04 -  -  -  	.db	4	; $0089 +
   13 D1:B4C7 04 -  -  -  	.db	4	; $008a -
   14 D1:B4C8 03 -  -  -  	.db	3	; $008b >=
   15 D1:B4C9 03 -  -  -  	.db	3	; $008c <=
   16 D1:B4CA 03 -  -  -  	.db	3	; $008d >
   17 D1:B4CB 03 -  -  -  	.db	3	; $008e <
   18 D1:B4CC 03 -  -  -  	.db	3	; $008f =
   19 D1:B4CD 03 -  -  -  	.db	3	; $0090 <>
   20 D1:B4CE 02 -  -  -  	.db	2	; $0091 and
   21 D1:B4CF 01 -  -  -  	.db	1	; $0092 or
   22 D1:B4D0 01 -  -  -  	.db	1	; $0093 eor
   23 D1:B4D1 -  -  -  -  
Listing for file "_build.asm"
   64 D1:B4D1 -  -  -  -  #include "generated/messagetext.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/messagetext.asm"
    1 D1:B4D1 -  -  -  -  ;
    2 D1:B4D1 -  -  -  -  ;	This is automatically generated.
    3 D1:B4D1 -  -  -  -  ;
    4 D1:B4D1 -  -  -  -  ErrorIDTable:
    5 D1:B4D1 2D B5 D1 00 	.dw	ErrText_warmstart & $FFFF,ErrText_warmstart >> 16
    6 D1:B4D5 33 B5 D1 00 	.dw	ErrText_assert & $FFFF,ErrText_assert >> 16
    7 D1:B4D9 44 B5 D1 00 	.dw	ErrText_badtype & $FFFF,ErrText_badtype >> 16
    8 D1:B4DD 52 B5 D1 00 	.dw	ErrText_badvalue & $FFFF,ErrText_badvalue >> 16
    9 D1:B4E1 5C B5 D1 00 	.dw	ErrText_dim & $FFFF,ErrText_dim >> 16
   10 D1:B4E5 66 B5 D1 00 	.dw	ErrText_disabled & $FFFF,ErrText_disabled >> 16
   11 D1:B4E9 80 B5 D1 00 	.dw	ErrText_divzero & $FFFF,ErrText_divzero >> 16
   12 D1:B4ED 91 B5 D1 00 	.dw	ErrText_gosub & $FFFF,ErrText_gosub >> 16
   13 D1:B4F1 A6 B5 D1 00 	.dw	ErrText_index & $FFFF,ErrText_index >> 16
   14 D1:B4F5 B6 B5 D1 00 	.dw	ErrText_lineno & $FFFF,ErrText_lineno >> 16
   15 D1:B4F9 CB B5 D1 00 	.dw	ErrText_memory & $FFFF,ErrText_memory >> 16
   16 D1:B4FD D9 B5 D1 00 	.dw	ErrText_next & $FFFF,ErrText_next >> 16
   17 D1:B501 EA B5 D1 00 	.dw	ErrText_nocomma & $FFFF,ErrText_nocomma >> 16
   18 D1:B505 F8 B5 D1 00 	.dw	ErrText_nodollar & $FFFF,ErrText_nodollar >> 16
   19 D1:B509 02 B6 D1 00 	.dw	ErrText_nolbracket & $FFFF,ErrText_nolbracket >> 16
   20 D1:B50D 17 B6 D1 00 	.dw	ErrText_norbracket & $FFFF,ErrText_norbracket >> 16
   21 D1:B511 2D B6 D1 00 	.dw	ErrText_notref & $FFFF,ErrText_notref >> 16
   22 D1:B515 3B B6 D1 00 	.dw	ErrText_repeat & $FFFF,ErrText_repeat >> 16
   23 D1:B519 50 B6 D1 00 	.dw	ErrText_stack & $FFFF,ErrText_stack >> 16
   24 D1:B51D 5C B6 D1 00 	.dw	ErrText_stop & $FFFF,ErrText_stop >> 16
   25 D1:B521 61 B6 D1 00 	.dw	ErrText_syntax & $FFFF,ErrText_syntax >> 16
   26 D1:B525 6E B6 D1 00 	.dw	ErrText_todo & $FFFF,ErrText_todo >> 16
   27 D1:B529 7F B6 D1 00 	.dw	ErrText_unknownvar & $FFFF,ErrText_unknownvar >> 16
   28 D1:B52D -  -  -  -  
   29 D1:B52D -  -  -  -  ErrText_warmstart:
   30 D1:B52D 52 65 61 64 
              79 00 -  -  	.db "Ready",0
   31 D1:B533 -  -  -  -  ErrText_assert:
   32 D1:B533 41 73 73 65 
              72 74 69 6F 
              6E 20 66 61 
              69 6C 65 64 
              00 -  -  -  	.db "Assertion failed",0
   33 D1:B544 -  -  -  -  ErrText_badtype:
   34 D1:B544 54 79 70 65 
              20 4D 69 73 
              6D 61 74 63 
              68 00 -  -  	.db "Type Mismatch",0
   35 D1:B552 -  -  -  -  ErrText_badvalue:
   36 D1:B552 42 61 64 20 
              56 61 6C 75 
              65 00 -  -  	.db "Bad Value",0
   37 D1:B55C -  -  -  -  ErrText_dim:
   38 D1:B55C 44 49 4D 20 
              45 72 72 6F 
              72 00 -  -  	.db "DIM Error",0
   39 D1:B566 -  -  -  -  ErrText_disabled:
   40 D1:B566 46 75 6E 63 
              74 69 6F 6E 
              61 6C 69 74 
              79 20 6E 6F 
              74 20 65 6E 
              61 62 6C 65 
              64 00 -  -  	.db "Functionality not enabled",0
   41 D1:B580 -  -  -  -  ErrText_divzero:
   42 D1:B580 44 69 76 69 
              73 69 6F 6E 
              20 62 79 20 
              5A 65 72 6F 
              00 -  -  -  	.db "Division by Zero",0
   43 D1:B591 -  -  -  -  ErrText_gosub:
   44 D1:B591 52 65 74 75 
              72 6E 20 77 
              69 74 68 6F 
              75 74 20 47 
              6F 73 75 62 
              00 -  -  -  	.db "Return without Gosub",0
   45 D1:B5A6 -  -  -  -  ErrText_index:
   46 D1:B5A6 42 61 64 20 
              41 72 72 61 
              79 20 49 6E 
              64 65 78 00 	.db "Bad Array Index",0
   47 D1:B5B6 -  -  -  -  ErrText_lineno:
   48 D1:B5B6 55 6E 6B 6E 
              6F 77 6E 20 
              6C 69 6E 65 
              20 6E 75 6D 
              62 65 72 2E 
              00 -  -  -  	.db "Unknown line number.",0
   49 D1:B5CB -  -  -  -  ErrText_memory:
   50 D1:B5CB 4F 75 74 20 
              6F 66 20 6D 
              65 6D 6F 72 
              79 00 -  -  	.db "Out of memory",0
   51 D1:B5D9 -  -  -  -  ErrText_next:
   52 D1:B5D9 4E 65 78 74 
              20 77 69 74 
              68 6F 75 74 
              20 46 6F 72 
              00 -  -  -  	.db "Next without For",0
   53 D1:B5EA -  -  -  -  ErrText_nocomma:
   54 D1:B5EA 4D 69 73 73 
              69 6E 67 20 
              43 6F 6D 6D 
              61 00 -  -  	.db "Missing Comma",0
   55 D1:B5F8 -  -  -  -  ErrText_nodollar:
   56 D1:B5F8 4D 69 73 73 
              69 6E 67 20 
              24 00 -  -  	.db "Missing $",0
   57 D1:B602 -  -  -  -  ErrText_nolbracket:
   58 D1:B602 4D 69 73 73 
              69 6E 67 20 
              4C 65 66 74 
              20 42 72 61 
              63 6B 65 74 
              00 -  -  -  	.db "Missing Left Bracket",0
   59 D1:B617 -  -  -  -  ErrText_norbracket:
   60 D1:B617 4D 69 73 73 
              69 6E 67 20 
              52 69 67 68 
              74 20 42 72 
              61 63 6B 65 
              74 00 -  -  	.db "Missing Right Bracket",0
   61 D1:B62D -  -  -  -  ErrText_notref:
   62 D1:B62D 43 61 6E 6E 
              6F 74 20 61 
              73 73 69 67 
              6E 00 -  -  	.db "Cannot assign",0
   63 D1:B63B -  -  -  -  ErrText_repeat:
   64 D1:B63B 55 6E 74 69 
              6C 20 77 69 
              74 68 6F 75 
              74 20 52 65 
              70 65 61 74 
              00 -  -  -  	.db "Until without Repeat",0
   65 D1:B650 -  -  -  -  ErrText_stack:
   66 D1:B650 53 74 61 63 
              6B 20 53 70 
              61 63 65 00 	.db "Stack Space",0
   67 D1:B65C -  -  -  -  ErrText_stop:
   68 D1:B65C 53 74 6F 70 
              00 -  -  -  	.db "Stop",0
   69 D1:B661 -  -  -  -  ErrText_syntax:
   70 D1:B661 53 79 6E 74 
              61 78 20 45 
              72 72 6F 72 
              00 -  -  -  	.db "Syntax Error",0
   71 D1:B66E -  -  -  -  ErrText_todo:
   72 D1:B66E 43 6F 64 65 
              20 6E 6F 74 
              20 77 72 69 
              74 74 65 6E 
              00 -  -  -  	.db "Code not written",0
   73 D1:B67F -  -  -  -  ErrText_unknownvar:
   74 D1:B67F 55 6E 6B 6E 
              6F 77 6E 20 
              56 61 72 69 
              61 62 6C 65 
              00 -  -  -  	.db "Unknown Variable",0
Listing for file "_build.asm"
   65 D1:B690 -  -  -  -  #include "generated/vectors.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    1 D1:B690 -  -  -  -  ;
    2 D1:B690 -  -  -  -  ;	Vectors for set 0
    3 D1:B690 -  -  -  -  ;
    4 D1:B690 -  -  -  -  VectorsSet0:
    5 D1:B690 2D AA D1 00 	addr(EOLHandler)                 ; $0080 [[eol]]
Listing for file "/home/paulr/Projects/dax-basic/source/generated/vectors.asm"
    6 D1:B694 A5 A8 D1 00 	addr(Unimplemented)              ; $0081 [[shift1]]
    7 D1:B698 A5 A8 D1 00 	addr(Unimplemented)              ; $0082 [[shift2]]
    8 D1:B69C CE AC D1 00 	addr(ALULongReference)           ; $0083 !
    9 D1:B6A0 D7 AC D1 00 	addr(ALUByteReference)           ; $0084 ?
   10 D1:B6A4 7A AC D1 00 	addr(ALUMultiply)                ; $0085 *
   11 D1:B6A8 88 AC D1 00 	addr(ALUDivide)                  ; $0086 /
   12 D1:B6AC 96 AC D1 00 	addr(ALUModulus)                 ; $0087 mod
   13 D1:B6B0 88 AC D1 00 	addr(ALUDivide2)                 ; $0088 div
   14 D1:B6B4 5E AC D1 00 	addr(ALUAdd)                     ; $0089 +
   15 D1:B6B8 6C AC D1 00 	addr(ALUSubtract)                ; $008a -
   16 D1:B6BC 35 AD D1 00 	addr(ALUCompareGreaterEqual)     ; $008b >=
   17 D1:B6C0 2B AD D1 00 	addr(ALUCompareLessEqual)        ; $008c <=
   18 D1:B6C4 17 AD D1 00 	addr(ALUCompareGreater)          ; $008d >
   19 D1:B6C8 0D AD D1 00 	addr(ALUCompareLess)             ; $008e <
   20 D1:B6CC 03 AD D1 00 	addr(ALUCompareEqual)            ; $008f =
   21 D1:B6D0 21 AD D1 00 	addr(ALUCompareNotEqual)         ; $0090 <>
   22 D1:B6D4 A4 AC D1 00 	addr(ALUAnd)                     ; $0091 and
   23 D1:B6D8 B2 AC D1 00 	addr(ALUOr)                      ; $0092 or
   24 D1:B6DC C0 AC D1 00 	addr(ALUXor)                     ; $0093 eor
   25 D1:B6E0 A7 B0 D1 00 	addr(Unary_Ampersand)            ; $0094 &
   26 D1:B6E4 9F B0 D1 00 	addr(Unary_Brackets)             ; $0095 (
   27 D1:B6E8 C1 AF D1 00 	addr(Unary_MkStr)                ; $0096 $
   28 D1:B6EC EE AF D1 00 	addr(Unary_Random)               ; $0097 rnd
   29 D1:B6F0 B0 AF D1 00 	addr(Unary_Len)                  ; $0098 len
   30 D1:B6F4 86 AF D1 00 	addr(Unary_Abs)                  ; $0099 abs
   31 D1:B6F8 85 B0 D1 00 	addr(Unary_Sgn)                  ; $009a sgn
   32 D1:B6FC B6 B0 D1 00 	addr(Unary_Str)                  ; $009b str
   33 D1:B700 9C AF D1 00 	addr(Unary_Chr)                  ; $009c chr
   34 D1:B704 93 AF D1 00 	addr(Unary_Asc)                  ; $009d asc
   35 D1:B708 CC AF D1 00 	addr(Unary_Not)                  ; $009e not
   36 D1:B70C E1 AF D1 00 	addr(Unary_Page)                 ; $009f page
   37 D1:B710 DE B0 D1 00 	addr(Unary_Time)                 ; $00a0 time
   38 D1:B714 E5 B0 D1 00 	addr(Unary_Top)                  ; $00a1 top
   39 D1:B718 F2 B0 D1 00 	addr(Unary_Val)                  ; $00a2 val
   40 D1:B71C F5 AC D1 00 	addr(UnaryInt32True)             ; $00a3 true
   41 D1:B720 F9 AC D1 00 	addr(UnaryInt32False)            ; $00a4 false
   42 D1:B724 72 A9 D1 00 	addr(BadCmd_RBracket)            ; $00a5 )
   43 D1:B728 72 A9 D1 00 	addr(BadCmd_Comma)               ; $00a6 ,
   44 D1:B72C 76 A9 D1 00 	addr(Command_Colon)              ; $00a7 :
   45 D1:B730 72 A9 D1 00 	addr(BadCmd_SemiColon)           ; $00a8 ;
   46 D1:B734 14 AB D1 00 	addr(Command_REM2)               ; $00a9 '
   47 D1:B738 A5 A8 D1 00 	addr(Unimplemented)              ; $00aa [
   48 D1:B73C A5 A8 D1 00 	addr(Unimplemented)              ; $00ab ]
   49 D1:B740 72 A9 D1 00 	addr(BadCmd_Comma)               ; $00ac ~
   50 D1:B744 AF B2 D1 00 	addr(Command_REPEAT)             ; $00ad repeat
   51 D1:B748 BA B2 D1 00 	addr(Command_Until)              ; $00ae until
   52 D1:B74C A5 A8 D1 00 	addr(Unimplemented)              ; $00af if
   53 D1:B750 72 A9 D1 00 	addr(BadCmd_Then)                ; $00b0 then
   54 D1:B754 A5 A8 D1 00 	addr(Unimplemented)              ; $00b1 else
   55 D1:B758 99 B1 D1 00 	addr(Command_FOR)                ; $00b2 for
   56 D1:B75C 72 A9 D1 00 	addr(BadCmd_To)                  ; $00b3 to
   57 D1:B760 A5 A8 D1 00 	addr(Unimplemented)              ; $00b4 step
   58 D1:B764 2E B2 D1 00 	addr(Command_Next)               ; $00b5 next
   59 D1:B768 A5 A8 D1 00 	addr(Unimplemented)              ; $00b6 def
   60 D1:B76C A5 A8 D1 00 	addr(Unimplemented)              ; $00b7 proc
   61 D1:B770 A5 A8 D1 00 	addr(Unimplemented)              ; $00b8 endproc
   62 D1:B774 3C B2 D1 00 	addr(Command_GOSUB)              ; $00b9 gosub
   63 D1:B778 51 B2 D1 00 	addr(Command_Return)             ; $00ba return
   64 D1:B77C 68 B2 D1 00 	addr(Command_GOTO)               ; $00bb goto
   65 D1:B780 A5 A8 D1 00 	addr(Unimplemented)              ; $00bc local
   66 D1:B784 77 A9 D1 00 	addr(Command_DIM)                ; $00bd dim
   67 D1:B788 14 AB D1 00 	addr(Command_REM)                ; $00be rem
   68 D1:B78C 44 AA D1 00 	addr(Command_LET)                ; $00bf let
   69 D1:B790 A5 A8 D1 00 	addr(Unimplemented)              ; $00c0 vdu
   70 D1:B794 A9 AA D1 00 	addr(Command_PRINT)              ; $00c1 print
   71 D1:B798 A5 A8 D1 00 	addr(Unimplemented)              ; $00c2 load
   72 D1:B79C A5 A8 D1 00 	addr(Unimplemented)              ; $00c3 save
   73 D1:B7A0 A5 A8 D1 00 	addr(Unimplemented)              ; $00c4 list
   74 D1:B7A4 89 B1 D1 00 	addr(Command_NEW)                ; $00c5 new
   75 D1:B7A8 31 AB D1 00 	addr(Command_RUN)                ; $00c6 run
   76 D1:B7AC A5 A8 D1 00 	addr(Unimplemented)              ; $00c7 read
   77 D1:B7B0 A5 A8 D1 00 	addr(Unimplemented)              ; $00c8 data
   78 D1:B7B4 A5 A8 D1 00 	addr(Unimplemented)              ; $00c9 restore
   79 D1:B7B8 61 A9 D1 00 	addr(Command_ASSERT)             ; $00ca assert
   80 D1:B7BC 29 B1 D1 00 	addr(Command_CLEAR)              ; $00cb clear
   81 D1:B7C0 27 AA D1 00 	addr(Command_END)                ; $00cc end
   82 D1:B7C4 A4 AB D1 00 	addr(Command_STOP)               ; $00cd stop
   83 D1:B7C8 -  -  -  -  ;
   84 D1:B7C8 -  -  -  -  ;	Vectors for set 1
   85 D1:B7C8 -  -  -  -  ;
   86 D1:B7C8 -  -  -  -  VectorsSet1:
   87 D1:B7C8 -  -  -  -  ;
   88 D1:B7C8 -  -  -  -  ;	Vectors for set 2
   89 D1:B7C8 -  -  -  -  ;
   90 D1:B7C8 -  -  -  -  VectorsSet2:
Listing for file "_build.asm"
   66 D1:B7C8 -  -  -  -  #include "int32/idivide.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/idivide.asm"
    1 D1:B7C8 -  -  -  -  ; ***************************************************************************************
    2 D1:B7C8 -  -  -  -  ; ***************************************************************************************
    3 D1:B7C8 -  -  -  -  ;
    4 D1:B7C8 -  -  -  -  ;		Name : 		idivide.asm
    5 D1:B7C8 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B7C8 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B7C8 -  -  -  -  ;		Reviewed :	No
    8 D1:B7C8 -  -  -  -  ;		Purpose :	Divide HL'HL by DE'DE and variants
    9 D1:B7C8 -  -  -  -  ;
   10 D1:B7C8 -  -  -  -  ; ***************************************************************************************
   11 D1:B7C8 -  -  -  -  ; ***************************************************************************************
   12 D1:B7C8 -  -  -  -  
   13 D1:B7C8 -  -  -  -  ; ***************************************************************************************
   14 D1:B7C8 -  -  -  -  ;
   15 D1:B7C8 -  -  -  -  ;								Unsigned integer divide
   16 D1:B7C8 -  -  -  -  ;
   17 D1:B7C8 -  -  -  -  ; ***************************************************************************************
   18 D1:B7C8 -  -  -  -  
   19 D1:B7C8 -  -  -  -  Int32UDivide:
   20 D1:B7C8 37 -  -  -  		scf
   21 D1:B7C9 C3 0D B8 D1 		jp 		_I32UnsignedDivide		
   22 D1:B7CD -  -  -  -  
   23 D1:B7CD -  -  -  -  ; ***************************************************************************************
   24 D1:B7CD -  -  -  -  ;
   25 D1:B7CD -  -  -  -  ;							Signed integer divide/Modulus
   26 D1:B7CD -  -  -  -  ;
   27 D1:B7CD -  -  -  -  ; ***************************************************************************************
   28 D1:B7CD -  -  -  -  
   29 D1:B7CD -  -  -  -  Int32SDivide:
   30 D1:B7CD 37 -  -  -  		scf
   31 D1:B7CE 18 01 -  -  		jr 		_I32SDivide
   32 D1:B7D0 -  -  -  -  Int32Modulus:
   33 D1:B7D0 AF -  -  -  		xor 	a
   34 D1:B7D1 -  -  -  -  _I32SDivide:
   35 D1:B7D1 08 -  -  -  		ex 		af,af' 						; push AF'
   36 D1:B7D2 F5 -  -  -  		push 	af
   37 D1:B7D3 08 -  -  -  		ex 		af,af'
   38 D1:B7D4 -  -  -  -  
   39 D1:B7D4 D5 -  -  -  		push 	de 							; push DE'DE as we might remove sign
   40 D1:B7D5 D9 -  -  -  		exx
   41 D1:B7D6 D5 -  -  -  		push 	de
   42 D1:B7D7 D9 -  -  -  		exx
   43 D1:B7D8 -  -  -  -  
   44 D1:B7D8 F5 -  -  -  		push 	af 							; save flag (CS Divide, CC Modulus) on stack.
   45 D1:B7D9 AF -  -  -  		xor 	a 							; clear sign count.
   46 D1:B7DA CD FA B7 D1 		call 	_I32CheckHLSignSwap
   47 D1:B7DE CD FA B7 D1 		call 	_I32CheckHLSignSwap
   48 D1:B7E2 08 -  -  -  		ex 		af,af' 						; save count in AF'
   49 D1:B7E3 F1 -  -  -  		pop 	af 							; get/save function flag
   50 D1:B7E4 F5 -  -  -  		push 	af
   51 D1:B7E5 CD 0D B8 D1 		call 	_I32UnsignedDivide 			; do the unsigned divide or modulus
   52 D1:B7E9 F1 -  -  -  		pop 	af 							; get function back
   53 D1:B7EA 30 07 -  -  		jr 		nc,_I32SDExit 				; if modulus don't reapply the sign
   54 D1:B7EC 08 -  -  -  		ex 	 	af,af' 						; get count
   55 D1:B7ED CB 47 -  -  		bit 	0,a 						; if even do not reapply sign
   56 D1:B7EF C4 70 B9 D1 		call 	nz,Int32Negate 				; if odd, reapply sign.
   57 D1:B7F3 -  -  -  -  _I32SDExit:
   58 D1:B7F3 D9 -  -  -  		exx 								; restore DE'DE
   59 D1:B7F4 D1 -  -  -  		pop 	de
   60 D1:B7F5 D9 -  -  -  		exx
   61 D1:B7F6 D1 -  -  -  		pop 	de
   62 D1:B7F7 F1 -  -  -  		pop 	af 							; restore AF'	
   63 D1:B7F8 08 -  -  -  		ex 		af,af'
   64 D1:B7F9 C9 -  -  -  		ret
   65 D1:B7FA -  -  -  -  
   66 D1:B7FA -  -  -  -  
   67 D1:B7FA -  -  -  -  _I32CheckHLSignSwap:
   68 D1:B7FA D9 -  -  -  		exx 								; check if HL'HL is negative.
   69 D1:B7FB CB 7C -  -  		bit 	7,h
   70 D1:B7FD D9 -  -  -  		exx
   71 D1:B7FE 28 08 -  -  		jr 		z,_I32CHSPositive 		
   72 D1:B800 -  -  -  -  		;
   73 D1:B800 C6 01 -  -  		add 	a,1 						; if so increment counter in A
   74 D1:B802 F5 -  -  -  		push 	af  						; negate HL'HL preserving A
   75 D1:B803 CD 70 B9 D1 		call 	Int32Negate 				
   76 D1:B807 F1 -  -  -  		pop 	af
   77 D1:B808 -  -  -  -  _I32CHSPositive:
   78 D1:B808 D9 -  -  -  		exx 	 							; swap HL'HL and DE'DE
   79 D1:B809 EB -  -  -  		ex 		de,hl
   80 D1:B80A D9 -  -  -  		exx		
   81 D1:B80B EB -  -  -  		ex 		de,hl
   82 D1:B80C C9 -  -  -  		ret
   83 D1:B80D -  -  -  -  
   84 D1:B80D -  -  -  -  ; ***************************************************************************************
   85 D1:B80D -  -  -  -  ;
   86 D1:B80D -  -  -  -  ;		Divide HL'HL by DE'DE. Preserves BC'BC and DE'DE. If CS return carry else 
   87 D1:B80D -  -  -  -  ;		return the modulus. Always returns modulus LSB in A.
   88 D1:B80D -  -  -  -  ;
   89 D1:B80D -  -  -  -  ; ***************************************************************************************
   90 D1:B80D -  -  -  -  
   91 D1:B80D -  -  -  -  _I32UnsignedDivide:
   92 D1:B80D C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE
   93 D1:B80E D5 -  -  -  		push 	de
   94 D1:B80F D9 -  -  -  		exx
   95 D1:B810 C5 -  -  -  		push 	bc
   96 D1:B811 D5 -  -  -  		push 	de 							
   97 D1:B812 D9 -  -  -  		exx
   98 D1:B813 -  -  -  -  
   99 D1:B813 F5 -  -  -  		push 	af 							; save CS for exit check
  100 D1:B814 -  -  -  -  
  101 D1:B814 7A -  -  -  		ld 		a,d 						; check if DE = 0
  102 D1:B815 B3 -  -  -  		or 		e
  103 D1:B816 D9 -  -  -  		exx
  104 D1:B817 B2 -  -  -  		or 		d
  105 D1:B818 B3 -  -  -  		or 		e
  106 D1:B819 D9 -  -  -  		exx
  107 D1:B81A CA AB A8 D1 		jp 		z,Int32DivZeroHandler 		; if so, error.
  108 D1:B81E -  -  -  -  
  109 D1:B81E -  -  -  -  
  110 D1:B81E 44 -  -  -  		ld 		b,h 						; put Q (divisor) in BC, clear A (result)
  111 D1:B81F 4D -  -  -  		ld		c,l
  112 D1:B820 21 00 00 00 		ld 		hl,$0000
  113 D1:B824 D9 -  -  -  		exx
  114 D1:B825 44 -  -  -  		ld 		b,h
  115 D1:B826 4D -  -  -  		ld		c,l
  116 D1:B827 21 00 00 00 		ld 		hl,$0000
  117 D1:B82B D9 -  -  -  		exx
  118 D1:B82C -  -  -  -  
  119 D1:B82C 3E 20 -  -  		ld 		a,32 						; loop counter
  120 D1:B82E -  -  -  -  _I32DivideLoop:
  121 D1:B82E F5 -  -  -  		push 	af
  122 D1:B82F -  -  -  -  
  123 D1:B82F CB 21 -  -  		sla 	c 							; shift AQ left : A = HL'HL Q = BC'BC
  124 D1:B831 CB 10 -  -  		rl 		b
  125 D1:B833 D9 -  -  -  		exx
  126 D1:B834 CB 11 -  -  		rl 		c
  127 D1:B836 CB 10 -  -  		rl 		b
  128 D1:B838 D9 -  -  -  		exx
  129 D1:B839 CB 15 -  -  		rl 		l
  130 D1:B83B CB 14 -  -  		rl 		h
  131 D1:B83D D9 -  -  -  		exx
  132 D1:B83E CB 15 -  -  		rl 		l
  133 D1:B840 CB 14 -  -  		rl 		h
  134 D1:B842 D9 -  -  -  		exx
  135 D1:B843 -  -  -  -  
  136 D1:B843 CD 0E B9 D1 		call 	Int32Subtract 				; A = A - M
  137 D1:B847 38 03 -  -  		jr 		c,_I32Borrow 				; borrow, failed to subtract.
  138 D1:B849 -  -  -  -  
  139 D1:B849 0C -  -  -  		inc 	c 							; set the low bit of BC'BC
  140 D1:B84A 18 04 -  -  		jr 		_I32Next
  141 D1:B84C -  -  -  -  
  142 D1:B84C -  -  -  -  _I32Borrow:
  143 D1:B84C CD 06 B9 D1 		call 	Int32Add 					; A = A + M
  144 D1:B850 -  -  -  -  _I32Next:
  145 D1:B850 F1 -  -  -  		pop 	af
  146 D1:B851 3D -  -  -  		dec 	a
  147 D1:B852 20 DA -  -  		jr 		nz,_I32DivideLoop		 	; result is in BC'BC, remainder in HL'HL
  148 D1:B854 -  -  -  -  
  149 D1:B854 F1 -  -  -  		pop 	af 							; CS if divide, CC if modulus
  150 D1:B855 -  -  -  -  
  151 D1:B855 7D -  -  -  		ld 		a,l 						; A has LSB of modulus.
  152 D1:B856 30 06 -  -  		jr 		nc,_I32Modulus1
  153 D1:B858 -  -  -  -  
  154 D1:B858 60 -  -  -  		ld  	h,b
  155 D1:B859 69 -  -  -  		ld 		l,c
  156 D1:B85A D9 -  -  -  		exx
  157 D1:B85B 60 -  -  -  		ld  	h,b
  158 D1:B85C 69 -  -  -  		ld 		l,c
  159 D1:B85D D9 -  -  -  		exx
  160 D1:B85E -  -  -  -  _I32Modulus1:		
  161 D1:B85E D9 -  -  -  		exx 								; restore BC'BC and DE'DE
  162 D1:B85F D1 -  -  -  		pop 	de
  163 D1:B860 C1 -  -  -  		pop 	bc
  164 D1:B861 D9 -  -  -  		exx
  165 D1:B862 D1 -  -  -  		pop 	de
  166 D1:B863 C1 -  -  -  		pop 	bc
  167 D1:B864 C9 -  -  -  		ret
  168 D1:B865 -  -  -  -  
  169 D1:B865 -  -  -  -  ; ***************************************************************************************
  170 D1:B865 -  -  -  -  ;
  171 D1:B865 -  -  -  -  ;									Changes and Updates
  172 D1:B865 -  -  -  -  ;
  173 D1:B865 -  -  -  -  ; ***************************************************************************************
  174 D1:B865 -  -  -  -  ;
  175 D1:B865 -  -  -  -  ;		Date			Notes
  176 D1:B865 -  -  -  -  ;		==== 			=====
  177 D1:B865 -  -  -  -  ;
  178 D1:B865 -  -  -  -  ; ***************************************************************************************
  179 D1:B865 -  -  -  -  		
Listing for file "_build.asm"
   67 D1:B865 -  -  -  -  #include "int32/ifromstring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/ifromstring.asm"
    1 D1:B865 -  -  -  -  ; ***************************************************************************************
    2 D1:B865 -  -  -  -  ; ***************************************************************************************
    3 D1:B865 -  -  -  -  ;
    4 D1:B865 -  -  -  -  ;		Name : 		ifromstring.asm
    5 D1:B865 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B865 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B865 -  -  -  -  ;		Reviewed :	No
    8 D1:B865 -  -  -  -  ;		Purpose :	Convert string to integer.
    9 D1:B865 -  -  -  -  ;
   10 D1:B865 -  -  -  -  ; ***************************************************************************************
   11 D1:B865 -  -  -  -  ; ***************************************************************************************
   12 D1:B865 -  -  -  -  
   13 D1:B865 -  -  -  -  ; ***************************************************************************************
   14 D1:B865 -  -  -  -  ;
   15 D1:B865 -  -  -  -  ;			Convert string at (BC) base A (-ve = sign) to number at HL'HL
   16 D1:B865 -  -  -  -  ;			Return first 'bad' character in A, Z flag set if EOS.
   17 D1:B865 -  -  -  -  ;
   18 D1:B865 -  -  -  -  ; ***************************************************************************************
   19 D1:B865 -  -  -  -  
   20 D1:B865 -  -  -  -  Int32FromString:
   21 D1:B865 C5 -  -  -   		push 	bc 							; save BC on stack
   22 D1:B866 D9 -  -  -  		exx 								; push DE'DE on the stack
   23 D1:B867 D5 -  -  -  		push 	de
   24 D1:B868 D9 -  -  -  		exx
   25 D1:B869 D5 -  -  -  		push 	de
   26 D1:B86A -  -  -  -  
   27 D1:B86A 21 00 00 00 		ld 		hl,$0000 					; zero HL'HL the result and the DE'DE
   28 D1:B86E 11 00 00 00 		ld 		de,$0000
   29 D1:B872 D9 -  -  -  		exx
   30 D1:B873 21 00 00 00 		ld 		hl,$0000
   31 D1:B877 11 00 00 00 		ld 		de,$0000
   32 D1:B87B D9 -  -  -  		exx
   33 D1:B87C -  -  -  -  
   34 D1:B87C 5F -  -  -  		ld 		e,a 						; base in E
   35 D1:B87D CB 7F -  -  		bit 	7,a 						; base -ve e.g. do it signed
   36 D1:B87F 28 0D -  -  		jr 		z,_I32FSNotSigned
   37 D1:B881 ED 44 -  -  		neg 		 						; fix up the base
   38 D1:B883 5F -  -  -  		ld 		e,a 						; save in E.
   39 D1:B884 -  -  -  -  		;
   40 D1:B884 0A -  -  -  		ld 		a,(bc) 						; push first character on the stack.
   41 D1:B885 F5 -  -  -  		push 	af
   42 D1:B886 FE 2D -  -  		cp 		'-' 						; is it a minus ?
   43 D1:B888 7B -  -  -  		ld 		a,e 						; restore base in A
   44 D1:B889 20 04 -  -  		jr 		nz,_I32FSMain 				; (the compare above)
   45 D1:B88B 03 -  -  -  		inc 	bc 							; skip over it and start scanning
   46 D1:B88C 18 01 -  -  		jr 		_I32FSMain
   47 D1:B88E -  -  -  -  _I32FSNotSigned:		
   48 D1:B88E E5 -  -  -  		push 	hl 							; this is a dummy first char, will be zero.
   49 D1:B88F -  -  -  -  		;
   50 D1:B88F -  -  -  -  		; 		Main conversion loop.
   51 D1:B88F -  -  -  -  		; 		
   52 D1:B88F -  -  -  -  _I32FSMain:		
   53 D1:B88F 0A -  -  -  		ld 		a,(bc) 						; get next character
   54 D1:B890 FE 60 -  -  		cp 		96 							; simple but sufficient L->U
   55 D1:B892 38 02 -  -  		jr 		c,_I32FSNotLower
   56 D1:B894 D6 20 -  -  		sub 	32
   57 D1:B896 -  -  -  -  _I32FSNotLower:
   58 D1:B896 FE 30 -  -  		cp 		'0' 						; check in range
   59 D1:B898 38 23 -  -  		jr 		c,_I32FSExit
   60 D1:B89A FE 3A -  -  		cp 		'9'+1
   61 D1:B89C 38 0A -  -  		jr 		c,_I32FSOkay
   62 D1:B89E FE 41 -  -  		cp 		'A'
   63 D1:B8A0 38 1B -  -  		jr 		c,_I32FSExit
   64 D1:B8A2 FE 47 -  -  		cp 		'F'+1
   65 D1:B8A4 30 17 -  -  		jr 		nc,_I32FSExit
   66 D1:B8A6 D6 07 -  -  		sub 	7 							; hex->decimal mod.
   67 D1:B8A8 -  -  -  -  _I32FSOkay:
   68 D1:B8A8 D6 30 -  -  		sub 	'0' 						; now should be 0-15
   69 D1:B8AA BB -  -  -  		cp 		e 							; fail if >= base
   70 D1:B8AB 30 10 -  -  		jr 		nc,_I32FSExit 
   71 D1:B8AD 03 -  -  -  		inc 	bc 							; consume character
   72 D1:B8AE D5 -  -  -  		push 	de 							; save DE, containing base on stack.
   73 D1:B8AF F5 -  -  -  		push 	af 							; save additive on stack
   74 D1:B8B0 CD CD B8 D1 		call 	Int32Multiply 				; result *= base
   75 D1:B8B4 F1 -  -  -  		pop 	af 							; additive in DE
   76 D1:B8B5 5F -  -  -  		ld 		e,a
   77 D1:B8B6 CD 06 B9 D1 		call 	Int32Add 					; and add it.
   78 D1:B8BA D1 -  -  -  		pop 	de 							; restore DE containing base.
   79 D1:B8BB 18 D2 -  -  		jr 		_I32FSMain 					; and go round the loop again.
   80 D1:B8BD -  -  -  -  
   81 D1:B8BD -  -  -  -  _I32FSExit:
   82 D1:B8BD F1 -  -  -  		pop 	af 							; get sign back
   83 D1:B8BE FE 2D -  -  		cp 		'-' 						; if -ve negate result
   84 D1:B8C0 CC 70 B9 D1 		call 	z,Int32Negate
   85 D1:B8C4 0A -  -  -  		ld 		a,(bc) 						; get fail character
   86 D1:B8C5 D1 -  -  -  		pop 	de 							; restore DE'DE BC
   87 D1:B8C6 D9 -  -  -  		exx
   88 D1:B8C7 D1 -  -  -  		pop 	de
   89 D1:B8C8 D9 -  -  -  		exx
   90 D1:B8C9 C1 -  -  -  		pop 	bc
   91 D1:B8CA FE 0D -  -  		cp 		$0D 						; ends in CR ?
   92 D1:B8CC C9 -  -  -  		ret				
   93 D1:B8CD -  -  -  -  
   94 D1:B8CD -  -  -  -  ; ***************************************************************************************
   95 D1:B8CD -  -  -  -  ;
   96 D1:B8CD -  -  -  -  ;									Changes and Updates
   97 D1:B8CD -  -  -  -  ;
   98 D1:B8CD -  -  -  -  ; ***************************************************************************************
   99 D1:B8CD -  -  -  -  ;
  100 D1:B8CD -  -  -  -  ;		Date			Notes
  101 D1:B8CD -  -  -  -  ;		==== 			=====
  102 D1:B8CD -  -  -  -  ;
  103 D1:B8CD -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   68 D1:B8CD -  -  -  -  #include "int32/imultiply.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/imultiply.asm"
    1 D1:B8CD -  -  -  -  ; ***************************************************************************************
    2 D1:B8CD -  -  -  -  ; ***************************************************************************************
    3 D1:B8CD -  -  -  -  ;
    4 D1:B8CD -  -  -  -  ;		Name : 		imultiply.asm
    5 D1:B8CD -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B8CD -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B8CD -  -  -  -  ;		Reviewed :	No
    8 D1:B8CD -  -  -  -  ;		Purpose :	Multiply HL'HL by DE'DE
    9 D1:B8CD -  -  -  -  ;
   10 D1:B8CD -  -  -  -  ; ***************************************************************************************
   11 D1:B8CD -  -  -  -  ; ***************************************************************************************
   12 D1:B8CD -  -  -  -  
   13 D1:B8CD -  -  -  -  Int32Multiply:
   14 D1:B8CD C5 -  -  -  		push 	bc 							; save BC'BC and DE'DE, copy HL'HL to BC'BC and zero HL'HL
   15 D1:B8CE D5 -  -  -  		push 	de
   16 D1:B8CF 44 -  -  -  		ld 		b,h
   17 D1:B8D0 4D -  -  -  		ld 		c,l
   18 D1:B8D1 21 00 00 00 		ld 		hl,$0000
   19 D1:B8D5 -  -  -  -  
   20 D1:B8D5 D9 -  -  -  		exx
   21 D1:B8D6 C5 -  -  -  		push 	bc
   22 D1:B8D7 D5 -  -  -  		push 	de
   23 D1:B8D8 44 -  -  -  		ld 		b,h
   24 D1:B8D9 4D -  -  -  		ld 		c,l
   25 D1:B8DA 21 00 00 00 		ld 		hl,$0000		
   26 D1:B8DE D9 -  -  -  		exx
   27 D1:B8DF -  -  -  -  
   28 D1:B8DF -  -  -  -  _I32MultiplyLoop:
   29 D1:B8DF CB 41 -  -  		bit 	0,c 						; is bit 0 of BC'BC set ?
   30 D1:B8E1 C4 06 B9 D1 		call 	nz,Int32Add 				; add DE'DE to HL'HL
   31 D1:B8E5 -  -  -  -  		;
   32 D1:B8E5 D9 -  -  -  		exx 								; shift BC'BC right.
   33 D1:B8E6 CB 38 -  -  		srl 	b
   34 D1:B8E8 CB 19 -  -  		rr 		c
   35 D1:B8EA D9 -  -  -  		exx
   36 D1:B8EB CB 18 -  -  		rr 		b
   37 D1:B8ED CB 19 -  -  		rr 		c
   38 D1:B8EF -  -  -  -  		;
   39 D1:B8EF CB 23 -  -  		sla 	e 							; shift DE'DE left.
   40 D1:B8F1 CB 12 -  -  		rl 		d
   41 D1:B8F3 D9 -  -  -  		exx
   42 D1:B8F4 CB 13 -  -  		rl 		e
   43 D1:B8F6 CB 12 -  -  		rl 		d
   44 D1:B8F8 -  -  -  -  
   45 D1:B8F8 78 -  -  -  		ld 		a,b 						; check BC is zero in last exx
   46 D1:B8F9 B1 -  -  -  		or 		c
   47 D1:B8FA D9 -  -  -  		exx
   48 D1:B8FB B0 -  -  -  		or 		b
   49 D1:B8FC B1 -  -  -  		or 		c
   50 D1:B8FD 20 E0 -  -  		jr 		nz,_I32MultiplyLoop
   51 D1:B8FF -  -  -  -  
   52 D1:B8FF D9 -  -  -  		exx  								; pop DE'DE and BC'BC
   53 D1:B900 D1 -  -  -  		pop 	de
   54 D1:B901 C1 -  -  -  		pop 	bc
   55 D1:B902 D9 -  -  -  		exx
   56 D1:B903 D1 -  -  -  		pop 	de
   57 D1:B904 C1 -  -  -  		pop 	bc
   58 D1:B905 C9 -  -  -  		ret
   59 D1:B906 -  -  -  -  
   60 D1:B906 -  -  -  -  ; ***************************************************************************************
   61 D1:B906 -  -  -  -  ;
   62 D1:B906 -  -  -  -  ;									Changes and Updates
   63 D1:B906 -  -  -  -  ;
   64 D1:B906 -  -  -  -  ; ***************************************************************************************
   65 D1:B906 -  -  -  -  ;
   66 D1:B906 -  -  -  -  ;		Date			Notes
   67 D1:B906 -  -  -  -  ;		==== 			=====
   68 D1:B906 -  -  -  -  ;
   69 D1:B906 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   69 D1:B906 -  -  -  -  #include "int32/isimple.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
    1 D1:B906 -  -  -  -  ; ***************************************************************************************
    2 D1:B906 -  -  -  -  ; ***************************************************************************************
    3 D1:B906 -  -  -  -  ;
    4 D1:B906 -  -  -  -  ;		Name : 		isimple.asm
    5 D1:B906 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B906 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B906 -  -  -  -  ;		Reviewed :	No
    8 D1:B906 -  -  -  -  ;		Purpose :	Simple 32 bit operations
    9 D1:B906 -  -  -  -  ;
   10 D1:B906 -  -  -  -  ; ***************************************************************************************
   11 D1:B906 -  -  -  -  ; ***************************************************************************************
   12 D1:B906 -  -  -  -  
   13 D1:B906 -  -  -  -  ; ***************************************************************************************
   14 D1:B906 -  -  -  -  ;
   15 D1:B906 -  -  -  -  ;								Add DE'DE to HL'HL
   16 D1:B906 -  -  -  -  ;
   17 D1:B906 -  -  -  -  ; ***************************************************************************************
   18 D1:B906 -  -  -  -  
   19 D1:B906 -  -  -  -  Int32Add:
   20 D1:B906 52 19 -  -  		zm_add_hlde_16 						; add DE to HL
Listing for file "/home/paulr/Projects/dax-basic/source/int32/isimple.asm"
   21 D1:B908 D9 -  -  -  		exx
   22 D1:B909 52 ED 5A -  		zm_adc_hlde_16 						; add DE' to HL'
   23 D1:B90C D9 -  -  -  		exx
   24 D1:B90D C9 -  -  -  		ret
   25 D1:B90E -  -  -  -  
   26 D1:B90E -  -  -  -  ; ***************************************************************************************
   27 D1:B90E -  -  -  -  ;
   28 D1:B90E -  -  -  -  ;								Sub DE'DE from HL'HL
   29 D1:B90E -  -  -  -  ;
   30 D1:B90E -  -  -  -  ; ***************************************************************************************
   31 D1:B90E -  -  -  -  
   32 D1:B90E -  -  -  -  Int32Subtract:
   33 D1:B90E AF -  -  -  		xor 	a 							; clear carry
   34 D1:B90F 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
   35 D1:B912 D9 -  -  -  		exx
   36 D1:B913 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
   37 D1:B916 D9 -  -  -  		exx
   38 D1:B917 C9 -  -  -  		ret
   39 D1:B918 -  -  -  -  
   40 D1:B918 -  -  -  -  ; ***************************************************************************************
   41 D1:B918 -  -  -  -  ;
   42 D1:B918 -  -  -  -  ;								And DE'DE into HL'HL
   43 D1:B918 -  -  -  -  ;
   44 D1:B918 -  -  -  -  ; ***************************************************************************************
   45 D1:B918 -  -  -  -  
   46 D1:B918 -  -  -  -  Int32And:
   47 D1:B918 D9 -  -  -  		exx
   48 D1:B919 CD 1E B9 D1 		call 	_I32AndHLDE
   49 D1:B91D D9 -  -  -  		exx
   50 D1:B91E -  -  -  -  _I32AndHLDE:		
   51 D1:B91E 7C -  -  -  		ld 		a,h
   52 D1:B91F A2 -  -  -  		and 	d
   53 D1:B920 67 -  -  -  		ld 		h,a
   54 D1:B921 7D -  -  -  		ld 		a,l
   55 D1:B922 A3 -  -  -  		and 	e
   56 D1:B923 6F -  -  -  		ld 		l,a
   57 D1:B924 C9 -  -  -  		ret
   58 D1:B925 -  -  -  -  
   59 D1:B925 -  -  -  -  ; ***************************************************************************************
   60 D1:B925 -  -  -  -  ;
   61 D1:B925 -  -  -  -  ;								Or DE'DE into HL'HL
   62 D1:B925 -  -  -  -  ;
   63 D1:B925 -  -  -  -  ; ***************************************************************************************
   64 D1:B925 -  -  -  -  
   65 D1:B925 -  -  -  -  Int32Or:
   66 D1:B925 D9 -  -  -  		exx
   67 D1:B926 CD 2B B9 D1 		call 	_I32OrHLDE
   68 D1:B92A D9 -  -  -  		exx
   69 D1:B92B -  -  -  -  _I32OrHLDE:		
   70 D1:B92B 7C -  -  -  		ld 		a,h
   71 D1:B92C B2 -  -  -  		or 		d
   72 D1:B92D 67 -  -  -  		ld 		h,a
   73 D1:B92E 7D -  -  -  		ld 		a,l
   74 D1:B92F B3 -  -  -  		or 		e
   75 D1:B930 6F -  -  -  		ld 		l,a
   76 D1:B931 C9 -  -  -  		ret
   77 D1:B932 -  -  -  -  
   78 D1:B932 -  -  -  -  ; ***************************************************************************************
   79 D1:B932 -  -  -  -  ;
   80 D1:B932 -  -  -  -  ;								Xor DE'DE into HL'HL
   81 D1:B932 -  -  -  -  ;
   82 D1:B932 -  -  -  -  ; ***************************************************************************************
   83 D1:B932 -  -  -  -  
   84 D1:B932 -  -  -  -  Int32Xor:
   85 D1:B932 D9 -  -  -  		exx
   86 D1:B933 CD 38 B9 D1 		call 	_I32XorHLDE
   87 D1:B937 D9 -  -  -  		exx
   88 D1:B938 -  -  -  -  _I32XorHLDE:		
   89 D1:B938 7C -  -  -  		ld 		a,h
   90 D1:B939 AA -  -  -  		xor 	d
   91 D1:B93A 67 -  -  -  		ld 		h,a
   92 D1:B93B 7D -  -  -  		ld 		a,l
   93 D1:B93C AB -  -  -  		xor 	e
   94 D1:B93D 6F -  -  -  		ld 		l,a
   95 D1:B93E C9 -  -  -  		ret
   96 D1:B93F -  -  -  -  
   97 D1:B93F -  -  -  -  ; ***************************************************************************************
   98 D1:B93F -  -  -  -  ;
   99 D1:B93F -  -  -  -  ;								 Check if HL'HL zero
  100 D1:B93F -  -  -  -  ;
  101 D1:B93F -  -  -  -  ; ***************************************************************************************
  102 D1:B93F -  -  -  -  
  103 D1:B93F -  -  -  -  Int32Zero:
  104 D1:B93F D9 -  -  -  		exx
  105 D1:B940 7D -  -  -  		ld 		a,l
  106 D1:B941 B4 -  -  -  		or 		h
  107 D1:B942 D9 -  -  -  		exx
  108 D1:B943 B5 -  -  -  		or 		l
  109 D1:B944 B4 -  -  -  		or 		h
  110 D1:B945 C9 -  -  -  		ret
  111 D1:B946 -  -  -  -  
  112 D1:B946 -  -  -  -  ; ***************************************************************************************
  113 D1:B946 -  -  -  -  ;
  114 D1:B946 -  -  -  -  ;								Compare HL'HL vs DE'DE
  115 D1:B946 -  -  -  -  ;
  116 D1:B946 -  -  -  -  ; ***************************************************************************************
  117 D1:B946 -  -  -  -  
  118 D1:B946 -  -  -  -  Int32Compare:
  119 D1:B946 E5 -  -  -  		push 	hl 							; save HL
  120 D1:B947 AF -  -  -  		xor 	a 							; clear carry
  121 D1:B948 52 ED 52 -  		zm_sbc_hlde_16  					; subtract DE from HL
  122 D1:B94B D9 -  -  -  		exx
  123 D1:B94C E5 -  -  -  		push 	hl 							; save HL'
  124 D1:B94D 52 ED 52 -  		zm_sbc_hlde_16 						; subtrace DE' from HL'
  125 D1:B950 -  -  -  -  		;
  126 D1:B950 44 -  -  -  		ld 		b,h 						; save most significant byte in B
  127 D1:B951 E2 59 B9 D1 		jp 		po,_I32CNoOverflow  		; on overflow flip B bit 7 (compare signed trick)
  128 D1:B955 78 -  -  -  		ld 		a,b
  129 D1:B956 EE 80 -  -  		xor 	$80
  130 D1:B958 47 -  -  -  		ld 		b,a
  131 D1:B959 -  -  -  -  _I32CNoOverflow:
  132 D1:B959 7C -  -  -  		ld 		a,h 						; work out if result is zero
  133 D1:B95A B5 -  -  -  		or 		l
  134 D1:B95B D9 -  -  -  		exx 
  135 D1:B95C B4 -  -  -  		or 		h
  136 D1:B95D B5 -  -  -  		or 		l
  137 D1:B95E 28 0A -  -  		jr 		z,_I32NotPos 				; if zero, return zero.
  138 D1:B960 -  -  -  -  		;
  139 D1:B960 D9 -  -  -  		exx 								; is B' -ve 	
  140 D1:B961 CB 78 -  -  		bit 	7,b
  141 D1:B963 D9 -  -  -  		exx
  142 D1:B964 3E 01 -  -  		ld 		a,1 						; if B' +ve return 1.
  143 D1:B966 28 02 -  -  		jr 		z,_I32NotPos
  144 D1:B968 3E FF -  -  		ld 		a,$FF
  145 D1:B96A -  -  -  -  _I32NotPos:
  146 D1:B96A D9 -  -  -  		exx
  147 D1:B96B E1 -  -  -  		pop 	hl 							; restore HL'
  148 D1:B96C D9 -  -  -  		exx
  149 D1:B96D E1 -  -  -  		pop 	hl 							; restore HL
  150 D1:B96E B7 -  -  -  		or 		a 							; set flags and exit		
  151 D1:B96F C9 -  -  -  		ret
  152 D1:B970 -  -  -  -  
  153 D1:B970 -  -  -  -  ; ***************************************************************************************
  154 D1:B970 -  -  -  -  ;
  155 D1:B970 -  -  -  -  ;										Negate HL'HL
  156 D1:B970 -  -  -  -  ;
  157 D1:B970 -  -  -  -  ; ***************************************************************************************
  158 D1:B970 -  -  -  -  
  159 D1:B970 -  -  -  -  Int32Negate:
  160 D1:B970 AF -  -  -  		xor 	a
  161 D1:B971 CD 7C B9 D1 		call 	_I32NSubtract
  162 D1:B975 D9 -  -  -  		exx
  163 D1:B976 CD 7C B9 D1 		call 	_I32NSubtract
  164 D1:B97A D9 -  -  -  		exx
  165 D1:B97B C9 -  -  -  		ret
  166 D1:B97C -  -  -  -  _I32NSubtract:
  167 D1:B97C D5 -  -  -  		push 	de
  168 D1:B97D EB -  -  -  		ex 		de,hl
  169 D1:B97E 21 00 00 00 		ld 		hl,$0000
  170 D1:B982 52 ED 52 -  		zm_sbc_hlde_16		
  171 D1:B985 D1 -  -  -  		pop 	de
  172 D1:B986 C9 -  -  -  		ret
  173 D1:B987 -  -  -  -  		
  174 D1:B987 -  -  -  -  ; ***************************************************************************************
  175 D1:B987 -  -  -  -  ;
  176 D1:B987 -  -  -  -  ;									Changes and Updates
  177 D1:B987 -  -  -  -  ;
  178 D1:B987 -  -  -  -  ; ***************************************************************************************
  179 D1:B987 -  -  -  -  ;
  180 D1:B987 -  -  -  -  ;		Date			Notes
  181 D1:B987 -  -  -  -  ;		==== 			=====
  182 D1:B987 -  -  -  -  ;
  183 D1:B987 -  -  -  -  ; ***************************************************************************************
  184 D1:B987 -  -  -  -  		
Listing for file "_build.asm"
   70 D1:B987 -  -  -  -  #include "int32/itostring.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/int32/itostring.asm"
    1 D1:B987 -  -  -  -  ; ***************************************************************************************
    2 D1:B987 -  -  -  -  ; ***************************************************************************************
    3 D1:B987 -  -  -  -  ;
    4 D1:B987 -  -  -  -  ;		Name : 		itostring.asm
    5 D1:B987 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B987 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B987 -  -  -  -  ;		Reviewed :	No
    8 D1:B987 -  -  -  -  ;		Purpose :	Convert integer to string 
    9 D1:B987 -  -  -  -  ;
   10 D1:B987 -  -  -  -  ; ***************************************************************************************
   11 D1:B987 -  -  -  -  ;
   12 D1:B987 -  -  -  -  ; 			Convert HL'HL to ASCIIZ string at BC in base A. A = -ve => Signed
   13 D1:B987 -  -  -  -  ;
   14 D1:B987 -  -  -  -  ; ***************************************************************************************
   15 D1:B987 -  -  -  -  
   16 D1:B987 -  -  -  -  Int32ToString:
   17 D1:B987 C5 -  -  -  		push 	bc 							; save string start
   18 D1:B988 D5 -  -  -  		push 	de 							; save DE'DE and HL'HL, zero DE
   19 D1:B989 E5 -  -  -  		push 	hl
   20 D1:B98A 11 00 00 00 		ld	 	de,$0000
   21 D1:B98E D9 -  -  -  		exx
   22 D1:B98F D5 -  -  -  		push 	de
   23 D1:B990 E5 -  -  -  		push 	hl
   24 D1:B991 11 00 00 00 		ld 		de,$000
   25 D1:B995 D9 -  -  -  		exx
   26 D1:B996 5F -  -  -  		ld 		e,a 						; put base in E
   27 D1:B997 -  -  -  -  		;
   28 D1:B997 CB 7F -  -  		bit 	7,a 						; -ve base => signed
   29 D1:B999 28 11 -  -  		jr 		z,_I32TSNotNegative
   30 D1:B99B ED 44 -  -  		neg 								; negate base and put in E
   31 D1:B99D 5F -  -  -  		ld 		e,a
   32 D1:B99E -  -  -  -  		;
   33 D1:B99E D9 -  -  -  		exx 								; is it -ve ?
   34 D1:B99F CB 7C -  -  		bit 	7,h
   35 D1:B9A1 D9 -  -  -  		exx
   36 D1:B9A2 28 08 -  -  		jr 		z,_I32TSNotNegative
   37 D1:B9A4 -  -  -  -  		;
   38 D1:B9A4 CD 70 B9 D1 		call 	Int32Negate 				; yes, negate HL'HL
   39 D1:B9A8 -  -  -  -  		;
   40 D1:B9A8 3E 2D -  -  		ld 		a,'-' 						; output a leading minus.
   41 D1:B9AA 02 -  -  -  		ld 		(bc),a
   42 D1:B9AB 03 -  -  -  		inc 	bc
   43 D1:B9AC -  -  -  -  _I32TSNotNegative:	
   44 D1:B9AC CD BB B9 D1 		call 	_I32RecursiveConvert 		; convert the integer to a string		
   45 D1:B9B0 -  -  -  -  _I32TSExit:
   46 D1:B9B0 3E 0D -  -  		ld 		a,13 						; write the end of string code
   47 D1:B9B2 02 -  -  -  		ld 		(bc),a 
   48 D1:B9B3 -  -  -  -  
   49 D1:B9B3 D9 -  -  -  		exx 								; restore registers and exit.
   50 D1:B9B4 E1 -  -  -  		pop 	hl
   51 D1:B9B5 D1 -  -  -  		pop 	de
   52 D1:B9B6 D9 -  -  -  		exx
   53 D1:B9B7 E1 -  -  -  		pop 	hl
   54 D1:B9B8 D1 -  -  -  		pop 	de
   55 D1:B9B9 C1 -  -  -  		pop 	bc
   56 D1:B9BA C9 -  -  -  		ret
   57 D1:B9BB -  -  -  -  
   58 D1:B9BB -  -  -  -  _I32RecursiveConvert:
   59 D1:B9BB CD C8 B7 D1 		call 	Int32UDivide 				; unsigned divide. Mod is in A
   60 D1:B9BF F5 -  -  -  		push 	af 							; save remainder
   61 D1:B9C0 CD 3F B9 D1 		call 	Int32Zero		 			; check result is non zero
   62 D1:B9C4 C4 BB B9 D1 		call 	nz,_I32RecursiveConvert 	; if non zero keep dividing
   63 D1:B9C8 F1 -  -  -  		pop 	af 							; restore remainder
   64 D1:B9C9 FE 0A -  -  		cp 		10 							; convert 10+ to hex
   65 D1:B9CB 38 02 -  -  		jr 		c,_I32NotHex
   66 D1:B9CD C6 07 -  -  		add 	a,7
   67 D1:B9CF -  -  -  -  _I32NotHex:
   68 D1:B9CF C6 30 -  -  		add 	a,48
   69 D1:B9D1 02 -  -  -  		ld 		(bc),a 						; write out to buffer
   70 D1:B9D2 03 -  -  -  		inc 	bc
   71 D1:B9D3 C9 -  -  -  		ret		
   72 D1:B9D4 -  -  -  -  
   73 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   74 D1:B9D4 -  -  -  -  ;
   75 D1:B9D4 -  -  -  -  ;									Changes and Updates
   76 D1:B9D4 -  -  -  -  ;
   77 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   78 D1:B9D4 -  -  -  -  ;
   79 D1:B9D4 -  -  -  -  ;		Date			Notes
   80 D1:B9D4 -  -  -  -  ;		==== 			=====
   81 D1:B9D4 -  -  -  -  ;
   82 D1:B9D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   71 D1:B9D4 -  -  -  -  #include "simplehardware/_aquarius/aquarius_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_aquarius/aquarius_io.asm"
    1 D1:B9D4 -  -  -  -  ; ***************************************************************************************
    2 D1:B9D4 -  -  -  -  ; ***************************************************************************************
    3 D1:B9D4 -  -  -  -  ;
    4 D1:B9D4 -  -  -  -  ;		Name : 		aquarius_io.asm
    5 D1:B9D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B9D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B9D4 -  -  -  -  ;		Reviewed :	No
    8 D1:B9D4 -  -  -  -  ;		Purpose :	Aquarius specific code.
    9 D1:B9D4 -  -  -  -  ;
   10 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   11 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   12 D1:B9D4 -  -  -  -  
   13 D1:B9D4 -  -  -  -  #ifdef AQUARIUS
   14 D1:B9D4             
   15 D1:B9D4             ; ***************************************************************************************
   16 D1:B9D4             ;
   17 D1:B9D4             ;								Initialise system stuff
   18 D1:B9D4             ;
   19 D1:B9D4             ; ***************************************************************************************
   20 D1:B9D4             
   21 D1:B9D4             SYSInitialise:
   22 D1:B9D4             	ld 		a,$0b 								; Aquarius clear screen
   23 D1:B9D4             	call 	SYSPrintChar
   24 D1:B9D4             	ret
   25 D1:B9D4             
   26 D1:B9D4             ; ***************************************************************************************
   27 D1:B9D4             ;
   28 D1:B9D4             ;								Terminate system stuff
   29 D1:B9D4             ;
   30 D1:B9D4             ; ***************************************************************************************
   31 D1:B9D4             
   32 D1:B9D4             SYSTerminate:
   33 D1:B9D4             	jr 		SYSTerminate
   34 D1:B9D4             
   35 D1:B9D4             ; ***************************************************************************************
   36 D1:B9D4             ;
   37 D1:B9D4             ;								Print A character
   38 D1:B9D4             ;
   39 D1:B9D4             ; ***************************************************************************************
   40 D1:B9D4             
   41 D1:B9D4             SYSPrintChar:
   42 D1:B9D4             	push 	af 									; we stack everything including alt registers
   43 D1:B9D4             	push 	bc
   44 D1:B9D4             	push 	de
   45 D1:B9D4             	push 	hl
   46 D1:B9D4             	push 	ix
   47 D1:B9D4             	push 	iy
   48 D1:B9D4             	exx
   49 D1:B9D4             	push 	bc
   50 D1:B9D4             	push 	de
   51 D1:B9D4             	push 	hl
   52 D1:B9D4             	call 	$1D94 								; the Aquarius equivalent uses alt-registers to save.
   53 D1:B9D4             	pop 	hl
   54 D1:B9D4             	pop 	de
   55 D1:B9D4             	pop 	bc
   56 D1:B9D4             	exx
   57 D1:B9D4             	pop 	iy
   58 D1:B9D4             	pop 	ix
   59 D1:B9D4             	pop 	hl
   60 D1:B9D4             	pop 	de
   61 D1:B9D4             	pop 	bc
   62 D1:B9D4             	pop 	af
   63 D1:B9D4             	ret		
   64 D1:B9D4             
   65 D1:B9D4             ; ***************************************************************************************
   66 D1:B9D4             ;
   67 D1:B9D4             ;									Print Newline
   68 D1:B9D4             ;
   69 D1:B9D4             ; ***************************************************************************************
   70 D1:B9D4             
   71 D1:B9D4             SYSPrintCRLF:
   72 D1:B9D4             	push 	af
   73 D1:B9D4             	ld 		a,13
   74 D1:B9D4             	call 	SYSPrintChar
   75 D1:B9D4             	ld 		a,10
   76 D1:B9D4             	call 	SYSPrintChar
   77 D1:B9D4             	pop 	af
   78 D1:B9D4             	ret
   79 D1:B9D4             
   80 D1:B9D4             ; ***************************************************************************************
   81 D1:B9D4             ;
   82 D1:B9D4             ;									Get time into HL'HL
   83 D1:B9D4             ;
   84 D1:B9D4             ; ***************************************************************************************
   85 D1:B9D4             
   86 D1:B9D4             SYSGetTimer:
   87 D1:B9D4              	in 		a,($00)
   88 D1:B9D4              	ld 		l,a
   89 D1:B9D4              	in 		a,($01)
   90 D1:B9D4              	ld 		h,a
   91 D1:B9D4              	exx
   92 D1:B9D4              	in 		a,($02)
   93 D1:B9D4              	ld 		l,a
   94 D1:B9D4              	in 		a,($03)
   95 D1:B9D4              	ld 		h,a
   96 D1:B9D4              	exx
   97 D1:B9D4             	ret 	
   98 D1:B9D4             	
   99 D1:B9D4             #endif
  100 D1:B9D4 -  -  -  -  
  101 D1:B9D4 -  -  -  -  ; ***************************************************************************************
  102 D1:B9D4 -  -  -  -  ;
  103 D1:B9D4 -  -  -  -  ;									Changes and Updates
  104 D1:B9D4 -  -  -  -  ;
  105 D1:B9D4 -  -  -  -  ; ***************************************************************************************
  106 D1:B9D4 -  -  -  -  ;
  107 D1:B9D4 -  -  -  -  ;		Date			Notes
  108 D1:B9D4 -  -  -  -  ;		==== 			=====
  109 D1:B9D4 -  -  -  -  ;
  110 D1:B9D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   72 D1:B9D4 -  -  -  -  #include "simplehardware/_dummy/dummy_io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_dummy/dummy_io.asm"
    1 D1:B9D4 -  -  -  -  ; ***************************************************************************************
    2 D1:B9D4 -  -  -  -  ; ***************************************************************************************
    3 D1:B9D4 -  -  -  -  ;
    4 D1:B9D4 -  -  -  -  ;		Name : 		dummy_io.asm
    5 D1:B9D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B9D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B9D4 -  -  -  -  ;		Reviewed :	No
    8 D1:B9D4 -  -  -  -  ;		Purpose :	eZ80 build System code.,a
    9 D1:B9D4 -  -  -  -  ;
   10 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   11 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   12 D1:B9D4 -  -  -  -  
   13 D1:B9D4 -  -  -  -  #ifdef CLEANEZ80
   14 D1:B9D4             
   15 D1:B9D4             ; ***************************************************************************************
   16 D1:B9D4             ;
   17 D1:B9D4             ;								Initialise system stuff
   18 D1:B9D4             ;
   19 D1:B9D4             ; ***************************************************************************************
   20 D1:B9D4             
   21 D1:B9D4             SYSInitialise:
   22 D1:B9D4             	ret
   23 D1:B9D4             
   24 D1:B9D4             ; ***************************************************************************************
   25 D1:B9D4             ;
   26 D1:B9D4             ;								Terminate system stuff
   27 D1:B9D4             ;
   28 D1:B9D4             ; ***************************************************************************************
   29 D1:B9D4             
   30 D1:B9D4             SYSTerminate:
   31 D1:B9D4             	ret
   32 D1:B9D4             
   33 D1:B9D4             ; ***************************************************************************************
   34 D1:B9D4             ;
   35 D1:B9D4             ;								Print A character
   36 D1:B9D4             ;
   37 D1:B9D4             ; ***************************************************************************************
   38 D1:B9D4             
   39 D1:B9D4             SYSPrintChar:
   40 D1:B9D4             	ret		
   41 D1:B9D4             
   42 D1:B9D4             ; ***************************************************************************************
   43 D1:B9D4             ;
   44 D1:B9D4             ;									Print Newline
   45 D1:B9D4             ;
   46 D1:B9D4             ; ***************************************************************************************
   47 D1:B9D4             
   48 D1:B9D4             SYSPrintCRLF:
   49 D1:B9D4             	ret
   50 D1:B9D4             
   51 D1:B9D4             ; ***************************************************************************************
   52 D1:B9D4             ;
   53 D1:B9D4             ;									Get time into HL'HL
   54 D1:B9D4             ;
   55 D1:B9D4             ; ***************************************************************************************
   56 D1:B9D4             
   57 D1:B9D4             SYSGetTimer:
   58 D1:B9D4             	ret
   59 D1:B9D4             
   60 D1:B9D4             #endif
   61 D1:B9D4 -  -  -  -  
   62 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   63 D1:B9D4 -  -  -  -  ;
   64 D1:B9D4 -  -  -  -  ;									Changes and Updates
   65 D1:B9D4 -  -  -  -  ;
   66 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   67 D1:B9D4 -  -  -  -  ;
   68 D1:B9D4 -  -  -  -  ;		Date			Notes
   69 D1:B9D4 -  -  -  -  ;		==== 			=====
   70 D1:B9D4 -  -  -  -  ;
   71 D1:B9D4 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   73 D1:B9D4 -  -  -  -  #include "simplehardware/_ti84/ti_84io.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/simplehardware/_ti84/ti_84io.asm"
    1 D1:B9D4 -  -  -  -  ; ***************************************************************************************
    2 D1:B9D4 -  -  -  -  ; ***************************************************************************************
    3 D1:B9D4 -  -  -  -  ;
    4 D1:B9D4 -  -  -  -  ;		Name : 		ti84_io.asm
    5 D1:B9D4 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:B9D4 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:B9D4 -  -  -  -  ;		Reviewed :	No
    8 D1:B9D4 -  -  -  -  ;		Purpose :	TI84 specific code
    9 D1:B9D4 -  -  -  -  ;
   10 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   11 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   12 D1:B9D4 -  -  -  -  
   13 D1:B9D4 -  -  -  -  #ifdef TI84
   14 D1:B9D4 -  -  -  -  
   15 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   16 D1:B9D4 -  -  -  -  ;
   17 D1:B9D4 -  -  -  -  ;								Initialise system stuff
   18 D1:B9D4 -  -  -  -  ;
   19 D1:B9D4 -  -  -  -  ; ***************************************************************************************
   20 D1:B9D4 -  -  -  -  
   21 D1:B9D4 -  -  -  -  SYSInitialise:
   22 D1:B9D4 F3 -  -  -  	di
   23 D1:B9D5 ED 73 F2 B9 
              D1 -  -  -  	ld 		(_StackTemp84),sp 					; TI84 we preserve IY and SP.
   24 D1:B9DA FD 22 F6 B9 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   25 D1:B9DF C9 -  -  -  	ret
   26 D1:B9E0 -  -  -  -  
   27 D1:B9E0 -  -  -  -  ; ***************************************************************************************
   28 D1:B9E0 -  -  -  -  ;
   29 D1:B9E0 -  -  -  -  ;								Terminate system stuff
   30 D1:B9E0 -  -  -  -  ;
   31 D1:B9E0 -  -  -  -  ; ***************************************************************************************
   32 D1:B9E0 -  -  -  -  
   33 D1:B9E0 -  -  -  -  SYSTerminate:
   34 D1:B9E0 ED 7B F2 B9 
              D1 -  -  -  	ld 		sp,(_StackTemp84) 					; TI84 restore SP
   35 D1:B9E5 FD E1 -  -  	pop 	iy 									; throw return address from SYSInitialise call
   36 D1:B9E7 FD 2A F6 B9 
              D1 -  -  -  	ld 		iy,(_IYTemp84) 						; restore IY
   37 D1:B9EC FD CB 00 AE 	res 	donePrgm,(iy+doneFlags) 			; marks program as complete (task switching ?)
   38 D1:B9F0 FB -  -  -  	ei
   39 D1:B9F1 C9 -  -  -  	ret 										; and exit.
   40 D1:B9F2 -  -  -  -  
   41 D1:B9F2 -  -  -  -  _StackTemp84:									; temp var for TI84 only.
   42 D1:B9F2 00 00 00 00 	.dw 	0,0
   43 D1:B9F6 -  -  -  -  _IYTemp84:
   44 D1:B9F6 00 00 00 00 	.dw 	0,0		
   45 D1:B9FA -  -  -  -  
   46 D1:B9FA -  -  -  -  ; ***************************************************************************************
   47 D1:B9FA -  -  -  -  ;
   48 D1:B9FA -  -  -  -  ;								Print A character
   49 D1:B9FA -  -  -  -  ;
   50 D1:B9FA -  -  -  -  ; ***************************************************************************************
   51 D1:B9FA -  -  -  -  
   52 D1:B9FA -  -  -  -  SYSPrintChar:
   53 D1:B9FA F5 -  -  -  	push 	af 									; we stack everything including alt registers
   54 D1:B9FB C5 -  -  -  	push 	bc
   55 D1:B9FC D5 -  -  -  	push 	de
   56 D1:B9FD E5 -  -  -  	push 	hl
   57 D1:B9FE DD E5 -  -  	push 	ix
   58 D1:BA00 FD E5 -  -  	push 	iy
   59 D1:BA02 D9 -  -  -  	exx
   60 D1:BA03 C5 -  -  -  	push 	bc
   61 D1:BA04 D5 -  -  -  	push 	de
   62 D1:BA05 E5 -  -  -  	push 	hl
   63 D1:BA06 -  -  -  -  
   64 D1:BA06 FD 2A F6 B9 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
   65 D1:BA0B CD B8 07 02 	call 	_PutC 								; print A as character
   66 D1:BA0F F3 -  -  -  	di
   67 D1:BA10 FD 22 F6 B9 
              D1 -  -  -  	ld 		(_IYTemp84),iy
   68 D1:BA15 -  -  -  -  
   69 D1:BA15 E1 -  -  -  	pop 	hl
   70 D1:BA16 D1 -  -  -  	pop 	de
   71 D1:BA17 C1 -  -  -  	pop 	bc
   72 D1:BA18 D9 -  -  -  	exx
   73 D1:BA19 FD E1 -  -  	pop 	iy
   74 D1:BA1B DD E1 -  -  	pop 	ix
   75 D1:BA1D E1 -  -  -  	pop 	hl
   76 D1:BA1E D1 -  -  -  	pop 	de
   77 D1:BA1F C1 -  -  -  	pop 	bc
   78 D1:BA20 F1 -  -  -  	pop 	af
   79 D1:BA21 C9 -  -  -  	ret		
   80 D1:BA22 -  -  -  -  
   81 D1:BA22 -  -  -  -  ; ***************************************************************************************
   82 D1:BA22 -  -  -  -  ;
   83 D1:BA22 -  -  -  -  ;									Print Newline
   84 D1:BA22 -  -  -  -  ;
   85 D1:BA22 -  -  -  -  ; ***************************************************************************************
   86 D1:BA22 -  -  -  -  
   87 D1:BA22 -  -  -  -  SYSPrintCRLF:
   88 D1:BA22 F5 -  -  -  	push 	af 									; we stack everything including alt registers
   89 D1:BA23 C5 -  -  -  	push 	bc
   90 D1:BA24 D5 -  -  -  	push 	de
   91 D1:BA25 E5 -  -  -  	push 	hl
   92 D1:BA26 DD E5 -  -  	push 	ix
   93 D1:BA28 FD E5 -  -  	push 	iy
   94 D1:BA2A D9 -  -  -  	exx
   95 D1:BA2B C5 -  -  -  	push 	bc
   96 D1:BA2C D5 -  -  -  	push 	de
   97 D1:BA2D E5 -  -  -  	push 	hl
   98 D1:BA2E -  -  -  -  
   99 D1:BA2E FD 2A F6 B9 
              D1 -  -  -  	ld 		iy,(_IYTemp84)
  100 D1:BA33 CD F0 07 02 	call 	_newline
  101 D1:BA37 F3 -  -  -  	di
  102 D1:BA38 FD 22 F6 B9 
              D1 -  -  -  	ld 		(_IYTemp84),iy
  103 D1:BA3D -  -  -  -  
  104 D1:BA3D E1 -  -  -  	pop 	hl
  105 D1:BA3E D1 -  -  -  	pop 	de
  106 D1:BA3F C1 -  -  -  	pop 	bc
  107 D1:BA40 D9 -  -  -  	exx
  108 D1:BA41 FD E1 -  -  	pop 	iy
  109 D1:BA43 DD E1 -  -  	pop 	ix
  110 D1:BA45 E1 -  -  -  	pop 	hl
  111 D1:BA46 D1 -  -  -  	pop 	de
  112 D1:BA47 C1 -  -  -  	pop 	bc
  113 D1:BA48 F1 -  -  -  	pop 	af
  114 D1:BA49 C9 -  -  -  	ret
  115 D1:BA4A -  -  -  -  
  116 D1:BA4A -  -  -  -  ; ***************************************************************************************
  117 D1:BA4A -  -  -  -  ;
  118 D1:BA4A -  -  -  -  ;									Get time into HL'HL
  119 D1:BA4A -  -  -  -  ;
  120 D1:BA4A -  -  -  -  ; ***************************************************************************************
  121 D1:BA4A -  -  -  -  
  122 D1:BA4A -  -  -  -  SYSGetTimer:
  123 D1:BA4A 21 34 12 00 	ld 		hl,$1234
  124 D1:BA4E D9 -  -  -  	exx
  125 D1:BA4F 21 78 56 00 	ld 		hl,$5678
  126 D1:BA53 D9 -  -  -  	exx
  127 D1:BA54 C9 -  -  -  	ret
  128 D1:BA55 -  -  -  -  
  129 D1:BA55 -  -  -  -  #endif
  130 D1:BA55 -  -  -  -  
  131 D1:BA55 -  -  -  -  ; ***************************************************************************************
  132 D1:BA55 -  -  -  -  ;
  133 D1:BA55 -  -  -  -  ;									Changes and Updates
  134 D1:BA55 -  -  -  -  ;
  135 D1:BA55 -  -  -  -  ; ***************************************************************************************
  136 D1:BA55 -  -  -  -  ;
  137 D1:BA55 -  -  -  -  ;		Date			Notes
  138 D1:BA55 -  -  -  -  ;		==== 			=====
  139 D1:BA55 -  -  -  -  ;
  140 D1:BA55 -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   74 D1:BA55 -  -  -  -  #include "testprogram/basic.asm"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
    1 D1:BA55 -  -  -  -  ; ***************************************************************************************
    2 D1:BA55 -  -  -  -  ; ***************************************************************************************
    3 D1:BA55 -  -  -  -  ;
    4 D1:BA55 -  -  -  -  ;		Name : 		basic.asm
    5 D1:BA55 -  -  -  -  ;		Author :	Paul Robson (paul@robsons.org.uk)
    6 D1:BA55 -  -  -  -  ;		Date : 		3rd June 2022
    7 D1:BA55 -  -  -  -  ;		Reviewed :	No
    8 D1:BA55 -  -  -  -  ;		Purpose :	Main program.
    9 D1:BA55 -  -  -  -  ;
   10 D1:BA55 -  -  -  -  ; ***************************************************************************************
   11 D1:BA55 -  -  -  -  ; ***************************************************************************************
   12 D1:BA55 -  -  -  -  
   13 D1:BA55 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 -  		.block 		$400-($ & $3FF)
   14 D1:BC00 -  -  -  -  TestInstance:
   15 D1:BC00 -  -  -  -  		#include 	"testprogram/testprogram.dat"
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/testprogram.dat"
    1 D1:BC00 -  -  -  -  ;
    2 D1:BC00 -  -  -  -  ;	This code automatically generated.
    3 D1:BC00 -  -  -  -  ;
    4 D1:BC00 -  -  -  -  TestProgram:
    5 D1:BC00 0D 01 00 B2 
              08 1B 8F 43 
              B3 4B B4 42 
              80 07 02 00 
              C1 08 1B 80 
              05 03 00 B5 
              80 00 -  -  	.db	$0d,$01,$00,$b2,$08,$1b,$8f,$43,$b3,$4b,$b4,$42,$80,$07,$02,$00,$c1,$08,$1b,$80,$05,$03,$00,$b5,$80,$00
Listing for file "/home/paulr/Projects/dax-basic/source/testprogram/basic.asm"
   16 D1:BC1A 00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 
              00 00 00 00 		.block 		4096
   17 D1:CC1A -  -  -  -  EndTestInstance:
   18 D1:CC1A -  -  -  -  		
   19 D1:CC1A -  -  -  -  ; ***************************************************************************************
   20 D1:CC1A -  -  -  -  ;
   21 D1:CC1A -  -  -  -  ;									Changes and Updates
   22 D1:CC1A -  -  -  -  ;
   23 D1:CC1A -  -  -  -  ; ***************************************************************************************
   24 D1:CC1A -  -  -  -  ;
   25 D1:CC1A -  -  -  -  ;		Date			Notes
   26 D1:CC1A -  -  -  -  ;		==== 			=====
   27 D1:CC1A -  -  -  -  ;
   28 D1:CC1A -  -  -  -  ; ***************************************************************************************
Listing for file "_build.asm"
   75 D1:CC1A -  -  -  -  FinalAddress:
