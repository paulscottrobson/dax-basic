# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		keywords.py
#		Purpose :	Keyword collection object, also generates tables, definitions.
#		Date :		3rd June 2022
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import sys,os,re 

# *******************************************************************************************
#
#								Class encapsulating keyword data
#
# *******************************************************************************************

class Keywords(object):
	def __init__(self,fileName = "data/keywords.def"):
		self.keywords = {}
		self.idLookup = {}
		self.currentSet = None 
		self.currentID = None 
		self.constants = {}
		self.currentPrecedence = None 
		self.structureLevel = 0
		self.highestSet = 0
		for f in open(fileName).readlines():
			p = f.find("//")
			f = f.strip() if p < 0 else f[:p].strip()
			for k in f.split():
				if k.startswith("::"):
					self.addDefinition(k[2:],self.currentID)
				elif k.startswith("{") and k.endswith("}"):
					self.command(k[1:-1].strip().lower())
				else:
					self.addKeyword(k)
	#
	#		Add a keyword to both indices
	#
	def addKeyword(self,kwd):
		kwd = kwd.strip().lower()
		assert kwd not in self.keywords,"Duplicate "+kwd 
		self.keywords[kwd] = { "keyword":kwd,"id":self.currentID,"set":self.currentSet,"structure":self.structureLevel,"precedence":self.currentPrecedence}
		self.idLookup[self.currentID+self.currentSet*4096] = self.keywords[kwd]
		self.currentID += 1 
	#
	# 		Find a keyword
	#
	def find(self,kwd):
		kwd = kwd.strip().lower()
		return self.keywords[kwd] if kwd in self.keywords else None
	#
	# 		Add a new definition
	#
	def addDefinition(self,key,value):
		key = key.upper().strip()
		assert key not in self.constants and value is not None
		self.constants[key] = value
	#
	# 		Process a command.
	#
	def command(self,command):
		m = re.match("^set[0-3]$",command)
		if m is not None:
			self.currentSet = int(command[-1])
			self.currentID = 0x80 
			self.highestSet = max(self.currentSet,self.highestSet)
		elif len(command) == 1 and command >= "1" and command <= "8":
			self.currentPrecedence = int(command)
		elif command == "+" or command == "-":
			self.structureLevel = 1 if command == "+" else -1
		else:
			assert False,"???? "+command
	#
	#		Convert to legal format.
	#
	def convertName(self,s):
		s = s.upper()
		s = s.replace("(","LPAREN").replace(")","RPAREN").replace("!","PLING").replace("?","QMARK").replace(",","COMMA")
		s = s.replace(";","SEMICOLON").replace(":","COLON").replace("@","AT").replace("'","SQUOTE").replace("$","DOLLAR")
		s = s.replace("*","ASTERISK").replace("/","SLASH").replace("+","PLUS").replace("-","MINUS").replace("=","EQUALS")
		s = s.replace(">","GREATER").replace("<","LESS").replace("&","AMPERSAND").replace("[","LSQPAREN").replace("]","RSQPAREN")
		s = s.replace("^","HAT").replace("","").replace("","").replace("","").replace("","")
		s = s.replace("","").replace("","").replace("","").replace("","").replace("","")
		assert re.match("^[A-Z0-9]+$",s) is not None,"Bad name "+s
		return s.upper()
	#
	# 		Generated automatically disclaimed.
	#
	def disclaimer(self):
		return ";\n;\tThis file is automatically generated.\n;\n"
	#
	# 		Output constants. These are the defined constants and the keyword constants for each keyword
	#
	def generateConstants(self,fileName):
		h = open(fileName,"w")
		h.write(self.disclaimer())
		keys = [x for x in self.constants.keys()]
		keys.sort()
		for k in keys:
			h.write("#define KWC_{0:32}\t${1:02x}\n".format(k,self.constants[k]))
		h.write("\n")
		keys = [x for x in self.idLookup.keys()]
		keys.sort()
		for k in keys:
			l = self.idLookup[k]
			if not l["keyword"].startswith("[["):
				h.write("#define KWD_{0:32}\t${1:04x} ; {2}\n".format(self.convertName(l["keyword"]),k,l["keyword"].lower()))
			if l["keyword"] == "!":
				h.write("#define KWD_PRECEDENCE_INDIRECT ({0})\n".format(l["precedence"]))
		h.close()
	#
	# 		Output the tokenising/detokenising tables.
	#
	def generateKeywordTables(self,fileName):
		h = open(fileName,"w")
		h.write(self.disclaimer())
		for kset in range(0,self.highestSet+1):
			h.write(";\n;\tKeywords for set {0}\n;\nKeywordsSet{0}:\n".format(kset))
			id = 0x80
			while kset*4096+id in self.idLookup:
				l = self.idLookup[kset*4096+id]
				name = l["keyword"].upper() 
				name = " " if name.startswith("[[") else name
				h.write("\t.db\t{0},\"{1:16}; ${2:04x}\n".format(len(name),name+'"',kset*4096+id))
				id += 1
			h.write("\t.db\t0\n")
		h.close()
	#
	# 		Output precedence table
	#
	def generateMiscTables(self,fileName):
		h = open(fileName,"w")
		h.write(self.disclaimer())
		h.write("\t.block\t$20-($ & $1F)\n")
		h.write("PrecedenceTable:\n")
		for i in range(self.constants["FIRST_BINARY"],self.constants["FIRST_UNARY"]):
			l = self.idLookup[i]
			h.write("\t.db\t{0}\t; ${1:04x} {2}\n".format(l["precedence"],i,l["keyword"].lower()))
		h.write("\n")

if __name__ == "__main__":
	kwd = Keywords()
	stem = "../source/generated/"
	tstem = "../source/tokeniser/generated/"
	kwd.generateConstants(stem+"kwd_constants.inc")
	kwd.generateKeywordTables(tstem+"kwd_keywords.asm")
	kwd.generateMiscTables(stem+"kwd_misc.asm")	